{"sha": "c44c64df711e407ef10f8ae62100e46f0323065f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NGM2NGRmNzExZTQwN2VmMTBmOGFlNjIxMDBlNDZmMDMyMzA2NWY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-24T05:20:13Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-24T23:21:48Z"}, "message": "Get rid of `item.span`\n\n- Remove `span` field, adding `Item::span()` instead\n- Special-case `Impl` and `Module` items\n- Use dummy spans for primitive items", "tree": {"sha": "534c77d8917a6bfdaa3e8eb786173b485649b455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534c77d8917a6bfdaa3e8eb786173b485649b455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44c64df711e407ef10f8ae62100e46f0323065f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44c64df711e407ef10f8ae62100e46f0323065f", "html_url": "https://github.com/rust-lang/rust/commit/c44c64df711e407ef10f8ae62100e46f0323065f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44c64df711e407ef10f8ae62100e46f0323065f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b412b46cf70de4e08cda3ac120ebfa349c1bc268", "url": "https://api.github.com/repos/rust-lang/rust/commits/b412b46cf70de4e08cda3ac120ebfa349c1bc268", "html_url": "https://github.com/rust-lang/rust/commit/b412b46cf70de4e08cda3ac120ebfa349c1bc268"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "010059a89c9b1ae0b94d10eb883d193d7624a534", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -110,12 +110,12 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         };\n \n         Some(Item {\n-            span: Span::dummy(),\n             name: None,\n             attrs: Default::default(),\n             visibility: Inherited,\n             def_id: self.cx.next_def_id(item_def_id.krate),\n             kind: box ImplItem(Impl {\n+                span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n                 provided_trait_methods: Default::default(),"}, {"sha": "50c0fb85d5aa04fc0b3f035bd8e9b93f9d86dd16", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -100,12 +100,12 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     .collect();\n \n                 impls.push(Item {\n-                    span: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n                     name: None,\n                     attrs: Default::default(),\n                     visibility: Inherited,\n                     def_id: self.cx.next_def_id(impl_def_id.krate),\n                     kind: box ImplItem(Impl {\n+                        span: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n                             self.cx.tcx.generics_of(impl_def_id),"}, {"sha": "e88a739d04296500ffc2a06f19361885d9fdd079", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -6,7 +6,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -422,6 +422,7 @@ crate fn build_impl(\n         did,\n         None,\n         clean::ImplItem(clean::Impl {\n+            span: clean::types::rustc_span(did, cx.tcx),\n             unsafety: hir::Unsafety::Normal,\n             generics,\n             provided_trait_methods: provided,\n@@ -459,8 +460,7 @@ fn build_module(\n                 items.push(clean::Item {\n                     name: None,\n                     attrs: box clean::Attributes::default(),\n-                    span: clean::Span::dummy(),\n-                    def_id: DefId::local(CRATE_DEF_INDEX),\n+                    def_id: cx.next_def_id(did.krate),\n                     visibility: clean::Public,\n                     kind: box clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,"}, {"sha": "c0a8c88bdeba09dd9b10b1e9510642bbdb6f0785", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -1945,6 +1945,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n     });\n     let mut make_item = |trait_: Option<Type>, for_: Type, items: Vec<Item>| {\n         let kind = ImplItem(Impl {\n+            span: types::rustc_span(tcx.hir().local_def_id(hir_id).to_def_id(), tcx),\n             unsafety: impl_.unsafety,\n             generics: impl_.generics.clean(cx),\n             provided_trait_methods: provided.clone(),\n@@ -2004,7 +2005,6 @@ fn clean_extern_crate(\n     vec![Item {\n         name: Some(name),\n         attrs: box attrs.clean(cx),\n-        span: krate.span.clean(cx),\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },"}, {"sha": "f310dc3e1b6d906c9af99b4c2ac342bad1154abb", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -211,7 +211,6 @@ impl ExternalCrate {\n /// directly to the AST's concept of an item; it's a strict superset.\n #[derive(Clone)]\n crate struct Item {\n-    crate span: Span,\n     /// The name of this item.\n     /// Optional because not every item has a name, e.g. impls.\n     crate name: Option<Symbol>,\n@@ -225,14 +224,13 @@ crate struct Item {\n \n // `Item` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Item, 48);\n+rustc_data_structures::static_assert_size!(Item, 40);\n \n impl fmt::Debug for Item {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let def_id: &dyn fmt::Debug = if self.is_fake() { &\"**FAKE**\" } else { &self.def_id };\n \n         fmt.debug_struct(\"Item\")\n-            .field(\"source\", &self.span())\n             .field(\"name\", &self.name)\n             .field(\"attrs\", &self.attrs)\n             .field(\"kind\", &self.kind)\n@@ -242,6 +240,16 @@ impl fmt::Debug for Item {\n     }\n }\n \n+crate fn rustc_span(def_id: DefId, tcx: TyCtxt<'_>) -> Span {\n+    Span::from_rustc_span(def_id.as_local().map_or_else(\n+        || tcx.def_span(def_id),\n+        |local| {\n+            let hir = tcx.hir();\n+            hir.span_with_body(hir.local_def_id_to_hir_id(local))\n+        },\n+    ))\n+}\n+\n impl Item {\n     crate fn stability<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<&'tcx Stability> {\n         if self.is_fake() { None } else { tcx.lookup_stability(self.def_id) }\n@@ -255,12 +263,20 @@ impl Item {\n         if self.is_fake() { None } else { tcx.lookup_deprecation(self.def_id) }\n     }\n \n-    crate fn span(&self) -> Span {\n-        if let ItemKind::ModuleItem(Module { span, .. }) = &*self.kind { *span } else { self.span }\n+    crate fn span(&self, tcx: TyCtxt<'_>) -> Span {\n+        if let ItemKind::ModuleItem(Module { span, .. }) | ItemKind::ImplItem(Impl { span, .. }) =\n+            &*self.kind\n+        {\n+            *span\n+        } else if self.is_fake() {\n+            Span::dummy()\n+        } else {\n+            rustc_span(self.def_id, tcx)\n+        }\n     }\n \n-    crate fn attr_span(&self, _tcx: TyCtxt<'_>) -> rustc_span::Span {\n-        crate::passes::span_of_attrs(&self.attrs).unwrap_or_else(|| self.span().inner())\n+    crate fn attr_span(&self, tcx: TyCtxt<'_>) -> rustc_span::Span {\n+        crate::passes::span_of_attrs(&self.attrs).unwrap_or_else(|| self.span(tcx).inner())\n     }\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n@@ -304,20 +320,10 @@ impl Item {\n     ) -> Item {\n         debug!(\"name={:?}, def_id={:?}\", name, def_id);\n \n-        // `span_if_local()` lies about functions and only gives the span of the function signature\n-        let span = def_id.as_local().map_or_else(\n-            || cx.tcx.def_span(def_id),\n-            |local| {\n-                let hir = cx.tcx.hir();\n-                hir.span_with_body(hir.local_def_id_to_hir_id(local))\n-            },\n-        );\n-\n         Item {\n             def_id,\n             kind: box kind,\n             name,\n-            span: span.clean(cx),\n             attrs,\n             visibility: cx.tcx.visibility(def_id).clean(cx),\n         }\n@@ -2117,6 +2123,7 @@ impl Constant {\n \n #[derive(Clone, Debug)]\n crate struct Impl {\n+    crate span: Span,\n     crate unsafety: hir::Unsafety,\n     crate generics: Generics,\n     crate provided_trait_methods: FxHashSet<Symbol>,"}, {"sha": "6d45ed69c123208fdc630e94677652571fc344d5", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -281,15 +281,15 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        if item.span().is_dummy() {\n+        if item.span(self.tcx()).is_dummy() {\n             return None;\n         }\n         let mut root = self.root_path();\n         let mut path = String::new();\n-        let cnum = item.span().cnum(self.sess());\n+        let cnum = item.span(self.tcx()).cnum(self.sess());\n \n         // We can safely ignore synthetic `SourceFile`s.\n-        let file = match item.span().filename(self.sess()) {\n+        let file = match item.span(self.tcx()).filename(self.sess()) {\n             FileName::Real(ref path) => path.local_path().to_path_buf(),\n             _ => return None,\n         };\n@@ -323,8 +323,8 @@ impl<'tcx> Context<'tcx> {\n             (&*symbol, &path)\n         };\n \n-        let loline = item.span().lo(self.sess()).line;\n-        let hiline = item.span().hi(self.sess()).line;\n+        let loline = item.span(self.tcx()).lo(self.sess()).line;\n+        let hiline = item.span(self.tcx()).hi(self.sess()).line;\n         let lines =\n             if loline == hiline { loline.to_string() } else { format!(\"{}-{}\", loline, hiline) };\n         Some(format!("}, {"sha": "f1d79ab097b9f5cca26740aff6e379ebe53175d8", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -1013,7 +1013,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             Some(\"macro\"),\n             None,\n             None,\n-            it.span().inner().edition(),\n+            it.span(cx.tcx()).inner().edition(),\n         );\n     });\n     document(w, cx, it, None)"}, {"sha": "3d4d8df0a71989165dcc65095b3fdeca34021989", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -41,11 +41,11 @@ impl DocFolder for SourceCollector<'_, '_> {\n         // then we need to render it out to the filesystem.\n         if self.scx.include_sources\n             // skip all synthetic \"files\"\n-            && item.span().filename(self.sess()).is_real()\n+            && item.span(self.scx.tcx).filename(self.sess()).is_real()\n             // skip non-local files\n-            && item.span().cnum(self.sess()) == LOCAL_CRATE\n+            && item.span(self.scx.tcx).cnum(self.sess()) == LOCAL_CRATE\n         {\n-            let filename = item.span().filename(self.sess());\n+            let filename = item.span(self.scx.tcx).filename(self.sess());\n             // If it turns out that we couldn't read this file, then we probably\n             // can't read any of the files (generating html output from json or\n             // something like that), so just don't include sources for the\n@@ -55,7 +55,7 @@ impl DocFolder for SourceCollector<'_, '_> {\n                 Ok(()) => true,\n                 Err(e) => {\n                     self.scx.tcx.sess.span_err(\n-                        item.span.inner(),\n+                        item.span(self.scx.tcx).inner(),\n                         &format!(\"failed to render source code for `{}`: {}\", filename, e),\n                     );\n                     false"}, {"sha": "42cd765c294b11b89d9832690ecf1721988f4d5d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -40,8 +40,8 @@ impl JsonRenderer<'_> {\n             .iter()\n             .map(rustc_ast_pretty::pprust::attribute_to_string)\n             .collect();\n-        let span = item.span();\n-        let clean::Item { name, attrs: _, kind: _, span: _, visibility, def_id } = item;\n+        let span = item.span(self.tcx);\n+        let clean::Item { name, attrs: _, kind: _, visibility, def_id } = item;\n         let inner = match *item.kind {\n             clean::StrippedItem(_) => return None,\n             _ => from_clean_item(item, self.tcx),\n@@ -463,6 +463,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n             negative_polarity,\n             synthetic,\n             blanket_impl,\n+            span: _span,\n         } = impl_;\n         Impl {\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,"}, {"sha": "c8b82fb1563dfa63d801ba92320c873bc36f028c", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44c64df711e407ef10f8ae62100e46f0323065f/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=c44c64df711e407ef10f8ae62100e46f0323065f", "patch": "@@ -211,7 +211,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                     None,\n                 );\n \n-                let filename = i.span().filename(self.ctx.sess());\n+                let filename = i.span(self.ctx.tcx).filename(self.ctx.sess());\n                 let has_doc_example = tests.found_tests != 0;\n                 let hir_id = self.ctx.tcx.hir().local_def_id_to_hir_id(i.def_id.expect_local());\n                 let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);"}]}