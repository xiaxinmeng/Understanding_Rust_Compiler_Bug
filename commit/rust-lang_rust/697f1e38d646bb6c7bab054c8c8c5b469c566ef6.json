{"sha": "697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5N2YxZTM4ZDY0NmJiNmM3YmFiMDU0YzhjOGM1YjQ2OWM1NjZlZjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-26T23:18:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-26T23:18:37Z"}, "message": "Change 'native' and 'crust' to 'extern'.\n\nThis comes with a terminology change. All linkage-symbols are 'extern'\nnow, including rust syms in other crates. Some extern ABIs are\nmerely \"foreign\". The term \"native\" is retired, not clear/useful.\n\nWhat was \"crust\" is now \"extern\" applied to a _definition_. This\nis a bit of an overloading, but should be unambiguous: it means\nthat the definition should be made available to some non-rust ABI.", "tree": {"sha": "614999c97dd8e6f648f8a3fd41a8de3304baffa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/614999c97dd8e6f648f8a3fd41a8de3304baffa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "html_url": "https://github.com/rust-lang/rust/commit/697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999b567e2af0a454bc862bc2e5b1bc16dae78f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/999b567e2af0a454bc862bc2e5b1bc16dae78f44", "html_url": "https://github.com/rust-lang/rust/commit/999b567e2af0a454bc862bc2e5b1bc16dae78f44"}], "stats": {"total": 730, "additions": 377, "deletions": 353}, "files": [{"sha": "2c562f179f27d0184d5555c6199ed6fd7c42270a", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -167,8 +167,8 @@ mod global_env {\n                 sched:  some({\n                     mode: task::single_threaded,\n                     // FIXME (#2621): This would be a good place to use a\n-                    // very small native stack\n-                    native_stack_size: none\n+                    // very small foreign stack\n+                    foreign_stack_size: none\n                 })\n                 with task::get_opts(builder)\n             });"}, {"sha": "5db3de225ad9de62f3110dcf19497b2088b665a4", "filename": "src/libcore/task.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -104,17 +104,17 @@ Scheduler configuration options\n \n * sched_mode - The operating mode of the scheduler\n \n-* native_stack_size - The size of the native stack, in bytes\n+* foreign_stack_size - The size of the foreign stack, in bytes\n \n-    Rust code runs on Rust-specific stacks. When Rust code calls native code\n-    (via functions in native modules) it switches to a typical, large stack\n+    Rust code runs on Rust-specific stacks. When Rust code calls foreign code\n+    (via functions in foreign modules) it switches to a typical, large stack\n     appropriate for running code written in languages like C. By default these\n-    native stacks have unspecified size, but with this option their size can\n+    foreign stacks have unspecified size, but with this option their size can\n     be precisely specified.\n \"]\n type sched_opts = {\n     mode: sched_mode,\n-    native_stack_size: option<uint>\n+    foreign_stack_size: option<uint>\n };\n \n #[doc = \"\n@@ -140,7 +140,7 @@ Task configuration options\n     into a new scheduler with the specific properties required.\n \n     This is of particular importance for libraries which want to call\n-    into native code that blocks. Without doing so in a different\n+    into foreign code that blocks. Without doing so in a different\n     scheduler other tasks will be impeded or even blocked indefinitely.\n \n \"]\n@@ -408,7 +408,7 @@ fn spawn_sched(mode: sched_mode, +f: fn~()) {\n     set_opts(builder, {\n         sched: some({\n             mode: mode,\n-            native_stack_size: none\n+            foreign_stack_size: none\n         })\n         with get_opts(builder)\n     });\n@@ -542,8 +542,8 @@ fn spawn_raw(opts: task_opts, +f: fn~()) {\n     }\n \n     fn new_task_in_new_sched(opts: sched_opts) -> *rust_task {\n-        if opts.native_stack_size != none {\n-            fail \"native_stack_size scheduler option unimplemented\";\n+        if opts.foreign_stack_size != none {\n+            fail \"foreign_stack_size scheduler option unimplemented\";\n         }\n \n         let num_threads = alt opts.mode {\n@@ -804,7 +804,7 @@ native mod testrt {\n #[test]\n fn test_spawn_sched_blocking() {\n \n-    // Testing that a task in one scheduler can block natively\n+    // Testing that a task in one scheduler can block in foreign code\n     // without affecting other schedulers\n     iter::repeat(20u) {||\n \n@@ -947,7 +947,7 @@ fn test_osmain() {\n     let opts = {\n         sched: some({\n             mode: osmain,\n-            native_stack_size: none\n+            foreign_stack_size: none\n         })\n         with get_opts(buildr)\n     };"}, {"sha": "ec2ce9b684cae7485e38c1cd8db5fc1b76fefcd6", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -46,7 +46,7 @@ fn get_monitor_task_gl() -> iotask unsafe {\n             supervise: false,\n             sched: some({\n                 mode: task::single_threaded,\n-                native_stack_size: none\n+                foreign_stack_size: none\n             })\n             with task::get_opts(builder)\n         });"}, {"sha": "3833cafe15e4d905c9d50f98c2f607a614647d29", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -34,7 +34,7 @@ fn spawn_iotask(-builder: task::builder) -> iotask {\n     set_opts(builder, {\n         sched: some({\n             mode: single_threaded,\n-            native_stack_size: none\n+            foreign_stack_size: none\n         })\n         with get_opts(builder)\n     });"}, {"sha": "19f5ab64bfbc2e61c368d0199e93caca182c38a8", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -1314,80 +1314,80 @@ mod test {\n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_uv_tcp_t() {\n-        let native_handle_size = rustrt::rust_uv_helper_uv_tcp_t_size();\n+        let foreign_handle_size = rustrt::rust_uv_helper_uv_tcp_t_size();\n         let rust_handle_size = sys::size_of::<uv_tcp_t>();\n         let output = #fmt(\"uv_tcp_t -- native: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_uv_connect_t() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_connect_t_size();\n         let rust_handle_size = sys::size_of::<uv_connect_t>();\n         let output = #fmt(\"uv_connect_t -- native: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_uv_buf_t() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_buf_t_size();\n         let rust_handle_size = sys::size_of::<uv_buf_t>();\n         let output = #fmt(\"uv_buf_t -- native: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_uv_write_t() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_write_t_size();\n         let rust_handle_size = sys::size_of::<uv_write_t>();\n         let output = #fmt(\"uv_write_t -- native: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n \n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_sockaddr_in() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_sockaddr_in_size();\n         let rust_handle_size = sys::size_of::<sockaddr_in>();\n         let output = #fmt(\"sockaddr_in -- native: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n \n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_uv_async_t() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_async_t_size();\n         let rust_handle_size = sys::size_of::<uv_async_t>();\n         let output = #fmt(\"uv_async_t -- native: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n \n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_uv_timer_t() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_timer_t_size();\n         let rust_handle_size = sys::size_of::<uv_timer_t>();\n         let output = #fmt(\"uv_timer_t -- native: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n }"}, {"sha": "3d2d28a9b1d589ea8c21d7a5d928cd22a4de3706", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -73,7 +73,7 @@ enum def {\n     def_fn(def_id, purity),\n     def_self(node_id),\n     def_mod(def_id),\n-    def_native_mod(def_id),\n+    def_foreign_mod(def_id),\n     def_const(def_id),\n     def_arg(node_id, mode),\n     def_local(node_id, bool /* is_mutbl */),\n@@ -563,7 +563,7 @@ enum purity {\n     pure_fn, // declared with \"pure fn\"\n     unsafe_fn, // declared with \"unsafe fn\"\n     impure_fn, // declared with \"fn\"\n-    crust_fn, // declared with \"crust fn\"\n+    extern_fn, // declared with \"crust fn\"\n }\n \n #[auto_serialize]\n@@ -584,16 +584,16 @@ type method = {ident: ident, attrs: [attribute]/~,\n type _mod = {view_items: [@view_item]/~, items: [@item]/~};\n \n #[auto_serialize]\n-enum native_abi {\n-    native_abi_rust_intrinsic,\n-    native_abi_cdecl,\n-    native_abi_stdcall,\n+enum foreign_abi {\n+    foreign_abi_rust_intrinsic,\n+    foreign_abi_cdecl,\n+    foreign_abi_stdcall,\n }\n \n #[auto_serialize]\n-type native_mod =\n+type foreign_mod =\n     {view_items: [@view_item]/~,\n-     items: [@native_item]/~};\n+     items: [@foreign_item]/~};\n \n #[auto_serialize]\n type variant_arg = {ty: @ty, id: node_id};\n@@ -681,7 +681,7 @@ enum item_ {\n     item_const(@ty, @expr),\n     item_fn(fn_decl, [ty_param]/~, blk),\n     item_mod(_mod),\n-    item_native_mod(native_mod),\n+    item_foreign_mod(foreign_mod),\n     item_ty(@ty, [ty_param]/~, region_param),\n     item_enum([variant]/~, [ty_param]/~, region_param),\n     item_class([ty_param]/~, /* ty params for class */\n@@ -728,16 +728,16 @@ type class_dtor_ = {id: node_id,\n                     body: blk};\n \n #[auto_serialize]\n-type native_item =\n+type foreign_item =\n     {ident: ident,\n      attrs: [attribute]/~,\n-     node: native_item_,\n+     node: foreign_item_,\n      id: node_id,\n      span: span};\n \n #[auto_serialize]\n-enum native_item_ {\n-    native_item_fn(fn_decl, [ty_param]/~),\n+enum foreign_item_ {\n+    foreign_item_fn(fn_decl, [ty_param]/~),\n }\n \n // The data we save and restore about an inlined item or method.  This is not\n@@ -747,7 +747,7 @@ enum native_item_ {\n enum inlined_item {\n     ii_item(@item),\n     ii_method(def_id /* impl id */, @method),\n-    ii_native(@native_item),\n+    ii_foreign(@foreign_item),\n     ii_ctor(class_ctor, ident, [ty_param]/~, def_id /* parent id */),\n     ii_dtor(class_dtor, ident, [ty_param]/~, def_id /* parent id */)\n }"}, {"sha": "5c066bef98b9669de0ecbd46bd45c3ac7c2b98ab", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -34,7 +34,7 @@ fn path_to_str(p: path) -> str {\n \n enum ast_node {\n     node_item(@item, @path),\n-    node_native_item(@native_item, native_abi, @path),\n+    node_foreign_item(@foreign_item, foreign_abi, @path),\n     node_method(@method, def_id /* impl did */, @path /* path to the impl */),\n     node_variant(variant, @item, @path),\n     node_expr(@expr),\n@@ -104,8 +104,8 @@ fn map_decoded_item(diag: span_handler,\n     // add it to the table now:\n     alt ii {\n       ii_item(*) | ii_ctor(*) | ii_dtor(*) { /* fallthrough */ }\n-      ii_native(i) {\n-        cx.map.insert(i.id, node_native_item(i, native_abi_rust_intrinsic,\n+      ii_foreign(i) {\n+        cx.map.insert(i.id, node_foreign_item(i, foreign_abi_rust_intrinsic,\n                                              @path));\n       }\n       ii_method(impl_did, m) {\n@@ -202,14 +202,14 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n                 extend(cx, i.ident)));\n         }\n       }\n-      item_native_mod(nm) {\n-        let abi = alt attr::native_abi(i.attrs) {\n+      item_foreign_mod(nm) {\n+        let abi = alt attr::foreign_abi(i.attrs) {\n           either::left(msg) { cx.diag.span_fatal(i.span, msg); }\n           either::right(abi) { abi }\n         };\n         for nm.items.each {|nitem|\n             cx.map.insert(nitem.id,\n-                          node_native_item(nitem, abi,\n+                          node_foreign_item(nitem, abi,\n                                            /* FIXME (#2543) */\n                                            @copy cx.path));\n         }\n@@ -228,7 +228,7 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n       _ { }\n     }\n     alt i.node {\n-      item_mod(_) | item_native_mod(_) {\n+      item_mod(_) | item_foreign_mod(_) {\n         vec::push(cx.path, path_mod(i.ident));\n       }\n       _ { vec::push(cx.path, path_name(i.ident)); }\n@@ -269,7 +269,7 @@ fn node_id_to_str(map: map, id: node_id) -> str {\n       some(node_item(item, path)) {\n         #fmt[\"item %s (id=%?)\", path_ident_to_str(*path, item.ident), id]\n       }\n-      some(node_native_item(item, abi, path)) {\n+      some(node_foreign_item(item, abi, path)) {\n         #fmt[\"native item %s with abi %? (id=%?)\",\n              path_ident_to_str(*path, item.ident), abi, id]\n       }"}, {"sha": "23326343d38d970834db3110ad0eb43894fc502a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -51,7 +51,7 @@ fn variant_def_ids(d: def) -> {enm: def_id, var: def_id} {\n pure fn def_id_of_def(d: def) -> def_id {\n     alt d {\n       def_fn(id, _) | def_mod(id) |\n-      def_native_mod(id) | def_const(id) |\n+      def_foreign_mod(id) | def_const(id) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_use(id) | def_class(id) { id }\n       def_arg(id, _) | def_local(id, _) | def_self(id) |\n@@ -321,7 +321,7 @@ impl inlined_item_methods for inlined_item {\n     fn ident() -> ident {\n         alt self {\n           ii_item(i) { /* FIXME (#2543) */ copy i.ident }\n-          ii_native(i) { /* FIXME (#2543) */ copy i.ident }\n+          ii_foreign(i) { /* FIXME (#2543) */ copy i.ident }\n           ii_method(_, m) { /* FIXME (#2543) */ copy m.ident }\n           ii_ctor(_, nm, _, _) { /* FIXME (#2543) */ copy nm }\n           ii_dtor(_, nm, _, _) { /* FIXME (#2543) */ copy nm }\n@@ -331,7 +331,7 @@ impl inlined_item_methods for inlined_item {\n     fn id() -> ast::node_id {\n         alt self {\n           ii_item(i) { i.id }\n-          ii_native(i) { i.id }\n+          ii_foreign(i) { i.id }\n           ii_method(_, m) { m.id }\n           ii_ctor(ctor, _, _, _) { ctor.node.id }\n           ii_dtor(dtor, _, _, _) { dtor.node.id }\n@@ -341,7 +341,7 @@ impl inlined_item_methods for inlined_item {\n     fn accept<E>(e: E, v: visit::vt<E>) {\n         alt self {\n           ii_item(i) { v.visit_item(i, e, v) }\n-          ii_native(i) { v.visit_native_item(i, e, v) }\n+          ii_foreign(i) { v.visit_foreign_item(i, e, v) }\n           ii_method(_, m) { visit::visit_method_helper(m, e, v) }\n           ii_ctor(ctor, nm, tps, parent_id) {\n               visit::visit_class_ctor_helper(ctor, nm, tps, parent_id, e, v);\n@@ -419,7 +419,7 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             }\n         },\n \n-        visit_native_item: fn@(ni: @native_item) {\n+        visit_foreign_item: fn@(ni: @foreign_item) {\n             vfn(ni.id)\n         },\n "}, {"sha": "01e2df141de3e3f0bc426eb6aa81fa13db860b4b", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -39,7 +39,7 @@ export sort_meta_items;\n export remove_meta_items_by_name;\n export find_linkage_attrs;\n export find_linkage_metas;\n-export native_abi;\n+export foreign_abi;\n export inline_attr;\n export find_inline_attr;\n export require_unique_names;\n@@ -322,19 +322,19 @@ fn find_linkage_metas(attrs: [ast::attribute]/~) -> [@ast::meta_item]/~ {\n     }\n }\n \n-fn native_abi(attrs: [ast::attribute]/~) -> either<str, ast::native_abi> {\n+fn foreign_abi(attrs: [ast::attribute]/~) -> either<str, ast::foreign_abi> {\n     ret alt attr::first_attr_value_str_by_name(attrs, \"abi\") {\n       option::none {\n-        either::right(ast::native_abi_cdecl)\n+        either::right(ast::foreign_abi_cdecl)\n       }\n       option::some(@\"rust-intrinsic\") {\n-        either::right(ast::native_abi_rust_intrinsic)\n+        either::right(ast::foreign_abi_rust_intrinsic)\n       }\n       option::some(@\"cdecl\") {\n-        either::right(ast::native_abi_cdecl)\n+        either::right(ast::foreign_abi_cdecl)\n       }\n       option::some(@\"stdcall\") {\n-        either::right(ast::native_abi_stdcall)\n+        either::right(ast::foreign_abi_stdcall)\n       }\n       option::some(t) {\n         either::left(\"unsupported abi: \" + *t)"}, {"sha": "e9c6e6e122cb50a42cbe5ae8ca15ffc3e3b624a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -129,7 +129,7 @@ fn expand_item(cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n     -> @ast::item\n {\n     let is_mod = alt it.node {\n-      ast::item_mod(_) | ast::item_native_mod(_) {true}\n+      ast::item_mod(_) | ast::item_foreign_mod(_) {true}\n       _ {false}\n     };\n     if is_mod { cx.mod_push(it.ident); }"}, {"sha": "0f9397f5c2b04cc7b5d084682055b5be6d77818a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -21,7 +21,7 @@ iface ast_fold {\n     fn fold_crate(crate) -> crate;\n     fn fold_crate_directive(&&@crate_directive) -> @crate_directive;\n     fn fold_view_item(&&@view_item) -> @view_item;\n-    fn fold_native_item(&&@native_item) -> @native_item;\n+    fn fold_foreign_item(&&@foreign_item) -> @foreign_item;\n     fn fold_item(&&@item) -> @item;\n     fn fold_class_item(&&@class_member) -> @class_member;\n     fn fold_item_underscore(item_) -> item_;\n@@ -36,7 +36,7 @@ iface ast_fold {\n     fn fold_constr(&&@constr) -> @constr;\n     fn fold_ty_constr(&&@ty_constr) -> @ty_constr;\n     fn fold_mod(_mod) -> _mod;\n-    fn fold_native_mod(native_mod) -> native_mod;\n+    fn fold_foreign_mod(foreign_mod) -> foreign_mod;\n     fn fold_variant(variant) -> variant;\n     fn fold_ident(&&ident) -> ident;\n     fn fold_path(&&@path) -> @path;\n@@ -54,7 +54,7 @@ type ast_fold_precursor = @{\n     fold_crate_directive: fn@(crate_directive_, span,\n                               ast_fold) -> (crate_directive_, span),\n     fold_view_item: fn@(view_item_, ast_fold) -> view_item_,\n-    fold_native_item: fn@(&&@native_item, ast_fold) -> @native_item,\n+    fold_foreign_item: fn@(&&@foreign_item, ast_fold) -> @foreign_item,\n     fold_item: fn@(&&@item, ast_fold) -> @item,\n     fold_class_item: fn@(&&@class_member, ast_fold) -> @class_member,\n     fold_item_underscore: fn@(item_, ast_fold) -> item_,\n@@ -70,7 +70,7 @@ type ast_fold_precursor = @{\n     fold_ty_constr: fn@(ast::ty_constr_, span, ast_fold)\n         -> (ty_constr_, span),\n     fold_mod: fn@(_mod, ast_fold) -> _mod,\n-    fold_native_mod: fn@(native_mod, ast_fold) -> native_mod,\n+    fold_foreign_mod: fn@(foreign_mod, ast_fold) -> foreign_mod,\n     fold_variant: fn@(variant_, span, ast_fold) -> (variant_, span),\n     fold_ident: fn@(&&ident, ast_fold) -> ident,\n     fold_path: fn@(path, ast_fold) -> path,\n@@ -105,7 +105,7 @@ fn fold_attribute_(at: attribute, fld: ast_fold) ->\n                 value: *fold_meta_item_(@at.node.value, fld)},\n          span: fld.new_span(at.span)};\n }\n-//used in noop_fold_native_item and noop_fold_fn_decl\n+//used in noop_fold_foreign_item and noop_fold_fn_decl\n fn fold_arg_(a: arg, fld: ast_fold) -> arg {\n     ret {mode: a.mode,\n          ty: fld.fold_ty(a.ty),\n@@ -186,16 +186,17 @@ fn noop_fold_view_item(vi: view_item_, _fld: ast_fold) -> view_item_ {\n }\n \n \n-fn noop_fold_native_item(&&ni: @native_item, fld: ast_fold) -> @native_item {\n+fn noop_fold_foreign_item(&&ni: @foreign_item, fld: ast_fold)\n+    -> @foreign_item {\n     let fold_arg = {|x|fold_arg_(x, fld)};\n     let fold_attribute = {|x|fold_attribute_(x, fld)};\n \n     ret @{ident: fld.fold_ident(ni.ident),\n           attrs: vec::map(ni.attrs, fold_attribute),\n           node:\n               alt ni.node {\n-                native_item_fn(fdec, typms) {\n-                  native_item_fn({inputs: vec::map(fdec.inputs, fold_arg),\n+                foreign_item_fn(fdec, typms) {\n+                  foreign_item_fn({inputs: vec::map(fdec.inputs, fold_arg),\n                                   output: fld.fold_ty(fdec.output),\n                                   purity: fdec.purity,\n                                   cf: fdec.cf,\n@@ -241,7 +242,7 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n                       fld.fold_block(body))\n           }\n           item_mod(m) { item_mod(fld.fold_mod(m)) }\n-          item_native_mod(nm) { item_native_mod(fld.fold_native_mod(nm)) }\n+          item_foreign_mod(nm) { item_foreign_mod(fld.fold_foreign_mod(nm)) }\n           item_ty(t, typms, rp) { item_ty(fld.fold_ty(t),\n                                           fold_ty_params(typms, fld),\n                                           rp) }\n@@ -517,9 +518,9 @@ fn noop_fold_mod(m: _mod, fld: ast_fold) -> _mod {\n          items: vec::map(m.items, fld.fold_item)};\n }\n \n-fn noop_fold_native_mod(nm: native_mod, fld: ast_fold) -> native_mod {\n+fn noop_fold_foreign_mod(nm: foreign_mod, fld: ast_fold) -> foreign_mod {\n     ret {view_items: vec::map(nm.view_items, fld.fold_view_item),\n-         items: vec::map(nm.items, fld.fold_native_item)}\n+         items: vec::map(nm.items, fld.fold_foreign_item)}\n }\n \n fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n@@ -583,7 +584,7 @@ fn default_ast_fold() -> ast_fold_precursor {\n     ret @{fold_crate: wrap(noop_fold_crate),\n           fold_crate_directive: wrap(noop_fold_crate_directive),\n           fold_view_item: noop_fold_view_item,\n-          fold_native_item: noop_fold_native_item,\n+          fold_foreign_item: noop_fold_foreign_item,\n           fold_item: noop_fold_item,\n           fold_class_item: noop_fold_class_item,\n           fold_item_underscore: noop_fold_item_underscore,\n@@ -598,7 +599,7 @@ fn default_ast_fold() -> ast_fold_precursor {\n           fold_constr: wrap(noop_fold_constr),\n           fold_ty_constr: wrap(noop_fold_ty_constr),\n           fold_mod: noop_fold_mod,\n-          fold_native_mod: noop_fold_native_mod,\n+          fold_foreign_mod: noop_fold_foreign_mod,\n           fold_variant: wrap(noop_fold_variant),\n           fold_ident: noop_fold_ident,\n           fold_path: noop_fold_path,\n@@ -628,9 +629,9 @@ impl of ast_fold for ast_fold_precursor {\n               vis: x.vis,\n               span: self.new_span(x.span)};\n     }\n-    fn fold_native_item(&&x: @native_item)\n-        -> @native_item {\n-        ret self.fold_native_item(x, self as ast_fold);\n+    fn fold_foreign_item(&&x: @foreign_item)\n+        -> @foreign_item {\n+        ret self.fold_foreign_item(x, self as ast_fold);\n     }\n     fn fold_item(&&i: @item) -> @item {\n         ret self.fold_item(i, self as ast_fold);\n@@ -699,9 +700,9 @@ impl of ast_fold for ast_fold_precursor {\n     fn fold_mod(x: _mod) -> _mod {\n         ret self.fold_mod(x, self as ast_fold);\n     }\n-    fn fold_native_mod(x: native_mod) ->\n-       native_mod {\n-        ret self.fold_native_mod(x, self as ast_fold);\n+    fn fold_foreign_mod(x: foreign_mod) ->\n+       foreign_mod {\n+        ret self.fold_foreign_mod(x, self as ast_fold);\n     }\n     fn fold_variant(x: variant) ->\n        variant {"}, {"sha": "378580d3c3680264b1e193ccfb5b44c8ce87c7d0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -147,7 +147,8 @@ class parser {\n     fn get_id() -> node_id { next_node_id(self.sess) }\n \n     fn parse_ty_fn(purity: ast::purity) -> ty_ {\n-        let proto = if self.eat_keyword(\"native\") {\n+        let proto = if self.eat_keyword(\"native\") ||\n+            self.eat_keyword(\"extern\") {\n             self.expect_keyword(\"fn\");\n             ast::proto_bare\n         } else {\n@@ -413,7 +414,8 @@ class parser {\n             self.parse_ty_fn(ast::unsafe_fn)\n         } else if self.is_keyword(\"fn\") {\n             self.parse_ty_fn(ast::impure_fn)\n-        } else if self.eat_keyword(\"native\") {\n+        } else if self.eat_keyword(\"native\") ||\n+            self.eat_keyword(\"extern\") {\n             self.expect_keyword(\"fn\");\n             ty_fn(proto_bare, self.parse_ty_fn_decl(ast::impure_fn))\n         } else if self.token == token::MOD_SEP || is_ident(self.token) {\n@@ -2165,16 +2167,16 @@ class parser {\n         (id, item_mod(m), some(inner_attrs.inner))\n     }\n \n-    fn parse_item_native_fn(+attrs: [attribute]/~,\n-                            purity: purity) -> @native_item {\n+    fn parse_item_foreign_fn(+attrs: [attribute]/~,\n+                             purity: purity) -> @foreign_item {\n         let lo = self.last_span.lo;\n         let t = self.parse_fn_header();\n         let (decl, _) = self.parse_fn_decl(purity, {|p| p.parse_arg()});\n         let mut hi = self.span.hi;\n         self.expect(token::SEMI);\n         ret @{ident: t.ident,\n               attrs: attrs,\n-              node: native_item_fn(decl, t.tps),\n+              node: foreign_item_fn(decl, t.tps),\n               id: self.get_id(),\n               span: mk_sp(lo, hi)};\n     }\n@@ -2191,35 +2193,35 @@ class parser {\n         else { self.unexpected(); }\n     }\n \n-    fn parse_native_item(+attrs: [attribute]/~) ->\n-        @native_item {\n-        self.parse_item_native_fn(attrs, self.parse_fn_purity())\n+    fn parse_foreign_item(+attrs: [attribute]/~) ->\n+        @foreign_item {\n+        self.parse_item_foreign_fn(attrs, self.parse_fn_purity())\n     }\n \n-    fn parse_native_mod_items(+first_item_attrs: [attribute]/~) ->\n-        native_mod {\n+    fn parse_foreign_mod_items(+first_item_attrs: [attribute]/~) ->\n+        foreign_mod {\n         // Shouldn't be any view items since we've already parsed an item attr\n         let {attrs_remaining, view_items} =\n             self.parse_view(first_item_attrs, false);\n-        let mut items: [@native_item]/~ = []/~;\n+        let mut items: [@foreign_item]/~ = []/~;\n         let mut initial_attrs = attrs_remaining;\n         while self.token != token::RBRACE {\n             let attrs = initial_attrs + self.parse_outer_attributes();\n             initial_attrs = []/~;\n-            vec::push(items, self.parse_native_item(attrs));\n+            vec::push(items, self.parse_foreign_item(attrs));\n         }\n         ret {view_items: view_items,\n              items: items};\n     }\n \n-    fn parse_item_native_mod() -> item_info {\n+    fn parse_item_foreign_mod() -> item_info {\n         self.expect_keyword(\"mod\");\n         let id = self.parse_ident();\n         self.expect(token::LBRACE);\n         let more_attrs = self.parse_inner_attrs_and_next();\n-        let m = self.parse_native_mod_items(more_attrs.next);\n+        let m = self.parse_foreign_mod_items(more_attrs.next);\n         self.expect(token::RBRACE);\n-        (id, item_native_mod(m), some(more_attrs.inner))\n+        (id, item_foreign_mod(m), some(more_attrs.inner))\n     }\n \n     fn parse_type_decl() -> {lo: uint, ident: ident} {\n@@ -2355,13 +2357,19 @@ class parser {\n             self.bump();\n             self.expect_keyword(\"fn\");\n             self.parse_item_fn(unsafe_fn)\n+        } else if self.eat_keyword(\"extern\") {\n+            if self.eat_keyword(\"fn\") {\n+                self.parse_item_fn(extern_fn)\n+            } else {\n+                self.parse_item_foreign_mod()\n+            }\n         } else if self.eat_keyword(\"crust\") {\n             self.expect_keyword(\"fn\");\n-            self.parse_item_fn(crust_fn)\n+            self.parse_item_fn(extern_fn)\n         } else if self.eat_keyword(\"mod\") {\n             self.parse_item_mod()\n         } else if self.eat_keyword(\"native\") {\n-            self.parse_item_native_mod()\n+            self.parse_item_foreign_mod()\n         } else if self.eat_keyword(\"type\") {\n             self.parse_item_type()\n         } else if self.eat_keyword(\"enum\") {"}, {"sha": "0586a3c2d529bd75534ab1ac886c0bd37c0eb8b7", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -288,7 +288,7 @@ fn restricted_keyword_table() -> hashmap<str, ()> {\n         \"be\", \"break\",\n         \"check\", \"claim\", \"class\", \"const\", \"cont\", \"copy\", \"crust\",\n         \"do\", \"drop\",\n-        \"else\", \"enum\", \"export\",\n+        \"else\", \"enum\", \"export\", \"extern\",\n         \"fail\", \"false\", \"fn\", \"for\",\n         \"if\", \"iface\", \"impl\", \"import\",\n         \"let\", \"log\", \"loop\","}, {"sha": "1271527068512d03cec9d21ff60604505ac80d79", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -297,12 +297,13 @@ fn print_mod(s: ps, _mod: ast::_mod, attrs: [ast::attribute]/~) {\n     for _mod.items.each {|item| print_item(s, item); }\n }\n \n-fn print_native_mod(s: ps, nmod: ast::native_mod, attrs: [ast::attribute]/~) {\n+fn print_foreign_mod(s: ps, nmod: ast::foreign_mod,\n+                     attrs: [ast::attribute]/~) {\n     print_inner_attributes(s, attrs);\n     for nmod.view_items.each {|vitem|\n         print_view_item(s, vitem);\n     }\n-    for nmod.items.each {|item| print_native_item(s, item); }\n+    for nmod.items.each {|item| print_foreign_item(s, item); }\n }\n \n fn print_region(s: ps, region: @ast::region) {\n@@ -388,12 +389,12 @@ fn print_type_ex(s: ps, &&ty: @ast::ty, print_colons: bool) {\n     end(s);\n }\n \n-fn print_native_item(s: ps, item: @ast::native_item) {\n+fn print_foreign_item(s: ps, item: @ast::foreign_item) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, item.span.lo);\n     print_outer_attributes(s, item.attrs);\n     alt item.node {\n-      ast::native_item_fn(decl, typarams) {\n+      ast::foreign_item_fn(decl, typarams) {\n         print_fn(s, decl, item.ident, typarams);\n         end(s); // end head-ibox\n         word(s.s, \";\");\n@@ -434,12 +435,12 @@ fn print_item(s: ps, &&item: @ast::item) {\n         print_mod(s, _mod, item.attrs);\n         bclose(s, item.span);\n       }\n-      ast::item_native_mod(nmod) {\n-        head(s, \"native\");\n+      ast::item_foreign_mod(nmod) {\n+        head(s, \"extern\");\n         word_nbsp(s, \"mod\");\n         word_nbsp(s, *item.ident);\n         bopen(s);\n-        print_native_mod(s, nmod, item.attrs);\n+        print_foreign_mod(s, nmod, item.attrs);\n         bclose(s, item.span);\n       }\n       ast::item_ty(ty, params, rp) {\n@@ -1753,7 +1754,7 @@ fn purity_to_str(p: ast::purity) -> str {\n       ast::impure_fn {\"impure\"}\n       ast::unsafe_fn {\"unsafe\"}\n       ast::pure_fn {\"pure\"}\n-      ast::crust_fn {\"crust\"}\n+      ast::extern_fn {\"extern\"}\n     }\n }\n \n@@ -1766,7 +1767,7 @@ fn print_purity(s: ps, p: ast::purity) {\n \n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n-      ast::proto_bare { \"native fn\" }\n+      ast::proto_bare { \"extern fn\" }\n       ast::proto_any { \"fn\" }\n       ast::proto_block { \"fn&\" }\n       ast::proto_uniq { \"fn~\" }"}, {"sha": "dad722d21826a675b6a7e89a5736ffd534001e84", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -48,7 +48,7 @@ type visitor<E> =\n     // generic over constr and ty_constr\n     @{visit_mod: fn@(_mod, span, node_id, E, vt<E>),\n       visit_view_item: fn@(@view_item, E, vt<E>),\n-      visit_native_item: fn@(@native_item, E, vt<E>),\n+      visit_foreign_item: fn@(@foreign_item, E, vt<E>),\n       visit_item: fn@(@item, E, vt<E>),\n       visit_local: fn@(@local, E, vt<E>),\n       visit_block: fn@(ast::blk, E, vt<E>),\n@@ -66,7 +66,7 @@ type visitor<E> =\n fn default_visitor<E>() -> visitor<E> {\n     ret @{visit_mod: {|a,b,c,d,e|visit_mod::<E>(a, b, c, d, e)},\n           visit_view_item: {|a,b,c|visit_view_item::<E>(a, b, c)},\n-          visit_native_item: {|a,b,c|visit_native_item::<E>(a, b, c)},\n+          visit_foreign_item: {|a,b,c|visit_foreign_item::<E>(a, b, c)},\n           visit_item: {|a,b,c|visit_item::<E>(a, b, c)},\n           visit_local: {|a,b,c|visit_local::<E>(a, b, c)},\n           visit_block: {|a,b,c|visit_block::<E>(a, b, c)},\n@@ -121,9 +121,9 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n                    i.span, i.id, e, v);\n       }\n       item_mod(m) { v.visit_mod(m, i.span, i.id, e, v); }\n-      item_native_mod(nm) {\n+      item_foreign_mod(nm) {\n         for nm.view_items.each {|vi| v.visit_view_item(vi, e, v); }\n-        for nm.items.each {|ni| v.visit_native_item(ni, e, v); }\n+        for nm.items.each {|ni| v.visit_foreign_item(ni, e, v); }\n       }\n       item_ty(t, tps, rp) {\n         v.visit_ty(t, e, v);\n@@ -247,9 +247,9 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n     }\n }\n \n-fn visit_native_item<E>(ni: @native_item, e: E, v: vt<E>) {\n+fn visit_foreign_item<E>(ni: @foreign_item, e: E, v: vt<E>) {\n     alt ni.node {\n-      native_item_fn(fd, tps) {\n+      foreign_item_fn(fd, tps) {\n         v.visit_ty_params(tps, e, v);\n         visit_fn_decl(fd, e, v);\n       }\n@@ -444,7 +444,7 @@ type simple_visitor =\n     // generic over constr and ty_constr\n     @{visit_mod: fn@(_mod, span, node_id),\n       visit_view_item: fn@(@view_item),\n-      visit_native_item: fn@(@native_item),\n+      visit_foreign_item: fn@(@foreign_item),\n       visit_item: fn@(@item),\n       visit_local: fn@(@local),\n       visit_block: fn@(ast::blk),\n@@ -464,7 +464,7 @@ fn simple_ignore_ty(_t: @ty) {}\n fn default_simple_visitor() -> simple_visitor {\n     ret @{visit_mod: fn@(_m: _mod, _sp: span, _id: node_id) { },\n           visit_view_item: fn@(_vi: @view_item) { },\n-          visit_native_item: fn@(_ni: @native_item) { },\n+          visit_foreign_item: fn@(_ni: @foreign_item) { },\n           visit_item: fn@(_i: @item) { },\n           visit_local: fn@(_l: @local) { },\n           visit_block: fn@(_b: ast::blk) { },\n@@ -492,10 +492,10 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(vi);\n         visit_view_item(vi, e, v);\n     }\n-    fn v_native_item(f: fn@(@native_item), ni: @native_item, &&e: (),\n+    fn v_foreign_item(f: fn@(@foreign_item), ni: @foreign_item, &&e: (),\n                      v: vt<()>) {\n         f(ni);\n-        visit_native_item(ni, e, v);\n+        visit_foreign_item(ni, e, v);\n     }\n     fn v_item(f: fn@(@item), i: @item, &&e: (), v: vt<()>) {\n         f(i);\n@@ -565,8 +565,8 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n                 visit_view_item: {|a,b,c|\n                     v_view_item(v.visit_view_item, a, b, c)\n                 },\n-                visit_native_item:\n-                    {|a,b,c|v_native_item(v.visit_native_item, a, b, c)},\n+                visit_foreign_item:\n+                    {|a,b,c|v_foreign_item(v.visit_foreign_item, a, b, c)},\n                 visit_item: {|a,b,c|v_item(v.visit_item, a, b, c)},\n                 visit_local: {|a,b,c|v_local(v.visit_local, a, b, c)},\n                 visit_block: {|a,b,c|v_block(v.visit_block, a, b, c)},"}, {"sha": "d78a673624f04a5f531e28d587b46eb0efbf2843", "filename": "src/rustc/front/config.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fconfig.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -26,7 +26,7 @@ fn strip_items(crate: @ast::crate, in_cfg: in_cfg_pred)\n     let precursor =\n         @{fold_mod: {|a,b|fold_mod(ctxt, a, b)},\n           fold_block: fold::wrap({|a,b|fold_block(ctxt, a, b)}),\n-          fold_native_mod: {|a,b|fold_native_mod(ctxt, a, b)}\n+          fold_foreign_mod: {|a,b|fold_foreign_mod(ctxt, a, b)}\n           with *fold::default_ast_fold()};\n \n     let fold = fold::make_fold(precursor);\n@@ -47,16 +47,16 @@ fn fold_mod(cx: ctxt, m: ast::_mod, fld: fold::ast_fold) ->\n          items: vec::map(filtered_items, fld.fold_item)};\n }\n \n-fn filter_native_item(cx: ctxt, &&item: @ast::native_item) ->\n-   option<@ast::native_item> {\n-    if native_item_in_cfg(cx, item) {\n+fn filter_foreign_item(cx: ctxt, &&item: @ast::foreign_item) ->\n+   option<@ast::foreign_item> {\n+    if foreign_item_in_cfg(cx, item) {\n         option::some(item)\n     } else { option::none }\n }\n \n-fn fold_native_mod(cx: ctxt, nm: ast::native_mod,\n-                   fld: fold::ast_fold) -> ast::native_mod {\n-    let filter = {|a|filter_native_item(cx, a)};\n+fn fold_foreign_mod(cx: ctxt, nm: ast::foreign_mod,\n+                   fld: fold::ast_fold) -> ast::foreign_mod {\n+    let filter = {|a|filter_foreign_item(cx, a)};\n     let filtered_items = vec::filter_map(nm.items, filter);\n     ret {view_items: vec::map(nm.view_items, fld.fold_view_item),\n          items: filtered_items};\n@@ -94,7 +94,7 @@ fn item_in_cfg(cx: ctxt, item: @ast::item) -> bool {\n     ret cx.in_cfg(item.attrs);\n }\n \n-fn native_item_in_cfg(cx: ctxt, item: @ast::native_item) -> bool {\n+fn foreign_item_in_cfg(cx: ctxt, item: @ast::foreign_item) -> bool {\n     ret cx.in_cfg(item.attrs);\n }\n "}, {"sha": "9ba1f222a7e25ce0a7d93775cde378744d7a3773", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -241,8 +241,8 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n       ast::ii_method(d, m) {\n         ast::ii_method(d, fld.fold_method(m))\n       }\n-      ast::ii_native(i) {\n-        ast::ii_native(fld.fold_native_item(i))\n+      ast::ii_foreign(i) {\n+        ast::ii_foreign(fld.fold_foreign_item(i))\n       }\n       ast::ii_ctor(ctor, nm, tps, parent_id) {\n         let ctor_body = fld.fold_block(ctor.node.body);\n@@ -275,8 +275,8 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n       ast::ii_method(d, m) {\n         ast::ii_method(xcx.tr_def_id(d), fld.fold_method(m))\n       }\n-      ast::ii_native(i) {\n-        ast::ii_native(fld.fold_native_item(i))\n+      ast::ii_foreign(i) {\n+        ast::ii_foreign(fld.fold_foreign_item(i))\n       }\n       ast::ii_ctor(ctor, nm, tps, parent_id) {\n         let ctor_body = fld.fold_block(ctor.node.body);\n@@ -310,7 +310,7 @@ impl of tr for ast::def {\n           ast::def_fn(did, p) { ast::def_fn(did.tr(xcx), p) }\n           ast::def_self(nid) { ast::def_self(xcx.tr_id(nid)) }\n           ast::def_mod(did) { ast::def_mod(did.tr(xcx)) }\n-          ast::def_native_mod(did) { ast::def_native_mod(did.tr(xcx)) }\n+          ast::def_foreign_mod(did) { ast::def_foreign_mod(did.tr(xcx)) }\n           ast::def_const(did) { ast::def_const(did.tr(xcx)) }\n           ast::def_arg(nid, m) { ast::def_arg(xcx.tr_id(nid), m) }\n           ast::def_local(nid, b) { ast::def_local(xcx.tr_id(nid), b) }"}, {"sha": "4f9c4189feb15ade2dcceff0b6e2b3def9a6767e", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -116,17 +116,17 @@ fn visit_view_item(e: env, i: @ast::view_item) {\n \n fn visit_item(e: env, i: @ast::item) {\n     alt i.node {\n-      ast::item_native_mod(m) {\n-        alt attr::native_abi(i.attrs) {\n+      ast::item_foreign_mod(m) {\n+        alt attr::foreign_abi(i.attrs) {\n           either::right(abi) {\n-            if abi != ast::native_abi_cdecl &&\n-               abi != ast::native_abi_stdcall { ret; }\n+            if abi != ast::foreign_abi_cdecl &&\n+               abi != ast::foreign_abi_stdcall { ret; }\n           }\n           either::left(msg) { e.diag.span_fatal(i.span, msg); }\n         }\n \n         let cstore = e.cstore;\n-        let native_name =\n+        let foreign_name =\n             alt attr::first_attr_value_str_by_name(i.attrs, \"link_name\") {\n               some(nn) {\n                 if *nn == \"\" {\n@@ -140,11 +140,11 @@ fn visit_item(e: env, i: @ast::item) {\n             };\n         let mut already_added = false;\n         if vec::len(attr::find_attrs_by_name(i.attrs, \"nolink\")) == 0u {\n-            already_added = !cstore::add_used_library(cstore, *native_name);\n+            already_added = !cstore::add_used_library(cstore, *foreign_name);\n         }\n         let link_args = attr::find_attrs_by_name(i.attrs, \"link_args\");\n         if vec::len(link_args) > 0u && already_added {\n-            e.diag.span_fatal(i.span, \"library '\" + *native_name +\n+            e.diag.span_fatal(i.span, \"library '\" + *foreign_name +\n                               \"' already added: can't specify link_args.\");\n         }\n         for link_args.each {|a|"}, {"sha": "856ea024453371aeb9d239d458811f15b7daedf7", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -271,7 +271,7 @@ fn lookup_def(cnum: ast::crate_num, data: @[u8]/~, did_: ast::def_id) ->\n       'y' { ast::def_ty(did) }\n       't' { ast::def_ty(did) }\n       'm' { ast::def_mod(did) }\n-      'n' { ast::def_native_mod(did) }\n+      'n' { ast::def_foreign_mod(did) }\n       'v' {\n         let mut tid = option::get(item_parent_item(item));\n         tid = {crate: cnum, node: tid.node};"}, {"sha": "6c5b03a387d9373c9b35161678a8de4223316cf5", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -126,8 +126,8 @@ fn add_to_index(ebml_w: ebml::writer, path: [ident]/~, &index: [entry<str>]/~,\n                       pos: ebml_w.writer.tell()});\n }\n \n-fn encode_native_module_item_paths(ebml_w: ebml::writer, nmod: native_mod,\n-                                   path: [ident]/~, &index: [entry<str>]/~) {\n+fn encode_foreign_module_item_paths(ebml_w: ebml::writer, nmod: foreign_mod,\n+                                    path: [ident]/~, &index: [entry<str>]/~) {\n     for nmod.items.each {|nitem|\n         add_to_index(ebml_w, path, index, nitem.ident);\n         encode_named_def_id(ebml_w, nitem.ident, local_def(nitem.id));\n@@ -175,10 +175,10 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                                         index);\n             }\n           }\n-          item_native_mod(nmod) {\n+          item_foreign_mod(nmod) {\n             ebml_w.wr_tag(tag_paths_data_mod) {||\n               encode_name_and_def_id(ebml_w, it.ident, it.id);\n-              encode_native_module_item_paths(ebml_w, nmod,\n+              encode_foreign_module_item_paths(ebml_w, nmod,\n                    path + [it.ident]/~, index);\n             }\n           }\n@@ -517,7 +517,7 @@ fn purity_fn_family(p: purity) -> char {\n       unsafe_fn { 'u' }\n       pure_fn { 'p' }\n       impure_fn { 'f' }\n-      crust_fn { 'c' }\n+      extern_fn { 'c' }\n     }\n }\n \n@@ -574,7 +574,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         add_to_index();\n         encode_info_for_mod(ecx, ebml_w, m, item.id, path, item.ident);\n       }\n-      item_native_mod(_) {\n+      item_foreign_mod(_) {\n         add_to_index();\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n@@ -741,23 +741,23 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n     }\n }\n \n-fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n-                               nitem: @native_item,\n-                               index: @mut [entry<int>]/~,\n-                               path: ast_map::path, abi: native_abi) {\n+fn encode_info_for_foreign_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n+                                nitem: @foreign_item,\n+                                index: @mut [entry<int>]/~,\n+                                path: ast_map::path, abi: foreign_abi) {\n     if !reachable(ecx, nitem.id) { ret; }\n     vec::push(*index, {val: nitem.id, pos: ebml_w.writer.tell()});\n \n     ebml_w.start_tag(tag_items_data_item);\n     alt nitem.node {\n-      native_item_fn(fn_decl, tps) {\n+      foreign_item_fn(fn_decl, tps) {\n         encode_def_id(ebml_w, local_def(nitem.id));\n         encode_family(ebml_w, purity_fn_family(fn_decl.purity));\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, nitem.id));\n-        if abi == native_abi_rust_intrinsic {\n+        if abi == foreign_abi_rust_intrinsic {\n             ecx.encode_inlined_item(ecx, ebml_w, path,\n-                                    ii_native(nitem));\n+                                    ii_foreign(nitem));\n         } else {\n             encode_symbol(ecx, ebml_w, nitem.id);\n         }\n@@ -799,11 +799,12 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n               }\n             }\n         },\n-        visit_native_item: {|ni, cx, v, copy ebml_w|\n-            visit::visit_native_item(ni, cx, v);\n+        visit_foreign_item: {|ni, cx, v, copy ebml_w|\n+            visit::visit_foreign_item(ni, cx, v);\n             alt check ecx.tcx.items.get(ni.id) {\n-              ast_map::node_native_item(_, abi, pt) {\n-                encode_info_for_native_item(ecx, ebml_w, ni, index, *pt, abi);\n+              ast_map::node_foreign_item(_, abi, pt) {\n+                encode_info_for_foreign_item(ecx, ebml_w, ni,\n+                                             index, *pt, abi);\n               }\n             }\n         }"}, {"sha": "57c340ad7555f87538783019fe5b4ef061ccdbd5", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -438,7 +438,7 @@ fn parse_purity(c: char) -> purity {\n       'u' {unsafe_fn}\n       'p' {pure_fn}\n       'i' {impure_fn}\n-      'c' {crust_fn}\n+      'c' {extern_fn}\n     }\n }\n "}, {"sha": "1b97603cd7c0577b12016b293f1b2a13e3819240", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -333,7 +333,7 @@ fn enc_purity(w: io::writer, p: purity) {\n       pure_fn { w.write_char('p'); }\n       impure_fn { w.write_char('i'); }\n       unsafe_fn { w.write_char('u'); }\n-      crust_fn { w.write_char('c'); }\n+      extern_fn { w.write_char('c'); }\n     }\n }\n "}, {"sha": "484a87ab32e921a90c982307aa96bebc8759acdd", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -250,8 +250,8 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n       ast::ii_method(d, m) {\n         ast::ii_method(d, fld.fold_method(m))\n       }\n-      ast::ii_native(i) {\n-        ast::ii_native(fld.fold_native_item(i))\n+      ast::ii_foreign(i) {\n+        ast::ii_foreign(fld.fold_foreign_item(i))\n       }\n       ast::ii_ctor(ctor, nm, tps, parent_id) {\n         let ctor_body = fld.fold_block(ctor.node.body);\n@@ -290,8 +290,8 @@ fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n       ast::ii_method(d, m) {\n         ast::ii_method(xcx.tr_def_id(d), fld.fold_method(m))\n       }\n-      ast::ii_native(i) {\n-        ast::ii_native(fld.fold_native_item(i))\n+      ast::ii_foreign(i) {\n+        ast::ii_foreign(fld.fold_foreign_item(i))\n       }\n       ast::ii_ctor(ctor, nm, tps, parent_id) {\n         let ctor_body = fld.fold_block(ctor.node.body);\n@@ -335,7 +335,7 @@ impl of tr for ast::def {\n           ast::def_fn(did, p) { ast::def_fn(did.tr(xcx), p) }\n           ast::def_self(nid) { ast::def_self(xcx.tr_id(nid)) }\n           ast::def_mod(did) { ast::def_mod(did.tr(xcx)) }\n-          ast::def_native_mod(did) { ast::def_native_mod(did.tr(xcx)) }\n+          ast::def_foreign_mod(did) { ast::def_foreign_mod(did.tr(xcx)) }\n           ast::def_const(did) { ast::def_const(did.tr(xcx)) }\n           ast::def_arg(nid, m) { ast::def_arg(xcx.tr_id(nid), m) }\n           ast::def_local(nid, b) { ast::def_local(xcx.tr_id(nid), b) }"}, {"sha": "f594f335de2699a98409edf5f80869449dd2649e", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -189,7 +189,7 @@ impl public_methods for borrowck_ctxt {\n                def: ast::def) -> cmt {\n         alt def {\n           ast::def_fn(_, _) | ast::def_mod(_) |\n-          ast::def_native_mod(_) | ast::def_const(_) |\n+          ast::def_foreign_mod(_) | ast::def_const(_) |\n           ast::def_use(_) | ast::def_variant(_, _) |\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n           ast::def_ty_param(_, _) | ast::def_class(_) |"}, {"sha": "c9ac6bf3a63d8a204e70abbb36a8e4ff37634dd1", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -91,7 +91,7 @@ impl methods for check_loan_ctxt {\n           // default, but we must scan for requirements\n           // imposed by the borrow check\n           ast::pure_fn { some(pc_pure_fn) }\n-          ast::crust_fn | ast::impure_fn { none }\n+          ast::extern_fn | ast::impure_fn { none }\n         };\n \n         // scan to see if this scope or any enclosing scope requires\n@@ -199,7 +199,7 @@ impl methods for check_loan_ctxt {\n           ty::ty_fn(fn_ty) {\n             alt fn_ty.purity {\n               ast::pure_fn { ret; } // case (c) above\n-              ast::impure_fn | ast::unsafe_fn | ast::crust_fn {\n+              ast::impure_fn | ast::unsafe_fn | ast::extern_fn {\n                 self.report_purity_error(\n                     pc, callee_span,\n                     #fmt[\"access to %s function\","}, {"sha": "ec665470918460ffd2b7d8796d3a3e2b58285995", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -355,7 +355,7 @@ fn check_item_while_true(cx: ty::ctxt, it: @ast::item) {\n \n fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n \n-    fn check_native_fn(cx: ty::ctxt, fn_id: ast::node_id,\n+    fn check_foreign_fn(cx: ty::ctxt, fn_id: ast::node_id,\n                        decl: ast::fn_decl) {\n         let tys = vec::map(decl.inputs) {|a| a.ty };\n         for vec::each(tys + [decl.output]/~) {|ty|\n@@ -385,12 +385,12 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n     }\n \n     alt it.node {\n-      ast::item_native_mod(nmod) if attr::native_abi(it.attrs) !=\n-      either::right(ast::native_abi_rust_intrinsic) {\n+      ast::item_foreign_mod(nmod) if attr::foreign_abi(it.attrs) !=\n+      either::right(ast::foreign_abi_rust_intrinsic) {\n         for nmod.items.each {|ni|\n             alt ni.node {\n-              ast::native_item_fn(decl, tps) {\n-                check_native_fn(cx, it.id, decl);\n+              ast::foreign_item_fn(decl, tps) {\n+                check_foreign_fn(cx, it.id, decl);\n               }\n             }\n         }"}, {"sha": "ff07e10533877bc43df2aa16c40eb2b1f8ee833d", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -36,7 +36,7 @@ enum scope {\n     scope_item(@ast::item),\n     scope_bare_fn(ast::fn_decl, node_id, [ast::ty_param]/~),\n     scope_fn_expr(ast::fn_decl, node_id, [ast::ty_param]/~),\n-    scope_native_item(@ast::native_item),\n+    scope_foreign_item(@ast::foreign_item),\n     scope_loop(@ast::local), // there's only 1 decl per loop.\n     scope_block(ast::blk, @mut uint, @mut uint),\n     scope_arm(ast::arm),\n@@ -86,7 +86,7 @@ enum mod_index_entry {\n     mie_view_item(ident, node_id, span),\n     mie_import_ident(node_id, span),\n     mie_item(@ast::item),\n-    mie_native_item(@ast::native_item),\n+    mie_foreign_item(@ast::foreign_item),\n     mie_enum_variant(/* variant index */uint,\n                      /*parts of enum item*/ [variant]/~,\n                     node_id, span),\n@@ -275,7 +275,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                                glob_imported_names: box_str_hash(),\n                                path: path_from_scope(sc, *i.ident)});\n           }\n-          ast::item_native_mod(nmd) {\n+          ast::item_foreign_mod(nmd) {\n             e.mod_map.insert(i.id,\n                              @{m: none::<ast::_mod>,\n                                index: index_nmod(nmd),\n@@ -413,7 +413,7 @@ fn resolve_iface_ref(p: @iface_ref, sc: scopes, e: @env) {\n fn resolve_names(e: @env, c: @ast::crate) {\n     e.used_imports.track = true;\n     let v =\n-        @{visit_native_item: visit_native_item_with_scope,\n+        @{visit_foreign_item: visit_foreign_item_with_scope,\n           visit_item: {|a,b,c|walk_item(e, a, b, c)},\n           visit_block: visit_block_with_scope,\n           visit_decl: visit_decl_with_scope,\n@@ -615,9 +615,9 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n     e.resolve_unexported = old_resolve_unexported;\n }\n \n-fn visit_native_item_with_scope(ni: @ast::native_item, &&sc: scopes,\n+fn visit_foreign_item_with_scope(ni: @ast::foreign_item, &&sc: scopes,\n                                 v: vt<scopes>) {\n-    visit::visit_native_item(ni, @cons(scope_native_item(ni), sc), v);\n+    visit::visit_foreign_item(ni, @cons(scope_foreign_item(ni), sc), v);\n }\n \n fn visit_fn_with_scope(e: @env, fk: visit::fn_kind, decl: ast::fn_decl,\n@@ -733,7 +733,7 @@ fn follow_import(e: env, &&sc: scopes, path: [ident]/~, sp: span) ->\n     }\n     if i == path_len {\n        alt dcur {\n-          some(ast::def_mod(_)) | some(ast::def_native_mod(_)) { ret dcur; }\n+          some(ast::def_mod(_)) | some(ast::def_foreign_mod(_)) { ret dcur; }\n           _ {\n             e.sess.span_err(sp, str::connect(path.map({|x|*x}), \"::\") +\n                             \" does not name a module.\");\n@@ -799,7 +799,7 @@ fn resolve_import(e: env, n_id: node_id, name: ast::ident,\n           cons(scope_item(@{node: item_mod(m), _}), _) {\n             lst(id, m.view_items)\n           }\n-          cons(scope_item(@{node: item_native_mod(m), _}), _) {\n+          cons(scope_item(@{node: item_foreign_mod(m), _}), _) {\n             lst(id, m.view_items)\n           }\n           cons(scope_block(b, _, _), _) {\n@@ -969,7 +969,7 @@ fn lookup_in_scope_strict(e: env, &&sc: scopes, sp: span, name: ident,\n \n fn scope_is_fn(sc: scope) -> bool {\n     ret alt sc {\n-      scope_bare_fn(_, _, _) | scope_native_item(_) { true }\n+      scope_bare_fn(_, _, _) | scope_foreign_item(_) { true }\n       _ { false }\n     };\n }\n@@ -1055,8 +1055,8 @@ fn lookup_in_scope(e: env, &&sc: scopes, sp: span, name: ident, ns: namespace,\n               ast::item_mod(_) {\n                 ret lookup_in_local_mod(e, it.id, sp, name, ns, inside);\n               }\n-              ast::item_native_mod(m) {\n-                ret lookup_in_local_native_mod(e, it.id, sp, name, ns);\n+              ast::item_foreign_mod(m) {\n+                ret lookup_in_local_foreign_mod(e, it.id, sp, name, ns);\n               }\n               ast::item_class(tps, _, members, ctor, _, _) {\n                   if ns == ns_type {\n@@ -1077,9 +1077,9 @@ fn lookup_in_scope(e: env, &&sc: scopes, sp: span, name: ident, ns: namespace,\n                 ret lookup_in_ty_params(e, name, tps);\n             }\n           }\n-          scope_native_item(it) {\n+          scope_foreign_item(it) {\n             alt check it.node {\n-              ast::native_item_fn(decl, ty_params) {\n+              ast::foreign_item_fn(decl, ty_params) {\n                 ret lookup_in_fn(e, name, decl, ty_params, ns);\n               }\n             }\n@@ -1327,8 +1327,10 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n       ast::item_mod(_) {\n         if ns == ns_module { ret some(ast::def_mod(local_def(i.id))); }\n       }\n-      ast::item_native_mod(_) {\n-        if ns == ns_module { ret some(ast::def_native_mod(local_def(i.id))); }\n+      ast::item_foreign_mod(_) {\n+        if ns == ns_module {\n+            ret some(ast::def_foreign_mod(local_def(i.id)));\n+        }\n       }\n       ast::item_ty(*) | item_iface(*) | item_enum(*) {\n         if ns == ns_type { ret some(ast::def_ty(local_def(i.id))); }\n@@ -1384,8 +1386,8 @@ fn lookup_in_mod(e: env, m: def, sp: span, name: ident, ns: namespace,\n       ast::def_mod(defid) {\n         ret lookup_in_local_mod(e, defid.node, sp, name, ns, dr);\n       }\n-      ast::def_native_mod(defid) {\n-        ret lookup_in_local_native_mod(e, defid.node, sp, name, ns);\n+      ast::def_foreign_mod(defid) {\n+        ret lookup_in_local_foreign_mod(e, defid.node, sp, name, ns);\n       }\n       _ {\n           // Precondition\n@@ -1431,7 +1433,7 @@ fn lookup_import(e: env, n_id: node_id, ns: namespace) -> option<def> {\n     }\n }\n \n-fn lookup_in_local_native_mod(e: env, node_id: node_id, sp: span, id: ident,\n+fn lookup_in_local_foreign_mod(e: env, node_id: node_id, sp: span, id: ident,\n                               ns: namespace) -> option<def> {\n     ret lookup_in_local_mod(e, node_id, sp, id, ns, inside);\n }\n@@ -1572,11 +1574,11 @@ fn lookup_in_mie(e: env, mie: mod_index_entry, ns: namespace) ->\n             _ { ret none; }\n          }\n       }\n-      mie_native_item(native_item) {\n-        alt native_item.node {\n-          ast::native_item_fn(decl, _) {\n+      mie_foreign_item(foreign_item) {\n+        alt foreign_item.node {\n+          ast::foreign_item_fn(decl, _) {\n             if ns == ns_val {\n-                ret some(ast::def_fn(local_def(native_item.id),\n+                ret some(ast::def_fn(local_def(foreign_item.id),\n                                      decl.purity));\n             }\n           }\n@@ -1634,7 +1636,7 @@ fn index_mod(md: ast::_mod) -> mod_index {\n     for md.items.each {|it|\n         alt it.node {\n           ast::item_const(_, _) | ast::item_fn(_, _, _) | ast::item_mod(_) |\n-          ast::item_native_mod(_) | ast::item_ty(_, _, _) |\n+          ast::item_foreign_mod(_) | ast::item_ty(_, _, _) |\n           ast::item_impl(*) | ast::item_iface(*) {\n             add_to_index(index, it.ident, mie_item(it));\n           }\n@@ -1658,13 +1660,13 @@ fn index_mod(md: ast::_mod) -> mod_index {\n }\n \n \n-fn index_nmod(md: ast::native_mod) -> mod_index {\n+fn index_nmod(md: ast::foreign_mod) -> mod_index {\n     let index = box_str_hash::<@list<mod_index_entry>>();\n \n     index_view_items(md.view_items, index);\n \n     for md.items.each {|it|\n-        add_to_index(index, it.ident, mie_native_item(it));\n+        add_to_index(index, it.ident, mie_foreign_item(it));\n     }\n     ret index;\n }\n@@ -1677,7 +1679,7 @@ fn ns_for_def(d: def) -> namespace {\n       ast::def_fn(_, _) | ast::def_self(_) |\n       ast::def_const(_) | ast::def_arg(_, _) | ast::def_local(_, _) |\n       ast::def_upvar(_, _, _) { ns_val }\n-      ast::def_mod(_) | ast::def_native_mod(_) { ns_module }\n+      ast::def_mod(_) | ast::def_foreign_mod(_) { ns_module }\n       ast::def_ty(_) | ast::def_binding(_) | ast::def_use(_) |\n       ast::def_ty_param(_, _) | ast::def_prim_ty(_) | ast::def_class(_)\n       { ns_type }\n@@ -1753,7 +1755,7 @@ fn mie_span(mie: mod_index_entry) -> span {\n           mie_import_ident(_, span) { span }\n           mie_item(item) { item.span }\n           mie_enum_variant(_, _, _, span) { span }\n-          mie_native_item(item) { item.span }\n+          mie_foreign_item(item) { item.span }\n         };\n }\n \n@@ -1850,7 +1852,7 @@ fn check_block(e: @env, b: ast::blk, &&x: (), v: vt<()>) {\n                         add_name(values, v.span, v.node.name);\n                     }\n                   }\n-                  ast::item_mod(_) | ast::item_native_mod(_) {\n+                  ast::item_mod(_) | ast::item_foreign_mod(_) {\n                     add_name(mods, it.span, it.ident);\n                   }\n                   ast::item_const(_, _) | ast::item_fn(*) {\n@@ -2009,7 +2011,7 @@ fn check_exports(e: @env) {\n                       _ { e.sess.span_bug(vi.span, \"unresolved export\"); }\n                     }\n                   }\n-                  mie_item(@{id, _}) | mie_native_item(@{id, _}) |\n+                  mie_item(@{id, _}) | mie_foreign_item(@{id, _}) |\n                   mie_enum_variant(_, _, id, _) {\n                     add_export(e, export_id, local_def(id), false);\n                   }"}, {"sha": "e5423650cb3c5489134250c61eef2f1b8bab61be", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -221,18 +221,18 @@ fn get_simple_extern_fn(cx: block,\n     ret get_extern_fn(externs, llmod, name, lib::llvm::CCallConv, t);\n }\n \n-fn trans_native_call(cx: block, externs: hashmap<str, ValueRef>,\n-                     llmod: ModuleRef, name: str, args: [ValueRef]/~) ->\n+fn trans_foreign_call(cx: block, externs: hashmap<str, ValueRef>,\n+                      llmod: ModuleRef, name: str, args: [ValueRef]/~) ->\n    ValueRef {\n-    let _icx = cx.insn_ctxt(\"trans_native_call\");\n+    let _icx = cx.insn_ctxt(\"trans_foreign_call\");\n     let n = args.len() as int;\n-    let llnative: ValueRef =\n+    let llforeign: ValueRef =\n         get_simple_extern_fn(cx, externs, llmod, name, n);\n     let mut call_args: [ValueRef]/~ = []/~;\n     for vec::each(args) {|a|\n         vec::push(call_args, a);\n     }\n-    ret Call(cx, llnative, call_args);\n+    ret Call(cx, llforeign, call_args);\n }\n \n fn trans_free(cx: block, v: ValueRef) -> block {\n@@ -2169,10 +2169,10 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n       ast_map::node_item(i, pt) { (pt, i.ident, i.span) }\n       ast_map::node_variant(v, enm, pt) { (pt, v.node.name, enm.span) }\n       ast_map::node_method(m, _, pt) { (pt, m.ident, m.span) }\n-      ast_map::node_native_item(i, ast::native_abi_rust_intrinsic, pt)\n+      ast_map::node_foreign_item(i, ast::foreign_abi_rust_intrinsic, pt)\n       { (pt, i.ident, i.span) }\n-      ast_map::node_native_item(_, abi, _) {\n-        // Natives don't have to be monomorphized.\n+      ast_map::node_foreign_item(_, abi, _) {\n+        // Foreign externs don't have to be monomorphized.\n         ret {val: get_item_val(ccx, fn_id.node),\n              must_cast: true};\n       }\n@@ -2223,9 +2223,9 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n       ast_map::node_item(*) {\n           ccx.tcx.sess.bug(\"Can't monomorphize this kind of item\")\n       }\n-      ast_map::node_native_item(i, _, _) {\n+      ast_map::node_foreign_item(i, _, _) {\n           let d = mk_lldecl();\n-          native::trans_intrinsic(ccx, d, i, pt, option::get(psubsts),\n+          foreign::trans_intrinsic(ccx, d, i, pt, option::get(psubsts),\n                                 ref_id);\n           d\n       }\n@@ -2316,7 +2316,7 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n             ccx.external.insert(fn_id, some(ctor.node.id));\n             local_def(ctor.node.id)\n           }\n-          csearch::found(ast::ii_native(item)) {\n+          csearch::found(ast::ii_foreign(item)) {\n             ccx.external.insert(fn_id, some(item.id));\n             local_def(item.id)\n           }\n@@ -2406,11 +2406,11 @@ fn lval_static_fn_inner(bcx: block, fn_id: ast::def_id, id: ast::node_id,\n             ccx, node_id_type(bcx, id))));\n     }\n \n-    // FIXME: Need to support external crust functions (#1840)\n+    // FIXME: Need to support extern-ABI functions (#1840)\n     if fn_id.crate == ast::local_crate {\n         alt bcx.tcx().def_map.find(id) {\n-          some(ast::def_fn(_, ast::crust_fn)) {\n-            // Crust functions are just opaque pointers\n+          some(ast::def_fn(_, ast::extern_fn)) {\n+            // Extern functions are just opaque pointers\n             let val = PointerCast(bcx, val, T_ptr(T_i8()));\n             ret lval_no_env(bcx, val, owned_imm);\n           }\n@@ -4899,10 +4899,10 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n     };\n     alt item.node {\n       ast::item_fn(decl, tps, body) {\n-        if decl.purity == ast::crust_fn  {\n+        if decl.purity == ast::extern_fn  {\n             let llfndecl = get_item_val(ccx, item.id);\n-            native::trans_crust_fn(ccx, *path + [path_name(item.ident)]/~,\n-                                   decl, body, llfndecl, item.id);\n+            foreign::trans_extern_fn(ccx, *path + [path_name(item.ident)]/~,\n+                                     decl, body, llfndecl, item.id);\n         } else if tps.len() == 0u {\n             let llfndecl = get_item_val(ccx, item.id);\n             trans_fn(ccx, *path + [path_name(item.ident)]/~, decl, body,\n@@ -4941,12 +4941,12 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         }\n       }\n       ast::item_const(_, expr) { trans_const(ccx, expr, item.id); }\n-      ast::item_native_mod(native_mod) {\n-        let abi = alt attr::native_abi(item.attrs) {\n+      ast::item_foreign_mod(foreign_mod) {\n+        let abi = alt attr::foreign_abi(item.attrs) {\n           either::right(abi_) { abi_ }\n           either::left(msg) { ccx.sess.span_fatal(item.span, msg) }\n         };\n-        native::trans_native_mod(ccx, native_mod, abi);\n+        foreign::trans_foreign_mod(ccx, foreign_mod, abi);\n       }\n       ast::item_class(tps, _ifaces, items, ctor, m_dtor, _) {\n         if tps.len() == 0u {\n@@ -5169,10 +5169,10 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                 g\n               }\n               ast::item_fn(decl, _, _) {\n-                let llfn = if decl.purity != ast::crust_fn {\n+                let llfn = if decl.purity != ast::extern_fn {\n                     register_fn(ccx, i.span, my_path, i.id)\n                 } else {\n-                    native::register_crust_fn(ccx, i.span, my_path, i.id)\n+                    foreign::register_extern_fn(ccx, i.span, my_path, i.id)\n                 };\n                 set_inline_hint_if_appr(i.attrs, llfn);\n                 llfn\n@@ -5188,7 +5188,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             set_inline_hint_if_appr(m.attrs, llfn);\n             llfn\n           }\n-          ast_map::node_native_item(ni, _, pth) {\n+          ast_map::node_foreign_item(ni, _, pth) {\n             exprt = true;\n             register_fn(ccx, ni.span, *pth + [path_name(ni.ident)]/~, ni.id)\n           }"}, {"sha": "fcb5e9499882ad4068f89057101a8b90068694f7", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -38,18 +38,28 @@ type tydesc_info =\n      mut visit_glue: option<ValueRef>};\n \n /*\n- * A note on nomenclature of linking: \"upcall\", \"extern\" and \"native\".\n+ * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n  *\n  * An \"extern\" is an LLVM symbol we wind up emitting an undefined external\n  * reference to. This means \"we don't have the thing in this compilation unit,\n  * please make sure you link it in at runtime\". This could be a reference to\n  * C code found in a C library, or rust code found in a rust crate.\n  *\n- * A \"native\" is an extern that references C code. Called with cdecl.\n+ * Most \"externs\" are implicitly declared (automatically) as a result of a\n+ * user declaring an extern _module_ dependency; this causes the rust driver\n+ * to locate an extern crate, scan its compilation metadata, and emit extern\n+ * declarations for any symbols used by the declaring crate.\n  *\n- * An upcall is a native call generated by the compiler (not corresponding to\n- * any user-written call in the code) into librustrt, to perform some helper\n- * task such as bringing a task to life, allocating memory, etc.\n+ * A \"foreign\" is an extern that references C (or other non-rust ABI) code.\n+ * There is no metadata to scan for extern references so in these cases either\n+ * a header-digester like bindgen, or manual function prototypes, have to\n+ * serve as declarators. So these are usually given explicitly as prototype\n+ * declarations, in rust code, with ABI attributes on them noting which ABI to\n+ * link via.\n+ *\n+ * An \"upcall\" is a foreign call generated by the compiler (not corresponding\n+ * to any user-written call in the code) into the runtime library, to perform\n+ * some helper task such as bringing a task to life, allocating memory, etc.\n  *\n  */\n "}, {"sha": "b83fc11e85cda0ec2fed9f24a8ff534d19edef26", "filename": "src/rustc/middle/trans/foreign.rs", "status": "renamed", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -18,7 +18,7 @@ import type_of::*;\n import std::map::hashmap;\n import util::ppaux::ty_to_str;\n \n-export link_name, trans_native_mod, register_crust_fn, trans_crust_fn,\n+export link_name, trans_foreign_mod, register_extern_fn, trans_extern_fn,\n        trans_intrinsic;\n \n enum x86_64_reg_class {\n@@ -419,7 +419,7 @@ fn decl_x86_64_fn(tys: x86_64_tys,\n     ret llfn;\n }\n \n-fn link_name(i: @ast::native_item) -> str {\n+fn link_name(i: @ast::foreign_item) -> str {\n     alt attr::first_attr_value_str_by_name(i.attrs, \"link_name\") {\n       none { ret *i.ident; }\n       option::some(ln) { ret *ln; }\n@@ -518,7 +518,7 @@ fn build_wrap_fn_(ccx: @crate_ctxt,\n                   arg_builder: wrap_arg_builder,\n                   ret_builder: wrap_ret_builder) {\n \n-    let _icx = ccx.insn_ctxt(\"native::build_wrap_fn_\");\n+    let _icx = ccx.insn_ctxt(\"foreign::build_wrap_fn_\");\n     let fcx = new_fn_ctxt(ccx, []/~, llwrapfn, none);\n     let bcx = top_scope_block(fcx, none);\n     let lltop = bcx.llbb;\n@@ -575,21 +575,21 @@ fn build_wrap_fn_(ccx: @crate_ctxt,\n // stack pointer appropriately to avoid a round of copies.  (In fact, the shim\n // function itself is unnecessary). We used to do this, in fact, and will\n // perhaps do so in the future.\n-fn trans_native_mod(ccx: @crate_ctxt,\n-                    native_mod: ast::native_mod, abi: ast::native_abi) {\n+fn trans_foreign_mod(ccx: @crate_ctxt,\n+                    foreign_mod: ast::foreign_mod, abi: ast::foreign_abi) {\n \n-    let _icx = ccx.insn_ctxt(\"native::trans_native_mod\");\n+    let _icx = ccx.insn_ctxt(\"foreign::trans_foreign_mod\");\n \n     fn build_shim_fn(ccx: @crate_ctxt,\n-                     native_item: @ast::native_item,\n+                     foreign_item: @ast::foreign_item,\n                      tys: @c_stack_tys,\n                      cc: lib::llvm::CallConv) -> ValueRef {\n \n-        let _icx = ccx.insn_ctxt(\"native::build_shim_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::build_shim_fn\");\n \n         fn build_args(bcx: block, tys: @c_stack_tys,\n                       llargbundle: ValueRef) -> [ValueRef]/~ {\n-            let _icx = bcx.insn_ctxt(\"native::shim::build_args\");\n+            let _icx = bcx.insn_ctxt(\"foreign::shim::build_args\");\n             let mut llargvals = []/~;\n             let mut i = 0u;\n             let n = vec::len(tys.arg_tys);\n@@ -635,7 +635,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n \n         fn build_ret(bcx: block, tys: @c_stack_tys,\n                      llargbundle: ValueRef, llretval: ValueRef)  {\n-            let _icx = bcx.insn_ctxt(\"native::shim::build_ret\");\n+            let _icx = bcx.insn_ctxt(\"foreign::shim::build_ret\");\n             alt tys.x86_64_tys {\n                 some(x86_64) {\n                     vec::iteri(x86_64.attrs) {|i, a|\n@@ -676,7 +676,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n             }\n         }\n \n-        let lname = link_name(native_item);\n+        let lname = link_name(foreign_item);\n         let llbasefn = base_fn(ccx, lname, tys, cc);\n         // Name the shim function\n         let shim_name = lname + \"__c_stack_shim\";\n@@ -703,7 +703,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n     // FIXME (#2535): this is very shaky and probably gets ABIs wrong all\n     // over the place\n     fn build_direct_fn(ccx: @crate_ctxt, decl: ValueRef,\n-                       item: @ast::native_item, tys: @c_stack_tys,\n+                       item: @ast::foreign_item, tys: @c_stack_tys,\n                        cc: lib::llvm::CallConv) {\n         let fcx = new_fn_ctxt(ccx, []/~, decl, none);\n         let bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n@@ -726,11 +726,11 @@ fn trans_native_mod(ccx: @crate_ctxt,\n                      llshimfn: ValueRef,\n                      llwrapfn: ValueRef) {\n \n-        let _icx = ccx.insn_ctxt(\"native::build_wrap_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::build_wrap_fn\");\n \n         fn build_args(bcx: block, tys: @c_stack_tys,\n                       llwrapfn: ValueRef, llargbundle: ValueRef) {\n-            let _icx = bcx.insn_ctxt(\"native::wrap::build_args\");\n+            let _icx = bcx.insn_ctxt(\"foreign::wrap::build_args\");\n             let mut i = 0u;\n             let n = vec::len(tys.arg_tys);\n             let implicit_args = first_real_arg; // ret + env\n@@ -745,7 +745,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n \n         fn build_ret(bcx: block, _tys: @c_stack_tys,\n                      _llargbundle: ValueRef) {\n-            let _icx = bcx.insn_ctxt(\"native::wrap::build_ret\");\n+            let _icx = bcx.insn_ctxt(\"foreign::wrap::build_ret\");\n             RetVoid(bcx);\n         }\n \n@@ -755,22 +755,22 @@ fn trans_native_mod(ccx: @crate_ctxt,\n     }\n \n     let mut cc = alt abi {\n-      ast::native_abi_rust_intrinsic |\n-      ast::native_abi_cdecl { lib::llvm::CCallConv }\n-      ast::native_abi_stdcall { lib::llvm::X86StdcallCallConv }\n+      ast::foreign_abi_rust_intrinsic |\n+      ast::foreign_abi_cdecl { lib::llvm::CCallConv }\n+      ast::foreign_abi_stdcall { lib::llvm::X86StdcallCallConv }\n     };\n \n-    for vec::each(native_mod.items) {|native_item|\n-      alt native_item.node {\n-        ast::native_item_fn(fn_decl, typarams) {\n-          let id = native_item.id;\n-          if abi != ast::native_abi_rust_intrinsic {\n+    for vec::each(foreign_mod.items) {|foreign_item|\n+      alt foreign_item.node {\n+        ast::foreign_item_fn(fn_decl, typarams) {\n+          let id = foreign_item.id;\n+          if abi != ast::foreign_abi_rust_intrinsic {\n               let llwrapfn = get_item_val(ccx, id);\n               let tys = c_stack_tys(ccx, id);\n-              if attr::attrs_contains_name(native_item.attrs, \"rust_stack\") {\n-                  build_direct_fn(ccx, llwrapfn, native_item, tys, cc);\n+              if attr::attrs_contains_name(foreign_item.attrs, \"rust_stack\") {\n+                  build_direct_fn(ccx, llwrapfn, foreign_item, tys, cc);\n               } else {\n-                  let llshimfn = build_shim_fn(ccx, native_item, tys, cc);\n+                  let llshimfn = build_shim_fn(ccx, foreign_item, tys, cc);\n                   build_wrap_fn(ccx, tys, llshimfn, llwrapfn);\n               }\n           } else {\n@@ -779,9 +779,9 @@ fn trans_native_mod(ccx: @crate_ctxt,\n               if typarams.is_empty() {\n                   let llwrapfn = get_item_val(ccx, id);\n                   let path = alt ccx.tcx.items.find(id) {\n-                      some(ast_map::node_native_item(_, _, pt)) { pt }\n+                      some(ast_map::node_foreign_item(_, _, pt)) { pt }\n                       _ {\n-                          ccx.sess.span_bug(native_item.span,\n+                          ccx.sess.span_bug(foreign_item.span,\n                                             \"can't find intrinsic path\")\n                       }\n                   };\n@@ -790,7 +790,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n                       vtables: none,\n                       bounds: @[]/~\n                   };\n-                  trans_intrinsic(ccx, llwrapfn, native_item,\n+                  trans_intrinsic(ccx, llwrapfn, foreign_item,\n                                   *path, psubsts, none);\n               }\n           }\n@@ -799,7 +799,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n     }\n }\n \n-fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n+fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n                    path: ast_map::path, substs: param_substs,\n                    ref_id: option<ast::node_id>) {\n     let fcx = new_fn_ctxt_w_id(ccx, path, decl, item.id,\n@@ -922,15 +922,15 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n     finish_fn(fcx, lltop);\n }\n \n-fn trans_crust_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n+fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n                   body: ast::blk, llwrapfn: ValueRef, id: ast::node_id) {\n \n-    let _icx = ccx.insn_ctxt(\"native::build_crust_fn\");\n+    let _icx = ccx.insn_ctxt(\"foreign::build_extern_fn\");\n \n     fn build_rust_fn(ccx: @crate_ctxt, path: ast_map::path,\n                      decl: ast::fn_decl, body: ast::blk,\n                      id: ast::node_id) -> ValueRef {\n-        let _icx = ccx.insn_ctxt(\"native::crust::build_rust_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::extern::build_rust_fn\");\n         let t = ty::node_id_to_type(ccx.tcx, id);\n         let ps = link::mangle_internal_name_by_path(\n             ccx, path + [ast_map::path_name(@\"__rust_abi\")]/~);\n@@ -943,11 +943,11 @@ fn trans_crust_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n     fn build_shim_fn(ccx: @crate_ctxt, path: ast_map::path,\n                      llrustfn: ValueRef, tys: @c_stack_tys) -> ValueRef {\n \n-        let _icx = ccx.insn_ctxt(\"native::crust::build_shim_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::extern::build_shim_fn\");\n \n         fn build_args(bcx: block, tys: @c_stack_tys,\n                       llargbundle: ValueRef) -> [ValueRef]/~ {\n-            let _icx = bcx.insn_ctxt(\"native::crust::shim::build_args\");\n+            let _icx = bcx.insn_ctxt(\"foreign::crust::shim::build_args\");\n             let mut llargvals = []/~;\n             let mut i = 0u;\n             let n = vec::len(tys.arg_tys);\n@@ -979,11 +979,11 @@ fn trans_crust_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n     fn build_wrap_fn(ccx: @crate_ctxt, llshimfn: ValueRef,\n                      llwrapfn: ValueRef, tys: @c_stack_tys) {\n \n-        let _icx = ccx.insn_ctxt(\"native::crust::build_wrap_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::extern::build_wrap_fn\");\n \n         fn build_args(bcx: block, tys: @c_stack_tys,\n                       llwrapfn: ValueRef, llargbundle: ValueRef) {\n-            let _icx = bcx.insn_ctxt(\"native::crust::wrap::build_args\");\n+            let _icx = bcx.insn_ctxt(\"foreign::extern::wrap::build_args\");\n             alt tys.x86_64_tys {\n                 option::some(x86_64) {\n                     let mut atys = x86_64.arg_tys;\n@@ -1037,7 +1037,7 @@ fn trans_crust_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n \n         fn build_ret(bcx: block, tys: @c_stack_tys,\n                      llargbundle: ValueRef) {\n-            let _icx = bcx.insn_ctxt(\"native::crust::wrap::build_ret\");\n+            let _icx = bcx.insn_ctxt(\"foreign::extern::wrap::build_ret\");\n             alt tys.x86_64_tys {\n                 option::some(x86_64) {\n                     if x86_64.sret || !tys.ret_def {\n@@ -1078,10 +1078,10 @@ fn trans_crust_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n     build_wrap_fn(ccx, llshimfn, llwrapfn, tys)\n }\n \n-fn register_crust_fn(ccx: @crate_ctxt, sp: span,\n+fn register_extern_fn(ccx: @crate_ctxt, sp: span,\n                      path: ast_map::path, node_id: ast::node_id)\n     -> ValueRef {\n-    let _icx = ccx.insn_ctxt(\"native::register_crust_fn\");\n+    let _icx = ccx.insn_ctxt(\"foreign::register_extern_fn\");\n     let t = ty::node_id_to_type(ccx.tcx, node_id);\n     let (llargtys, llretty, ret_ty) = c_arg_and_ret_lltys(ccx, node_id);\n     ret if ccx.sess.targ_cfg.arch == arch_x86_64 {\n@@ -1098,16 +1098,16 @@ fn register_crust_fn(ccx: @crate_ctxt, sp: span,\n     }\n }\n \n-fn abi_of_native_fn(ccx: @crate_ctxt, i: @ast::native_item)\n-    -> ast::native_abi {\n+fn abi_of_foreign_fn(ccx: @crate_ctxt, i: @ast::foreign_item)\n+    -> ast::foreign_abi {\n     alt attr::first_attr_value_str_by_name(i.attrs, \"abi\") {\n       none {\n         alt check ccx.tcx.items.get(i.id) {\n-          ast_map::node_native_item(_, abi, _) { abi }\n+          ast_map::node_foreign_item(_, abi, _) { abi }\n         }\n       }\n       some(_) {\n-        alt attr::native_abi(i.attrs) {\n+        alt attr::foreign_abi(i.attrs) {\n           either::right(abi) { abi }\n           either::left(msg) { ccx.sess.span_fatal(i.span, msg); }\n         }", "previous_filename": "src/rustc/middle/trans/native.rs"}, {"sha": "344e68bbc19aa2eef02bb8bed08b35b0d81acfb9", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -67,7 +67,7 @@ fn traverse_def_id(cx: ctx, did: def_id) {\n     alt n {\n       ast_map::node_item(item, _) { traverse_public_item(cx, item); }\n       ast_map::node_method(_, impl_id, _) { traverse_def_id(cx, impl_id); }\n-      ast_map::node_native_item(item, _, _) { cx.rmap.insert(item.id, ()); }\n+      ast_map::node_foreign_item(item, _, _) { cx.rmap.insert(item.id, ()); }\n       ast_map::node_variant(v, _, _) { cx.rmap.insert(v.node.id, ()); }\n       // If it's a ctor, consider the parent reachable\n       ast_map::node_ctor(_, _, _, parent_id, _) {\n@@ -89,7 +89,7 @@ fn traverse_public_item(cx: ctx, item: @item) {\n     cx.rmap.insert(item.id, ());\n     alt item.node {\n       item_mod(m) { traverse_public_mod(cx, m); }\n-      item_native_mod(nm) {\n+      item_foreign_mod(nm) {\n           if !traverse_exports(cx, nm.view_items) {\n               for vec::each(nm.items) {|item| cx.rmap.insert(item.id, ()); }\n           }"}, {"sha": "edfb7e6f8263541f6727d672a53230bc21262211", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -170,7 +170,7 @@ impl methods for reflector {\n               ast::pure_fn { 0u }\n               ast::unsafe_fn { 1u }\n               ast::impure_fn { 2u }\n-              ast::crust_fn { 3u }\n+              ast::extern_fn { 3u }\n             };\n             let protoval = alt fty.proto {\n               ast::proto_bare { 0u }"}, {"sha": "2be90746b493c0c3651941919298d89d287f7bcf", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -72,8 +72,9 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n       ast_map::node_variant(_, _, _) {\n         for uint::range(0u, n_tps) {|n| cx.uses[n] |= use_repr;}\n       }\n-      ast_map::node_native_item(i@@{node: native_item_fn(_, _), _}, abi, _) {\n-        if abi == native_abi_rust_intrinsic {\n+      ast_map::node_foreign_item(i@@{node: foreign_item_fn(_, _), _},\n+                                 abi, _) {\n+        if abi == foreign_abi_rust_intrinsic {\n             let flags = alt check *i.ident {\n               \"visit_ty\" { 3u }\n               \"size_of\" |  \"pref_align_of\" | \"min_align_of\" |"}, {"sha": "63a03197a7a0061802fb774e5b1c4921ab2bb343", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -20,8 +20,8 @@ fn find_pre_post_mod(_m: _mod) -> _mod {\n     fail;\n }\n \n-fn find_pre_post_native_mod(_m: native_mod) -> native_mod {\n-    #debug(\"implement find_pre_post_native_mod\");\n+fn find_pre_post_foreign_mod(_m: foreign_mod) -> foreign_mod {\n+    #debug(\"implement find_pre_post_foreign_mod\");\n     fail;\n }\n \n@@ -47,7 +47,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n         find_pre_post_fn(fcx, body);\n       }\n       item_mod(m) { find_pre_post_mod(m); }\n-      item_native_mod(nm) { find_pre_post_native_mod(nm); }\n+      item_foreign_mod(nm) { find_pre_post_foreign_mod(nm); }\n       item_ty(*) | item_enum(*) | item_iface(*) { ret; }\n       item_class(*) {\n           fail \"find_pre_post_item: shouldn't be called on item_class\";"}, {"sha": "798dc6aee9b42c871eb3ddec0e5addf161751bf3", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -2611,7 +2611,7 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n         alt node {\n           ast_map::node_item(item, path) {\n             let item_elt = alt item.node {\n-              item_mod(_) | item_native_mod(_) {\n+              item_mod(_) | item_foreign_mod(_) {\n                 ast_map::path_mod(item.ident)\n               }\n               _ {\n@@ -2621,7 +2621,7 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n             *path + [item_elt]/~\n           }\n \n-          ast_map::node_native_item(nitem, _, path) {\n+          ast_map::node_foreign_item(nitem, _, path) {\n             *path + [ast_map::path_name(nitem.ident)]/~\n           }\n "}, {"sha": "bb19f7df7cada5093ebeda4fe6eba88f0aee454b", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -391,9 +391,9 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         let tpt_ty = ty::node_id_to_type(ccx.tcx, it.id);\n         check_bounds_are_used(ccx, t.span, tps, rp, tpt_ty);\n       }\n-      ast::item_native_mod(m) {\n-        if syntax::attr::native_abi(it.attrs) ==\n-            either::right(ast::native_abi_rust_intrinsic) {\n+      ast::item_foreign_mod(m) {\n+        if syntax::attr::foreign_abi(it.attrs) ==\n+            either::right(ast::foreign_abi_rust_intrinsic) {\n             for m.items.each { |item|\n                 check_intrinsic_type(ccx, item);\n             }\n@@ -2016,7 +2016,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n           }\n         }\n       }\n-      ast::def_fn(id, ast::crust_fn) {\n+      ast::def_fn(id, ast::extern_fn) {\n         // Crust functions are just u8 pointers\n         ret {\n             bounds: @[]/~,\n@@ -2054,7 +2054,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_ty_param(did, n) {\n         ret no_params(ty::mk_param(fcx.ccx.tcx, n, did));\n       }\n-      ast::def_mod(*) | ast::def_native_mod(*) {\n+      ast::def_mod(*) | ast::def_foreign_mod(*) {\n         fcx.ccx.tcx.sess.span_fatal(sp, \"expected value but found module\");\n       }\n       ast::def_use(*) {\n@@ -2210,7 +2210,7 @@ fn check_bounds_are_used(ccx: @crate_ctxt,\n     }\n }\n \n-fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::native_item) {\n+fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n     fn param(ccx: @crate_ctxt, n: uint) -> ty::t {\n         ty::mk_param(ccx.tcx, n, local_def(0))\n     }"}, {"sha": "a6c1c0e6d32422eb0bc72edc53d6e9cd1d530633", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -197,7 +197,7 @@ fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n             }\n           }\n           ast::def_fn(_, _) | ast::def_mod(_) |\n-          ast::def_native_mod(_) | ast::def_const(_) |\n+          ast::def_foreign_mod(_) | ast::def_const(_) |\n           ast::def_use(_) | ast::def_variant(_, _) |\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n           ast::def_ty_param(_, _) | ast::def_class(_) |"}, {"sha": "8167a9c11de3614e7d1664c00ed846312fe1b2bd", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -54,7 +54,7 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n \n     visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n         visit_item: {|a|convert(ccx, a)},\n-        visit_native_item: {|a|convert_native(ccx, a)}\n+        visit_foreign_item: {|a|convert_foreign(ccx, a)}\n         with *visit::default_simple_visitor()\n     }));\n }\n@@ -77,8 +77,8 @@ impl of ast_conv for @crate_ctxt {\n               some(ast_map::node_item(item, _)) {\n                 ty_of_item(self, item)\n               }\n-              some(ast_map::node_native_item(native_item, _, _)) {\n-                ty_of_native_item(self, native_item)\n+              some(ast_map::node_foreign_item(foreign_item, _, _)) {\n+                ty_of_foreign_item(self, foreign_item)\n               }\n               x {\n                 self.tcx.sess.bug(#fmt[\"unexpected sort of item \\\n@@ -296,7 +296,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n     let tcx = ccx.tcx;\n     alt it.node {\n       // These don't define types.\n-      ast::item_native_mod(_) | ast::item_mod(_) {}\n+      ast::item_foreign_mod(_) | ast::item_mod(_) {}\n       ast::item_enum(variants, ty_params, rp) {\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n@@ -396,13 +396,13 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n       }\n     }\n }\n-fn convert_native(ccx: @crate_ctxt, i: @ast::native_item) {\n+fn convert_foreign(ccx: @crate_ctxt, i: @ast::foreign_item) {\n     // As above, this call populates the type table with the converted\n     // type of the native item. We simply write it into the node type\n     // table.\n-    let tpt = ty_of_native_item(ccx, i);\n+    let tpt = ty_of_foreign_item(ccx, i);\n     alt i.node {\n-      ast::native_item_fn(_, _) {\n+      ast::foreign_item_fn(_, _) {\n         write_ty_to_tcx(ccx.tcx, i.id, tpt.ty);\n         ccx.tcx.tcache.insert(local_def(i.id), tpt);\n       }\n@@ -535,15 +535,15 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n           ret tpt;\n       }\n       ast::item_impl(*) | ast::item_mod(_) |\n-      ast::item_native_mod(_) { fail; }\n+      ast::item_foreign_mod(_) { fail; }\n     }\n }\n \n-fn ty_of_native_item(ccx: @crate_ctxt, it: @ast::native_item)\n+fn ty_of_foreign_item(ccx: @crate_ctxt, it: @ast::foreign_item)\n     -> ty::ty_param_bounds_and_ty {\n     alt it.node {\n-      ast::native_item_fn(fn_decl, params) {\n-        ret ty_of_native_fn_decl(ccx, fn_decl, params,\n+      ast::foreign_item_fn(fn_decl, params) {\n+        ret ty_of_foreign_fn_decl(ccx, fn_decl, params,\n                                  local_def(it.id));\n       }\n     }\n@@ -588,7 +588,7 @@ fn ty_param_bounds(ccx: @crate_ctxt,\n     }\n }\n \n-fn ty_of_native_fn_decl(ccx: @crate_ctxt,\n+fn ty_of_foreign_fn_decl(ccx: @crate_ctxt,\n                         decl: ast::fn_decl,\n                         ty_params: [ast::ty_param]/~,\n                         def_id: ast::def_id) -> ty::ty_param_bounds_and_ty {"}, {"sha": "61d29a840887a279c8f753265991adc0a995eec6", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -179,7 +179,7 @@ import ty::{mk_fn, type_is_bot};\n import check::regionmanip::{replace_bound_regions_in_fn_ty};\n import driver::session::session;\n import util::common::{indent, indenter};\n-import ast::{unsafe_fn, impure_fn, pure_fn, crust_fn};\n+import ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n import ast::{m_const, m_imm, m_mutbl};\n \n export infer_ctxt;\n@@ -2132,7 +2132,7 @@ impl of combine for lub {\n         alt (f1, f2) {\n           (unsafe_fn, _) | (_, unsafe_fn) {ok(unsafe_fn)}\n           (impure_fn, _) | (_, impure_fn) {ok(impure_fn)}\n-          (crust_fn, _) | (_, crust_fn) {ok(crust_fn)}\n+          (extern_fn, _) | (_, extern_fn) {ok(extern_fn)}\n           (pure_fn, pure_fn) {ok(pure_fn)}\n         }\n     }\n@@ -2332,7 +2332,7 @@ impl of combine for glb {\n     fn purities(f1: purity, f2: purity) -> cres<purity> {\n         alt (f1, f2) {\n           (pure_fn, _) | (_, pure_fn) {ok(pure_fn)}\n-          (crust_fn, _) | (_, crust_fn) {ok(crust_fn)}\n+          (extern_fn, _) | (_, extern_fn) {ok(extern_fn)}\n           (impure_fn, _) | (_, impure_fn) {ok(impure_fn)}\n           (unsafe_fn, unsafe_fn) {ok(unsafe_fn)}\n         }"}, {"sha": "5af48fa8e47967625cb7cca5b9d53a6d202f8375", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -43,7 +43,7 @@ mod middle {\n         mod closure;\n         mod tvec;\n         mod impl;\n-        mod native;\n+        mod foreign;\n         mod reflect;\n         mod shape;\n         mod debuginfo;"}, {"sha": "3a2c7eb2f25e15f7969115f4b7ec3123461dea21", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -94,7 +94,7 @@ fn parse_item_attrs<T:send>(\n     astsrv::exec(srv) {|ctxt|\n         let attrs = alt ctxt.ast_map.get(id) {\n           ast_map::node_item(item, _) { item.attrs }\n-          ast_map::node_native_item(item, _, _) { item.attrs }\n+          ast_map::node_foreign_item(item, _, _) { item.attrs }\n           _ {\n             fail \"parse_item_attrs: not an item\";\n           }\n@@ -116,13 +116,13 @@ fn should_extract_top_mod_attributes() {\n }\n \n #[test]\n-fn should_extract_native_mod_attributes() {\n+fn should_extract_foreign_mod_attributes() {\n     let doc = test::mk_doc(\"#[doc = \\\"test\\\"] native mod a { }\");\n     assert doc.cratemod().nmods()[0].desc() == some(\"test\");\n }\n \n #[test]\n-fn should_extract_native_fn_attributes() {\n+fn should_extract_foreign_fn_attributes() {\n     let doc = test::mk_doc(\"native mod a { #[doc = \\\"test\\\"] fn a(); }\");\n     assert doc.cratemod().nmods()[0].fns[0].desc() == some(\"test\");\n }"}, {"sha": "343d32019de25b1bb4d3a8fe96983f33b79bbb9e", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -63,7 +63,7 @@ fn moddoc_from_mod(\n                     moddoc_from_mod(itemdoc, m)\n                 ))\n               }\n-              ast::item_native_mod(nm) {\n+              ast::item_foreign_mod(nm) {\n                 some(doc::nmodtag(\n                     nmoddoc_from_mod(itemdoc, nm)\n                 ))\n@@ -109,14 +109,14 @@ fn moddoc_from_mod(\n \n fn nmoddoc_from_mod(\n     itemdoc: doc::itemdoc,\n-    module: ast::native_mod\n+    module: ast::foreign_mod\n ) -> doc::nmoddoc {\n     {\n         item: itemdoc,\n         fns: par::seqmap(module.items) {|item|\n             let itemdoc = mk_itemdoc(item.id, item.ident);\n             alt item.node {\n-              ast::native_item_fn(_, _) {\n+              ast::foreign_item_fn(_, _) {\n                 fndoc_from_fn(itemdoc)\n               }\n             }\n@@ -290,13 +290,13 @@ mod test {\n     }\n \n     #[test]\n-    fn extract_native_mods() {\n+    fn extract_foreign_mods() {\n         let doc = mk_doc(\"native mod a { }\");\n         assert doc.cratemod().nmods()[0].name() == \"a\";\n     }\n \n     #[test]\n-    fn extract_fns_from_native_mods() {\n+    fn extract_fns_from_foreign_mods() {\n         let doc = mk_doc(\"native mod a { fn a(); }\");\n         assert doc.cratemod().nmods()[0].fns[0].name() == \"a\";\n     }"}, {"sha": "837390cb055497ed180e68412ce99348c95bf283", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -176,7 +176,7 @@ fn should_index_mod_contents_multi_page() {\n }\n \n #[test]\n-fn should_index_native_mod_pages() {\n+fn should_index_foreign_mod_pages() {\n     let doc = test::mk_doc(\n         config::doc_per_mod,\n         \"native mod a { }\"\n@@ -199,7 +199,7 @@ fn should_add_brief_desc_to_index() {\n }\n \n #[test]\n-fn should_index_native_mod_contents() {\n+fn should_index_foreign_mod_contents() {\n     let doc = test::mk_doc(\n         config::doc_per_crate,\n         \"native mod a { fn b(); }\""}, {"sha": "51534d0cf96013af3033b1e88bf17934b420e2ad", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -413,7 +413,7 @@ fn should_not_write_index_if_no_entries() {\n }\n \n #[test]\n-fn should_write_index_for_native_mods() {\n+fn should_write_index_for_foreign_mods() {\n     let markdown = test::render(\"native mod a { fn a(); }\");\n     assert str::contains(\n         markdown,\n@@ -434,20 +434,20 @@ fn write_nmod(ctxt: ctxt, doc: doc::nmoddoc) {\n }\n \n #[test]\n-fn should_write_native_mods() {\n+fn should_write_foreign_mods() {\n     let markdown = test::render(\"#[doc = \\\"test\\\"] native mod a { }\");\n     assert str::contains(markdown, \"Native module `a`\");\n     assert str::contains(markdown, \"test\");\n }\n \n #[test]\n-fn should_write_native_fns() {\n+fn should_write_foreign_fns() {\n     let markdown = test::render(\"native mod a { #[doc = \\\"test\\\"] fn a(); }\");\n     assert str::contains(markdown, \"test\");\n }\n \n #[test]\n-fn should_write_native_fn_headers() {\n+fn should_write_foreign_fn_headers() {\n     let markdown = test::render(\"native mod a { #[doc = \\\"test\\\"] fn a(); }\");\n     assert str::contains(markdown, \"## Function `a`\");\n }"}, {"sha": "50be2a5415ddd70f9c23206225523024ce737d57", "filename": "src/rustdoc/page_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpage_pass.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -149,13 +149,13 @@ fn should_remove_mods_from_containing_mods() {\n }\n \n #[test]\n-fn should_make_a_page_for_every_native_mod() {\n+fn should_make_a_page_for_every_foreign_mod() {\n     let doc = test::mk_doc(\"native mod a { }\");\n     assert doc.pages.nmods()[0].name() == \"a\";\n }\n \n #[test]\n-fn should_remove_native_mods_from_containing_mods() {\n+fn should_remove_foreign_mods_from_containing_mods() {\n     let doc = test::mk_doc(\"native mod a { }\");\n     assert vec::is_empty(doc.cratemod().nmods());\n }"}, {"sha": "377551ed9839091d65579e402b751bc393010134", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -87,7 +87,7 @@ fn should_record_fn_paths() {\n }\n \n #[test]\n-fn should_record_native_mod_paths() {\n+fn should_record_foreign_mod_paths() {\n     let source = \"mod a { native mod b { } }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");\n@@ -97,7 +97,7 @@ fn should_record_native_mod_paths() {\n }\n \n #[test]\n-fn should_record_native_fn_paths() {\n+fn should_record_foreign_fn_paths() {\n     let source = \"native mod a { fn b(); }\";\n     astsrv::from_str(source) {|srv|\n         let doc = extract::from_srv(srv, \"\");"}, {"sha": "b0b471397edb1c05f00dfdbefc2a027af3ab21aa", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -445,7 +445,7 @@ fn should_duplicate_reexported_impls_crate() {\n }\n \n #[test]\n-fn should_duplicate_reexported_native_fns() {\n+fn should_duplicate_reexported_foreign_fns() {\n     let source = \"native mod a { fn b(); } \\\n                   mod c { import a::b; export b; }\";\n     let doc = test::mk_doc(source);"}, {"sha": "553e9d32e532bf84dad38b3e3879dc2eb57d057b", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -51,9 +51,9 @@ fn get_fn_sig(srv: astsrv::srv, fn_id: doc::ast_id) -> option<str> {\n             ident: ident,\n             node: ast::item_fn(decl, tys, _), _\n           }, _) |\n-          ast_map::node_native_item(@{\n+          ast_map::node_foreign_item(@{\n             ident: ident,\n-            node: ast::native_item_fn(decl, tys), _\n+            node: ast::foreign_item_fn(decl, tys), _\n           }, _, _) {\n             some(pprust::fun_to_str(decl, ident, tys))\n           }\n@@ -68,7 +68,7 @@ fn should_add_fn_sig() {\n }\n \n #[test]\n-fn should_add_native_fn_sig() {\n+fn should_add_foreign_fn_sig() {\n     let doc = test::mk_doc(\"native mod a { fn a<T>() -> int; }\");\n     assert doc.cratemod().nmods()[0].fns[0].sig == some(\"fn a<T>() -> int\");\n }"}, {"sha": "16eb4f9589fc0694b0c06092148f03306a64173c", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -1,4 +1,4 @@\n-#[link(name=\"native_lib\", vers=\"0.0\")];\n+#[link(name=\"foreign_lib\", vers=\"0.0\")];\n \n native mod rustrt {\n     fn last_os_error() -> str;", "previous_filename": "src/test/auxiliary/native_lib.rs"}, {"sha": "613d1c0028ce6606fc6c462914dbe58eeb6aae42", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     }\n \n     f(g);\n-    //!^ ERROR mismatched types: expected `native fn(native fn(native fn()))`\n+    //!^ ERROR mismatched types: expected `extern fn(extern fn(extern fn()))`\n }"}, {"sha": "b544c58e6705ee86a029cf11c4bd1aa3ec690fcc", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -6,7 +6,7 @@ fn coerce(b: fn()) -> native fn() {\n            g: fn()) -> native fn() { ret f(g); }\n     fn fn_id(f: native fn()) -> native fn() { ret f }\n     ret lol(fn_id, b);\n-    //!^ ERROR mismatched types: expected `native fn(fn()) -> native fn()`\n+    //!^ ERROR mismatched types: expected `extern fn(fn()) -> extern fn()`\n }\n \n fn main() {"}, {"sha": "3dd0654f2fbf962fe4164d73394d2879a895a68a", "filename": "src/test/compile-fail/fn-compare-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     fn f() { }\n     fn g(i: int) { }\n     let x = f == g;\n-    //!^ ERROR expected `native fn()` but found `native fn(int)`\n+    //!^ ERROR expected `extern fn()` but found `extern fn(int)`\n }"}, {"sha": "338956f7796fc5da75b2de764116acfc0194cfd0", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -1,3 +1,3 @@\n fn main() -> char {\n-//!^ ERROR Wrong type in main function: found `native fn() -> char`\n+//!^ ERROR Wrong type in main function: found `extern fn() -> char`\n }"}, {"sha": "859a70e0a510cb14cdd93e27a2f3dc9144755331", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -1,3 +1,3 @@\n fn main(foo: {x: int, y: int}) {\n-//!^ ERROR Wrong type in main function: found `native fn({x: int,y: int})`\n+//!^ ERROR Wrong type in main function: found `extern fn({x: int,y: int})`\n }"}, {"sha": "a51e9bad46241238b76ab6023b1dc4cc5f708182", "filename": "src/test/pretty/fn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fpretty%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Fpretty%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-types.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -1,6 +1,6 @@\n // pp-exact\n \n-fn from_native_fn(x: native fn()) { }\n+fn from_foreign_fn(x: extern fn()) { }\n fn from_closure(x: fn()) { }\n fn from_stack_closure(x: fn&()) { }\n fn from_box_closure(x: fn@()) { }"}, {"sha": "155195b0428f450a33cb4aa12b43c7ec6d6b53c6", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -120,7 +120,7 @@ native mod test {\n     fn get_task_id();\n }\n \n-fn test_native_fn() {\n+fn test_foreign_fn() {\n     assert test::unsupervise != test::get_task_id;\n     assert test::unsupervise == test::unsupervise;\n }\n@@ -157,6 +157,6 @@ fn main() {\n     test_chan();\n     test_ptr();\n     test_fn();\n-    test_native_fn();\n+    test_foreign_fn();\n     test_class();\n }"}, {"sha": "70cf440949d0e9e7cc7f8799c933c967558dbbb8", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -79,7 +79,7 @@ fn test_in_fn_ctxt() {\n     assert (i == 1);\n }\n \n-mod test_native_items {\n+mod test_foreign_items {\n     #[abi = \"cdecl\"]\n     native mod rustrt {\n         #[cfg(bogus)]"}, {"sha": "72be0d0a3533fcb1590cc14f39c3e30238f2a1e2", "filename": "src/test/run-pass/invoke-external-foreign.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -1,12 +1,12 @@\n // xfail-fast\n-// aux-build:native_lib.rs\n+// aux-build:foreign_lib.rs\n \n // The purpose of this test is to check that we can\n // successfully (and safely) invoke external, cdecl\n // functions from outside the crate.\n \n-use native_lib;\n+use foreign_lib;\n \n fn main() {\n-    let foo = native_lib::rustrt::last_os_error();\n+    let foo = foreign_lib::rustrt::last_os_error();\n }", "previous_filename": "src/test/run-pass/invoke-external-native.rs"}, {"sha": "2f10b0ef1ffc3e2d84ff5058dbf272c4d8cfa39e", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -157,7 +157,7 @@ mod test_other_forms {\n     fn f() { }\n }\n \n-mod test_native_items {\n+mod test_foreign_items {\n     #[abi = \"cdecl\"]\n     native mod rustrt {\n         #[attr];"}, {"sha": "981426ce62a0a9f4fe95cce1a46adb04fd9e985a", "filename": "src/test/run-pass/osmain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fosmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697f1e38d646bb6c7bab054c8c8c5b469c566ef6/src%2Ftest%2Frun-pass%2Fosmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosmain.rs?ref=697f1e38d646bb6c7bab054c8c8c5b469c566ef6", "patch": "@@ -18,7 +18,7 @@ fn run(i: int) {\n     let opts = {\n         sched: some({\n             mode: task::osmain,\n-            native_stack_size: none\n+            foreign_stack_size: none\n         })\n         with task::get_opts(builder)\n     };\n@@ -30,7 +30,7 @@ fn run(i: int) {\n         let opts = {\n             sched: some({\n                 mode: task::single_threaded,\n-                native_stack_size: none\n+                foreign_stack_size: none\n             })\n             with task::get_opts(builder)\n         };"}]}