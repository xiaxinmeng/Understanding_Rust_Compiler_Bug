{"sha": "32cd8efb977b0edec1ddbd1efa2db49dad6faf89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyY2Q4ZWZiOTc3YjBlZGVjMWRkYmQxZWZhMmRiNDlkYWQ2ZmFmODk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-19T14:46:03Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-12T07:40:16Z"}, "message": "re-enable auxiliary tests for the host only", "tree": {"sha": "75324692d90b4318323f3030e1ee4671787abe2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75324692d90b4318323f3030e1ee4671787abe2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32cd8efb977b0edec1ddbd1efa2db49dad6faf89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYdzLgAAoJEFbW7qD8Z6xGigYQAKqqBreaOKMJVeDyXcH1LTxW\nOmfvIHrhD7M7vwEtip7nqOpjMSECNNznZwmsxMM8AXJ4AYvdJG+r6nlZFhZp9hPS\nEVX76xsEU3HwzZyMj3km1KaF8RZe+7pCAEE+Fw2Z3UARxFmAz5cwt66BTl6NXDuc\nTdYFgX5iIVR1n7adcBUyxDgjgnR1cWLgSUEVPidIjsogWXMhDTXOfEcqG6gNhjw8\nQ2tBp6pcKJkwLmmKfQN0vX1LfKQmefAFgyZwpejjAzK4NLfPkIW2JNJOsFtcDbGr\nZmTOxs93T/GizUkxWyfZF9c+oRef9L6nNezWM7xFOGJ+Jb1qDhFzF+OchD/ziEEv\nEJVDxpthNAEu+J9CYhTJb1KvWyo9vDMleCLlQGmyY8DvbYLN6mybD75a1bx868Yd\nqCk/KJMzhHX8L+KnbRld9wJUtsCmqGG9tipfuEw2Qa1Vr6DdTX5ZuILRM9bJXfLI\n4asEwYKuTg0Lbvq7WN1NJYPFCVbuEpg+8KAF8PGY1dIRmK3IbVdKE4m+kAEwxiis\nPfWCvu+3lIfr3ioyybPmYXjfucBK4+ANGY8+Os+Kex5L2uH4SmnVVl7O1hN7VHDd\nsKbxVuy8YwdY4DyXGibKEmzOp/Ik5dfJkLS5+EISDMBn96CWM+0LStOo0lfUiN/0\nsd7yZ+eWM8BD/+rOqd8o\n=HJ2V\n-----END PGP SIGNATURE-----", "payload": "tree 75324692d90b4318323f3030e1ee4671787abe2e\nparent 3a658e09e88ad999fe1f5dbc4ac7a14c0d38c90f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482158763 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1484206816 +0100\n\nre-enable auxiliary tests for the host only"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32cd8efb977b0edec1ddbd1efa2db49dad6faf89", "html_url": "https://github.com/rust-lang/rust/commit/32cd8efb977b0edec1ddbd1efa2db49dad6faf89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32cd8efb977b0edec1ddbd1efa2db49dad6faf89/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a658e09e88ad999fe1f5dbc4ac7a14c0d38c90f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a658e09e88ad999fe1f5dbc4ac7a14c0d38c90f", "html_url": "https://github.com/rust-lang/rust/commit/3a658e09e88ad999fe1f5dbc4ac7a14c0d38c90f"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "56c2e433d0671f6d93bd04c8de203ada18fb0113", "filename": "src/bin/miri.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32cd8efb977b0edec1ddbd1efa2db49dad6faf89/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cd8efb977b0edec1ddbd1efa2db49dad6faf89/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=32cd8efb977b0edec1ddbd1efa2db49dad6faf89", "patch": "@@ -21,7 +21,10 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let mut control = CompileController::basic();\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n-        control.after_analysis.stop = Compilation::Stop;\n+        if std::env::var(\"MIRI_HOST_TARGET\") != Ok(\"yes\".to_owned()) {\n+            // only fully compile targets on the host\n+            control.after_analysis.stop = Compilation::Stop;\n+        }\n         control\n     }\n }\n@@ -136,6 +139,12 @@ fn main() {\n         args.push(sysroot_flag);\n         args.push(find_sysroot());\n     }\n+    // we run the optimization passes inside miri\n+    // if we ran them twice we'd get funny failures due to borrowck ElaborateDrops only working on\n+    // unoptimized MIR\n+    // FIXME: add an after-mir-passes hook to rustc driver\n+    args.push(\"-Zmir-opt-level=0\".to_owned());\n+    // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n \n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls, None, None);"}, {"sha": "90a40d8e39bdf27e4c2df9683ca789e1e6ea4ad7", "filename": "tests/compiletest.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32cd8efb977b0edec1ddbd1efa2db49dad6faf89/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cd8efb977b0edec1ddbd1efa2db49dad6faf89/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=32cd8efb977b0edec1ddbd1efa2db49dad6faf89", "patch": "@@ -27,13 +27,20 @@ fn run_pass() {\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(path: &str, target: &str) {\n+fn miri_pass(path: &str, target: &str, host: &str) {\n     let mut config = compiletest::default_config();\n     config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.rustc_path = PathBuf::from(\"target/debug/miri\");\n+    // don't actually execute the final binary, it might be for other targets and we only care\n+    // about running miri, not the binary.\n+    config.runtool = Some(\"echo \\\"\\\" || \".to_owned());\n+    if target == host {\n+        std::env::set_var(\"MIRI_HOST_TARGET\", \"yes\");\n+    }\n     compiletest::run_tests(&config);\n+    std::env::set_var(\"MIRI_HOST_TARGET\", \"\");\n }\n \n fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n@@ -65,10 +72,11 @@ fn compile_test() {\n             .to_owned(),\n     };\n     run_pass();\n+    let host = toolchain.unwrap().splitn(2, '-').skip(1).next().unwrap();\n     for_all_targets(&sysroot, |target| {\n-        miri_pass(\"tests/run-pass\", &target);\n+        miri_pass(\"tests/run-pass\", &target, host);\n         if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n-            miri_pass(&path, &target);\n+            miri_pass(&path, &target, host);\n         }\n     });\n     compile_fail(&sysroot);"}, {"sha": "1b1dbaa68387eecef10cff436501d2e5151a0b07", "filename": "tests/run-pass/aux_test.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32cd8efb977b0edec1ddbd1efa2db49dad6faf89/tests%2Frun-pass%2Faux_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32cd8efb977b0edec1ddbd1efa2db49dad6faf89/tests%2Frun-pass%2Faux_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faux_test.rs?ref=32cd8efb977b0edec1ddbd1efa2db49dad6faf89", "patch": "@@ -1,9 +1,8 @@\n // aux-build:dep.rs\n+// ignore-cross-compile\n \n-// FIXME: Auxiliary builds are currently broken.\n-// extern crate dep;\n+extern crate dep;\n \n fn main() {\n-    // FIXME: Auxiliary builds are currently broken.\n-    // dep::foo();\n+    dep::foo();\n }"}]}