{"sha": "5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODk4NzdkZGE1YjgyNjdmMWVjMzVkZmM5YmI2ZGRjNDQ3MmYwMDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-10-23T00:04:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-11-10T00:07:32Z"}, "message": "constify parts of libcore.", "tree": {"sha": "0f5237eeb066e1d8d27ed5fbeb7fca0ccb966957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5237eeb066e1d8d27ed5fbeb7fca0ccb966957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "html_url": "https://github.com/rust-lang/rust/commit/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c046b342f01bf2e750e6ac824b94be4b72c8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c046b342f01bf2e750e6ac824b94be4b72c8ec", "html_url": "https://github.com/rust-lang/rust/commit/b4c046b342f01bf2e750e6ac824b94be4b72c8ec"}], "stats": {"total": 196, "additions": 84, "deletions": 112}, "files": [{"sha": "8b9f7f2c816515af463ff67c70edfabfe1ef3848", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -25,7 +25,7 @@ use num::NonZeroUsize;\n #[derive(Debug)]\n pub struct Excess(pub NonNull<u8>, pub usize);\n \n-fn size_align<T>() -> (usize, usize) {\n+const fn size_align<T>() -> (usize, usize) {\n     (mem::size_of::<T>(), mem::align_of::<T>())\n }\n \n@@ -116,7 +116,7 @@ impl Layout {\n     /// The minimum size in bytes for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n-    pub fn size(&self) -> usize { self.size_ }\n+    pub const fn size(&self) -> usize { self.size_ }\n \n     /// The minimum byte alignment for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]"}, {"sha": "0bea541e16349d2a586e9df8b8b4b1214f65735d", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -77,7 +77,7 @@ impl TryFromSliceError {\n            issue = \"0\")]\n     #[inline]\n     #[doc(hidden)]\n-    pub fn __description(&self) -> &str {\n+    pub const fn __description(&self) -> &str {\n         \"could not convert slice to array\"\n     }\n }"}, {"sha": "c8b8c2eff97b1f549e9ffec460a3fe2b406208c4", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -39,7 +39,7 @@ fn bench_multiple_take(b: &mut Bencher) {\n     });\n }\n \n-fn scatter(x: i32) -> i32 { (x * 31) % 127 }\n+const fn scatter(x: i32) -> i32 { (x * 31) % 127 }\n \n #[bench]\n fn bench_max_by_key(b: &mut Bencher) {"}, {"sha": "3fe77fe688fa88b5c2ba6f6bb831b4c84afe48fd", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -474,7 +474,7 @@ impl<T: ?Sized> Cell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n-    pub fn as_ptr(&self) -> *mut T {\n+    pub const fn as_ptr(&self) -> *mut T {\n         self.value.get()\n     }\n \n@@ -636,12 +636,12 @@ type BorrowFlag = isize;\n const UNUSED: BorrowFlag = 0;\n \n #[inline(always)]\n-fn is_writing(x: BorrowFlag) -> bool {\n+const fn is_writing(x: BorrowFlag) -> bool {\n     x < UNUSED\n }\n \n #[inline(always)]\n-fn is_reading(x: BorrowFlag) -> bool {\n+const fn is_reading(x: BorrowFlag) -> bool {\n     x > UNUSED\n }\n \n@@ -1508,7 +1508,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get(&self) -> *mut T {\n+    pub const fn get(&self) -> *mut T {\n         &self.value as *const T as *mut T\n     }\n }"}, {"sha": "bcd1e92c6d86ef28d7a12a3de4ad3407b2dd7fb0", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -130,7 +130,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n impl DecodeUtf16Error {\n     /// Returns the unpaired surrogate which caused this error.\n     #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n-    pub fn unpaired_surrogate(&self) -> u16 {\n+    pub const fn unpaired_surrogate(&self) -> u16 {\n         self.code\n     }\n }"}, {"sha": "35181afea3da6ce72b6a5d83722737984f953fb3", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -903,7 +903,7 @@ impl char {\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n-    pub fn is_ascii(&self) -> bool {\n+    pub const fn is_ascii(&self) -> bool {\n         *self as u32 <= 0x7F\n     }\n "}, {"sha": "dbc28ef7cf6a9ce8f3826bf21a3e9065ad809acd", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -104,7 +104,6 @@\n /// assert_eq!(vec![1, 3], filtered);\n /// ```\n #[unstable(feature = \"convert_id\", issue = \"53500\")]\n-#[rustc_const_unstable(feature = \"const_convert_id\")]\n #[inline]\n pub const fn identity<T>(x: T) -> T { x }\n "}, {"sha": "56576f8334b85c9aac007cd72ac86a6c0fab5737", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -341,7 +341,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)] #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n-    pub fn new_v1(pieces: &'a [&'a str],\n+    pub const fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n             pieces,\n@@ -359,7 +359,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)] #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n-    pub fn new_v1_formatted(pieces: &'a [&'a str],\n+    pub const fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {\n         Arguments {\n@@ -1492,7 +1492,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:t>6}\", Foo), \"tttttt\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub fn fill(&self) -> char { self.fill }\n+    pub const fn fill(&self) -> char { self.fill }\n \n     /// Flag indicating what form of alignment was requested.\n     ///\n@@ -1562,7 +1562,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub fn width(&self) -> Option<usize> { self.width }\n+    pub const fn width(&self) -> Option<usize> { self.width }\n \n     /// Optionally specified precision for numeric types.\n     ///\n@@ -1589,7 +1589,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub fn precision(&self) -> Option<usize> { self.precision }\n+    pub const fn precision(&self) -> Option<usize> { self.precision }\n \n     /// Determines if the `+` flag was specified.\n     ///\n@@ -1617,7 +1617,9 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub fn sign_plus(&self) -> bool { self.flags & (1 << FlagV1::SignPlus as u32) != 0 }\n+    pub const fn sign_plus(&self) -> bool {\n+        self.flags & (1 << FlagV1::SignPlus as u32) != 0\n+    }\n \n     /// Determines if the `-` flag was specified.\n     ///\n@@ -1643,7 +1645,9 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub fn sign_minus(&self) -> bool { self.flags & (1 << FlagV1::SignMinus as u32) != 0 }\n+    pub const fn sign_minus(&self) -> bool {\n+        self.flags & (1 << FlagV1::SignMinus as u32) != 0\n+    }\n \n     /// Determines if the `#` flag was specified.\n     ///\n@@ -1668,7 +1672,9 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub fn alternate(&self) -> bool { self.flags & (1 << FlagV1::Alternate as u32) != 0 }\n+    pub const fn alternate(&self) -> bool {\n+        self.flags & (1 << FlagV1::Alternate as u32) != 0\n+    }\n \n     /// Determines if the `0` flag was specified.\n     ///\n@@ -1691,15 +1697,19 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub fn sign_aware_zero_pad(&self) -> bool {\n+    pub const fn sign_aware_zero_pad(&self) -> bool {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0\n     }\n \n     // FIXME: Decide what public API we want for these two flags.\n     // https://github.com/rust-lang/rust/issues/48584\n-    fn debug_lower_hex(&self) -> bool { self.flags & (1 << FlagV1::DebugLowerHex as u32) != 0 }\n+    const fn debug_lower_hex(&self) -> bool {\n+        self.flags & (1 << FlagV1::DebugLowerHex as u32) != 0\n+    }\n \n-    fn debug_upper_hex(&self) -> bool { self.flags & (1 << FlagV1::DebugUpperHex as u32) != 0 }\n+    const fn debug_upper_hex(&self) -> bool {\n+        self.flags & (1 << FlagV1::DebugUpperHex as u32) != 0\n+    }\n \n     /// Creates a [`DebugStruct`] builder designed to assist with creation of\n     /// [`fmt::Debug`] implementations for structs."}, {"sha": "72a032b57d09fab45cd86a13a90e86dfcffa9d89", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -2658,7 +2658,7 @@ impl<I, U> FusedIterator for Flatten<I>\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}\n \n /// Adapts an iterator by flattening it, for use in `flatten()` and `flat_map()`.\n-fn flatten_compat<I, U>(iter: I) -> FlattenCompat<I, U> {\n+const fn flatten_compat<I, U>(iter: I) -> FlattenCompat<I, U> {\n     FlattenCompat { iter, frontiter: None, backiter: None }\n }\n "}, {"sha": "7fa3a4bcce7bb2357ae1c1e05952c83e89844b24", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -283,7 +283,7 @@ impl<T> Default for Empty<T> {\n /// assert_eq!(None, nope.next());\n /// ```\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n-pub fn empty<T>() -> Empty<T> {\n+pub const fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n }\n "}, {"sha": "2445d93692748beea584d1730821740fda11bf48", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -82,7 +82,6 @@\n #![feature(const_fn)]\n #![feature(const_int_ops)]\n #![feature(const_fn_union)]\n-#![feature(const_manually_drop_new)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]"}, {"sha": "0aa374c7a64464a3b66a02ceb4affd135680ddf4", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -139,7 +139,7 @@ pub use intrinsics::transmute;\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn forget<T>(t: T) {\n+pub const fn forget<T>(t: T) {\n     ManuallyDrop::new(t);\n }\n \n@@ -942,7 +942,6 @@ impl<T> ManuallyDrop<T> {\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_manually_drop_new\")]\n     #[inline]\n     pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value }\n@@ -961,7 +960,7 @@ impl<T> ManuallyDrop<T> {\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n-    pub fn into_inner(slot: ManuallyDrop<T>) -> T {\n+    pub const fn into_inner(slot: ManuallyDrop<T>) -> T {\n         slot.value\n     }\n "}, {"sha": "0e1f6664d965622506e331f14bde8d6d4ee8c76d", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -187,11 +187,11 @@ impl fmt::Display for ParseFloatError {\n     }\n }\n \n-fn pfe_empty() -> ParseFloatError {\n+const fn pfe_empty() -> ParseFloatError {\n     ParseFloatError { kind: FloatErrorKind::Empty }\n }\n \n-fn pfe_invalid() -> ParseFloatError {\n+const fn pfe_invalid() -> ParseFloatError {\n     ParseFloatError { kind: FloatErrorKind::Invalid }\n }\n "}, {"sha": "8d8f357425ef02fc22c112cb7488b6fccc99cca4", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -39,7 +39,7 @@ pub struct Decimal<'a> {\n }\n \n impl<'a> Decimal<'a> {\n-    pub fn new(integral: &'a [u8], fractional: &'a [u8], exp: i64) -> Decimal<'a> {\n+    pub const fn new(integral: &'a [u8], fractional: &'a [u8], exp: i64) -> Decimal<'a> {\n         Decimal { integral, fractional, exp }\n     }\n }"}, {"sha": "c5d4aa689583c97bca5bcdd1ce49cfbc8d909402", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -44,7 +44,7 @@ pub struct Unpacked {\n }\n \n impl Unpacked {\n-    pub fn new(sig: u64, k: i16) -> Self {\n+    pub const fn new(sig: u64, k: i16) -> Self {\n         Unpacked { sig, k }\n     }\n }"}, {"sha": "2a87bf436646d344cd200a83e0e16c6e9643bd82", "filename": "src/libcore/num/flt2dec/estimator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Festimator.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -15,11 +15,10 @@\n /// This is used to approximate `k = ceil(log_10 (mant * 2^exp))`;\n /// the true `k` is either `k_0` or `k_0+1`.\n #[doc(hidden)]\n-pub fn estimate_scaling_factor(mant: u64, exp: i16) -> i16 {\n+pub const fn estimate_scaling_factor(mant: u64, exp: i16) -> i16 {\n     // 2^(nbits-1) < mant <= 2^nbits if mant > 0\n     let nbits = 64 - (mant - 1).leading_zeros() as i64;\n     // 1292913986 = floor(2^32 * log_10 2)\n     // therefore this always underestimates (or is exact), but not much.\n     (((nbits + exp as i64) * 1292913986) >> 32) as i16\n }\n-"}, {"sha": "d58015beecb1e7172f38cf54706dfe5d3411cf13", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -658,4 +658,3 @@ pub fn to_exact_fixed_str<'a, T, F>(mut format_exact: F, v: T,\n         }\n     }\n }\n-"}, {"sha": "00134a58d30f1c2e00a5917b4db3a25a0516fbaa", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -387,7 +387,7 @@ assert_eq!(n.count_ones(), 3);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn count_ones(self) -> u32 {\n+                pub const fn count_ones(self) -> u32 {\n                     self.0.count_ones()\n                 }\n             }\n@@ -407,7 +407,7 @@ assert_eq!(Wrapping(!0\", stringify!($t), \").count_zeros(), 0);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn count_zeros(self) -> u32 {\n+                pub const fn count_zeros(self) -> u32 {\n                     self.0.count_zeros()\n                 }\n             }\n@@ -430,7 +430,7 @@ assert_eq!(n.trailing_zeros(), 3);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn trailing_zeros(self) -> u32 {\n+                pub const fn trailing_zeros(self) -> u32 {\n                     self.0.trailing_zeros()\n                 }\n             }\n@@ -456,7 +456,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn rotate_left(self, n: u32) -> Self {\n+            pub const fn rotate_left(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_left(n))\n             }\n \n@@ -481,7 +481,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn rotate_right(self, n: u32) -> Self {\n+            pub const fn rotate_right(self, n: u32) -> Self {\n                 Wrapping(self.0.rotate_right(n))\n             }\n \n@@ -505,7 +505,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[inline]\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn swap_bytes(self) -> Self {\n+            pub const fn swap_bytes(self) -> Self {\n                 Wrapping(self.0.swap_bytes())\n             }\n \n@@ -532,7 +532,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n             #[inline]\n-            pub fn reverse_bits(self) -> Self {\n+            pub const fn reverse_bits(self) -> Self {\n                 Wrapping(self.0.reverse_bits())\n             }\n \n@@ -560,7 +560,7 @@ if cfg!(target_endian = \\\"big\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn from_be(x: Self) -> Self {\n+                pub const fn from_be(x: Self) -> Self {\n                     Wrapping(<$t>::from_be(x.0))\n                 }\n             }\n@@ -589,7 +589,7 @@ if cfg!(target_endian = \\\"little\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn from_le(x: Self) -> Self {\n+                pub const fn from_le(x: Self) -> Self {\n                     Wrapping(<$t>::from_le(x.0))\n                 }\n             }\n@@ -618,7 +618,7 @@ if cfg!(target_endian = \\\"big\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn to_be(self) -> Self {\n+                pub const fn to_be(self) -> Self {\n                     Wrapping(self.0.to_be())\n                 }\n             }\n@@ -647,7 +647,7 @@ if cfg!(target_endian = \\\"little\\\") {\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn to_le(self) -> Self {\n+                pub const fn to_le(self) -> Self {\n                     Wrapping(self.0.to_le())\n                 }\n             }\n@@ -707,7 +707,7 @@ assert_eq!(n.leading_zeros(), 3);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn leading_zeros(self) -> u32 {\n+                pub const fn leading_zeros(self) -> u32 {\n                     self.0.leading_zeros()\n                 }\n             }\n@@ -784,7 +784,7 @@ assert!(!Wrapping(-10\", stringify!($t), \").is_positive());\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn is_positive(self) -> bool {\n+                pub const fn is_positive(self) -> bool {\n                     self.0.is_positive()\n                 }\n             }\n@@ -806,7 +806,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn is_negative(self) -> bool {\n+                pub const fn is_negative(self) -> bool {\n                     self.0.is_negative()\n                 }\n             }\n@@ -836,7 +836,7 @@ assert_eq!(n.leading_zeros(), 2);\n ```\"),\n                 #[inline]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-                pub fn leading_zeros(self) -> u32 {\n+                pub const fn leading_zeros(self) -> u32 {\n                     self.0.leading_zeros()\n                 }\n             }"}, {"sha": "908490e1c839e5eb53d9eee6acf6ea2a414686f5", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -416,7 +416,7 @@ impl<Idx> RangeInclusive<Idx> {\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn start(&self) -> &Idx {\n+    pub const fn start(&self) -> &Idx {\n         &self.start\n     }\n \n@@ -440,7 +440,7 @@ impl<Idx> RangeInclusive<Idx> {\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn end(&self) -> &Idx {\n+    pub const fn end(&self) -> &Idx {\n         &self.end\n     }\n "}, {"sha": "af9d1596938e095c0b335e77a18151cdf86941d9", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -55,7 +55,7 @@ impl<'a> PanicInfo<'a> {\n                 issue = \"0\")]\n     #[doc(hidden)]\n     #[inline]\n-    pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n+    pub const fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n                                 location: Location<'a>)\n                                 -> Self {\n         struct NoPayload;\n@@ -96,7 +96,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// [`fmt::write`]: ../fmt/fn.write.html\n     #[unstable(feature = \"panic_info_message\", issue = \"44489\")]\n-    pub fn message(&self) -> Option<&fmt::Arguments> {\n+    pub const fn message(&self) -> Option<&fmt::Arguments> {\n         self.message\n     }\n \n@@ -125,7 +125,7 @@ impl<'a> PanicInfo<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn location(&self) -> Option<&Location> {\n+    pub const fn location(&self) -> Option<&Location> {\n         // NOTE: If this is changed to sometimes return None,\n         // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n         Some(&self.location)\n@@ -186,7 +186,7 @@ impl<'a> Location<'a> {\n                           and related macros\",\n                 issue = \"0\")]\n     #[doc(hidden)]\n-    pub fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n+    pub const fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n         Location { file, line, col }\n     }\n \n@@ -208,7 +208,7 @@ impl<'a> Location<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn file(&self) -> &str {\n+    pub const fn file(&self) -> &str {\n         self.file\n     }\n \n@@ -230,7 +230,7 @@ impl<'a> Location<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn line(&self) -> u32 {\n+    pub const fn line(&self) -> u32 {\n         self.line\n     }\n \n@@ -252,7 +252,7 @@ impl<'a> Location<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_col\", since = \"1.25.0\")]\n-    pub fn column(&self) -> u32 {\n+    pub const fn column(&self) -> u32 {\n         self.col\n     }\n }"}, {"sha": "63a433a8b230179e802ede5f8672c9ab537188e2", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -207,7 +207,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// with the same lifetime as the original `Pin`.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub fn get_ref(this: Pin<&'a T>) -> &'a T {\n+    pub const fn get_ref(this: Pin<&'a T>) -> &'a T {\n         this.pointer\n     }\n }\n@@ -216,7 +216,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Convert this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub fn into_ref(this: Pin<&'a mut T>) -> Pin<&'a T> {\n+    pub const fn into_ref(this: Pin<&'a mut T>) -> Pin<&'a T> {\n         Pin { pointer: this.pointer }\n     }\n "}, {"sha": "c06e580e30eb53b4d13f9bb25d8e71eea08fdfce", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -2759,7 +2759,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n-    pub fn as_ptr(self) -> *mut T {\n+    pub const fn as_ptr(self) -> *mut T {\n         self.pointer.0 as *mut T\n     }\n \n@@ -2905,7 +2905,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n-    pub fn as_ptr(self) -> *mut T {\n+    pub const fn as_ptr(self) -> *mut T {\n         self.pointer.0 as *mut T\n     }\n "}, {"sha": "deaeb53e84a3a6248e2f8b54fb8cc2f0f49abafd", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -29,19 +29,19 @@ const HI_USIZE: usize = HI_U64 as usize;\n /// bytes where the borrow propagated all the way to the most significant\n /// bit.\"\n #[inline]\n-fn contains_zero_byte(x: usize) -> bool {\n+const fn contains_zero_byte(x: usize) -> bool {\n     x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[inline]\n-fn repeat_byte(b: u8) -> usize {\n+const fn repeat_byte(b: u8) -> usize {\n     (b as usize) << 8 | b as usize\n }\n \n #[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n-fn repeat_byte(b: u8) -> usize {\n+const fn repeat_byte(b: u8) -> usize {\n     (b as usize) * (::usize::MAX / 255)\n }\n "}, {"sha": "f8dee5370621d55b601e6c5ded43085592a04ba4", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -385,7 +385,6 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_slice_as_ptr\")]\n     pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T\n     }\n@@ -2738,7 +2737,7 @@ impl<'a, T> IntoIterator for &'a mut [T] {\n \n // Macro helper functions\n #[inline(always)]\n-fn size_from_ptr<T>(_: *const T) -> usize {\n+const fn size_from_ptr<T>(_: *const T) -> usize {\n     mem::size_of::<T>()\n }\n \n@@ -4022,7 +4021,7 @@ impl<'a, T> ChunksExact<'a, T> {\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n-    pub fn remainder(&self) -> &'a [T] {\n+    pub const fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }\n@@ -4518,7 +4517,7 @@ impl<'a, T> RChunksExact<'a, T> {\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-    pub fn remainder(&self) -> &'a [T] {\n+    pub const fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }"}, {"sha": "950552fc6b172accb3e07c79e2dbd01b3ac00eeb", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -29,7 +29,7 @@ impl Utf8Lossy {\n         unsafe { mem::transmute(bytes) }\n     }\n \n-    pub fn chunks(&self) -> Utf8LossyChunksIter {\n+    pub const fn chunks(&self) -> Utf8LossyChunksIter {\n         Utf8LossyChunksIter { source: &self.bytes }\n     }\n }"}, {"sha": "d73e5db727c91ad9af1e32381aec51bb09629f5d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -231,7 +231,7 @@ impl Utf8Error {\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n-    pub fn valid_up_to(&self) -> usize { self.valid_up_to }\n+    pub const fn valid_up_to(&self) -> usize { self.valid_up_to }\n \n     /// Provide more information about the failure:\n     ///\n@@ -476,16 +476,16 @@ pub struct Chars<'a> {\n /// The first byte is special, only want bottom 5 bits for width 2, 4 bits\n /// for width 3, and 3 bits for width 4.\n #[inline]\n-fn utf8_first_byte(byte: u8, width: u32) -> u32 { (byte & (0x7F >> width)) as u32 }\n+const fn utf8_first_byte(byte: u8, width: u32) -> u32 { (byte & (0x7F >> width)) as u32 }\n \n /// Returns the value of `ch` updated with continuation byte `byte`.\n #[inline]\n-fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 { (ch << 6) | (byte & CONT_MASK) as u32 }\n+const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 { (ch << 6) | (byte & CONT_MASK) as u32 }\n \n /// Checks whether the byte is a UTF-8 continuation byte (i.e. starts with the\n /// bits `10`).\n #[inline]\n-fn utf8_is_cont_byte(byte: u8) -> bool { (byte & !CONT_MASK) == TAG_CONT_U8 }\n+const fn utf8_is_cont_byte(byte: u8) -> bool { (byte & !CONT_MASK) == TAG_CONT_U8 }\n \n #[inline]\n fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n@@ -1420,7 +1420,7 @@ const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n \n /// Returns `true` if any byte in the word `x` is nonascii (>= 128).\n #[inline]\n-fn contains_nonascii(x: usize) -> bool {\n+const fn contains_nonascii(x: usize) -> bool {\n     (x & NONASCII_MASK) != 0\n }\n \n@@ -2277,7 +2277,6 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_str_as_ptr\")]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n     }"}, {"sha": "1db3a290e046f2854805e8e96e07c6b756308f58", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -141,7 +141,7 @@ impl LocalWaker {\n     /// `Waker` is nearly identical to `LocalWaker`, but is threadsafe\n     /// (implements `Send` and `Sync`).\n     #[inline]\n-    pub fn as_waker(&self) -> &Waker {\n+    pub const fn as_waker(&self) -> &Waker {\n         &self.0\n     }\n "}, {"sha": "995795839b7d8f1d3123cafb4e12c7de22106a69", "filename": "src/libcore/unicode/bool_trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Funicode%2Fbool_trie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Funicode%2Fbool_trie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fbool_trie.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -71,6 +71,6 @@ impl SmallBoolTrie {\n     }\n }\n \n-fn trie_range_leaf(c: u32, bitmap_chunk: u64) -> bool {\n+const fn trie_range_leaf(c: u32, bitmap_chunk: u64) -> bool {\n     ((bitmap_chunk >> (c & 63)) & 1) != 0\n }"}, {"sha": "e525c0574002b2d83e96d9007dcf289ee16b31ca", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -2598,4 +2598,3 @@ pub mod conversions {\n     ];\n \n }\n-"}, {"sha": "c8bed4a2b77e147c29913c9477b1edb6a9339e58", "filename": "src/test/ui/consts/const-eval/duration_conversion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fduration_conversion.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -10,8 +10,6 @@\n \n // compile-pass\n \n-#![feature(duration_getters)]\n-\n use std::time::Duration;\n \n fn main() {"}, {"sha": "545c179dec9fc6d92f9a97f3d454ae026faffb62", "filename": "src/test/ui/rfc-2306/convert-id-const-no-gate.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4c046b342f01bf2e750e6ac824b94be4b72c8ec/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c046b342f01bf2e750e6ac824b94be4b72c8ec/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.rs?ref=b4c046b342f01bf2e750e6ac824b94be4b72c8ec", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This test should fail since identity is not stable as a const fn yet.\n-\n-#![feature(convert_id)]\n-\n-fn main() {\n-    const _FOO: u8 = ::std::convert::identity(42u8);\n-}"}, {"sha": "dfd8619d87516b805105841afb9ce571a0c5d74e", "filename": "src/test/ui/rfc-2306/convert-id-const-no-gate.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4c046b342f01bf2e750e6ac824b94be4b72c8ec/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4c046b342f01bf2e750e6ac824b94be4b72c8ec/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-no-gate.stderr?ref=b4c046b342f01bf2e750e6ac824b94be4b72c8ec", "patch": "@@ -1,10 +0,0 @@\n-error: `std::convert::identity` is not yet stable as a const fn\n-  --> $DIR/convert-id-const-no-gate.rs:16:22\n-   |\n-LL |     const _FOO: u8 = ::std::convert::identity(42u8);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: in Nightly builds, add `#![feature(const_convert_id)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-"}, {"sha": "2e71aee57c2f18abcf1b5f014b0537cf2310c2cd", "filename": "src/test/ui/rfc-2306/convert-id-const-with-gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b89877dda5b8267f1ec35dfc9bb6ddc4472f006/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2306%2Fconvert-id-const-with-gate.rs?ref=5b89877dda5b8267f1ec35dfc9bb6ddc4472f006", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This test should pass since we've opted into 'identity' as an\n-// unstable const fn.\n+// This test should pass since 'identity' is const fn.\n \n // compile-pass\n \n-#![feature(convert_id, const_convert_id)]\n+#![feature(convert_id)]\n \n fn main() {\n     const _FOO: u8 = ::std::convert::identity(42u8);"}]}