{"sha": "fec6716eec69cf0db650d5b86e51a32a530ae57b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYzY3MTZlZWM2OWNmMGRiNjUwZDViODZlNTFhMzJhNTMwYWU1N2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-09-05T22:55:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-09-05T22:56:22Z"}, "message": "std: Remove push_fast from OwnedVector. Closes #8769\n\nThis is an unsafe implementation detail of `push`.", "tree": {"sha": "b6ed836a1b77fff18d224b3b3ad75e043786d9aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ed836a1b77fff18d224b3b3ad75e043786d9aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec6716eec69cf0db650d5b86e51a32a530ae57b", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec6716eec69cf0db650d5b86e51a32a530ae57b", "html_url": "https://github.com/rust-lang/rust/commit/fec6716eec69cf0db650d5b86e51a32a530ae57b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec6716eec69cf0db650d5b86e51a32a530ae57b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "html_url": "https://github.com/rust-lang/rust/commit/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "4cc5c4f14ffdfba3f8e0747784802797edf5f50e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fec6716eec69cf0db650d5b86e51a32a530ae57b/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec6716eec69cf0db650d5b86e51a32a530ae57b/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=fec6716eec69cf0db650d5b86e51a32a530ae57b", "patch": "@@ -1201,8 +1201,6 @@ pub trait OwnedVector<T> {\n     fn shrink_to_fit(&mut self);\n \n     fn push(&mut self, t: T);\n-    unsafe fn push_fast(&mut self, t: T);\n-\n     fn push_all_move(&mut self, rhs: ~[T]);\n     fn pop(&mut self) -> T;\n     fn pop_opt(&mut self) -> Option<T>;\n@@ -1334,7 +1332,7 @@ impl<T> OwnedVector<T> for ~[T] {\n                     self.reserve_at_least(new_len);\n                 }\n \n-                self.push_fast(t);\n+                push_fast(self, t);\n             } else {\n                 let repr: **Vec<()> = cast::transmute(&mut *self);\n                 let fill = (**repr).fill;\n@@ -1343,29 +1341,30 @@ impl<T> OwnedVector<T> for ~[T] {\n                     self.reserve_at_least(new_len);\n                 }\n \n-                self.push_fast(t);\n+                push_fast(self, t);\n             }\n         }\n-    }\n \n-    // This doesn't bother to make sure we have space.\n-    #[inline] // really pretty please\n-    unsafe fn push_fast(&mut self, t: T) {\n-        if contains_managed::<T>() {\n-            let repr: **mut Box<Vec<u8>> = cast::transmute(self);\n-            let fill = (**repr).data.fill;\n-            (**repr).data.fill += sys::nonzero_size_of::<T>();\n-            let p = to_unsafe_ptr(&((**repr).data.data));\n-            let p = ptr::offset(p, fill as int) as *mut T;\n-            intrinsics::move_val_init(&mut(*p), t);\n-        } else {\n-            let repr: **mut Vec<u8> = cast::transmute(self);\n-            let fill = (**repr).fill;\n-            (**repr).fill += sys::nonzero_size_of::<T>();\n-            let p = to_unsafe_ptr(&((**repr).data));\n-            let p = ptr::offset(p, fill as int) as *mut T;\n-            intrinsics::move_val_init(&mut(*p), t);\n+        // This doesn't bother to make sure we have space.\n+        #[inline] // really pretty please\n+        unsafe fn push_fast<T>(this: &mut ~[T], t: T) {\n+            if contains_managed::<T>() {\n+                let repr: **mut Box<Vec<u8>> = cast::transmute(this);\n+                let fill = (**repr).data.fill;\n+                (**repr).data.fill += sys::nonzero_size_of::<T>();\n+                let p = to_unsafe_ptr(&((**repr).data.data));\n+                let p = ptr::offset(p, fill as int) as *mut T;\n+                intrinsics::move_val_init(&mut(*p), t);\n+            } else {\n+                let repr: **mut Vec<u8> = cast::transmute(this);\n+                let fill = (**repr).fill;\n+                (**repr).fill += sys::nonzero_size_of::<T>();\n+                let p = to_unsafe_ptr(&((**repr).data));\n+                let p = ptr::offset(p, fill as int) as *mut T;\n+                intrinsics::move_val_init(&mut(*p), t);\n+            }\n         }\n+\n     }\n \n     /// Takes ownership of the vector `rhs`, moving all elements into"}]}