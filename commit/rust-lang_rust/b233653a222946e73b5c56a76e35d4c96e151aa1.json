{"sha": "b233653a222946e73b5c56a76e35d4c96e151aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMzM2NTNhMjIyOTQ2ZTczYjVjNTZhNzZlMzVkNGM5NmUxNTFhYTE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-20T14:58:00Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-20T14:58:00Z"}, "message": "Cover missing comments between attributes and expressions", "tree": {"sha": "a7cdf1d060a7c1ab9fb8c9111e0a8f7bf5a7c9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cdf1d060a7c1ab9fb8c9111e0a8f7bf5a7c9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b233653a222946e73b5c56a76e35d4c96e151aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b233653a222946e73b5c56a76e35d4c96e151aa1", "html_url": "https://github.com/rust-lang/rust/commit/b233653a222946e73b5c56a76e35d4c96e151aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b233653a222946e73b5c56a76e35d4c96e151aa1/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a", "html_url": "https://github.com/rust-lang/rust/commit/e6b8ca54bb8fafc83e486aa59b3cce467d9c267a"}], "stats": {"total": 118, "additions": 90, "deletions": 28}, "files": [{"sha": "8225f0165dd6f7d7f802c302425c791caa2ba0a3", "filename": "src/expr.rs", "status": "modified", "additions": 53, "deletions": 27, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b233653a222946e73b5c56a76e35d4c96e151aa1/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233653a222946e73b5c56a76e35d4c96e151aa1/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b233653a222946e73b5c56a76e35d4c96e151aa1", "patch": "@@ -51,21 +51,58 @@ pub enum ExprType {\n fn combine_attr_and_expr(\n     context: &RewriteContext,\n     shape: Shape,\n-    attr_str: &str,\n+    expr: &ast::Expr,\n     expr_str: &str,\n-) -> String {\n+) -> Option<String> {\n+    let attr_str = try_opt!((&*expr.attrs).rewrite(context, shape));\n     let separator = if attr_str.is_empty() {\n         String::new()\n     } else {\n-        if expr_str.contains('\\n') || attr_str.contains('\\n') ||\n-            attr_str.len() + expr_str.len() > shape.width\n+        // Try to recover comments between the attributes and the expression if available.\n+        let missing_snippet = context.snippet(mk_sp(\n+            expr.attrs[expr.attrs.len() - 1].span.hi,\n+            expr.span.lo,\n+        ));\n+        let comment_opening_pos = missing_snippet.chars().position(|c| c == '/');\n+        let prefer_same_line = if let Some(pos) = comment_opening_pos {\n+            !missing_snippet[..pos].contains('\\n')\n+        } else {\n+            !missing_snippet.contains('\\n')\n+        };\n+\n+        let trimmed = missing_snippet.trim();\n+        let missing_comment = if trimmed.is_empty() {\n+            String::new()\n+        } else {\n+            try_opt!(rewrite_comment(&trimmed, false, shape, context.config))\n+        };\n+\n+        // 2 = ` ` + ` `\n+        let one_line_width =\n+            attr_str.len() + missing_comment.len() + 2 + first_line_width(expr_str);\n+        let attr_expr_separator = if prefer_same_line && !missing_comment.starts_with(\"//\") &&\n+            one_line_width <= shape.width\n         {\n+            String::from(\" \")\n+        } else {\n             format!(\"\\n{}\", shape.indent.to_string(context.config))\n+        };\n+\n+        if missing_comment.is_empty() {\n+            attr_expr_separator\n         } else {\n-            String::from(\" \")\n+            // 1 = ` `\n+            let one_line_width =\n+                last_line_width(&attr_str) + 1 + first_line_width(&missing_comment);\n+            let attr_comment_separator = if prefer_same_line && one_line_width <= shape.width {\n+                String::from(\" \")\n+            } else {\n+                format!(\"\\n{}\", shape.indent.to_string(context.config))\n+            };\n+            attr_comment_separator + &missing_comment + &attr_expr_separator\n         }\n     };\n-    format!(\"{}{}{}\", attr_str, separator, expr_str)\n+    Some(format!(\"{}{}{}\", attr_str, separator, expr_str))\n }\n \n pub fn format_expr(\n@@ -74,18 +111,8 @@ pub fn format_expr(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let attr_rw = (&*expr.attrs).rewrite(context, shape);\n     if contains_skip(&*expr.attrs) {\n-        if let Some(attr_str) = attr_rw {\n-            return Some(combine_attr_and_expr(\n-                context,\n-                shape,\n-                &attr_str,\n-                &context.snippet(expr.span),\n-            ));\n-        } else {\n-            return Some(context.snippet(expr.span));\n-        }\n+        return Some(context.snippet(expr.span()));\n     }\n     let expr_rw = match expr.node {\n         ast::ExprKind::Array(ref expr_vec) => rewrite_array(\n@@ -321,15 +348,14 @@ pub fn format_expr(\n             ))\n         }\n     };\n-    match (attr_rw, expr_rw) {\n-        (Some(attr_str), Some(expr_str)) => recover_comment_removed(\n-            combine_attr_and_expr(context, shape, &attr_str, &expr_str),\n-            expr.span,\n-            context,\n-            shape,\n-        ),\n-        _ => None,\n-    }\n+\n+    expr_rw\n+        .and_then(|expr_str| {\n+            recover_comment_removed(expr_str, expr.span, context, shape)\n+        })\n+        .and_then(|expr_str| {\n+            combine_attr_and_expr(context, shape, expr, &expr_str)\n+        })\n }\n \n pub fn rewrite_pair<LHS, RHS>(\n@@ -921,7 +947,7 @@ impl Rewrite for ast::Stmt {\n             ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) => None,\n         };\n         result.and_then(|res| {\n-            recover_comment_removed(res, self.span, context, shape)\n+            recover_comment_removed(res, self.span(), context, shape)\n         })\n     }\n }"}, {"sha": "bd611202fb7446f4e0efd66a5e1ef6b6c849afdb", "filename": "src/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b233653a222946e73b5c56a76e35d4c96e151aa1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233653a222946e73b5c56a76e35d4c96e151aa1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b233653a222946e73b5c56a76e35d4c96e151aa1", "patch": "@@ -83,7 +83,23 @@ pub trait Spanned {\n \n impl Spanned for ast::Expr {\n     fn span(&self) -> Span {\n-        self.span\n+        if self.attrs.is_empty() {\n+            self.span\n+        } else {\n+            mk_sp(self.attrs[0].span.lo, self.span.hi)\n+        }\n+    }\n+}\n+\n+impl Spanned for ast::Stmt {\n+    fn span(&self) -> Span {\n+        match self.node {\n+            // Cover attributes\n+            ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n+                mk_sp(expr.span().lo, self.span.hi)\n+            }\n+            _ => self.span,\n+        }\n     }\n }\n "}, {"sha": "361d9fb784cca2b137cdcd7f86e3aa045692f3fd", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b233653a222946e73b5c56a76e35d4c96e151aa1/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233653a222946e73b5c56a76e35d4c96e151aa1/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=b233653a222946e73b5c56a76e35d4c96e151aa1", "patch": "@@ -81,3 +81,13 @@ fn foo() {\n     // ((((((((\n )]\n fn foo() {}\n+\n+// #1799\n+fn issue_1799() {\n+    #[allow(unreachable_code)] // https://github.com/rust-lang/rust/issues/43336\n+    Some( Err(error) ) ;\n+\n+    #[allow(unreachable_code)]\n+    // https://github.com/rust-lang/rust/issues/43336\n+    Some( Err(error) ) ;\n+}"}, {"sha": "7ff79b164117bc0609ca8ea41756ff6c8dbe2839", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b233653a222946e73b5c56a76e35d4c96e151aa1/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233653a222946e73b5c56a76e35d4c96e151aa1/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=b233653a222946e73b5c56a76e35d4c96e151aa1", "patch": "@@ -81,3 +81,13 @@ fn foo() {\n     // ((((((((\n )]\n fn foo() {}\n+\n+// #1799\n+fn issue_1799() {\n+    #[allow(unreachable_code)] // https://github.com/rust-lang/rust/issues/43336\n+    Some(Err(error));\n+\n+    #[allow(unreachable_code)]\n+    // https://github.com/rust-lang/rust/issues/43336\n+    Some(Err(error));\n+}"}]}