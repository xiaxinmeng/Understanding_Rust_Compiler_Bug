{"sha": "985afe07f79223d5d704ae259bb66c9d5e29d840", "node_id": "C_kwDOAAsO6NoAKDk4NWFmZTA3Zjc5MjIzZDVkNzA0YWUyNTliYjY2YzlkNWUyOWQ4NDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T06:41:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T06:41:37Z"}, "message": "Auto merge of #100640 - reitermarkus:socket-display-buffer, r=thomcc\n\nUse `DisplayBuffer` for socket addresses.\n\nContinuation of https://github.com/rust-lang/rust/pull/100625 for socket addresses.\n\nRenames `net::addr` to `net::addr::socket`, `net::ip` to `net::addr::ip` and `net::ip::display_buffer::IpDisplayBuffer` to `net::addr::display_buffer::DisplayBuffer`.", "tree": {"sha": "32fe42f7f2f9a19b57efb42567e842265869e8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32fe42f7f2f9a19b57efb42567e842265869e8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/985afe07f79223d5d704ae259bb66c9d5e29d840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/985afe07f79223d5d704ae259bb66c9d5e29d840", "html_url": "https://github.com/rust-lang/rust/commit/985afe07f79223d5d704ae259bb66c9d5e29d840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/985afe07f79223d5d704ae259bb66c9d5e29d840/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e313a50b20ad3a2eaabceecb3505b523202c750", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e313a50b20ad3a2eaabceecb3505b523202c750", "html_url": "https://github.com/rust-lang/rust/commit/4e313a50b20ad3a2eaabceecb3505b523202c750"}, {"sha": "64a42db51a8d866031fe69cd68a9ca108a8435fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a42db51a8d866031fe69cd68a9ca108a8435fa", "html_url": "https://github.com/rust-lang/rust/commit/64a42db51a8d866031fe69cd68a9ca108a8435fa"}], "stats": {"total": 88, "additions": 60, "deletions": 28}, "files": [{"sha": "c89784065b8be775d4ba7fc6fd967dc0b77d9f2d", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 60, "deletions": 26, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/985afe07f79223d5d704ae259bb66c9d5e29d840/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985afe07f79223d5d704ae259bb66c9d5e29d840/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=985afe07f79223d5d704ae259bb66c9d5e29d840", "patch": "@@ -2,17 +2,17 @@ use super::REDUNDANT_PATTERN_MATCHING;\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::needs_ordered_drop;\n+use clippy_utils::ty::{is_type_diagnostic_item, needs_ordered_drop};\n use clippy_utils::visitors::any_temporaries_need_ordered_drop;\n-use clippy_utils::{higher, is_lang_ctor, is_trait_method, match_def_path, paths};\n+use clippy_utils::{higher, is_lang_ctor, is_trait_method};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{OptionNone, PollPending};\n+use rustc_hir::LangItem::{self, OptionSome, OptionNone, PollPending, PollReady, ResultOk, ResultErr};\n use rustc_hir::{Arm, Expr, ExprKind, Node, Pat, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, subst::GenericArgKind, DefIdTree, Ty};\n-use rustc_span::sym;\n+use rustc_span::{sym, Symbol};\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n@@ -75,9 +75,9 @@ fn find_sugg_for_if_let<'tcx>(\n                     (\"is_some()\", op_ty)\n                 } else if Some(id) == lang_items.poll_ready_variant() {\n                     (\"is_ready()\", op_ty)\n-                } else if match_def_path(cx, id, &paths::IPADDR_V4) {\n+                } else if is_pat_variant(cx, check_pat, qpath, Item::Diag(sym::IpAddr, sym!(V4))) {\n                     (\"is_ipv4()\", op_ty)\n-                } else if match_def_path(cx, id, &paths::IPADDR_V6) {\n+                } else if is_pat_variant(cx, check_pat, qpath, Item::Diag(sym::IpAddr, sym!(V6))) {\n                     (\"is_ipv6()\", op_ty)\n                 } else {\n                     return;\n@@ -187,8 +187,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                         arms,\n                         path_left,\n                         path_right,\n-                        &paths::RESULT_OK,\n-                        &paths::RESULT_ERR,\n+                        Item::Lang(ResultOk),\n+                        Item::Lang(ResultErr),\n                         \"is_ok()\",\n                         \"is_err()\",\n                     )\n@@ -198,8 +198,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                             arms,\n                             path_left,\n                             path_right,\n-                            &paths::IPADDR_V4,\n-                            &paths::IPADDR_V6,\n+                            Item::Diag(sym::IpAddr, sym!(V4)),\n+                            Item::Diag(sym::IpAddr, sym!(V6)),\n                             \"is_ipv4()\",\n                             \"is_ipv6()\",\n                         )\n@@ -213,13 +213,14 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                 if patterns.len() == 1 =>\n             {\n                 if let PatKind::Wild = patterns[0].kind {\n+\n                     find_good_method_for_match(\n                         cx,\n                         arms,\n                         path_left,\n                         path_right,\n-                        &paths::OPTION_SOME,\n-                        &paths::OPTION_NONE,\n+                        Item::Lang(OptionSome),\n+                        Item::Lang(OptionNone),\n                         \"is_some()\",\n                         \"is_none()\",\n                     )\n@@ -229,8 +230,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                             arms,\n                             path_left,\n                             path_right,\n-                            &paths::POLL_READY,\n-                            &paths::POLL_PENDING,\n+                            Item::Lang(PollReady),\n+                            Item::Lang(PollPending),\n                             \"is_ready()\",\n                             \"is_pending()\",\n                         )\n@@ -266,28 +267,61 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     }\n }\n \n+#[derive(Clone, Copy)]\n+enum Item {\n+  Lang(LangItem),\n+  Diag(Symbol, Symbol),\n+}\n+\n+fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expected_item: Item) -> bool {\n+    let Some(id) = cx.typeck_results().qpath_res(path, pat.hir_id).opt_def_id() else { return false };\n+\n+    match expected_item {\n+        Item::Lang(expected_lang_item) => {\n+            let expected_id = cx.tcx.lang_items().require(expected_lang_item).unwrap();\n+            cx.tcx.parent(id) == expected_id\n+        },\n+        Item::Diag(expected_ty, expected_variant) => {\n+            let ty = cx.typeck_results().pat_ty(pat);\n+\n+            if is_type_diagnostic_item(cx, ty, expected_ty) {\n+                let variant = ty.ty_adt_def()\n+                    .expect(\"struct pattern type is not an ADT\")\n+                    .variant_of_res(cx.qpath_res(path, pat.hir_id));\n+\n+                return variant.name == expected_variant\n+            }\n+\n+            false\n+        }\n+    }\n+}\n+\n #[expect(clippy::too_many_arguments)]\n fn find_good_method_for_match<'a>(\n     cx: &LateContext<'_>,\n     arms: &[Arm<'_>],\n     path_left: &QPath<'_>,\n     path_right: &QPath<'_>,\n-    expected_left: &[&str],\n-    expected_right: &[&str],\n+    expected_item_left: Item,\n+    expected_item_right: Item,\n     should_be_left: &'a str,\n     should_be_right: &'a str,\n ) -> Option<&'a str> {\n-    let left_id = cx\n-        .typeck_results()\n-        .qpath_res(path_left, arms[0].pat.hir_id)\n-        .opt_def_id()?;\n-    let right_id = cx\n-        .typeck_results()\n-        .qpath_res(path_right, arms[1].pat.hir_id)\n-        .opt_def_id()?;\n-    let body_node_pair = if match_def_path(cx, left_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n+    let pat_left = arms[0].pat;\n+    let pat_right = arms[1].pat;\n+\n+    let body_node_pair = if (\n+        is_pat_variant(cx, pat_left, path_left, expected_item_left)\n+    ) && (\n+        is_pat_variant(cx, pat_right, path_right, expected_item_right)\n+    ) {\n         (&arms[0].body.kind, &arms[1].body.kind)\n-    } else if match_def_path(cx, right_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n+    } else if (\n+        is_pat_variant(cx, pat_left, path_left, expected_item_right)\n+    ) && (\n+        is_pat_variant(cx, pat_right, path_right, expected_item_left)\n+    ) {\n         (&arms[1].body.kind, &arms[0].body.kind)\n     } else {\n         return None;"}, {"sha": "07170e2df12ab2be340c0d5affdc5d4a88641a66", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/985afe07f79223d5d704ae259bb66c9d5e29d840/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985afe07f79223d5d704ae259bb66c9d5e29d840/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=985afe07f79223d5d704ae259bb66c9d5e29d840", "patch": "@@ -66,8 +66,6 @@ pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n-pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n-pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_EMPTY: [&str; 5] = [\"core\", \"iter\", \"sources\", \"empty\", \"Empty\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];"}]}