{"sha": "1a0e69d34f8fde29224875525e66dffb863cbaba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMGU2OWQzNGY4ZmRlMjkyMjQ4NzU1MjVlNjZkZmZiODYzY2JhYmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T18:29:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T18:29:46Z"}, "message": "use more specialized Scalar::from_ constructors where appropriate", "tree": {"sha": "d16801fc93e4ae917e308fccf23ae5aedf9b4769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d16801fc93e4ae917e308fccf23ae5aedf9b4769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a0e69d34f8fde29224875525e66dffb863cbaba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0e69d34f8fde29224875525e66dffb863cbaba", "html_url": "https://github.com/rust-lang/rust/commit/1a0e69d34f8fde29224875525e66dffb863cbaba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a0e69d34f8fde29224875525e66dffb863cbaba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2acf32d9adff836a3111c039e4e10a48ee5c79b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2acf32d9adff836a3111c039e4e10a48ee5c79b5", "html_url": "https://github.com/rust-lang/rust/commit/2acf32d9adff836a3111c039e4e10a48ee5c79b5"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "6fe97bcb1183b5b839ccbdd282eab252e2b1fd41", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=1a0e69d34f8fde29224875525e66dffb863cbaba", "patch": "@@ -208,7 +208,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Char => {\n                 // `u8` to `char` cast\n-                Ok(Scalar::from_uint(u8::try_from(v).unwrap(), Size::from_bytes(4)))\n+                Ok(Scalar::from_u32(u8::try_from(v).unwrap().into()))\n             }\n \n             // Casts to bool are not permitted by rustc, no need to handle them here."}, {"sha": "46f8e98ef34a34c21cb5dfaef26493a37b385482", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=1a0e69d34f8fde29224875525e66dffb863cbaba", "patch": "@@ -2,6 +2,8 @@\n //! looking at their MIR. Intrinsics/functions supported here are shared by CTFE\n //! and miri.\n \n+use std::convert::TryFrom;\n+\n use rustc::mir::{\n     self,\n     interpret::{ConstValue, GlobalId, InterpResult, Scalar},\n@@ -220,7 +222,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::discriminant_value => {\n                 let place = self.deref_operand(args[0])?;\n                 let discr_val = self.read_discriminant(place.into())?.0;\n-                self.write_scalar(Scalar::from_uint(discr_val, dest.layout.size), dest)?;\n+                self.write_scalar(Scalar::from_u64(u64::try_from(discr_val).unwrap()), dest)?;\n             }\n             sym::unchecked_shl\n             | sym::unchecked_shr\n@@ -275,7 +277,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             sym::ptr_offset_from => {\n-                let isize_layout = self.layout_of(self.tcx.types.isize)?;\n                 let a = self.read_immediate(args[0])?.to_scalar()?;\n                 let b = self.read_immediate(args[1])?.to_scalar()?;\n \n@@ -292,7 +293,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     let a = a.to_machine_usize(self)?;\n                     let b = b.to_machine_usize(self)?;\n                     if a == b && a != 0 {\n-                        self.write_scalar(Scalar::from_int(0, isize_layout.size), dest)?;\n+                        self.write_scalar(Scalar::from_machine_isize(0, self), dest)?;\n                         true\n                     } else {\n                         false\n@@ -312,6 +313,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         );\n                     }\n                     let usize_layout = self.layout_of(self.tcx.types.usize)?;\n+                    let isize_layout = self.layout_of(self.tcx.types.isize)?;\n                     let a_offset = ImmTy::from_uint(a.offset.bytes(), usize_layout);\n                     let b_offset = ImmTy::from_uint(b.offset.bytes(), usize_layout);\n                     let (val, _overflowed, _ty) ="}, {"sha": "e3ba02b1948f9fe0ac5e24d225445fd0d4dcb92e", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=1a0e69d34f8fde29224875525e66dffb863cbaba", "patch": "@@ -56,7 +56,7 @@ impl<'tcx, Tag> Immediate<Tag> {\n     pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {\n         Immediate::ScalarPair(\n             val.into(),\n-            Scalar::from_uint(len, cx.data_layout().pointer_size).into(),\n+            Scalar::from_machine_usize(len, cx).into(),\n         )\n     }\n "}, {"sha": "4473a73e1b37e85560b372afcacf7c5c58eb84ac", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=1a0e69d34f8fde29224875525e66dffb863cbaba", "patch": "@@ -180,7 +180,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n     #[inline]\n     pub fn dangling(layout: TyLayout<'tcx>, cx: &impl HasDataLayout) -> Self {\n         let align = layout.align.abi;\n-        let ptr = Scalar::from_uint(align.bytes(), cx.pointer_size());\n+        let ptr = Scalar::from_machine_usize(align.bytes(), cx);\n         // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.\n         MPlaceTy { mplace: MemPlace { ptr, align, meta: MemPlaceMeta::Poison }, layout }\n     }\n@@ -504,7 +504,7 @@ where\n             // implement this.\n             ty::Array(inner, _) => (MemPlaceMeta::None, self.tcx.mk_array(inner, inner_len)),\n             ty::Slice(..) => {\n-                let len = Scalar::from_uint(inner_len, self.pointer_size());\n+                let len = Scalar::from_machine_usize(inner_len, self);\n                 (MemPlaceMeta::Meta(len), base.layout.ty)\n             }\n             _ => bug!(\"cannot subslice non-array type: `{:?}`\", base.layout.ty),\n@@ -1044,7 +1044,7 @@ where\n         kind: MemoryKind<M::MemoryKind>,\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n         let ptr = self.memory.allocate_bytes(str.as_bytes(), kind);\n-        let meta = Scalar::from_uint(u128::try_from(str.len()).unwrap(), self.pointer_size());\n+        let meta = Scalar::from_machine_usize(u64::try_from(str.len()).unwrap(), self);\n         let mplace = MemPlace {\n             ptr: ptr.into(),\n             align: Align::from_bytes(1).unwrap(),"}, {"sha": "764edea2fc5c6c14aaf3472436e25aa3457dbb72", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0e69d34f8fde29224875525e66dffb863cbaba/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=1a0e69d34f8fde29224875525e66dffb863cbaba", "patch": "@@ -3,7 +3,7 @@\n //! The main entry point is the `step` method.\n \n use rustc::mir;\n-use rustc::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n+use rustc::mir::interpret::{InterpResult, Scalar};\n use rustc::ty::layout::LayoutOf;\n \n use super::{InterpCx, Machine};\n@@ -229,8 +229,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let src = self.eval_place(place)?;\n                 let mplace = self.force_allocation(src)?;\n                 let len = mplace.len(self)?;\n-                let size = self.pointer_size();\n-                self.write_scalar(Scalar::from_uint(len, size), dest)?;\n+                self.write_scalar(Scalar::from_machine_usize(len, self), dest)?;\n             }\n \n             AddressOf(_, ref place) | Ref(_, _, ref place) => {\n@@ -254,8 +253,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     !layout.is_unsized(),\n                     \"SizeOf nullary MIR operator called for unsized type\"\n                 );\n-                let size = self.pointer_size();\n-                self.write_scalar(Scalar::from_uint(layout.size.bytes(), size), dest)?;\n+                self.write_scalar(Scalar::from_machine_usize(layout.size.bytes(), self), dest)?;\n             }\n \n             Cast(kind, ref operand, _) => {"}]}