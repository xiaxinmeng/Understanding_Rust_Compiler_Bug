{"sha": "423a9666ca5c688dfd333cc7e6a93944b23a9f6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyM2E5NjY2Y2E1YzY4OGRmZDMzM2NjN2U2YTkzOTQ0YjIzYTlmNmY=", "commit": {"author": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2015-05-31T12:17:31Z"}, "committer": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2015-05-31T12:43:31Z"}, "message": "Implements #45 - any number mod 1 will be 0", "tree": {"sha": "0f7082869970e2a50a8d793e38fc323bde891cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f7082869970e2a50a8d793e38fc323bde891cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423a9666ca5c688dfd333cc7e6a93944b23a9f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423a9666ca5c688dfd333cc7e6a93944b23a9f6f", "html_url": "https://github.com/rust-lang/rust/commit/423a9666ca5c688dfd333cc7e6a93944b23a9f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423a9666ca5c688dfd333cc7e6a93944b23a9f6f/comments", "author": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b99fab8162a13b49b68a2105520ab0645c51897e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b99fab8162a13b49b68a2105520ab0645c51897e", "html_url": "https://github.com/rust-lang/rust/commit/b99fab8162a13b49b68a2105520ab0645c51897e"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "1d760bde99a2e0975fcdcb554f67c3d0cd20322e", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/423a9666ca5c688dfd333cc7e6a93944b23a9f6f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a9666ca5c688dfd333cc7e6a93944b23a9f6f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=423a9666ca5c688dfd333cc7e6a93944b23a9f6f", "patch": "@@ -47,6 +47,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box len_zero::LenZero as LintPassObject);\n     reg.register_lint_pass(box misc::CmpOwned as LintPassObject);\n     reg.register_lint_pass(box collapsible_if::CollapsibleIf as LintPassObject);\n+    reg.register_lint_pass(box misc::ModuloOne as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -64,5 +65,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            len_zero::LEN_ZERO,\n                                            len_zero::LEN_WITHOUT_IS_EMPTY,\n                                            collapsible_if::COLLAPSIBLE_IF,\n+                                           misc::MODULO_ONE,\n                                            ]);\n }"}, {"sha": "590ebbc3f9fafd2ddf593dd92ce3191f64e0fb4b", "filename": "src/misc.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/423a9666ca5c688dfd333cc7e6a93944b23a9f6f/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a9666ca5c688dfd333cc7e6a93944b23a9f6f/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=423a9666ca5c688dfd333cc7e6a93944b23a9f6f", "patch": "@@ -266,3 +266,34 @@ fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n \targs.len() == 1 && if let ty_str = \n \t\twalk_ty(expr_ty(cx.tcx, &*args[0])).sty { true } else { false }\n }\n+\n+\n+declare_lint!(pub MODULO_ONE, Warn, \"Warn on expressions that include % 1, which is always 0\");\n+\n+#[derive(Copy,Clone)]\n+pub struct ModuloOne;\n+\n+impl LintPass for ModuloOne {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MODULO_ONE)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprBinary(ref cmp, _, ref right) = expr.node {\n+            if let &Spanned {node: BinOp_::BiRem, ..} = cmp {\n+                if is_lit_one(right) {\n+                    cx.span_lint(MODULO_ONE, expr.span, \"Any number modulo 1 will be 0\");\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn is_lit_one(expr: &Expr) -> bool {\n+    if let ExprLit(ref spanned) = expr.node {\n+        if let LitInt(1, _) = spanned.node {\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "26c7de855e5b3700b1e4ba22e837444f0266114c", "filename": "tests/compile-fail/modulo_one.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/423a9666ca5c688dfd333cc7e6a93944b23a9f6f/tests%2Fcompile-fail%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a9666ca5c688dfd333cc7e6a93944b23a9f6f/tests%2Fcompile-fail%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodulo_one.rs?ref=423a9666ca5c688dfd333cc7e6a93944b23a9f6f", "patch": "@@ -0,0 +1,8 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(modulo_one)]\n+\n+fn main() {\n+    10 % 1; //~ERROR Any number modulo 1 will be 0\n+    10 % 2;\n+}"}]}