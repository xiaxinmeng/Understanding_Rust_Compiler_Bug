{"sha": "911d95bfe3076f2ed61798a1cf7373db9852c64f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMWQ5NWJmZTMwNzZmMmVkNjE3OThhMWNmNzM3M2RiOTg1MmM2NGY=", "commit": {"author": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2017-10-08T20:57:03Z"}, "committer": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2017-10-08T20:58:01Z"}, "message": "Don't panic in the coordinator thread, bubble up the failure\n\nFixes #43402 (take 2)", "tree": {"sha": "79f09171b972aff32450e86c3ff9249cda020e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f09171b972aff32450e86c3ff9249cda020e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/911d95bfe3076f2ed61798a1cf7373db9852c64f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/911d95bfe3076f2ed61798a1cf7373db9852c64f", "html_url": "https://github.com/rust-lang/rust/commit/911d95bfe3076f2ed61798a1cf7373db9852c64f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/911d95bfe3076f2ed61798a1cf7373db9852c64f/comments", "author": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed8b698421291f5057059da885cd670d76a47e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8b698421291f5057059da885cd670d76a47e9", "html_url": "https://github.com/rust-lang/rust/commit/3ed8b698421291f5057059da885cd670d76a47e9"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "de07ee8b36f15d79d6fa7d0be68fd4a0075dd48d", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/911d95bfe3076f2ed61798a1cf7373db9852c64f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/911d95bfe3076f2ed61798a1cf7373db9852c64f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=911d95bfe3076f2ed61798a1cf7373db9852c64f", "patch": "@@ -1192,7 +1192,7 @@ fn start_executing_work(tcx: TyCtxt,\n                         modules_config: Arc<ModuleConfig>,\n                         metadata_config: Arc<ModuleConfig>,\n                         allocator_config: Arc<ModuleConfig>)\n-                        -> thread::JoinHandle<CompiledModules> {\n+                        -> thread::JoinHandle<Result<CompiledModules, ()>> {\n     let coordinator_send = tcx.tx_to_llvm_workers.clone();\n     let mut exported_symbols = FxHashMap();\n     exported_symbols.insert(LOCAL_CRATE, tcx.exported_symbols(LOCAL_CRATE));\n@@ -1638,7 +1638,7 @@ fn start_executing_work(tcx: TyCtxt,\n                 Message::Done { result: Err(()), worker_id: _ } => {\n                     shared_emitter.fatal(\"aborting due to worker thread failure\");\n                     // Exit the coordinator thread\n-                    panic!(\"aborting due to worker thread failure\")\n+                    return Err(())\n                 }\n                 Message::TranslateItem => {\n                     bug!(\"the coordinator should not receive translation requests\")\n@@ -1664,11 +1664,11 @@ fn start_executing_work(tcx: TyCtxt,\n         let compiled_metadata_module = compiled_metadata_module\n             .expect(\"Metadata module not compiled?\");\n \n-        CompiledModules {\n+        Ok(CompiledModules {\n             modules: compiled_modules,\n             metadata_module: compiled_metadata_module,\n             allocator_module: compiled_allocator_module,\n-        }\n+        })\n     });\n \n     // A heuristic that determines if we have enough LLVM WorkItems in the\n@@ -1960,15 +1960,19 @@ pub struct OngoingCrateTranslation {\n     coordinator_send: Sender<Box<Any + Send>>,\n     trans_worker_receive: Receiver<Message>,\n     shared_emitter_main: SharedEmitterMain,\n-    future: thread::JoinHandle<CompiledModules>,\n+    future: thread::JoinHandle<Result<CompiledModules, ()>>,\n     output_filenames: Arc<OutputFilenames>,\n }\n \n impl OngoingCrateTranslation {\n     pub fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n         self.shared_emitter_main.check(sess, true);\n         let compiled_modules = match self.future.join() {\n-            Ok(compiled_modules) => compiled_modules,\n+            Ok(Ok(compiled_modules)) => compiled_modules,\n+            Ok(Err(())) => {\n+                sess.abort_if_errors();\n+                panic!(\"expected abort due to worker thread errors\")\n+            },\n             Err(_) => {\n                 sess.fatal(\"Error during translation/LLVM phase.\");\n             }"}]}