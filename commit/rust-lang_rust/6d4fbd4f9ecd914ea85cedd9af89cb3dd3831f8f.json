{"sha": "6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNGZiZDRmOWVjZDkxNGVhODVjZWRkOWFmODljYjNkZDM4MzFmOGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-18T22:35:08Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-18T22:35:20Z"}, "message": "core: fix remaining repr bugs, r=burningtree.", "tree": {"sha": "635c9f053d811a6cd3874b582ee3406a3a526c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635c9f053d811a6cd3874b582ee3406a3a526c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f", "html_url": "https://github.com/rust-lang/rust/commit/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b46e25bdc8f4c0ac702a3197ef61da2786bb917c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b46e25bdc8f4c0ac702a3197ef61da2786bb917c", "html_url": "https://github.com/rust-lang/rust/commit/b46e25bdc8f4c0ac702a3197ef61da2786bb917c"}], "stats": {"total": 113, "additions": 103, "deletions": 10}, "files": [{"sha": "268d5e1baa6e5c92ad50ac30aa94374e8987395f", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f", "patch": "@@ -28,6 +28,8 @@ use libc::c_void;\n  */\n pub trait MovePtr {\n     fn move_ptr(adjustment: fn(*c_void) -> *c_void);\n+    fn push_ptr();\n+    fn pop_ptr();\n }\n \n /// Helper function for alignment calculation.\n@@ -402,6 +404,7 @@ impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n                                 disr_val: int,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n+        self.inner.push_ptr();\n         if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n                                                  n_fields, name) {\n             return false;\n@@ -410,7 +413,9 @@ impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n     }\n \n     fn visit_enum_variant_field(i: uint, inner: *TyDesc) -> bool {\n+        unsafe { self.align((*inner).align); }\n         if ! self.inner.visit_enum_variant_field(i, inner) { return false; }\n+        unsafe { self.bump((*inner).size); }\n         true\n     }\n \n@@ -422,13 +427,15 @@ impl<V: TyVisitor MovePtr> MovePtrAdaptor<V>: TyVisitor {\n                                                  n_fields, name) {\n             return false;\n         }\n+        self.inner.pop_ptr();\n         true\n     }\n \n     fn visit_leave_enum(n_variants: uint, sz: uint, align: uint) -> bool {\n         if ! self.inner.visit_leave_enum(n_variants, sz, align) {\n             return false;\n         }\n+        self.bump(sz);\n         true\n     }\n "}, {"sha": "111070e5b24c737b593e7e1c49a1a8eb80aef161", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 96, "deletions": 10, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=6d4fbd4f9ecd914ea85cedd9af89cb3dd3831f8f", "patch": "@@ -26,6 +26,7 @@ use reflect::{MovePtr, MovePtrAdaptor, align};\n use vec::UnboxedVecRepr;\n use vec::raw::{VecRepr, SliceRepr};\n pub use managed::raw::BoxRepr;\n+use dvec::DVec;\n \n /// Helpers\n \n@@ -121,19 +122,36 @@ impl char : Repr {\n \n // New implementation using reflect::MovePtr\n \n+enum VariantState {\n+    Degenerate,\n+    TagMatch,\n+    TagMismatch,\n+}\n+\n pub struct ReprVisitor {\n     mut ptr: *c_void,\n+    ptr_stk: DVec<*c_void>,\n+    var_stk: DVec<VariantState>,\n     writer: @Writer\n }\n pub fn ReprVisitor(ptr: *c_void, writer: @Writer) -> ReprVisitor {\n-    ReprVisitor { ptr: ptr, writer: writer }\n+    ReprVisitor { ptr: ptr,\n+                  ptr_stk: DVec(),\n+                  var_stk: DVec(),\n+                  writer: writer }\n }\n \n impl ReprVisitor : MovePtr {\n     #[inline(always)]\n     fn move_ptr(adjustment: fn(*c_void) -> *c_void) {\n         self.ptr = adjustment(self.ptr);\n     }\n+    fn push_ptr() {\n+        self.ptr_stk.push(self.ptr);\n+    }\n+    fn pop_ptr() {\n+        self.ptr = self.ptr_stk.pop();\n+    }\n }\n \n impl ReprVisitor {\n@@ -148,6 +166,18 @@ impl ReprVisitor {\n         true\n     }\n \n+    #[inline(always)]\n+    fn bump(sz: uint) {\n+      do self.move_ptr() |p| {\n+            ((p as uint) + sz) as *c_void\n+      };\n+    }\n+\n+    #[inline(always)]\n+    fn bump_past<T>() {\n+        self.bump(sys::size_of::<T>());\n+    }\n+\n     #[inline(always)]\n     fn visit_inner(inner: *TyDesc) -> bool {\n         self.visit_ptr_inner(self.ptr, inner)\n@@ -402,23 +432,79 @@ impl ReprVisitor : TyVisitor {\n         true\n     }\n \n-    fn visit_enter_enum(_n_variants: uint,\n+    fn visit_enter_enum(n_variants: uint,\n                         _sz: uint, _align: uint) -> bool {\n+        if n_variants == 1 {\n+            self.var_stk.push(Degenerate)\n+        } else {\n+            self.var_stk.push(TagMatch)\n+        }\n         true\n     }\n     fn visit_enter_enum_variant(_variant: uint,\n-                                _disr_val: int,\n-                                _n_fields: uint,\n-                                _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(_i: uint, inner: *TyDesc) -> bool {\n-        self.visit_inner(inner)\n+                                disr_val: int,\n+                                n_fields: uint,\n+                                name: &str) -> bool {\n+        let mut write = false;\n+        match self.var_stk.pop() {\n+            Degenerate => {\n+                write = true;\n+                self.var_stk.push(Degenerate);\n+            }\n+            TagMatch | TagMismatch => {\n+                do self.get::<int>() |t| {\n+                    if disr_val == *t {\n+                        write = true;\n+                        self.var_stk.push(TagMatch);\n+                    } else {\n+                        self.var_stk.push(TagMismatch);\n+                    }\n+                };\n+                self.bump_past::<int>();\n+            }\n+        }\n+\n+        if write {\n+            self.writer.write_str(name);\n+            if n_fields > 0 {\n+                self.writer.write_char('(');\n+            }\n+        }\n+        true\n+    }\n+    fn visit_enum_variant_field(i: uint, inner: *TyDesc) -> bool {\n+        match self.var_stk.last() {\n+            Degenerate | TagMatch => {\n+                if i != 0 {\n+                    self.writer.write_str(\", \");\n+                }\n+                if ! self.visit_inner(inner) {\n+                    return false;\n+                }\n+            }\n+            TagMismatch => ()\n+        }\n+        true\n     }\n     fn visit_leave_enum_variant(_variant: uint,\n                                 _disr_val: int,\n-                                _n_fields: uint,\n-                                _name: &str) -> bool { true }\n+                                n_fields: uint,\n+                                _name: &str) -> bool {\n+        match self.var_stk.last() {\n+            Degenerate | TagMatch => {\n+                if n_fields > 0 {\n+                    self.writer.write_char(')');\n+                }\n+            }\n+            TagMismatch => ()\n+        }\n+        true\n+    }\n     fn visit_leave_enum(_n_variants: uint,\n-                        _sz: uint, _align: uint) -> bool { true }\n+                        _sz: uint, _align: uint) -> bool {\n+        self.var_stk.pop();\n+        true\n+    }\n \n     fn visit_enter_fn(_purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }"}]}