{"sha": "b49bdad4994ad555fcfbb523ad79096c46a0ed48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OWJkYWQ0OTk0YWQ1NTVmY2ZiYjUyM2FkNzkwOTZjNDZhMGVkNDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-21T18:43:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-21T18:43:52Z"}, "message": "rustc: Box raw types. Shaves about 5 seconds off compilation.", "tree": {"sha": "41bc29669330fc7867e950b5939e978a6aec7c9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bc29669330fc7867e950b5939e978a6aec7c9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b49bdad4994ad555fcfbb523ad79096c46a0ed48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b49bdad4994ad555fcfbb523ad79096c46a0ed48", "html_url": "https://github.com/rust-lang/rust/commit/b49bdad4994ad555fcfbb523ad79096c46a0ed48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b49bdad4994ad555fcfbb523ad79096c46a0ed48/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df90f57a5f76059394abd8328d30003b844cb497", "url": "https://api.github.com/repos/rust-lang/rust/commits/df90f57a5f76059394abd8328d30003b844cb497", "html_url": "https://github.com/rust-lang/rust/commit/df90f57a5f76059394abd8328d30003b844cb497"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "0f2b39158295d7669eb2f93f4f8232f684aae260", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b49bdad4994ad555fcfbb523ad79096c46a0ed48/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b49bdad4994ad555fcfbb523ad79096c46a0ed48/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=b49bdad4994ad555fcfbb523ad79096c46a0ed48", "patch": "@@ -352,7 +352,7 @@ const uint idx_bot = 20u;\n \n const uint idx_first_others = 21u;\n \n-type type_store = interner::interner[raw_t];\n+type type_store = interner::interner[@raw_t];\n \n type ty_param_substs_opt_and_ty = tup(option::t[ty::t[]], ty::t);\n \n@@ -403,7 +403,7 @@ fn mk_ctxt(session::session s, resolve::def_map dm,\n     let node_type_table ntt =\n         @smallintmap::mk[ty::ty_param_substs_opt_and_ty]();\n     auto tcache = new_def_hash[ty::ty_param_count_and_ty]();\n-    auto ts = @interner::mk[raw_t](hash_raw_ty, eq_raw_ty);\n+    auto ts = @interner::mk[@raw_t](hash_raw_ty, eq_raw_ty);\n     auto cx =\n         rec(ts=ts,\n             sess=s,\n@@ -428,14 +428,14 @@ fn mk_ctxt(session::session s, resolve::def_map dm,\n \n \n // Type constructors\n-fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] in_cname) -> raw_t {\n+fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] in_cname) -> @raw_t {\n     auto cname = none;\n     auto h = hash_type_info(st, cname);\n     let bool has_params = false;\n     let bool has_vars = false;\n     fn derive_flags_t(&ctxt cx, &mutable bool has_params,\n                       &mutable bool has_vars, &t tt) {\n-        auto rt = interner::get[raw_t](*cx.ts, tt);\n+        auto rt = interner::get[@raw_t](*cx.ts, tt);\n         has_params = has_params || rt.has_params;\n         has_vars = has_vars || rt.has_vars;\n     }\n@@ -511,20 +511,20 @@ fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] in_cname) -> raw_t {\n             derive_flags_t(cx, has_params, has_vars, tt);\n         }\n     }\n-    ret rec(struct=st,\n-            cname=cname,\n-            hash=h,\n-            has_params=has_params,\n-            has_vars=has_vars);\n+    ret @rec(struct=st,\n+             cname=cname,\n+             hash=h,\n+             has_params=has_params,\n+             has_vars=has_vars);\n }\n \n fn intern(&ctxt cx, &sty st, &option::t[str] cname) {\n-    interner::intern[raw_t](*cx.ts, mk_raw_ty(cx, st, cname));\n+    interner::intern(*cx.ts, mk_raw_ty(cx, st, cname));\n }\n \n fn gen_ty_full(&ctxt cx, &sty st, &option::t[str] cname) -> t {\n     auto raw_type = mk_raw_ty(cx, st, cname);\n-    ret interner::intern[raw_t](*cx.ts, raw_type);\n+    ret interner::intern(*cx.ts, raw_type);\n }\n \n \n@@ -635,13 +635,13 @@ fn mk_native(&ctxt cx, &def_id did) -> t { ret gen_ty(cx, ty_native(did)); }\n \n // Returns the one-level-deep type structure of the given type.\n fn struct(&ctxt cx, &t typ) -> sty {\n-    ret interner::get[raw_t](*cx.ts, typ).struct;\n+    ret interner::get(*cx.ts, typ).struct;\n }\n \n \n // Returns the canonical name of the given type.\n fn cname(&ctxt cx, &t typ) -> option::t[str] {\n-    ret interner::get[raw_t](*cx.ts, typ).cname;\n+    ret interner::get(*cx.ts, typ).cname;\n }\n \n \n@@ -1434,7 +1434,7 @@ fn hash_type_info(&sty st, &option::t[str] cname_opt) -> uint {\n     ret h;\n }\n \n-fn hash_raw_ty(&raw_t rt) -> uint { ret rt.hash; }\n+fn hash_raw_ty(&@raw_t rt) -> uint { ret rt.hash; }\n \n fn hash_ty(&t typ) -> uint { ret typ; }\n \n@@ -1728,7 +1728,7 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n // module.\n //\n // FIXME: Use structural comparison, but this loops forever and segfaults.\n-fn eq_raw_ty(&raw_t a, &raw_t b) -> bool {\n+fn eq_raw_ty(&@raw_t a, &@raw_t b) -> bool {\n     // Check hashes (fast path).\n \n     if (a.hash != b.hash) { ret false; }\n@@ -1830,11 +1830,11 @@ fn count_ty_params(&ctxt cx, t ty) -> uint {\n }\n \n fn type_contains_vars(&ctxt cx, &t typ) -> bool {\n-    ret interner::get[raw_t](*cx.ts, typ).has_vars;\n+    ret interner::get(*cx.ts, typ).has_vars;\n }\n \n fn type_contains_params(&ctxt cx, &t typ) -> bool {\n-    ret interner::get[raw_t](*cx.ts, typ).has_params;\n+    ret interner::get(*cx.ts, typ).has_params;\n }\n \n "}]}