{"sha": "1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjN2QyNTNjYTM2MDFkMmY5Y2FkZGM1MmU2NmJmYzFkZTNiZGQ0NDE=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-21T21:35:43Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-24T23:09:09Z"}, "message": "Rename `fail_` lang item to `fail`, closes #16114", "tree": {"sha": "4d28ead07c0451d6038972ed6517a817e7230554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d28ead07c0451d6038972ed6517a817e7230554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "html_url": "https://github.com/rust-lang/rust/commit/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc", "html_url": "https://github.com/rust-lang/rust/commit/45f4081e61a1a15e2b5b9c5a09976fddffdac9dc"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "ba79e828150e597f3f0dfb41ca87c2556bb37647", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "patch": "@@ -706,7 +706,7 @@ Other features provided by lang items include:\n   `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all\n   marked with lang items; those specific four are `eq`, `ord`,\n   `deref`, and `add` respectively.\n-- stack unwinding and general failure; the `eh_personality`, `fail_`\n+- stack unwinding and general failure; the `eh_personality`, `fail`\n   and `fail_bounds_checks` lang items.\n - the traits in `std::kinds` used to indicate types that satisfy\n   various kinds; lang items `send`, `sync` and `copy`."}, {"sha": "6f919004874920104f69e1174caaf1914795aa30", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "patch": "@@ -33,6 +33,8 @@\n use fmt;\n use intrinsics;\n \n+// NOTE: remove after next snapshot\n+#[cfg(stage0)]\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"fail_\"]\n fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n@@ -45,6 +47,19 @@ fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     unsafe { intrinsics::abort() }\n }\n \n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)] // this is the slow path, always\n+#[lang=\"fail\"]\n+fn fail(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n+    let (expr, file, line) = *expr_file_line;\n+    let ref file_line = (file, line);\n+    format_args!(|args| -> () {\n+        fail_impl(args, file_line);\n+    }, \"{}\", expr);\n+\n+    unsafe { intrinsics::abort() }\n+}\n+\n #[cold] #[inline(never)]\n #[lang=\"fail_bounds_check\"]\n fn fail_bounds_check(file_line: &(&'static str, uint),\n@@ -65,6 +80,7 @@ pub fn fail_impl(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]\n     extern {\n \n+        // NOTE: remove after next snapshot\n         #[cfg(stage0)]\n         #[lang = \"begin_unwind\"]\n         fn fail_impl(fmt: &fmt::Arguments, file: &'static str,\n@@ -79,4 +95,3 @@ pub fn fail_impl(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     let (file, line) = *file_line;\n     unsafe { fail_impl(fmt, file, line) }\n }\n-"}, {"sha": "50c92b45fdff42eb39898ab7e7bd14803199e688", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "patch": "@@ -264,7 +264,7 @@ lets_do_this! {\n \n     StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n \n-    // A number of failure-related lang items. The `fail_` item corresponds to\n+    // A number of failure-related lang items. The `fail` item corresponds to\n     // divide-by-zero and various failure cases with `match`. The\n     // `fail_bounds_check` item is for indexing arrays.\n     //\n@@ -273,7 +273,7 @@ lets_do_this! {\n     // defined to use it, but a final product is required to define it\n     // somewhere. Additionally, there are restrictions on crates that use a weak\n     // lang item, but do not have it defined.\n-    FailFnLangItem,                  \"fail_\",                   fail_fn;\n+    FailFnLangItem,                  \"fail\",                    fail_fn;\n     FailBoundsCheckFnLangItem,       \"fail_bounds_check\",       fail_bounds_check_fn;\n     FailFmtLangItem,                 \"fail_fmt\",                fail_fmt;\n "}, {"sha": "034ed470c97520459cf198cdbc34da643f77d94b", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "patch": "@@ -488,24 +488,22 @@ pub mod eabi {\n }\n \n // Entry point of failure from the libcore crate\n-#[cfg(not(test))]\n-#[cfg(not(stage0))]\n+#[cfg(not(test), not(stage0))]\n #[lang = \"fail_fmt\"]\n-pub extern fn rust_begin_unwind1(msg: &fmt::Arguments,\n+pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n                                 file: &'static str, line: uint) -> ! {\n     begin_unwind_fmt(msg, &(file, line))\n }\n+\n //\n // Entry point of failure from the libcore crate\n-#[cfg(not(test))]\n-#[cfg(stage0)]\n+#[cfg(stage0, not(test))]\n #[lang = \"begin_unwind\"]\n pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n                                 file: &'static str, line: uint) -> ! {\n     begin_unwind_fmt(msg, &(file, line))\n }\n \n-\n /// The entry point for unwinding with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call"}, {"sha": "73bad011472405321259405da30bec1eb9013081", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "patch": "@@ -11,7 +11,7 @@\n #![no_std]\n #![feature(lang_items)]\n \n-#[lang=\"fail_\"]\n+#[lang=\"fail\"]\n fn fail(_: &(&'static str, &'static str, uint)) -> ! { loop {} }\n \n #[lang = \"stack_exhausted\"]"}, {"sha": "1efd7b09aacc606445dddc9fea58addc3d6f5808", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "patch": "@@ -104,5 +104,5 @@ fn g() { h(); }\n fn h() {}\n \n // Similarly, lang items are live\n-#[lang=\"fail_\"]\n+#[lang=\"fail\"]\n fn fail(_: *const u8, _: *const u8, _: uint) -> ! { loop {} }"}]}