{"sha": "3550568a548091ec4ae738827b50a84e9ddf0b8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTA1NjhhNTQ4MDkxZWM0YWU3Mzg4MjdiNTBhODRlOWRkZjBiOGY=", "commit": {"author": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-09-09T21:02:34Z"}, "committer": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-09-09T21:02:34Z"}, "message": "removing if chain and renaming lint", "tree": {"sha": "23729606df744f5b45aee70591b3f27ad4a2d6b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23729606df744f5b45aee70591b3f27ad4a2d6b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3550568a548091ec4ae738827b50a84e9ddf0b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3550568a548091ec4ae738827b50a84e9ddf0b8f", "html_url": "https://github.com/rust-lang/rust/commit/3550568a548091ec4ae738827b50a84e9ddf0b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3550568a548091ec4ae738827b50a84e9ddf0b8f/comments", "author": null, "committer": null, "parents": [{"sha": "f9fcbbea03edb735c22311522b55d7b854bd6ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fcbbea03edb735c22311522b55d7b854bd6ac0", "html_url": "https://github.com/rust-lang/rust/commit/f9fcbbea03edb735c22311522b55d7b854bd6ac0"}], "stats": {"total": 71, "additions": 32, "deletions": 39}, "files": [{"sha": "d4f0ff4ba78d6f21afd4421b17f0c6c6986d10c2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3550568a548091ec4ae738827b50a84e9ddf0b8f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3550568a548091ec4ae738827b50a84e9ddf0b8f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3550568a548091ec4ae738827b50a84e9ddf0b8f", "patch": "@@ -1651,7 +1651,7 @@ Released 2018-09-13\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n [`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n-[`panic_in_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result\n+[`panic_in_result_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result\n [`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl"}, {"sha": "dbe17e6bbfe033c13f7414675dce964ea413c380", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3550568a548091ec4ae738827b50a84e9ddf0b8f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550568a548091ec4ae738827b50a84e9ddf0b8f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3550568a548091ec4ae738827b50a84e9ddf0b8f", "patch": "@@ -267,7 +267,7 @@ mod open_options;\n mod option_env_unwrap;\n mod option_if_let_else;\n mod overflow_check_conditional;\n-mod panic_in_result;\n+mod panic_in_result_fn;\n mod panic_unimplemented;\n mod partialeq_ne_impl;\n mod path_buf_push_overwrite;\n@@ -748,7 +748,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &option_env_unwrap::OPTION_ENV_UNWRAP,\n         &option_if_let_else::OPTION_IF_LET_ELSE,\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n-        &panic_in_result::PANIC_IN_RESULT,\n+        &panic_in_result_fn::PANIC_IN_RESULT_FN,\n         &panic_unimplemented::PANIC,\n         &panic_unimplemented::PANIC_PARAMS,\n         &panic_unimplemented::TODO,\n@@ -1088,7 +1088,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n-    store.register_late_pass(|| box panic_in_result::PanicInResult);\n+    store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n \n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n@@ -1132,7 +1132,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n         LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n         LintId::of(&modulo_arithmetic::MODULO_ARITHMETIC),\n-        LintId::of(&panic_in_result::PANIC_IN_RESULT),\n+        LintId::of(&panic_in_result_fn::PANIC_IN_RESULT_FN),\n         LintId::of(&panic_unimplemented::PANIC),\n         LintId::of(&panic_unimplemented::TODO),\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),"}, {"sha": "4077aba6ef17dabb99ca7f14b75f3e4d2d2efc28", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "renamed", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3550568a548091ec4ae738827b50a84e9ddf0b8f/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550568a548091ec4ae738827b50a84e9ddf0b8f/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=3550568a548091ec4ae738827b50a84e9ddf0b8f", "patch": "@@ -1,5 +1,4 @@\n use crate::utils::{is_expn_of, is_type_diagnostic_item, return_ty, span_lint_and_then};\n-use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::Expr;\n@@ -23,14 +22,14 @@ declare_clippy_lint! {\n     ///     panic!(\"error\");\n     /// }\n     /// ```\n-    pub PANIC_IN_RESULT,\n+    pub PANIC_IN_RESULT_FN,\n     restriction,\n     \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \"\n }\n \n-declare_lint_pass!(PanicInResult => [PANIC_IN_RESULT]);\n+declare_lint_pass!(PanicInResultFn  => [PANIC_IN_RESULT_FN]);\n \n-impl<'tcx> LateLintPass<'tcx> for PanicInResult {\n+impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,\n@@ -40,15 +39,10 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResult {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n-        if let FnKind::Closure(_) = fn_kind {\n-            return;\n-        }\n-        if_chain! {\n-            if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type));\n-            then\n-            {\n-                lint_impl_body(cx, span, body);\n-            }\n+        if !matches!(fn_kind, FnKind::Closure(_))\n+            && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type))\n+        {\n+            lint_impl_body(cx, span, body);\n         }\n     }\n }\n@@ -61,10 +55,9 @@ impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if is_expn_of(expr.span, \"unimplemented\").is_some()\n-            || is_expn_of(expr.span, \"unreachable\").is_some()\n-            || is_expn_of(expr.span, \"panic\").is_some()\n-            || is_expn_of(expr.span, \"todo\").is_some()\n+        if [\"unimplemented\", \"unreachable\", \"panic\", \"todo\"]\n+            .iter()\n+            .any(|fun| is_expn_of(expr.span, fun).is_some())\n         {\n             self.result.push(expr.span);\n         }\n@@ -83,7 +76,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir\n     if !panics.result.is_empty() {\n         span_lint_and_then(\n             cx,\n-            PANIC_IN_RESULT,\n+            PANIC_IN_RESULT_FN,\n             impl_span,\n             \"used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\",\n             move |diag| {", "previous_filename": "clippy_lints/src/panic_in_result.rs"}, {"sha": "4d6c45761e66e0b973c6430f3f707142cf8cd72b", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3550568a548091ec4ae738827b50a84e9ddf0b8f/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550568a548091ec4ae738827b50a84e9ddf0b8f/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=3550568a548091ec4ae738827b50a84e9ddf0b8f", "patch": "@@ -1705,11 +1705,11 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"panic_unimplemented\",\n     },\n     Lint {\n-        name: \"panic_in_result\",\n+        name: \"panic_in_result_fn\",\n         group: \"restriction\",\n         desc: \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \",\n         deprecation: None,\n-        module: \"panic_in_result\",\n+        module: \"panic_in_result_fn\",\n     },\n     Lint {\n         name: \"panic_params\","}, {"sha": "287726f7a2d4e99e827784da54e9a805e47bba14", "filename": "tests/ui/panic_in_result_fn.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3550568a548091ec4ae738827b50a84e9ddf0b8f/tests%2Fui%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3550568a548091ec4ae738827b50a84e9ddf0b8f/tests%2Fui%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.rs?ref=3550568a548091ec4ae738827b50a84e9ddf0b8f", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::panic_in_result)]\n+#![warn(clippy::panic_in_result_fn)]\n \n struct A;\n ", "previous_filename": "tests/ui/panic_in_result.rs"}, {"sha": "c6936fd86923cfab412f794ce9aea9e47a2a43b0", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3550568a548091ec4ae738827b50a84e9ddf0b8f/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3550568a548091ec4ae738827b50a84e9ddf0b8f/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=3550568a548091ec4ae738827b50a84e9ddf0b8f", "patch": "@@ -1,23 +1,23 @@\n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result.rs:6:5\n+  --> $DIR/panic_in_result_fn.rs:6:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n LL | |     {\n LL | |         panic!(\"error\");\n LL | |     }\n    | |_____^\n    |\n-   = note: `-D clippy::panic-in-result` implied by `-D warnings`\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result.rs:8:9\n+  --> $DIR/panic_in_result_fn.rs:8:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result.rs:11:5\n+  --> $DIR/panic_in_result_fn.rs:11:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -27,14 +27,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result.rs:13:9\n+  --> $DIR/panic_in_result_fn.rs:13:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result.rs:16:5\n+  --> $DIR/panic_in_result_fn.rs:16:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -44,14 +44,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result.rs:18:9\n+  --> $DIR/panic_in_result_fn.rs:18:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result.rs:21:5\n+  --> $DIR/panic_in_result_fn.rs:21:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -61,14 +61,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result.rs:23:9\n+  --> $DIR/panic_in_result_fn.rs:23:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result.rs:52:1\n+  --> $DIR/panic_in_result_fn.rs:52:1\n    |\n LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n LL | | {\n@@ -78,14 +78,14 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result.rs:54:5\n+  --> $DIR/panic_in_result_fn.rs:54:5\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result.rs:67:1\n+  --> $DIR/panic_in_result_fn.rs:67:1\n    |\n LL | / fn main() -> Result<(), String> {\n LL | |     todo!(\"finish main method\");\n@@ -95,7 +95,7 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result.rs:68:5\n+  --> $DIR/panic_in_result_fn.rs:68:5\n    |\n LL |     todo!(\"finish main method\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/panic_in_result.stderr"}]}