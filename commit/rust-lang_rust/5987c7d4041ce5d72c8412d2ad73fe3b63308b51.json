{"sha": "5987c7d4041ce5d72c8412d2ad73fe3b63308b51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ODdjN2Q0MDQxY2U1ZDcyYzg0MTJkMmFkNzNmZTNiNjMzMDhiNTE=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-09T20:40:43Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-23T20:14:45Z"}, "message": "cmp_owned: avoid FP when PartialEq is not implemented symmetrically", "tree": {"sha": "433da7517d82879c8b31e113877ed0fa6709b8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/433da7517d82879c8b31e113877ed0fa6709b8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5987c7d4041ce5d72c8412d2ad73fe3b63308b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5987c7d4041ce5d72c8412d2ad73fe3b63308b51", "html_url": "https://github.com/rust-lang/rust/commit/5987c7d4041ce5d72c8412d2ad73fe3b63308b51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5987c7d4041ce5d72c8412d2ad73fe3b63308b51/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "583d64493484f72425ecac55eaf5eddbba10b132", "url": "https://api.github.com/repos/rust-lang/rust/commits/583d64493484f72425ecac55eaf5eddbba10b132", "html_url": "https://github.com/rust-lang/rust/commit/583d64493484f72425ecac55eaf5eddbba10b132"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "1b65a01690d6042a4d4ffe3b49e8eac1d6f452c3", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5987c7d4041ce5d72c8412d2ad73fe3b63308b51/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987c7d4041ce5d72c8412d2ad73fe3b63308b51/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5987c7d4041ce5d72c8412d2ad73fe3b63308b51", "patch": "@@ -3,11 +3,11 @@ use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    def, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind, Stmt, StmtKind, Ty,\n-    TyKind, UnOp,\n+    self as hir, def, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnDecl, HirId, Mutability, PatKind, Stmt,\n+    StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{ExpnKind, Span};\n@@ -571,6 +571,15 @@ fn is_array(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n }\n \n fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr<'_>, other: &Expr<'_>) {\n+    fn symmetric_partial_eq<'tcx>(cx: &LateContext<'_, 'tcx>, lhs: Ty<'tcx>, rhs: Ty<'tcx>) -> bool {\n+        if let Some(trait_def_id) = cx.tcx.lang_items().eq_trait() {\n+            return implements_trait(cx, lhs, trait_def_id, &[rhs.into()])\n+                && implements_trait(cx, rhs, trait_def_id, &[lhs.into()]);\n+        }\n+\n+        false\n+    }\n+\n     let (arg_ty, snip) = match expr.kind {\n         ExprKind::MethodCall(.., ref args, _) if args.len() == 1 => {\n             if match_trait_method(cx, expr, &paths::TO_STRING) || match_trait_method(cx, expr, &paths::TO_OWNED) {\n@@ -594,18 +603,14 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr<'_>, other: &Expr<'_>) {\n     };\n \n     let other_ty = cx.tables.expr_ty_adjusted(other);\n-    let partial_eq_trait_id = match cx.tcx.lang_items().eq_trait() {\n-        Some(id) => id,\n-        None => return,\n-    };\n \n-    let deref_arg_impl_partial_eq_other = arg_ty.builtin_deref(true).map_or(false, |tam| {\n-        implements_trait(cx, tam.ty, partial_eq_trait_id, &[other_ty.into()])\n-    });\n-    let arg_impl_partial_eq_deref_other = other_ty.builtin_deref(true).map_or(false, |tam| {\n-        implements_trait(cx, arg_ty, partial_eq_trait_id, &[tam.ty.into()])\n-    });\n-    let arg_impl_partial_eq_other = implements_trait(cx, arg_ty, partial_eq_trait_id, &[other_ty.into()]);\n+    let deref_arg_impl_partial_eq_other = arg_ty\n+        .builtin_deref(true)\n+        .map_or(false, |tam| symmetric_partial_eq(cx, tam.ty, other_ty));\n+    let arg_impl_partial_eq_deref_other = other_ty\n+        .builtin_deref(true)\n+        .map_or(false, |tam| symmetric_partial_eq(cx, arg_ty, tam.ty));\n+    let arg_impl_partial_eq_other = symmetric_partial_eq(cx, arg_ty, other_ty);\n \n     if !deref_arg_impl_partial_eq_other && !arg_impl_partial_eq_deref_other && !arg_impl_partial_eq_other {\n         return;\n@@ -694,7 +699,7 @@ fn non_macro_local(cx: &LateContext<'_, '_>, res: def::Res) -> bool {\n     }\n }\n \n-fn check_cast(cx: &LateContext<'_, '_>, span: Span, e: &Expr<'_>, ty: &Ty<'_>) {\n+fn check_cast(cx: &LateContext<'_, '_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>) {\n     if_chain! {\n         if let TyKind::Ptr(ref mut_ty) = ty.kind;\n         if let ExprKind::Lit(ref lit) = e.kind;"}, {"sha": "b29c555eb1e2f1b09f5cb4e3e34ffe15460659bb", "filename": "tests/ui/cmp_owned/issue_4874.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5987c7d4041ce5d72c8412d2ad73fe3b63308b51/tests%2Fui%2Fcmp_owned%2Fissue_4874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5987c7d4041ce5d72c8412d2ad73fe3b63308b51/tests%2Fui%2Fcmp_owned%2Fissue_4874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fissue_4874.rs?ref=5987c7d4041ce5d72c8412d2ad73fe3b63308b51", "patch": "@@ -0,0 +1,51 @@\n+#![allow(clippy::redundant_clone)] // See #5700\n+\n+#[derive(PartialEq)]\n+struct Foo;\n+\n+struct Bar;\n+\n+impl std::fmt::Display for Bar {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(f, \"bar\")\n+    }\n+}\n+\n+// NOTE: PartialEq<Bar> for T can't be implemented due to the orphan rules\n+impl<T> PartialEq<T> for Bar\n+where\n+    T: AsRef<str> + ?Sized,\n+{\n+    fn eq(&self, _: &T) -> bool {\n+        true\n+    }\n+}\n+\n+// NOTE: PartialEq<Bar> for Foo is not implemented\n+impl PartialEq<Foo> for Bar {\n+    fn eq(&self, _: &Foo) -> bool {\n+        true\n+    }\n+}\n+\n+impl ToOwned for Bar {\n+    type Owned = Foo;\n+    fn to_owned(&self) -> Foo {\n+        Foo\n+    }\n+}\n+\n+impl std::borrow::Borrow<Bar> for Foo {\n+    fn borrow(&self) -> &Bar {\n+        static BAR: Bar = Bar;\n+        &BAR\n+    }\n+}\n+\n+fn main() {\n+    let b = Bar {};\n+    if \"Hi\" == b.to_string() {}\n+\n+    let f = Foo {};\n+    if f == b.to_owned() {}\n+}"}]}