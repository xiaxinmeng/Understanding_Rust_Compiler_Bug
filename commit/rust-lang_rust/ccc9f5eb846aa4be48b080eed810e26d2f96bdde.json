{"sha": "ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYzlmNWViODQ2YWE0YmU0OGIwODBlZWQ4MTBlMjZkMmY5NmJkZGU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-08T16:37:47Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-21T16:09:46Z"}, "message": "Tests for shadowing between lifetimes and loop labels within function bodies.", "tree": {"sha": "9c38e31ce354f26f619f0e8a8c1fe19032a196f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c38e31ce354f26f619f0e8a8c1fe19032a196f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "html_url": "https://github.com/rust-lang/rust/commit/ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd240707999216a64e7914c2290cb59c54d9c60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd240707999216a64e7914c2290cb59c54d9c60c", "html_url": "https://github.com/rust-lang/rust/commit/dd240707999216a64e7914c2290cb59c54d9c60c"}], "stats": {"total": 278, "additions": 275, "deletions": 3}, "files": [{"sha": "f0792c145d2a20ff4850aece15fe3602eafc547d", "filename": "src/test/compile-fail/loop-labeled-break-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floop-labeled-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floop-labeled-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-labeled-break-value.rs?ref=ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "patch": "@@ -16,6 +16,6 @@ fn main() {\n         let _: i32 = 'inner: loop { break 'inner }; //~ ERROR mismatched types\n     }\n     loop {\n-        let _: i32 = 'inner: loop { loop { break 'inner } }; //~ ERROR mismatched types\n+        let _: i32 = 'inner2: loop { loop { break 'inner2 } }; //~ ERROR mismatched types\n     }\n }"}, {"sha": "68627ecaa718f3485dcde3893ed6a313840aadb2", "filename": "src/test/compile-fail/loops-reject-duplicate-labels-2.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels-2.rs?ref=ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+// ignore-tidy-linelength\n+\n+// Issue #21633: reject duplicate loop labels in function bodies.\n+//\n+// This is testing the generalization (to the whole function body)\n+// discussed here:\n+// http://internals.rust-lang.org/t/psa-rejecting-duplicate-loop-labels/1833\n+\n+pub fn foo() {\n+    { 'fl: for _ in 0..10 { break; } }   //~ NOTE shadowed label `'fl` declared here\n+    { 'fl: loop { break; } }             //~ WARN label name `'fl` shadows a label name that is already in scope\n+\n+    { 'lf: loop { break; } }             //~ NOTE shadowed label `'lf` declared here\n+    { 'lf: for _ in 0..10 { break; } }   //~ WARN label name `'lf` shadows a label name that is already in scope\n+\n+    { 'wl: while 2 > 1 { break; } }      //~ NOTE shadowed label `'wl` declared here\n+    { 'wl: loop { break; } }             //~ WARN label name `'wl` shadows a label name that is already in scope\n+\n+    { 'lw: loop { break; } }             //~ NOTE shadowed label `'lw` declared here\n+    { 'lw: while 2 > 1 { break; } }      //~ WARN label name `'lw` shadows a label name that is already in scope\n+\n+    { 'fw: for _ in 0..10 { break; } }   //~ NOTE shadowed label `'fw` declared here\n+    { 'fw: while 2 > 1 { break; } }      //~ WARN label name `'fw` shadows a label name that is already in scope\n+\n+    { 'wf: while 2 > 1 { break; } }      //~ NOTE shadowed label `'wf` declared here\n+    { 'wf: for _ in 0..10 { break; } }   //~ WARN label name `'wf` shadows a label name that is already in scope\n+\n+    { 'tl: while let Some(_) = None::<i32> { break; } } //~ NOTE shadowed label `'tl` declared here\n+    { 'tl: loop { break; } }             //~ WARN label name `'tl` shadows a label name that is already in scope\n+\n+    { 'lt: loop { break; } }             //~ NOTE shadowed label `'lt` declared here\n+    { 'lt: while let Some(_) = None::<i32> { break; } }\n+                                        //~^ WARN label name `'lt` shadows a label name that is already in scope\n+}\n+\n+#[rustc_error]\n+pub fn main() { //~ ERROR compilation successful\n+    foo();\n+}"}, {"sha": "15446bf642d4d52fd14611c836dc2f1ac5b29f6e", "filename": "src/test/compile-fail/loops-reject-duplicate-labels.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-duplicate-labels.rs?ref=ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+// ignore-tidy-linelength\n+\n+// Issue #21633: reject duplicate loop labels in function bodies.\n+// This is testing the exact cases that are in the issue description.\n+\n+fn foo() {\n+    'fl: for _ in 0..10 { break; } //~ NOTE shadowed label `'fl` declared here\n+    'fl: loop { break; }           //~ WARN label name `'fl` shadows a label name that is already in scope\n+\n+    'lf: loop { break; }           //~ NOTE shadowed label `'lf` declared here\n+    'lf: for _ in 0..10 { break; } //~ WARN label name `'lf` shadows a label name that is already in scope\n+\n+    'wl: while 2 > 1 { break; }    //~ NOTE shadowed label `'wl` declared here\n+    'wl: loop { break; }           //~ WARN label name `'wl` shadows a label name that is already in scope\n+\n+    'lw: loop { break; }           //~ NOTE shadowed label `'lw` declared here\n+    'lw: while 2 > 1 { break; }    //~ WARN label name `'lw` shadows a label name that is already in scope\n+\n+    'fw: for _ in 0..10 { break; } //~ NOTE shadowed label `'fw` declared here\n+    'fw: while 2 > 1 { break; }    //~ WARN label name `'fw` shadows a label name that is already in scope\n+\n+    'wf: while 2 > 1 { break; }    //~ NOTE shadowed label `'wf` declared here\n+    'wf: for _ in 0..10 { break; } //~ WARN label name `'wf` shadows a label name that is already in scope\n+\n+    'tl: while let Some(_) = None::<i32> { break; } //~ NOTE shadowed label `'tl` declared here\n+    'tl: loop { break; }           //~ WARN label name `'tl` shadows a label name that is already in scope\n+\n+    'lt: loop { break; }           //~ NOTE shadowed label `'lt` declared here\n+    'lt: while let Some(_) = None::<i32> { break; }\n+                                  //~^ WARN label name `'lt` shadows a label name that is already in scope\n+}\n+\n+// Note however that it is okay for the same label to be reused in\n+// different methods of one impl, as illustrated here.\n+\n+struct S;\n+impl S {\n+    fn m1(&self) { 'okay: loop { break 'okay; } }\n+    fn m2(&self) { 'okay: loop { break 'okay; } }\n+}\n+\n+#[rustc_error]\n+pub fn main() { //~ ERROR compilation successful\n+    let s = S;\n+    s.m1();\n+    s.m2();\n+    foo();\n+}"}, {"sha": "bbdd0774ed936d7337533045b4e59cfa8118f3af", "filename": "src/test/compile-fail/loops-reject-labels-shadowing-lifetimes.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-labels-shadowing-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-labels-shadowing-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-labels-shadowing-lifetimes.rs?ref=ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "patch": "@@ -0,0 +1,120 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #21633: reject duplicate loop labels in function bodies.\n+// This is testing interaction between lifetime-params and labels.\n+\n+#![feature(rustc_attrs)]\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn foo() {\n+    fn foo<'a>() { //~ NOTE shadowed lifetime `'a` declared here\n+        'a: loop { break 'a; }\n+        //~^ WARN label name `'a` shadows a lifetime name that is already in scope\n+    }\n+\n+    struct Struct<'b, 'c> { _f: &'b i8, _g: &'c i8 }\n+    enum Enum<'d, 'e> { A(&'d i8), B(&'e i8) }\n+\n+    impl<'d, 'e> Struct<'d, 'e> {\n+        fn meth_okay() {\n+            'a: loop { break 'a; }\n+            'b: loop { break 'b; }\n+            'c: loop { break 'c; }\n+        }\n+    }\n+\n+    impl <'d, 'e> Enum<'d, 'e> {\n+        fn meth_okay() {\n+            'a: loop { break 'a; }\n+            'b: loop { break 'b; }\n+            'c: loop { break 'c; }\n+        }\n+    }\n+\n+    impl<'bad, 'c> Struct<'bad, 'c> { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad(&self) {\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+\n+    impl<'b, 'bad> Struct<'b, 'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad2(&self) {\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+\n+    impl<'b, 'c> Struct<'b, 'c> {\n+        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE shadowed lifetime `'bad` declared here\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+\n+        fn meth_bad4<'a,'bad>(x: &'a i8, y: &'bad i8) {\n+            //~^ NOTE shadowed lifetime `'bad` declared here\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+\n+    impl <'bad, 'e> Enum<'bad, 'e> { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad(&self) {\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+    impl <'d, 'bad> Enum<'d, 'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad2(&self) {\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+    impl <'d, 'e> Enum<'d, 'e> {\n+        fn meth_bad3<'bad>(x: &'bad i8) { //~ NOTE shadowed lifetime `'bad` declared here\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+\n+        fn meth_bad4<'a,'bad>(x: &'bad i8) { //~ NOTE shadowed lifetime `'bad` declared here\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+\n+    trait HasDefaultMethod1<'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_okay() {\n+            'c: loop { break 'c; }\n+        }\n+        fn meth_bad(&self) {\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+    trait HasDefaultMethod2<'a,'bad> { //~ NOTE shadowed lifetime `'bad` declared here\n+        fn meth_bad(&self) {\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+    trait HasDefaultMethod3<'a,'b> {\n+        fn meth_bad<'bad>(&self) { //~ NOTE shadowed lifetime `'bad` declared here\n+            'bad: loop { break 'bad; }\n+            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n+        }\n+    }\n+}\n+\n+#[rustc_error]\n+pub fn main() { //~ ERROR compilation successful\n+    foo();\n+}"}, {"sha": "2344d251c9a69ddd8bd8176026b2fb3d36c6a362", "filename": "src/test/compile-fail/loops-reject-lifetime-shadowing-label.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-lifetime-shadowing-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Floops-reject-lifetime-shadowing-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floops-reject-lifetime-shadowing-label.rs?ref=ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+#![allow(dead_code, unused_variables)]\n+\n+// Issue #21633:  reject duplicate loop labels in function bodies.\n+//\n+// Test rejection of lifetimes in *expressions* that shadow loop labels.\n+\n+fn foo() {\n+    // Reusing lifetime `'a` in function item is okay.\n+    fn foo<'a>(x: &'a i8) -> i8 { *x }\n+\n+    // So is reusing `'a` in struct item\n+    struct S1<'a> { x: &'a i8 } impl<'a> S1<'a> { fn m(&self) {} }\n+    // and a method item\n+    struct S2; impl S2 { fn m<'a>(&self) {} }\n+\n+    let z = 3_i8;\n+\n+    'a: loop { //~ NOTE shadowed label `'a` declared here\n+        let b = Box::new(|x: &i8| *x) as Box<for <'a> Fn(&'a i8) -> i8>;\n+        //~^ WARN lifetime name `'a` shadows a label name that is already in scope\n+        assert_eq!((*b)(&z), z);\n+        break 'a;\n+    }\n+}\n+\n+#[rustc_error]\n+pub fn main() { //~ ERROR compilation successful\n+    foo();\n+}"}, {"sha": "8cbab5f8308098d149bbce068fe189bee1f8b88e", "filename": "src/test/compile-fail/shadowed-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc9f5eb846aa4be48b080eed810e26d2f96bdde/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs?ref=ccc9f5eb846aa4be48b080eed810e26d2f96bdde", "patch": "@@ -15,14 +15,14 @@ struct Foo<'a>(&'a isize);\n impl<'a> Foo<'a> {\n     //~^ NOTE shadowed lifetime `'a` declared here\n     fn shadow_in_method<'a>(&'a self) -> &'a isize {\n-        //~^ ERROR lifetime name `'a` shadows another lifetime name that is already in scope\n+        //~^ ERROR lifetime name `'a` shadows a lifetime name that is already in scope\n         self.0\n     }\n \n     fn shadow_in_type<'b>(&'b self) -> &'b isize {\n         //~^ NOTE shadowed lifetime `'b` declared here\n         let x: for<'b> fn(&'b isize) = panic!();\n-        //~^ ERROR lifetime name `'b` shadows another lifetime name that is already in scope\n+        //~^ ERROR lifetime name `'b` shadows a lifetime name that is already in scope\n         self.0\n     }\n "}]}