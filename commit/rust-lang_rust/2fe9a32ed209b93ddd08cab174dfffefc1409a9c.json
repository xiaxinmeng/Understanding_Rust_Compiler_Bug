{"sha": "2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "node_id": "C_kwDOAAsO6NoAKDJmZTlhMzJlZDIwOWI5M2RkZDA4Y2FiMTc0ZGZmZmVmYzE0MDlhOWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-04T17:42:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-04T17:42:13Z"}, "message": "Rollup merge of #90132 - joshtriplett:stabilize-instrument-coverage, r=wesleywiser\n\nStabilize `-Z instrument-coverage` as `-C instrument-coverage`\n\n(Tracking issue for `instrument-coverage`: https://github.com/rust-lang/rust/issues/79121)\n\nThis PR stabilizes support for instrumentation-based code coverage, previously provided via the `-Z instrument-coverage` option. (Continue supporting `-Z instrument-coverage` for compatibility for now, but show a deprecation warning for it.)\n\nMany, many people have tested this support, and there are numerous reports of it working as expected.\n\nMove the documentation from the unstable book to stable rustc documentation. Update uses and documentation to use the `-C` option.\n\nAddressing questions raised in the tracking issue:\n\n> If/when stabilized, will the compiler flag be updated to -C instrument-coverage? (If so, the -Z variant could also be supported for some time, to ease migrations for existing users and scripts.)\n\nThis stabilization PR updates the option to `-C` and keeps the `-Z` variant to ease migration.\n\n> The Rust coverage implementation depends on (and automatically turns on) -Z symbol-mangling-version=v0. Will stabilizing this feature depend on stabilizing v0 symbol-mangling first? If so, what is the current status and timeline?\n\nThis stabilization PR depends on https://github.com/rust-lang/rust/pull/90128 , which stabilizes `-C symbol-mangling-version=v0` (but does not change the default symbol-mangling-version).\n\n> The Rust coverage implementation implements the latest version of LLVM's Coverage Mapping Format (version 4), which forces a dependency on LLVM 11 or later. A compiler error is generated if attempting to compile with coverage, and using an older version of LLVM.\n\nGiven that LLVM 13 has now been released, requiring LLVM 11 for coverage support seems like a reasonable requirement. If people don't have at least LLVM 11, nothing else breaks; they just can't use coverage support. Given that coverage support currently requires a nightly compiler and LLVM 11 or newer, allowing it on a stable compiler built with LLVM 11 or newer seems like an improvement.\n\nThe [tracking issue](https://github.com/rust-lang/rust/issues/79121) and the [issue label A-code-coverage](https://github.com/rust-lang/rust/labels/A-code-coverage) link to a few open issues related to `instrument-coverage`, but none of them seem like showstoppers. All of them seem like improvements and refinements we can make after stabilization.\n\nThe original `-Z instrument-coverage` support went through a compiler-team MCP at https://github.com/rust-lang/compiler-team/issues/278 . Based on that, `@pnkfelix` suggested that this needed a stabilization PR and a compiler-team FCP.", "tree": {"sha": "a7fc0622808fb70456c12277e3c236972453cf5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7fc0622808fb70456c12277e3c236972453cf5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/WV1CRBK7hj4Ov3rIwAABvIIAEjmuOTgIQc4qImkNs6v4Qsa\nvBcj1CLFFSHPBaX20d9i/yU68V5PUxB5ClTEat2UDNsyuUu1VS2oKRqT+pJzmGOU\nVGk2rcAKq0LqAEiXohWJ6O7enGbtHs1twt3LAlUInc4iSMyVjjiRewsG7q86jts+\nF7SGxKNHHhcETFzdvWI/pFGJGLupbNV3Gm/nE0k00qmlUn3hdlZ7r1AEIW3BsldU\nZwYu9KVBnw/P1l8Bu7cmwVzniGrjDbXvKserwWK3WrFEPjW6CUe/kiQ0FhDDUYdr\nk/BijkdVLAhzNXO8J9Nw2xtIhcGuNc5acCK3x61IqvLFwws7E1T6BHfsvKQOXos=\n=XwDi\n-----END PGP SIGNATURE-----\n", "payload": "tree a7fc0622808fb70456c12277e3c236972453cf5f\nparent cb18e83e8512be69b26fcb67ae66d81e5b7a4383\nparent 3187f4136a82e51d524c55a29489c48d6d78b606\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643996533 +0100\ncommitter GitHub <noreply@github.com> 1643996533 +0100\n\nRollup merge of #90132 - joshtriplett:stabilize-instrument-coverage, r=wesleywiser\n\nStabilize `-Z instrument-coverage` as `-C instrument-coverage`\n\n(Tracking issue for `instrument-coverage`: https://github.com/rust-lang/rust/issues/79121)\n\nThis PR stabilizes support for instrumentation-based code coverage, previously provided via the `-Z instrument-coverage` option. (Continue supporting `-Z instrument-coverage` for compatibility for now, but show a deprecation warning for it.)\n\nMany, many people have tested this support, and there are numerous reports of it working as expected.\n\nMove the documentation from the unstable book to stable rustc documentation. Update uses and documentation to use the `-C` option.\n\nAddressing questions raised in the tracking issue:\n\n> If/when stabilized, will the compiler flag be updated to -C instrument-coverage? (If so, the -Z variant could also be supported for some time, to ease migrations for existing users and scripts.)\n\nThis stabilization PR updates the option to `-C` and keeps the `-Z` variant to ease migration.\n\n> The Rust coverage implementation depends on (and automatically turns on) -Z symbol-mangling-version=v0. Will stabilizing this feature depend on stabilizing v0 symbol-mangling first? If so, what is the current status and timeline?\n\nThis stabilization PR depends on https://github.com/rust-lang/rust/pull/90128 , which stabilizes `-C symbol-mangling-version=v0` (but does not change the default symbol-mangling-version).\n\n> The Rust coverage implementation implements the latest version of LLVM's Coverage Mapping Format (version 4), which forces a dependency on LLVM 11 or later. A compiler error is generated if attempting to compile with coverage, and using an older version of LLVM.\n\nGiven that LLVM 13 has now been released, requiring LLVM 11 for coverage support seems like a reasonable requirement. If people don't have at least LLVM 11, nothing else breaks; they just can't use coverage support. Given that coverage support currently requires a nightly compiler and LLVM 11 or newer, allowing it on a stable compiler built with LLVM 11 or newer seems like an improvement.\n\nThe [tracking issue](https://github.com/rust-lang/rust/issues/79121) and the [issue label A-code-coverage](https://github.com/rust-lang/rust/labels/A-code-coverage) link to a few open issues related to `instrument-coverage`, but none of them seem like showstoppers. All of them seem like improvements and refinements we can make after stabilization.\n\nThe original `-Z instrument-coverage` support went through a compiler-team MCP at https://github.com/rust-lang/compiler-team/issues/278 . Based on that, `@pnkfelix` suggested that this needed a stabilization PR and a compiler-team FCP.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "html_url": "https://github.com/rust-lang/rust/commit/2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "html_url": "https://github.com/rust-lang/rust/commit/cb18e83e8512be69b26fcb67ae66d81e5b7a4383"}, {"sha": "3187f4136a82e51d524c55a29489c48d6d78b606", "url": "https://api.github.com/repos/rust-lang/rust/commits/3187f4136a82e51d524c55a29489c48d6d78b606", "html_url": "https://github.com/rust-lang/rust/commit/3187f4136a82e51d524c55a29489c48d6d78b606"}], "stats": {"total": 240, "additions": 132, "deletions": 108}, "files": [{"sha": "58f391692c49c109bb59b7011109403a09625943", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -39,7 +39,7 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     // LLVM 12.\n     let version = coverageinfo::mapping_version();\n     if version < 4 {\n-        tcx.sess.fatal(\"rustc option `-Z instrument-coverage` requires LLVM 12 or higher.\");\n+        tcx.sess.fatal(\"rustc option `-C instrument-coverage` requires LLVM 12 or higher.\");\n     }\n \n     debug!(\"Generating coverage map for CodegenUnit: `{}`\", cx.codegen_unit.name());\n@@ -274,7 +274,7 @@ fn save_function_record(\n /// (functions referenced by other \"used\" or public items). Any other functions considered unused,\n /// or \"Unreachable\", were still parsed and processed through the MIR stage, but were not\n /// codegenned. (Note that `-Clink-dead-code` can force some unused code to be codegenned, but\n-/// that flag is known to cause other errors, when combined with `-Z instrument-coverage`; and\n+/// that flag is known to cause other errors, when combined with `-C instrument-coverage`; and\n /// `-Clink-dead-code` will not generate code for unused generic functions.)\n ///\n /// We can find the unused functions (including generic functions) by the set difference of all MIR"}, {"sha": "e77201cf0c800a144b0853b2010184f5533b48c9", "filename": "compiler/rustc_codegen_ssa/src/traits/coverageinfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -22,15 +22,15 @@ pub trait CoverageInfoMethods<'tcx>: BackendTypes {\n \n pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n     /// Returns true if the function source hash was added to the coverage map (even if it had\n-    /// already been added, for this instance). Returns false *only* if `-Z instrument-coverage` is\n+    /// already been added, for this instance). Returns false *only* if `-C instrument-coverage` is\n     /// not enabled (a coverage map is not being generated).\n     fn set_function_source_hash(\n         &mut self,\n         instance: Instance<'tcx>,\n         function_source_hash: u64,\n     ) -> bool;\n \n-    /// Returns true if the counter was added to the coverage map; false if `-Z instrument-coverage`\n+    /// Returns true if the counter was added to the coverage map; false if `-C instrument-coverage`\n     /// is not enabled (a coverage map is not being generated).\n     fn add_coverage_counter(\n         &mut self,\n@@ -40,7 +40,7 @@ pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n     ) -> bool;\n \n     /// Returns true if the expression was added to the coverage map; false if\n-    /// `-Z instrument-coverage` is not enabled (a coverage map is not being generated).\n+    /// `-C instrument-coverage` is not enabled (a coverage map is not being generated).\n     fn add_coverage_counter_expression(\n         &mut self,\n         instance: Instance<'tcx>,\n@@ -51,7 +51,7 @@ pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n         region: Option<CodeRegion>,\n     ) -> bool;\n \n-    /// Returns true if the region was added to the coverage map; false if `-Z instrument-coverage`\n+    /// Returns true if the region was added to the coverage map; false if `-C instrument-coverage`\n     /// is not enabled (a coverage map is not being generated).\n     fn add_coverage_unreachable(&mut self, instance: Instance<'tcx>, region: CodeRegion) -> bool;\n }"}, {"sha": "5e288187756359260e4facac9f48fca7bf1a34ae", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -575,6 +575,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(force_frame_pointers, Some(false));\n     tracked!(force_unwind_tables, Some(true));\n     tracked!(inline_threshold, Some(0xf007ba11));\n+    tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n     tracked!(link_dead_code, Some(true));\n     tracked!(llvm_args, vec![String::from(\"1\"), String::from(\"2\")]);"}, {"sha": "33fb1e570b1c0cb85e588267c49acc53d74f28a1", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -1577,7 +1577,7 @@ pub enum StatementKind<'tcx> {\n     /// - `Bivariant` -- no effect\n     AscribeUserType(Box<(Place<'tcx>, UserTypeProjection)>, ty::Variance),\n \n-    /// Marks the start of a \"coverage region\", injected with '-Zinstrument-coverage'. A\n+    /// Marks the start of a \"coverage region\", injected with '-Cinstrument-coverage'. A\n     /// `Coverage` statement carries metadata about the coverage region, used to inject a coverage\n     /// map into the binary. If `Coverage::kind` is a `Counter`, the statement also generates\n     /// executable code, to increment a counter variable at runtime, each time the code region is"}, {"sha": "4b8eb3fbd96075193bbda54bf49245f041b5ce5b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -390,7 +390,7 @@ pub struct DestructuredConst<'tcx> {\n }\n \n /// Coverage information summarized from a MIR if instrumented for source code coverage (see\n-/// compiler option `-Zinstrument-coverage`). This information is generated by the\n+/// compiler option `-Cinstrument-coverage`). This information is generated by the\n /// `InstrumentCoverage` MIR pass and can be retrieved via the `coverageinfo` query.\n #[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable)]\n pub struct CoverageInfo {"}, {"sha": "e0448c3fe1c43f98410bd3e248ad80ee6b365523", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -384,7 +384,7 @@ rustc_queries! {\n     }\n \n     /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n-    /// MIR pass (assuming the -Zinstrument-coverage option is enabled).\n+    /// MIR pass (assuming the -Cinstrument-coverage option is enabled).\n     query coverageinfo(key: ty::InstanceDef<'tcx>) -> mir::CoverageInfo {\n         desc { |tcx| \"retrieving coverage info from MIR for `{}`\", tcx.def_path_str(key.def_id()) }\n         storage(ArenaCacheSelector<'tcx>)"}, {"sha": "62e060c8e0c6c547cbca88dbbc47961e63840a63", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -3,7 +3,7 @@\n //!\n //! To enable coverage, include the rustc command line option:\n //!\n-//!   * `-Z instrument-coverage`\n+//!   * `-C instrument-coverage`\n //!\n //! MIR Dump Files, with additional `CoverageGraph` graphviz and `CoverageSpan` spanview\n //! ------------------------------------------------------------------------------------"}, {"sha": "4651e1f4ed059de70a5c4977bcd610972f7fefdf", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -303,7 +303,7 @@ pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n /// evaluation: `if false { ... }`.\n ///\n /// Those statements are bypassed by redirecting paths in the CFG around the\n-/// `dead blocks`; but with `-Z instrument-coverage`, the dead blocks usually\n+/// `dead blocks`; but with `-C instrument-coverage`, the dead blocks usually\n /// include `Coverage` statements representing the Rust source code regions to\n /// be counted at runtime. Without these `Coverage` statements, the regions are\n /// lost, and the Rust source code will show no coverage information."}, {"sha": "8630ffec241f947199a4ae56131823180174bc2f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -127,16 +127,16 @@ pub enum MirSpanview {\n     Block,\n }\n \n-/// The different settings that the `-Z instrument-coverage` flag can have.\n+/// The different settings that the `-C instrument-coverage` flag can have.\n ///\n-/// Coverage instrumentation now supports combining `-Z instrument-coverage`\n+/// Coverage instrumentation now supports combining `-C instrument-coverage`\n /// with compiler and linker optimization (enabled with `-O` or `-C opt-level=1`\n /// and higher). Nevertheless, there are many variables, depending on options\n /// selected, code structure, and enabled attributes. If errors are encountered,\n /// either while compiling or when generating `llvm-cov show` reports, consider\n /// lowering the optimization level, including or excluding `-C link-dead-code`,\n-/// or using `-Z instrument-coverage=except-unused-functions` or `-Z\n-/// instrument-coverage=except-unused-generics`.\n+/// or using `-Zunstable-options -C instrument-coverage=except-unused-functions`\n+/// or `-Zunstable-options -C instrument-coverage=except-unused-generics`.\n ///\n /// Note that `ExceptUnusedFunctions` means: When `mapgen.rs` generates the\n /// coverage map, it will not attempt to generate synthetic functions for unused\n@@ -148,13 +148,13 @@ pub enum MirSpanview {\n /// unless the function has type parameters.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]\n pub enum InstrumentCoverage {\n-    /// Default `-Z instrument-coverage` or `-Z instrument-coverage=statement`\n+    /// Default `-C instrument-coverage` or `-C instrument-coverage=statement`\n     All,\n-    /// `-Z instrument-coverage=except-unused-generics`\n+    /// `-Zunstable-options -C instrument-coverage=except-unused-generics`\n     ExceptUnusedGenerics,\n-    /// `-Z instrument-coverage=except-unused-functions`\n+    /// `-Zunstable-options -C instrument-coverage=except-unused-functions`\n     ExceptUnusedFunctions,\n-    /// `-Z instrument-coverage=off` (or `no`, etc.)\n+    /// `-C instrument-coverage=off` (or `no`, etc.)\n     Off,\n }\n \n@@ -2195,18 +2195,44 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         _ => {}\n     }\n \n-    if debugging_opts.instrument_coverage.is_some()\n-        && debugging_opts.instrument_coverage != Some(InstrumentCoverage::Off)\n-    {\n+    // Handle both `-Z instrument-coverage` and `-C instrument-coverage`; the latter takes\n+    // precedence.\n+    match (cg.instrument_coverage, debugging_opts.instrument_coverage) {\n+        (Some(ic_c), Some(ic_z)) if ic_c != ic_z => {\n+            early_error(\n+                error_format,\n+                \"incompatible values passed for `-C instrument-coverage` \\\n+                and `-Z instrument-coverage`\",\n+            );\n+        }\n+        (Some(InstrumentCoverage::Off | InstrumentCoverage::All), _) => {}\n+        (Some(_), _) if !debugging_opts.unstable_options => {\n+            early_error(\n+                error_format,\n+                \"`-C instrument-coverage=except-*` requires `-Z unstable-options`\",\n+            );\n+        }\n+        (None, None) => {}\n+        (None, ic) => {\n+            early_warn(\n+                error_format,\n+                \"`-Z instrument-coverage` is deprecated; use `-C instrument-coverage`\",\n+            );\n+            cg.instrument_coverage = ic;\n+        }\n+        _ => {}\n+    }\n+\n+    if cg.instrument_coverage.is_some() && cg.instrument_coverage != Some(InstrumentCoverage::Off) {\n         if cg.profile_generate.enabled() || cg.profile_use.is_some() {\n             early_error(\n                 error_format,\n-                \"option `-Z instrument-coverage` is not compatible with either `-C profile-use` \\\n+                \"option `-C instrument-coverage` is not compatible with either `-C profile-use` \\\n                 or `-C profile-generate`\",\n             );\n         }\n \n-        // `-Z instrument-coverage` implies `-C symbol-mangling-version=v0` - to ensure consistent\n+        // `-C instrument-coverage` implies `-C symbol-mangling-version=v0` - to ensure consistent\n         // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n         // multiple runs, including some changes to source code; so mangled names must be consistent\n         // across compilations.\n@@ -2215,7 +2241,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(SymbolManglingVersion::Legacy) => {\n                 early_warn(\n                     error_format,\n-                    \"-Z instrument-coverage requires symbol mangling version `v0`, \\\n+                    \"-C instrument-coverage requires symbol mangling version `v0`, \\\n                     but `-C symbol-mangling-version=legacy` was specified\",\n                 );\n             }"}, {"sha": "90eba3d688e437f82a7deb1be5ba9658640c51a1", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -109,17 +109,16 @@ impl Options {\n     }\n \n     pub fn instrument_coverage(&self) -> bool {\n-        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n-            != InstrumentCoverage::Off\n+        self.cg.instrument_coverage.unwrap_or(InstrumentCoverage::Off) != InstrumentCoverage::Off\n     }\n \n     pub fn instrument_coverage_except_unused_generics(&self) -> bool {\n-        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n+        self.cg.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n             == InstrumentCoverage::ExceptUnusedGenerics\n     }\n \n     pub fn instrument_coverage_except_unused_functions(&self) -> bool {\n-        self.debugging_opts.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n+        self.cg.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n             == InstrumentCoverage::ExceptUnusedFunctions\n     }\n }\n@@ -1031,6 +1030,14 @@ options! {\n         \"enable incremental compilation\"),\n     inline_threshold: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"set the threshold for inlining a function\"),\n+    instrument_coverage: Option<InstrumentCoverage> = (None, parse_instrument_coverage, [TRACKED],\n+        \"instrument the generated code to support LLVM source-based code coverage \\\n+        reports (note, the compiler build config must include `profiler = true`); \\\n+        implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\"),\n     link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n     link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],"}, {"sha": "98688ca65b7e29d28db104da044bcd5b37858214", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -289,7 +289,7 @@ changelog-seen = 2\n #sanitizers = false\n \n # Build the profiler runtime (required when compiling with options that depend\n-# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n+# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n #profiler = false\n \n # Indicates whether the native libraries linked into Cargo will be statically\n@@ -671,7 +671,7 @@ changelog-seen = 2\n #sanitizers = build.sanitizers (bool)\n \n # Build the profiler runtime for this target(required when compiling with options that depend\n-# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n+# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n # This option will override the same option under [build] section.\n #profiler = build.profiler (bool)\n "}, {"sha": "2fc94005b80f840d5687f6b667de7082d9c449d2", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -26,6 +26,7 @@\n     - [Custom Targets](targets/custom.md)\n     - [Known Issues](targets/known-issues.md)\n - [Profile-guided Optimization](profile-guided-optimization.md)\n+- [Instrumentation-based Code Coverage](instrument-coverage.md)\n - [Linker-plugin based LTO](linker-plugin-lto.md)\n - [Exploit Mitigations](exploit-mitigations.md)\n - [Contributing to `rustc`](contributing.md)"}, {"sha": "3b0cf92bbb763d1450443947a5792ea71b83f02e", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -177,6 +177,15 @@ The default depends on the [opt-level](#opt-level):\n | s         | 75 |\n | z         | 25 |\n \n+## instrument-coverage\n+\n+This option enables instrumentation-based code coverage support. See the\n+chapter on [instrumentation-based code coverage] for more information.\n+\n+Note that while the `-C instrument-coverage` option is stable, the profile data\n+format produced by the resulting instrumentation may change, and may not work\n+with coverage tools other than those built and shipped with the compiler.\n+\n ## link-arg\n \n This flag lets you append a single extra argument to the linker invocation.\n@@ -597,5 +606,6 @@ effective only for x86 targets.\n \n [option-emit]: ../command-line-arguments.md#option-emit\n [option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n+[instrumentation-based code coverage]: ../instrument-coverage.md\n [profile-guided optimization]: ../profile-guided-optimization.md\n [option-g-debug]: ../command-line-arguments.md#option-g-debug"}, {"sha": "b94989161ccfc6bc7099f018d275e545954b8e79", "filename": "src/doc/rustc/src/instrument-coverage.md", "status": "renamed", "additions": 40, "deletions": 56, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Finstrument-coverage.md?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -1,23 +1,17 @@\n # `instrument-coverage`\n \n-The tracking issue for this feature is: [#79121].\n-\n-[#79121]: https://github.com/rust-lang/rust/issues/79121\n-\n----\n-\n ## Introduction\n \n The Rust compiler includes two code coverage implementations:\n \n -   A GCC-compatible, gcov-based coverage implementation, enabled with `-Z profile`, which derives coverage data based on DebugInfo.\n--   A source-based code coverage implementation, enabled with `-Z instrument-coverage`, which uses LLVM's native, efficient coverage instrumentation to generate very precise coverage data.\n+-   A source-based code coverage implementation, enabled with `-C instrument-coverage`, which uses LLVM's native, efficient coverage instrumentation to generate very precise coverage data.\n \n-This document describes how to enable and use the LLVM instrumentation-based coverage, via the `-Z instrument-coverage` compiler flag.\n+This document describes how to enable and use the LLVM instrumentation-based coverage, via the `-C instrument-coverage` compiler flag.\n \n ## How it works\n \n-When `-Z instrument-coverage` is enabled, the Rust compiler enhances rust-based libraries and binaries by:\n+When `-C instrument-coverage` is enabled, the Rust compiler enhances rust-based libraries and binaries by:\n \n -   Automatically injecting calls to an LLVM intrinsic ([`llvm.instrprof.increment`]), at functions and branches in compiled code, to increment counters when conditional sections of code are executed.\n -   Embedding additional information in the data section of each library and binary (using the [LLVM Code Coverage Mapping Format] _Version 5_, if compiling with LLVM 12, or _Version 6_, if compiling with LLVM 13 or higher), to define the code regions (start and end positions in the source code) being counted.\n@@ -27,21 +21,21 @@ When running a coverage-instrumented program, the counter values are written to\n [`llvm.instrprof.increment`]: https://llvm.org/docs/LangRef.html#llvm-instrprof-increment-intrinsic\n [llvm code coverage mapping format]: https://llvm.org/docs/CoverageMappingFormat.html\n \n-> **Note**: `-Z instrument-coverage` also automatically enables `-C symbol-mangling-version=v0` (tracking issue [#60705]). The `v0` symbol mangler is strongly recommended, but be aware that this demangler is also experimental. The `v0` demangler can be overridden by explicitly adding `-Z unstable-options -C symbol-mangling-version=legacy`.\n+> **Note**: `-C instrument-coverage` also automatically enables `-C symbol-mangling-version=v0` (tracking issue [#60705]). The `v0` symbol mangler is strongly recommended. The `v0` demangler can be overridden by explicitly adding `-Z unstable-options -C symbol-mangling-version=legacy`.\n \n [#60705]: https://github.com/rust-lang/rust/issues/60705\n \n ## Enable coverage profiling in the Rust compiler\n \n-Rust's source-based code coverage requires the Rust \"profiler runtime\". Without it, compiling with `-Z instrument-coverage` generates an error that the profiler runtime is missing.\n+Rust's source-based code coverage requires the Rust \"profiler runtime\". Without it, compiling with `-C instrument-coverage` generates an error that the profiler runtime is missing.\n \n The Rust `nightly` distribution channel includes the profiler runtime, by default.\n \n > **Important**: If you are building the Rust compiler from the source distribution, the profiler runtime is _not_ enabled in the default `config.toml.example`. Edit your `config.toml` file and ensure the `profiler` feature is set it to `true` (either under the `[build]` section, or under the settings for an individual `[target.<triple>]`):\n >\n > ```toml\n > # Build the profiler runtime (required when compiling with options that depend\n-> # on this runtime, such as `-C profile-generate` or `-Z  instrument-coverage`).\n+> # on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n > profiler = true\n > ```\n \n@@ -65,9 +59,9 @@ $ ./x.py build rust-demangler\n \n ## Compiling with coverage enabled\n \n-Set the `-Z instrument-coverage` compiler flag in order to enable LLVM source-based code coverage profiling.\n+Set the `-C instrument-coverage` compiler flag in order to enable LLVM source-based code coverage profiling.\n \n-The default option generates coverage for all functions, including unused (never called) functions and generics. The compiler flag supports an optional value to tailor this behavior. (See [`-Z instrument-coverage=<options>`](#-z-instrument-coverageoptions), below.)\n+The default option generates coverage for all functions, including unused (never called) functions and generics. The compiler flag supports an optional value to tailor this behavior. (See [`-C instrument-coverage=<options>`](#-c-instrument-coverageoptions), below.)\n \n With `cargo`, you can instrument your program binary _and_ dependencies at the same time.\n \n@@ -76,18 +70,18 @@ For example (if your project's Cargo.toml builds a binary by default):\n ```shell\n $ cd your-project\n $ cargo clean\n-$ RUSTFLAGS=\"-Z instrument-coverage\" cargo build\n+$ RUSTFLAGS=\"-C instrument-coverage\" cargo build\n ```\n \n If `cargo` is not configured to use your `profiler`-enabled version of `rustc`, set the path explicitly via the `RUSTC` environment variable. Here is another example, using a `stage1` build of `rustc` to compile an `example` binary (from the [`json5format`] crate):\n \n ```shell\n $ RUSTC=$HOME/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc \\\n-    RUSTFLAGS=\"-Z instrument-coverage\" \\\n+    RUSTFLAGS=\"-C instrument-coverage\" \\\n     cargo build --example formatjson5\n ```\n \n-> **Note**: that some compiler options, combined with `-Z instrument-coverage`, can produce LLVM IR and/or linked binaries that are incompatible with LLVM coverage maps. For example, coverage requires references to actual functions in LLVM IR. If any covered function is optimized out, the coverage tools may not be able to process the coverage results. If you need to pass additional options, with coverage enabled, test them early, to confirm you will get the coverage results you expect.\n+> **Note**: that some compiler options, combined with `-C instrument-coverage`, can produce LLVM IR and/or linked binaries that are incompatible with LLVM coverage maps. For example, coverage requires references to actual functions in LLVM IR. If any covered function is optimized out, the coverage tools may not be able to process the coverage results. If you need to pass additional options, with coverage enabled, test them early, to confirm you will get the coverage results you expect.\n \n ## Running the instrumented binary to generate raw coverage profiling data\n \n@@ -123,31 +117,23 @@ If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing\n \n ## Installing LLVM coverage tools\n \n-LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 12 or higher. (`llvm-cov --version` typically shows the tool's LLVM version number.):\n+LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process coverage data and generate reports. There are several ways to find and/or install these tools, but note that the coverage mapping data generated by the Rust compiler requires LLVM version 12 or higher, and processing the *raw* data may require exactly the LLVM version used by the compiler. (`llvm-cov --version` typically shows the tool's LLVM version number, and `rustc --verbose --version` shows the version of LLVM used by the Rust compiler.)\n \n--   The LLVM tools may be installed (or installable) directly to your OS (such as via `apt-get`, for Linux).\n+-   You can install compatible versions of these tools via the `rustup` component `llvm-tools-preview`. This component is the recommended path, though the specific tools available and their interface is not currently subject to Rust's usual stability guarantees. In this case, you may also find `cargo-binutils` useful as a wrapper around these tools.\n+-   You can install a compatible version of LLVM tools from your operating system distribution, or from your distribution of LLVM.\n -   If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`.\n--   You can install compatible versions of these tools via `rustup`.\n-\n-The `rustup` option is guaranteed to install a compatible version of the LLVM tools, but they can be hard to find. We recommend [`cargo-binutils`], which installs Rust-specific wrappers around these and other LLVM tools, so you can invoke them via `cargo` commands!\n-\n-```shell\n-$ rustup component add llvm-tools-preview\n-$ cargo install cargo-binutils\n-$ cargo profdata -- --help  # note the additional \"--\" preceding the tool-specific arguments\n-```\n \n-[`cargo-binutils`]: https://crates.io/crates/cargo-binutils\n+The examples in this document show how to use the llvm tools directly.\n \n ## Creating coverage reports\n \n-Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`] (or `cargo profdata -- merge`), which can combine multiple raw profiles and index them at the same time:\n+Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`], which can combine multiple raw profiles and index them at the same time:\n \n ```shell\n $ llvm-profdata merge -sparse formatjson5.profraw -o formatjson5.profdata\n ```\n \n-Finally, the `.profdata` file is used, in combination with the coverage map (from the program binary) to generate coverage reports using [`llvm-cov report`] (or `cargo cov -- report`), for a coverage summaries; and [`llvm-cov show`] (or `cargo cov -- show`), to see detailed coverage of lines and regions (character ranges) overlaid on the original source code.\n+Finally, the `.profdata` file is used, in combination with the coverage map (from the program binary) to generate coverage reports using [`llvm-cov report`], for a coverage summaries; and [`llvm-cov show`], to see detailed coverage of lines and regions (character ranges) overlaid on the original source code.\n \n These commands have several display and filtering options. For example:\n \n@@ -176,7 +162,7 @@ Some of the more notable options in this example include:\n \n > **Note**: Coverage can also be disabled on an individual function by annotating the function with the [`no_coverage` attribute] (which requires the feature flag `#![feature(no_coverage)]`).\n \n-[`no_coverage` attribute]: ../language-features/no-coverage.md\n+[`no_coverage` attribute]: ../unstable-book/language-features/no-coverage.html\n \n ## Interpreting reports\n \n@@ -195,10 +181,10 @@ A typical use case for coverage analysis is test coverage. Rust's source-based c\n \n The following example (using the [`json5format`] crate, for demonstration purposes) show how to generate and analyze coverage results for all tests in a crate.\n \n-Since `cargo test` both builds and runs the tests, we set both the additional `RUSTFLAGS`, to add the `-Z instrument-coverage` flag, and `LLVM_PROFILE_FILE`, to set a custom filename for the raw profiling data generated during the test runs. Since there may be more than one test binary, apply `%m` in the filename pattern. This generates unique names for each test binary. (Otherwise, each executed test binary would overwrite the coverage results from the previous binary.)\n+Since `cargo test` both builds and runs the tests, we set both the additional `RUSTFLAGS`, to add the `-C instrument-coverage` flag, and `LLVM_PROFILE_FILE`, to set a custom filename for the raw profiling data generated during the test runs. Since there may be more than one test binary, apply `%m` in the filename pattern. This generates unique names for each test binary. (Otherwise, each executed test binary would overwrite the coverage results from the previous binary.)\n \n ```shell\n-$ RUSTFLAGS=\"-Z instrument-coverage\" \\\n+$ RUSTFLAGS=\"-C instrument-coverage\" \\\n     LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test --tests\n ```\n@@ -224,19 +210,18 @@ test result: ok. 31 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n You should have one or more `.profraw` files now, one for each test binary. Run the `profdata` tool to merge them:\n \n ```shell\n-$ cargo profdata -- merge \\\n-    -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n ```\n \n Then run the `cov` tool, with the `profdata` file and all test binaries:\n \n ```shell\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n     --object target/debug/deps/lib-30768f9c53506dc5 \\\n     --object target/debug/deps/json5format-fececd4653271682\n-$ cargo cov -- show \\\n+$ llvm-cov show \\\n     --use-color --ignore-filename-regex='/.cargo/registry' \\\n     --instr-profile=json5format.profdata \\\n     --object target/debug/deps/lib-30768f9c53506dc5 \\\n@@ -252,11 +237,11 @@ $ cargo cov -- show \\\n For `bash` users, one suggested way to automatically complete the `cov` command with the list of binaries is with a command like:\n \n ```bash\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     $( \\\n       for file in \\\n         $( \\\n-          RUSTFLAGS=\"-Z instrument-coverage\" \\\n+          RUSTFLAGS=\"-C instrument-coverage\" \\\n             cargo test --tests --no-run --message-format=json \\\n               | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n               | grep -v dSYM - \\\n@@ -280,28 +265,27 @@ for each listed test binary.\n The previous examples run `cargo test` with `--tests`, which excludes doc tests.[^79417]\n \n To include doc tests in the coverage results, drop the `--tests` flag, and apply the\n-`-Z instrument-coverage` flag, and some doc-test-specific options in the\n-`RUSTDOCFLAGS` environment variable. (The `cargo profdata` command does not change.)\n+`-C instrument-coverage` flag, and some doc-test-specific options in the\n+`RUSTDOCFLAGS` environment variable. (The `llvm-profdata` command does not change.)\n \n ```bash\n-$ RUSTFLAGS=\"-Z instrument-coverage\" \\\n-  RUSTDOCFLAGS=\"-Z instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n+$ RUSTFLAGS=\"-C instrument-coverage\" \\\n+  RUSTDOCFLAGS=\"-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n   LLVM_PROFILE_FILE=\"json5format-%m.profraw\" \\\n     cargo test\n-$ cargo profdata -- merge \\\n-    -sparse json5format-*.profraw -o json5format.profdata\n+$ llvm-profdata merge -sparse json5format-*.profraw -o json5format.profdata\n ```\n \n The `-Z unstable-options --persist-doctests` flag is required, to save the test binaries\n (with their coverage maps) for `llvm-cov`.\n \n ```bash\n-$ cargo cov -- report \\\n+$ llvm-cov report \\\n     $( \\\n       for file in \\\n         $( \\\n-          RUSTFLAGS=\"-Z instrument-coverage\" \\\n-          RUSTDOCFLAGS=\"-Z instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n+          RUSTFLAGS=\"-C instrument-coverage\" \\\n+          RUSTDOCFLAGS=\"-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins\" \\\n             cargo test --no-run --message-format=json \\\n               | jq -r \"select(.profile.test == true) | .filenames[]\" \\\n               | grep -v dSYM - \\\n@@ -314,8 +298,8 @@ $ cargo cov -- report \\\n   --instr-profile=json5format.profdata --summary-only # and/or other options\n ```\n \n-> **Note**: The differences in this `cargo cov` command, compared with the version without\n-> doc tests, include:\n+> **Note**: The differences in this `llvm-cov` invocation, compared with the\n+> version without doc tests, include:\n \n -   The `cargo test ... --no-run` command is updated with the same environment variables\n     and flags used to _build_ the tests, _including_ the doc tests. (`LLVM_PROFILE_FILE`\n@@ -331,12 +315,12 @@ $ cargo cov -- report \\\n     [(#79417)](https://github.com/rust-lang/rust/issues/79417) that doc test coverage\n     generates incorrect source line numbers in `llvm-cov show` results.\n \n-## `-Z instrument-coverage=<options>`\n+## `-C instrument-coverage=<options>`\n \n--   `-Z instrument-coverage=all`: Instrument all functions, including unused functions and unused generics. (This is the same as `-Z instrument-coverage`, with no value.)\n--   `-Z instrument-coverage=except-unused-generics`: Instrument all functions except unused generics.\n--   `-Z instrument-coverage=except-unused-functions`: Instrument only used (called) functions and instantiated generic functions.\n--   `-Z instrument-coverage=off`: Do not instrument any functions. (This is the same as simply not including the `-Z instrument-coverage` option.)\n+-   `-C instrument-coverage=all`: Instrument all functions, including unused functions and unused generics. (This is the same as `-C instrument-coverage`, with no value.)\n+-   `-C instrument-coverage=off`: Do not instrument any functions. (This is the same as simply not including the `-C instrument-coverage` option.)\n+-   `-Zunstable-options -C instrument-coverage=except-unused-generics`: Instrument all functions except unused generics.\n+-   `-Zunstable-options -C instrument-coverage=except-unused-functions`: Instrument only used (called) functions and instantiated generic functions.\n \n ## Other references\n ", "previous_filename": "src/doc/unstable-book/src/compiler-flags/instrument-coverage.md"}, {"sha": "cb65978e0a07e6dd6a27a2b54d6cf985be4911fd", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -1,5 +0,0 @@\n-# `source-based-code-coverage`\n-\n-See compiler flag [`-Z instrument-coverage`].\n-\n-[`-z instrument-coverage`]: ./instrument-coverage.html"}, {"sha": "d16383723f56373a8f12a80ef75996e281e5438a", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -659,7 +659,7 @@ crate fn make_test(\n     } else {\n         let returns_result = everything_else.trim_end().ends_with(\"(())\");\n         // Give each doctest main function a unique name.\n-        // This is for example needed for the tooling around `-Z instrument-coverage`.\n+        // This is for example needed for the tooling around `-C instrument-coverage`.\n         let inner_fn_name = if let Some(test_id) = test_id {\n             format!(\"_doctest_main_{}\", test_id)\n         } else {\n@@ -684,7 +684,7 @@ crate fn make_test(\n         };\n         // Note on newlines: We insert a line/newline *before*, and *after*\n         // the doctest and adjust the `line_offset` accordingly.\n-        // In the case of `-Z instrument-coverage`, this means that the generated\n+        // In the case of `-C instrument-coverage`, this means that the generated\n         // inner `main` function spans from the doctest opening codeblock to the\n         // closing one. For example\n         // /// ``` <- start of the inner main"}, {"sha": "09403bb3a7926675c9134740abf8a073728b196f", "filename": "src/test/mir-opt/coverage_graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -1,9 +1,9 @@\n-// Test that `-Z instrument-coverage` with `-Z dump-mir-graphviz` generates a graphviz (.dot file)\n+// Test that `-C instrument-coverage` with `-Z dump-mir-graphviz` generates a graphviz (.dot file)\n // rendering of the `BasicCoverageBlock` coverage control flow graph, with counters and\n // expressions.\n \n // needs-profiler-support\n-// compile-flags: -Z instrument-coverage -Z dump-mir-graphviz\n+// compile-flags: -C instrument-coverage -Z dump-mir-graphviz\n // EMIT_MIR coverage_graphviz.main.InstrumentCoverage.0.dot\n // EMIT_MIR coverage_graphviz.bar.InstrumentCoverage.0.dot\n fn main() {"}, {"sha": "a748f2c5ccc9b54346df5557be2e3fe9658349f7", "filename": "src/test/mir-opt/instrument_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -1,9 +1,9 @@\n-// Test that `-Z instrument-coverage` injects Coverage statements. The Coverage Counter statements\n+// Test that `-C instrument-coverage` injects Coverage statements. The Coverage Counter statements\n // are later converted into LLVM instrprof.increment intrinsics, during codegen.\n \n // needs-profiler-support\n // ignore-windows\n-// compile-flags: -Z instrument-coverage --remap-path-prefix={{src-base}}=/the/src\n+// compile-flags: -C instrument-coverage --remap-path-prefix={{src-base}}=/the/src\n \n // EMIT_MIR instrument_coverage.main.InstrumentCoverage.diff\n // EMIT_MIR instrument_coverage.bar.InstrumentCoverage.diff"}, {"sha": "fbe0a5cb1bb8cac13f2c93e09aebf1e00c92f0cb", "filename": "src/test/run-make-fulldeps/coverage-llvmir/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -57,7 +57,7 @@ all: test_llvm_ir\n test_llvm_ir:\n \t# Compile the test program with non-experimental coverage instrumentation, and generate LLVM IR\n \t$(RUSTC) $(BASEDIR)/testprog.rs \\\n-\t\t\t-Zinstrument-coverage \\\n+\t\t\t-Cinstrument-coverage \\\n \t\t\t--emit=llvm-ir\n \n \tcat \"$(TMPDIR)\"/testprog.ll | \\"}, {"sha": "1e2ecc2fbb1cc5f8e6e5748d1a630abaaef95c31", "filename": "src/test/run-make-fulldeps/coverage-llvmir/filecheck.testprog.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -1,5 +1,5 @@\n # Check for metadata, variables, declarations, and function definitions injected\n-# into LLVM IR when compiling with -Zinstrument-coverage.\n+# into LLVM IR when compiling with -Cinstrument-coverage.\n \n WINDOWS:      $__llvm_profile_runtime_user = comdat any\n "}, {"sha": "78723e78e772f52f496b5e0c7733f48161c2d7c5", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -81,13 +81,13 @@ endif\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/lib/$@.rs ) \\\n-\t\t\t--crate-type rlib -Zinstrument-coverage\n+\t\t\t--crate-type rlib -Cinstrument-coverage\n \n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n-\t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage\n+\t\t\t-L \"$(TMPDIR)\" -Cinstrument-coverage\n \n \t# Run it in order to generate some profiling data,\n \t# with `LLVM_PROFILE_FILE=<profdata_file>` environment variable set to\n@@ -109,7 +109,7 @@ endif\n \tLLVM_PROFILE_FILE=\"$(TMPDIR)\"/$@-%p-%m.profraw \\\n \t\t\t$(RUSTDOC) --crate-name workaround_for_79771 --test $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n-\t\t\t-L \"$(TMPDIR)\" -Zinstrument-coverage \\\n+\t\t\t-L \"$(TMPDIR)\" -Cinstrument-coverage \\\n \t\t\t-Z unstable-options --persist-doctests=$(TMPDIR)/rustdoc-$@\n \n \t# Postprocess the profiling data so it can be used by the llvm-cov tool"}, {"sha": "1aa4a22c33e1803f7d9b55e719f8ac37b7d9a8b6", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-85461.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-85461.txt?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -11,7 +11,7 @@\n    10|      1|}\n \n ../coverage/lib/inline_always_with_dead_code.rs:\n-    1|       |// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+    1|       |// compile-flags: -Cinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n     2|       |\n     3|       |#![allow(dead_code)]\n     4|       |"}, {"sha": "55a49548cb5e03f9a6d749be26a4fcbef8cbd558", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -125,7 +125,7 @@\n    78|       |// generic functions with:\n    79|       |//\n    80|       |// ```shell\n-   81|       |// $ `rustc -Z instrument-coverage=except-unused-generics ...`\n+   81|       |// $ `rustc -Zunstable-options -C instrument-coverage=except-unused-generics ...`\n    82|       |// ```\n    83|       |//\n    84|       |// Even though this function is used by `uses_crate.rs` (and"}, {"sha": "2b21dee6ccff63e8c461e3e341cd54852df712fe", "filename": "src/test/run-make-fulldeps/coverage/lib/inline_always_with_dead_code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Finline_always_with_dead_code.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n+// compile-flags: -Cinstrument-coverage -Ccodegen-units=4 -Copt-level=0\n \n #![allow(dead_code)]\n "}, {"sha": "8b8b1f7f351fd7d9a1905562450313b2354efaaa", "filename": "src/test/run-make-fulldeps/coverage/lib/used_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -78,7 +78,7 @@ fn use_this_lib_crate() {\n // generic functions with:\n //\n // ```shell\n-// $ `rustc -Z instrument-coverage=except-unused-generics ...`\n+// $ `rustc -Zunstable-options -C instrument-coverage=except-unused-generics ...`\n // ```\n //\n // Even though this function is used by `uses_crate.rs` (and"}, {"sha": "9655108876f19f0c8a937ef96c0ca170361e540b", "filename": "src/test/ui/issues/issue-85461.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9a32ed209b93ddd08cab174dfffefc1409a9c/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-85461.rs?ref=2fe9a32ed209b93ddd08cab174dfffefc1409a9c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zinstrument-coverage -Ccodegen-units=4 --crate-type dylib -Copt-level=0\n+// compile-flags: -Cinstrument-coverage -Ccodegen-units=4 --crate-type dylib -Copt-level=0\n // build-pass\n // needs-profiler-support\n "}]}