{"sha": "222bac139743d63a653a198de287ec6b102270cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMmJhYzEzOTc0M2Q2M2E2NTNhMTk4ZGUyODdlYzZiMTAyMjcwY2Q=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T04:37:29Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T04:42:32Z"}, "message": "Provide `config.set().item(value)` API.\n\nThis API isn't fantastic, but it's the best I can come up with without\nsomething like `concat_idents!()`. There are relatively few places where\nconfig is set, to hopefully the ugliness isn't disastrous.\n\nChange previous occurences of `config.item = value` to this new API,\nrather than using `config.override_value()`. Undo the changes to\n`override_value()`, as it's no longer important to propogate the error\nto the caller. Add a test for the new interface.", "tree": {"sha": "b5f261033e2d91af068b96380c3d7fef46020119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f261033e2d91af068b96380c3d7fef46020119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/222bac139743d63a653a198de287ec6b102270cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/222bac139743d63a653a198de287ec6b102270cd", "html_url": "https://github.com/rust-lang/rust/commit/222bac139743d63a653a198de287ec6b102270cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/222bac139743d63a653a198de287ec6b102270cd/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e26575ed8c8fc94278f97f68f478361fee9cc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e26575ed8c8fc94278f97f68f478361fee9cc9c", "html_url": "https://github.com/rust-lang/rust/commit/9e26575ed8c8fc94278f97f68f478361fee9cc9c"}], "stats": {"total": 116, "additions": 69, "deletions": 47}, "files": [{"sha": "dc4087a066a4fabaef54c1148cd8e63b3f70238e", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/222bac139743d63a653a198de287ec6b102270cd/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222bac139743d63a653a198de287ec6b102270cd/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=222bac139743d63a653a198de287ec6b102270cd", "patch": "@@ -18,12 +18,14 @@ extern crate env_logger;\n extern crate getopts;\n \n use rustfmt::{run, Input, Summary};\n-use rustfmt::config::Config;\n+use rustfmt::file_lines::FileLines;\n+use rustfmt::config::{Config, WriteMode};\n \n use std::{env, error};\n use std::fs::{self, File};\n use std::io::{self, ErrorKind, Read, Write};\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n@@ -61,8 +63,8 @@ enum Operation {\n struct CliOptions {\n     skip_children: bool,\n     verbose: bool,\n-    write_mode: Option<String>,\n-    file_lines: Option<String>,\n+    write_mode: Option<WriteMode>,\n+    file_lines: FileLines, // Default is all lines in all files.\n }\n \n impl CliOptions {\n@@ -71,29 +73,28 @@ impl CliOptions {\n         options.skip_children = matches.opt_present(\"skip-children\");\n         options.verbose = matches.opt_present(\"verbose\");\n \n-        if let Some(write_mode) = matches.opt_str(\"write-mode\") {\n-            options.write_mode = Some(write_mode);\n+        if let Some(ref write_mode) = matches.opt_str(\"write-mode\") {\n+            if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n+                options.write_mode = Some(write_mode);\n+            } else {\n+                return Err(FmtError::from(format!(\"Invalid write-mode: {}\", write_mode)));\n+            }\n         }\n \n-        if let Some(file_lines) = matches.opt_str(\"file-lines\") {\n-            options.file_lines = Some(file_lines);\n+        if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n+            options.file_lines = file_lines.parse()?;\n         }\n \n         Ok(options)\n     }\n \n-    fn apply_to(&self, config: &mut Config) -> FmtResult<()> {\n-        let bool_to_str = |b| if b { \"true\" } else { \"false\" };\n-        config\n-            .override_value(\"skip_children\", bool_to_str(self.skip_children))?;\n-        config.override_value(\"verbose\", bool_to_str(self.verbose))?;\n-        if let Some(ref write_mode) = self.write_mode {\n-            config.override_value(\"write_mode\", &write_mode)?;\n+    fn apply_to(self, config: &mut Config) {\n+        config.set().skip_children(self.skip_children);\n+        config.set().verbose(self.verbose);\n+        config.set().file_lines(self.file_lines);\n+        if let Some(write_mode) = self.write_mode {\n+            config.set().write_mode(write_mode);\n         }\n-        if let Some(ref file_lines) = self.file_lines {\n-            config.override_value(\"file_lines\", &file_lines)?;\n-        }\n-        Ok(())\n     }\n }\n \n@@ -221,11 +222,11 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                                                          &env::current_dir().unwrap())?;\n \n             // write_mode is always Plain for Stdin.\n-            config.override_value(\"write_mode\", \"Plain\")?;\n+            config.set().write_mode(WriteMode::Plain);\n \n             // parse file_lines\n             if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n-                config.override_value(\"file-lines\", file_lines)?;\n+                config.set().file_lines(file_lines.parse()?);\n                 for f in config.file_lines().files() {\n                     if f != \"stdin\" {\n                         println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n@@ -238,6 +239,12 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n         Operation::Format { files, config_path } => {\n             let options = CliOptions::from_matches(&matches)?;\n \n+            for f in options.file_lines.files() {\n+                if !files.contains(&PathBuf::from(f)) {\n+                    println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n+                }\n+            }\n+\n             let mut config = Config::default();\n             let mut path = None;\n             // Load the config path file if provided\n@@ -246,13 +253,6 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                 config = cfg_tmp;\n                 path = path_tmp;\n             };\n-            options.apply_to(&mut config)?;\n-\n-            for f in config.file_lines().files() {\n-                if !files.contains(&PathBuf::from(f)) {\n-                    println!(\"Warning: Extra file listed in file_lines option '{}'\", f);\n-                }\n-            }\n \n             if options.verbose {\n                 if let Some(path) = path.as_ref() {\n@@ -282,7 +282,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                         config = config_tmp;\n                     }\n \n-                    options.apply_to(&mut config)?;\n+                    options.clone().apply_to(&mut config);\n                     error_summary.add(run(Input::File(file), &config));\n                 }\n             }"}, {"sha": "22fa241677f2b92096871b56efb8f8f733e2d6cf", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/222bac139743d63a653a198de287ec6b102270cd/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222bac139743d63a653a198de287ec6b102270cd/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=222bac139743d63a653a198de287ec6b102270cd", "patch": "@@ -731,10 +731,8 @@ mod test {\n     #[cfg_attr(rustfmt, rustfmt_skip)]\n     fn format_comments() {\n         let mut config: ::config::Config = Default::default();\n-        config.override_value(\"wrap_comments\", \"true\")\n-            .expect(\"Could not set wrap_comments to true\");\n-        config.override_value(\"normalize_comments\", \"true\")\n-            .expect(\"Could not set normalize_comments to true\");\n+        config.set().wrap_comments(true);\n+        config.set().normalize_comments(true);\n \n         let comment = rewrite_comment(\" //test\",\n                                       true,"}, {"sha": "d629d4176ca7f0d02d1873728932cc1dfaede371", "filename": "src/config.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/222bac139743d63a653a198de287ec6b102270cd/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222bac139743d63a653a198de287ec6b102270cd/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=222bac139743d63a653a198de287ec6b102270cd", "patch": "@@ -11,8 +11,6 @@\n extern crate toml;\n \n use std::cell::Cell;\n-use std::error;\n-use std::result;\n \n use file_lines::FileLines;\n use lists::{SeparatorTactic, ListTactic};\n@@ -231,6 +229,21 @@ macro_rules! create_config {\n             $(pub $i: Option<$ty>),+\n         }\n \n+        // Macro hygiene won't allow us to make `set_$i()` methods on Config\n+        // for each item, so this struct is used to give the API to set values:\n+        // `config.get().option(false)`. It's pretty ugly. Consider replacing\n+        // with `config.set_option(false)` if we ever get a stable/usable\n+        // `concat_idents!()`.\n+        pub struct ConfigSetter<'a>(&'a mut Config);\n+\n+        impl<'a> ConfigSetter<'a> {\n+            $(\n+            pub fn $i(&mut self, value: $ty) {\n+                (self.0).$i.1 = value;\n+            }\n+            )+\n+        }\n+\n         impl Config {\n \n             $(\n@@ -240,6 +253,10 @@ macro_rules! create_config {\n             }\n             )+\n \n+            pub fn set<'a>(&'a mut self) -> ConfigSetter<'a> {\n+                ConfigSetter(self)\n+            }\n+\n             fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n             $(\n                 if let Some(val) = parsed.$i {\n@@ -316,15 +333,19 @@ macro_rules! create_config {\n             }\n \n             pub fn override_value(&mut self, key: &str, val: &str)\n-                -> result::Result<(), Box<error::Error + Send + Sync>>\n             {\n                 match key {\n                     $(\n-                        stringify!($i) => self.$i.1 = val.parse::<$ty>()?,\n+                        stringify!($i) => {\n+                            self.$i.1 = val.parse::<$ty>()\n+                                .expect(&format!(\"Failed to parse override for {} (\\\"{}\\\") as a {}\",\n+                                                 stringify!($i),\n+                                                 val,\n+                                                 stringify!($ty)));\n+                        }\n                     )+\n                     _ => panic!(\"Unknown config key in override: {}\", key)\n                 }\n-                Ok(())\n             }\n \n             pub fn print_docs() {\n@@ -480,4 +501,13 @@ mod test {\n         assert!(config.skip_children.0.get());\n         assert!(!config.disable_all_formatting.0.get());\n     }\n+\n+    #[test]\n+    fn test_config_set() {\n+        let mut config = Config::default();\n+        config.set().verbose(false);\n+        assert_eq!(config.verbose(), false);\n+        config.set().verbose(true);\n+        assert_eq!(config.verbose(), true);\n+    }\n }"}, {"sha": "f31f3c0c3eedaddbfdc7f8fab9f44aa8c3c4eb98", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/222bac139743d63a653a198de287ec6b102270cd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222bac139743d63a653a198de287ec6b102270cd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=222bac139743d63a653a198de287ec6b102270cd", "patch": "@@ -708,9 +708,7 @@ mod test {\n     #[test]\n     fn indent_to_string_hard_tabs() {\n         let mut config = Config::default();\n-        config\n-            .override_value(\"hard_tabs\", \"true\")\n-            .expect(\"Could not set hard_tabs to true\");\n+        config.set().hard_tabs(true);\n         let indent = Indent::new(8, 4);\n \n         // 2 tabs + 4 spaces"}, {"sha": "de4b1c46267ffaccc04670eec861846382ee4252", "filename": "tests/system.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/222bac139743d63a653a198de287ec6b102270cd/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222bac139743d63a653a198de287ec6b102270cd/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=222bac139743d63a653a198de287ec6b102270cd", "patch": "@@ -20,7 +20,7 @@ use std::path::{Path, PathBuf};\n \n use rustfmt::*;\n use rustfmt::filemap::{write_system_newlines, FileMap};\n-use rustfmt::config::Config;\n+use rustfmt::config::{Config, ReportTactic};\n use rustfmt::rustfmt_diff::*;\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n@@ -224,16 +224,12 @@ fn read_config(filename: &str) -> Config {\n \n     for (key, val) in &sig_comments {\n         if key != \"target\" && key != \"config\" {\n-            config\n-                .override_value(key, val)\n-                .expect(&format!(\"Failed to override config {} (\\\"{}\\\")\", key, val));\n+            config.override_value(key, val);\n         }\n     }\n \n     // Don't generate warnings for to-do items.\n-    config\n-        .override_value(\"report_todo\", \"Never\")\n-        .expect(\"Could not set report-todo to Never\");\n+    config.set().report_todo(ReportTactic::Never);\n \n     config\n }"}]}