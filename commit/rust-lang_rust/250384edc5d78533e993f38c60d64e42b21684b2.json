{"sha": "250384edc5d78533e993f38c60d64e42b21684b2", "node_id": "C_kwDOAAsO6NoAKDI1MDM4NGVkYzVkNzg1MzNlOTkzZjM4YzYwZDY0ZTQyYjIxNjg0YjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T09:39:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-02T09:39:18Z"}, "message": "Auto merge of #93573 - matthiaskrgr:rollup-nrjmygz, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #92758 (librustdoc: impl core::fmt::Write for rustdoc::html::render::Buffer)\n - #92788 (Detect `::` -> `:` typo in type argument)\n - #93420 (Improve wrapping on settings page)\n - #93493 (Document valid values of the char type)\n - #93531 (Fix incorrect panic message in example)\n - #93559 (Add missing | between print options)\n - #93560 (Fix two incorrect \"it's\" (typos in comments))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ccf15ae68cfe680aa65f11310e7006faf94401ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf15ae68cfe680aa65f11310e7006faf94401ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250384edc5d78533e993f38c60d64e42b21684b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250384edc5d78533e993f38c60d64e42b21684b2", "html_url": "https://github.com/rust-lang/rust/commit/250384edc5d78533e993f38c60d64e42b21684b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250384edc5d78533e993f38c60d64e42b21684b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f9c40e6a9ecc62432e71e886cef83a4c2c9b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f9c40e6a9ecc62432e71e886cef83a4c2c9b98", "html_url": "https://github.com/rust-lang/rust/commit/d5f9c40e6a9ecc62432e71e886cef83a4c2c9b98"}, {"sha": "344bb595302b1c20c212598e84c74f28030da3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/344bb595302b1c20c212598e84c74f28030da3ad", "html_url": "https://github.com/rust-lang/rust/commit/344bb595302b1c20c212598e84c74f28030da3ad"}], "stats": {"total": 273, "additions": 248, "deletions": 25}, "files": [{"sha": "e9e6d61331077e4575757b67cb93953e19eda54c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -1642,7 +1642,7 @@ pub enum FakeReadCause {\n     ForMatchedPlace(Option<DefId>),\n \n     /// A fake read of the RefWithinGuard version of a bind-by-value variable\n-    /// in a match guard to ensure that it's value hasn't change by the time\n+    /// in a match guard to ensure that its value hasn't change by the time\n     /// we create the OutsideGuard version.\n     ForGuardBinding,\n \n@@ -2939,7 +2939,7 @@ impl Location {\n         let mut visited = FxHashSet::default();\n \n         while let Some(block) = queue.pop() {\n-            // If we haven't visited this block before, then make sure we visit it's predecessors.\n+            // If we haven't visited this block before, then make sure we visit its predecessors.\n             if visited.insert(block) {\n                 queue.extend(predecessors[block].iter().cloned());\n             } else {"}, {"sha": "6aed3223480f1a93645fb95f00ddeec878a0a0f0", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -400,6 +400,8 @@ struct DiagnosticMetadata<'ast> {\n \n     /// Given `where <T as Bar>::Baz: String`, suggest `where T: Bar<Baz = String>`.\n     current_where_predicate: Option<&'ast WherePredicate>,\n+\n+    current_type_path: Option<&'ast Ty>,\n }\n \n struct LateResolutionVisitor<'a, 'b, 'ast> {\n@@ -472,8 +474,10 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_ty(&mut self, ty: &'ast Ty) {\n         let prev = self.diagnostic_metadata.current_trait_object;\n+        let prev_ty = self.diagnostic_metadata.current_type_path;\n         match ty.kind {\n             TyKind::Path(ref qself, ref path) => {\n+                self.diagnostic_metadata.current_type_path = Some(ty);\n                 self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n             }\n             TyKind::ImplicitSelf => {\n@@ -490,6 +494,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         }\n         visit::walk_ty(self, ty);\n         self.diagnostic_metadata.current_trait_object = prev;\n+        self.diagnostic_metadata.current_type_path = prev_ty;\n     }\n     fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n         self.smart_resolve_path(\n@@ -1936,7 +1941,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 let instead = res.is_some();\n                 let suggestion =\n                     if res.is_none() { this.report_missing_type_error(path) } else { None };\n-                // get_from_node_id\n \n                 this.r.use_injections.push(UseError {\n                     err,"}, {"sha": "d05f139e3bf5aaf9876a78708a614b766b967146", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -26,6 +26,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n \n use std::iter;\n+use std::ops::Deref;\n \n use tracing::debug;\n \n@@ -265,6 +266,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             }\n         }\n \n+        self.detect_assoct_type_constraint_meant_as_path(base_span, &mut err);\n+\n         // Emit special messages for unresolved `Self` and `self`.\n         if is_self_type(path, ns) {\n             err.code(rustc_errors::error_code!(E0411));\n@@ -603,6 +606,40 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         (err, candidates)\n     }\n \n+    fn detect_assoct_type_constraint_meant_as_path(\n+        &self,\n+        base_span: Span,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        let Some(ty) = self.diagnostic_metadata.current_type_path else { return; };\n+        let TyKind::Path(_, path) = &ty.kind else { return; };\n+        for segment in &path.segments {\n+            let Some(params) = &segment.args else { continue; };\n+            let ast::GenericArgs::AngleBracketed(ref params) = params.deref() else { continue; };\n+            for param in &params.args {\n+                let ast::AngleBracketedArg::Constraint(constraint) = param else { continue; };\n+                let ast::AssocConstraintKind::Bound { bounds } = &constraint.kind else {\n+                    continue;\n+                };\n+                for bound in bounds {\n+                    let ast::GenericBound::Trait(trait_ref, ast::TraitBoundModifier::None)\n+                        = bound else\n+                    {\n+                        continue;\n+                    };\n+                    if base_span == trait_ref.span {\n+                        err.span_suggestion_verbose(\n+                            constraint.ident.span.between(trait_ref.span),\n+                            \"you might have meant to write a path instead of an associated type bound\",\n+                            \"::\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn get_single_associated_item(\n         &mut self,\n         path: &[Segment],"}, {"sha": "d2d5b06ad67b622553d6930cad8eb46e652f4c86", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -1188,7 +1188,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"Compiler information to print on stdout\",\n             \"[crate-name|file-names|sysroot|target-libdir|cfg|target-list|\\\n              target-cpus|target-features|relocation-models|code-models|\\\n-             tls-models|target-spec-json|native-static-libs|stack-protector-strategies\\\n+             tls-models|target-spec-json|native-static-libs|stack-protector-strategies|\\\n              link-args]\",\n         ),\n         opt::flagmulti_s(\"g\", \"\", \"Equivalent to -C debuginfo=2\"),"}, {"sha": "ebb1d8971b99ddd63cf89315cea88df043983ebd", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -275,20 +275,69 @@ mod prim_bool {}\n mod prim_never {}\n \n #[doc(primitive = \"char\")]\n+#[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n /// The `char` type represents a single character. More specifically, since\n /// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n-/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n-/// point]'.\n-///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// scalar value]'.\n ///\n /// This documentation describes a number of methods and trait implementations on the\n /// `char` type. For technical reasons, there is additional, separate\n /// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Validity\n+///\n+/// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n+/// other than a [surrogate code point]. This has a fixed numerical definition:\n+/// code points are in the range 0 to 0x10FFFF, inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n+///\n+/// No `char` may be constructed, whether as a literal or at runtime, that is not a\n+/// Unicode scalar value:\n+///\n+/// ```compile_fail\n+/// // Each of these is a compiler error\n+/// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n+/// ```\n+///\n+/// ```should_panic\n+/// // Panics; from_u32 returns None.\n+/// char::from_u32(0xDE01).unwrap();\n+/// ```\n+///\n+/// ```no_run\n+/// // Undefined behaviour\n+/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// ```\n+///\n+/// USVs are also the exact set of values that may be encoded in UTF-8. Because\n+/// `char` values are USVs and `str` values are valid UTF-8, it is safe to store\n+/// any `char` in a `str` or read any character from a `str` as a `char`.\n+///\n+/// The gap in valid `char` values is understood by the compiler, so in the\n+/// below example the two ranges are understood to cover the whole range of\n+/// possible `char` values and there is no error for a [non-exhaustive match].\n+///\n+/// ```\n+/// let c: char = 'a';\n+/// match c {\n+///     '\\0' ..= '\\u{D7FF}' => false,\n+///     '\\u{E000}' ..= '\\u{10FFFF}' => true,\n+/// };\n+/// ```\n+///\n+/// All USVs are valid `char` values, but not all of them represent a real\n+/// character. Many USVs are not currently assigned to a character, but may be\n+/// in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different\n+/// users (\"private use\").\n+///\n+/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [non-exhaustive match]: ../book/ch06-02-match.html#matches-are-exhaustive\n+/// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n+///\n /// # Representation\n ///\n /// `char` is always four bytes in size. This is a different representation than"}, {"sha": "cc4e4fd4fdc77585f40c0bf129cf2834dbd3d173", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -405,7 +405,7 @@ impl TcpStream {\n     /// use std::net::TcpStream;\n     ///\n     /// let stream = TcpStream::connect(\"127.0.0.1:8000\")\n-    ///                        .expect(\"couldn't bind to address\");\n+    ///                        .expect(\"Couldn't connect to the server...\");\n     /// let mut buf = [0; 10];\n     /// let len = stream.peek(&mut buf).expect(\"peek failed\");\n     /// ```"}, {"sha": "ebb1d8971b99ddd63cf89315cea88df043983ebd", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -275,20 +275,69 @@ mod prim_bool {}\n mod prim_never {}\n \n #[doc(primitive = \"char\")]\n+#[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n /// The `char` type represents a single character. More specifically, since\n /// 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode\n-/// scalar value]', which is similar to, but not the same as, a '[Unicode code\n-/// point]'.\n-///\n-/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// scalar value]'.\n ///\n /// This documentation describes a number of methods and trait implementations on the\n /// `char` type. For technical reasons, there is additional, separate\n /// documentation in [the `std::char` module](char/index.html) as well.\n ///\n+/// # Validity\n+///\n+/// A `char` is a '[Unicode scalar value]', which is any '[Unicode code point]'\n+/// other than a [surrogate code point]. This has a fixed numerical definition:\n+/// code points are in the range 0 to 0x10FFFF, inclusive.\n+/// Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n+///\n+/// No `char` may be constructed, whether as a literal or at runtime, that is not a\n+/// Unicode scalar value:\n+///\n+/// ```compile_fail\n+/// // Each of these is a compiler error\n+/// ['\\u{D800}', '\\u{DFFF}', '\\u{110000}'];\n+/// ```\n+///\n+/// ```should_panic\n+/// // Panics; from_u32 returns None.\n+/// char::from_u32(0xDE01).unwrap();\n+/// ```\n+///\n+/// ```no_run\n+/// // Undefined behaviour\n+/// unsafe { char::from_u32_unchecked(0x110000) };\n+/// ```\n+///\n+/// USVs are also the exact set of values that may be encoded in UTF-8. Because\n+/// `char` values are USVs and `str` values are valid UTF-8, it is safe to store\n+/// any `char` in a `str` or read any character from a `str` as a `char`.\n+///\n+/// The gap in valid `char` values is understood by the compiler, so in the\n+/// below example the two ranges are understood to cover the whole range of\n+/// possible `char` values and there is no error for a [non-exhaustive match].\n+///\n+/// ```\n+/// let c: char = 'a';\n+/// match c {\n+///     '\\0' ..= '\\u{D7FF}' => false,\n+///     '\\u{E000}' ..= '\\u{10FFFF}' => true,\n+/// };\n+/// ```\n+///\n+/// All USVs are valid `char` values, but not all of them represent a real\n+/// character. Many USVs are not currently assigned to a character, but may be\n+/// in the future (\"reserved\"); some will never be a character\n+/// (\"noncharacters\"); and some may be given different meanings by different\n+/// users (\"private use\").\n+///\n+/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [non-exhaustive match]: ../book/ch06-02-match.html#matches-are-exhaustive\n+/// [surrogate code point]: https://www.unicode.org/glossary/#surrogate_code_point\n+///\n /// # Representation\n ///\n /// `char` is always four bytes in size. This is a different representation than"}, {"sha": "f4df9ef4a8c9dbe1409e7c4b91bbceab39c3f85c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -64,6 +64,23 @@ crate struct Buffer {\n     buffer: String,\n }\n \n+impl core::fmt::Write for Buffer {\n+    #[inline]\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        self.buffer.write_str(s)\n+    }\n+\n+    #[inline]\n+    fn write_char(&mut self, c: char) -> fmt::Result {\n+        self.buffer.write_char(c)\n+    }\n+\n+    #[inline]\n+    fn write_fmt(self: &mut Self, args: fmt::Arguments<'_>) -> fmt::Result {\n+        self.buffer.write_fmt(args)\n+    }\n+}\n+\n impl Buffer {\n     crate fn empty_from(v: &Buffer) -> Buffer {\n         Buffer { for_html: v.for_html, buffer: String::new() }"}, {"sha": "59a6187b62be9a804703ebfb01e9bb62bfa1085f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -376,7 +376,7 @@ impl Setting {\n                 description,\n             ),\n             Setting::Select { js_data_name, description, default_value, ref options } => format!(\n-                \"<div class=\\\"setting-line\\\"><div class=\\\"radio-line\\\" id=\\\"{}\\\"><span class=\\\"setting-name\\\">{}</span>{}</div></div>\",\n+                \"<div class=\\\"setting-line\\\"><div class=\\\"radio-line\\\" id=\\\"{}\\\"><span class=\\\"setting-name\\\">{}</span><div class=\\\"choices\\\">{}</div></div></div>\",\n                 js_data_name,\n                 description,\n                 options"}, {"sha": "6592a56ba46a806473c2c493492886543fcdcd9f", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -139,8 +139,7 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n         src_href: src_href.as_deref(),\n     };\n \n-    let heading = item_vars.render().unwrap();\n-    buf.write_str(&heading);\n+    item_vars.render_into(buf).unwrap();\n \n     match *item.kind {\n         clean::ModuleItem(ref m) => item_module(buf, cx, item, &m.items),"}, {"sha": "7b337c2bc7a3356b4ba78835ba8305b8aded84c3", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -1,5 +1,5 @@\n .setting-line {\n-\tpadding: 5px;\n+\tmargin: 0.6em 0 0.6em 0.3em;\n \tposition: relative;\n }\n \n@@ -17,17 +17,16 @@\n \tborder-bottom: 1px solid;\n }\n \n-.setting-line .radio-line {\n+.setting-line .radio-line,\n+.setting-line .choices {\n \tdisplay: flex;\n \tflex-wrap: wrap;\n }\n \n-.setting-line .radio-line > * {\n-\tpadding: 0.3em;\n-}\n-\n .setting-line .radio-line .setting-name {\n \tflex-grow: 1;\n+\tmargin-top: auto;\n+\tmargin-bottom: auto;\n }\n \n .setting-line .radio-line input {\n@@ -38,7 +37,10 @@\n \tborder-radius: 0.1em;\n \tborder: 1px solid;\n \tmargin-left: 0.5em;\n-\tmin-width: 3.5em;\n+\tmargin-top: 0.1em;\n+\tmargin-bottom: 0.1em;\n+\tmin-width: 3.8em;\n+\tpadding: 0.3em;\n }\n \n .toggle {"}, {"sha": "7be46a613c4fb159323fb96e5831edfe2f5ee235", "filename": "src/test/rustdoc-gui/mobile.goml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/src%2Ftest%2Frustdoc-gui%2Fmobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmobile.goml?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -19,3 +19,9 @@ assert-css: (\".content .out-of-band .since::before\", { \"content\": \"\\\"Since \\\"\" }\n \n size: (1000, 1000)\n assert-css-false: (\".content .out-of-band .since::before\", { \"content\": \"\\\"Since \\\"\" })\n+\n+// On the settings page, the theme buttons should not line-wrap. Instead, they should\n+// all be placed as a group on a line below the setting name \"Theme.\"\n+goto: file://|DOC_PATH|/settings.html\n+size: (400, 600)\n+compare-elements-position-near-false: (\"#preferred-light-theme .setting-name\", \"#preferred-light-theme .choice\", {\"y\": 16})"}, {"sha": "48d19f6dd4e3fb74475c58783a1c5b6d8a7549c9", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-in-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.rs?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -0,0 +1,14 @@\n+enum A {\n+    B,\n+}\n+\n+fn main() {\n+    let _: Vec<A:B> = A::B;\n+    //~^ ERROR cannot find trait `B` in this scope\n+    //~| HELP you might have meant to write a path instead of an associated type bound\n+    //~| ERROR associated type bounds are unstable\n+    //~| HELP add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+    //~| ERROR struct takes at least 1 generic argument but 0 generic arguments were supplied\n+    //~| HELP add missing generic argument\n+    //~| ERROR associated type bindings are not allowed here\n+}"}, {"sha": "951ff23d635635084a59d45fcd6145b7db8f19c0", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-in-type.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/250384edc5d78533e993f38c60d64e42b21684b2/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/250384edc5d78533e993f38c60d64e42b21684b2/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-in-type.stderr?ref=250384edc5d78533e993f38c60d64e42b21684b2", "patch": "@@ -0,0 +1,46 @@\n+error[E0405]: cannot find trait `B` in this scope\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:18\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |                  ^ not found in this scope\n+   |\n+help: you might have meant to write a path instead of an associated type bound\n+   |\n+LL |     let _: Vec<A::B> = A::B;\n+   |                 ~~\n+\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:16\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |                ^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n+error[E0107]: this struct takes at least 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:12\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |            ^^^ expected at least 1 generic argument\n+   |\n+note: struct defined here, with at least 1 generic parameter: `T`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |            ^^^ -\n+help: add missing generic argument\n+   |\n+LL |     let _: Vec<T, A:B> = A::B;\n+   |                ++\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/type-ascription-instead-of-path-in-type.rs:6:16\n+   |\n+LL |     let _: Vec<A:B> = A::B;\n+   |                ^^^ associated type not allowed here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0107, E0229, E0405, E0658.\n+For more information about an error, try `rustc --explain E0107`."}]}