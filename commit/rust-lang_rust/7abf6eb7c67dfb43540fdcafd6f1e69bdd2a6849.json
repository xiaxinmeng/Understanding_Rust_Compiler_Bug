{"sha": "7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYmY2ZWI3YzY3ZGZiNDM1NDBmZGNhZmQ2ZjFlNjliZGQyYTY4NDk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-03T00:20:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-03T00:20:57Z"}, "message": "Shift obj, type, param decls to have strata rather than effects.", "tree": {"sha": "1abdd0450b778fad9341365bb577da2548447feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1abdd0450b778fad9341365bb577da2548447feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "html_url": "https://github.com/rust-lang/rust/commit/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db115834f24eb9d9ccbd2468c9145fdf86be514", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db115834f24eb9d9ccbd2468c9145fdf86be514", "html_url": "https://github.com/rust-lang/rust/commit/7db115834f24eb9d9ccbd2468c9145fdf86be514"}], "stats": {"total": 186, "additions": 112, "deletions": 74}, "files": [{"sha": "ce9f9cc4139b1cf292007af704c43255c6fae8f5", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "patch": "@@ -94,7 +94,7 @@ and ty =\n   | TY_task\n \n   | TY_native of opaque_id\n-  | TY_param of (ty_param_idx * effect)\n+  | TY_param of (ty_param_idx * stratum)\n   | TY_named of name\n   | TY_type\n \n@@ -181,7 +181,7 @@ and ty_fn = (ty_sig * ty_fn_aux)\n \n and ty_obj_header = (slot array * constrs)\n \n-and ty_obj = (effect * ((ident,ty_fn) Hashtbl.t))\n+and ty_obj = (stratum * ((ident,ty_fn) Hashtbl.t))\n \n and check_calls = (lval * (atom array)) array\n \n@@ -434,7 +434,7 @@ and fn =\n and obj =\n     {\n       obj_state: header_slots;\n-      obj_effect: effect;\n+      obj_stratum: stratum;\n       obj_constrs: constrs;\n       obj_fns: (ident,fn identified) Hashtbl.t;\n       obj_drop: block option;\n@@ -449,10 +449,10 @@ and obj =\n  * even if it's a type that's bound by a quantifier in its environment.\n  *)\n \n-and ty_param = ident * (ty_param_idx * effect)\n+and ty_param = ident * (ty_param_idx * stratum)\n \n and mod_item' =\n-    MOD_ITEM_type of (effect * ty)\n+    MOD_ITEM_type of (stratum * ty)\n   | MOD_ITEM_tag of (header_slots * opaque_id * int)\n   | MOD_ITEM_mod of (mod_view * mod_items)\n   | MOD_ITEM_fn of fn\n@@ -810,7 +810,7 @@ and fmt_ty (ff:Format.formatter) (t:ty) : unit =\n       fmt_ident_tys ff entries;\n       fmt ff \"@]\"\n \n-  | TY_param (i, e) -> (fmt_effect_qual ff e;\n+  | TY_param (i, s) -> (fmt_stratum_qual ff s;\n                         fmt ff \"<p#%d>\" i)\n   | TY_native oid -> fmt ff \"<native#%d>\" (int_of_opaque oid)\n   | TY_named n -> fmt_name ff n\n@@ -833,9 +833,9 @@ and fmt_ty (ff:Format.formatter) (t:ty) : unit =\n \n   | TY_constrained ctrd -> fmt_constrained ff ctrd\n \n-  | TY_obj (effect, fns) ->\n+  | TY_obj (stratum, fns) ->\n       fmt_obox ff;\n-      fmt_effect_qual ff effect;\n+      fmt_stratum_qual ff stratum;\n       fmt ff \"obj \";\n       fmt_obr ff;\n       Hashtbl.iter\n@@ -1628,8 +1628,8 @@ and fmt_slice (ff:Format.formatter) (slice:slice) : unit =\n \n \n and fmt_decl_param (ff:Format.formatter) (param:ty_param) : unit =\n-  let (ident, (i, e)) = param in\n-  fmt_effect_qual ff e;\n+  let (ident, (i, s)) = param in\n+  fmt_stratum_qual ff s;\n   fmt_ident ff ident;\n   fmt ff \"=<p#%d>\" i\n \n@@ -1683,7 +1683,7 @@ and fmt_obj\n     (obj:obj)\n     : unit =\n   fmt_obox ff;\n-  fmt_effect_qual ff obj.obj_effect;\n+  fmt_stratum_qual ff obj.obj_stratum;\n   fmt ff \"obj \";\n   fmt_ident_and_params ff id params;\n   fmt_header_slots ff obj.obj_state;\n@@ -1719,8 +1719,8 @@ and fmt_mod_item (ff:Format.formatter) (id:ident) (item:mod_item) : unit =\n   let params = Array.map (fun i -> i.node) params in\n     begin\n       match item.node.decl_item with\n-          MOD_ITEM_type (e, ty) ->\n-            fmt_effect_qual ff e;\n+          MOD_ITEM_type (s, ty) ->\n+            fmt_stratum_qual ff s;\n             fmt ff \"type \";\n             fmt_ident_and_params ff id params;\n             fmt ff \" = \";"}, {"sha": "734ef06cfa9d023252012ed37a9fe0e0bd2e8798", "filename": "src/boot/fe/fuzz.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Ffuzz.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Ffuzz.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ffuzz.ml?ref=7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "patch": "@@ -104,8 +104,8 @@ let rec generate_mod_item (mis:mod_items) (cx:ctxt) : unit =\n     match Random.int 2 with\n         0 ->\n           let ty = generate_ty cx in\n-          let eff = Ast.EFF_pure in\n-            decl (MOD_ITEM_type (eff, ty))\n+          let st = Ast.STRAT_value in\n+            decl (MOD_ITEM_type (st, ty))\n       | _ ->\n           let mis' = Hashtbl.create 0 in\n           let view = { view_imports = Hashtbl.create 0;"}, {"sha": "fc14443960f012027d3c10140aff9096ece69cae", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "patch": "@@ -692,13 +692,12 @@ and parse_stmts_including_none (ps:pstate) : Ast.stmt array =\n and parse_ty_param (iref:int ref) (ps:pstate) : Ast.ty_param identified =\n   let apos = lexpos ps in\n   let _ = Pexp.parse_opacity ps in\n-  let _ = Pexp.parse_stratum ps in\n-  let e = Pexp.parse_effect ps in\n+  let s = Pexp.parse_stratum ps in\n   let ident = Pexp.parse_ident ps in\n   let i = !iref in\n   let bpos = lexpos ps in\n     incr iref;\n-    span ps apos bpos (ident, (i, e))\n+    span ps apos bpos (ident, (i, s))\n \n and parse_ty_params (ps:pstate)\n     : (Ast.ty_param identified) array =\n@@ -843,7 +842,7 @@ and parse_optional_meta_pat (ps:pstate) (ident:Ast.ident) : Ast.meta_pat =\n and parse_obj_item\n     (ps:pstate)\n     (apos:pos)\n-    (effect:Ast.effect)\n+    (stratum:Ast.stratum)\n     : (Ast.ident * Ast.mod_item) =\n   expect ps OBJ;\n   let (ident, params) = parse_ident_and_params ps \"obj\" in\n@@ -872,7 +871,7 @@ and parse_obj_item\n       expect ps RBRACE;\n       let bpos = lexpos ps in\n       let obj = { Ast.obj_state = state;\n-                  Ast.obj_effect = effect;\n+                  Ast.obj_stratum = stratum;\n                   Ast.obj_constrs = constrs;\n                   Ast.obj_fns = fns;\n                   Ast.obj_drop = !drop }\n@@ -884,7 +883,7 @@ and parse_obj_item\n and parse_tag_item\n     (ps:pstate)\n     (apos:pos)\n-    (effect:Ast.effect)\n+    (stratum:Ast.stratum)\n     : (Ast.ident * Ast.mod_item) array =\n   expect ps TAG;\n   let (ident, params) = parse_ident_and_params ps \"tag\" in\n@@ -946,22 +945,22 @@ and parse_tag_item\n   let ty_item =\n     (ident,\n      span ps apos bpos\n-       (decl params (Ast.MOD_ITEM_type (effect, ty))))\n+       (decl params (Ast.MOD_ITEM_type (stratum, ty))))\n   in\n     Array.append [| ty_item |] constructors\n \n and parse_type_item\n     (ps:pstate)\n     (apos:pos)\n-    (effect:Ast.effect)\n+    (stratum:Ast.stratum)\n     : (Ast.ident * Ast.mod_item) =\n   expect ps TYPE;\n   let (ident, params) = parse_ident_and_params ps \"type\" in\n   let _ = expect ps EQ in\n   let ty = ctxt \"mod type item: ty\" Pexp.parse_ty ps in\n   let _ = expect ps SEMI in\n   let bpos = lexpos ps in\n-  let item = Ast.MOD_ITEM_type (effect, ty) in\n+  let item = Ast.MOD_ITEM_type (stratum, ty) in\n     (ident, span ps apos bpos (decl params item))\n \n and parse_mod_item (ps:pstate)\n@@ -993,14 +992,25 @@ and parse_mod_item (ps:pstate)\n         STATE | GC | IMPURE | UNSAFE | ABS\n       | TYPE | OBJ | TAG | FN | ITER ->\n           let _ = Pexp.parse_opacity ps in\n-          let _ = Pexp.parse_stratum ps in\n+          let stratum = Pexp.parse_stratum ps in\n           let effect = Pexp.parse_effect ps in\n             begin\n               match peek ps with\n-                  OBJ -> [| parse_obj_item ps apos effect |]\n-                | TAG -> parse_tag_item ps apos effect\n-                | TYPE -> [| parse_type_item ps apos effect |]\n+                  OBJ ->\n+                    if effect <> Ast.EFF_pure\n+                    then raise (err \"effect specified for obj\" ps);\n+                    [| parse_obj_item ps apos stratum |]\n+                | TAG ->\n+                    if effect <> Ast.EFF_pure\n+                    then raise (err \"effect specified for tag\" ps);\n+                    parse_tag_item ps apos stratum\n+                | TYPE ->\n+                    if effect <> Ast.EFF_pure\n+                    then raise (err \"effect specified for type\" ps);\n+                    [| parse_type_item ps apos stratum |]\n                 | _ ->\n+                    if stratum <> Ast.STRAT_value\n+                    then raise (err \"stratum specified for fn or iter\" ps);\n                     let is_iter = (peek ps) = ITER in\n                       bump ps;\n                       let (ident, params) = parse_ident_and_params ps \"fn\" in\n@@ -1149,7 +1159,7 @@ and parse_native_mod_item_from_signature (ps:pstate)\n           expect ps SEMI;\n           let bpos = lexpos ps in\n             [| (ident, span ps apos bpos\n-                  (decl params (Ast.MOD_ITEM_type (Ast.EFF_unsafe, t)))) |]\n+                  (decl params (Ast.MOD_ITEM_type (Ast.STRAT_value, t)))) |]\n \n     | _ -> raise (unexpected ps)\n "}, {"sha": "1b26431d7e2afcfcdbdc5920d98962fbc2522f40", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "patch": "@@ -273,14 +273,15 @@ and parse_atomic_ty (ps:pstate) : Ast.ty =\n         bump ps;\n         Ast.TY_mach m\n \n-    | ABS | STATE | GC | IMPURE | UNSAFE | OBJ | FN | ITER ->\n-        let _ = parse_opacity ps in\n-        let _ = parse_stratum ps in\n+    | STATE | GC | IMPURE | UNSAFE | OBJ | FN | ITER ->\n+        let stratum = parse_stratum ps in\n         let effect = parse_effect ps in\n           begin\n             match peek ps with\n                 OBJ ->\n                   bump ps;\n+                  if effect <> Ast.EFF_pure\n+                  then raise (err \"effect specified for obj\" ps);\n                   let methods = Hashtbl.create 0 in\n                   let parse_method ps =\n                     let effect = parse_effect ps in\n@@ -294,9 +295,11 @@ and parse_atomic_ty (ps:pstate) : Ast.ty =\n                   in\n                     ignore (bracketed_zero_or_more LBRACE RBRACE\n                               None parse_method ps);\n-                    Ast.TY_obj (effect, methods)\n+                    Ast.TY_obj (stratum, methods)\n \n               | FN | ITER ->\n+                  if stratum <> Ast.STRAT_value\n+                  then raise (err \"stratum specified for fn or iter\" ps);\n                   Ast.TY_fn (fst (parse_ty_fn effect ps))\n               | _ -> raise (unexpected ps)\n           end"}, {"sha": "2a2ba2c75a082207a1e47a7bbb8eed6d68b21c34", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "patch": "@@ -1539,17 +1539,33 @@ let dwarf_visitor\n       |]\n   in\n \n+  let encode_stratum eff =\n+    (* Note: weird encoding: mutable+pure = gc. *)\n+    let mut_byte, pure_byte =\n+      match eff with\n+          Ast.STRAT_value -> (0,1)\n+        | Ast.STRAT_state -> (1,0)\n+        | Ast.STRAT_gc -> (1,1)\n+    in\n+      SEQ [|\n+        (* DW_AT_mutable: DW_FORM_flag *)\n+        BYTE mut_byte;\n+        (* DW_AT_pure: DW_FORM_flag *)\n+        BYTE pure_byte;\n+      |]\n+  in\n+\n   (* Type-param DIEs. *)\n \n-  let type_param_die (p:(ty_param_idx * Ast.effect)) =\n-    let (idx, eff) = p in\n+  let type_param_die (p:(ty_param_idx * Ast.stratum)) =\n+    let (idx, s) = p in\n       SEQ [|\n         uleb (get_abbrev_code abbrev_rust_type_param);\n         (* DW_AT_rust_type_code: DW_FORM_data1 *)\n         BYTE (dw_rust_type_to_int DW_RUST_type_param);\n         (* DW_AT_rust_type_param_index: DW_FORM_data4 *)\n         WORD (word_ty_mach, IMM (Int64.of_int idx));\n-        encode_effect eff;\n+        encode_stratum s;\n       |]\n   in\n \n@@ -1801,7 +1817,7 @@ let dwarf_visitor\n           emit_die die\n       in\n \n-      let rust_type_param (p:(ty_param_idx * Ast.effect)) =\n+      let rust_type_param (p:(ty_param_idx * Ast.stratum)) =\n         let die = DEF (fix, type_param_die p) in\n           emit_die die\n       in\n@@ -1872,11 +1888,11 @@ let dwarf_visitor\n           emit_null_die ();\n       in\n \n-      let obj_type (eff,ob) =\n+      let obj_type (str,ob) =\n         let die =\n           DEF (fix, SEQ [|\n                  uleb (get_abbrev_code abbrev_obj_type);\n-                 encode_effect eff;\n+                 encode_stratum str;\n                |])\n         in\n           emit_die die;\n@@ -2239,8 +2255,8 @@ let dwarf_visitor\n       curr_cu_line := []\n   in\n \n-  let type_param_decl_die (p:(Ast.ident * (ty_param_idx * Ast.effect))) =\n-    let (ident, (idx, eff)) = p in\n+  let type_param_decl_die (p:(Ast.ident * (ty_param_idx * Ast.stratum))) =\n+    let (ident, (idx, str)) = p in\n       SEQ [|\n         uleb (get_abbrev_code abbrev_rust_type_param_decl);\n         (* DW_AT_rust_type_code: DW_FORM_data1 *)\n@@ -2249,7 +2265,7 @@ let dwarf_visitor\n         ZSTRING (Filename.basename ident);\n         (* DW_AT_rust_type_param_index: DW_FORM_data4 *)\n         WORD (word_ty_mach, IMM (Int64.of_int idx));\n-        encode_effect eff;\n+        encode_stratum str;\n       |]\n   in\n \n@@ -2344,7 +2360,7 @@ let dwarf_visitor\n \n   let emit_typedef_die\n       (id:Ast.ident)\n-      (e:Ast.effect)\n+      (s:Ast.stratum)\n       (ty:Ast.ty)\n       : unit =\n     let abbrev_code = get_abbrev_code abbrev_typedef in\n@@ -2353,7 +2369,7 @@ let dwarf_visitor\n          uleb abbrev_code;\n          (* DW_AT_name: DW_FORM_string *)\n          ZSTRING id;\n-         encode_effect e;\n+         encode_stratum s;\n          (* DW_AT_type: DW_FORM_ref_addr *)\n          (ref_type_die ty);\n        |])\n@@ -2418,13 +2434,13 @@ let dwarf_visitor\n                 emit_type_param_decl_dies item.node.Ast.decl_params;\n             end\n \n-        | Ast.MOD_ITEM_type (e, _) ->\n+        | Ast.MOD_ITEM_type (s, _) ->\n             begin\n               log cx \"walking typedef '%s' with %d type params\"\n                 (path_name())\n                 (Array.length item.node.Ast.decl_params);\n               emit_typedef_die\n-                id e (Hashtbl.find cx.ctxt_all_type_items item.id);\n+                id s (Hashtbl.find cx.ctxt_all_type_items item.id);\n               emit_type_param_decl_dies item.node.Ast.decl_params;\n             end\n \n@@ -2893,12 +2909,21 @@ let rec extract_mod_items\n       | _ -> failwith \"bad effect encoding\"\n   in\n \n+  let get_stratum die =\n+    match (get_flag die DW_AT_mutable, get_flag die DW_AT_pure) with\n+        (* Note: weird encoding: mutable+pure = gc. *)\n+      | (false, true) -> Ast.STRAT_value\n+      | (true, false) -> Ast.STRAT_state\n+      | (true, true) -> Ast.STRAT_gc\n+      | _ -> failwith \"bad statum encoding\"\n+  in\n+\n   let get_name die = get_str die DW_AT_name in\n \n   let get_type_param die =\n     let idx = get_num die DW_AT_rust_type_param_index in\n-    let e = get_effect die in\n-      (idx, e)\n+    let s = get_stratum die in\n+      (idx, s)\n   in\n \n   let get_native_id die =\n@@ -3046,7 +3071,7 @@ let rec extract_mod_items\n             end\n \n         | DW_TAG_interface_type ->\n-            let eff = get_effect die in\n+            let str = get_stratum die in\n             let fns = Hashtbl.create 0 in\n               Array.iter\n                 begin\n@@ -3056,7 +3081,7 @@ let rec extract_mod_items\n                       Hashtbl.add fns (get_name child) (get_ty_fn child)\n                 end\n                 die.die_children;\n-              Ast.TY_obj (eff,fns)\n+              Ast.TY_obj (str,fns)\n \n         | DW_TAG_subroutine_type ->\n             Ast.TY_fn (get_ty_fn die)\n@@ -3162,10 +3187,10 @@ let rec extract_mod_items\n   let die = Hashtbl.find dies i in\n     match die.die_tag with\n         DW_TAG_typedef ->\n-          let effect = get_effect die in\n+          let stratum = get_stratum die in\n           let ident = get_name die in\n           let ty = get_referenced_ty die in\n-          let tyi = Ast.MOD_ITEM_type (effect, ty) in\n+          let tyi = Ast.MOD_ITEM_type (stratum, ty) in\n           let (params, islots) = get_formals die in\n             assert ((Array.length islots) = 0);\n             htab_put mis ident (decl params tyi)"}, {"sha": "f7ad923e25d3c0b73228b304e040731ac5947461", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "patch": "@@ -729,15 +729,15 @@ type ('ty, 'tys, 'slot, 'slots, 'tag) ty_fold =\n       ty_fold_vec : 'ty -> 'ty;\n       ty_fold_rec : (Ast.ident * 'ty) array -> 'ty;\n       ty_fold_fn : (('slots * Ast.constrs * 'slot) * Ast.ty_fn_aux) -> 'ty;\n-      ty_fold_obj : (Ast.effect\n+      ty_fold_obj : (Ast.stratum\n                      * (Ast.ident, (('slots * Ast.constrs * 'slot) *\n                                       Ast.ty_fn_aux)) Hashtbl.t) -> 'ty;\n       ty_fold_chan : 'ty -> 'ty;\n       ty_fold_port : 'ty -> 'ty;\n       ty_fold_task : unit -> 'ty;\n       ty_fold_native : opaque_id -> 'ty;\n       ty_fold_tag : 'tag -> 'ty;\n-      ty_fold_param : (int * Ast.effect) -> 'ty;\n+      ty_fold_param : (int * Ast.stratum) -> 'ty;\n       ty_fold_named : Ast.name -> 'ty;\n       ty_fold_type : unit -> 'ty;\n       ty_fold_box : 'ty -> 'ty;\n@@ -909,7 +909,7 @@ let rec fold_ty_full\n   | Ast.TY_chan t -> f.ty_fold_chan (fold_ty cx f t)\n   | Ast.TY_port t -> f.ty_fold_port (fold_ty cx f t)\n \n-  | Ast.TY_obj (eff,t) -> f.ty_fold_obj (eff, (fold_obj t))\n+  | Ast.TY_obj (st,t) -> f.ty_fold_obj (st, (fold_obj t))\n   | Ast.TY_task -> f.ty_fold_task ()\n \n   | Ast.TY_native x -> f.ty_fold_native x\n@@ -962,7 +962,7 @@ let ty_fold_rebuild (id:Ast.ty -> Ast.ty)\n     ty_fold_task = (fun _ -> id Ast.TY_task);\n     ty_fold_native = (fun oid -> id (Ast.TY_native oid));\n     ty_fold_tag = (fun ttag -> id (Ast.TY_tag ttag));\n-    ty_fold_param = (fun (i, mut) -> id (Ast.TY_param (i, mut)));\n+    ty_fold_param = (fun (i, s) -> id (Ast.TY_param (i, s)));\n     ty_fold_named = (fun n -> id (Ast.TY_named n));\n     ty_fold_type = (fun _ -> id (Ast.TY_type));\n     ty_fold_box = (fun t -> id (Ast.TY_box t));\n@@ -1047,8 +1047,8 @@ let rec rebuild_ty_under_params\n     in\n     let rec rebuild_ty t =\n       let base = ty_fold_rebuild (fun t -> t) in\n-      let ty_fold_param (i, mut) =\n-        let param = Ast.TY_param (i, mut) in\n+      let ty_fold_param (i, s) =\n+        let param = Ast.TY_param (i, s) in\n           match htab_search pmap param with\n               None -> param\n             | Some arg -> arg\n@@ -1629,7 +1629,7 @@ let ty_fn_of_fn (fn:Ast.fn) : Ast.ty_fn =\n ;;\n \n let ty_obj_of_obj (obj:Ast.obj) : Ast.ty_obj =\n-  (obj.Ast.obj_effect,\n+  (obj.Ast.obj_stratum,\n    htab_map obj.Ast.obj_fns (fun i f -> (i, ty_fn_of_fn f.node)))\n ;;\n "}, {"sha": "bbf5550d5c5302033fab04ee01de5ddeba94946a", "filename": "src/lib/_io.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=7abf6eb7c67dfb43540fdcafd6f1e69bdd2a6849", "patch": "@@ -3,13 +3,13 @@ import std._str;\n import std._vec;\n \n \n-type stdio_reader = unsafe obj {\n-                           fn getc() -> int;\n-                           fn ungetc(int i);\n+type stdio_reader = state obj {\n+                          fn getc() -> int;\n+                          fn ungetc(int i);\n };\n \n fn new_stdio_reader(str path) -> stdio_reader {\n-    unsafe obj stdio_FILE_reader(os.libc.FILE f) {\n+    state obj stdio_FILE_reader(os.libc.FILE f) {\n         fn getc() -> int {\n             ret os.libc.fgetc(f);\n         }\n@@ -25,12 +25,12 @@ fn new_stdio_reader(str path) -> stdio_reader {\n }\n \n \n-type buf_reader = unsafe obj {\n-                         fn read() -> vec[u8];\n+type buf_reader = state obj {\n+                        fn read() -> vec[u8];\n };\n \n-type buf_writer = unsafe obj {\n-                         fn write(vec[u8] v);\n+type buf_writer = state obj {\n+                        fn write(vec[u8] v);\n };\n \n fn default_bufsz() -> uint {\n@@ -43,7 +43,7 @@ fn new_buf() -> vec[u8] {\n \n fn new_buf_reader(str path) -> buf_reader {\n \n-    unsafe obj fd_buf_reader(int fd, mutable vec[u8] buf) {\n+    state obj fd_buf_reader(int fd, mutable vec[u8] buf) {\n \n         fn read() -> vec[u8] {\n \n@@ -99,7 +99,7 @@ fn truncate() -> uint { ret 2u; }\n \n fn new_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n \n-    unsafe obj fd_buf_writer(int fd) {\n+    state obj fd_buf_writer(int fd) {\n \n         fn write(vec[u8] v) {\n             auto len = _vec.len[u8](v);\n@@ -152,17 +152,17 @@ fn new_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n }\n \n type writer =\n-    unsafe obj {\n-           fn write_str(str s);\n-           fn write_int(int n);\n-           fn write_uint(uint n);\n+    state obj {\n+          fn write_str(str s);\n+          fn write_int(int n);\n+          fn write_uint(uint n);\n     };\n \n fn file_writer(str path,\n                vec[fileflag] flags)\n     -> writer\n {\n-    unsafe obj fw(buf_writer out) {\n+    state obj fw(buf_writer out) {\n         fn write_str(str s)   { out.write(_str.bytes(s)); }\n         fn write_int(int n)   { out.write(_str.bytes(_int.to_str(n, 10u))); }\n         fn write_uint(uint n) { out.write(_str.bytes(_uint.to_str(n, 10u))); }"}]}