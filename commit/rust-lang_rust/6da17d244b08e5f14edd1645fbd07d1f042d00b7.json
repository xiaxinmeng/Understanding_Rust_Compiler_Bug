{"sha": "6da17d244b08e5f14edd1645fbd07d1f042d00b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTE3ZDI0NGIwOGU1ZjE0ZWRkMTY0NWZiZDA3ZDFmMDQyZDAwYjc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T18:10:04Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T18:10:04Z"}, "message": "`is_const_context` -> `is_inside_const_context`", "tree": {"sha": "fd17913f88ed8e607b63493521fe448f9e441e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd17913f88ed8e607b63493521fe448f9e441e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da17d244b08e5f14edd1645fbd07d1f042d00b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da17d244b08e5f14edd1645fbd07d1f042d00b7", "html_url": "https://github.com/rust-lang/rust/commit/6da17d244b08e5f14edd1645fbd07d1f042d00b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da17d244b08e5f14edd1645fbd07d1f042d00b7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecb593379c3ab075940a3fbf2e980ec5260b6ca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb593379c3ab075940a3fbf2e980ec5260b6ca4", "html_url": "https://github.com/rust-lang/rust/commit/ecb593379c3ab075940a3fbf2e980ec5260b6ca4"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a5b388f410ddf838ab894442c5ea7296d53b0c19", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6da17d244b08e5f14edd1645fbd07d1f042d00b7/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da17d244b08e5f14edd1645fbd07d1f042d00b7/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=6da17d244b08e5f14edd1645fbd07d1f042d00b7", "patch": "@@ -586,7 +586,7 @@ impl<'hir> Map<'hir> {\n \n     /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n     /// Used exclusively for diagnostics, to avoid suggestion function calls.\n-    pub fn is_const_context(&self, hir_id: HirId) -> bool {\n+    pub fn is_inside_const_context(&self, hir_id: HirId) -> bool {\n         self.body_const_context(self.local_def_id(self.enclosing_body_owner(hir_id))).is_some()\n     }\n "}, {"sha": "44d7be4124f5dc241ed3dc6d4536d189cb06052f", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6da17d244b08e5f14edd1645fbd07d1f042d00b7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da17d244b08e5f14edd1645fbd07d1f042d00b7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=6da17d244b08e5f14edd1645fbd07d1f042d00b7", "patch": "@@ -800,12 +800,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let hir::ExprKind::Lit(lit) = &expr.kind { lit.node.is_suffixed() } else { false }\n         };\n \n-        let is_const_context = self.tcx.hir().is_const_context(expr.hir_id);\n+        let in_const_context = self.tcx.hir().is_inside_const_context(expr.hir_id);\n         let suggest_to_change_suffix_or_into =\n             |err: &mut DiagnosticBuilder<'_>, is_fallible: bool| {\n                 let msg = if literal_is_ty_suffixed(expr) {\n                     &lit_msg\n-                } else if is_const_context {\n+                } else if in_const_context {\n                     // Do not recommend `into` or `try_into` in const contexts.\n                     return;\n                 } else if is_fallible {"}, {"sha": "69252046ad1bb96c8540cc64bd12ac5491c4700f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6da17d244b08e5f14edd1645fbd07d1f042d00b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da17d244b08e5f14edd1645fbd07d1f042d00b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6da17d244b08e5f14edd1645fbd07d1f042d00b7", "patch": "@@ -5097,7 +5097,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {\n-        if self.tcx.hir().is_const_context(expr.hir_id) {\n+        if self.tcx.hir().is_inside_const_context(expr.hir_id) {\n             // Do not suggest `Box::new` in const context.\n             return;\n         }\n@@ -5134,7 +5134,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> bool {\n         // Handle #68197.\n \n-        if self.tcx.hir().is_const_context(expr.hir_id) {\n+        if self.tcx.hir().is_inside_const_context(expr.hir_id) {\n             // Do not suggest `Box::new` in const context.\n             return false;\n         }"}]}