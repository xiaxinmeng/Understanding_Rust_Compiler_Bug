{"sha": "64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1", "node_id": "C_kwDOAAsO6NoAKDY0YWQ5NmRkOWE5YTE3MjVlZTAwYmExMDMzYWJjNzBmOTZkMmM1YjE", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-24T16:05:47Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-24T17:18:44Z"}, "message": "add diagnostic items for clippy's", "tree": {"sha": "d61e6adae81356de2888ef04fdb130ee4337c4dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d61e6adae81356de2888ef04fdb130ee4337c4dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEhJzmO046LuvaNO3WIPoWCbA7HW0FAmI8p/gACgkQIPoWCbA7\nHW2HNw/+PpWwwfcjKbaMPkBr0ats+9y2jGmDXc0Yvpyyhu1dSVzXHfVDTO3zopk0\nYovAiMo3l8lvUEtFk1pbrQIkvdqBXuAdSUq89jGeMVf9DPVPfQobYfvPT4uhvkxF\ni72eGfR5sf+YdwqxRqeq6mATGv0tA0mC31M9Kjbo/nCGLXNd8CSbK9MGFCfW4lSK\nR9QtulNwcbErA0HP6KIFKzIdQPqhx6dnreO3PKi1RNi0fX6t9G5FWrLVbp8/WW1Y\njsG8EB+cD43aK+cH+JAAuw9UafiuNLNIb4pljVZJCYBYuMHjf5CCDeNAtdtyZAS1\n9SnjpLpvezh2Zwj7QyTh91ImytY87coRTy2GtTj26RRDuP7pj/qOItCSXNviW28D\nkaOiu7aA4gwa1fWzslh1Jt5l+zmI9w+w+00zF3vN7UC+dQ0kFv8cpZadKhYvSMO/\nGOf2nDqBms98yNB/mJAI5DHrrf451UrW21BqKkDeltZOEG0mZMdM6TD9ecG4t3rg\ndY79ApdtF+RNGtyfDW1VjPfqGzc1xuJRltOQme19VVHrM+IQ448ZfUcn9Px/REkW\nakdf2/vdpzElyqSjmpnikyeOFq+Gpxb3skKUnJWfvQauFCIV5Jkzmw/3TqQ6Sri1\nzHwsw0oq1ZBBCCmpzm3/h0j2FRAU4hAAEjqlsWYdSWp10TOlWcA=\n=0OD9\n-----END PGP SIGNATURE-----", "payload": "tree d61e6adae81356de2888ef04fdb130ee4337c4dc\nparent 8d8135f003b35c3e109d013b2bed9ee9496da615\nauthor Max Baumann <max@bmn.dev> 1648137947 +0100\ncommitter Max Baumann <max@bmn.dev> 1648142324 +0100\n\nadd diagnostic items for clippy's\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1", "html_url": "https://github.com/rust-lang/rust/commit/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8135f003b35c3e109d013b2bed9ee9496da615", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8135f003b35c3e109d013b2bed9ee9496da615", "html_url": "https://github.com/rust-lang/rust/commit/8d8135f003b35c3e109d013b2bed9ee9496da615"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "5cf362bfa7e98b09df567cce192563907db1522d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1", "patch": "@@ -1347,6 +1347,10 @@ symbols! {\n         store,\n         str,\n         str_alloc,\n+        str_split_whitespace,\n+        str_trim,\n+        str_trim_end,\n+        str_trim_start,\n         stringify,\n         stringify_macro,\n         struct_field_attributes,"}, {"sha": "c603420f0f8620ea7ef98e384a97e39bda3f6e6c", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=64ad96dd9a9a1725ee00ba1033abc70f96d2c5b1", "patch": "@@ -904,6 +904,7 @@ impl str {\n     #[must_use = \"this returns the split string as an iterator, \\\n                   without modifying the original\"]\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"str_split_whitespace\")]\n     #[inline]\n     pub fn split_whitespace(&self) -> SplitWhitespace<'_> {\n         SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }\n@@ -1846,6 +1847,7 @@ impl str {\n     #[must_use = \"this returns the trimmed string as a slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"str_trim\")]\n     pub fn trim(&self) -> &str {\n         self.trim_matches(|c: char| c.is_whitespace())\n     }\n@@ -1884,6 +1886,7 @@ impl str {\n     #[must_use = \"this returns the trimmed string as a new slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"str_trim_start\")]\n     pub fn trim_start(&self) -> &str {\n         self.trim_start_matches(|c: char| c.is_whitespace())\n     }\n@@ -1922,6 +1925,7 @@ impl str {\n     #[must_use = \"this returns the trimmed string as a new slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"str_trim_end\")]\n     pub fn trim_end(&self) -> &str {\n         self.trim_end_matches(|c: char| c.is_whitespace())\n     }"}]}