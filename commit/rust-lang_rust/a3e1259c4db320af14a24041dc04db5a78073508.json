{"sha": "a3e1259c4db320af14a24041dc04db5a78073508", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZTEyNTljNGRiMzIwYWYxNGEyNDA0MWRjMDRkYjVhNzgwNzM1MDg=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-07-21T17:12:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-21T17:12:26Z"}, "message": "Rollup merge of #81864 - ijackson:globalalloc-example, r=Amanieu\n\ndocs: GlobalAlloc: completely replace example with one that works\n\nSince this is an example, this could really do with some review from someone familiar with unsafe stuff!\n\nI made the example no longer `no_run` since it works for me.\n\nFixes #81847", "tree": {"sha": "0cfdea3e19ceaf5e07a954d547b3043360e415c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cfdea3e19ceaf5e07a954d547b3043360e415c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3e1259c4db320af14a24041dc04db5a78073508", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+FV6CRBK7hj4Ov3rIwAAxr4IAF7RfqhU3w1n5+1fBMGo47mO\nQf8NcLnHzw+tAN3Gz417GP2fLK64h985iJxqv/dZw8SB9yapRKnwj54jrKYVOrEw\nHpx3nbkMwbOdoDPqFhNFCS6JhyJBkynubsdu3mojfBotpznYU1L1/DtnaUV24i/r\nxHAS4ImmWd+MPSJARrvve5mLUImHBP/tbhEabWaN4RZFQqq0tyAk4cIagswnYm7P\nspRfQfSu/HN/b+FSomd5SAQRhwON91h8Ad2NBdet+wSAtJuBvoXfS+tn6TFm+xax\nZ+3wzzvs/F9O4AQoF/FoAoXGIVWBaNv65u/jdIvGxCwuKGn/El5cGcnMyjbDr8Q=\n=AXJC\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cfdea3e19ceaf5e07a954d547b3043360e415c5\nparent 05f2326c0570fdd64f53532a089bbbc361d190e6\nparent 03d7001564d140a3607a77fe02a5b1aaca0031d6\nauthor Eric Huss <eric@huss.org> 1626887546 -0700\ncommitter GitHub <noreply@github.com> 1626887546 -0700\n\nRollup merge of #81864 - ijackson:globalalloc-example, r=Amanieu\n\ndocs: GlobalAlloc: completely replace example with one that works\n\nSince this is an example, this could really do with some review from someone familiar with unsafe stuff!\n\nI made the example no longer `no_run` since it works for me.\n\nFixes #81847\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e1259c4db320af14a24041dc04db5a78073508", "html_url": "https://github.com/rust-lang/rust/commit/a3e1259c4db320af14a24041dc04db5a78073508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3e1259c4db320af14a24041dc04db5a78073508/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f2326c0570fdd64f53532a089bbbc361d190e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f2326c0570fdd64f53532a089bbbc361d190e6", "html_url": "https://github.com/rust-lang/rust/commit/05f2326c0570fdd64f53532a089bbbc361d190e6"}, {"sha": "03d7001564d140a3607a77fe02a5b1aaca0031d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d7001564d140a3607a77fe02a5b1aaca0031d6", "html_url": "https://github.com/rust-lang/rust/commit/03d7001564d140a3607a77fe02a5b1aaca0031d6"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "0a098c8e2d98633d158e50f175ee7fda400e6cc7", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a3e1259c4db320af14a24041dc04db5a78073508/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e1259c4db320af14a24041dc04db5a78073508/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=a3e1259c4db320af14a24041dc04db5a78073508", "patch": "@@ -20,24 +20,69 @@ use crate::ptr;\n ///\n /// # Example\n ///\n-/// ```no_run\n-/// use std::alloc::{GlobalAlloc, Layout, alloc};\n+/// ```\n+/// use std::alloc::{GlobalAlloc, Layout};\n+/// use std::cell::UnsafeCell;\n /// use std::ptr::null_mut;\n+/// use std::sync::atomic::{\n+///     AtomicUsize,\n+///     Ordering::{Acquire, SeqCst},\n+/// };\n ///\n-/// struct MyAllocator;\n-///\n-/// unsafe impl GlobalAlloc for MyAllocator {\n-///     unsafe fn alloc(&self, _layout: Layout) -> *mut u8 { null_mut() }\n-///     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+/// const ARENA_SIZE: usize = 128 * 1024;\n+/// const MAX_SUPPORTED_ALIGN: usize = 4096;\n+/// #[repr(C, align(4096))] // 4096 == MAX_SUPPORTED_ALIGN\n+/// struct SimpleAllocator {\n+///     arena: UnsafeCell<[u8; ARENA_SIZE]>,\n+///     remaining: AtomicUsize, // we allocate from the top, counting down\n /// }\n ///\n /// #[global_allocator]\n-/// static A: MyAllocator = MyAllocator;\n+/// static ALLOCATOR: SimpleAllocator = SimpleAllocator {\n+///     arena: UnsafeCell::new([0x55; ARENA_SIZE]),\n+///     remaining: AtomicUsize::new(ARENA_SIZE),\n+/// };\n ///\n-/// fn main() {\n-///     unsafe {\n-///         assert!(alloc(Layout::new::<u32>()).is_null())\n+/// unsafe impl Sync for SimpleAllocator {}\n+///\n+/// unsafe impl GlobalAlloc for SimpleAllocator {\n+///     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+///         let size = layout.size();\n+///         let align = layout.align();\n+///\n+///         // `Layout` contract forbids making a `Layout` with align=0, or align not power of 2.\n+///         // So we can safely use a mask to ensure alignment without worrying about UB.\n+///         let align_mask_to_round_down = !(align - 1);\n+///\n+///         if align > MAX_SUPPORTED_ALIGN {\n+///             return null_mut();\n+///         }\n+///\n+///         let mut allocated = 0;\n+///         if self\n+///             .remaining\n+///             .fetch_update(SeqCst, SeqCst, |mut remaining| {\n+///                 if size > remaining {\n+///                     return None;\n+///                 }\n+///                 remaining -= size;\n+///                 remaining &= align_mask_to_round_down;\n+///                 allocated = remaining;\n+///                 Some(remaining)\n+///             })\n+///             .is_err()\n+///         {\n+///             return null_mut();\n+///         };\n+///         (self.arena.get() as *mut u8).add(allocated)\n ///     }\n+///     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+/// }\n+///\n+/// fn main() {\n+///     let _s = format!(\"allocating a string!\");\n+///     let currently = ALLOCATOR.remaining.load(Acquire);\n+///     println!(\"allocated so far: {}\", ARENA_SIZE - currently);\n /// }\n /// ```\n ///"}]}