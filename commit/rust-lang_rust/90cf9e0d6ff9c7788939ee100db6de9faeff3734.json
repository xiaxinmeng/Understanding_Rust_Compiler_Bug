{"sha": "90cf9e0d6ff9c7788939ee100db6de9faeff3734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwY2Y5ZTBkNmZmOWM3Nzg4OTM5ZWUxMDBkYjZkZTlmYWVmZjM3MzQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-28T08:35:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-28T08:35:16Z"}, "message": "Make sure type_use.rs doesn't get lost in recursive enums\n\nCloses #2059", "tree": {"sha": "6c875a322ec0ac618e9a7349fcd7a401d46da6cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c875a322ec0ac618e9a7349fcd7a401d46da6cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90cf9e0d6ff9c7788939ee100db6de9faeff3734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90cf9e0d6ff9c7788939ee100db6de9faeff3734", "html_url": "https://github.com/rust-lang/rust/commit/90cf9e0d6ff9c7788939ee100db6de9faeff3734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90cf9e0d6ff9c7788939ee100db6de9faeff3734/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b6fe0a914c72bd5a3b190f32f0c5c5973d2c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b6fe0a914c72bd5a3b190f32f0c5c5973d2c73", "html_url": "https://github.com/rust-lang/rust/commit/d3b6fe0a914c72bd5a3b190f32f0c5c5973d2c73"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "2d3e07fbe0685e98aeb65c89556dfe9a2157fc3f", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/90cf9e0d6ff9c7788939ee100db6de9faeff3734/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cf9e0d6ff9c7788939ee100db6de9faeff3734/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=90cf9e0d6ff9c7788939ee100db6de9faeff3734", "patch": "@@ -18,6 +18,7 @@\n // invasive.)\n \n import std::map::hashmap;\n+import std::list;\n import driver::session::session;\n import metadata::csearch;\n import syntax::ast::*, syntax::ast_util, syntax::visit;\n@@ -91,21 +92,25 @@ fn type_needs(cx: ctx, use: uint, ty: ty::t) {\n     let mut done = true;\n     // Optimization -- don't descend type if all params already have this use\n     for vec::each(cx.uses) {|u| if u & use != use { done = false } }\n-    if !done { type_needs_inner(cx, use, ty); }\n+    if !done { type_needs_inner(cx, use, ty, list::nil); }\n }\n \n-fn type_needs_inner(cx: ctx, use: uint, ty: ty::t) {\n+fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n+                    enums_seen: list::list<def_id>) {\n     ty::maybe_walk_ty(ty) {|ty|\n         if ty::type_has_params(ty) {\n             alt ty::get(ty).struct {\n               ty::ty_fn(_) | ty::ty_ptr(_) | ty::ty_rptr(_, _) |\n               ty::ty_box(_) | ty::ty_iface(_, _) { false }\n               ty::ty_enum(did, tps) {\n-                for vec::each(*ty::enum_variants(cx.ccx.tcx, did)) {|v|\n-                    for vec::each(v.args) {|aty|\n-                        let t = ty::substitute_type_params(cx.ccx.tcx, tps,\n-                                                           aty);\n-                        type_needs_inner(cx, use, t);\n+                if option::is_none(list::find(enums_seen, {|id| id == did})) {\n+                    let seen = list::cons(did, @enums_seen);\n+                    for vec::each(*ty::enum_variants(cx.ccx.tcx, did)) {|v|\n+                        for vec::each(v.args) {|aty|\n+                            let t = ty::substitute_type_params(cx.ccx.tcx,\n+                                                               tps, aty);\n+                            type_needs_inner(cx, use, t, seen);\n+                        }\n                     }\n                 }\n                 false"}]}