{"sha": "e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "node_id": "C_kwDOAAsO6NoAKGU0ZjJkMGUzYTgyMDQ3NGI0ZGUxYmYyZGM1Yzc3MzQ2MzdjYWRkMTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-04T17:18:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-04T17:18:09Z"}, "message": "Introduce SymbolKind::Derive", "tree": {"sha": "f008cecf88fbe90c0a099f2e1f14ea697cc327f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f008cecf88fbe90c0a099f2e1f14ea697cc327f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "html_url": "https://github.com/rust-lang/rust/commit/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642c1eb720051907036e017e612f615932ea457e", "url": "https://api.github.com/repos/rust-lang/rust/commits/642c1eb720051907036e017e612f615932ea457e", "html_url": "https://github.com/rust-lang/rust/commit/642c1eb720051907036e017e612f615932ea457e"}], "stats": {"total": 230, "additions": 125, "deletions": 105}, "files": [{"sha": "d97e52200dc5ee0bfbb3e883fe62765fd78c7612", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -363,7 +363,13 @@ impl TryToNav for hir::MacroDef {\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().with_value(name_owner),\n-            SymbolKind::Macro,\n+            match self.kind() {\n+                hir::MacroKind::Declarative\n+                | hir::MacroKind::BuiltIn\n+                | hir::MacroKind::ProcMacro => SymbolKind::Macro,\n+                hir::MacroKind::Derive => SymbolKind::Derive,\n+                hir::MacroKind::Attr => SymbolKind::Attribute,\n+            },\n         );\n         res.docs = self.docs(db);\n         Some(res)"}, {"sha": "a5be905983f0d34471fbe045679b3f87efef10ac", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -374,7 +374,13 @@ fn highlight_def(\n ) -> Highlight {\n     let db = sema.db;\n     let mut h = match def {\n-        Definition::Macro(_) => Highlight::new(HlTag::Symbol(SymbolKind::Macro)),\n+        Definition::Macro(m) => Highlight::new(HlTag::Symbol(match m.kind() {\n+            hir::MacroKind::Declarative | hir::MacroKind::BuiltIn | hir::MacroKind::ProcMacro => {\n+                SymbolKind::Macro\n+            }\n+            hir::MacroKind::Derive => SymbolKind::Derive,\n+            hir::MacroKind::Attr => SymbolKind::Attribute,\n+        })),\n         Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::Module(module) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));"}, {"sha": "7216eae0ebcb41f77f837fc71ff303a1cc3a0f9b", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -128,6 +128,7 @@ impl HlTag {\n                 SymbolKind::BuiltinAttr => \"builtin_attr\",\n                 SymbolKind::Const => \"constant\",\n                 SymbolKind::ConstParam => \"const_param\",\n+                SymbolKind::Derive => \"derive\",\n                 SymbolKind::Enum => \"enum\",\n                 SymbolKind::Field => \"field\",\n                 SymbolKind::Function => \"function\","}, {"sha": "b0fbbfda2a12d59abef43f99531fedff5ca14ff9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -44,7 +44,7 @@\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"macro attribute library\">identity</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"attribute attribute library\">identity</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute_bracket attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n@@ -87,7 +87,7 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"macro attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"macro attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "e53bf4917431139c97b80464383a81a35743759e", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -9,7 +9,7 @@ use crate::{completions::Completions, context::CompletionContext, CompletionItem\n \n pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n     let add_completion = |item: &str| {\n-        let mut completion = CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), item);\n+        let mut completion = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), item);\n         completion.insert_text(format!(r#\"\"{}\"\"#, item));\n         acc.add(completion.build());\n     };\n@@ -32,7 +32,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n                 krate.potential_cfg(ctx.db).get_cfg_values(&name).cloned().for_each(|s| {\n                     let insert_text = format!(r#\"\"{}\"\"#, s);\n                     let mut item =\n-                        CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), s);\n+                        CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), s);\n                     item.insert_text(insert_text);\n \n                     acc.add(item.build());\n@@ -42,7 +42,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n         None => {\n             if let Some(krate) = ctx.krate {\n                 krate.potential_cfg(ctx.db).get_cfg_keys().cloned().for_each(|s| {\n-                    let item = CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), s);\n+                    let item = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), s);\n                     acc.add(item.build());\n                 })\n             }"}, {"sha": "0daf1147882b78372db36917c5ec273fa561c435", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -57,7 +57,7 @@ pub(super) fn complete_derive(\n             _ => (name, None),\n         };\n \n-        let mut item = CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), label);\n+        let mut item = CompletionItem::new(SymbolKind::Derive, ctx.source_range(), label);\n         if let Some(docs) = mac.docs(ctx.db) {\n             item.documentation(docs);\n         }\n@@ -67,7 +67,7 @@ pub(super) fn complete_derive(\n         item.add_to(acc);\n     }\n \n-    flyimport_attribute(acc, ctx);\n+    flyimport_derive(acc, ctx);\n }\n \n fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n@@ -82,7 +82,7 @@ fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n     result\n }\n \n-fn flyimport_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+fn flyimport_derive(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if ctx.token.kind() != SyntaxKind::IDENT {\n         return None;\n     };\n@@ -106,13 +106,14 @@ fn flyimport_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option\n                 hir::ItemInNs::Macros(mac) => Some((import, mac)),\n                 _ => None,\n             })\n+            .filter(|&(_, mac)| mac.kind() == MacroKind::Derive)\n             .filter(|&(_, mac)| !ctx.is_item_hidden(&hir::ItemInNs::Macros(mac)))\n             .sorted_by_key(|(import, _)| {\n                 compute_fuzzy_completion_order_key(&import.import_path, &user_input_lowercased)\n             })\n             .filter_map(|(import, mac)| {\n                 let mut item = CompletionItem::new(\n-                    SymbolKind::Attribute,\n+                    SymbolKind::Derive,\n                     ctx.source_range(),\n                     mac.name(ctx.db)?.to_smol_str(),\n                 );"}, {"sha": "805038091c7941daa93211092b7e02679e2ab3e7", "filename": "crates/ide_completion/src/completions/attribute/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -26,7 +26,7 @@ pub(super) fn complete_repr(acc: &mut Completions, ctx: &CompletionContext, inpu\n                 continue;\n             }\n \n-            let mut item = CompletionItem::new(SymbolKind::Attribute, ctx.source_range(), label);\n+            let mut item = CompletionItem::new(SymbolKind::BuiltinAttr, ctx.source_range(), label);\n             if let Some(lookup) = lookup {\n                 item.lookup_by(lookup);\n             }"}, {"sha": "4a6e034dc91515e4996cc65a665eb6aae4bc1e8a", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -235,6 +235,7 @@ impl CompletionItemKind {\n                 SymbolKind::BuiltinAttr => \"ba\",\n                 SymbolKind::Const => \"ct\",\n                 SymbolKind::ConstParam => \"cp\",\n+                SymbolKind::Derive => \"de\",\n                 SymbolKind::Enum => \"en\",\n                 SymbolKind::Field => \"fd\",\n                 SymbolKind::Function => \"fn\","}, {"sha": "8141fab299e3dc1d6678714cd8231b34e79a7020", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -560,9 +560,9 @@ mod cfg {\n         check(\n             r#\"#[cfg(target_endian = $0\"#,\n             expect![[r#\"\n-            at little\n-            at big\n-\"#]],\n+                ba little\n+                ba big\n+            \"#]],\n         );\n     }\n }\n@@ -594,13 +594,13 @@ mod derive {\n #[derive($0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at Default\n-                at Clone, Copy\n-                at PartialEq\n-                at PartialEq, Eq\n-                at PartialEq, Eq, PartialOrd, Ord\n-                at Clone\n-                at PartialEq, PartialOrd\n+                de Default\n+                de Clone, Copy\n+                de PartialEq\n+                de PartialEq, Eq\n+                de PartialEq, Eq, PartialOrd, Ord\n+                de Clone\n+                de PartialEq, PartialOrd\n             \"#]],\n         );\n     }\n@@ -613,12 +613,12 @@ mod derive {\n #[derive(serde::Serialize, PartialEq, $0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at Default\n-                at Clone, Copy\n-                at Eq\n-                at Eq, PartialOrd, Ord\n-                at Clone\n-                at PartialOrd\n+                de Default\n+                de Clone, Copy\n+                de Eq\n+                de Eq, PartialOrd, Ord\n+                de Clone\n+                de PartialOrd\n             \"#]],\n         )\n     }\n@@ -631,12 +631,12 @@ mod derive {\n #[derive($0 serde::Serialize, PartialEq)] struct Test;\n \"#,\n             expect![[r#\"\n-                at Default\n-                at Clone, Copy\n-                at Eq\n-                at Eq, PartialOrd, Ord\n-                at Clone\n-                at PartialOrd\n+                de Default\n+                de Clone, Copy\n+                de Eq\n+                de Eq, PartialOrd, Ord\n+                de Clone\n+                de PartialOrd\n             \"#]],\n         )\n     }\n@@ -649,7 +649,7 @@ mod derive {\n #[derive(der$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at DeriveIdentity (use proc_macros::DeriveIdentity)\n+                de DeriveIdentity (use proc_macros::DeriveIdentity)\n             \"#]],\n         );\n         check_derive(\n@@ -659,7 +659,7 @@ use proc_macros::DeriveIdentity;\n #[derive(der$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                at DeriveIdentity\n+                de DeriveIdentity\n             \"#]],\n         );\n     }\n@@ -775,23 +775,23 @@ mod repr {\n         check_repr(\n             r#\"#[repr($0)] struct Test;\"#,\n             expect![[r#\"\n-            at align($0)\n-            at packed\n-            at transparent\n-            at C\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba align($0)\n+                ba packed\n+                ba transparent\n+                ba C\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -805,21 +805,21 @@ mod repr {\n         check_repr(\n             r#\"#[repr(align(1), $0)] struct Test;\"#,\n             expect![[r#\"\n-            at transparent\n-            at C\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba transparent\n+                ba C\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -828,21 +828,21 @@ mod repr {\n         check_repr(\n             r#\"#[repr(packed, $0)] struct Test;\"#,\n             expect![[r#\"\n-            at transparent\n-            at C\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba transparent\n+                ba C\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -851,21 +851,21 @@ mod repr {\n         check_repr(\n             r#\"#[repr(C, $0)] struct Test;\"#,\n             expect![[r#\"\n-            at align($0)\n-            at packed\n-            at u8\n-            at u16\n-            at u32\n-            at u64\n-            at u128\n-            at usize\n-            at i8\n-            at i16\n-            at i32\n-            at i64\n-            at i28\n-            at isize\n-        \"#]],\n+                ba align($0)\n+                ba packed\n+                ba u8\n+                ba u16\n+                ba u32\n+                ba u64\n+                ba u128\n+                ba usize\n+                ba i8\n+                ba i16\n+                ba i32\n+                ba i64\n+                ba i28\n+                ba isize\n+            \"#]],\n         );\n     }\n \n@@ -874,10 +874,10 @@ mod repr {\n         check_repr(\n             r#\"#[repr(usize, $0)] struct Test;\"#,\n             expect![[r#\"\n-            at align($0)\n-            at packed\n-            at C\n-        \"#]],\n+                ba align($0)\n+                ba packed\n+                ba C\n+            \"#]],\n         );\n     }\n }"}, {"sha": "0d14c176b58c5d70a6b54ed3c103ab88abe914c2", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -149,6 +149,7 @@ pub enum SymbolKind {\n     BuiltinAttr,\n     Const,\n     ConstParam,\n+    Derive,\n     Enum,\n     Field,\n     Function,"}, {"sha": "1097a77afecf9d0290937a369dbae5ce00625a6a", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -53,6 +53,7 @@ define_semantic_token_types![\n     (COMMA, \"comma\"),\n     (COMPARISON, \"comparison\"),\n     (CONST_PARAMETER, \"constParameter\"),\n+    (DERIVE, \"derive\"),\n     (DOT, \"dot\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),"}, {"sha": "f8c46b92fa8b8cda9ce0f189277a8246db06200f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f2d0e3a820474b4de1bf2dc5c7734637cadd10/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=e4f2d0e3a820474b4de1bf2dc5c7734637cadd10", "patch": "@@ -50,9 +50,10 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Enum => lsp_types::SymbolKind::ENUM,\n         SymbolKind::Variant => lsp_types::SymbolKind::ENUM_MEMBER,\n         SymbolKind::Trait => lsp_types::SymbolKind::INTERFACE,\n-        SymbolKind::Macro | SymbolKind::BuiltinAttr | SymbolKind::Attribute => {\n-            lsp_types::SymbolKind::FUNCTION\n-        }\n+        SymbolKind::Macro\n+        | SymbolKind::BuiltinAttr\n+        | SymbolKind::Attribute\n+        | SymbolKind::Derive => lsp_types::SymbolKind::FUNCTION,\n         SymbolKind::Module | SymbolKind::ToolModule => lsp_types::SymbolKind::MODULE,\n         SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TYPE_PARAMETER,\n         SymbolKind::Field => lsp_types::SymbolKind::FIELD,\n@@ -112,6 +113,7 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Attribute => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Const => lsp_types::CompletionItemKind::CONSTANT,\n             SymbolKind::ConstParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n+            SymbolKind::Derive => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Enum => lsp_types::CompletionItemKind::ENUM,\n             SymbolKind::Field => lsp_types::CompletionItemKind::FIELD,\n             SymbolKind::Function => lsp_types::CompletionItemKind::FUNCTION,\n@@ -471,6 +473,7 @@ fn semantic_token_type_and_modifiers(\n     let type_ = match highlight.tag {\n         HlTag::Symbol(symbol) => match symbol {\n             SymbolKind::Attribute => semantic_tokens::ATTRIBUTE,\n+            SymbolKind::Derive => semantic_tokens::DERIVE,\n             SymbolKind::Module => lsp_types::SemanticTokenType::NAMESPACE,\n             SymbolKind::Impl => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,"}]}