{"sha": "e9ff91e9beb6c92d9662242c1090c507b1611c59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZmY5MWU5YmViNmM5MmQ5NjYyMjQyYzEwOTBjNTA3YjE2MTFjNTk=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-01-31T20:35:36Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-02-10T21:21:35Z"}, "message": "Move replace and swap to std::mem. Get rid of std::util\n\nAlso move Void to std::any, move drop to std::mem and reexport in\nprelude.", "tree": {"sha": "cb5bfa3501d0613b0375d6a3f7cb299ac2c22d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb5bfa3501d0613b0375d6a3f7cb299ac2c22d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ff91e9beb6c92d9662242c1090c507b1611c59", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ff91e9beb6c92d9662242c1090c507b1611c59", "html_url": "https://github.com/rust-lang/rust/commit/e9ff91e9beb6c92d9662242c1090c507b1611c59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ff91e9beb6c92d9662242c1090c507b1611c59/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f16e519f13cbfd78cd6c06fc0639df401bc0077", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f16e519f13cbfd78cd6c06fc0639df401bc0077", "html_url": "https://github.com/rust-lang/rust/commit/4f16e519f13cbfd78cd6c06fc0639df401bc0077"}], "stats": {"total": 545, "additions": 245, "deletions": 300}, "files": [{"sha": "6ba1c86fdf28696c75e7b2294c4f1317392cf686", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -40,7 +40,6 @@ use std::rc::Rc;\n use std::rt::global_heap;\n use std::unstable::intrinsics::{TyDesc, get_tydesc};\n use std::unstable::intrinsics;\n-use std::util;\n use std::vec;\n \n // The way arena uses arrays is really deeply awful. The arrays are\n@@ -404,7 +403,7 @@ impl TypedArenaChunk {\n         }\n \n         // Destroy the next chunk.\n-        let next_opt = util::replace(&mut self.next, None);\n+        let next_opt = mem::replace(&mut self.next, None);\n         match next_opt {\n             None => {}\n             Some(mut next) => {"}, {"sha": "15e2303bd8502821379c624f166ef4cefa5d917c", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -23,8 +23,8 @@\n // the reverse direction.\n \n use std::cast;\n+use std::mem::{replace, swap};\n use std::ptr;\n-use std::util;\n use std::iter::Rev;\n use std::iter;\n \n@@ -102,7 +102,7 @@ impl<T> Rawlink<T> {\n \n     /// Return the `Rawlink` and replace with `Rawlink::none()`\n     fn take(&mut self) -> Rawlink<T> {\n-        util::replace(self, Rawlink::none())\n+        replace(self, Rawlink::none())\n     }\n }\n \n@@ -161,7 +161,7 @@ impl<T> DList<T> {\n             Some(ref mut head) => {\n                 new_head.prev = Rawlink::none();\n                 head.prev = Rawlink::some(new_head);\n-                util::swap(head, &mut new_head);\n+                swap(head, &mut new_head);\n                 head.next = Some(new_head);\n             }\n         }\n@@ -319,7 +319,7 @@ impl<T> DList<T> {\n     /// O(1)\n     #[inline]\n     pub fn prepend(&mut self, mut other: DList<T>) {\n-        util::swap(self, &mut other);\n+        swap(self, &mut other);\n         self.append(other);\n     }\n "}, {"sha": "5463d267787db1b09ef887f1256c8ab98567f359", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,8 +13,7 @@\n #[allow(missing_doc)];\n \n use std::clone::Clone;\n-use std::mem::{move_val_init, init};\n-use std::util::{replace, swap};\n+use std::mem::{move_val_init, init, replace, swap};\n use std::vec;\n \n /// A priority queue implemented with a binary heap"}, {"sha": "714bce9d03221107f8d2a4c4a0c852771366c8b0", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -16,7 +16,7 @@\n #[allow(missing_doc)];\n \n use std::iter::{Enumerate, FilterMap, Rev};\n-use std::util::replace;\n+use std::mem::replace;\n use std::vec;\n \n #[allow(missing_doc)]"}, {"sha": "b4ecd02a8fb52428c44cf903b0a71d7fcfea2bb0", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -12,9 +12,9 @@\n //! trees. The only requirement for the types is that the key implements\n //! `TotalOrd`.\n \n-use std::util::{swap, replace};\n use std::iter::{Peekable};\n use std::cmp::Ordering;\n+use std::mem::{replace, swap};\n use std::ptr;\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};"}, {"sha": "cfbc17ca61a3cc87768c4ad61852687530896d5b", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -2592,7 +2592,8 @@ mod bigint_tests {\n #[cfg(test)]\n mod bench {\n     use super::*;\n-    use std::{iter, util};\n+    use std::iter;\n+    use std::mem::replace;\n     use std::num::{FromPrimitive, Zero, One};\n     use extra::test::BenchHarness;\n \n@@ -2609,7 +2610,7 @@ mod bench {\n         let mut f1: BigUint = One::one();\n         for _ in range(0, n) {\n             let f2 = f0 + f1;\n-            f0 = util::replace(&mut f1, f2);\n+            f0 = replace(&mut f1, f2);\n         }\n         f0\n     }"}, {"sha": "174f5fcfc030fda250403cbb7f2f77f6c9328e7f", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,8 +13,8 @@\n use std::cmp;\n use std::hashmap;\n use std::io;\n+use std::mem;\n use std::num;\n-use std::util;\n \n // NB: this can probably be rewritten in terms of num::Num\n // to be less f64-specific.\n@@ -178,7 +178,7 @@ impl<'a> Stats for &'a [f64] {\n             for i in range(0, partials.len()) {\n                 let mut y = partials[i];\n                 if num::abs(x) < num::abs(y) {\n-                    util::swap(&mut x, &mut y);\n+                    mem::swap(&mut x, &mut y);\n                 }\n                 // Rounded `x+y` is stored in `hi` with round-off stored in\n                 // `lo`. Together `hi+lo` are exactly equal to `x+y`."}, {"sha": "10a56b2b2253a649a7bec0d3a0e670ad27141942", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -16,10 +16,10 @@\n //! loop if no other one is provided (and M:N scheduling is desired).\n \n use std::cast;\n+use std::mem::replace;\n use std::rt::rtio::{EventLoop, IoFactory, RemoteCallback, PausableIdleCallback,\n                     Callback};\n use std::unstable::sync::Exclusive;\n-use std::util;\n \n /// This is the only exported function from this module.\n pub fn event_loop() -> ~EventLoop {\n@@ -50,7 +50,7 @@ impl BasicLoop {\n     /// Process everything in the work queue (continually)\n     fn work(&mut self) {\n         while self.work.len() > 0 {\n-            for work in util::replace(&mut self.work, ~[]).move_iter() {\n+            for work in replace(&mut self.work, ~[]).move_iter() {\n                 work();\n             }\n         }\n@@ -60,7 +60,7 @@ impl BasicLoop {\n         let messages = unsafe {\n             self.messages.with(|messages| {\n                 if messages.len() > 0 {\n-                    Some(util::replace(messages, ~[]))\n+                    Some(replace(messages, ~[]))\n                 } else {\n                     None\n                 }"}, {"sha": "b6738f25c68be47f51229b934cf1cdc793bc9791", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -174,6 +174,7 @@\n // NB this does *not* include globs, please keep it that way.\n #[feature(macro_rules)];\n \n+use std::mem::replace;\n use std::os;\n use std::rt::crate_map;\n use std::rt::rtio;\n@@ -182,7 +183,6 @@ use std::rt;\n use std::sync::atomics::{SeqCst, AtomicUint, INIT_ATOMIC_UINT};\n use std::sync::deque;\n use std::task::TaskOpts;\n-use std::util;\n use std::vec;\n use std::sync::arc::UnsafeArc;\n \n@@ -457,10 +457,10 @@ impl SchedPool {\n         }\n \n         // Now that everyone's gone, tell everything to shut down.\n-        for mut handle in util::replace(&mut self.handles, ~[]).move_iter() {\n+        for mut handle in replace(&mut self.handles, ~[]).move_iter() {\n             handle.send(Shutdown);\n         }\n-        for thread in util::replace(&mut self.threads, ~[]).move_iter() {\n+        for thread in replace(&mut self.threads, ~[]).move_iter() {\n             thread.join();\n         }\n     }"}, {"sha": "bcf79063b1acc037cf4708bca7ea5480565e1540", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,7 +13,7 @@\n //! which are available for use externally when compiled as a library.\n \n use std::hashmap::{HashSet, HashMap};\n-use std::util;\n+use std::mem::replace;\n \n use metadata::csearch;\n use middle::resolve;\n@@ -679,7 +679,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n             return;\n         }\n \n-        let orig_curitem = util::replace(&mut self.curitem, item.id);\n+        let orig_curitem = replace(&mut self.curitem, item.id);\n         visit::walk_item(self, item, ());\n         self.curitem = orig_curitem;\n     }\n@@ -861,7 +861,7 @@ impl Visitor<()> for SanePrivacyVisitor {\n             self.check_sane_privacy(item);\n         }\n \n-        let orig_in_fn = util::replace(&mut self.in_fn, match item.node {\n+        let orig_in_fn = replace(&mut self.in_fn, match item.node {\n             ast::ItemMod(..) => false, // modules turn privacy back on\n             _ => self.in_fn,           // otherwise we inherit\n         });\n@@ -872,7 +872,7 @@ impl Visitor<()> for SanePrivacyVisitor {\n     fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,\n                 b: &ast::Block, s: Span, n: ast::NodeId, _: ()) {\n         // This catches both functions and methods\n-        let orig_in_fn = util::replace(&mut self.in_fn, true);\n+        let orig_in_fn = replace(&mut self.in_fn, true);\n         visit::walk_fn(self, fk, fd, b, s, n, ());\n         self.in_fn = orig_in_fn;\n     }"}, {"sha": "a941c1318cab219f82e410a6c8c9a4a73c65a0c6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -31,7 +31,7 @@ use syntax::visit::Visitor;\n use std::cell::{Cell, RefCell};\n use std::uint;\n use std::hashmap::{HashMap, HashSet};\n-use std::util;\n+use std::mem::replace;\n \n // Definition mapping\n pub type DefMap = @RefCell<HashMap<NodeId,Def>>;\n@@ -4067,7 +4067,7 @@ impl Resolver {\n                             new_trait_refs.push(def_id_of_def(*def));\n                         }\n                     }\n-                    original_trait_refs = Some(util::replace(\n+                    original_trait_refs = Some(replace(\n                         &mut this.current_trait_refs,\n                         Some(new_trait_refs)));\n                 }"}, {"sha": "e2e7a58f5231b0426eb41af3689500181be11899", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -115,8 +115,8 @@ use util::ppaux::{UserString, Repr};\n \n use std::cell::{Cell, RefCell};\n use std::hashmap::HashMap;\n+use std::mem::replace;\n use std::result;\n-use std::util::replace;\n use std::vec;\n use syntax::abi::AbiSet;\n use syntax::ast::{Provided, Required};"}, {"sha": "83af47d585e4d346cc35a012a9f039a9dc2a26de", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std;\n use clean::*;\n use std::iter::Extendable;\n+use std::mem::{replace, swap};\n \n pub trait DocFolder {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n@@ -19,7 +19,6 @@ pub trait DocFolder {\n \n     /// don't override!\n     fn fold_item_recur(&mut self, item: Item) -> Option<Item> {\n-        use std::util::swap;\n         let Item { attrs, name, source, visibility, id, inner } = item;\n         let inner = inner;\n         let c = |x| self.fold_item(x);\n@@ -92,7 +91,7 @@ pub trait DocFolder {\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {\n-        c.module = match std::util::replace(&mut c.module, None) {\n+        c.module = match replace(&mut c.module, None) {\n             Some(module) => self.fold_item(module), None => None\n         };\n         return c;"}, {"sha": "0ce2501d2cc7f8fd65a37285ef3c10b5ec190997", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use std::libc::c_int;\n+use std::mem::replace;\n use std::rt::local::Local;\n use std::rt::rtio::RtioTimer;\n use std::rt::task::{BlockedTask, Task};\n-use std::util;\n \n use homing::{HomeHandle, HomingIO};\n use super::{UvHandle, ForbidUnwind, ForbidSwitch};\n@@ -76,7 +76,7 @@ impl RtioTimer for TimerWatcher {\n         let missile = self.fire_homing_missile();\n         self.id += 1;\n         self.stop();\n-        let _missile = match util::replace(&mut self.action, None) {\n+        let _missile = match replace(&mut self.action, None) {\n             None => missile, // no need to do a homing dance\n             Some(action) => {\n                 drop(missile);      // un-home ourself\n@@ -108,7 +108,7 @@ impl RtioTimer for TimerWatcher {\n             self.id += 1;\n             self.stop();\n             self.start(msecs, 0);\n-            util::replace(&mut self.action, Some(SendOnce(chan)))\n+            replace(&mut self.action, Some(SendOnce(chan)))\n         };\n \n         return port;\n@@ -124,7 +124,7 @@ impl RtioTimer for TimerWatcher {\n             self.id += 1;\n             self.stop();\n             self.start(msecs, msecs);\n-            util::replace(&mut self.action, Some(SendMany(chan, self.id)))\n+            replace(&mut self.action, Some(SendMany(chan, self.id)))\n         };\n \n         return port;"}, {"sha": "24da59341ccddb58dc2c5bae0dd061dbc1c39ee1", "filename": "src/libstd/any.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -26,7 +26,9 @@ use result::{Result, Ok, Err};\n use to_str::ToStr;\n use unstable::intrinsics::TypeId;\n use unstable::intrinsics;\n-use util::Void;\n+\n+/// A type with no inhabitants\n+pub enum Void { }\n \n ///////////////////////////////////////////////////////////////////////////////\n // Any trait"}, {"sha": "34bf83ac49101ffb45e83c78a6008f34ee735f1e", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -257,7 +257,6 @@ macro_rules! test (\n             use super::*;\n             use super::super::*;\n             use task;\n-            use util;\n \n             fn f() $b\n "}, {"sha": "c8b5d3b2d5a486df13c8f47a2227022fe131e59f", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -477,6 +477,7 @@ will look like `\"\\\\{\"`.\n \n */\n \n+use any;\n use cast;\n use char::Char;\n use container::Container;\n@@ -489,7 +490,6 @@ use repr;\n use result::{Ok, Err};\n use str::StrSlice;\n use str;\n-use util;\n use vec::ImmutableVector;\n use vec;\n \n@@ -524,8 +524,8 @@ pub struct Formatter<'a> {\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n pub struct Argument<'a> {\n-    priv formatter: extern \"Rust\" fn(&util::Void, &mut Formatter) -> Result,\n-    priv value: &'a util::Void,\n+    priv formatter: extern \"Rust\" fn(&any::Void, &mut Formatter) -> Result,\n+    priv value: &'a any::Void,\n }\n \n impl<'a> Arguments<'a> {\n@@ -794,11 +794,11 @@ impl<'a> Formatter<'a> {\n             rt::CountImplied => { None }\n             rt::CountIsParam(i) => {\n                 let v = self.args[i].value;\n-                unsafe { Some(*(v as *util::Void as *uint)) }\n+                unsafe { Some(*(v as *any::Void as *uint)) }\n             }\n             rt::CountIsNextParam => {\n                 let v = self.curarg.next().unwrap().value;\n-                unsafe { Some(*(v as *util::Void as *uint)) }\n+                unsafe { Some(*(v as *any::Void as *uint)) }\n             }\n         }\n     }"}, {"sha": "953cc66a2cbcc2cbe20e1eb9da12818646d54434", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -60,11 +60,11 @@ use hash::Hash;\n use iter;\n use iter::{Iterator, FromIterator, Extendable};\n use iter::{FilterMap, Chain, Repeat, Zip};\n+use mem::replace;\n use num;\n use option::{None, Option, Some};\n use rand::Rng;\n use rand;\n-use util::replace;\n use vec::{ImmutableVector, MutableVector, OwnedVector, Items, MutItems};\n use vec_ng;\n use vec_ng::Vec;"}, {"sha": "cd6c6763f666db307909e8bc91c0c5ecf1561459", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -659,7 +659,6 @@ mod test {\n     use io::fs::{File, rmdir, mkdir, readdir, rmdir_recursive,\n                  mkdir_recursive, copy, unlink, stat, symlink, link,\n                  readlink, chmod, lstat, change_file_times};\n-    use util;\n     use path::Path;\n     use io;\n     use ops::Drop;"}, {"sha": "2cc0c67ff6abab0dd44ff285430b15be37a0ba66", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -32,14 +32,14 @@ use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError,\n          standard_error, EndOfFile, LineBufferedWriter};\n use libc;\n+use mem::replace;\n use option::{Option, Some, None};\n use prelude::drop;\n use result::{Ok, Err};\n use rt::local::Local;\n use rt::rtio::{DontClose, IoFactory, LocalIo, RtioFileStream, RtioTTY};\n use rt::task::Task;\n use str::StrSlice;\n-use util;\n use vec::ImmutableVector;\n \n // And so begins the tale of acquiring a uv handle to a stdio stream on all\n@@ -132,7 +132,7 @@ fn reset_helper(w: ~Writer,\n /// Note that this does not need to be called for all new tasks; the default\n /// output handle is to the process's stdout stream.\n pub fn set_stdout(stdout: ~Writer) -> Option<~Writer> {\n-    reset_helper(stdout, |t, w| util::replace(&mut t.stdout, Some(w)))\n+    reset_helper(stdout, |t, w| replace(&mut t.stdout, Some(w)))\n }\n \n /// Resets the task-local stderr handle to the specified writer\n@@ -144,7 +144,7 @@ pub fn set_stdout(stdout: ~Writer) -> Option<~Writer> {\n /// Note that this does not need to be called for all new tasks; the default\n /// output handle is to the process's stderr stream.\n pub fn set_stderr(stderr: ~Writer) -> Option<~Writer> {\n-    reset_helper(stderr, |t, w| util::replace(&mut t.stderr, Some(w)))\n+    reset_helper(stderr, |t, w| replace(&mut t.stderr, Some(w)))\n }\n \n // Helper to access the local task's stdout handle\n@@ -183,7 +183,7 @@ fn with_task_stdout(f: |&mut Writer| -> IoResult<()> ) {\n             // temporarily take the task, swap the handles, put the task in TLS,\n             // and only then drop the previous handle.\n             let mut t = Local::borrow(None::<Task>);\n-            let prev = util::replace(&mut t.get().stdout, my_stdout);\n+            let prev = replace(&mut t.get().stdout, my_stdout);\n             drop(t);\n             drop(prev);\n             ret"}, {"sha": "0b1c084a5467ff73d848a95e92580cf979dd5039", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -71,7 +71,7 @@ use ops::{Add, Mul, Sub};\n use cmp::{Eq, Ord};\n use clone::Clone;\n use uint;\n-use util;\n+use mem;\n \n /// Conversion from an `Iterator`\n pub trait FromIterator<A> {\n@@ -701,7 +701,7 @@ impl<'a, A, T: DoubleEndedIterator<&'a mut A>> MutableDoubleEndedIterator for T\n     fn reverse_(&mut self) {\n         loop {\n             match (self.next(), self.next_back()) {\n-                (Some(x), Some(y)) => util::swap(x, y),\n+                (Some(x), Some(y)) => mem::swap(x, y),\n                 _ => break\n             }\n         }"}, {"sha": "e0666ef417927006a96240c762e9e6821bbd0748", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -178,7 +178,6 @@ pub mod cast;\n pub mod fmt;\n pub mod cleanup;\n pub mod logging;\n-pub mod util;\n pub mod mem;\n \n "}, {"sha": "043da46ba5e2c24173325da3e8d0a65316de941c", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -45,7 +45,7 @@ use option::{None, Option, Some};\n use vec::{ImmutableVector, MutableVector, OwnedVector};\n use iter::{Iterator};\n use rt::task::{Task, LocalStorage};\n-use util::replace;\n+use mem::replace;\n \n /**\n  * Indexes a task-local data slot. This pointer is used for comparison to\n@@ -149,7 +149,7 @@ pub fn pop<T: 'static>(key: Key<T>) -> Option<T> {\n                     fail!(\"TLS value cannot be removed because it is currently \\\n                           borrowed as {}\", loan.describe());\n                 }\n-                // Move the data out of the `entry` slot via util::replace.\n+                // Move the data out of the `entry` slot via prelude::replace.\n                 // This is guaranteed to succeed because we already matched\n                 // on `Some` above.\n                 let data = match replace(entry, None) {"}, {"sha": "165a83aa975cd639c149b3fa4c6480f611c8d164", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -99,13 +99,13 @@ use fmt;\n use io::LineBufferedWriter;\n use io;\n use io::Writer;\n+use mem::replace;\n use ops::Drop;\n use option::{Some, None, Option};\n use prelude::drop;\n use result::{Ok, Err};\n use rt::local::Local;\n use rt::task::Task;\n-use util;\n \n /// Debug log level\n pub static DEBUG: u32 = 4;\n@@ -173,7 +173,7 @@ pub fn log(level: u32, args: &fmt::Arguments) {\n     logger.get_mut_ref().log(level, args);\n \n     let mut task = Local::borrow(None::<Task>);\n-    let prev = util::replace(&mut task.get().logger, logger);\n+    let prev = replace(&mut task.get().logger, logger);\n     drop(task);\n     drop(prev);\n }\n@@ -182,5 +182,5 @@ pub fn log(level: u32, args: &fmt::Arguments) {\n /// logger.\n pub fn set_logger(logger: ~Logger) -> Option<~Logger> {\n     let mut task = Local::borrow(None::<Task>);\n-    util::replace(&mut task.get().logger, Some(logger))\n+    replace(&mut task.get().logger, Some(logger))\n }"}, {"sha": "09d2db329ca0351d00d652023d70975c78c19ed8", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -15,6 +15,8 @@\n \n #[allow(missing_doc)]; // FIXME\n \n+use cast;\n+use ptr;\n use unstable::intrinsics;\n use unstable::intrinsics::{bswap16, bswap32, bswap64};\n \n@@ -126,9 +128,45 @@ pub unsafe fn move_val_init<T>(dst: &mut T, src: T) {\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_be64(x: i64) -> i64 { x }\n \n \n+/**\n+ * Swap the values at two mutable locations of the same type, without\n+ * deinitialising or copying either one.\n+ */\n+#[inline]\n+pub fn swap<T>(x: &mut T, y: &mut T) {\n+    unsafe {\n+        // Give ourselves some scratch space to work with\n+        let mut t: T = uninit();\n+\n+        // Perform the swap, `&mut` pointers never alias\n+        ptr::copy_nonoverlapping_memory(&mut t, &*x, 1);\n+        ptr::copy_nonoverlapping_memory(x, &*y, 1);\n+        ptr::copy_nonoverlapping_memory(y, &t, 1);\n+\n+        // y and t now point to the same thing, but we need to completely forget `tmp`\n+        // because it's no longer relevant.\n+        cast::forget(t);\n+    }\n+}\n+\n+/**\n+ * Replace the value at a mutable location with a new one, returning the old\n+ * value, without deinitialising or copying either one.\n+ */\n+#[inline]\n+pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n+    swap(dest, &mut src);\n+    src\n+}\n+\n+/// Disposes of a value.\n+#[inline]\n+pub fn drop<T>(_x: T) { }\n+\n #[cfg(test)]\n mod tests {\n     use mem::*;\n+    use option::{Some,None};\n \n     #[test]\n     fn size_of_basic() {\n@@ -207,4 +245,86 @@ mod tests {\n         assert_eq!(pref_align_of_val(&1u16), 2u);\n         assert_eq!(pref_align_of_val(&1u32), 4u);\n     }\n+\n+    #[test]\n+    fn test_swap() {\n+        let mut x = 31337;\n+        let mut y = 42;\n+        swap(&mut x, &mut y);\n+        assert_eq!(x, 42);\n+        assert_eq!(y, 31337);\n+    }\n+\n+    #[test]\n+    fn test_replace() {\n+        let mut x = Some(~\"test\");\n+        let y = replace(&mut x, None);\n+        assert!(x.is_none());\n+        assert!(y.is_some());\n+    }\n+}\n+\n+/// Completely miscellaneous language-construct benchmarks.\n+#[cfg(test)]\n+mod bench {\n+\n+    use extra::test::BenchHarness;\n+    use option::{Some,None};\n+\n+    // Static/dynamic method dispatch\n+\n+    struct Struct {\n+        field: int\n+    }\n+\n+    trait Trait {\n+        fn method(&self) -> int;\n+    }\n+\n+    impl Trait for Struct {\n+        fn method(&self) -> int {\n+            self.field\n+        }\n+    }\n+\n+    #[bench]\n+    fn trait_vtable_method_call(bh: &mut BenchHarness) {\n+        let s = Struct { field: 10 };\n+        let t = &s as &Trait;\n+        bh.iter(|| {\n+            t.method();\n+        });\n+    }\n+\n+    #[bench]\n+    fn trait_static_method_call(bh: &mut BenchHarness) {\n+        let s = Struct { field: 10 };\n+        bh.iter(|| {\n+            s.method();\n+        });\n+    }\n+\n+    // Overhead of various match forms\n+\n+    #[bench]\n+    fn match_option_some(bh: &mut BenchHarness) {\n+        let x = Some(10);\n+        bh.iter(|| {\n+            let _q = match x {\n+                Some(y) => y,\n+                None => 11\n+            };\n+        });\n+    }\n+\n+    #[bench]\n+    fn match_vec_pattern(bh: &mut BenchHarness) {\n+        let x = [1,2,3,4,5,6];\n+        bh.iter(|| {\n+            let _q = match x {\n+                [1,2,3,..] => 10,\n+                _ => 11\n+            };\n+        });\n+    }\n }"}, {"sha": "44d78be93d62419da37122e9590bfef3b2faadf5", "filename": "src/libstd/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -45,9 +45,9 @@ use default::Default;\n use fmt;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use kinds::Send;\n+use mem;\n use str::OwnedStr;\n use to_str::ToStr;\n-use util;\n use vec;\n \n /// The option type\n@@ -285,7 +285,7 @@ impl<T> Option<T> {\n     /// Take the value out of the option, leaving a `None` in its place.\n     #[inline]\n     pub fn take(&mut self) -> Option<T> {\n-        util::replace(self, None)\n+        mem::replace(self, None)\n     }\n \n     /// Filters an optional value using a given function."}, {"sha": "471ec050192b0a0762071fc4f9bbbed63101b337", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -40,6 +40,7 @@ pub use result::{Result, Ok, Err};\n // Reexported functions\n pub use from_str::from_str;\n pub use iter::range;\n+pub use mem::drop;\n \n // Reexported types and traits\n \n@@ -85,7 +86,3 @@ pub use task::spawn;\n // Reexported statics\n #[cfg(not(test))]\n pub use gc::GC;\n-\n-/// Disposes of a value.\n-#[inline]\n-pub fn drop<T>(_x: T) { }"}, {"sha": "80439d698992174a18aa9a44aa00591f185b9fe0", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -18,7 +18,6 @@ use iter::{range, Iterator};\n use mem;\n use option::{Option, Some, None};\n use unstable::intrinsics;\n-use util::swap;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n \n@@ -152,7 +151,7 @@ pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n  */\n #[inline]\n pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n-    swap(cast::transmute(dest), &mut src); // cannot overlap\n+    mem::swap(cast::transmute(dest), &mut src); // cannot overlap\n     src\n }\n "}, {"sha": "c0f4efba0d1d6b836fbbf053be78d47d0029c248", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -636,8 +636,8 @@ fn test_repr() {\n     use str;\n     use str::Str;\n     use io::stdio::println;\n-    use util::swap;\n     use char::is_alphabetic;\n+    use mem::swap;\n \n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::MemWriter::new();"}, {"sha": "cef03d66923af718a52b5a27e2b0b65750f3ad5c", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -72,7 +72,7 @@ mod imp {\n     #[cfg(not(test))] use str;\n     use unstable::finally::Finally;\n     use unstable::mutex::{Mutex, MUTEX_INIT};\n-    use util;\n+    use mem;\n     #[cfg(not(test))] use vec;\n \n     static mut global_args_ptr: uint = 0;\n@@ -93,7 +93,7 @@ mod imp {\n     pub fn take() -> Option<~[~str]> {\n         with_lock(|| unsafe {\n             let ptr = get_global_ptr();\n-            let val = util::replace(&mut *ptr, None);\n+            let val = mem::replace(&mut *ptr, None);\n             val.as_ref().map(|s: &~~[~str]| (**s).clone())\n         })\n     }"}, {"sha": "185f4b4edd7a588d8b938c801deb3fb2bf335aed", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -14,10 +14,10 @@\n \n use cast;\n use iter::Iterator;\n+use mem;\n use option::{Some, None};\n use ptr::RawPtr;\n use unstable::sync::Exclusive;\n-use util;\n use vec::OwnedVector;\n \n type Queue = Exclusive<~[proc()]>;\n@@ -60,7 +60,7 @@ pub fn run() {\n         QUEUE = 0 as *mut Queue;\n         let mut vec = None;\n         state.with(|arr| {\n-            vec = Some(util::replace(arr, ~[]));\n+            vec = Some(mem::replace(arr, ~[]));\n         });\n         vec.take_unwrap()\n     };"}, {"sha": "2f4e705735ea7833c2d084c69da7bf86edf4240e", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -60,6 +60,7 @@ use c_str::CString;\n use cast;\n use fmt;\n use kinds::Send;\n+use mem;\n use option::{Some, None, Option};\n use prelude::drop;\n use ptr::RawPtr;\n@@ -69,7 +70,6 @@ use rt::task::Task;\n use str::Str;\n use task::TaskResult;\n use unstable::intrinsics;\n-use util;\n \n use uw = self::libunwind;\n \n@@ -470,7 +470,7 @@ fn begin_unwind_inner(msg: ~Any, file: &'static str, line: uint) -> ! {\n                                             n, msg_s, file, line);\n                     task = Local::take();\n \n-                    match util::replace(&mut task.stderr, Some(stderr)) {\n+                    match mem::replace(&mut task.stderr, Some(stderr)) {\n                         Some(prev) => {\n                             Local::put(task);\n                             drop(prev);"}, {"sha": "f57c5bc649a91ae7fb58312e18c808d98c8be6f2", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -15,7 +15,6 @@ use container::{Container, Map, Mutable, MutableMap};\n use iter::{Extendable, FromIterator, Iterator};\n use mem;\n use uint;\n-use util::replace;\n use mem::init;\n use vec;\n use ptr::RawPtr;\n@@ -429,15 +428,15 @@ fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint, value: T,\n         }\n         External(stored_key, ref mut stored_value) if stored_key == key => {\n             // swap in the new value and return the old.\n-            return Some(replace(stored_value, value));\n+            return Some(mem::replace(stored_value, value));\n         }\n         _ => {}\n     }\n \n     // conflict, an external node with differing keys: we have to\n     // split the node, so we need the old value by value; hence we\n     // have to move out of `child`.\n-    match replace(child, Nothing) {\n+    match mem::replace(child, Nothing) {\n         External(stored_key, stored_value) => {\n             let mut new = ~TrieNode::new();\n             insert(&mut new.count,\n@@ -456,7 +455,7 @@ fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n              idx: uint) -> Option<T> {\n     let (ret, this) = match *child {\n       External(stored, _) if stored == key => {\n-        match replace(child, Nothing) {\n+        match mem::replace(child, Nothing) {\n             External(_, value) => (Some(value), true),\n             _ => fail!()\n         }"}, {"sha": "644b5cefdc8762a24225774b336b3c87c59f7478", "filename": "src/libstd/util.rs", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/4f16e519f13cbfd78cd6c06fc0639df401bc0077/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f16e519f13cbfd78cd6c06fc0639df401bc0077/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=4f16e519f13cbfd78cd6c06fc0639df401bc0077", "patch": "@@ -1,160 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Miscellaneous helpers for common patterns\n-\n-use cast;\n-use mem;\n-use ptr;\n-\n-/// The identity function.\n-#[inline]\n-pub fn id<T>(x: T) -> T { x }\n-\n-/**\n- * Swap the values at two mutable locations of the same type, without\n- * deinitialising or copying either one.\n- */\n-#[inline]\n-pub fn swap<T>(x: &mut T, y: &mut T) {\n-    unsafe {\n-        // Give ourselves some scratch space to work with\n-        let mut t: T = mem::uninit();\n-\n-        // Perform the swap, `&mut` pointers never alias\n-        ptr::copy_nonoverlapping_memory(&mut t, &*x, 1);\n-        ptr::copy_nonoverlapping_memory(x, &*y, 1);\n-        ptr::copy_nonoverlapping_memory(y, &t, 1);\n-\n-        // y and t now point to the same thing, but we need to completely forget `tmp`\n-        // because it's no longer relevant.\n-        cast::forget(t);\n-    }\n-}\n-\n-/**\n- * Replace the value at a mutable location with a new one, returning the old\n- * value, without deinitialising or copying either one.\n- */\n-#[inline]\n-pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n-    swap(dest, &mut src);\n-    src\n-}\n-\n-/// A type with no inhabitants\n-pub enum Void { }\n-\n-impl Void {\n-    /// A utility function for ignoring this uninhabited type\n-    pub fn uninhabited(self) -> ! {\n-        match self {\n-            // Nothing to match on\n-        }\n-    }\n-}\n-\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-    use prelude::*;\n-\n-    #[test]\n-    fn identity_crisis() {\n-        // Writing a test for the identity function. How did it come to this?\n-        let x = ~[(5, false)];\n-        //FIXME #3387 assert!(x.eq(id(x.clone())));\n-        let y = x.clone();\n-        assert!(x.eq(&id(y)));\n-    }\n-\n-    #[test]\n-    fn test_swap() {\n-        let mut x = 31337;\n-        let mut y = 42;\n-        swap(&mut x, &mut y);\n-        assert_eq!(x, 42);\n-        assert_eq!(y, 31337);\n-    }\n-\n-    #[test]\n-    fn test_replace() {\n-        let mut x = Some(~\"test\");\n-        let y = replace(&mut x, None);\n-        assert!(x.is_none());\n-        assert!(y.is_some());\n-    }\n-}\n-\n-/// Completely miscellaneous language-construct benchmarks.\n-#[cfg(test)]\n-mod bench {\n-\n-    use extra::test::BenchHarness;\n-    use option::{Some,None};\n-\n-    // Static/dynamic method dispatch\n-\n-    struct Struct {\n-        field: int\n-    }\n-\n-    trait Trait {\n-        fn method(&self) -> int;\n-    }\n-\n-    impl Trait for Struct {\n-        fn method(&self) -> int {\n-            self.field\n-        }\n-    }\n-\n-    #[bench]\n-    fn trait_vtable_method_call(bh: &mut BenchHarness) {\n-        let s = Struct { field: 10 };\n-        let t = &s as &Trait;\n-        bh.iter(|| {\n-            t.method();\n-        });\n-    }\n-\n-    #[bench]\n-    fn trait_static_method_call(bh: &mut BenchHarness) {\n-        let s = Struct { field: 10 };\n-        bh.iter(|| {\n-            s.method();\n-        });\n-    }\n-\n-    // Overhead of various match forms\n-\n-    #[bench]\n-    fn match_option_some(bh: &mut BenchHarness) {\n-        let x = Some(10);\n-        bh.iter(|| {\n-            let _q = match x {\n-                Some(y) => y,\n-                None => 11\n-            };\n-        });\n-    }\n-\n-    #[bench]\n-    fn match_vec_pattern(bh: &mut BenchHarness) {\n-        let x = [1,2,3,4,5,6];\n-        bh.iter(|| {\n-            let _q = match x {\n-                [1,2,3,..] => 10,\n-                _ => 11\n-            };\n-        });\n-    }\n-}"}, {"sha": "b58e0820cfd204ae903a6109d610e07d967eacad", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -121,7 +121,6 @@ use kinds::marker;\n use uint;\n use unstable::finally::Finally;\n use unstable::raw::{Repr, Slice, Vec};\n-use util;\n \n /**\n  * Creates and initializes an owned vector.\n@@ -1799,7 +1798,7 @@ impl<T:Eq> OwnedEqVector<T> for ~[T] {\n                 if *p_r != *p_wm1 {\n                     if r != w {\n                         let p_w = ptr::mut_offset(p_wm1, 1);\n-                        util::swap(&mut *p_r, &mut *p_w);\n+                        mem::swap(&mut *p_r, &mut *p_w);\n                     }\n                     w += 1;\n                 }\n@@ -1994,7 +1993,7 @@ fn merge_sort<T>(v: &mut [T], compare: |&T, &T| -> Ordering) {\n             }\n         }\n \n-        util::swap(&mut buf_dat, &mut buf_tmp);\n+        mem::swap(&mut buf_dat, &mut buf_tmp);\n \n         width *= 2;\n     }\n@@ -2374,7 +2373,7 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n     #[inline]\n     fn move_from(self, mut src: ~[T], start: uint, end: uint) -> uint {\n         for (a, b) in self.mut_iter().zip(src.mut_slice(start, end).mut_iter()) {\n-            util::swap(a, b);\n+            mem::swap(a, b);\n         }\n         cmp::min(self.len(), end-start)\n     }\n@@ -2757,14 +2756,14 @@ impl<'a, T> Iterator<&'a mut [T]> for MutSplits<'a, T> {\n         match self.v.iter().position(|x| (self.pred)(x)) {\n             None => {\n                 self.finished = true;\n-                let tmp = util::replace(&mut self.v, &mut []);\n+                let tmp = mem::replace(&mut self.v, &mut []);\n                 let len = tmp.len();\n                 let (head, tail) = tmp.mut_split_at(len);\n                 self.v = tail;\n                 Some(head)\n             }\n             Some(idx) => {\n-                let tmp = util::replace(&mut self.v, &mut []);\n+                let tmp = mem::replace(&mut self.v, &mut []);\n                 let (head, tail) = tmp.mut_split_at(idx);\n                 self.v = tail.mut_slice_from(1);\n                 Some(head)\n@@ -2792,11 +2791,11 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutSplits<'a, T> {\n         match self.v.iter().rposition(|x| (self.pred)(x)) {\n             None => {\n                 self.finished = true;\n-                let tmp = util::replace(&mut self.v, &mut []);\n+                let tmp = mem::replace(&mut self.v, &mut []);\n                 Some(tmp)\n             }\n             Some(idx) => {\n-                let tmp = util::replace(&mut self.v, &mut []);\n+                let tmp = mem::replace(&mut self.v, &mut []);\n                 let (head, tail) = tmp.mut_split_at(idx);\n                 self.v = head;\n                 Some(tail.mut_slice_from(1))\n@@ -2820,7 +2819,7 @@ impl<'a, T> Iterator<&'a mut [T]> for MutChunks<'a, T> {\n             None\n         } else {\n             let sz = cmp::min(self.v.len(), self.chunk_size);\n-            let tmp = util::replace(&mut self.v, &mut []);\n+            let tmp = mem::replace(&mut self.v, &mut []);\n             let (head, tail) = tmp.mut_split_at(sz);\n             self.v = tail;\n             Some(head)\n@@ -2847,7 +2846,7 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutChunks<'a, T> {\n         } else {\n             let remainder = self.v.len() % self.chunk_size;\n             let sz = if remainder != 0 { remainder } else { self.chunk_size };\n-            let tmp = util::replace(&mut self.v, &mut []);\n+            let tmp = mem::replace(&mut self.v, &mut []);\n             let tmp_len = tmp.len();\n             let (head, tail) = tmp.mut_split_at(tmp_len - sz);\n             self.v = head;"}, {"sha": "9984d2dd0adb20afcc099d00276cf1c9cad45b2e", "filename": "src/libsync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ffuture.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -26,7 +26,7 @@\n \n #[allow(missing_doc)];\n \n-use std::util::replace;\n+use std::mem::replace;\n \n /// A type encapsulating the result of a computation which may not be complete\n pub struct Future<A> {"}, {"sha": "0ac385ea1d1290f3c82b4eca490b4641e35a81c1", "filename": "src/libsync/sync/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsync%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsync%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmod.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -20,10 +20,10 @@\n use std::cast;\n use std::comm;\n use std::kinds::marker;\n+use std::mem::replace;\n use std::sync::arc::UnsafeArc;\n use std::sync::atomics;\n use std::unstable::finally::Finally;\n-use std::util;\n \n use arc::MutexArc;\n \n@@ -290,7 +290,7 @@ impl<'a> Condvar<'a> {\n                     // To avoid :broadcast_heavy, we make a new waitqueue,\n                     // swap it out with the old one, and broadcast on the\n                     // old one outside of the little-lock.\n-                    queue = Some(util::replace(&mut state.blocked[condvar_id],\n+                    queue = Some(replace(&mut state.blocked[condvar_id],\n                                                WaitQueue::new()));\n                 } else {\n                     out_of_bounds = Some(state.blocked.len());"}, {"sha": "b711e95bc943b4917a92f46cc5d05d3fd61fa586", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -18,8 +18,8 @@ use parse::token::{str_to_ident};\n \n use std::cell::{Cell, RefCell};\n use std::char;\n+use std::mem::replace;\n use std::num::from_str_radix;\n-use std::util;\n \n pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n \n@@ -112,7 +112,7 @@ impl Reader for StringReader {\n         let ret_val = {\n             let mut peek_tok = self.peek_tok.borrow_mut();\n             TokenAndSpan {\n-                tok: util::replace(peek_tok.get(), token::UNDERSCORE),\n+                tok: replace(peek_tok.get(), token::UNDERSCORE),\n                 sp: self.peek_span.get(),\n             }\n         };"}, {"sha": "6f6f8d7d5631f4eaa8d5d5f029fbe6ceb87aac59", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -76,7 +76,7 @@ impl ParserObsoleteMethods for Parser {\n         let (kind_str, desc) = match kind {\n             ObsoleteSwap => (\n                 \"swap\",\n-                \"use std::util::{swap, replace} instead\"\n+                \"use std::mem::{swap, replace} instead\"\n             ),\n             ObsoleteUnsafeBlock => (\n                 \"non-standalone unsafe block\","}, {"sha": "507debc8ce0b567d53c80fc2dc9c048bdb05e8b0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -82,7 +82,7 @@ use opt_vec::OptVec;\n use std::cell::Cell;\n use std::hashmap::HashSet;\n use std::kinds::marker;\n-use std::util;\n+use std::mem::replace;\n use std::vec;\n \n #[allow(non_camel_case_types)]\n@@ -735,7 +735,7 @@ impl Parser {\n         let next = if self.buffer_start == self.buffer_end {\n             self.reader.next_token()\n         } else {\n-            // Avoid token copies with `util::replace`.\n+            // Avoid token copies with `replace`.\n             let buffer_start = self.buffer_start as uint;\n             let next_index = (buffer_start + 1) & 3 as uint;\n             self.buffer_start = next_index as int;\n@@ -744,7 +744,7 @@ impl Parser {\n                 tok: token::UNDERSCORE,\n                 sp: self.span,\n             };\n-            util::replace(&mut self.buffer[buffer_start], placeholder)\n+            replace(&mut self.buffer[buffer_start], placeholder)\n         };\n         self.span = next.sp;\n         self.token = next.tok;\n@@ -753,7 +753,7 @@ impl Parser {\n \n     // Advance the parser by one token and return the bumped token.\n     pub fn bump_and_get(&mut self) -> token::Token {\n-        let old_token = util::replace(&mut self.token, token::UNDERSCORE);\n+        let old_token = replace(&mut self.token, token::UNDERSCORE);\n         self.bump();\n         old_token\n     }"}, {"sha": "e0d7fdd87908caaf23d653916cdac43cd4025cc2", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use std::mem;\n use std::vec;\n-use std::util;\n \n /// A vector type optimized for cases where the size is almost always 0 or 1\n pub enum SmallVector<T> {\n@@ -54,9 +54,9 @@ impl<T> SmallVector<T> {\n         match *self {\n             Zero => *self = One(v),\n             One(..) => {\n-                let one = util::replace(self, Zero);\n+                let one = mem::replace(self, Zero);\n                 match one {\n-                    One(v1) => util::replace(self, Many(~[v1, v])),\n+                    One(v1) => mem::replace(self, Many(~[v1, v])),\n                     _ => unreachable!()\n                 };\n             }\n@@ -101,7 +101,7 @@ impl<T> Iterator<T> for MoveItems<T> {\n             ZeroIterator => None,\n             OneIterator(..) => {\n                 let mut replacement = ZeroIterator;\n-                util::swap(self, &mut replacement);\n+                mem::swap(self, &mut replacement);\n                 match replacement {\n                     OneIterator(v) => Some(v),\n                     _ => unreachable!()"}, {"sha": "0491a567f15020845235cc73876777ea03a70d48", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -10,7 +10,8 @@\n \n //! Parameterized string expansion\n \n-use std::{char, vec, util};\n+use std::{char, vec};\n+use std::mem::replace;\n use std::num::strconv::{SignNone,SignNeg,SignAll,int_to_str_bytes_common};\n \n #[deriving(Eq)]\n@@ -525,14 +526,14 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<~[u8],~str> {\n                         }\n                         FormatHex => {\n                             if flags.alternate {\n-                                let s_ = util::replace(&mut s, ~['0' as u8, 'x' as u8]);\n+                                let s_ = replace(&mut s, ~['0' as u8, 'x' as u8]);\n                                 s.push_all_move(s_);\n                             }\n                         }\n                         FormatHEX => {\n                             s = s.into_ascii().to_upper().into_bytes();\n                             if flags.alternate {\n-                                let s_ = util::replace(&mut s, ~['0' as u8, 'X' as u8]);\n+                                let s_ = replace(&mut s, ~['0' as u8, 'X' as u8]);\n                                 s.push_all_move(s_);\n                             }\n                         }"}, {"sha": "743472af5ce3faa33821d5642c62474d7e44ab49", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -15,11 +15,11 @@\n extern mod extra;\n \n use extra::time::precise_time_s;\n+use std::mem::swap;\n use std::os;\n use std::rand::Rng;\n use std::rand;\n use std::str;\n-use std::util;\n use std::vec;\n use std::io::File;\n \n@@ -125,7 +125,7 @@ fn vec_push_all() {\n             v.push_all(rv);\n         }\n         else {\n-            util::swap(&mut v, &mut rv);\n+            swap(&mut v, &mut rv);\n             v.push_all(rv);\n         }\n     }"}, {"sha": "27389ecf6eec32cca4c4aac0b5f770511c3211b1", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -18,12 +18,12 @@ extern mod extra;\n use std::cmp::Ord;\n use std::comm;\n use std::hashmap::HashMap;\n+use std::mem::replace;\n use std::option;\n use std::os;\n use std::io;\n use std::str;\n use std::task;\n-use std::util;\n use std::vec;\n \n fn f64_cmp(x: f64, y: f64) -> Ordering {\n@@ -161,7 +161,7 @@ fn main() {\n     let mut from_child = ~[];\n     let to_child   = sizes.iter().zip(streams.mut_iter()).map(|(sz, stream_ref)| {\n         let sz = *sz;\n-        let stream = util::replace(stream_ref, None);\n+        let stream = replace(stream_ref, None);\n         let (from_child_, to_parent_) = stream.unwrap();\n \n         from_child.push(from_child_);"}, {"sha": "496e09b46516465f09cb150379220dfba8ca5e9c", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -24,7 +24,7 @@ struct Iterate<'a, T> {\n impl<'a, T> Iterator<T> for Iterate<'a, T> {\n     fn next(&mut self) -> Option<T> {\n         let mut res = (self.f)(&self.next);\n-        std::util::swap(&mut res, &mut self.next);\n+        std::mem::swap(&mut res, &mut self.next);\n         Some(res)\n     }\n }"}, {"sha": "7bee06b7804b98dc376d4db0ba621b9a9bb65be1", "filename": "src/test/compile-fail/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,8 +13,6 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-use std::util::swap;\n-\n fn foo(t0: & &mut int) {\n     let t1 = t0;\n     let p: &int = &**t0;"}, {"sha": "954ec82e40fa0a057f907d4dba22afd99e0b824f", "filename": "src/test/compile-fail/borrowck-borrow-of-mut-base-ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,8 +13,6 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-use std::util::swap;\n-\n fn foo<'a>(mut t0: &'a mut int,\n            mut t1: &'a mut int) {\n     let p: &mut int = &mut *t0; // Claims `*t0`"}, {"sha": "ce2755dbc0f20bfe18bea3e313fca8b12a619ba3", "filename": "src/test/compile-fail/borrowck-move-mut-base-ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,8 +13,6 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-use std::util::swap;\n-\n fn foo(t0: &mut int) {\n     let p: &int = &*t0; // Freezes `*t0`\n     let t1 = t0;        //~ ERROR cannot move out of `t0`"}, {"sha": "fb018f3d4bc1025945cc06438872d9c42b58c2a9", "filename": "src/test/compile-fail/borrowck-mut-borrow-of-mut-base-ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,8 +13,6 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-use std::util::swap;\n-\n fn foo<'a>(mut t0: &'a mut int,\n            mut t1: &'a mut int) {\n     let p: &int = &*t0;     // Freezes `*t0`"}, {"sha": "3e8a0f87659dd442e522179a0c39cfc8f7cff2bb", "filename": "src/test/compile-fail/borrowck-swap-mut-base-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -13,7 +13,7 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-use std::util::swap;\n+use std::mem::swap;\n \n fn foo<'a>(mut t0: &'a mut int,\n            mut t1: &'a mut int) {"}, {"sha": "8d294af3e3eb90fdbbcfce8e289fac9e36e54098", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -14,8 +14,8 @@\n \n use cal = bar::c::cc;\n \n-use std::util::*;              // shouldn't get errors for not using\n-                                // everything imported\n+use std::mem::*;            // shouldn't get errors for not using\n+                            // everything imported\n \n // Should get errors for both 'Some' and 'None'\n use std::option::{Some, None}; //~ ERROR unused import\n@@ -61,8 +61,9 @@ mod bar {\n \n fn main() {\n     cal(foo::Point{x:3, y:9});\n-    let a = 3;\n-    id(a);\n+    let mut a = 3;\n+    let mut b = 4;\n+    swap(&mut a, &mut b);\n     test::C.b();\n     let _a = from_elem(0, 0);\n }"}, {"sha": "10760236e6dc3215d5097446e031ea289a973fab", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::util;\n+use std::mem::swap;\n \n struct Ints {sum: ~int, values: ~[int]}\n \n fn add_int(x: &mut Ints, v: int) {\n     *x.sum += v;\n     let mut values = ~[];\n-    util::swap(&mut values, &mut x.values);\n+    swap(&mut values, &mut x.values);\n     values.push(v);\n-    util::swap(&mut values, &mut x.values);\n+    swap(&mut values, &mut x.values);\n }\n \n fn iter_ints(x: &Ints, f: |x: &int| -> bool) -> bool {"}, {"sha": "7c0037c1e15d225d1da06ff3e2d9af36ec867cbc", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -11,11 +11,11 @@\n #[feature(globs)];\n \n pub fn main() {\n-    use std::util::replace;\n+    use std::mem::replace;\n     let mut x = 5;\n     replace(&mut x, 6);\n     {\n-        use std::util::*;\n+        use std::mem::*;\n         let mut y = 6;\n         swap(&mut x, &mut y);\n     }"}, {"sha": "79d25787808ddfe46705e88206026d560b7b8337", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -17,8 +17,8 @@ pub mod pipes {\n     use super::Task;\n     use std::cast::{forget, transmute};\n     use std::cast;\n+    use std::mem::{replace, swap};\n     use std::task;\n-    use std::util;\n \n     pub struct Stuff<T> {\n         state: state,\n@@ -111,7 +111,7 @@ pub mod pipes {\n             match old_state {\n               empty | blocked => { task::deschedule(); }\n               full => {\n-                let payload = util::replace(&mut p.payload, None);\n+                let payload = replace(&mut p.payload, None);\n                 return Some(payload.unwrap())\n               }\n               terminated => {\n@@ -167,7 +167,7 @@ pub mod pipes {\n                 if self.p != None {\n                     let self_p: &mut Option<*packet<T>> =\n                         cast::transmute(&self.p);\n-                    let p = util::replace(self_p, None);\n+                    let p = replace(self_p, None);\n                     sender_terminate(p.unwrap())\n                 }\n             }\n@@ -176,7 +176,7 @@ pub mod pipes {\n \n     impl<T:Send> send_packet<T> {\n         pub fn unwrap(&mut self) -> *packet<T> {\n-            util::replace(&mut self.p, None).unwrap()\n+            replace(&mut self.p, None).unwrap()\n         }\n     }\n \n@@ -197,7 +197,7 @@ pub mod pipes {\n                 if self.p != None {\n                     let self_p: &mut Option<*packet<T>> =\n                         cast::transmute(&self.p);\n-                    let p = util::replace(self_p, None);\n+                    let p = replace(self_p, None);\n                     receiver_terminate(p.unwrap())\n                 }\n             }\n@@ -206,7 +206,7 @@ pub mod pipes {\n \n     impl<T:Send> recv_packet<T> {\n         pub fn unwrap(&mut self) -> *packet<T> {\n-            util::replace(&mut self.p, None).unwrap()\n+            replace(&mut self.p, None).unwrap()\n         }\n     }\n "}, {"sha": "18458aa232056a92ce926766afb51e348b823d8c", "filename": "src/test/run-pass/regions-infer-borrow-scope-addr-of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::util;\n+use std::mem::swap;\n \n pub fn main() {\n     let mut x = 4;\n@@ -26,6 +26,6 @@ pub fn main() {\n             }\n         }\n         let mut y = 4;\n-        util::swap(&mut y, &mut x);\n+        swap(&mut y, &mut x);\n     }\n }"}, {"sha": "82a76512e08f7d5d1895f57f2067479e664f8ddf", "filename": "src/test/run-pass/swap-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fswap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fswap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-1.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::util;\n+use std::mem::swap;\n \n pub fn main() {\n     let mut x = 3; let mut y = 7;\n-    util::swap(&mut x, &mut y);\n+    swap(&mut x, &mut y);\n     assert!((x == 7)); assert!((y == 3));\n }"}, {"sha": "208700fde8a8cb4062523c4640934177c8a4dce0", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::util;\n+use std::mem::swap;\n \n pub fn main() {\n     let mut a: ~[int] = ~[0, 1, 2, 3, 4, 5, 6];\n     a.swap(2, 4);\n     assert_eq!(a[2], 4);\n     assert_eq!(a[4], 2);\n     let mut n = 42;\n-    util::swap(&mut n, &mut a[0]);\n+    swap(&mut n, &mut a[0]);\n     assert_eq!(a[0], 42);\n     assert_eq!(n, 0);\n }"}, {"sha": "779606dba0ccf086d1b2493ae4781ce42d804cc3", "filename": "src/test/run-pass/unique-swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::util;\n+use std::mem::swap;\n \n pub fn main() {\n     let mut i = ~100;\n     let mut j = ~200;\n-    util::swap(&mut i, &mut j);\n+    swap(&mut i, &mut j);\n     assert_eq!(i, ~200);\n     assert_eq!(j, ~100);\n }"}, {"sha": "10726a9c396b39b8a5553e8e1eb779bee5fe7797", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ff91e9beb6c92d9662242c1090c507b1611c59/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=e9ff91e9beb6c92d9662242c1090c507b1611c59", "patch": "@@ -11,7 +11,7 @@\n #[feature(managed_boxes)];\n \n use std::cell::Cell;\n-use std::util;\n+use std::mem::swap;\n \n // Just a grab bag of stuff that you wouldn't want to actually write.\n \n@@ -59,7 +59,7 @@ fn notsure() {\n     let mut _y = (_x = 0) == (_x = 0);\n     let mut _z = (_x = 0) < (_x = 0);\n     let _a = (_x += 0) == (_x = 0);\n-    let _b = util::swap(&mut _y, &mut _z) == util::swap(&mut _y, &mut _z);\n+    let _b = swap(&mut _y, &mut _z) == swap(&mut _y, &mut _z);\n }\n \n fn canttouchthis() -> uint {"}]}