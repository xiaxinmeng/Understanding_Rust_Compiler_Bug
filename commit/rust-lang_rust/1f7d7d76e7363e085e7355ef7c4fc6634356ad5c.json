{"sha": "1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmN2Q3ZDc2ZTczNjNlMDg1ZTczNTVlZjdjNGZjNjYzNDM1NmFkNWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-07-10T13:01:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-10T13:01:17Z"}, "message": "Merge pull request #1082 from Manishearth/small-fixes\n\nSmall fixes", "tree": {"sha": "a9142f1b88a4d3c076357764dd926aff0a916c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9142f1b88a4d3c076357764dd926aff0a916c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "html_url": "https://github.com/rust-lang/rust/commit/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad1cd990549fdfc8ae9dcd4ea7eea851017eb042", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1cd990549fdfc8ae9dcd4ea7eea851017eb042", "html_url": "https://github.com/rust-lang/rust/commit/ad1cd990549fdfc8ae9dcd4ea7eea851017eb042"}, {"sha": "efaed2ecfe6f7236538755cd44a18175e118390f", "url": "https://api.github.com/repos/rust-lang/rust/commits/efaed2ecfe6f7236538755cd44a18175e118390f", "html_url": "https://github.com/rust-lang/rust/commit/efaed2ecfe6f7236538755cd44a18175e118390f"}], "stats": {"total": 217, "additions": 191, "deletions": 26}, "files": [{"sha": "504515be88c673a6fd27f486a82759d62a94137e", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "patch": "@@ -6,7 +6,7 @@ use std::collections::hash_map::Entry;\n use syntax::parse::token::InternedString;\n use syntax::util::small_vector::SmallVector;\n use utils::{SpanlessEq, SpanlessHash};\n-use utils::{get_parent_expr, in_macro, span_note_and_lint};\n+use utils::{get_parent_expr, in_macro, span_lint_and_then, span_note_and_lint, snippet};\n \n /// **What it does:** This lint checks for consecutive `ifs` with the same condition. This lint is\n /// `Warn` by default.\n@@ -42,7 +42,8 @@ declare_lint! {\n /// purpose, you can factor them\n /// [using `|`](https://doc.rust-lang.org/book/patterns.html#multiple-patterns).\n ///\n-/// **Known problems:** Hopefully none.\n+/// **Known problems:** False positive possible with order dependent `match`\n+/// (see issue [#860](https://github.com/Manishearth/rust-clippy/issues/860)).\n ///\n /// **Example:**\n /// ```rust,ignore\n@@ -52,6 +53,23 @@ declare_lint! {\n ///     Baz => bar(), // <= oops\n /// }\n /// ```\n+///\n+/// This should probably be\n+/// ```rust,ignore\n+/// match foo {\n+///     Bar => bar(),\n+///     Quz => quz(),\n+///     Baz => baz(), // <= fixed\n+/// }\n+/// ```\n+///\n+/// or if the original code was not a typo:\n+/// ```rust,ignore\n+/// match foo {\n+///     Bar | Baz => bar(), // <= shows the intent better\n+///     Quz => quz(),\n+/// }\n+/// ```\n declare_lint! {\n     pub MATCH_SAME_ARMS,\n     Warn,\n@@ -143,12 +161,25 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n \n     if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n         if let Some((i, j)) = search_same(arms, hash, eq) {\n-            span_note_and_lint(cx,\n+            span_lint_and_then(cx,\n                                MATCH_SAME_ARMS,\n                                j.body.span,\n                                \"this `match` has identical arm bodies\",\n-                               i.body.span,\n-                               \"same as this\");\n+                               |db| {\n+                db.span_note(i.body.span, \"same as this\");\n+\n+                // Note: this does not use `span_suggestion` on purpose: there is no clean way to\n+                // remove the other arm. Building a span and suggest to replace it to \"\" makes an\n+                // even more confusing error message. Also in order not to make up a span for the\n+                // whole pattern, the suggestion is only shown when there is only one pattern. The\n+                // user should know about `|` if they are already using it\u2026\n+\n+                if i.pats.len() == 1 && j.pats.len() == 1 {\n+                    let lhs = snippet(cx, i.pats[0].span, \"<pat1>\");\n+                    let rhs = snippet(cx, j.pats[0].span, \"<pat2>\");\n+                    db.span_note(i.body.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n+                }\n+            });\n         }\n     }\n }"}, {"sha": "b87d1d3d5fdb449d567ebbfe440c63ea8effdf37", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "patch": "@@ -1,6 +1,7 @@\n use reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use rustc::hir::map::Node::NodeBlock;\n use rustc::lint::*;\n@@ -337,7 +338,7 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n         if let PatKind::Binding(_, ref ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n                 cx: cx,\n-                var: ident.node,\n+                var: cx.tcx.expect_def(pat.id).def_id(),\n                 indexed: HashMap::new(),\n                 nonindex: false,\n             };\n@@ -667,15 +668,15 @@ impl<'a> Visitor<'a> for UsedVisitor {\n \n struct VarVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>, // context reference\n-    var: Name, // var name to look for as index\n+    var: DefId, // var name to look for as index\n     indexed: HashMap<Name, Option<CodeExtent>>, // indexed variables, the extent is None for global\n     nonindex: bool, // has the var been used otherwise?\n }\n \n impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n     fn visit_expr(&mut self, expr: &'v Expr) {\n         if let ExprPath(None, ref path) = expr.node {\n-            if path.segments.len() == 1 && path.segments[0].name == self.var {\n+            if path.segments.len() == 1 && self.cx.tcx.expect_def(expr.id).def_id() == self.var {\n                 // we are referencing our variable! now check if it's as an index\n                 if_let_chain! {[\n                     let Some(parexpr) = get_parent_expr(self.cx, expr),"}, {"sha": "053e423336ef0d7a5de19ac19a503c6a28ce3a5b", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "patch": "@@ -7,15 +7,15 @@ use syntax::ast;\n use syntax::codemap::Span;\n use utils::paths;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint_and_then};\n+use utils::sugg::DiagnosticBuilderExt;\n \n /// **What it does:** This lints about type with a `fn new() -> Self` method\n /// and no implementation of\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n ///\n /// **Why is this bad?** User might expect to be able to use\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n-/// as the type can be\n-/// constructed without arguments.\n+/// as the type can be constructed without arguments.\n ///\n /// **Known problems:** Hopefully none.\n ///\n@@ -118,20 +118,26 @@ impl LateLintPass for NewWithoutDefault {\n                                                      `Default` implementation for `{}`\",\n                                                     self_ty),\n                                            |db| {\n-                                               db.span_suggestion(span, \"try this\", \"#[derive(Default)]\".into());\n-                                           });\n+                            db.suggest_item_with_attr(cx, span, \"try this\", \"#[derive(Default)]\");\n+                        });\n                     } else {\n                         span_lint_and_then(cx,\n                                            NEW_WITHOUT_DEFAULT, span,\n                                            &format!(\"you should consider adding a \\\n                                                     `Default` implementation for `{}`\",\n                                                     self_ty),\n                                            |db| {\n-                                               db.span_suggestion(span,\n-                                                                  \"try this\",\n-                                                                  format!(\"impl Default for {} {{ fn default() -> \\\n-                                                                          Self {{ {}::new() }} }}\", self_ty, self_ty));\n-                                           });\n+                        db.suggest_prepend_item(cx,\n+                                                  span,\n+                                                  \"try this\",\n+                                                  &format!(\n+\"impl Default for {} {{\n+    fn default() -> Self {{\n+        Self::new()\n+    }}\n+}}\",\n+                                                           self_ty));\n+                        });\n                     }\n                 }}\n             }"}, {"sha": "b6ed9071c0a08611b72250d882498fe83942c217", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 89, "deletions": 6, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "patch": "@@ -1,11 +1,14 @@\n use rustc::hir;\n-use rustc::lint::{EarlyContext, LateContext};\n+use rustc::lint::{EarlyContext, LateContext, LintContext};\n+use rustc_errors;\n use std::borrow::Cow;\n+use std::fmt::Display;\n use std;\n-use syntax::ast;\n+use syntax::codemap::{CharPos, Span};\n+use syntax::print::pprust::binop_to_string;\n use syntax::util::parser::AssocOp;\n+use syntax::ast;\n use utils::{higher, snippet, snippet_opt};\n-use syntax::print::pprust::binop_to_string;\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -20,7 +23,7 @@ pub enum Sugg<'a> {\n /// Literal constant `1`, for convenience.\n pub const ONE: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"1\"));\n \n-impl<'a> std::fmt::Display for Sugg<'a> {\n+impl<'a> Display for Sugg<'a> {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\n         match *self {\n             Sugg::NonParen(ref s) | Sugg::MaybeParen(ref s) | Sugg::BinOp(_, ref s) => {\n@@ -126,7 +129,7 @@ impl<'a> Sugg<'a> {\n     }\n \n     /// Convenience method to create the `<lhs> as <rhs>` suggestion.\n-    pub fn as_ty<R: std::fmt::Display>(self, rhs: R) -> Sugg<'static> {\n+    pub fn as_ty<R: Display>(self, rhs: R) -> Sugg<'static> {\n         make_assoc(AssocOp::As, &self, &Sugg::NonParen(rhs.to_string().into()))\n     }\n \n@@ -198,7 +201,7 @@ impl<T> ParenHelper<T> {\n     }\n }\n \n-impl<T: std::fmt::Display> std::fmt::Display for ParenHelper<T> {\n+impl<T: Display> Display for ParenHelper<T> {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\n         if self.paren {\n             write!(f, \"({})\", self.wrapped)\n@@ -354,3 +357,83 @@ fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n         And | Eq | Ge | Gt | Le | Lt | Ne | Or => panic!(\"This operator does not exist\"),\n     })\n }\n+\n+/// Return the indentation before `span` if there are nothing but `[ \\t]` before it on its line.\n+fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n+    let lo = cx.sess().codemap().lookup_char_pos(span.lo);\n+    if let Some(line) = lo.file.get_line(lo.line - 1 /* line numbers in `Loc` are 1-based */) {\n+        if let Some((pos, _)) = line.char_indices().find(|&(_, c)| c != ' ' && c != '\\t') {\n+            // we can mix char and byte positions here because we only consider `[ \\t]`\n+            if lo.col == CharPos(pos) {\n+                Some(line[..pos].into())\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n+pub trait DiagnosticBuilderExt<T: LintContext> {\n+    /// Suggests to add an attribute to an item.\n+    ///\n+    /// Correctly handles indentation of the attribute and item.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// db.suggest_item_with_attr(cx, item, \"#[derive(Default)]\");\n+    /// ```\n+    fn suggest_item_with_attr<D: Display+?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D);\n+\n+    /// Suggest to add an item before another.\n+    ///\n+    /// The item should not be indented (expect for inner indentation).\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// db.suggest_prepend_item(cx, item,\n+    /// \"fn foo() {\n+    ///     bar();\n+    /// }\");\n+    /// ```\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str);\n+}\n+\n+impl<'a, 'b, T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder<'b> {\n+    fn suggest_item_with_attr<D: Display+?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D) {\n+        if let Some(indent) = indentation(cx, item) {\n+            let span = Span {\n+                hi: item.lo,\n+                ..item\n+            };\n+\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent));\n+        }\n+    }\n+\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str) {\n+        if let Some(indent) = indentation(cx, item) {\n+            let span = Span {\n+                hi: item.lo,\n+                ..item\n+            };\n+\n+            let mut first = true;\n+            let new_item = new_item.lines().map(|l| {\n+                if first {\n+                    first = false;\n+                    format!(\"{}\\n\", l)\n+                } else {\n+                    format!(\"{}{}\\n\", indent, l)\n+                }\n+            }).collect::<String>();\n+\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent));\n+        }\n+    }\n+}"}, {"sha": "a8d7157629b4bfc9ed55bc8227f1046be7a20c00", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "patch": "@@ -21,6 +21,7 @@ struct Foo {\n #[deny(match_same_arms)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n+        //~^NOTE same as this\n         Foo { bar: 42 };\n         0..10;\n         ..;\n@@ -62,6 +63,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     let _ = if true {\n+        //~^NOTE same as this\n         foo();\n         42\n     }\n@@ -75,13 +77,15 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     let _ = if true {\n+        //~^NOTE same as this\n         42\n     }\n     else { //~ERROR this `if` has identical blocks\n         42\n     };\n \n     if true {\n+        //~^NOTE same as this\n         let bar = if true {\n             42\n         }\n@@ -105,6 +109,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n+        //~^NOTE same as this\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n@@ -125,13 +130,15 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n+        //~^NOTE same as this\n         if let Some(a) = Some(42) {}\n     }\n     else { //~ERROR this `if` has identical blocks\n         if let Some(a) = Some(42) {}\n     }\n \n     if true {\n+        //~^NOTE same as this\n         if let (1, .., 3) = (1, 2, 3) {}\n     }\n     else { //~ERROR this `if` has identical blocks\n@@ -168,12 +175,16 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = match 42 {\n         42 => foo(),\n+        //~^NOTE same as this\n+        //~|NOTE `42 | 51`\n         51 => foo(), //~ERROR this `match` has identical arm bodies\n         _ => true,\n     };\n \n     let _ = match Some(42) {\n         Some(_) => 24,\n+        //~^NOTE same as this\n+        //~|NOTE `Some(_) | None`\n         None => 24, //~ERROR this `match` has identical arm bodies\n     };\n \n@@ -196,18 +207,24 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     match (Some(42), Some(42)) {\n         (Some(a), None) => bar(a),\n+        //~^NOTE same as this\n+        //~|NOTE `(Some(a), None) | (None, Some(a))`\n         (None, Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n         _ => (),\n     }\n \n     match (Some(42), Some(42)) {\n         (Some(a), ..) => bar(a),\n+        //~^NOTE same as this\n+        //~|NOTE `(Some(a), ..) | (.., Some(a))`\n         (.., Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n         _ => (),\n     }\n \n     match (1, 2, 3) {\n         (1, .., 3) => 42,\n+        //~^NOTE same as this\n+        //~|NOTE `(1, .., 3) | (.., 3)`\n         (.., 3) => 42, //~ERROR this `match` has identical arm bodies\n         _ => 0,\n     };\n@@ -219,13 +236,15 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n+        //~^NOTE same as this\n         try!(Ok(\"foo\"));\n     }\n     else { //~ERROR this `if` has identical blocks\n         try!(Ok(\"foo\"));\n     }\n \n     if true {\n+        //~^NOTE same as this\n         let foo = \"\";\n         return Ok(&foo[0..]);\n     }\n@@ -246,16 +265,19 @@ fn ifs_same_cond() {\n     let b = false;\n \n     if b {\n+        //~^NOTE same as this\n     }\n     else if b { //~ERROR this `if` has the same condition as a previous if\n     }\n \n     if a == 1 {\n+        //~^NOTE same as this\n     }\n     else if a == 1 { //~ERROR this `if` has the same condition as a previous if\n     }\n \n     if 2*a == 1 {\n+        //~^NOTE same as this\n     }\n     else if 2*a == 2 {\n     }"}, {"sha": "91e31adc44d580dc75534f22dfc5f7e3dddd37de", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "patch": "@@ -104,6 +104,12 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 0..vec.len() {\n+        //~^ WARNING unused variable\n+        let i = 42; // make a different `i`\n+        println!(\"{}\", vec[i]); // ok, not the `i` of the for-loop\n+    }\n+\n     for i in 0..vec.len() { let _ = vec[i]; }\n     //~^ ERROR `i` is only used to index `vec`\n     //~| HELP consider"}, {"sha": "cad675275db92a0d842f5616d0ebf996bafb2791", "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7d7d76e7363e085e7355ef7c4fc6634356ad5c/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=1f7d7d76e7363e085e7355ef7c4fc6634356ad5c", "patch": "@@ -7,13 +7,21 @@\n pub struct Foo;\n \n impl Foo {\n-    pub fn new() -> Foo { Foo } //~ERROR: you should consider deriving a `Default` implementation for `Foo`\n+    pub fn new() -> Foo { Foo }\n+    //~^ERROR: you should consider deriving a `Default` implementation for `Foo`\n+    //~|HELP try this\n+    //~^^^SUGGESTION #[derive(Default)]\n+    //~^^^SUGGESTION pub fn new\n }\n \n pub struct Bar;\n \n impl Bar {\n-    pub fn new() -> Self { Bar } //~ERROR: you should consider deriving a `Default` implementation for `Bar`\n+    pub fn new() -> Self { Bar }\n+    //~^ERROR: you should consider deriving a `Default` implementation for `Bar`\n+    //~|HELP try this\n+    //~^^^SUGGESTION #[derive(Default)]\n+    //~^^^SUGGESTION pub fn new\n }\n \n pub struct Ok;\n@@ -61,7 +69,15 @@ pub struct LtKo<'a> {\n }\n \n impl<'c> LtKo<'c> {\n-    pub fn new() -> LtKo<'c> { unimplemented!() } //~ERROR: you should consider adding a `Default` implementation for\n+    pub fn new() -> LtKo<'c> { unimplemented!() }\n+    //~^ERROR: you should consider adding a `Default` implementation for\n+    //~^^HELP try\n+    //~^^^SUGGESTION impl Default for LtKo<'c> {\n+    //~^^^SUGGESTION     fn default() -> Self {\n+    //~^^^SUGGESTION         Self::new()\n+    //~^^^SUGGESTION     }\n+    //~^^^SUGGESTION }\n+    // FIXME: that suggestion is missing lifetimes\n }\n \n struct Private;"}]}