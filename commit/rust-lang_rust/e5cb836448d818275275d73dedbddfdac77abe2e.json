{"sha": "e5cb836448d818275275d73dedbddfdac77abe2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1Y2I4MzY0NDhkODE4Mjc1Mjc1ZDczZGVkYmRkZmRhYzc3YWJlMmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-14T13:43:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-14T13:43:25Z"}, "message": "Merge #2838\n\n2838: Move Type API to type r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "10f569e6367d410df0d9b72f1c089a5a7cb833e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f569e6367d410df0d9b72f1c089a5a7cb833e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5cb836448d818275275d73dedbddfdac77abe2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeHcV9CRBK7hj4Ov3rIwAAdHIIAKKxtXTtiWkeOX+634l4TUIH\noA6J+J8MYg2wp5vAnv6QIfTkq/0NBlF2xLYc5TfgS2PNODNh/4IrE2BWPs6l21jR\ncPmRLpgDn67UXSqnUekOS0+oHEjQCwO/ybOL2CUyLHrEKn5xWdmJszHWNwKAO1nS\nqyDIZ6OSefDRCw7C4I2pW/6SHJEwuf/CmfpplhCyGBUS4LVIAt6DREwG1U6K7bMM\n4qiwU6Dp6lHFBgocHLMDGeLo78iwmOIasL+tVDNYLCCy3CJ0BdY1Vj6PCDhfSt2O\n3XgffoCDEkWiT0fNb1I7Ghpas3+c6RzTVU/ftED6A6EjyPxRUEoBqbk3HmtXyE0=\n=rKFm\n-----END PGP SIGNATURE-----\n", "payload": "tree 10f569e6367d410df0d9b72f1c089a5a7cb833e4\nparent ec4775830c14194c1bd7bfcdbce25cf21bee0b44\nparent a38540771fa93994c369d53a2abc01769c64c0b8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1579009405 +0000\ncommitter GitHub <noreply@github.com> 1579009405 +0000\n\nMerge #2838\n\n2838: Move Type API to type r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5cb836448d818275275d73dedbddfdac77abe2e", "html_url": "https://github.com/rust-lang/rust/commit/e5cb836448d818275275d73dedbddfdac77abe2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5cb836448d818275275d73dedbddfdac77abe2e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4775830c14194c1bd7bfcdbce25cf21bee0b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4775830c14194c1bd7bfcdbce25cf21bee0b44", "html_url": "https://github.com/rust-lang/rust/commit/ec4775830c14194c1bd7bfcdbce25cf21bee0b44"}, {"sha": "a38540771fa93994c369d53a2abc01769c64c0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a38540771fa93994c369d53a2abc01769c64c0b8", "html_url": "https://github.com/rust-lang/rust/commit/a38540771fa93994c369d53a2abc01769c64c0b8"}], "stats": {"total": 304, "additions": 192, "deletions": 112}, "files": [{"sha": "3b479356f88e9ea067f76f18d0b1ad09bd8eb8cd", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=e5cb836448d818275275d73dedbddfdac77abe2e", "patch": "@@ -21,8 +21,8 @@ use hir_expand::{\n     MacroDefId,\n };\n use hir_ty::{\n-    autoderef, display::HirFormatter, expr::ExprValidator, method_resolution::implements_trait,\n-    ApplicationTy, Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n+    autoderef, display::HirFormatter, expr::ExprValidator, method_resolution, ApplicationTy,\n+    Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n };\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n@@ -120,7 +120,8 @@ impl_froms!(\n     BuiltinType\n );\n \n-pub use hir_def::{attr::Attrs, visibility::Visibility};\n+pub use hir_def::{attr::Attrs, visibility::Visibility, AssocItemId};\n+use rustc_hash::FxHashSet;\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {\n@@ -891,7 +892,13 @@ impl Type {\n         };\n \n         let canonical_ty = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n-        implements_trait(&canonical_ty, db, self.ty.environment.clone(), krate, std_future_trait)\n+        method_resolution::implements_trait(\n+            &canonical_ty,\n+            db,\n+            self.ty.environment.clone(),\n+            krate,\n+            std_future_trait,\n+        )\n     }\n \n     // FIXME: this method is broken, as it doesn't take closures into account.\n@@ -1002,6 +1009,65 @@ impl Type {\n         None\n     }\n \n+    pub fn iterate_method_candidates<T>(\n+        &self,\n+        db: &impl HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n+    ) -> Option<T> {\n+        // There should be no inference vars in types passed here\n+        // FIXME check that?\n+        // FIXME replace Unknown by bound vars here\n+        let canonical = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n+\n+        let env = self.ty.environment.clone();\n+        let krate = krate.id;\n+\n+        method_resolution::iterate_method_candidates(\n+            &canonical,\n+            db,\n+            env,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            method_resolution::LookupMode::MethodCall,\n+            |ty, it| match it {\n+                AssocItemId::FunctionId(f) => callback(ty, f.into()),\n+                _ => None,\n+            },\n+        )\n+    }\n+\n+    pub fn iterate_path_candidates<T>(\n+        &self,\n+        db: &impl HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+    ) -> Option<T> {\n+        // There should be no inference vars in types passed here\n+        // FIXME check that?\n+        // FIXME replace Unknown by bound vars here\n+        let canonical = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n+\n+        let env = self.ty.environment.clone();\n+        let krate = krate.id;\n+\n+        method_resolution::iterate_method_candidates(\n+            &canonical,\n+            db,\n+            env,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            method_resolution::LookupMode::Path,\n+            |ty, it| callback(ty, it.into()),\n+        )\n+    }\n+\n     pub fn as_adt(&self) -> Option<Adt> {\n         let (adt, _subst) = self.ty.value.as_adt()?;\n         Some(adt.into())"}, {"sha": "76e0bff347408fbdf7e4347a4f7a5539c69ed1f1", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 8, "deletions": 48, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=e5cb836448d818275275d73dedbddfdac77abe2e", "patch": "@@ -16,24 +16,24 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     nameres::ModuleSource,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    AssocItemId, DefWithBodyId,\n+    DefWithBodyId, TraitId,\n };\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroCallKind,\n };\n-use hir_ty::{method_resolution, Canonical, InEnvironment, InferenceResult, TraitEnvironment, Ty};\n+use hir_ty::{InEnvironment, InferenceResult, TraitEnvironment};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, AstPtr,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxNodePtr, SyntaxToken, TextRange, TextUnit,\n };\n+use rustc_hash::FxHashSet;\n \n use crate::{\n-    db::HirDatabase, Adt, AssocItem, Const, DefWithBody, Enum, EnumVariant, FromSource, Function,\n-    ImplBlock, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias,\n-    TypeParam,\n+    db::HirDatabase, Adt, Const, DefWithBody, Enum, EnumVariant, FromSource, Function, ImplBlock,\n+    Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -347,49 +347,9 @@ impl SourceAnalyzer {\n             .collect()\n     }\n \n-    pub fn iterate_method_candidates<T>(\n-        &self,\n-        db: &impl HirDatabase,\n-        ty: &Type,\n-        name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n-    ) -> Option<T> {\n-        // There should be no inference vars in types passed here\n-        // FIXME check that?\n-        // FIXME replace Unknown by bound vars here\n-        let canonical = Canonical { value: ty.ty.value.clone(), num_vars: 0 };\n-        method_resolution::iterate_method_candidates(\n-            &canonical,\n-            db,\n-            &self.resolver,\n-            name,\n-            method_resolution::LookupMode::MethodCall,\n-            |ty, it| match it {\n-                AssocItemId::FunctionId(f) => callback(ty, f.into()),\n-                _ => None,\n-            },\n-        )\n-    }\n-\n-    pub fn iterate_path_candidates<T>(\n-        &self,\n-        db: &impl HirDatabase,\n-        ty: &Type,\n-        name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n-    ) -> Option<T> {\n-        // There should be no inference vars in types passed here\n-        // FIXME check that?\n-        // FIXME replace Unknown by bound vars here\n-        let canonical = Canonical { value: ty.ty.value.clone(), num_vars: 0 };\n-        method_resolution::iterate_method_candidates(\n-            &canonical,\n-            db,\n-            &self.resolver,\n-            name,\n-            method_resolution::LookupMode::Path,\n-            |ty, it| callback(ty, it.into()),\n-        )\n+    /// Note: `FxHashSet<TraitId>` should be treated as an opaque type, passed into `Type\n+    pub fn traits_in_scope(&self, db: &impl HirDatabase) -> FxHashSet<TraitId> {\n+        self.resolver.traits_in_scope(db)\n     }\n \n     pub fn expand("}, {"sha": "d6a17e469d4636b4c9d0e1e8f7df416e51f20880", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=e5cb836448d818275275d73dedbddfdac77abe2e", "patch": "@@ -569,12 +569,19 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     ) -> Ty {\n         let receiver_ty = self.infer_expr(receiver, &Expectation::none());\n         let canonicalized_receiver = self.canonicalizer().canonicalize_ty(receiver_ty.clone());\n-        let resolved = method_resolution::lookup_method(\n-            &canonicalized_receiver.value,\n-            self.db,\n-            method_name,\n-            &self.resolver,\n-        );\n+\n+        let traits_in_scope = self.resolver.traits_in_scope(self.db);\n+\n+        let resolved = self.resolver.krate().and_then(|krate| {\n+            method_resolution::lookup_method(\n+                &canonicalized_receiver.value,\n+                self.db,\n+                self.trait_env.clone(),\n+                krate,\n+                &traits_in_scope,\n+                method_name,\n+            )\n+        });\n         let (derefed_receiver_ty, method_ty, def_generics) = match resolved {\n             Some((ty, func)) => {\n                 let ty = canonicalized_receiver.decanonicalize_ty(ty);"}, {"sha": "2c1d4831d7e0332a844d780ed41e6f455a7b70f1", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=e5cb836448d818275275d73dedbddfdac77abe2e", "patch": "@@ -11,7 +11,7 @@ use hir_expand::name::Name;\n \n use crate::{db::HirDatabase, method_resolution, Substs, Ty, TypeWalk, ValueTyDefId};\n \n-use super::{ExprOrPatId, InferenceContext, TraitRef};\n+use super::{ExprOrPatId, InferenceContext, TraitEnvironment, TraitRef};\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn infer_path(\n@@ -193,11 +193,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n \n         let canonical_ty = self.canonicalizer().canonicalize_ty(ty.clone());\n+        let env = TraitEnvironment::lower(self.db, &self.resolver);\n+        let krate = self.resolver.krate()?;\n+        let traits_in_scope = self.resolver.traits_in_scope(self.db);\n \n         method_resolution::iterate_method_candidates(\n             &canonical_ty.value,\n             self.db,\n-            &self.resolver.clone(),\n+            env,\n+            krate,\n+            &traits_in_scope,\n             Some(name),\n             method_resolution::LookupMode::Path,\n             move |_ty, item| {"}, {"sha": "5bacbbd7c7d718e8f804741dbb93aaeb17b68a12", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 70, "deletions": 33, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=e5cb836448d818275275d73dedbddfdac77abe2e", "patch": "@@ -6,13 +6,13 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocContainerId,\n-    AssocItemId, FunctionId, HasModule, ImplId, Lookup, TraitId,\n+    lang_item::LangItemTarget, type_ref::Mutability, AssocContainerId, AssocItemId, FunctionId,\n+    HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n use ra_prof::profile;\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use super::Substs;\n use crate::{\n@@ -144,14 +144,24 @@ impl Ty {\n pub(crate) fn lookup_method(\n     ty: &Canonical<Ty>,\n     db: &impl HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: &Name,\n-    resolver: &Resolver,\n ) -> Option<(Ty, FunctionId)> {\n-    iterate_method_candidates(ty, db, resolver, Some(name), LookupMode::MethodCall, |ty, f| match f\n-    {\n-        AssocItemId::FunctionId(f) => Some((ty.clone(), f)),\n-        _ => None,\n-    })\n+    iterate_method_candidates(\n+        ty,\n+        db,\n+        env,\n+        krate,\n+        &traits_in_scope,\n+        Some(name),\n+        LookupMode::MethodCall,\n+        |ty, f| match f {\n+            AssocItemId::FunctionId(f) => Some((ty.clone(), f)),\n+            _ => None,\n+        },\n+    )\n }\n \n /// Whether we're looking up a dotted method call (like `v.len()`) or a path\n@@ -172,7 +182,9 @@ pub enum LookupMode {\n pub fn iterate_method_candidates<T>(\n     ty: &Canonical<Ty>,\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: Option<&Name>,\n     mode: LookupMode,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n@@ -187,9 +199,7 @@ pub fn iterate_method_candidates<T>(\n             // Also note that when we've got a receiver like &S, even if the method we\n             // find in the end takes &self, we still do the autoderef step (just as\n             // rustc does an autoderef and then autoref again).\n-            let environment = TraitEnvironment::lower(db, resolver);\n-            let ty = InEnvironment { value: ty.clone(), environment };\n-            let krate = resolver.krate()?;\n+            let ty = InEnvironment { value: ty.clone(), environment: env.clone() };\n \n             // We have to be careful about the order we're looking at candidates\n             // in here. Consider the case where we're resolving `x.clone()`\n@@ -209,7 +219,9 @@ pub fn iterate_method_candidates<T>(\n                 if let Some(result) = iterate_method_candidates_with_autoref(\n                     &deref_chain[i..],\n                     db,\n-                    resolver,\n+                    env.clone(),\n+                    krate,\n+                    traits_in_scope,\n                     name,\n                     &mut callback,\n                 ) {\n@@ -220,23 +232,35 @@ pub fn iterate_method_candidates<T>(\n         }\n         LookupMode::Path => {\n             // No autoderef for path lookups\n-            iterate_method_candidates_for_self_ty(&ty, db, resolver, name, &mut callback)\n+            iterate_method_candidates_for_self_ty(\n+                &ty,\n+                db,\n+                env,\n+                krate,\n+                traits_in_scope,\n+                name,\n+                &mut callback,\n+            )\n         }\n     }\n }\n \n fn iterate_method_candidates_with_autoref<T>(\n     deref_chain: &[Canonical<Ty>],\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: Option<&Name>,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     if let Some(result) = iterate_method_candidates_by_receiver(\n         &deref_chain[0],\n         &deref_chain[1..],\n         db,\n-        resolver,\n+        env.clone(),\n+        krate,\n+        &traits_in_scope,\n         name,\n         &mut callback,\n     ) {\n@@ -250,7 +274,9 @@ fn iterate_method_candidates_with_autoref<T>(\n         &refed,\n         deref_chain,\n         db,\n-        resolver,\n+        env.clone(),\n+        krate,\n+        &traits_in_scope,\n         name,\n         &mut callback,\n     ) {\n@@ -264,7 +290,9 @@ fn iterate_method_candidates_with_autoref<T>(\n         &ref_muted,\n         deref_chain,\n         db,\n-        resolver,\n+        env.clone(),\n+        krate,\n+        &traits_in_scope,\n         name,\n         &mut callback,\n     ) {\n@@ -277,14 +305,15 @@ fn iterate_method_candidates_by_receiver<T>(\n     receiver_ty: &Canonical<Ty>,\n     rest_of_deref_chain: &[Canonical<Ty>],\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: Option<&Name>,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n     // We're looking for methods with *receiver* type receiver_ty. These could\n     // be found in any of the derefs of receiver_ty, so we have to go through\n     // that.\n-    let krate = resolver.krate()?;\n     for self_ty in std::iter::once(receiver_ty).chain(rest_of_deref_chain) {\n         if let Some(result) =\n             iterate_inherent_methods(self_ty, db, name, Some(receiver_ty), krate, &mut callback)\n@@ -296,7 +325,9 @@ fn iterate_method_candidates_by_receiver<T>(\n         if let Some(result) = iterate_trait_method_candidates(\n             self_ty,\n             db,\n-            resolver,\n+            env.clone(),\n+            krate,\n+            &traits_in_scope,\n             name,\n             Some(receiver_ty),\n             &mut callback,\n@@ -310,17 +341,25 @@ fn iterate_method_candidates_by_receiver<T>(\n fn iterate_method_candidates_for_self_ty<T>(\n     self_ty: &Canonical<Ty>,\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: Option<&Name>,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n-    let krate = resolver.krate()?;\n     if let Some(result) = iterate_inherent_methods(self_ty, db, name, None, krate, &mut callback) {\n         return Some(result);\n     }\n-    if let Some(result) =\n-        iterate_trait_method_candidates(self_ty, db, resolver, name, None, &mut callback)\n-    {\n+    if let Some(result) = iterate_trait_method_candidates(\n+        self_ty,\n+        db,\n+        env,\n+        krate,\n+        traits_in_scope,\n+        name,\n+        None,\n+        &mut callback,\n+    ) {\n         return Some(result);\n     }\n     None\n@@ -329,23 +368,21 @@ fn iterate_method_candidates_for_self_ty<T>(\n fn iterate_trait_method_candidates<T>(\n     self_ty: &Canonical<Ty>,\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: Option<&Name>,\n     receiver_ty: Option<&Canonical<Ty>>,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n-    let krate = resolver.krate()?;\n-    // FIXME: maybe put the trait_env behind a query (need to figure out good input parameters for that)\n-    let env = TraitEnvironment::lower(db, resolver);\n     // if ty is `impl Trait` or `dyn Trait`, the trait doesn't need to be in scope\n     let inherent_trait = self_ty.value.inherent_trait().into_iter();\n     // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n     let traits_from_env = env\n         .trait_predicates_for_self_ty(&self_ty.value)\n         .map(|tr| tr.trait_)\n         .flat_map(|t| all_super_traits(db, t));\n-    let traits =\n-        inherent_trait.chain(traits_from_env).chain(resolver.traits_in_scope(db).into_iter());\n+    let traits = inherent_trait.chain(traits_from_env).chain(traits_in_scope.iter().copied());\n     'traits: for t in traits {\n         let data = db.trait_data(t);\n "}, {"sha": "2ca78c927fc2551d48f91efdc86887275d8e145e", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=e5cb836448d818275275d73dedbddfdac77abe2e", "patch": "@@ -53,13 +53,16 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Ty\n }\n \n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n-    let mut seen_methods = FxHashSet::default();\n-    ctx.analyzer.iterate_method_candidates(ctx.db, receiver, None, |_ty, func| {\n-        if func.has_self_param(ctx.db) && seen_methods.insert(func.name(ctx.db)) {\n-            acc.add_function(ctx, func);\n-        }\n-        None::<()>\n-    });\n+    if let Some(krate) = ctx.module.map(|it| it.krate()) {\n+        let mut seen_methods = FxHashSet::default();\n+        let traits_in_scope = ctx.analyzer.traits_in_scope(ctx.db);\n+        receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n+            if func.has_self_param(ctx.db) && seen_methods.insert(func.name(ctx.db)) {\n+                acc.add_function(ctx, func);\n+            }\n+            None::<()>\n+        });\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "af24e9f48d81eb4c492fdf141477a69d8eff2ef6", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5cb836448d818275275d73dedbddfdac77abe2e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=e5cb836448d818275275d73dedbddfdac77abe2e", "patch": "@@ -49,22 +49,24 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };\n-            ctx.analyzer.iterate_path_candidates(ctx.db, &ty, None, |_ty, item| {\n-                match item {\n-                    hir::AssocItem::Function(func) => {\n-                        if !func.has_self_param(ctx.db) {\n-                            acc.add_function(ctx, func);\n-                        }\n-                    }\n-                    hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n-                    hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n-                }\n-                None::<()>\n-            });\n             // Iterate assoc types separately\n             // FIXME: complete T::AssocType\n             let krate = ctx.module.map(|m| m.krate());\n             if let Some(krate) = krate {\n+                let traits_in_scope = ctx.analyzer.traits_in_scope(ctx.db);\n+                ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n+                    match item {\n+                        hir::AssocItem::Function(func) => {\n+                            if !func.has_self_param(ctx.db) {\n+                                acc.add_function(ctx, func);\n+                            }\n+                        }\n+                        hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n+                        hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n+                    }\n+                    None::<()>\n+                });\n+\n                 ty.iterate_impl_items(ctx.db, krate, |item| {\n                     match item {\n                         hir::AssocItem::Function(_) | hir::AssocItem::Const(_) => {}"}]}