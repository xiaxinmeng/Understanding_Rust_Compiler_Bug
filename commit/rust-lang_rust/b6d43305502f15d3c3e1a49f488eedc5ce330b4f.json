{"sha": "b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZDQzMzA1NTAyZjE1ZDNjM2UxYTQ5ZjQ4OGVlZGM1Y2UzMzBiNGY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-02-25T22:06:24Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-04-15T15:18:12Z"}, "message": "Check for Deref trait impl + add fixed version", "tree": {"sha": "37fa6485f0c1b5abb02dd949195971ee98a4e1aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37fa6485f0c1b5abb02dd949195971ee98a4e1aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "html_url": "https://github.com/rust-lang/rust/commit/b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1132434a7cf580a09d08a274bbfd2e776b324f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1132434a7cf580a09d08a274bbfd2e776b324f8", "html_url": "https://github.com/rust-lang/rust/commit/c1132434a7cf580a09d08a274bbfd2e776b324f8"}], "stats": {"total": 189, "additions": 149, "deletions": 40}, "files": [{"sha": "d11614d489d23a533362f2ea34405a5a4dfbbe35", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{get_parent_expr, method_calls, snippet, span_lint_and_sugg};\n+use crate::utils::{\n+    get_parent_expr, get_trait_def_id, implements_trait, method_calls, paths, snippet, span_lint_and_sugg,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -15,18 +17,19 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let b = a.deref();\n-    /// let c = a.deref_mut();\n+    /// use std::ops::Deref;\n+    /// let a: &mut String = &mut String::from(\"foo\");\n+    /// let b: &str = a.deref();\n     /// ```\n     /// Could be written as:\n     /// ```rust\n+    /// let a: &mut String = &mut String::from(\"foo\");\n     /// let b = &*a;\n-    /// let c = &mut *a;\n     /// ```\n     ///\n     /// This lint excludes\n-    /// ```rust\n-    /// let e = d.unwrap().deref();\n+    /// ```rust,ignore\n+    /// let _ = d.unwrap().deref();\n     /// ```\n     pub EXPLICIT_DEREF_METHOD,\n     pedantic,\n@@ -49,7 +52,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n                         for arg in args {\n                             if_chain! {\n                                 // Caller must call only one other function (deref or deref_mut)\n-                                // otherwise it can lead to error prone suggestions (ex: &*a.len())\n+                                // otherwise it can lead to error prone suggestions (ie: &*a.len())\n                                 let (method_names, arg_list, _) = method_calls(arg, 2);\n                                 if method_names.len() == 1;\n                                 // Caller must be a variable\n@@ -59,7 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n \n                                 then {\n                                     let name = method_names[0].as_str();\n-                                    lint_deref(cx, &*name, variables[0].span, arg.span);\n+                                    lint_deref(cx, &*name, &variables[0], variables[0].span, arg.span);\n                                 }\n                             }\n                         }\n@@ -72,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n                             if args.len() == 1;\n                             if let ExprKind::Path(QPath::Resolved(None, _)) = args[0].kind;\n                             // Caller must call only one other function (deref or deref_mut)\n-                            // otherwise it can lead to error prone suggestions (ex: &*a.len())\n+                            // otherwise it can lead to error prone suggestions (ie: &*a.len())\n                             let (method_names, arg_list, _) = method_calls(init, 2);\n                             if method_names.len() == 1;\n                             // Caller must be a variable\n@@ -82,7 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n \n                             then {\n                                 let name = method_name.ident.as_str();\n-                                lint_deref(cx, &*name, args[0].span, init.span);\n+                                lint_deref(cx, &*name, init, args[0].span, init.span);\n                             }\n                         }\n                     }\n@@ -96,46 +99,54 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n         if_chain! {\n             if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.kind;\n             if args.len() == 1;\n+            if let ExprKind::Path(QPath::Resolved(None, _)) = args[0].kind;\n             if let Some(parent) = get_parent_expr(cx, &expr);\n \n             then {\n-                // Call and MethodCall exprs are better reported using statements\n                 match parent.kind {\n-                    ExprKind::Call(_, _) => return,\n-                    ExprKind::MethodCall(_, _, _) => return,\n+                    // Already linted using statements\n+                    ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _) => (),\n                     _ => {\n                         let name = method_name.ident.as_str();\n-                        lint_deref(cx, &*name, args[0].span, expr.span);\n+                        lint_deref(cx, &*name, &args[0], args[0].span, expr.span);\n                     }\n                 }\n             }\n         }\n     }\n }\n \n-fn lint_deref(cx: &LateContext<'_, '_>, fn_name: &str, var_span: Span, expr_span: Span) {\n+fn lint_deref(cx: &LateContext<'_, '_>, fn_name: &str, call_expr: &Expr<'_>, var_span: Span, expr_span: Span) {\n     match fn_name {\n         \"deref\" => {\n-            span_lint_and_sugg(\n-                cx,\n-                EXPLICIT_DEREF_METHOD,\n-                expr_span,\n-                \"explicit deref method call\",\n-                \"try this\",\n-                format!(\"&*{}\", &snippet(cx, var_span, \"..\")),\n-                Applicability::MachineApplicable,\n-            );\n+            if get_trait_def_id(cx, &paths::DEREF_TRAIT)\n+                .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXPLICIT_DEREF_METHOD,\n+                    expr_span,\n+                    \"explicit deref method call\",\n+                    \"try this\",\n+                    format!(\"&*{}\", &snippet(cx, var_span, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         },\n         \"deref_mut\" => {\n-            span_lint_and_sugg(\n-                cx,\n-                EXPLICIT_DEREF_METHOD,\n-                expr_span,\n-                \"explicit deref_mut method call\",\n-                \"try this\",\n-                format!(\"&mut *{}\", &snippet(cx, var_span, \"..\")),\n-                Applicability::MachineApplicable,\n-            );\n+            if get_trait_def_id(cx, &paths::DEREF_MUT_TRAIT)\n+                .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXPLICIT_DEREF_METHOD,\n+                    expr_span,\n+                    \"explicit deref_mut method call\",\n+                    \"try this\",\n+                    format!(\"&mut *{}\", &snippet(cx, var_span, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         },\n         _ => (),\n     }"}, {"sha": "a49299e5f6fb33551e5d025242d4943f1106b4c7", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "patch": "@@ -25,7 +25,9 @@ pub const CSTRING: [&str; 4] = [\"std\", \"ffi\", \"c_str\", \"CString\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n+pub const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n+pub const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];"}, {"sha": "292324eeacbad73df6a330ce1d7841e31724a666", "filename": "tests/ui/dereference.fixed", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/tests%2Fui%2Fdereference.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/tests%2Fui%2Fdereference.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.fixed?ref=b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "patch": "@@ -0,0 +1,79 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![warn(clippy::explicit_deref_method)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+fn concat(deref_str: &str) -> String {\n+    format!(\"{}bar\", deref_str)\n+}\n+\n+fn just_return(deref_str: &str) -> &str {\n+    deref_str\n+}\n+\n+fn main() {\n+    let a: &mut String = &mut String::from(\"foo\");\n+\n+    // these should require linting\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    // both derefs should get linted here\n+    let b: String = format!(\"{}, {}\", &*a, &*a);\n+\n+    println!(\"{}\", &*a);\n+\n+    #[allow(clippy::match_single_binding)]\n+    match &*a {\n+        _ => (),\n+    }\n+\n+    let b: String = concat(&*a);\n+\n+    // following should not require linting\n+\n+    let b = just_return(a).deref();\n+\n+    let b: String = concat(just_return(a).deref());\n+\n+    let b: String = a.deref().clone();\n+\n+    let b: usize = a.deref_mut().len();\n+\n+    let b: &usize = &a.deref().len();\n+\n+    let b: &str = a.deref().deref();\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    macro_rules! expr_deref {\n+        ($body:expr) => {\n+            $body.deref()\n+        };\n+    }\n+    let b: &str = expr_deref!(a);\n+\n+    let opt_a = Some(a);\n+    let b = opt_a.unwrap().deref();\n+\n+    // The struct does not implement Deref trait\n+    #[derive(Copy, Clone)]\n+    struct NoLint(u32);\n+    impl NoLint {\n+        pub fn deref(self) -> u32 {\n+            self.0\n+        }\n+        pub fn deref_mut(self) -> u32 {\n+            self.0\n+        }\n+    }\n+    let no_lint = NoLint(42);\n+    let b = no_lint.deref();\n+    let b = no_lint.deref_mut();\n+}"}, {"sha": "25e1c29e7fa5ff4c45755bcdb34b5b709c53adb5", "filename": "tests/ui/dereference.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/tests%2Fui%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/tests%2Fui%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.rs?ref=b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n #![warn(clippy::explicit_deref_method)]\n \n@@ -59,4 +61,19 @@ fn main() {\n \n     let opt_a = Some(a);\n     let b = opt_a.unwrap().deref();\n+\n+    // The struct does not implement Deref trait\n+    #[derive(Copy, Clone)]\n+    struct NoLint(u32);\n+    impl NoLint {\n+        pub fn deref(self) -> u32 {\n+            self.0\n+        }\n+        pub fn deref_mut(self) -> u32 {\n+            self.0\n+        }\n+    }\n+    let no_lint = NoLint(42);\n+    let b = no_lint.deref();\n+    let b = no_lint.deref_mut();\n }"}, {"sha": "97fab3a34e010aa416f0abf90513ca40f4d641a7", "filename": "tests/ui/dereference.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/tests%2Fui%2Fdereference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d43305502f15d3c3e1a49f488eedc5ce330b4f/tests%2Fui%2Fdereference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.stderr?ref=b6d43305502f15d3c3e1a49f488eedc5ce330b4f", "patch": "@@ -1,43 +1,43 @@\n error: explicit deref method call\n-  --> $DIR/dereference.rs:19:19\n+  --> $DIR/dereference.rs:21:19\n    |\n LL |     let b: &str = a.deref();\n    |                   ^^^^^^^^^ help: try this: `&*a`\n    |\n    = note: `-D clippy::explicit-deref-method` implied by `-D warnings`\n \n error: explicit deref_mut method call\n-  --> $DIR/dereference.rs:21:23\n+  --> $DIR/dereference.rs:23:23\n    |\n LL |     let b: &mut str = a.deref_mut();\n    |                       ^^^^^^^^^^^^^ help: try this: `&mut *a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:24:39\n+  --> $DIR/dereference.rs:26:39\n    |\n LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n    |                                       ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:24:50\n+  --> $DIR/dereference.rs:26:50\n    |\n LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n    |                                                  ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:26:20\n+  --> $DIR/dereference.rs:28:20\n    |\n LL |     println!(\"{}\", a.deref());\n    |                    ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:29:11\n+  --> $DIR/dereference.rs:31:11\n    |\n LL |     match a.deref() {\n    |           ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:33:28\n+  --> $DIR/dereference.rs:35:28\n    |\n LL |     let b: String = concat(a.deref());\n    |                            ^^^^^^^^^ help: try this: `&*a`"}]}