{"sha": "61eb38aeda6cb54b93b872bf503d70084c4d621c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZWIzOGFlZGE2Y2I1NGI5M2I4NzJiZjUwM2Q3MDA4NGM0ZDYyMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T15:43:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T15:43:14Z"}, "message": "Auto merge of #7418 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "bdddda8ad62192c0c95814e0aa989c1bff8ad44c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdddda8ad62192c0c95814e0aa989c1bff8ad44c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61eb38aeda6cb54b93b872bf503d70084c4d621c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61eb38aeda6cb54b93b872bf503d70084c4d621c", "html_url": "https://github.com/rust-lang/rust/commit/61eb38aeda6cb54b93b872bf503d70084c4d621c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61eb38aeda6cb54b93b872bf503d70084c4d621c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "753bce30f057c8a51c1121e0d1958da4cb28059b", "url": "https://api.github.com/repos/rust-lang/rust/commits/753bce30f057c8a51c1121e0d1958da4cb28059b", "html_url": "https://github.com/rust-lang/rust/commit/753bce30f057c8a51c1121e0d1958da4cb28059b"}, {"sha": "d446d5eba538aa41a736710db27f4eab0b9dfd35", "url": "https://api.github.com/repos/rust-lang/rust/commits/d446d5eba538aa41a736710db27f4eab0b9dfd35", "html_url": "https://github.com/rust-lang/rust/commit/d446d5eba538aa41a736710db27f4eab0b9dfd35"}], "stats": {"total": 101, "additions": 49, "deletions": 52}, "files": [{"sha": "4273fda4e640d5d9356a5d63f166db26224fc603", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -342,7 +342,7 @@ We have prioritization labels and a sync-blocker label, which are described belo\n - [P-low][p-low]: Requires attention (fix/response/evaluation) by a team member but isn't urgent.\n - [P-medium][p-medium]: Should be addressed by a team member until the next sync.\n - [P-high][p-high]: Should be immediately addressed and will require an out-of-cycle sync or a backport.\n-- [L-sync-blocker][l-sync-blocker]: An issue that \"blocks\" a sync. \n+- [L-sync-blocker][l-sync-blocker]: An issue that \"blocks\" a sync.\n Or rather: before the sync this should be addressed,\n e.g. by removing a lint again, so it doesn't hit beta/stable.\n "}, {"sha": "e1c968273cdf63ef95eae0633929566df1304e7e", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -95,7 +95,7 @@ As with `cargo check`, this includes dependencies that are members of the worksp\n If you want to run Clippy **only** on the given crate, use the `--no-deps` option like this:\n \n ```terminal\n-cargo clippy -p example -- --no-deps \n+cargo clippy -p example -- --no-deps\n ```\n \n ### As a rustc replacement (`clippy-driver`)"}, {"sha": "3ac20fd9849eef656fb2cccb4ea2f7f53c426fb7", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -410,13 +410,8 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         }\n \n         if let ExprKind::Block(block, _) = expr.kind {\n-            match block.rules {\n-                BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n-                | BlockCheckMode::PushUnsafeBlock(UnsafeSource::UserProvided)\n-                | BlockCheckMode::PopUnsafeBlock(UnsafeSource::UserProvided) => {\n-                    self.has_unsafe = true;\n-                },\n-                _ => {},\n+            if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules {\n+                self.has_unsafe = true;\n             }\n         }\n "}, {"sha": "8e45fdfecc447a641ec2882c80f41a2fe779f88b", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for GetLastWithLen {\n \n             // LHS of subtraction is \"x.len()\"\n             if let ExprKind::MethodCall(arg_lhs_path, _, lhs_args, _) = &lhs.kind;\n-            if arg_lhs_path.ident.name == sym!(len);\n+            if arg_lhs_path.ident.name == sym::len;\n             if let Some(arg_lhs_struct) = lhs_args.get(0);\n \n             // The two vectors referenced (x in x.get(...) and in x.len())"}, {"sha": "d69187f67466dd991ed1c5b046861255be1da678", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if_chain! {\n-            if item.ident.as_str() == \"len\";\n+            if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n             if cx.access_levels.is_exported(item.hir_id());\n@@ -189,8 +189,8 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n }\n \n fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items: &[TraitItemRef]) {\n-    fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: &str) -> bool {\n-        item.ident.name.as_str() == name\n+    fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: Symbol) -> bool {\n+        item.ident.name == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n                 has_self && { cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1 }\n             } else {\n@@ -207,7 +207,9 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.hir_id()) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n+    if cx.access_levels.is_exported(visited_trait.hir_id())\n+        && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n+    {\n         let mut current_and_super_traits = DefIdSet::default();\n         fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n \n@@ -401,7 +403,7 @@ fn check_len(\n             return;\n         }\n \n-        if method_name.as_str() == \"len\" && args.len() == 1 && has_is_empty(cx, &args[0]) {\n+        if method_name == sym::len && args.len() == 1 && has_is_empty(cx, &args[0]) {\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "7d5ed3ab0a751ff67101324c4479fdf138981f04", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -118,7 +118,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     let print_limit = |end: &Expr<'_>, end_str: &str, base: &Expr<'_>, sugg: MinifyingSugg<'static>| {\n         if_chain! {\n             if let ExprKind::MethodCall(method, _, len_args, _) = end.kind;\n-            if method.ident.name == sym!(len);\n+            if method.ident.name == sym::len;\n             if len_args.len() == 1;\n             if let Some(arg) = len_args.get(0);\n             if path_to_local(arg) == path_to_local(base);"}, {"sha": "3810d0dcc051a7da141bcb8cb775df071184d1fe", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -192,7 +192,7 @@ fn is_len_call(expr: &Expr<'_>, var: Symbol) -> bool {\n     if_chain! {\n         if let ExprKind::MethodCall(method, _, len_args, _) = expr.kind;\n         if len_args.len() == 1;\n-        if method.ident.name == sym!(len);\n+        if method.ident.name == sym::len;\n         if let ExprKind::Path(QPath::Resolved(_, path)) = len_args[0].kind;\n         if path.segments.len() == 1;\n         if path.segments[0].ident.name == var;"}, {"sha": "073c5570a88776e8c396bcc69284a3f5735cd2e6", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -87,7 +87,7 @@ pub(super) fn check<'tcx>(\n         ];\n \n         if let hir::ExprKind::MethodCall(path, _, args, _) = &arg.kind {\n-            if path.ident.as_str() == \"len\" {\n+            if path.ident.name == sym::len {\n                 let ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n \n                 match ty.kind() {"}, {"sha": "910b05360925d53dd6a6fd39aa14dbc8066d5cd0", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -167,7 +167,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n                         BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) => None,\n                         BlockCheckMode::DefaultBlock => Some(vec![&**e]),\n                         // in case of compiler-inserted signaling blocks\n-                        _ => reduce_expression(cx, e),\n+                        BlockCheckMode::UnsafeBlock(_) => reduce_expression(cx, e),\n                     }\n                 })\n             } else {"}, {"sha": "b41c478c266157d5295155ffdc4103aed7847452", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -329,7 +329,7 @@ fn check_range_zip_with_len(cx: &LateContext<'_>, path: &PathSegment<'_>, args:\n         if is_integer_const(cx, start, 0);\n         // `.len()` call\n         if let ExprKind::MethodCall(len_path, _, len_args, _) = end.kind;\n-        if len_path.ident.name == sym!(len) && len_args.len() == 1;\n+        if len_path.ident.name == sym::len && len_args.len() == 1;\n         // `.iter()` and `.len()` called on same `Path`\n         if let ExprKind::Path(QPath::Resolved(_, iter_path)) = iter_args[0].kind;\n         if let ExprKind::Path(QPath::Resolved(_, len_path)) = len_args[0].kind;"}, {"sha": "c97f7e1626e76291df3ecea23dfd579116950dc0", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -104,7 +104,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                 }\n                 if_chain! {\n-                    if match_trait_method(cx, e, &paths::TRY_INTO_TRAIT) && &*name.ident.as_str() == \"try_into\";\n+                    if match_trait_method(cx, e, &paths::TRY_INTO_TRAIT) && name.ident.name == sym::try_into;\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if is_type_diagnostic_item(cx, a, sym::result_type);"}, {"sha": "e98354358af62a10c91ea9992426928b35131323", "filename": "doc/basics.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -98,9 +98,9 @@ cargo dev setup intellij\n \n ## lintcheck\n `cargo lintcheck` will build and run clippy on a fixed set of crates and generate a log of the results.  \n-You can `git diff` the updated log against its previous version and \n+You can `git diff` the updated log against its previous version and\n see what impact your lint made on a small set of crates.  \n-If you add a new lint, please audit the resulting warnings and make sure \n+If you add a new lint, please audit the resulting warnings and make sure\n there are no false positives and that the suggestions are valid.\n \n Refer to the tools [README] for more details."}, {"sha": "8c169506e533d7b7892ff558924ca46c784529ca", "filename": "lintcheck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/lintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/lintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FREADME.md?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -73,5 +73,5 @@ You can run `./lintcheck/target/debug/lintcheck --fix` which will run Clippy wit\n print a warning if Clippys suggestions fail to apply (if the resulting code does not build).  \n This lets us spot bad suggestions or false positives automatically in some cases.  \n \n-Please note that the target dir should be cleaned afterwards since clippy will modify \n+Please note that the target dir should be cleaned afterwards since clippy will modify\n the downloaded sources which can lead to unexpected results when running lintcheck again afterwards."}, {"sha": "2d3c65c1d3982fa68d7555c7308ee11aecbbde2a", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-06-17\"\n+channel = \"nightly-2021-07-01\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "46b7833f42804c2b55787d49b947e9fca45fcc38", "filename": "tests/ui/bytes_nth.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fbytes_nth.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fbytes_nth.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.fixed?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -6,6 +6,6 @@\n fn main() {\n     let s = String::from(\"String\");\n     s.as_bytes().get(3);\n-    &s.as_bytes().get(3);\n+    let _ = &s.as_bytes().get(3);\n     s[..].as_bytes().get(3);\n }"}, {"sha": "c5e983d4d4e00d1c0c9dd803f70cd95b45b7cf95", "filename": "tests/ui/bytes_nth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -6,6 +6,6 @@\n fn main() {\n     let s = String::from(\"String\");\n     s.bytes().nth(3);\n-    &s.bytes().nth(3);\n+    let _ = &s.bytes().nth(3);\n     s[..].bytes().nth(3);\n }"}, {"sha": "536decf5e7fc49bf8ce585585ef35d02c8c49abc", "filename": "tests/ui/bytes_nth.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fbytes_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fbytes_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.stderr?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -7,10 +7,10 @@ LL |     s.bytes().nth(3);\n    = note: `-D clippy::bytes-nth` implied by `-D warnings`\n \n error: called `.byte().nth()` on a `String`\n-  --> $DIR/bytes_nth.rs:9:6\n+  --> $DIR/bytes_nth.rs:9:14\n    |\n-LL |     &s.bytes().nth(3);\n-   |      ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n+LL |     let _ = &s.bytes().nth(3);\n+   |              ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n \n error: called `.byte().nth()` on a `str`\n   --> $DIR/bytes_nth.rs:10:5"}, {"sha": "8b2c318acf84e108982231e08c281889057757ba", "filename": "tests/ui/crashes/ice-3969.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3969.stderr?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -5,7 +5,7 @@ LL |     for<'a> Dst<A + 'a>: Sized,\n    |                 ^^^^^^ help: use `dyn`: `dyn A + 'a`\n    |\n    = note: `-D bare-trait-objects` implied by `-D warnings`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -14,7 +14,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                ^ help: use `dyn`: `dyn A`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -23,7 +23,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                                                         ^ help: use `dyn`: `dyn A`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 3 previous errors"}, {"sha": "97c5929783d882c51dd754244c8bec46ff292f5d", "filename": "tests/ui/iter_count.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.fixed?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -50,7 +50,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    &vec[..].len();\n+    let _ = &vec[..].len();\n     vec.len();\n     boxed_slice.len();\n     vec_deque.len();\n@@ -62,13 +62,13 @@ fn main() {\n     binary_heap.len();\n \n     vec.len();\n-    &vec[..].len();\n+    let _ = &vec[..].len();\n     vec_deque.len();\n     hash_map.len();\n     b_tree_map.len();\n     linked_list.len();\n \n-    &vec[..].len();\n+    let _ = &vec[..].len();\n     vec.len();\n     vec_deque.len();\n     hash_set.len();"}, {"sha": "70bb734763f09bef26eb35bc4b45f9c196dce29b", "filename": "tests/ui/iter_count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.rs?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -50,7 +50,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    &vec[..].iter().count();\n+    let _ = &vec[..].iter().count();\n     vec.iter().count();\n     boxed_slice.iter().count();\n     vec_deque.iter().count();\n@@ -62,13 +62,13 @@ fn main() {\n     binary_heap.iter().count();\n \n     vec.iter_mut().count();\n-    &vec[..].iter_mut().count();\n+    let _ = &vec[..].iter_mut().count();\n     vec_deque.iter_mut().count();\n     hash_map.iter_mut().count();\n     b_tree_map.iter_mut().count();\n     linked_list.iter_mut().count();\n \n-    &vec[..].into_iter().count();\n+    let _ = &vec[..].into_iter().count();\n     vec.into_iter().count();\n     vec_deque.into_iter().count();\n     hash_set.into_iter().count();"}, {"sha": "1d2c22f9dfad5470e0b1d478b439a26587bc7a1b", "filename": "tests/ui/iter_count.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/tests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_count.stderr?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -1,8 +1,8 @@\n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:53:6\n+  --> $DIR/iter_count.rs:53:14\n    |\n-LL |     &vec[..].iter().count();\n-   |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     let _ = &vec[..].iter().count();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n    |\n    = note: `-D clippy::iter-count` implied by `-D warnings`\n \n@@ -67,10 +67,10 @@ LL |     vec.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter_mut().count()` on a `slice`\n-  --> $DIR/iter_count.rs:65:6\n+  --> $DIR/iter_count.rs:65:14\n    |\n-LL |     &vec[..].iter_mut().count();\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     let _ = &vec[..].iter_mut().count();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.iter_mut().count()` on a `VecDeque`\n   --> $DIR/iter_count.rs:66:5\n@@ -97,10 +97,10 @@ LL |     linked_list.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.into_iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:71:6\n+  --> $DIR/iter_count.rs:71:14\n    |\n-LL |     &vec[..].into_iter().count();\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     let _ = &vec[..].into_iter().count();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.into_iter().count()` on a `Vec`\n   --> $DIR/iter_count.rs:72:5"}, {"sha": "0174d3ffcbc2af59caf2dae5668fadd27b737161", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61eb38aeda6cb54b93b872bf503d70084c4d621c/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/61eb38aeda6cb54b93b872bf503d70084c4d621c/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=61eb38aeda6cb54b93b872bf503d70084c4d621c", "patch": "@@ -363,7 +363,7 @@ <h4 class=\"list-group-item-heading\">\n \n             $scope.bySearch = function (lint, index, array) {\n                 let searchStr = $scope.search;\n-                // It can be `null` I haven't missed this value \n+                // It can be `null` I haven't missed this value\n                 if (searchStr == null || searchStr.length < 3) {\n                     return true;\n                 }\n@@ -375,7 +375,7 @@ <h4 class=\"list-group-item-heading\">\n                 }\n \n                 // Search the description\n-                // The use of `for`-loops instead of `foreach` enables us to return early \n+                // The use of `for`-loops instead of `foreach` enables us to return early\n                 let terms = searchStr.split(\" \");\n                 for (index = 0; index < terms.length; index++) {\n                     if (lint.id.indexOf(terms[index]) !== -1) {\n@@ -463,7 +463,7 @@ <h4 class=\"list-group-item-heading\">\n \n         let children = themeMenu.children;\n         for (let index = 0; index < children.length; index++) {\n-            let child = children[index]; \n+            let child = children[index];\n             child.addEventListener(\"click\", function(e) {\n                 setTheme(child.id, true);\n             });\n@@ -476,7 +476,7 @@ <h4 class=\"list-group-item-heading\">\n         let enableHighlight = false;\n         let enableNight = false;\n         let enableAyu = false;\n-        \n+\n         if (theme == \"ayu\") {\n             enableAyu = true;\n         } else if (theme == \"coal\" || theme == \"navy\") {"}]}