{"sha": "e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YTIzOWExYTJlYzllMGRhODZhODU1M2Y5ZGZmNjI0MzFmOGJkMGU=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-11-11T14:28:31Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-11-11T15:53:11Z"}, "message": "Add lint for useless transmutes\n\nCloses #441.", "tree": {"sha": "bf554863e24d773c23b3d901a7556ba77f93bf2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf554863e24d773c23b3d901a7556ba77f93bf2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "html_url": "https://github.com/rust-lang/rust/commit/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d57fa7bc5bc255d33b52ab76c1765bed86b53051", "url": "https://api.github.com/repos/rust-lang/rust/commits/d57fa7bc5bc255d33b52ab76c1765bed86b53051", "html_url": "https://github.com/rust-lang/rust/commit/d57fa7bc5bc255d33b52ab76c1765bed86b53051"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "b893c4e7a1796ed120f8fd358b9c8cc055eca58c", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 73 lints included in this crate:\n+There are 74 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -77,6 +77,7 @@ name\n [unstable_as_mut_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice)         | warn    | as_mut_slice is not stable and can be replaced by &mut v[..]see https://github.com/rust-lang/rust/issues/27729\n [unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                 | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n+[useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                 | warn    | transmutes that have the same to and from types\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                       | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [while_let_on_iterator](https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator)         | warn    | using a while-let loop instead of a for loop on an iterator\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention) | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention"}, {"sha": "afbf3d2a92c9d4894dafb4882cb767e948ffeafe", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "patch": "@@ -55,6 +55,7 @@ pub mod needless_features;\n pub mod needless_update;\n pub mod no_effect;\n pub mod temporary_assignment;\n+pub mod transmute;\n \n mod reexport {\n     pub use syntax::ast::{Name, Ident, NodeId};\n@@ -104,6 +105,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box no_effect::NoEffectPass);\n     reg.register_late_lint_pass(box map_clone::MapClonePass);\n     reg.register_late_lint_pass(box temporary_assignment::TemporaryAssignmentPass);\n+    reg.register_late_lint_pass(box transmute::UselessTransmute);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -175,6 +177,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        transmute::USELESS_TRANSMUTE,\n         types::BOX_VEC,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,"}, {"sha": "ab1397ea7fe4b0ca70ebed679104864dbe06e422", "filename": "src/transmute.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/src%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/src%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftransmute.rs?ref=e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "patch": "@@ -0,0 +1,37 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils;\n+\n+declare_lint! {\n+    pub USELESS_TRANSMUTE,\n+    Warn,\n+    \"transmutes that have the same to and from types\"\n+}\n+\n+pub struct UselessTransmute;\n+\n+impl LintPass for UselessTransmute {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(USELESS_TRANSMUTE)\n+    }\n+}\n+\n+impl LateLintPass for UselessTransmute {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprCall(ref path_expr, ref args) = e.node {\n+            if let ExprPath(None, _) = path_expr.node {\n+                let def_id = cx.tcx.def_map.borrow()[&path_expr.id].def_id();\n+\n+                if utils::match_def_path(cx, def_id, &[\"core\", \"intrinsics\", \"transmute\"]) {\n+                    let from_ty = cx.tcx.expr_ty(&args[0]);\n+                    let to_ty = cx.tcx.expr_ty(e);\n+\n+                    if from_ty == to_ty {\n+                        cx.span_lint(USELESS_TRANSMUTE, e.span,\n+                                     &format!(\"transmute from a type (`{}`) to itself\", from_ty));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "0a2d09d9431ed97ee3d283280a11dc749a09e925", "filename": "tests/compile-fail/transmute.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/tests%2Fcompile-fail%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e/tests%2Fcompile-fail%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute.rs?ref=e8a239a1a2ec9e0da86a8553f9dff62431f8bd0e", "patch": "@@ -0,0 +1,46 @@\n+#![feature(core)]\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(useless_transmute)]\n+\n+extern crate core;\n+\n+use std::mem::transmute as my_transmute;\n+use std::vec::Vec as MyVec;\n+\n+fn my_vec() -> MyVec<i32> {\n+    vec![]\n+}\n+\n+#[allow(needless_lifetimes)]\n+unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n+    let _: &'a T = core::intrinsics::transmute(t);\n+    //~^ ERROR transmute from a type (`&'a T`) to itself\n+\n+    let _: &'a U = core::intrinsics::transmute(t);\n+}\n+\n+fn main() {\n+    unsafe {\n+        let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n+        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+\n+        let _: Vec<i32> = core::mem::transmute(my_vec());\n+        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+\n+        let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n+        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+\n+        let _: Vec<i32> = std::mem::transmute(my_vec());\n+        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+\n+        let _: Vec<i32> = my_transmute(my_vec());\n+        //~^ ERROR transmute from a type (`collections::vec::Vec<i32>`) to itself\n+\n+        let _: Vec<u32> = core::intrinsics::transmute(my_vec());\n+        let _: Vec<u32> = core::mem::transmute(my_vec());\n+        let _: Vec<u32> = std::intrinsics::transmute(my_vec());\n+        let _: Vec<u32> = std::mem::transmute(my_vec());\n+        let _: Vec<u32> = my_transmute(my_vec());\n+    }\n+}"}]}