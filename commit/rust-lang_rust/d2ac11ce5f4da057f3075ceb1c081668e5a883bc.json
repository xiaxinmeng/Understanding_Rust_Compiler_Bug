{"sha": "d2ac11ce5f4da057f3075ceb1c081668e5a883bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYWMxMWNlNWY0ZGEwNTdmMzA3NWNlYjFjMDgxNjY4ZTVhODgzYmM=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-13T06:53:58Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-14T22:56:00Z"}, "message": "Cleanups", "tree": {"sha": "67bb41b5d0c452dad765ac70f468e8c09c0f3a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67bb41b5d0c452dad765ac70f468e8c09c0f3a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2ac11ce5f4da057f3075ceb1c081668e5a883bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ac11ce5f4da057f3075ceb1c081668e5a883bc", "html_url": "https://github.com/rust-lang/rust/commit/d2ac11ce5f4da057f3075ceb1c081668e5a883bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2ac11ce5f4da057f3075ceb1c081668e5a883bc/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f", "html_url": "https://github.com/rust-lang/rust/commit/1897657ef09eea3d0b0afbbbd154a12fbb8fbf3f"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "97d983ed9e16356f91f0bf8a9119bad7636dae34", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2ac11ce5f4da057f3075ceb1c081668e5a883bc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ac11ce5f4da057f3075ceb1c081668e5a883bc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d2ac11ce5f4da057f3075ceb1c081668e5a883bc", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             .collect();\n \n         // create binding start block for link them by false edges\n-        let candidate_count = arms.iter().fold(0, |ac, c| ac + c.patterns.len());\n+        let candidate_count = arms.iter().map(|c| c.patterns.len()).sum::<usize>();\n         let pre_binding_blocks: Vec<_> = (0..=candidate_count)\n             .map(|_| self.cfg.start_new_block())\n             .collect();\n@@ -337,7 +337,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     pub fn place_into_pattern(\n         &mut self,\n-        mut block: BasicBlock,\n+        block: BasicBlock,\n         irrefutable_pat: Pattern<'tcx>,\n         initializer: &Place<'tcx>,\n         set_match_place: bool,\n@@ -359,7 +359,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         // Simplify the candidate. Since the pattern is irrefutable, this should\n         // always convert all match-pairs into bindings.\n-        unpack!(block = self.simplify_candidate(block, &mut candidate));\n+        self.simplify_candidate(&mut candidate);\n \n         if !candidate.match_pairs.is_empty() {\n             span_bug!(\n@@ -745,7 +745,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // complete, all the match pairs which remain require some\n         // form of test, whether it be a switch or pattern comparison.\n         for candidate in &mut candidates {\n-            unpack!(block = self.simplify_candidate(block, candidate));\n+            self.simplify_candidate(candidate);\n         }\n \n         // The candidates are sorted by priority. Check to see\n@@ -1035,7 +1035,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             test, match_pair\n         );\n         let target_blocks = self.perform_test(block, &match_pair.place, &test);\n-        let mut target_candidates: Vec<_> = (0..target_blocks.len()).map(|_| vec![]).collect();\n+        let mut target_candidates = vec![vec![]; target_blocks.len()];\n \n         // Sort the candidates into the appropriate vector in\n         // `target_candidates`. Note that at some point we may"}, {"sha": "b9fd4f0e0b60b7a84b88a5400ef2dbaaca9d7805", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2ac11ce5f4da057f3075ceb1c081668e5a883bc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ac11ce5f4da057f3075ceb1c081668e5a883bc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=d2ac11ce5f4da057f3075ceb1c081668e5a883bc", "patch": "@@ -22,10 +22,9 @@\n //! sort of test: for example, testing which variant an enum is, or\n //! testing a value against a constant.\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n+use build::Builder;\n use build::matches::{Ascription, Binding, MatchPair, Candidate};\n use hair::*;\n-use rustc::mir::*;\n use rustc::ty;\n use rustc::ty::layout::{Integer, IntegerExt, Size};\n use syntax::attr::{SignedInt, UnsignedInt};\n@@ -35,24 +34,23 @@ use std::mem;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn simplify_candidate<'pat>(&mut self,\n-                                    block: BasicBlock,\n-                                    candidate: &mut Candidate<'pat, 'tcx>)\n-                                    -> BlockAnd<()> {\n+                                    candidate: &mut Candidate<'pat, 'tcx>) {\n         // repeatedly simplify match pairs until fixed point is reached\n         loop {\n             let match_pairs = mem::replace(&mut candidate.match_pairs, vec![]);\n-            let mut progress = match_pairs.len(); // count how many were simplified\n+            let mut changed = false;\n             for match_pair in match_pairs {\n                 match self.simplify_match_pair(match_pair, candidate) {\n-                    Ok(()) => {}\n+                    Ok(()) => {\n+                        changed = true;\n+                    }\n                     Err(match_pair) => {\n                         candidate.match_pairs.push(match_pair);\n-                        progress -= 1; // this one was not simplified\n                     }\n                 }\n             }\n-            if progress == 0 {\n-                return block.unit(); // if we were not able to simplify any, done.\n+            if !changed {\n+                return; // if we were not able to simplify any, done.\n             }\n         }\n     }"}, {"sha": "a95804e05c9061771373ed08b7722597a521d6c8", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2ac11ce5f4da057f3075ceb1c081668e5a883bc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ac11ce5f4da057f3075ceb1c081668e5a883bc/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d2ac11ce5f4da057f3075ceb1c081668e5a883bc", "patch": "@@ -200,20 +200,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 for (idx, discr) in adt_def.discriminants(tcx) {\n                     target_blocks.push(if variants.contains(idx) {\n                         values.push(discr.val);\n-                        targets.push(self.cfg.start_new_block());\n-                        *targets.last().unwrap()\n+                        let block = self.cfg.start_new_block();\n+                        targets.push(block);\n+                        block\n                     } else {\n-                        if otherwise_block.is_none() {\n-                            otherwise_block = Some(self.cfg.start_new_block());\n-                        }\n-                        otherwise_block.unwrap()\n+                        *otherwise_block\n+                            .get_or_insert_with(|| self.cfg.start_new_block())\n                     });\n                 }\n-                if let Some(otherwise_block) = otherwise_block {\n-                    targets.push(otherwise_block);\n-                } else {\n-                    targets.push(self.unreachable_block());\n-                }\n+                targets.push(\n+                    otherwise_block\n+                        .unwrap_or_else(|| self.unreachable_block()),\n+                );\n                 debug!(\"num_enum_variants: {}, tested variants: {:?}, variants: {:?}\",\n                        num_enum_variants, values, variants);\n                 let discr_ty = adt_def.repr.discr_type().to_ty(tcx);\n@@ -490,8 +488,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // away.)\n         let tested_match_pair = candidate.match_pairs.iter()\n                                                      .enumerate()\n-                                                     .filter(|&(_, mp)| mp.place == *test_place)\n-                                                     .next();\n+                                                     .find(|&(_, mp)| mp.place == *test_place);\n         let (match_pair_index, match_pair) = match tested_match_pair {\n             Some(pair) => pair,\n             None => {"}]}