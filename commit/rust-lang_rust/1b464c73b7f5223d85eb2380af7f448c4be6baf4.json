{"sha": "1b464c73b7f5223d85eb2380af7f448c4be6baf4", "node_id": "C_kwDOAAsO6NoAKDFiNDY0YzczYjdmNTIyM2Q4NWViMjM4MGFmN2Y0NDhjNGJlNmJhZjQ", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-05-03T18:52:53Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-08-12T04:48:39Z"}, "message": "Check attributes on pattern fields.\n\nAttributes on pattern struct fields were not being checked for validity.\nThis adds the fields as HIR nodes so that the `CheckAttrVisitor` can\nvisit those nodes to check their attributes.", "tree": {"sha": "e87b7cb25393f1e255175f1e071b4d5d231448d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e87b7cb25393f1e255175f1e071b4d5d231448d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b464c73b7f5223d85eb2380af7f448c4be6baf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b464c73b7f5223d85eb2380af7f448c4be6baf4", "html_url": "https://github.com/rust-lang/rust/commit/1b464c73b7f5223d85eb2380af7f448c4be6baf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b464c73b7f5223d85eb2380af7f448c4be6baf4/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b998821e4c51c44a9ebee395c91323c374236bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b998821e4c51c44a9ebee395c91323c374236bbb", "html_url": "https://github.com/rust-lang/rust/commit/b998821e4c51c44a9ebee395c91323c374236bbb"}], "stats": {"total": 86, "additions": 64, "deletions": 22}, "files": [{"sha": "ecc26faf20da60575f930545feaf719cdf890e73", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -193,6 +193,11 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_pat(&mut self, pat: &'hir Pat<'hir>) {\n         self.insert(pat.span, pat.hir_id, Node::Pat(pat));\n+        if let PatKind::Struct(_, fields, _) = pat.kind {\n+            for field in fields {\n+                self.insert(field.span, field.hir_id, Node::PatField(field));\n+            }\n+        }\n \n         self.with_parent(pat.hir_id, |this| {\n             intravisit::walk_pat(this, pat);"}, {"sha": "51f67e505f4eeae82458a7b138a95b7a112ce8be", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -64,12 +64,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n \n-                        let fs = self.arena.alloc_from_iter(fields.iter().map(|f| hir::PatField {\n-                            hir_id: self.next_id(),\n-                            ident: self.lower_ident(f.ident),\n-                            pat: self.lower_pat(&f.pat),\n-                            is_shorthand: f.is_shorthand,\n-                            span: self.lower_span(f.span),\n+                        let fs = self.arena.alloc_from_iter(fields.iter().map(|f| {\n+                            let hir_id = self.lower_node_id(f.id);\n+                            self.lower_attrs(hir_id, &f.attrs);\n+\n+                            hir::PatField {\n+                                hir_id,\n+                                ident: self.lower_ident(f.ident),\n+                                pat: self.lower_pat(&f.pat),\n+                                is_shorthand: f.is_shorthand,\n+                                span: self.lower_span(f.span),\n+                            }\n                         }));\n                         break hir::PatKind::Struct(qpath, fs, etc);\n                     }"}, {"sha": "9885d33d4442060aaf13a4e393be5208305a9af9", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -3338,6 +3338,7 @@ pub enum Node<'hir> {\n     TypeBinding(&'hir TypeBinding<'hir>),\n     TraitRef(&'hir TraitRef<'hir>),\n     Pat(&'hir Pat<'hir>),\n+    PatField(&'hir PatField<'hir>),\n     Arm(&'hir Arm<'hir>),\n     Block(&'hir Block<'hir>),\n     Local(&'hir Local<'hir>),\n@@ -3388,6 +3389,7 @@ impl<'hir> Node<'hir> {\n             | Node::Block(..)\n             | Node::Ctor(..)\n             | Node::Pat(..)\n+            | Node::PatField(..)\n             | Node::Arm(..)\n             | Node::Local(..)\n             | Node::Crate(..)"}, {"sha": "1b05c82eade87d372e110f5af9c91a4bb7fb4cce", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -56,6 +56,7 @@ pub enum Target {\n     GenericParam(GenericParamKind),\n     MacroDef,\n     Param,\n+    PatField,\n }\n \n impl Display for Target {\n@@ -183,6 +184,7 @@ impl Target {\n             },\n             Target::MacroDef => \"macro def\",\n             Target::Param => \"function param\",\n+            Target::PatField => \"pattern field\",\n         }\n     }\n }"}, {"sha": "641175d452973957f144417654cbd5a198291a7d", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -89,6 +89,7 @@ impl<'a> State<'a> {\n             Node::TypeBinding(a) => self.print_type_binding(a),\n             Node::TraitRef(a) => self.print_trait_ref(a),\n             Node::Pat(a) => self.print_pat(a),\n+            Node::PatField(a) => self.print_patfield(&a),\n             Node::Arm(a) => self.print_arm(a),\n             Node::Infer(_) => self.word(\"_\"),\n             Node::Block(a) => {\n@@ -1799,20 +1800,7 @@ impl<'a> State<'a> {\n                 if !empty {\n                     self.space();\n                 }\n-                self.commasep_cmnt(\n-                    Consistent,\n-                    fields,\n-                    |s, f| {\n-                        s.cbox(INDENT_UNIT);\n-                        if !f.is_shorthand {\n-                            s.print_ident(f.ident);\n-                            s.word_nbsp(\":\");\n-                        }\n-                        s.print_pat(f.pat);\n-                        s.end()\n-                    },\n-                    |f| f.pat.span,\n-                );\n+                self.commasep_cmnt(Consistent, &fields, |s, f| s.print_patfield(f), |f| f.pat.span);\n                 if etc {\n                     if !fields.is_empty() {\n                         self.word_space(\",\");\n@@ -1907,6 +1895,20 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::Pat(pat))\n     }\n \n+    pub fn print_patfield(&mut self, field: &hir::PatField<'_>) {\n+        if self.attrs(field.hir_id).is_empty() {\n+            self.space();\n+        }\n+        self.cbox(INDENT_UNIT);\n+        self.print_outer_attributes(&self.attrs(field.hir_id));\n+        if !field.is_shorthand {\n+            self.print_ident(field.ident);\n+            self.word_nbsp(\":\");\n+        }\n+        self.print_pat(field.pat);\n+        self.end();\n+    }\n+\n     pub fn print_param(&mut self, arg: &hir::Param<'_>) {\n         self.print_outer_attributes(self.attrs(arg.hir_id));\n         self.print_pat(arg.pat);"}, {"sha": "06fdef4142ee136404a7ae2c124543aea6ad68ed", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -297,6 +297,7 @@ impl<'hir> Map<'hir> {\n             | Node::Infer(_)\n             | Node::TraitRef(_)\n             | Node::Pat(_)\n+            | Node::PatField(_)\n             | Node::Local(_)\n             | Node::Param(_)\n             | Node::Arm(_)\n@@ -1030,6 +1031,7 @@ impl<'hir> Map<'hir> {\n             Node::TypeBinding(tb) => tb.span,\n             Node::TraitRef(tr) => tr.path.span,\n             Node::Pat(pat) => pat.span,\n+            Node::PatField(field) => field.span,\n             Node::Arm(arm) => arm.span,\n             Node::Block(block) => block.span,\n             Node::Ctor(..) => self.span_with_body(self.get_parent_node(hir_id)),\n@@ -1247,6 +1249,7 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::TypeBinding(_)) => node_str(\"type binding\"),\n         Some(Node::TraitRef(_)) => node_str(\"trait ref\"),\n         Some(Node::Pat(_)) => node_str(\"pat\"),\n+        Some(Node::PatField(_)) => node_str(\"pattern field\"),\n         Some(Node::Param(_)) => node_str(\"param\"),\n         Some(Node::Arm(_)) => node_str(\"arm\"),\n         Some(Node::Block(_)) => node_str(\"block\"),"}, {"sha": "42f5806c1f7c04b70e20f546de5e0c0edf0f3636", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -652,7 +652,8 @@ impl CheckAttrVisitor<'_> {\n             | Target::ForeignStatic\n             | Target::ForeignTy\n             | Target::GenericParam(..)\n-            | Target::MacroDef => None,\n+            | Target::MacroDef\n+            | Target::PatField => None,\n         } {\n             tcx.sess.emit_err(errors::DocAliasBadLocation { span, attr_str, location });\n             return false;\n@@ -2076,6 +2077,15 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n         intravisit::walk_param(self, param);\n     }\n+\n+    fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n+        if let hir::PatKind::Struct(_, fields, _) = p.kind {\n+            for field in fields {\n+                self.check_attributes(field.hir_id, field.span, Target::PatField, None);\n+            }\n+        }\n+        intravisit::walk_pat(self, p);\n+    }\n }\n \n fn is_c_like_enum(item: &Item<'_>) -> bool {"}, {"sha": "f1f4b05b33bccc58d2ebaa806d326b7b8a2ffdb8", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -256,6 +256,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n                 | hir::Node::TypeBinding(..)\n                 | hir::Node::TraitRef(..)\n                 | hir::Node::Pat(..)\n+                | hir::Node::PatField(..)\n                 | hir::Node::Arm(..)\n                 | hir::Node::Local(..)\n                 | hir::Node::Ctor(..)"}, {"sha": "87f498c0aeeaee5f0cf8f89123933648c43b7d62", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.rs?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -122,4 +122,10 @@ fn main() {\n         Some(res) => res,\n         None => 0,\n     };\n+\n+    struct PatternField {\n+        foo: i32,\n+    }\n+    let s = PatternField { foo: 123 };\n+    let PatternField { #[must_use] foo } = s; //~ ERROR `#[must_use]` has no effect\n }"}, {"sha": "3d2672687f896e370fc347df995c4f9264c580ab", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b464c73b7f5223d85eb2380af7f448c4be6baf4/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b464c73b7f5223d85eb2380af7f448c4be6baf4/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=1b464c73b7f5223d85eb2380af7f448c4be6baf4", "patch": "@@ -105,6 +105,12 @@ error: `#[must_use]` has no effect when applied to an match arm\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n+error: `#[must_use]` has no effect when applied to a pattern field\n+  --> $DIR/unused_attributes-must_use.rs:130:24\n+   |\n+LL |     let PatternField { #[must_use] foo } = s;\n+   |                        ^^^^^^^^^^^\n+\n error: `#[must_use]` has no effect when applied to an associated const\n   --> $DIR/unused_attributes-must_use.rs:68:5\n    |\n@@ -171,5 +177,5 @@ error: unused return value of `Use::get_four` that must be used\n LL |     ().get_four();\n    |     ^^^^^^^^^^^^^^\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 27 previous errors\n "}]}