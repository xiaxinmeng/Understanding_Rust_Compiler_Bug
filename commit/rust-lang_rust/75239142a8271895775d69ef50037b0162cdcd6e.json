{"sha": "75239142a8271895775d69ef50037b0162cdcd6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjM5MTQyYTgyNzE4OTU3NzVkNjllZjUwMDM3YjAxNjJjZGNkNmU=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-02-04T22:23:12Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-02-04T22:23:12Z"}, "message": "Implement `..` syntax for RangeFull as expression\n\nAllows the expression `..` (without either endpoint) in general, can be\nused in slicing syntax `&expr[..]` where we previously wrote `&expr[]`.\n\nThe old syntax &expr[] is not yet removed or warned for.", "tree": {"sha": "b41d240b3a91749bda5f1846e36c6b36dd397acb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b41d240b3a91749bda5f1846e36c6b36dd397acb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75239142a8271895775d69ef50037b0162cdcd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75239142a8271895775d69ef50037b0162cdcd6e", "html_url": "https://github.com/rust-lang/rust/commit/75239142a8271895775d69ef50037b0162cdcd6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75239142a8271895775d69ef50037b0162cdcd6e/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b2ed14906fd9f9daa27cc7d1dad263d2f5ff450", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2ed14906fd9f9daa27cc7d1dad263d2f5ff450", "html_url": "https://github.com/rust-lang/rust/commit/3b2ed14906fd9f9daa27cc7d1dad263d2f5ff450"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "d8d03349019bdbccf0ca773f36c6ba9530d5ffa5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/75239142a8271895775d69ef50037b0162cdcd6e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75239142a8271895775d69ef50037b0162cdcd6e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=75239142a8271895775d69ef50037b0162cdcd6e", "patch": "@@ -2524,16 +2524,7 @@ impl<'a> Parser<'a> {\n                 let bracket_pos = self.span.lo;\n                 self.bump();\n \n-                let mut found_dotdot = false;\n-                if self.token == token::DotDot &&\n-                   self.look_ahead(1, |t| t == &token::CloseDelim(token::Bracket)) {\n-                    // Using expr[..], which is a mistake, should be expr[]\n-                    self.bump();\n-                    self.bump();\n-                    found_dotdot = true;\n-                }\n-\n-                if found_dotdot || self.eat(&token::CloseDelim(token::Bracket)) {\n+                if self.eat(&token::CloseDelim(token::Bracket)) {\n                     // No expression, expand to a RangeFull\n                     // FIXME(#20516) It would be better to use a lang item or\n                     // something for RangeFull.\n@@ -2557,7 +2548,11 @@ impl<'a> Parser<'a> {\n                     let range = ExprStruct(path, vec![], None);\n                     let ix = self.mk_expr(bracket_pos, hi, range);\n                     let index = self.mk_index(e, ix);\n-                    e = self.mk_expr(lo, hi, index)\n+                    e = self.mk_expr(lo, hi, index);\n+                    // Enable after snapshot.\n+                    // self.span_warn(e.span, \"deprecated slicing syntax: `[]`\");\n+                    // self.span_note(e.span,\n+                    //               \"use `&expr[..]` to construct a slice of the whole of expr\");\n                 } else {\n                     let ix = self.parse_expr();\n                     hi = self.span.hi;\n@@ -2566,11 +2561,6 @@ impl<'a> Parser<'a> {\n                     e = self.mk_expr(lo, hi, index)\n                 }\n \n-                if found_dotdot {\n-                    self.span_err(e.span, \"incorrect slicing expression: `[..]`\");\n-                    self.span_note(e.span,\n-                                   \"use `&expr[]` to construct a slice of the whole of expr\");\n-                }\n               }\n               _ => return e\n             }\n@@ -2931,9 +2921,14 @@ impl<'a> Parser<'a> {\n             // with the postfix-form 'expr..'\n             let lo = self.span.lo;\n             self.bump();\n-            let rhs = self.parse_binops();\n-            let hi = rhs.span.hi;\n-            let ex = self.mk_range(None, Some(rhs));\n+            let opt_end = if self.is_at_start_of_range_notation_rhs() {\n+                let end = self.parse_binops();\n+                Some(end)\n+            } else {\n+                None\n+            };\n+            let hi = self.span.hi;\n+            let ex = self.mk_range(None, opt_end);\n             self.mk_expr(lo, hi, ex)\n           }\n           _ => {"}, {"sha": "23ad5b09950effba47277fc56bf1533bb6b3f49e", "filename": "src/test/compile-fail/slice-1.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Fcompile-fail%2Fslice-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Fcompile-fail%2Fslice-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-1.rs?ref=75239142a8271895775d69ef50037b0162cdcd6e", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test slicing expr[..] is an error and gives a helpful error message.\n+// Test slicing &expr[] is deprecated and gives a helpful error message.\n+//\n+// ignore-test\n \n struct Foo;\n \n fn main() {\n     let x = Foo;\n-    &x[..]; //~ ERROR incorrect slicing expression: `[..]`\n-    //~^ NOTE use `&expr[]` to construct a slice of the whole of expr\n+    &x[]; //~ WARNING deprecated slicing syntax: `[]`\n+          //~^ NOTE use `&expr[..]` to construct a slice of the whole of expr\n+          //~^^ ERROR cannot index a value of type `Foo`\n }"}, {"sha": "99dc3e68c8f796d47f78ea644932096619e7dfab", "filename": "src/test/compile-fail/slice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Fcompile-fail%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-2.rs?ref=75239142a8271895775d69ef50037b0162cdcd6e", "patch": "@@ -14,7 +14,7 @@ struct Foo;\n \n fn main() {\n     let x = Foo;\n-    &x[]; //~ ERROR cannot index a value of type `Foo`\n+    &x[..]; //~ ERROR cannot index a value of type `Foo`\n     &x[Foo..]; //~ ERROR cannot index a value of type `Foo`\n     &x[..Foo]; //~ ERROR cannot index a value of type `Foo`\n     &x[Foo..Foo]; //~ ERROR cannot index a value of type `Foo`"}, {"sha": "5d2337e3819aa925daa363d285530ec6c8df1947", "filename": "src/test/run-pass/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Frun-pass%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Frun-pass%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange.rs?ref=75239142a8271895775d69ef50037b0162cdcd6e", "patch": "@@ -14,6 +14,7 @@ fn foo() -> int { 42 }\n \n // Test that range syntax works in return statements\n fn return_range_to() -> ::std::ops::RangeTo<i32> { return ..1; }\n+fn return_full_range() -> ::std::ops::RangeFull { return ..; }\n \n pub fn main() {\n     let mut count = 0;"}, {"sha": "cd49094851695df64a5454475015023341ff0dd2", "filename": "src/test/run-pass/ranges-precedence.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Frun-pass%2Franges-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Franges-precedence.rs?ref=75239142a8271895775d69ef50037b0162cdcd6e", "patch": "@@ -55,5 +55,8 @@ fn main() {\n \n     let x = [1]..[2];\n     assert!(x == (([1])..([2])));\n+\n+    let y = ..;\n+    assert!(y == (..));\n }\n "}, {"sha": "3f6afc8d987a6b9f0970803036f77b14bb6efd4d", "filename": "src/test/run-pass/slice-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Frun-pass%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75239142a8271895775d69ef50037b0162cdcd6e/src%2Ftest%2Frun-pass%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-2.rs?ref=75239142a8271895775d69ef50037b0162cdcd6e", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     let cmp: &[int] = &[1, 2, 3, 4, 5];\n     assert!(&x[] == cmp);\n+    assert!(&x[..] == cmp);\n     let cmp: &[int] = &[3, 4, 5];\n     assert!(&x[2..] == cmp);\n     let cmp: &[int] = &[1, 2, 3];\n@@ -35,6 +36,7 @@ fn main() {\n     {\n         let cmp: &mut [int] = &mut [1, 2, 3, 4, 5];\n         assert!(&mut x[] == cmp);\n+        assert!(&mut x[..] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [3, 4, 5];\n@@ -53,6 +55,7 @@ fn main() {\n     {\n         let cmp: &mut [int] = &mut [1, 2, 3, 4, 5];\n         assert!(&mut x[] == cmp);\n+        assert!(&mut x[..] == cmp);\n     }\n     {\n         let cmp: &mut [int] = &mut [3, 4, 5];"}]}