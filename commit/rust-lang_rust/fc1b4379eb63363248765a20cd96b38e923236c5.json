{"sha": "fc1b4379eb63363248765a20cd96b38e923236c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMWI0Mzc5ZWI2MzM2MzI0ODc2NWEyMGNkOTZiMzhlOTIzMjM2YzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:33:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:23Z"}, "message": "rollup merge of #19755: alexcrichton/rust-serialize\n\nThe primary focus of Rust's stability story at 1.0 is the standard library.\nAll other libraries distributed with the Rust compiler are planned to\nbe #[unstable] and therfore only accessible on the nightly channel of Rust. One\nof the more widely used libraries today is libserialize, Rust's current solution\nfor encoding and decoding types.\n\nThe current libserialize library, however, has a number of drawbacks:\n\n* The API is not ready to be stabilize as-is and we will likely not have enough\n  resources to stabilize the API for 1.0.\n* The library is not necessarily the speediest implementations with alternatives\n  being developed out-of-tree (e.g. serde from erickt).\n* It is not clear how the API of Encodable/Decodable can evolve over time while\n  maintaining backwards compatibility.\n\nOne of the major pros to the current libserialize, however, is\n`deriving(Encodable, Decodable)` as short-hands for enabling serializing and\ndeserializing a type. This is unambiguously useful functionality, so we cannot\nsimply deprecate the in-tree libserialize in favor of an external crates.io\nimplementation.\n\nFor these reasons, this commit starts off a stability story for libserialize by\nfollowing these steps:\n\n1. The deriving(Encodable, Decodable) modes will be deprecated in favor of a\n   renamed deriving(RustcEncodable, RustcDecodable).\n2. The in-tree libserialize will be deprecated in favor of an external\n   rustc-serialize crate shipped on crates.io. The contents of the crate will be\n   the same for now (but they can evolve separately).\n3. At 1.0 serialization will be performed through\n   deriving(RustcEncodable, RustcDecodable) and the rustc-serialize crate. The\n   expansions for each deriving mode will change from `::serialize::foo` to\n   `::rustc_serialize::foo`.\n\nThis story will require that the compiler freezes its implementation of\n`RustcEncodable` deriving for all of time, but this should be a fairly minimal\nmaintenance burden. Otherwise the crate in crates.io must always maintain the\nexact definition of its traits, but the implementation of json, for example, can\ncontinue to evolve in the semver-sense.\n\nThe major goal for this stabilization effort is to pave the road for a new\nofficial serialization crate which can replace the current one, solving many of\nits downsides in the process. We are not assuming that this will exist for 1.0,\nhence the above measures. Some possibilities for replacing libserialize include:\n\n* If plugins have a stable API, then any crate can provide a custom `deriving`\n  mode (will require some compiler work). This means that any new serialization\n  crate can provide its own `deriving` with its own backing\n  implementation, entirely obsoleting the current libserialize and fully\n  replacing it.\n\n* Erick is exploring the possibility of code generation via preprocessing Rust\n  source files in the near term until plugins are stable. This strategy would\n  provide the same ergonomic benefit that `deriving` does today in theory.\n\nSo, in summary, the current libserialize crate is being deprecated in favor of\nthe crates.io-based rustc-serialize crate where the `deriving` modes are\nappropriately renamed. This opens up space for a later implementation of\nserialization in a more official capacity while allowing alternative\nimplementations to be explored in the meantime.\n\nConcretely speaking, this change adds support for the `RustcEncodable` and\n`RustcDecodable` deriving modes. After a snapshot is made warnings will be\nturned on for usage of `Encodable` and `Decodable` as well as deprecating the\nin-tree libserialize crate to encurage users to use rustc-serialize instead.", "tree": {"sha": "f435b78ad5fe22d8cbd88a9b2d50271764899bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f435b78ad5fe22d8cbd88a9b2d50271764899bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc1b4379eb63363248765a20cd96b38e923236c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1b4379eb63363248765a20cd96b38e923236c5", "html_url": "https://github.com/rust-lang/rust/commit/fc1b4379eb63363248765a20cd96b38e923236c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc1b4379eb63363248765a20cd96b38e923236c5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58020d38b18c4b7bfd4f62ffce5ef4823e2aea68", "url": "https://api.github.com/repos/rust-lang/rust/commits/58020d38b18c4b7bfd4f62ffce5ef4823e2aea68", "html_url": "https://github.com/rust-lang/rust/commit/58020d38b18c4b7bfd4f62ffce5ef4823e2aea68"}, {"sha": "7d1fa4ebea3cb29d76d04199e3a015ab11974914", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1fa4ebea3cb29d76d04199e3a015ab11974914", "html_url": "https://github.com/rust-lang/rust/commit/7d1fa4ebea3cb29d76d04199e3a015ab11974914"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "5fb320b91362625a721a1346973ef463a3122eb0", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc1b4379eb63363248765a20cd96b38e923236c5/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1b4379eb63363248765a20cd96b38e923236c5/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=fc1b4379eb63363248765a20cd96b38e923236c5", "patch": "@@ -70,8 +70,28 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n \n                             \"Hash\" => expand!(hash::expand_deriving_hash),\n \n-                            \"Encodable\" => expand!(encodable::expand_deriving_encodable),\n-                            \"Decodable\" => expand!(decodable::expand_deriving_decodable),\n+                            \"RustcEncodable\" => {\n+                                expand!(encodable::expand_deriving_encodable)\n+                            }\n+                            \"RustcDecodable\" => {\n+                                expand!(decodable::expand_deriving_decodable)\n+                            }\n+                            \"Encodable\" => {\n+                                // NOTE: uncomment after a stage0 snap\n+                                // cx.span_warn(titem.span,\n+                                //              \"deriving(Encodable) is deprecated \\\n+                                //               in favor of deriving(RustcEncodable)\");\n+\n+                                expand!(encodable::expand_deriving_encodable)\n+                            }\n+                            \"Decodable\" =>\n+                                // NOTE: uncomment after a stage0 snap\n+                                // cx.span_warn(titem.span,\n+                                //              \"deriving(Decodable) is deprecated \\\n+                                //               in favor of deriving(RustcDecodable)\");\n+\n+                                expand!(decodable::expand_deriving_decodable)\n+                            }\n \n                             \"PartialEq\" => expand!(eq::expand_deriving_eq),\n                             \"Eq\" => expand!(totaleq::expand_deriving_totaleq),"}]}