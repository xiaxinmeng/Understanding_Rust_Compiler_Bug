{"sha": "fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNDA4MTJiMGY3YTA3ODM0YjJhZDU1N2VjM2Q1YTBlOThlODBmODU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:27:33Z"}, "message": "rollup merge of #20006: alexcrichton/no-more-empty-modules\n\nThis commit modifies rustdoc to not require these empty modules to be public in\nthe standard library. The modules still remain as a location to attach\ndocumentation to, but the modules themselves are now private (don't have to\ncommit to an API). The documentation for the standard library now shows all of\nthe primitive types on the main index page.", "tree": {"sha": "b99f28c97d822711a4cb0220093a9da0bacaa731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99f28c97d822711a4cb0220093a9da0bacaa731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "html_url": "https://github.com/rust-lang/rust/commit/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae3107e72b3ae06f2c1f987d6ccc6087c7097ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae3107e72b3ae06f2c1f987d6ccc6087c7097ce", "html_url": "https://github.com/rust-lang/rust/commit/4ae3107e72b3ae06f2c1f987d6ccc6087c7097ce"}, {"sha": "1b42e890bf99d37a9e6447912c75c5b5e4695c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b42e890bf99d37a9e6447912c75c5b5e4695c4e", "html_url": "https://github.com/rust-lang/rust/commit/1b42e890bf99d37a9e6447912c75c5b5e4695c4e"}], "stats": {"total": 123, "additions": 86, "deletions": 37}, "files": [{"sha": "9b6622a7127d5de26b2e20c4b9f44566cbac6cd1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -107,7 +107,6 @@ pub mod default;\n \n pub mod any;\n pub mod atomic;\n-pub mod bool;\n pub mod borrow;\n pub mod cell;\n pub mod char;\n@@ -120,15 +119,11 @@ pub mod result;\n pub mod simd;\n pub mod slice;\n pub mod str;\n-pub mod tuple;\n pub mod hash;\n-// FIXME #15320: primitive documentation needs top-level modules, this\n-// should be `core::tuple::unit`.\n-#[path = \"tuple/unit.rs\"]\n-pub mod unit;\n pub mod fmt;\n \n // note: does not need to be public\n+mod tuple;\n mod array;\n \n #[doc(hidden)]"}, {"sha": "4984c8de3bfc6c3b4b543765b908a419fc37b7fd", "filename": "src/libcore/tuple.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -62,12 +62,10 @@\n //! assert_eq!(d, (0u32, 0.0f32));\n //! ```\n \n-#![doc(primitive = \"tuple\")]\n #![stable]\n \n #[unstable = \"this is just a documentation module and should not be part \\\n               of the public api\"]\n-pub use unit;\n \n use clone::Clone;\n use cmp::*;", "previous_filename": "src/libcore/tuple/mod.rs"}, {"sha": "ac688784f926cb3996b794a548818b36e9ea68a2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -163,33 +163,24 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             };\n             let mut tmp = Vec::new();\n             for child in m.items.iter_mut() {\n-                let inner = match child.inner {\n-                    ModuleItem(ref mut m) => m,\n+                match child.inner {\n+                    ModuleItem(..) => {}\n                     _ => continue,\n-                };\n+                }\n                 let prim = match PrimitiveType::find(child.attrs.as_slice()) {\n                     Some(prim) => prim,\n                     None => continue,\n                 };\n                 primitives.push(prim);\n-                let mut i = Item {\n+                tmp.push(Item {\n                     source: Span::empty(),\n                     name: Some(prim.to_url_str().to_string()),\n-                    attrs: Vec::new(),\n-                    visibility: None,\n+                    attrs: child.attrs.clone(),\n+                    visibility: Some(ast::Public),\n                     stability: None,\n                     def_id: ast_util::local_def(prim.to_node_id()),\n                     inner: PrimitiveItem(prim),\n-                };\n-                // Push one copy to get indexed for the whole crate, and push a\n-                // another copy in the proper location which will actually get\n-                // documented. The first copy will also serve as a redirect to\n-                // the other copy.\n-                tmp.push(i.clone());\n-                i.visibility = Some(ast::Public);\n-                i.attrs = child.attrs.clone();\n-                inner.items.push(i);\n-\n+                });\n             }\n             m.items.extend(tmp.into_iter());\n         }"}, {"sha": "bbaab5ee3db8fbb7e0c61b86da43ca5f4283ac58", "filename": "src/libstd/bool.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -11,6 +11,5 @@\n //! The boolean type\n \n #![doc(primitive = \"bool\")]\n-#![unstable = \"this module is purely for documentation and it will likely be \\\n-               removed from the public api\"]\n+#![stable]\n ", "previous_filename": "src/libcore/bool.rs"}, {"sha": "8274baeacfad8378bb798da295f24f0982d4c7ee", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -135,7 +135,6 @@ extern crate libc;\n // NB: These reexports are in the order they should be listed in rustdoc\n \n pub use core::any;\n-pub use core::bool;\n pub use core::borrow;\n pub use core::cell;\n pub use core::clone;\n@@ -150,10 +149,6 @@ pub use core::mem;\n pub use core::ptr;\n pub use core::raw;\n pub use core::simd;\n-pub use core::tuple;\n-// FIXME #15320: primitive documentation needs top-level modules, this\n-// should be `std::tuple::unit`.\n-pub use core::unit;\n pub use core::result;\n pub use core::option;\n \n@@ -243,6 +238,12 @@ pub mod comm;\n pub mod rt;\n mod failure;\n \n+// Documentation for primitive types\n+\n+mod bool;\n+mod unit;\n+mod tuple;\n+\n // A curious inner-module that's not exported that contains the binding\n // 'std' so that macro-expanded references to std::error and such\n // can be resolved within libstd."}, {"sha": "f77627711a71f8a1793069c12f6abe4b57c5b301", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -81,9 +81,9 @@\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek, BufferPrelude};\n #[doc(no_inline)] pub use str::{Str, StrVector, StrPrelude};\n #[doc(no_inline)] pub use str::{StrAllocating, UnicodeStrPrelude};\n-#[doc(no_inline)] pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n-#[doc(no_inline)] pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n-#[doc(no_inline)] pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n+#[doc(no_inline)] pub use core::prelude::{Tuple1, Tuple2, Tuple3, Tuple4};\n+#[doc(no_inline)] pub use core::prelude::{Tuple5, Tuple6, Tuple7, Tuple8};\n+#[doc(no_inline)] pub use core::prelude::{Tuple9, Tuple10, Tuple11, Tuple12};\n #[doc(no_inline)] pub use slice::AsSlice;\n #[doc(no_inline)] pub use slice::{VectorVector, PartialEqSliceExt};\n #[doc(no_inline)] pub use slice::{CloneSliceExt, OrdSliceExt, SliceExt};"}, {"sha": "5cd60d6e153ea0cf4bcd42f95b1d65bff8dc19a1", "filename": "src/libstd/tuple.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Operations on tuples\n+//!\n+//! To access a single element of a tuple one can use the following\n+//! methods:\n+//!\n+//! * `valN` - returns a value of _N_-th element\n+//! * `refN` - returns a reference to _N_-th element\n+//! * `mutN` - returns a mutable reference to _N_-th element\n+//!\n+//! Indexing starts from zero, so `val0` returns first value, `val1`\n+//! returns second value, and so on. In general, a tuple with _S_\n+//! elements provides aforementioned methods suffixed with numbers\n+//! from `0` to `S-1`. Traits which contain these methods are\n+//! implemented for tuples with up to 12 elements.\n+//!\n+//! If every type inside a tuple implements one of the following\n+//! traits, then a tuple itself also implements it.\n+//!\n+//! * `Clone`\n+//! * `PartialEq`\n+//! * `Eq`\n+//! * `PartialOrd`\n+//! * `Ord`\n+//! * `Default`\n+//!\n+//! # Examples\n+//!\n+//! Using methods:\n+//!\n+//! ```\n+//! #[allow(deprecated)]\n+//! # fn main() {\n+//! let pair = (\"pi\", 3.14f64);\n+//! assert_eq!(pair.val0(), \"pi\");\n+//! assert_eq!(pair.val1(), 3.14f64);\n+//! # }\n+//! ```\n+//!\n+//! Using traits implemented for tuples:\n+//!\n+//! ```\n+//! use std::default::Default;\n+//!\n+//! let a = (1i, 2i);\n+//! let b = (3i, 4i);\n+//! assert!(a != b);\n+//!\n+//! let c = b.clone();\n+//! assert!(b == c);\n+//!\n+//! let d : (u32, f32) = Default::default();\n+//! assert_eq!(d, (0u32, 0.0f32));\n+//! ```\n+\n+#![doc(primitive = \"tuple\")]\n+#![stable]"}, {"sha": "012b175b031f15ce0174fcf02dfd81e7a0f7ace1", "filename": "src/libstd/unit.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Flibstd%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funit.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n #![doc(primitive = \"unit\")]\n-#![unstable = \"this module is purely for documentation and it will likely be \\\n-               removed from the public api\"]\n+#![stable]\n \n //! The `()` type, sometimes called \"unit\" or \"nil\".\n //!", "previous_filename": "src/libcore/tuple/unit.rs"}, {"sha": "573d847cbe3b88cbce5ee7fcd1ec5785343b4a65", "filename": "src/test/compile-fail/issue-9957.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs?ref=fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "patch": "@@ -11,5 +11,5 @@\n pub extern crate core; //~ ERROR: `pub` visibility is not allowed\n \n fn main() {\n-    pub use std::bool; //~ ERROR: imports in functions are never reachable\n+    pub use std::uint; //~ ERROR: imports in functions are never reachable\n }"}]}