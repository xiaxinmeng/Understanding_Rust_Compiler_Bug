{"sha": "669d31683f97c173c404d27b841d30a6424bf639", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OWQzMTY4M2Y5N2MxNzNjNDA0ZDI3Yjg0MWQzMGE2NDI0YmY2Mzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-01T18:39:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T20:21:55Z"}, "message": "simplify down to one query per pass suite", "tree": {"sha": "5ae4a22e5c59eb42ee4cc334e64e9c55f794372c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ae4a22e5c59eb42ee4cc334e64e9c55f794372c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669d31683f97c173c404d27b841d30a6424bf639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669d31683f97c173c404d27b841d30a6424bf639", "html_url": "https://github.com/rust-lang/rust/commit/669d31683f97c173c404d27b841d30a6424bf639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669d31683f97c173c404d27b841d30a6424bf639/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c154a67bf5c6841c39afdb90388cc3ba36dc70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c154a67bf5c6841c39afdb90388cc3ba36dc70c", "html_url": "https://github.com/rust-lang/rust/commit/9c154a67bf5c6841c39afdb90388cc3ba36dc70c"}], "stats": {"total": 213, "additions": 87, "deletions": 126}, "files": [{"sha": "77d4eefb1def5602e58f74d274708fe093156ac2", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=669d31683f97c173c404d27b841d30a6424bf639", "patch": "@@ -37,6 +37,11 @@ pub enum MirSource {\n }\n \n impl<'a, 'tcx> MirSource {\n+    pub fn from_local_def_id(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> MirSource {\n+        let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n+        Self::from_node(tcx, id)\n+    }\n+\n     pub fn from_node(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: NodeId) -> MirSource {\n         use hir::*;\n \n@@ -169,12 +174,8 @@ impl<'a, 'tcx> Passes {\n         self.pass_hooks.push(Rc::new(hook));\n     }\n \n-    pub fn len_passes(&self, suite: MirSuite) -> usize {\n-        self.suites[suite.0].len()\n-    }\n-\n-    pub fn pass(&self, suite: MirSuite, pass: MirPassIndex) -> &MirPass {\n-        &*self.suites[suite.0][pass.0]\n+    pub fn passes(&self, suite: MirSuite) -> &[Rc<MirPass>] {\n+        &self.suites[suite.0]\n     }\n \n     pub fn hooks(&self) -> &[Rc<PassHook>] {"}, {"sha": "5a5dece8a94ec5163f6fbc4c289daa833c13aa84", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=669d31683f97c173c404d27b841d30a6424bf639", "patch": "@@ -404,18 +404,6 @@ impl<'tcx> QueryDescription for queries::is_item_mir_available<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::mir_suite<'tcx> {\n-    fn describe(_: TyCtxt, (suite, _): (MirSuite, DefId)) -> String {\n-        format!(\"MIR suite #{}.*\", suite.0)\n-    }\n-}\n-\n-impl<'tcx> QueryDescription for queries::mir_pass<'tcx> {\n-    fn describe(_: TyCtxt, (suite, pass_num, _): (MirSuite, MirPassIndex, DefId)) -> String {\n-        format!(\"MIR pass #{}.{}\", suite.0, pass_num.0)\n-    }\n-}\n-\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -798,27 +786,13 @@ define_maps! { <'tcx>\n     /// the value isn't known except to the pass itself.\n     [] mir_const_qualif: Mir(DefId) -> u8,\n \n-    /// Performs the initial MIR construction. You almost certainly do not\n-    /// want to use this query, because its output is intended to be stolen\n-    /// immediately by the MIR passes below. Consider `optimized_mir` instead.\n+    /// Fetch the MIR for a given def-id up till the point where it is\n+    /// ready for const evaluation.\n     ///\n     /// See the README for the `mir` module for details.\n-    [] mir_build: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n+    [] mir_const: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n-    /// Fetch the MIR for a given def-id after the given set of passes has ben\n-    /// applied to it. This is mostly an \"intermediate\" query. Normally, you would\n-    /// prefer to use `optimized_mir(def_id)`, which will fetch the MIR after all\n-    /// optimizations and so forth.\n-    ///\n-    /// See the README for the `mir` module for details.\n-    [] mir_suite: mir_suite((MirSuite, DefId)) -> &'tcx Steal<mir::Mir<'tcx>>,\n-\n-    /// Fetch the MIR for a given def-id after a given pass has been executed. This is\n-    /// **only** intended to be used by the `mir_suite` provider -- if you are using it\n-    /// manually, you're doing it wrong.\n-    ///\n-    /// See the README for the `mir` module for details.\n-    [] mir_pass: mir_pass((MirSuite, MirPassIndex, DefId)) -> &'tcx Steal<mir::Mir<'tcx>>,\n+    [] mir_validated: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n     /// MIR after our optimization passes have run. This is MIR that is ready\n     /// for trans. This is also the only query that can fetch non-local MIR, at present.\n@@ -921,11 +895,3 @@ fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n fn mir_keys(_: CrateNum) -> DepNode<DefId> {\n     DepNode::MirKeys\n }\n-\n-fn mir_suite((_suite, def_id): (MirSuite, DefId)) -> DepNode<DefId> {\n-    DepNode::Mir(def_id)\n-}\n-\n-fn mir_pass((_suite, _pass_num, def_id): (MirSuite, MirPassIndex, DefId)) -> DepNode<DefId> {\n-    DepNode::Mir(def_id)\n-}"}, {"sha": "8c057b02df2bf35c07c81dd550669a2ecbd82227", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=669d31683f97c173c404d27b841d30a6424bf639", "patch": "@@ -20,7 +20,6 @@ use rustc::mir::transform::MirSource;\n use rustc::mir::visit::MutVisitor;\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::steal::Steal;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -33,7 +32,8 @@ use syntax::symbol::keywords;\n use syntax_pos::Span;\n use util as mir_util;\n \n-pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n+/// Construct the MIR for a given def-id.\n+pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'tcx> {\n     let id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let unsupported = || {\n         span_bug!(tcx.hir.span(id), \"can't build MIR for {:?}\", def_id);\n@@ -131,7 +131,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n \n         mir_util::dump_mir(tcx, None, \"mir_map\", &0, src, &mir);\n \n-        tcx.alloc_steal_mir(mir)\n+        mir\n     })\n }\n \n@@ -168,7 +168,7 @@ impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      ctor_id: ast::NodeId,\n                                      v: &'tcx hir::VariantData)\n-                                     -> &'tcx Steal<Mir<'tcx>>\n+                                     -> Mir<'tcx>\n {\n     let span = tcx.hir.span(ctor_id);\n     if let hir::VariantData::Tuple(ref fields, ctor_id) = *v {\n@@ -190,7 +190,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             mir_util::dump_mir(tcx, None, \"mir_map\", &0, src, &mir);\n \n-            tcx.alloc_steal_mir(mir)\n+            mir\n         })\n     } else {\n         span_bug!(span, \"attempting to create MIR for non-tuple variant {:?}\", v);"}, {"sha": "980663ec675858ed7067bcaed4a672417fe04527", "filename": "src/librustc_mir/queries.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fqueries.rs?ref=669d31683f97c173c404d27b841d30a6424bf639", "patch": "@@ -16,27 +16,34 @@\n //! - `#[rustc_mir(graphviz=\"file.gv\")]`\n //! - `#[rustc_mir(pretty=\"file.mir\")]`\n \n-use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n-\n-use rustc::ty::TyCtxt;\n+use build;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc::mir::Mir;\n+use rustc::mir::transform::{MirSource, MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED};\n+use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n+use rustc::ty::steal::Steal;\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::util::nodemap::DefIdSet;\n use syntax::ast;\n-use syntax_pos::Span;\n+use syntax_pos::{DUMMY_SP, Span};\n+use transform;\n \n use std::rc::Rc;\n \n pub fn provide(providers: &mut Providers) {\n-    use build::mir_build;\n     *providers = Providers {\n-        mir_build,\n         mir_keys,\n+        mir_const,\n+        mir_validated,\n+        optimized_mir,\n         ..*providers\n     };\n }\n \n+/// Finds the full set of def-ids within the current crate that have\n+/// MIR associated with them.\n fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n                       -> Rc<DefIdSet> {\n     assert_eq!(krate, LOCAL_CRATE);\n@@ -75,3 +82,31 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n \n     Rc::new(set)\n }\n+\n+fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n+    let mut mir = build::mir_build(tcx, def_id);\n+    let source = MirSource::from_local_def_id(tcx, def_id);\n+    transform::run_suite(tcx, source, MIR_CONST, &mut mir);\n+    tcx.alloc_steal_mir(mir)\n+}\n+\n+fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n+    let source = MirSource::from_local_def_id(tcx, def_id);\n+    if let MirSource::Const(_) = source {\n+        // Ensure that we compute the `mir_const_qualif` for constants at\n+        // this point, before we steal the mir-const result. We don't\n+        // directly need the result or `mir_const_qualif`, so we can just force it.\n+        ty::queries::mir_const_qualif::force(tcx, DUMMY_SP, def_id);\n+    }\n+\n+    let mut mir = tcx.mir_const(def_id).steal();\n+    transform::run_suite(tcx, source, MIR_VALIDATED, &mut mir);\n+    tcx.alloc_steal_mir(mir)\n+}\n+\n+fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n+    let mut mir = tcx.mir_validated(def_id).steal();\n+    let source = MirSource::from_local_def_id(tcx, def_id);\n+    transform::run_suite(tcx, source, MIR_OPTIMIZED, &mut mir);\n+    tcx.alloc_mir(mir)\n+}"}, {"sha": "971b0206a9ebd6a2e0818752c94a04b07dac7823", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 16, "deletions": 65, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=669d31683f97c173c404d27b841d30a6424bf639", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::hir::def_id::DefId;\n use rustc::mir::Mir;\n-use rustc::mir::transform::{MirPassIndex, MirSuite, MirSource, MIR_VALIDATED, MIR_OPTIMIZED};\n-use rustc::ty::{self, TyCtxt};\n-use rustc::ty::steal::Steal;\n+use rustc::mir::transform::{MirPassIndex, MirSuite, MirSource};\n+use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n-use syntax_pos::DUMMY_SP;\n \n pub mod simplify_branches;\n pub mod simplify;\n@@ -31,77 +28,31 @@ pub mod copy_prop;\n pub mod inline;\n pub mod interprocedural;\n \n-pub fn provide(providers: &mut Providers) {\n+pub(crate) fn provide(providers: &mut Providers) {\n     self::qualify_consts::provide(providers);\n     *providers = Providers {\n-        optimized_mir,\n-        mir_suite,\n-        mir_pass,\n         ..*providers\n     };\n }\n \n-fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n-    let mir = tcx.mir_suite((MIR_OPTIMIZED, def_id)).steal();\n-    tcx.alloc_mir(mir)\n-}\n-\n-fn mir_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                       (suite, def_id): (MirSuite, DefId))\n-                       -> &'tcx Steal<Mir<'tcx>>\n+pub(crate) fn run_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                  source: MirSource,\n+                                  suite: MirSuite,\n+                                  mir: &mut Mir<'tcx>)\n {\n-    let passes = &tcx.mir_passes;\n-\n-    if suite == MIR_VALIDATED {\n-        let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n-        let source = MirSource::from_node(tcx, id);\n-        if let MirSource::Const(_) = source {\n-            // Ensure that we compute the `mir_const_qualif` for\n-            // constants at this point, before we do any further\n-            // optimization (and before we steal the previous\n-            // MIR). We don't directly need the result, so we can\n-            // just force it.\n-            ty::queries::mir_const_qualif::force(tcx, DUMMY_SP, def_id);\n-        }\n-    }\n-\n-    let len = passes.len_passes(suite);\n-    assert!(len > 0, \"no passes in {:?}\", suite);\n-    tcx.mir_pass((suite, MirPassIndex(len - 1), def_id))\n-}\n+    let passes = tcx.mir_passes.passes(suite);\n \n-fn mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                      (suite, pass_num, def_id): (MirSuite, MirPassIndex, DefId))\n-                      -> &'tcx Steal<Mir<'tcx>>\n-{\n-    let passes = &tcx.mir_passes;\n-    let pass = passes.pass(suite, pass_num);\n+    for (pass, index) in passes.iter().zip(0..) {\n+        let pass_num = MirPassIndex(index);\n \n-    let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n-    let source = MirSource::from_node(tcx, id);\n-\n-    let mut mir = {\n-        let MirSuite(suite) = suite;\n-        let MirPassIndex(pass_num) = pass_num;\n-        if pass_num > 0 {\n-            tcx.mir_pass((MirSuite(suite), MirPassIndex(pass_num - 1), def_id)).steal()\n-        } else if suite > 0 {\n-            tcx.mir_suite((MirSuite(suite - 1), def_id)).steal()\n-        } else {\n-            tcx.mir_build(def_id).steal()\n+        for hook in tcx.mir_passes.hooks() {\n+            hook.on_mir_pass(tcx, suite, pass_num, &pass.name(), source, &mir, false);\n         }\n-    };\n-\n-    for hook in passes.hooks() {\n-        hook.on_mir_pass(tcx, suite, pass_num, &pass.name(), source, &mir, false);\n-    }\n \n-    pass.run_pass(tcx, source, &mut mir);\n+        pass.run_pass(tcx, source, mir);\n \n-    for hook in passes.hooks() {\n-        hook.on_mir_pass(tcx, suite, pass_num, &pass.name(), source, &mir, true);\n+        for hook in tcx.mir_passes.hooks() {\n+            hook.on_mir_pass(tcx, suite, pass_num, &pass.name(), source, &mir, true);\n+        }\n     }\n-\n-    tcx.alloc_steal_mir(mir)\n }\n-"}, {"sha": "4b1c82f383f85ce1a638dc2e048b0980f1af43a3", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669d31683f97c173c404d27b841d30a6424bf639/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=669d31683f97c173c404d27b841d30a6424bf639", "patch": "@@ -26,7 +26,7 @@ use rustc::ty::cast::CastTy;\n use rustc::ty::maps::Providers;\n use rustc::mir::*;\n use rustc::mir::traversal::ReversePostorder;\n-use rustc::mir::transform::{MirPass, MirSource, MIR_CONST};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n@@ -918,13 +918,21 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    providers.mir_const_qualif = qualify_const_item;\n+    *providers = Providers {\n+        mir_const_qualif,\n+        ..*providers\n+    };\n }\n \n-fn qualify_const_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                def_id: DefId)\n-                                -> u8 {\n-    let mir = &tcx.mir_suite((MIR_CONST, def_id)).borrow();\n+fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              def_id: DefId)\n+                              -> u8 {\n+    // NB: This `borrow()` is guaranteed to be valid (i.e., the value\n+    // cannot yet be stolen), because `mir_validated()`, which steals\n+    // from `mir_const(), forces this query to execute before\n+    // performing the steal.\n+    let mir = &tcx.mir_const(def_id).borrow();\n+\n     if mir.return_ty.references_error() {\n         return Qualif::NOT_CONST.bits();\n     }"}]}