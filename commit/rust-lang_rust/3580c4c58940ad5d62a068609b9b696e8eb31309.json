{"sha": "3580c4c58940ad5d62a068609b9b696e8eb31309", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ODBjNGM1ODk0MGFkNWQ2MmEwNjg2MDliOWI2OTZlOGViMzEzMDk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-29T19:36:32Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-29T19:36:32Z"}, "message": "Remove `T: Sized` on `ptr::is_null()`, `as_ref()`, `as_mut()`\n\n`NonZero::is_zero()` was already casting all pointers to thin `*mut u8`\nto check for null.  It seems reasonable to apply that for `is_null()` in\ngeneral, and then unsized fat pointers can also be used with `as_ref()`\nand `as_mut()` to get fat references.", "tree": {"sha": "5ac0fef4f8ff1a7ec9c89744f2f1e5736216ed43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac0fef4f8ff1a7ec9c89744f2f1e5736216ed43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3580c4c58940ad5d62a068609b9b696e8eb31309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3580c4c58940ad5d62a068609b9b696e8eb31309", "html_url": "https://github.com/rust-lang/rust/commit/3580c4c58940ad5d62a068609b9b696e8eb31309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3580c4c58940ad5d62a068609b9b696e8eb31309/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "688a8583912a305f14ebc8bc21a2dd3cd3c912b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/688a8583912a305f14ebc8bc21a2dd3cd3c912b0", "html_url": "https://github.com/rust-lang/rust/commit/688a8583912a305f14ebc8bc21a2dd3cd3c912b0"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "8271be5d38f88230f46ed0b43d318b9be2fd03ed", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3580c4c58940ad5d62a068609b9b696e8eb31309/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3580c4c58940ad5d62a068609b9b696e8eb31309/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=3580c4c58940ad5d62a068609b9b696e8eb31309", "patch": "@@ -28,8 +28,7 @@ macro_rules! impl_zeroable_for_pointer_types {\n             unsafe impl<T: ?Sized> Zeroable for $Ptr {\n                 #[inline]\n                 fn is_zero(&self) -> bool {\n-                    // Cast because `is_null` is only available on thin pointers\n-                    (*self as *mut u8).is_null()\n+                    (*self).is_null()\n                 }\n             }\n         )+"}, {"sha": "dddeda7f02dec2ee321815491c3acc7ca573d593", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3580c4c58940ad5d62a068609b9b696e8eb31309/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3580c4c58940ad5d62a068609b9b696e8eb31309/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3580c4c58940ad5d62a068609b9b696e8eb31309", "patch": "@@ -487,8 +487,10 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_null(self) -> bool where T: Sized {\n-        self == null()\n+    pub fn is_null(self) -> bool {\n+        // Compare via a cast to a thin pointer, so fat pointers are only\n+        // considering their \"data\" part for null-ness.\n+        (self as *const u8) == null()\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a reference to\n@@ -519,7 +521,7 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> where T: Sized {\n+    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n         if self.is_null() {\n             None\n         } else {\n@@ -1118,8 +1120,10 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_null(self) -> bool where T: Sized {\n-        self == null_mut()\n+    pub fn is_null(self) -> bool {\n+        // Compare via a cast to a thin pointer, so fat pointers are only\n+        // considering their \"data\" part for null-ness.\n+        (self as *mut u8) == null_mut()\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a reference to\n@@ -1150,7 +1154,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> where T: Sized {\n+    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n         if self.is_null() {\n             None\n         } else {\n@@ -1274,7 +1278,7 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n-    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> where T: Sized {\n+    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n         if self.is_null() {\n             None\n         } else {"}, {"sha": "4bd725f828f023b2fc000d63dc50a317ea96d234", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3580c4c58940ad5d62a068609b9b696e8eb31309/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3580c4c58940ad5d62a068609b9b696e8eb31309/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=3580c4c58940ad5d62a068609b9b696e8eb31309", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use core::ptr::*;\n+use core::slice;\n use core::cell::RefCell;\n \n #[test]\n@@ -62,6 +63,28 @@ fn test_is_null() {\n \n     let mq = unsafe { mp.offset(1) };\n     assert!(!mq.is_null());\n+\n+    // Pointers to unsized types\n+    let s: &mut [u8] = &mut [1, 2, 3];\n+    let cs: *const [u8] = s;\n+    assert!(!cs.is_null());\n+\n+    let ms: *mut [u8] = s;\n+    assert!(!ms.is_null());\n+\n+    let cz: *const [u8] = &[];\n+    assert!(!cz.is_null());\n+\n+    let mz: *mut [u8] = &mut [];\n+    assert!(!mz.is_null());\n+\n+    unsafe {\n+        let ncs: *const [u8] = slice::from_raw_parts(null(), 0);\n+        assert!(ncs.is_null());\n+\n+        let nms: *mut [u8] = slice::from_raw_parts_mut(null_mut(), 0);\n+        assert!(nms.is_null());\n+    }\n }\n \n #[test]\n@@ -85,6 +108,26 @@ fn test_as_ref() {\n             let p = &u as *const isize;\n             assert_eq!(p.as_ref().unwrap(), &2);\n         }\n+\n+        // Pointers to unsized types\n+        let s: &mut [u8] = &mut [1, 2, 3];\n+        let cs: *const [u8] = s;\n+        assert_eq!(cs.as_ref(), Some(&*s));\n+\n+        let ms: *mut [u8] = s;\n+        assert_eq!(ms.as_ref(), Some(&*s));\n+\n+        let cz: *const [u8] = &[];\n+        assert_eq!(cz.as_ref(), Some(&[][..]));\n+\n+        let mz: *mut [u8] = &mut [];\n+        assert_eq!(mz.as_ref(), Some(&[][..]));\n+\n+        let ncs: *const [u8] = slice::from_raw_parts(null(), 0);\n+        assert_eq!(ncs.as_ref(), None);\n+\n+        let nms: *mut [u8] = slice::from_raw_parts_mut(null_mut(), 0);\n+        assert_eq!(nms.as_ref(), None);\n     }\n }\n \n@@ -103,6 +146,17 @@ fn test_as_mut() {\n             let p = &mut u as *mut isize;\n             assert!(p.as_mut().unwrap() == &mut 2);\n         }\n+\n+        // Pointers to unsized types\n+        let s: &mut [u8] = &mut [1, 2, 3];\n+        let ms: *mut [u8] = s;\n+        assert_eq!(ms.as_mut(), Some(s));\n+\n+        let mz: *mut [u8] = &mut [];\n+        assert_eq!(mz.as_mut(), Some(&mut [][..]));\n+\n+        let nms: *mut [u8] = slice::from_raw_parts_mut(null_mut(), 0);\n+        assert_eq!(nms.as_mut(), None);\n     }\n }\n "}]}