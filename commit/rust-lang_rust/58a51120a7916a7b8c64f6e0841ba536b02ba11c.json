{"sha": "58a51120a7916a7b8c64f6e0841ba536b02ba11c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YTUxMTIwYTc5MTZhN2I4YzY0ZjZlMDg0MWJhNTM2YjAyYmExMWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-19T02:09:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-24T16:08:07Z"}, "message": "Update libuv\n\nThis update brings a few months of changes, but primarily a fix for the\nfollowing situation.\n\nWhen creating a handle to stdin, libuv used to set the stdin handle to\nnonblocking mode. This would end up affect this stdin handle across all\nprocesses that shared it, which mean that stdin become nonblocking for everyone\nusing the same stdin. On linux, this also affected *stdout* because stdin/stdout\nroughly point at the same thing.\n\nThis problem became apparent when running the test suite manually on a local\ncomputer. The stdtest suite (running with libgreen) would set stdout to\nnonblocking mode (as described above), and then the next test suite would always\nfail for a printing failure (because stdout was returning EAGAIN).\n\nThis has been fixed upstream, joyent/libuv@342e8c, and this update pulls in this\nfix. This also brings us in line with a recently upstreamed libuv patch.\n\nCloses #13336\nCloses #13355", "tree": {"sha": "4b9adbb4dea9f03e73871c1b1d529e1215b56d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b9adbb4dea9f03e73871c1b1d529e1215b56d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a51120a7916a7b8c64f6e0841ba536b02ba11c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a51120a7916a7b8c64f6e0841ba536b02ba11c", "html_url": "https://github.com/rust-lang/rust/commit/58a51120a7916a7b8c64f6e0841ba536b02ba11c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a51120a7916a7b8c64f6e0841ba536b02ba11c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70647ccc6de1c319de647a2b8d75b667e88fbfd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/70647ccc6de1c319de647a2b8d75b667e88fbfd0", "html_url": "https://github.com/rust-lang/rust/commit/70647ccc6de1c319de647a2b8d75b667e88fbfd0"}], "stats": {"total": 89, "additions": 42, "deletions": 47}, "files": [{"sha": "dcbd0baf6f329b2ac24d2522ff447a81bd3fb9c1", "filename": "src/librustuv/async.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fasync.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cast;\n-use libc::c_int;\n use std::rt::rtio::{Callback, RemoteCallback};\n use std::unstable::sync::Exclusive;\n \n@@ -54,8 +53,7 @@ impl UvHandle<uvll::uv_async_t> for AsyncWatcher {\n     }\n }\n \n-extern fn async_cb(handle: *uvll::uv_async_t, status: c_int) {\n-    assert!(status == 0);\n+extern fn async_cb(handle: *uvll::uv_async_t) {\n     let payload: &mut Payload = unsafe {\n         cast::transmute(uvll::get_data_for_uv_handle(handle))\n     };"}, {"sha": "665d418ab2ab6e0fd1c718f7d990afbc1fb971d6", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -12,7 +12,7 @@ use std::c_str::CString;\n use std::c_str;\n use std::cast::transmute;\n use std::cast;\n-use libc::{c_int, c_char, c_void, size_t, ssize_t};\n+use libc::{c_int, c_char, c_void, ssize_t};\n use libc;\n use std::rt::task::BlockedTask;\n use std::io::{FileStat, IoError};\n@@ -86,14 +86,12 @@ impl FsRequest {\n             } else {\n                 offset + written as i64\n             };\n+            let uvbuf = uvll::uv_buf_t {\n+                base: buf.slice_from(written as uint).as_ptr(),\n+                len: (buf.len() - written) as uvll::uv_buf_len_t,\n+            };\n             match execute(|req, cb| unsafe {\n-                uvll::uv_fs_write(loop_.handle,\n-                                  req,\n-                                  fd,\n-                                  buf.as_ptr().offset(written as int) as *c_void,\n-                                  (buf.len() - written) as size_t,\n-                                  offset,\n-                                  cb)\n+                uvll::uv_fs_write(loop_.handle, req, fd, &uvbuf, 1, offset, cb)\n             }).map(|req| req.get_result()) {\n                 Err(e) => return Err(e),\n                 Ok(n) => { written += n as uint; }\n@@ -106,9 +104,11 @@ impl FsRequest {\n         -> Result<int, UvError>\n     {\n         execute(|req, cb| unsafe {\n-            uvll::uv_fs_read(loop_.handle, req,\n-                             fd, buf.as_ptr() as *c_void,\n-                             buf.len() as size_t, offset, cb)\n+            let uvbuf = uvll::uv_buf_t {\n+                base: buf.as_ptr(),\n+                len: buf.len() as uvll::uv_buf_len_t,\n+            };\n+            uvll::uv_fs_read(loop_.handle, req, fd, &uvbuf, 1, offset, cb)\n         }).map(|req| {\n             req.get_result() as int\n         })"}, {"sha": "4d7da29aa9a8345d6d6ca42f2edc31c9e750c9b8", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cast;\n-use libc::{c_int, c_void};\n+use libc::c_void;\n \n use uvll;\n use super::{Loop, UvHandle};\n@@ -46,8 +46,7 @@ impl IdleWatcher {\n             assert_eq!(uvll::uv_idle_start(handle, onetime_cb), 0)\n         }\n \n-        extern fn onetime_cb(handle: *uvll::uv_idle_t, status: c_int) {\n-            assert_eq!(status, 0);\n+        extern fn onetime_cb(handle: *uvll::uv_idle_t) {\n             unsafe {\n                 let data = uvll::get_data_for_uv_handle(handle);\n                 let f: ~proc() = cast::transmute(data);\n@@ -82,8 +81,7 @@ impl UvHandle<uvll::uv_idle_t> for IdleWatcher {\n     fn uv_handle(&self) -> *uvll::uv_idle_t { self.handle }\n }\n \n-extern fn idle_cb(handle: *uvll::uv_idle_t, status: c_int) {\n-    assert_eq!(status, 0);\n+extern fn idle_cb(handle: *uvll::uv_idle_t) {\n     let idle: &mut IdleWatcher = unsafe { UvHandle::from_uv_handle(&handle) };\n     idle.callback.call();\n }"}, {"sha": "27a0691193980b308d23ac75ec31b125318770cc", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -255,10 +255,9 @@ impl TcpWatcher {\n             n => Err(UvError(n))\n         };\n \n-        extern fn timer_cb(handle: *uvll::uv_timer_t, status: c_int) {\n+        extern fn timer_cb(handle: *uvll::uv_timer_t) {\n             // Don't close the corresponding tcp request, just wake up the task\n             // and let RAII take care of the pending watcher.\n-            assert_eq!(status, 0);\n             let cx: &mut Ctx = unsafe {\n                 &mut *(uvll::get_data_for_uv_handle(handle) as *mut Ctx)\n             };\n@@ -599,8 +598,7 @@ impl rtio::RtioTcpAcceptor for TcpAcceptor {\n         self.timeout_tx = Some(tx);\n         self.timeout_rx = Some(rx);\n \n-        extern fn timer_cb(timer: *uvll::uv_timer_t, status: c_int) {\n-            assert_eq!(status, 0);\n+        extern fn timer_cb(timer: *uvll::uv_timer_t) {\n             let acceptor: &mut TcpAcceptor = unsafe {\n                 &mut *(uvll::get_data_for_uv_handle(timer) as *mut TcpAcceptor)\n             };"}, {"sha": "9e75991434f412f64dadef1d132aa911180c9296", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -21,7 +21,7 @@\n #![allow(dead_code)]\n \n use std::cast;\n-use libc::{c_void, c_int};\n+use libc::c_void;\n use std::rt::task::BlockedTask;\n use std::unstable::mutex::NativeMutex;\n use std::sync::arc::UnsafeArc;\n@@ -55,8 +55,7 @@ pub struct Queue {\n     queue: UnsafeArc<State>,\n }\n \n-extern fn async_cb(handle: *uvll::uv_async_t, status: c_int) {\n-    assert_eq!(status, 0);\n+extern fn async_cb(handle: *uvll::uv_async_t) {\n     let pool: &mut QueuePool = unsafe {\n         cast::transmute(uvll::get_data_for_uv_handle(handle))\n     };"}, {"sha": "5c34fd8cc12e85a5e04462892addd31b2656857d", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::c_int;\n use std::mem;\n use std::rt::rtio::RtioTimer;\n use std::rt::task::BlockedTask;\n@@ -137,9 +136,8 @@ impl RtioTimer for TimerWatcher {\n     }\n }\n \n-extern fn timer_cb(handle: *uvll::uv_timer_t, status: c_int) {\n+extern fn timer_cb(handle: *uvll::uv_timer_t) {\n     let _f = ForbidSwitch::new(\"timer callback can't switch\");\n-    assert_eq!(status, 0);\n     let timer: &mut TimerWatcher = unsafe { UvHandle::from_uv_handle(&handle) };\n \n     match timer.action.take_unwrap() {"}, {"sha": "4f3e12b6974d592f98793f8843e09a3776802f42", "filename": "src/librustuv/tty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftty.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -40,7 +40,7 @@ impl TtyWatcher {\n         // - https://github.com/joyent/libuv/issues/982\n         // - https://github.com/joyent/libuv/issues/988\n         let guess = unsafe { uvll::guess_handle(fd) };\n-        if readable && guess != uvll::UV_TTY as libc::c_int {\n+        if guess != uvll::UV_TTY as libc::c_int {\n             return Err(UvError(uvll::EBADF));\n         }\n "}, {"sha": "3127a01d70e4698644fb7f9cc6e19623048f61a6", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -23,7 +23,7 @@ use libc::{O_CREAT, O_APPEND, O_TRUNC, O_RDWR, O_RDONLY, O_WRONLY, S_IRUSR,\n use libc;\n use std::path::Path;\n use std::rt::rtio;\n-use std::rt::rtio::IoFactory;\n+use std::rt::rtio::{IoFactory, EventLoop};\n use ai = std::io::net::addrinfo;\n \n #[cfg(test)] use std::unstable::run_in_bare_thread;\n@@ -69,14 +69,20 @@ impl Drop for UvEventLoop {\n         // the loop is free'd (use-after-free). We also must free the uv handle\n         // after the loop has been closed because during the closing of the loop\n         // the handle is required to be used apparently.\n+        //\n+        // Lastly, after we've closed the pool of handles we pump the event loop\n+        // one last time to run any closing callbacks to make sure the loop\n+        // shuts down cleanly.\n         let handle = self.uvio.handle_pool.get_ref().handle();\n         drop(self.uvio.handle_pool.take());\n+        self.run();\n+\n         self.uvio.loop_.close();\n         unsafe { uvll::free_handle(handle) }\n     }\n }\n \n-impl rtio::EventLoop for UvEventLoop {\n+impl EventLoop for UvEventLoop {\n     fn run(&mut self) {\n         self.uvio.loop_.run();\n     }\n@@ -110,7 +116,6 @@ impl rtio::EventLoop for UvEventLoop {\n \n #[test]\n fn test_callback_run_once() {\n-    use std::rt::rtio::EventLoop;\n     run_in_bare_thread(proc() {\n         let mut event_loop = UvEventLoop::new();\n         let mut count = 0;"}, {"sha": "57f4bd9d7eb13c34e15db63d2d3ab7a37ab255ec", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -212,8 +212,7 @@ impl uv_stat_t {\n     }\n }\n \n-pub type uv_idle_cb = extern \"C\" fn(handle: *uv_idle_t,\n-                                    status: c_int);\n+pub type uv_idle_cb = extern \"C\" fn(handle: *uv_idle_t);\n pub type uv_alloc_cb = extern \"C\" fn(stream: *uv_stream_t,\n                                      suggested_size: size_t,\n                                      buf: *mut uv_buf_t);\n@@ -230,14 +229,12 @@ pub type uv_udp_recv_cb = extern \"C\" fn(handle: *uv_udp_t,\n pub type uv_close_cb = extern \"C\" fn(handle: *uv_handle_t);\n pub type uv_walk_cb = extern \"C\" fn(handle: *uv_handle_t,\n                                     arg: *c_void);\n-pub type uv_async_cb = extern \"C\" fn(handle: *uv_async_t,\n-                                     status: c_int);\n+pub type uv_async_cb = extern \"C\" fn(handle: *uv_async_t);\n pub type uv_connect_cb = extern \"C\" fn(handle: *uv_connect_t,\n                                        status: c_int);\n pub type uv_connection_cb = extern \"C\" fn(handle: *uv_connection_t,\n                                           status: c_int);\n-pub type uv_timer_cb = extern \"C\" fn(handle: *uv_timer_t,\n-                                     status: c_int);\n+pub type uv_timer_cb = extern \"C\" fn(handle: *uv_timer_t);\n pub type uv_write_cb = extern \"C\" fn(handle: *uv_write_t,\n                                      status: c_int);\n pub type uv_getaddrinfo_cb = extern \"C\" fn(req: *uv_getaddrinfo_t,\n@@ -597,10 +594,12 @@ extern {\n                       flags: c_int, mode: c_int, cb: uv_fs_cb) -> c_int;\n     pub fn uv_fs_unlink(loop_ptr: *uv_loop_t, req: *uv_fs_t, path: *c_char,\n                         cb: uv_fs_cb) -> c_int;\n-    pub fn uv_fs_write(l: *uv_loop_t, req: *uv_fs_t, fd: c_int, buf: *c_void,\n-                       len: size_t, offset: i64, cb: uv_fs_cb) -> c_int;\n-    pub fn uv_fs_read(l: *uv_loop_t, req: *uv_fs_t, fd: c_int, buf: *c_void,\n-                      len: size_t, offset: i64, cb: uv_fs_cb) -> c_int;\n+    pub fn uv_fs_write(l: *uv_loop_t, req: *uv_fs_t, fd: c_int,\n+                       bufs: *uv_buf_t, nbufs: c_uint,\n+                       offset: i64, cb: uv_fs_cb) -> c_int;\n+    pub fn uv_fs_read(l: *uv_loop_t, req: *uv_fs_t, fd: c_int,\n+                      bufs: *uv_buf_t, nbufs: c_uint,\n+                      offset: i64, cb: uv_fs_cb) -> c_int;\n     pub fn uv_fs_close(l: *uv_loop_t, req: *uv_fs_t, fd: c_int,\n                        cb: uv_fs_cb) -> c_int;\n     pub fn uv_fs_stat(l: *uv_loop_t, req: *uv_fs_t, path: *c_char,"}, {"sha": "eae13735809515951740c3932ef82d6909380603", "filename": "src/libstd/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibstd%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibstd%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fsip.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -364,7 +364,7 @@ mod tests {\n     use option::{Some, None};\n     use str::{Str,StrSlice};\n     use strbuf::StrBuf;\n-    use slice::{Vector, ImmutableVector, OwnedVector};\n+    use slice::{Vector, ImmutableVector};\n     use self::test::Bencher;\n \n     use super::super::Hash;"}, {"sha": "824d9e5ec925580be4d7ed65ab2a8de8890a6544", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -67,9 +67,9 @@ mod imp {\n     use clone::Clone;\n     use option::{Option, Some, None};\n     use iter::Iterator;\n-    use str::StrSlice;\n     use unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n     use mem;\n+    #[cfg(not(test))] use str::StrSlice;\n     #[cfg(not(test))] use ptr::RawPtr;\n \n     static mut global_args_ptr: uint = 0;"}, {"sha": "43495892ded622de51eba7362c5ffae1ed50c9cc", "filename": "src/libuv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuv?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -1 +1 @@\n-Subproject commit 800b56fe6af21ffd8e56aee8cf12dd758f5bbdf1\n+Subproject commit 43495892ded622de51eba7362c5ffae1ed50c9cc"}, {"sha": "8bd7aa54751753bb0bb72e540016f2858e5c19ca", "filename": "src/rt/libuv-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Frt%2Flibuv-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/58a51120a7916a7b8c64f6e0841ba536b02ba11c/src%2Frt%2Flibuv-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Flibuv-auto-clean-trigger?ref=58a51120a7916a7b8c64f6e0841ba536b02ba11c", "patch": "@@ -1,2 +1,2 @@\n # Change the contents of this file to force a full rebuild of libuv\n-2014-02-16\n+2014-04-18"}]}