{"sha": "72bcf92e124106e0bcf5155d0b610c6b2d848764", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmNmOTJlMTI0MTA2ZTBiY2Y1MTU1ZDBiNjEwYzZiMmQ4NDg3NjQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-28T19:30:06Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:06:50Z"}, "message": "Macrofy more `Lift` impls", "tree": {"sha": "1e03611d1fbca60b7089789bd19808625f1bad97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e03611d1fbca60b7089789bd19808625f1bad97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72bcf92e124106e0bcf5155d0b610c6b2d848764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72bcf92e124106e0bcf5155d0b610c6b2d848764", "html_url": "https://github.com/rust-lang/rust/commit/72bcf92e124106e0bcf5155d0b610c6b2d848764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72bcf92e124106e0bcf5155d0b610c6b2d848764/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42b21b522033dfd3a2807e20e789a94830ec346", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42b21b522033dfd3a2807e20e789a94830ec346", "html_url": "https://github.com/rust-lang/rust/commit/e42b21b522033dfd3a2807e20e789a94830ec346"}], "stats": {"total": 248, "additions": 48, "deletions": 200}, "files": [{"sha": "26f0ff0ffa2651098a4cf2ba942a171f897b5529", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 48, "deletions": 200, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/72bcf92e124106e0bcf5155d0b610c6b2d848764/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bcf92e124106e0bcf5155d0b610c6b2d848764/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=72bcf92e124106e0bcf5155d0b610c6b2d848764", "patch": "@@ -1709,104 +1709,63 @@ pub trait Lift<'tcx>: fmt::Debug {\n     fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted>;\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n-    type Lifted = Ty<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Ty<'tcx>> {\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n \n-impl<'a, 'tcx> Lift<'tcx> for Region<'a> {\n-    type Lifted = Region<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Region<'tcx>> {\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for Goal<'a> {\n-    type Lifted = Goal<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Goal<'tcx>> {\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n+macro_rules! nop_lift {\n+    ($ty:ty => $lifted:ty) => {\n+        impl<'a, 'tcx> Lift<'tcx> for $ty {\n+            type Lifted = $lifted;\n+            fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+                if tcx.interners.arena.in_arena(*self as *const _) {\n+                    return Some(unsafe { mem::transmute(*self) });\n+                }\n+                // Also try in the global tcx if we're not that.\n+                if !tcx.is_global() {\n+                    self.lift_to_tcx(tcx.global_tcx())\n+                } else {\n+                    None\n+                }\n+            }\n         }\n-        Some(tcx.intern_const_alloc(mir::interpret::Allocation::clone(self)))\n-    }\n+    };\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a List<Goal<'a>> {\n-    type Lifted = &'tcx List<Goal<'tcx>>;\n-    fn lift_to_tcx<'b, 'gcx>(\n-        &self,\n-        tcx: TyCtxt<'b, 'gcx, 'tcx>,\n-    ) -> Option<&'tcx List<Goal<'tcx>>> {\n-        if self.is_empty() {\n-            return Some(List::empty());\n-        }\n-\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n+macro_rules! nop_list_lift {\n+    ($ty:ty => $lifted:ty) => {\n+        impl<'a, 'tcx> Lift<'tcx> for &'a List<$ty> {\n+            type Lifted = &'tcx List<$lifted>;\n+            fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+                        if self.is_empty() {\n+                    return Some(List::empty());\n+                }\n+                if tcx.interners.arena.in_arena(*self as *const _) {\n+                    return Some(unsafe { mem::transmute(*self) });\n+                }\n+                // Also try in the global tcx if we're not that.\n+                if !tcx.is_global() {\n+                    self.lift_to_tcx(tcx.global_tcx())\n+                } else {\n+                    None\n+                }\n+            }\n         }\n-    }\n+    };\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a List<Clause<'a>> {\n-    type Lifted = &'tcx List<Clause<'tcx>>;\n-    fn lift_to_tcx<'b, 'gcx>(\n-        &self,\n-        tcx: TyCtxt<'b, 'gcx, 'tcx>,\n-    ) -> Option<&'tcx List<Clause<'tcx>>> {\n-        if self.is_empty() {\n-            return Some(List::empty());\n-        }\n+nop_lift!{Ty<'a> => Ty<'tcx>}\n+nop_lift!{Region<'a> => Region<'tcx>}\n+nop_lift!{Goal<'a> => Goal<'tcx>}\n+nop_lift!{&'a LazyConst<'a> => &'tcx LazyConst<'tcx>}\n \n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n+nop_list_lift!{Goal<'a> => Goal<'tcx>}\n+nop_list_lift!{Clause<'a> => Clause<'tcx>}\n+nop_list_lift!{Ty<'a> => Ty<'tcx>}\n+nop_list_lift!{ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n+nop_list_lift!{Predicate<'a> => Predicate<'tcx>}\n+nop_list_lift!{CanonicalVarInfo => CanonicalVarInfo}\n+nop_list_lift!{ProjectionKind<'a> => ProjectionKind<'tcx>}\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a LazyConst<'a> {\n-    type Lifted = &'tcx LazyConst<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx LazyConst<'tcx>> {\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n+// this is the impl for `&'a Substs<'a>`\n+nop_list_lift!{Kind<'a> => Kind<'tcx>}\n \n impl<'a, 'tcx> Lift<'tcx> for &'a mir::interpret::Allocation {\n     type Lifted = &'tcx mir::interpret::Allocation;\n@@ -1816,117 +1775,6 @@ impl<'a, 'tcx> Lift<'tcx> for &'a mir::interpret::Allocation {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n-    type Lifted = &'tcx Substs<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Substs<'tcx>> {\n-        if self.len() == 0 {\n-            return Some(List::empty());\n-        }\n-        if tcx.interners.arena.in_arena(&self[..] as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for &'a List<Ty<'a>> {\n-    type Lifted = &'tcx List<Ty<'tcx>>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n-                             -> Option<&'tcx List<Ty<'tcx>>> {\n-        if self.len() == 0 {\n-            return Some(List::empty());\n-        }\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for &'a List<ExistentialPredicate<'a>> {\n-    type Lifted = &'tcx List<ExistentialPredicate<'tcx>>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n-        -> Option<&'tcx List<ExistentialPredicate<'tcx>>> {\n-        if self.is_empty() {\n-            return Some(List::empty());\n-        }\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for &'a List<Predicate<'a>> {\n-    type Lifted = &'tcx List<Predicate<'tcx>>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n-        -> Option<&'tcx List<Predicate<'tcx>>> {\n-        if self.is_empty() {\n-            return Some(List::empty());\n-        }\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for &'a List<CanonicalVarInfo> {\n-    type Lifted = &'tcx List<CanonicalVarInfo>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        if self.len() == 0 {\n-            return Some(List::empty());\n-        }\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for &'a List<ProjectionKind<'a>> {\n-    type Lifted = &'tcx List<ProjectionKind<'tcx>>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        if self.len() == 0 {\n-            return Some(List::empty());\n-        }\n-        if tcx.interners.arena.in_arena(*self as *const _) {\n-            return Some(unsafe { mem::transmute(*self) });\n-        }\n-        // Also try in the global tcx if we're not that.\n-        if !tcx.is_global() {\n-            self.lift_to_tcx(tcx.global_tcx())\n-        } else {\n-            None\n-        }\n-    }\n-}\n-\n pub mod tls {\n     use super::{GlobalCtxt, TyCtxt};\n "}]}