{"sha": "7e2dd672da5f63ec1a4c9307bf74858aafe7c033", "node_id": "C_kwDOAAsO6NoAKDdlMmRkNjcyZGE1ZjYzZWMxYTRjOTMwN2JmNzQ4NThhYWZlN2MwMzM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-19T17:47:50Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-20T14:47:49Z"}, "message": "Move local_id_to_def_id to Lowering Context", "tree": {"sha": "562041046d810ad2ac787c125ccc5bf5964e42fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/562041046d810ad2ac787c125ccc5bf5964e42fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e2dd672da5f63ec1a4c9307bf74858aafe7c033", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmISVJcACgkQgTGiTgx5\n76841g//aHcUXGGkv115vTHbPgSGs2jacDN8n0mPpQq1qpFkzJtZkMmogrhsmaIC\nclGHkBcljx49Xa6/nElPLWl00M85TtZ4aelHbb4Tc0vSy94HSQGUofGTG7Gm67R4\nlU9jmbUaZvxRlnk0fOZ2bH1VC07p6S0QfolXRxMM9DYpAUAW5cko0U35pbK3f3C/\n+I7c1WNV1ySg+iAtj5CKFJJbw/kaC4XcuOivHHwxJkszQeRmNEXvfPl1p8VWvo9m\nYI1FMYvZWYvofGYlPCRs5LUOwW9Kf48yrJ1Gshdl7CpvFSM/l6sLOZv9a0XXIcQT\nl8qLPhe5xvYb0cVSGVC6e+g8nld9YElC89nQobi1R4aYbWtdERH75QpFM85kYEzE\nUofI9zlA/N3nLfad/P0CJBhzyYEs6nIH1ZV9pR7KyXW5FY0GgI/Sz9nDhmIuPhxD\n6xVff8YEcTsAok+12fEGD2jRmSRZiuBLyYga/MpGu2H4pzQfz2A5QoZoR+gjqYfQ\nInm4T9zBrIvWKwqXuz8d7lDYqbiDO0krUxUHcFeE4jhdgfTMiwNk2vse7Gp9slrJ\n4PPYY/9m4hjtL5m+HBtUtWaz5Q1besSfv4PVmHOwbpXdkbkQWYpvCmYdSSa+GUbQ\n/aDef4u/00vg0L/hFIiIkXcueeP7YuhcZhvUXahai7+mnRXiR2E=\n=rF9y\n-----END PGP SIGNATURE-----", "payload": "tree 562041046d810ad2ac787c125ccc5bf5964e42fc\nparent a8d24742f8a7d72d4ae70001c728a5f1a9175539\nauthor Santiago Pastorino <spastorino@gmail.com> 1645292870 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1645368469 -0300\n\nMove local_id_to_def_id to Lowering Context\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2dd672da5f63ec1a4c9307bf74858aafe7c033", "html_url": "https://github.com/rust-lang/rust/commit/7e2dd672da5f63ec1a4c9307bf74858aafe7c033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e2dd672da5f63ec1a4c9307bf74858aafe7c033/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d24742f8a7d72d4ae70001c728a5f1a9175539", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d24742f8a7d72d4ae70001c728a5f1a9175539", "html_url": "https://github.com/rust-lang/rust/commit/a8d24742f8a7d72d4ae70001c728a5f1a9175539"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "905f17ee81aaa75ec778e806b5a3f42eb974cf05", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7e2dd672da5f63ec1a4c9307bf74858aafe7c033/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2dd672da5f63ec1a4c9307bf74858aafe7c033/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7e2dd672da5f63ec1a4c9307bf74858aafe7c033", "patch": "@@ -54,7 +54,7 @@ use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n-use rustc_hir::{ConstArg, GenericArg, ParamName};\n+use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::LintBuffer;\n@@ -155,6 +155,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     current_hir_id_owner: LocalDefId,\n     item_local_id_counter: hir::ItemLocalId,\n+    local_id_to_def_id: SortedMap<ItemLocalId, LocalDefId>,\n \n     /// NodeIds that are lowered inside the current HIR owner.\n     node_id_to_local_id: FxHashMap<NodeId, hir::ItemLocalId>,\n@@ -312,6 +313,7 @@ pub fn lower_crate<'a, 'hir>(\n         current_hir_id_owner: CRATE_DEF_ID,\n         item_local_id_counter: hir::ItemLocalId::new(0),\n         node_id_to_local_id: FxHashMap::default(),\n+        local_id_to_def_id: SortedMap::new(),\n         generator_kind: None,\n         task_context: None,\n         current_item: None,\n@@ -439,6 +441,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let current_attrs = std::mem::take(&mut self.attrs);\n         let current_bodies = std::mem::take(&mut self.bodies);\n         let current_node_ids = std::mem::take(&mut self.node_id_to_local_id);\n+        let current_id_to_def_id = std::mem::take(&mut self.local_id_to_def_id);\n         let current_owner = std::mem::replace(&mut self.current_hir_id_owner, def_id);\n         let current_local_counter =\n             std::mem::replace(&mut self.item_local_id_counter, hir::ItemLocalId::new(1));\n@@ -454,6 +457,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.attrs = current_attrs;\n         self.bodies = current_bodies;\n         self.node_id_to_local_id = current_node_ids;\n+        self.local_id_to_def_id = current_id_to_def_id;\n         self.current_hir_id_owner = current_owner;\n         self.item_local_id_counter = current_local_counter;\n \n@@ -468,25 +472,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let mut bodies = std::mem::take(&mut self.bodies);\n         let node_id_to_local_id = std::mem::take(&mut self.node_id_to_local_id);\n \n-        let local_id_to_def_id = node_id_to_local_id\n-            .iter()\n-            .filter_map(|(&node_id, &local_id)| {\n-                if local_id == hir::ItemLocalId::new(0) {\n-                    None\n-                } else {\n-                    let def_id = self.resolver.opt_local_def_id(node_id)?;\n-\n-                    self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n-                    if let o @ hir::MaybeOwner::Phantom = &mut self.owners[def_id] {\n-                        // Do not override a `MaybeOwner::Owner` that may already here.\n-                        let hir_id = hir::HirId { owner: self.current_hir_id_owner, local_id };\n-                        *o = hir::MaybeOwner::NonOwner(hir_id);\n-                    }\n-                    Some((local_id, def_id))\n-                }\n-            })\n-            .collect();\n-\n         let trait_map = node_id_to_local_id\n             .into_iter()\n             .filter_map(|(node_id, local_id)| {\n@@ -513,7 +498,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hash_without_bodies,\n             nodes,\n             bodies,\n-            local_id_to_def_id,\n+            local_id_to_def_id: std::mem::take(&mut self.local_id_to_def_id),\n         };\n         let attrs = {\n             let mut hcx = self.resolver.create_stable_hashing_context();\n@@ -556,18 +541,33 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n-        let owner = self.current_hir_id_owner;\n-        let local_id = match self.node_id_to_local_id.entry(ast_node_id) {\n-            Entry::Occupied(o) => *o.get(),\n+        match self.node_id_to_local_id.entry(ast_node_id) {\n+            Entry::Occupied(o) => {\n+                hir::HirId { owner: self.current_hir_id_owner, local_id: *o.get() }\n+            }\n             Entry::Vacant(v) => {\n                 // Generate a new `HirId`.\n+                let owner = self.current_hir_id_owner;\n                 let local_id = self.item_local_id_counter;\n-                self.item_local_id_counter.increment_by(1);\n+                let hir_id = hir::HirId { owner, local_id };\n+\n                 v.insert(local_id);\n-                local_id\n+                self.item_local_id_counter.increment_by(1);\n+\n+                if local_id != hir::ItemLocalId::new(0) {\n+                    if let Some(def_id) = self.resolver.opt_local_def_id(ast_node_id) {\n+                        self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n+                        if let o @ hir::MaybeOwner::Phantom = &mut self.owners[def_id] {\n+                            // Do not override a `MaybeOwner::Owner` that may already here.\n+                            *o = hir::MaybeOwner::NonOwner(hir_id);\n+                        }\n+                        self.local_id_to_def_id.insert(local_id, def_id);\n+                    }\n+                }\n+\n+                hir_id\n             }\n-        };\n-        hir::HirId { owner, local_id }\n+        }\n     }\n \n     fn next_id(&mut self) -> hir::HirId {\n@@ -1427,14 +1427,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let lifetime_defs =\n                 lctx.arena.alloc_from_iter(collected_lifetimes.iter().map(|&(name, span)| {\n                     let def_node_id = lctx.resolver.next_node_id();\n-                    let hir_id = lctx.lower_node_id(def_node_id);\n                     lctx.resolver.create_def(\n                         opaque_ty_def_id,\n                         def_node_id,\n                         DefPathData::LifetimeNs(name.ident().name),\n                         ExpnId::root(),\n                         span.with_parent(None),\n                     );\n+                    let hir_id = lctx.lower_node_id(def_node_id);\n \n                     let (name, kind) = match name {\n                         hir::LifetimeName::Underscore => ("}]}