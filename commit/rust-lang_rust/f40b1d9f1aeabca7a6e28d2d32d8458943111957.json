{"sha": "f40b1d9f1aeabca7a6e28d2d32d8458943111957", "node_id": "C_kwDOAAsO6NoAKGY0MGIxZDlmMWFlYWJjYTdhNmUyOGQyZDMyZDg0NTg5NDMxMTE5NTc", "commit": {"author": {"name": "Yacin Tmimi", "email": "yacintmimi@gmail.com", "date": "2021-11-24T23:47:37Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-12-08T00:45:00Z"}, "message": "Backport: Do not touch module with #![rustfmt::skip] (4297)\n\nAlthough the implementation is slightly different than the original PR,\nthe general idea is the same. After collecting all modules we want to\nexclude formatting those that contain the #![rustfmt::skip] attribute.", "tree": {"sha": "dc21e867329a7ea83783cbc1009657fb5b4c25d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc21e867329a7ea83783cbc1009657fb5b4c25d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f40b1d9f1aeabca7a6e28d2d32d8458943111957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f40b1d9f1aeabca7a6e28d2d32d8458943111957", "html_url": "https://github.com/rust-lang/rust/commit/f40b1d9f1aeabca7a6e28d2d32d8458943111957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f40b1d9f1aeabca7a6e28d2d32d8458943111957/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da837185714cefbb261e93e9846afb11c1dc60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da837185714cefbb261e93e9846afb11c1dc60e", "html_url": "https://github.com/rust-lang/rust/commit/8da837185714cefbb261e93e9846afb11c1dc60e"}], "stats": {"total": 118, "additions": 93, "deletions": 25}, "files": [{"sha": "1972b5a87a5ead5b43f24068f2019f71d41cb4ee", "filename": "src/formatting.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -5,6 +5,7 @@ use std::io::{self, Write};\n use std::time::{Duration, Instant};\n \n use rustc_ast::ast;\n+use rustc_ast::AstLike;\n use rustc_span::Span;\n \n use self::newline_style::apply_newline_style;\n@@ -15,7 +16,7 @@ use crate::issues::BadIssueSeeker;\n use crate::modules::Module;\n use crate::syntux::parser::{DirectoryOwnership, Parser, ParserError};\n use crate::syntux::session::ParseSess;\n-use crate::utils::count_newlines;\n+use crate::utils::{contains_skip, count_newlines};\n use crate::visitor::FmtVisitor;\n use crate::{modules, source_file, ErrorKind, FormatReport, Input, Session};\n \n@@ -58,6 +59,39 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n     }\n }\n \n+/// Determine if a module should be skipped. True if the module should be skipped, false otherwise.\n+fn should_skip_module<T: FormatHandler>(\n+    config: &Config,\n+    context: &FormatContext<'_, T>,\n+    input_is_stdin: bool,\n+    main_file: &FileName,\n+    path: &FileName,\n+    module: &Module<'_>,\n+) -> bool {\n+    if contains_skip(module.attrs()) {\n+        return true;\n+    }\n+\n+    if config.skip_children() && path != main_file {\n+        return true;\n+    }\n+\n+    if !input_is_stdin && context.ignore_file(&path) {\n+        return true;\n+    }\n+\n+    if !config.format_generated_files() {\n+        let source_file = context.parse_session.span_to_file_contents(module.span);\n+        let src = source_file.src.as_ref().expect(\"SourceFile without src\");\n+\n+        if is_generated_file(src) {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}\n+\n // Format an entire crate (or subset of the module tree).\n fn format_project<T: FormatHandler>(\n     input: Input,\n@@ -97,23 +131,19 @@ fn format_project<T: FormatHandler>(\n         directory_ownership.unwrap_or(DirectoryOwnership::UnownedViaBlock),\n         !input_is_stdin && !config.skip_children(),\n     )\n-    .visit_crate(&krate)?;\n+    .visit_crate(&krate)?\n+    .into_iter()\n+    .filter(|(path, module)| {\n+        !should_skip_module(config, &context, input_is_stdin, &main_file, path, module)\n+    })\n+    .collect::<Vec<_>>();\n \n     timer = timer.done_parsing();\n \n     // Suppress error output if we have to do any further parsing.\n     context.parse_session.set_silent_emitter();\n \n     for (path, module) in files {\n-        let source_file = context.parse_session.span_to_file_contents(module.span);\n-        let src = source_file.src.as_ref().expect(\"SourceFile without src\");\n-\n-        let should_ignore = (!input_is_stdin && context.ignore_file(&path))\n-            || (!config.format_generated_files() && is_generated_file(src));\n-\n-        if (config.skip_children() && path != main_file) || should_ignore {\n-            continue;\n-        }\n         should_emit_verbose(input_is_stdin, config, || println!(\"Formatting {}\", path));\n         context.format_file(path, &module, is_macro_def)?;\n     }"}, {"sha": "92949ab576a6bffd4c0d546bdab19db91ad40ed3", "filename": "src/test/configuration_snippet.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Ftest%2Fconfiguration_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Ftest%2Fconfiguration_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fconfiguration_snippet.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -110,14 +110,7 @@ impl ConfigCodeBlock {\n         assert!(self.code_block.is_some() && self.code_block_start.is_some());\n \n         // See if code block begins with #![rustfmt::skip].\n-        let fmt_skip = self\n-            .code_block\n-            .as_ref()\n-            .unwrap()\n-            .lines()\n-            .nth(0)\n-            .unwrap_or(\"\")\n-            == \"#![rustfmt::skip]\";\n+        let fmt_skip = self.fmt_skip();\n \n         if self.config_name.is_none() && !fmt_skip {\n             write_message(&format!(\n@@ -138,6 +131,17 @@ impl ConfigCodeBlock {\n         true\n     }\n \n+    /// True if the code block starts with #![rustfmt::skip]\n+    fn fmt_skip(&self) -> bool {\n+        self.code_block\n+            .as_ref()\n+            .unwrap()\n+            .lines()\n+            .nth(0)\n+            .unwrap_or(\"\")\n+            == \"#![rustfmt::skip]\"\n+    }\n+\n     fn has_parsing_errors<T: Write>(&self, session: &Session<'_, T>) -> bool {\n         if session.has_parsing_errors() {\n             write_message(&format!(\n@@ -251,6 +255,7 @@ fn configuration_snippet_tests() {\n     let blocks = get_code_blocks();\n     let failures = blocks\n         .iter()\n+        .filter(|block| !block.fmt_skip())\n         .map(ConfigCodeBlock::formatted_is_idempotent)\n         .fold(0, |acc, r| acc + (!r as u32));\n "}, {"sha": "ec9ed0f0b8d6249357980d28ddc9955c8a9e850b", "filename": "src/test/mod_resolver.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Ftest%2Fmod_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Ftest%2Fmod_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod_resolver.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -41,3 +41,12 @@ fn out_of_line_nested_inline_within_out_of_line() {\n         ],\n     );\n }\n+\n+#[test]\n+fn skip_out_of_line_nested_inline_within_out_of_line() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5065\n+    verify_mod_resolution(\n+        \"tests/mod-resolver/skip-files-issue-5065/main.rs\",\n+        &[\"tests/mod-resolver/skip-files-issue-5065/one.rs\"],\n+    );\n+}"}, {"sha": "ba446200232b563d0745b2e4c5a87f630a587b30", "filename": "src/visitor.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -948,12 +948,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     pub(crate) fn format_separate_mod(&mut self, m: &Module<'_>, end_pos: BytePos) {\n         self.block_indent = Indent::empty();\n-        if self.visit_attrs(m.attrs(), ast::AttrStyle::Inner) {\n-            self.push_skipped_with_span(m.attrs(), m.span, m.span);\n-        } else {\n-            self.walk_mod_items(&m.items);\n-            self.format_missing_with_indent(end_pos);\n-        }\n+        let skipped = self.visit_attrs(m.attrs(), ast::AttrStyle::Inner);\n+        assert!(\n+            !skipped,\n+            \"Skipping module must be handled before reaching this line.\"\n+        );\n+        self.walk_mod_items(&m.items);\n+        self.format_missing_with_indent(end_pos);\n     }\n \n     pub(crate) fn skip_empty_lines(&mut self, end_pos: BytePos) {"}, {"sha": "74889acf0c38afe3442fb18faa75c8faeb3d8a74", "filename": "tests/mod-resolver/skip-files-issue-5065/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -0,0 +1,5 @@\n+#![rustfmt::skip]\n+\n+mod bar {\n+\n+        mod baz;}\n\\ No newline at end of file"}, {"sha": "3519b0ee59c88f71c373633ef2abd085d3e1ea16", "filename": "tests/mod-resolver/skip-files-issue-5065/foo/bar/baz.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo%2Fbar%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo%2Fbar%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo%2Fbar%2Fbaz.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -0,0 +1 @@\n+fn    baz()    {       }\n\\ No newline at end of file"}, {"sha": "3122e4f220f6291bc2ce3193020bad339b714055", "filename": "tests/mod-resolver/skip-files-issue-5065/main.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fmain.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -0,0 +1,9 @@\n+#![rustfmt::skip]\n+\n+mod foo;\n+mod one;\n+\n+fn main() {println!(\"Hello, world!\");\n+}\n+\n+// trailing commet"}, {"sha": "e7eb2c2d64ddafd911c78d132b1355d984421345", "filename": "tests/mod-resolver/skip-files-issue-5065/one.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fone.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -0,0 +1 @@\n+struct One {   value:    String }\n\\ No newline at end of file"}, {"sha": "f85de33257cccd5fc062ed45294168a1ab0dfa2e", "filename": "tests/target/skip/preserve_trailing_comment.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Ftarget%2Fskip%2Fpreserve_trailing_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b1d9f1aeabca7a6e28d2d32d8458943111957/tests%2Ftarget%2Fskip%2Fpreserve_trailing_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip%2Fpreserve_trailing_comment.rs?ref=f40b1d9f1aeabca7a6e28d2d32d8458943111957", "patch": "@@ -0,0 +1,7 @@\n+#![rustfmt::skip]\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+// Trailing Comment"}]}