{"sha": "fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTJhNGQzM2YwODgwZWRhYWU0MTZmM2RiMDhlY2M5ZWQ1YWNkMmE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-11T04:04:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-11T04:04:41Z"}, "message": "Merge pull request #2173 from topecongiro/assignment-with-100-chars\n\nAssignment whose lhs has 100 chars", "tree": {"sha": "d1ea1c01cde1b8b1dbad36ce3ef39fc01ef19083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ea1c01cde1b8b1dbad36ce3ef39fc01ef19083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaLgPZCRBK7hj4Ov3rIwAAdHIIAFx3l/zuMQ9oxWLxxLxTJr5b\n5UWqijDWyTmXALTq9K845/+Bxs0YAdusGId4cXaJmCodGXMGyMh3Lowi61UNtrXn\nmSnvOYf6p720WXrab30cEF/26rG6Z/7BZ+R1S92aRQtjekm1XbEm+ldZGD1GPXIr\nAuulQgcRT+vDj4cVjPkafrWQPRAI1iuL3hS1OOiV+7ZupdifqMPliyBTuOMrsnLV\nPWSVmWCKYLnrQsltpy3JVfJgw+monXs7iRPbf20WpGs6TSXdk7e9AmjoIMFh5wlu\nGUeXWNY0G4lHtOxqxs0lTPQAz/IfwlTzB1K3uK156pHhXvvmoPB6xLtMNsPBO6g=\n=5wj3\n-----END PGP SIGNATURE-----\n", "payload": "tree d1ea1c01cde1b8b1dbad36ce3ef39fc01ef19083\nparent 644b60ad85c18023c5b6f09fa60b9cf572d28e7f\nparent 59ebde26f795c41665637d6d0a939a6711fe638a\nauthor Nick Cameron <nrc@ncameron.org> 1512965081 +1300\ncommitter GitHub <noreply@github.com> 1512965081 +1300\n\nMerge pull request #2173 from topecongiro/assignment-with-100-chars\n\nAssignment whose lhs has 100 chars"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "html_url": "https://github.com/rust-lang/rust/commit/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "644b60ad85c18023c5b6f09fa60b9cf572d28e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/644b60ad85c18023c5b6f09fa60b9cf572d28e7f", "html_url": "https://github.com/rust-lang/rust/commit/644b60ad85c18023c5b6f09fa60b9cf572d28e7f"}, {"sha": "59ebde26f795c41665637d6d0a939a6711fe638a", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ebde26f795c41665637d6d0a939a6711fe638a", "html_url": "https://github.com/rust-lang/rust/commit/59ebde26f795c41665637d6d0a939a6711fe638a"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "4fe97a2cb2bc1ccaf201be00d55a9468f095b18b", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "patch": "@@ -2764,7 +2764,11 @@ pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n         0\n     };\n     // 1 = space between operator and rhs.\n-    let orig_shape = shape.offset_left(last_line_width + 1)?;\n+    let orig_shape = shape.offset_left(last_line_width + 1).unwrap_or(Shape {\n+        width: 0,\n+        offset: shape.offset + last_line_width + 1,\n+        ..shape\n+    });\n     let rhs = choose_rhs(context, ex, orig_shape, ex.rewrite(context, orig_shape))?;\n     Some(lhs + &rhs)\n }"}, {"sha": "bff5c00d2f477c88a2063869ddd5ecc78a567967", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "patch": "@@ -945,7 +945,9 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         // FIXME(#2055): rustfmt fails to format when there are comments between trait bounds.\n         if !type_param_bounds.is_empty() {\n-            let ident_hi = context.codemap.span_after(item.span, &format!(\"{}\", item.ident));\n+            let ident_hi = context\n+                .codemap\n+                .span_after(item.span, &format!(\"{}\", item.ident));\n             let bound_hi = type_param_bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(&snippet) {"}, {"sha": "06b31340d8821f69634baad90443aeeaa60cf53c", "filename": "tests/source/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "patch": "@@ -45,6 +45,11 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n  + 2 + 3 {\n     }\n \n+    if let ast::ItemKind::Trait(_, unsafety, ref generics, ref type_param_bounds, ref trait_items) = item.node\n+    {\n+        // nothing\n+    }\n+\n     let test = if true { 5 } else { 3 };\n \n     if cond() {"}, {"sha": "edf83b66fc4a3354962825a427130a3954ef25d7", "filename": "tests/target/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc52a4d33f0880edaae416f3db08ecc9ed5acd2a/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=fc52a4d33f0880edaae416f3db08ecc9ed5acd2a", "patch": "@@ -70,6 +70,12 @@ fn foo() -> bool {\n     ) = 1 + 2 + 3\n     {}\n \n+    if let ast::ItemKind::Trait(_, unsafety, ref generics, ref type_param_bounds, ref trait_items) =\n+        item.node\n+    {\n+        // nothing\n+    }\n+\n     let test = if true { 5 } else { 3 };\n \n     if cond() {"}]}