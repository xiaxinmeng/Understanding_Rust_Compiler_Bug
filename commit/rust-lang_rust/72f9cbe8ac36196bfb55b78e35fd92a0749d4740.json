{"sha": "72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZjljYmU4YWMzNjE5NmJmYjU1Yjc4ZTM1ZmQ5MmEwNzQ5ZDQ3NDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T03:54:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:28Z"}, "message": "librustc: De-`@mut` the borrow check's root map", "tree": {"sha": "20d7c8d28e5099e6bc36bbd2cfdb881753c03d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d7c8d28e5099e6bc36bbd2cfdb881753c03d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "html_url": "https://github.com/rust-lang/rust/commit/72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4661fd2582f5f2fc805a24820f8781650c0f99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4661fd2582f5f2fc805a24820f8781650c0f99d", "html_url": "https://github.com/rust-lang/rust/commit/c4661fd2582f5f2fc805a24820f8781650c0f99d"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "a4911ca556fd698d2cec70920c177f62a23a1c38", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "patch": "@@ -279,7 +279,9 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n         // Add a record of what is required\n         let rm_key = root_map_key {id: cmt_deref.id, derefs: derefs};\n         let root_info = RootInfo {scope: root_scope, freeze: opt_dyna};\n-        self.bccx.root_map.insert(rm_key, root_info);\n+\n+        let mut root_map = self.bccx.root_map.borrow_mut();\n+        root_map.get().insert(rm_key, root_info);\n \n         debug!(\"root_key: {:?} root_info: {:?}\", rm_key, root_info);\n         Ok(())"}, {"sha": "a445fd42271004bd83caf983c05592308482c430", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "patch": "@@ -20,6 +20,7 @@ use middle::dataflow::DataFlowOperator;\n use util::common::stmt_set;\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n+use std::cell::RefCell;\n use std::hashmap::{HashSet, HashMap};\n use std::ops::{BitOr, BitAnd};\n use std::result::{Result};\n@@ -413,10 +414,10 @@ pub struct RootInfo {\n     freeze: Option<DynaFreezeKind> // Some() if we should freeze box at runtime\n }\n \n-pub type root_map = @mut HashMap<root_map_key, RootInfo>;\n+pub type root_map = @RefCell<HashMap<root_map_key, RootInfo>>;\n \n pub fn root_map() -> root_map {\n-    return @mut HashMap::new();\n+    return @RefCell::new(HashMap::new());\n }\n \n pub enum DynaFreezeKind {"}, {"sha": "a9a1dc528ee319968b6c194893a7784b5f36fab3", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "patch": "@@ -19,6 +19,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n use syntax::ast::*;\n \n+use std::cell::RefCell;\n use std::hashmap::{HashMap, HashSet};\n \n //\n@@ -119,7 +120,7 @@ pub fn lookup_variant_by_id(tcx: ty::ctxt,\n             }\n         }\n         let maps = astencode::Maps {\n-            root_map: @mut HashMap::new(),\n+            root_map: @RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n             vtable_map: @mut HashMap::new(),\n             write_guard_map: @mut HashSet::new(),\n@@ -169,7 +170,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n             }\n         }\n         let maps = astencode::Maps {\n-            root_map: @mut HashMap::new(),\n+            root_map: @RefCell::new(HashMap::new()),\n             method_map: @mut HashMap::new(),\n             vtable_map: @mut HashMap::new(),\n             write_guard_map: @mut HashSet::new(),"}, {"sha": "9f2b6833374ead791ceb1de47412443a5efd5c79", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "patch": "@@ -1112,7 +1112,8 @@ fn pats_require_rooting(bcx: @Block,\n     m.iter().any(|br| {\n         let pat_id = br.pats[col].id;\n         let key = root_map_key {id: pat_id, derefs: 0u };\n-        bcx.ccx().maps.root_map.contains_key(&key)\n+        let root_map = bcx.ccx().maps.root_map.borrow();\n+        root_map.get().contains_key(&key)\n     })\n }\n "}, {"sha": "922abffac9eaeb1624bed4fbee535d67667692fb", "filename": "src/librustc/middle/trans/write_guard.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f9cbe8ac36196bfb55b78e35fd92a0749d4740/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fwrite_guard.rs?ref=72f9cbe8ac36196bfb55b78e35fd92a0749d4740", "patch": "@@ -45,9 +45,12 @@ pub fn root_and_write_guard(datum: &Datum,\n     //\n     // (Note: root'd values are always boxes)\n     let ccx = bcx.ccx();\n-    bcx = match ccx.maps.root_map.find(&key) {\n-        None => bcx,\n-        Some(&root_info) => root(datum, bcx, span, key, root_info)\n+    bcx = {\n+        let root_map = ccx.maps.root_map.borrow();\n+        match root_map.get().find(&key) {\n+            None => bcx,\n+            Some(&root_info) => root(datum, bcx, span, key, root_info)\n+        }\n     };\n \n     // Perform the write guard, if necessary."}]}