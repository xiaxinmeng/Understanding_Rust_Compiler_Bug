{"sha": "8d6d8f0426f517051926a86f41f831eff30b23a7", "node_id": "C_kwDOAAsO6NoAKDhkNmQ4ZjA0MjZmNTE3MDUxOTI2YTg2ZjQxZjgzMWVmZjMwYjIzYTc", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-05-18T23:06:40Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-05-25T02:50:21Z"}, "message": "Fix/bless tests broken by DSE", "tree": {"sha": "e071fd8829c03ed7ccf31067a23def9909208341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e071fd8829c03ed7ccf31067a23def9909208341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6d8f0426f517051926a86f41f831eff30b23a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6d8f0426f517051926a86f41f831eff30b23a7", "html_url": "https://github.com/rust-lang/rust/commit/8d6d8f0426f517051926a86f41f831eff30b23a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6d8f0426f517051926a86f41f831eff30b23a7/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf153a241dda6c44ea34095b57372c64b98989f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf153a241dda6c44ea34095b57372c64b98989f2", "html_url": "https://github.com/rust-lang/rust/commit/bf153a241dda6c44ea34095b57372c64b98989f2"}], "stats": {"total": 497, "additions": 197, "deletions": 300}, "files": [{"sha": "81675377941bd6ba04f17b646ef414e5e8870d0c", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -1,5 +1,6 @@\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n+// compile-flags:-Zmir-opt-level=0\n \n #![deny(dead_code)]\n #![feature(coerce_unsized)]"}, {"sha": "de06cb474be6a4ed746925167b11a9bd964b154f", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -31,9 +31,9 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -183,7 +183,7 @@ pub fn add_loop_label_to_break() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;"}, {"sha": "b04660274cc0ccd81568fa3f56918afef951c8cd", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -213,9 +213,9 @@ pub fn change_initializer() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "e26cb2c8508654fdb5ac8d72865d9ce6b022774b", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -31,9 +31,9 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;"}, {"sha": "42652a329b5efb3aefffeb031b2d7511eb6d6865", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -31,9 +31,9 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -56,9 +56,9 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(any(cfail1,cfail4)))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;"}, {"sha": "6d11d02d6792896e7c50e4148d8606593453d90a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.32bit.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -17,11 +17,8 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n         StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "6d11d02d6792896e7c50e4148d8606593453d90a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.SimplifyLocals.after.64bit.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -17,11 +17,8 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        _1 = const 4_i32;                // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n         StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _2 = const 3_i32;                // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n         StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _3 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n         StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "c3aa19e6c5f8402fa0e7475fc6198ed6015a8c43", "filename": "src/test/mir-opt/dest-prop/branch.main.DestinationPropagation.diff", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fbranch.main.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -7,27 +7,23 @@\n       let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:15:16: 15:22\n       let _4: i32;                         // in scope 0 at $DIR/branch.rs:18:9: 18:14\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n-+         debug x => _2;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n+          debug x => _1;                   // in scope 1 at $DIR/branch.rs:13:9: 13:10\n           let _2: i32;                     // in scope 1 at $DIR/branch.rs:15:9: 15:10\n           scope 2 {\n               debug y => _2;               // in scope 2 at $DIR/branch.rs:15:9: 15:10\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/branch.rs:13:9: 13:10\n--         _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n-+         nop;                             // scope 0 at $DIR/branch.rs:13:9: 13:10\n-+         _2 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n+          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:13:9: 13:10\n+          _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:13:13: 13:18\n                                            // mir::Constant\n                                            // + span: $DIR/branch.rs:13:13: 13:16\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/branch.rs:15:9: 15:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:15:9: 15:10\n+          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:15:9: 15:10\n           StorageLive(_3);                 // scope 1 at $DIR/branch.rs:15:16: 15:22\n           _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:15:16: 15:22\n                                            // mir::Constant\n@@ -40,8 +36,7 @@\n       }\n   \n       bb3: {\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:16:9: 16:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n+          nop;                             // scope 1 at $DIR/branch.rs:16:9: 16:10\n           goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n       }\n   \n@@ -55,18 +50,15 @@\n   \n       bb5: {\n           StorageDead(_4);                 // scope 1 at $DIR/branch.rs:18:14: 18:15\n--         _2 = _1;                         // scope 1 at $DIR/branch.rs:19:9: 19:10\n-+         nop;                             // scope 1 at $DIR/branch.rs:19:9: 19:10\n+          nop;                             // scope 1 at $DIR/branch.rs:19:9: 19:10\n           goto -> bb6;                     // scope 1 at $DIR/branch.rs:15:13: 20:6\n       }\n   \n       bb6: {\n           StorageDead(_3);                 // scope 1 at $DIR/branch.rs:20:5: 20:6\n           nop;                             // scope 0 at $DIR/branch.rs:12:11: 21:2\n--         StorageDead(_2);                 // scope 1 at $DIR/branch.rs:21:1: 21:2\n--         StorageDead(_1);                 // scope 0 at $DIR/branch.rs:21:1: 21:2\n-+         nop;                             // scope 1 at $DIR/branch.rs:21:1: 21:2\n-+         nop;                             // scope 0 at $DIR/branch.rs:21:1: 21:2\n+          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:21:1: 21:2\n+          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:21:1: 21:2\n           return;                          // scope 0 at $DIR/branch.rs:21:2: 21:2\n       }\n   }"}, {"sha": "8919703647d6d3cb24a831191dc1867d1c36cc42", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -15,7 +15,7 @@\n -         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n +         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n +         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n-          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n+          nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n -         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n -         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n +         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6"}, {"sha": "3f9ba4ad4f0ac3eaa2eb0f0886b5e0cacb5d7fd8", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -20,7 +20,7 @@\n       bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:12: 16:13\n           StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:13: 16:14\n-          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:17:5: 17:10\n           nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n       }"}, {"sha": "67ce87e842d043dde23cac2991796f23015315d4", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -7,14 +7,10 @@\n       let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n--         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n--         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n           nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n       }"}, {"sha": "963881d7ae062d906d765841adab700bdfca58a2", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -8,23 +8,19 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n           StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n--         _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-+         _1 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n--         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n--         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n-+         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n+          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n           nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n       }"}, {"sha": "8e44d68d9348e47d59e06ed8439f96e8ad1a059a", "filename": "src/test/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -8,16 +8,13 @@\n       let _5: ();                          // in scope 0 at $DIR/cycle.rs:14:5: 14:12\n       let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:14:10: 14:11\n       scope 1 {\n--         debug x => _1;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n-+         debug x => _4;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n+          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14\n           let _2: i32;                     // in scope 1 at $DIR/cycle.rs:10:9: 10:10\n           scope 2 {\n--             debug y => _2;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n-+             debug y => _4;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n+              debug y => _2;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10\n               let _3: i32;                 // in scope 2 at $DIR/cycle.rs:11:9: 11:10\n               scope 3 {\n--                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n-+                 debug z => _4;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n+                  debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n                   scope 4 (inlined std::mem::drop::<i32>) { // at $DIR/cycle.rs:14:5: 14:12\n                       debug _x => _6;      // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n                   }\n@@ -26,44 +23,30 @@\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:9:9: 9:14\n--         _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n-+         nop;                             // scope 0 at $DIR/cycle.rs:9:9: 9:14\n-+         _4 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:9:9: 9:14\n+          _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:9:17: 9:20\n                                            // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:10:9: 10:10\n--         _2 = _1;                         // scope 1 at $DIR/cycle.rs:10:13: 10:14\n--         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:11:9: 11:10\n--         _3 = _2;                         // scope 2 at $DIR/cycle.rs:11:13: 11:14\n--         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n--         _4 = _3;                         // scope 3 at $DIR/cycle.rs:12:9: 12:10\n--         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:12:5: 12:10\n--         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-+         nop;                             // scope 1 at $DIR/cycle.rs:10:9: 10:10\n-+         nop;                             // scope 1 at $DIR/cycle.rs:10:13: 10:14\n-+         nop;                             // scope 2 at $DIR/cycle.rs:11:9: 11:10\n-+         nop;                             // scope 2 at $DIR/cycle.rs:11:13: 11:14\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:5: 12:10\n-+         nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+          StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:10:9: 10:10\n+          nop;                             // scope 1 at $DIR/cycle.rs:10:13: 10:14\n+          StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:11:9: 11:10\n+          nop;                             // scope 2 at $DIR/cycle.rs:11:13: 11:14\n+          StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+          nop;                             // scope 3 at $DIR/cycle.rs:12:9: 12:10\n+          nop;                             // scope 3 at $DIR/cycle.rs:12:5: 12:10\n+          StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:12:9: 12:10\n           StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:14:5: 14:12\n           StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:14:10: 14:11\n--         _6 = _1;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n-+         _6 = _4;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11\n+          nop;                             // scope 3 at $DIR/cycle.rs:14:10: 14:11\n           StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:14:11: 14:12\n           StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:14:12: 14:13\n--         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:15:1: 15:2\n--         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:15:1: 15:2\n--         StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:15:1: 15:2\n-+         nop;                             // scope 2 at $DIR/cycle.rs:15:1: 15:2\n-+         nop;                             // scope 1 at $DIR/cycle.rs:15:1: 15:2\n-+         nop;                             // scope 0 at $DIR/cycle.rs:15:1: 15:2\n+          StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:15:1: 15:2\n+          StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:15:1: 15:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:15:1: 15:2\n           return;                          // scope 0 at $DIR/cycle.rs:15:2: 15:2\n       }\n   }"}, {"sha": "582a1738cbf96b69e2f4d3fcc10dbf6dc620701a", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -17,30 +17,24 @@\n       }\n   \n       bb0: {\n--         StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n--         StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n--         _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n-+         nop;                             // scope 0 at $DIR/union.rs:13:9: 13:11\n-+         nop;                             // scope 0 at $DIR/union.rs:13:23: 13:28\n-+         (_1.0: u32) = val() -> bb1;      // scope 0 at $DIR/union.rs:13:23: 13:28\n+          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n+          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n+          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          Deinit(_1);                      // scope 0 at $DIR/union.rs:13:14: 13:30\n--         (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n--         StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n-+         nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n-+         nop;                             // scope 0 at $DIR/union.rs:13:29: 13:30\n+          nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n+          nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n+          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n           StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n           StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n-          _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n+          nop;                             // scope 2 at $DIR/union.rs:15:19: 15:24\n           StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n           StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n--         StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n-+         nop;                             // scope 0 at $DIR/union.rs:16:1: 16:2\n+          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n           return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n       }\n   }"}, {"sha": "8b0a73ec4ba61fd16a3dfced5874fbf4adf36056", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 45, "deletions": 54, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -6,33 +6,32 @@\n       let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n       let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _5: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n-      let mut _6: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _15: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _21: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _14: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _14;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -53,58 +52,50 @@\n           StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n-          StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _8 = _21;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (_6.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = (_6.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (*_9);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = Eq(move _13, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Not(move _12);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _11) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _17;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _19 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _19;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _16, move _18, move _20); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n@@ -114,10 +105,10 @@\n       }\n   \n       bb2: {\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2"}, {"sha": "8b0a73ec4ba61fd16a3dfced5874fbf4adf36056", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 45, "deletions": 54, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -6,33 +6,32 @@\n       let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n       let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n       let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n-      let mut _5: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n-      let mut _6: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _13: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _15: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _18: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _10: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _21: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n-                  debug left_val => _9;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _10;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _14: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug kind => _14;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   }\n               }\n           }\n@@ -53,58 +52,50 @@\n           StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:3:20: 3:21\n           StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n           StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n-          StorageLive(_5);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          _5 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n-          Deinit(_4);                      // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          ((_4 as Some).0: i32) = move _5; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          discriminant(_4) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n-          StorageDead(_5);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _8 = _21;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_6);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (_6.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = (_6.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (*_9);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = Eq(move _13, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Not(move _12);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _11) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_14);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_14) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _17;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _19 = _10;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _19;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_20);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_20);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_20) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _16, move _18, move _20); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n@@ -114,10 +105,10 @@\n       }\n   \n       bb2: {\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n           StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2"}, {"sha": "40e7b74453a7c01ba220bcaa396be59f3040226b", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -32,7 +32,6 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n         _2 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n         StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        _5 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL"}, {"sha": "887c7b01f432752543e80dc6a223a7306fc6018a", "filename": "src/test/mir-opt/lower_array_len.array_bound.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -25,10 +25,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n--         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:7:20: 7:21\n           _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27\n -         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:7:16: 7:27"}, {"sha": "51d5f1acdab839683cb3b653d26bf1e94ec9c102", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -31,10 +31,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n--         _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:18:20: 18:21\n           _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27\n -         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:18:16: 18:27"}, {"sha": "3c26cf32a76c7391fa240c536a1c63c5637e9571", "filename": "src/test/mir-opt/lower_array_len.array_len.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -11,10 +11,7 @@\n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n--         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n--         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n--         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8\n           _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14\n -         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14"}, {"sha": "7a94217fa8b096fdef8e800c67fb1f484d1764da", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -11,10 +11,7 @@\n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n--         _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n--         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n--         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:38:7: 38:8\n           _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14\n -         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:38:5: 38:14"}, {"sha": "39100316597e31117c959fdd95f1b6e7c319c1d8", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -8,21 +8,20 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n     let _4: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:16:16: 16:17\n     let mut _5: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:16:44: 16:45\n     let _6: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n-    let mut _7: usize;                   // in scope 0 at $DIR/separate_const_switch.rs:17:42: 17:43\n-    let _8: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n-    let mut _9: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:20:42: 20:43\n-    let _10: usize;                      // in scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n+    let mut _8: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:20:42: 20:43\n+    let _9: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n     scope 1 {\n         debug v => _4;                   // in scope 1 at $DIR/separate_const_switch.rs:16:16: 16:17\n     }\n     scope 2 {\n         debug r => _6;                   // in scope 2 at $DIR/separate_const_switch.rs:17:17: 17:18\n     }\n     scope 3 {\n-        debug v => _8;                   // in scope 3 at $DIR/separate_const_switch.rs:20:31: 20:32\n+        debug v => _7;                   // in scope 3 at $DIR/separate_const_switch.rs:20:31: 20:32\n     }\n     scope 4 {\n-        debug r => _10;                  // in scope 4 at $DIR/separate_const_switch.rs:21:28: 21:29\n+        debug r => _9;                   // in scope 4 at $DIR/separate_const_switch.rs:21:28: 21:29\n     }\n \n     bb0: {\n@@ -33,19 +32,11 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n \n     bb1: {\n         StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n-        _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:17:17: 17:18\n-        StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n-        _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:17:42: 17:43\n-        Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n-        ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n-        discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n-        StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n         StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:43: 17:44\n-        StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n-        _10 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n+        StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n         Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n         discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n-        StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n+        StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n     }\n \n@@ -59,15 +50,15 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n         StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:16:45: 16:46\n-        StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n-        _8 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n-        StorageLive(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n-        _9 = _8;                         // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n+        _7 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:20:31: 20:32\n+        StorageLive(_8);                 // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n+        _8 = _7;                         // scope 3 at $DIR/separate_const_switch.rs:20:42: 20:43\n         Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n-        ((_0 as Some).0: i32) = move _9; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n+        ((_0 as Some).0: i32) = move _8; // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n-        StorageDead(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44\n-        StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n+        StorageDead(_8);                 // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44\n+        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n     }\n "}, {"sha": "5862cf2eb29057ebf3472903f45ea094bc1e145d", "filename": "src/test/mir-opt/simplify-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C overflow-checks=off\n+// unit-test: SimplifyLocals\n \n #![feature(box_syntax)]\n #![feature(thread_local)]"}, {"sha": "dd2d79549612355f1f565b1c8f87295461ec3f2f", "filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -20,11 +20,12 @@\n -         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         _4 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n--         _3 = _4;                         // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         _3 = &(*_4);                     // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n -         StorageDead(_3);                 // scope 1 at $DIR/simplify-locals.rs:16:25: 16:26\n -         StorageDead(_4);                 // scope 1 at $DIR/simplify-locals.rs:16:26: 16:27\n -         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals.rs:16:26: 16:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:13:8: 17:2\n           StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:17:1: 17:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:17:2: 17:2\n       }"}, {"sha": "3be73ecfcb812427fa0dffa600dee07274d558d1", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -12,6 +12,7 @@\n -         Deinit(_1);                      // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         discriminant(_1) = 0;            // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:17: 22:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:20:9: 23:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:23:2: 23:2\n       }\n   }"}, {"sha": "641f64fd9b7cd22b35fdaa211ad6f08890be6daf", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -17,17 +17,12 @@\n -         discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n -         Deinit(_2);                      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n--         (_2.1: E) = const E::A;          // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals.rs:28:6: 28:16\n--                                          // + literal: Const { ty: E, val: Value(Scalar(0x00)) }\n+-         (_2.1: E) = move _3;             // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:28:15: 28:16\n--         (_2.1: E) = const E::B;          // scope 0 at $DIR/simplify-locals.rs:28:5: 28:26\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals.rs:28:5: 28:26\n--                                          // + literal: Const { ty: E, val: Value(Scalar(0x01)) }\n+-         (_2.1: E) = move _1;             // scope 0 at $DIR/simplify-locals.rs:28:5: 28:26\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:28:25: 28:26\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:28:26: 28:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:26:9: 29:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:29:2: 29:2\n       }\n   }"}, {"sha": "85cf398d316939650d99bb46100dad1cbc0ae696", "filename": "src/test/mir-opt/simplify_locals.r.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -23,6 +23,7 @@\n -         StorageLive(_3);                 // scope 2 at $DIR/simplify-locals.rs:36:13: 36:19\n -         _3 = &mut _1;                    // scope 2 at $DIR/simplify-locals.rs:36:13: 36:19\n -         StorageDead(_3);                 // scope 2 at $DIR/simplify-locals.rs:36:19: 36:20\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:32:8: 37:2\n           StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:37:1: 37:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:37:2: 37:2\n       }"}, {"sha": "991a0721cca302bfaefebf1325988c555f1e2a50", "filename": "src/test/mir-opt/simplify_locals.t1.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -15,6 +15,7 @@\n -         _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:44:14: 44:15\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:44:17: 44:18\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:44:17: 44:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:42:9: 45:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:45:2: 45:2\n       }\n   }"}, {"sha": "6c9ed96e78ffe401f2668f3aec5f04d488a1112c", "filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -15,6 +15,7 @@\n -         _1 = &mut (*_2);                 // scope 1 at $DIR/simplify-locals.rs:50:14: 50:20\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:48:9: 51:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:51:2: 51:2\n       }\n   }"}, {"sha": "2d5fb352f8be3b013602ed76b175ff5e11a1d8a9", "filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -19,6 +19,7 @@\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:54:9: 57:2\n           return;                          // scope 0 at $DIR/simplify-locals.rs:57:2: 57:2\n       }\n   }"}, {"sha": "1bba1e9e88a4ed1dc9ff90073304efbe7afa3aed", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -47,10 +47,6 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         Deinit(_11);                     // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         _10 = const 40_u8;               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n--         _9 = const 42_u8;                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageDead(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:33: 16:34\n -         _8 = use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23"}, {"sha": "fc1726f98cb1de6ad495794a5725c6dfda364df9", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -15,8 +15,6 @@\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n       }\n@@ -35,7 +33,6 @@\n       }\n   \n       bb3: {\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }"}, {"sha": "fc1726f98cb1de6ad495794a5725c6dfda364df9", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -15,8 +15,6 @@\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:5: 4:12\n       }\n@@ -35,7 +33,6 @@\n       }\n   \n       bb3: {\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }"}, {"sha": "15de0839c22fa8bb55777af9fe59e4e83bde0dd1", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -19,15 +19,12 @@\n +         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n       }\n       scope 2 {\n--         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n-+         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n--             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n@@ -83,30 +80,20 @@\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n--         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n--         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n-+         ((_0 as Err).0: i32) = ((_3 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n-+         nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n-+         nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          nop;                             // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          nop;                             // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+          nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n+          nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n           Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n           discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n--         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n+          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n-+         nop;                             // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2"}, {"sha": "b9252df6f3e2e552eef24f3f7c5ba9c0ca3d528c", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -5,16 +5,19 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:20:41: 20:57\n     let mut _2: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n     let mut _3: isize;                   // in scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+    let _4: i32;                         // in scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:37: 22:50\n+    let mut _6: i32;                     // in scope 0 at $DIR/simplify_try.rs:22:48: 22:49\n     scope 1 {\n         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:21:9: 21:10\n     }\n     scope 2 {\n-        debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n+        debug e => _4;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n         scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+            debug t => _6;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n+            debug e => _5;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n@@ -38,9 +41,14 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     }\n \n     bb2: {\n-        ((_0 as Err).0: i32) = ((_2 as Err).0: i32); // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:22:13: 22:14\n+        StorageLive(_5);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n+        StorageLive(_6);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n+        StorageDead(_6);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n         Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n+        StorageDead(_5);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n         return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2\n     }\n }"}, {"sha": "9036c57556ddaf109c7c418f3216cba6d2fa6f90", "filename": "src/test/mir-opt/tls-access.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Ftls-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Ftls-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls-access.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -11,3 +11,4 @@ fn main() {\n }\n \n // EMIT_MIR tls_access.main.SimplifyCfg-final.after.mir\n+// compile-flags: -Zmir-opt-level=0"}, {"sha": "de19a226e8f75709d2807b91d7985a6b4369713d", "filename": "src/test/mir-opt/tls_access.main.SimplifyCfg-final.after.mir", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftls_access.main.SimplifyCfg-final.after.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -14,8 +14,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 1 at $DIR/tls-access.rs:8:13: 8:14\n         StorageLive(_2);                 // scope 1 at $DIR/tls-access.rs:8:18: 8:21\n-        _2 = &/*tls*/ mut FOO;           // scope 1 at $DIR/tls-access.rs:8:18: 8:21\n-        _1 = &(*_2);                     // scope 1 at $DIR/tls-access.rs:8:17: 8:21\n         StorageLive(_3);                 // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n         _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls-access.rs:9:9: 9:12\n         (*_3) = const 42_u8;             // scope 2 at $DIR/tls-access.rs:9:9: 9:17"}, {"sha": "aa6a4cac350b53468a52551964f4a604408c39a4", "filename": "src/test/mir-opt/uninhabited_enum.process_never.SimplifyLocals.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_never.SimplifyLocals.after.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -12,7 +12,6 @@ fn process_never(_1: *const !) -> () {\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:8:8: 8:14\n-        _2 = &(*_1);                     // scope 2 at $DIR/uninhabited-enum.rs:8:26: 8:33\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:9:1: 9:2\n         unreachable;                     // scope 0 at $DIR/uninhabited-enum.rs:7:39: 9:2\n     }"}, {"sha": "9fd4b1b54e73d5ab94feea038e8bf8774709af97", "filename": "src/test/mir-opt/uninhabited_enum.process_void.SimplifyLocals.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals.after.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -12,7 +12,6 @@ fn process_void(_1: *const Void) -> () {\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n-        _2 = &(*_1);                     // scope 2 at $DIR/uninhabited-enum.rs:14:26: 14:33\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n         return;                          // scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n     }"}, {"sha": "670f61cd5ce3aff53a6a51ef1364b1e06bb94509", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -1,6 +1,6 @@\n // Test that we don't ICE when trying to dump MIR for unusual item types and\n // that we don't create filenames containing `<` and `>`\n-\n+// compile-flags: -Zmir-opt-level=0\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n struct A;"}, {"sha": "3c94fbddc4421622cbbefab82507734cba5b0b1f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -9,7 +9,6 @@ fn change_loop_body() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n-        _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n     }"}, {"sha": "3c94fbddc4421622cbbefab82507734cba5b0b1f", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8d6d8f0426f517051926a86f41f831eff30b23a7/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir?ref=8d6d8f0426f517051926a86f41f831eff30b23a7", "patch": "@@ -9,7 +9,6 @@ fn change_loop_body() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n-        _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n     }"}]}