{"sha": "750ab0370e4e52b6c22181e1187f463ffce0a230", "node_id": "C_kwDOAAsO6NoAKDc1MGFiMDM3MGU0ZTUyYjZjMjIxODFlMTE4N2Y0NjNmZmNlMGEyMzA", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-29T17:30:55Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-29T17:48:39Z"}, "message": "Add SyncUnsafeCell.", "tree": {"sha": "988debbb88ae5f1686e1ac7edc02e40675f9fbb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/988debbb88ae5f1686e1ac7edc02e40675f9fbb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750ab0370e4e52b6c22181e1187f463ffce0a230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750ab0370e4e52b6c22181e1187f463ffce0a230", "html_url": "https://github.com/rust-lang/rust/commit/750ab0370e4e52b6c22181e1187f463ffce0a230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750ab0370e4e52b6c22181e1187f463ffce0a230/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11909e3588319235e28e99294e17cca11db1d7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11909e3588319235e28e99294e17cca11db1d7e2", "html_url": "https://github.com/rust-lang/rust/commit/11909e3588319235e28e99294e17cca11db1d7e2"}], "stats": {"total": 113, "additions": 109, "deletions": 4}, "files": [{"sha": "8f283a7f43a062f12274ea9ee1d6c7033f3630af", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 100, "deletions": 3, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/750ab0370e4e52b6c22181e1187f463ffce0a230/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750ab0370e4e52b6c22181e1187f463ffce0a230/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=750ab0370e4e52b6c22181e1187f463ffce0a230", "patch": "@@ -1990,9 +1990,106 @@ impl<T> const From<T> for UnsafeCell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n+/// [`UnsafeCell`], but [`Sync`].\n+///\n+/// This is just an `UnsafeCell`, except it implements `Sync`\n+/// if `T` implements `Sync`.\n+///\n+/// `UnsafeCell` doesn't implement `Sync`, to prevent accidental mis-use.\n+/// You can use `SyncUnsafeCell` instead of `UnsafeCell` to allow it to be\n+/// shared between threads, if that's intentional.\n+/// Providing proper synchronization is still the task of the user,\n+/// making this type just as unsafe to use.\n+///\n+/// See [`UnsafeCell`] for details.\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[repr(transparent)]\n+pub struct SyncUnsafeCell<T: ?Sized> {\n+    value: UnsafeCell<T>,\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+unsafe impl<T: ?Sized + Sync> Sync for SyncUnsafeCell<T> {}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+impl<T> SyncUnsafeCell<T> {\n+    /// Constructs a new instance of `SyncUnsafeCell` which will wrap the specified value.\n+    #[inline]\n+    pub const fn new(value: T) -> Self {\n+        Self { value: UnsafeCell { value } }\n+    }\n+\n+    /// Unwraps the value.\n+    #[inline]\n+    pub const fn into_inner(self) -> T {\n+        self.value.into_inner()\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+impl<T: ?Sized> SyncUnsafeCell<T> {\n+    /// Gets a mutable pointer to the wrapped value.\n+    ///\n+    /// This can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`\n+    #[inline]\n+    pub const fn get(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows the `SyncUnsafeCell` mutably (at compile-time) which\n+    /// guarantees that we possess the only reference.\n+    #[inline]\n+    pub const fn get_mut(&mut self) -> &mut T {\n+        self.value.get_mut()\n+    }\n+\n+    /// Gets a mutable pointer to the wrapped value.\n+    ///\n+    /// See [`UnsafeCell::get`] for details.\n+    #[inline]\n+    pub const fn raw_get(this: *const Self) -> *mut T {\n+        // We can just cast the pointer from `SyncUnsafeCell<T>` to `T` because\n+        // of #[repr(transparent)] on both SyncUnsafeCell and UnsafeCell.\n+        // See UnsafeCell::raw_get.\n+        this as *const T as *mut T\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+impl<T: Default> Default for SyncUnsafeCell<T> {\n+    /// Creates an `SyncUnsafeCell`, with the `Default` value for T.\n+    fn default() -> SyncUnsafeCell<T> {\n+        SyncUnsafeCell::new(Default::default())\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for SyncUnsafeCell<T> {\n+    /// Creates a new `SyncUnsafeCell<T>` containing the given value.\n+    fn from(t: T) -> SyncUnsafeCell<T> {\n+        SyncUnsafeCell::new(t)\n+    }\n+}\n+\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+//#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n+\n #[allow(unused)]\n-fn assert_coerce_unsized(a: UnsafeCell<&i32>, b: Cell<&i32>, c: RefCell<&i32>) {\n+fn assert_coerce_unsized(\n+    a: UnsafeCell<&i32>,\n+    b: SyncUnsafeCell<&i32>,\n+    c: Cell<&i32>,\n+    d: RefCell<&i32>,\n+) {\n     let _: UnsafeCell<&dyn Send> = a;\n-    let _: Cell<&dyn Send> = b;\n-    let _: RefCell<&dyn Send> = c;\n+    let _: SyncUnsafeCell<&dyn Send> = b;\n+    let _: Cell<&dyn Send> = c;\n+    let _: RefCell<&dyn Send> = d;\n }"}, {"sha": "19a2140abe8b42b11fd26827f200db3229151d20", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/750ab0370e4e52b6c22181e1187f463ffce0a230/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750ab0370e4e52b6c22181e1187f463ffce0a230/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=750ab0370e4e52b6c22181e1187f463ffce0a230", "patch": "@@ -2,7 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n+use crate::cell::{Cell, Ref, RefCell, RefMut, SyncUnsafeCell, UnsafeCell};\n use crate::char::EscapeDebugExtArgs;\n use crate::marker::PhantomData;\n use crate::mem;\n@@ -2396,6 +2396,13 @@ impl<T: ?Sized> Debug for UnsafeCell<T> {\n     }\n }\n \n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"none\")]\n+impl<T: ?Sized> Debug for SyncUnsafeCell<T> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+        f.debug_struct(\"SyncUnsafeCell\").finish_non_exhaustive()\n+    }\n+}\n+\n // If you expected tests to be here, look instead at the core/tests/fmt.rs file,\n // it's a lot easier than creating all of the rt::Piece structures here.\n // There are also tests in the alloc crate, for those that need allocations."}, {"sha": "d18df506d2b48c36fe0ac92dac972bd1b2e83f1b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/750ab0370e4e52b6c22181e1187f463ffce0a230/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750ab0370e4e52b6c22181e1187f463ffce0a230/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=750ab0370e4e52b6c22181e1187f463ffce0a230", "patch": "@@ -139,6 +139,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n+#![feature(const_unsafecell_get_mut)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]"}]}