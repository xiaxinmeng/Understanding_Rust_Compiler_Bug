{"sha": "9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "node_id": "C_kwDOAAsO6NoAKDllNGZlZmY0NmE5MmVlZGM2MWVlMmQyM2E4YjdiYmE3NTcwYTYxNmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-05T16:24:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-05T16:24:32Z"}, "message": "Rollup merge of #99835 - TaKO8Ki:suggest-adding-or-removing-ref-for-binding-pattern, r=estebank\n\nSuggest adding/removing `ref` for binding patterns\n\nThis fixes what a fixme comment says.\n\nr? `@estebank`", "tree": {"sha": "a936cd02425bdf701465d08dc55498f5caa50ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a936cd02425bdf701465d08dc55498f5caa50ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7URACRBK7hj4Ov3rIwAAQsoIAGra8nGgEX2BoTDmID/cUfew\nNPtzsn/+Y6YNCzS3lv3RK+Var0dDWeCguQTM4N1RNn4ait6ulA/G+Q/Yfrk9/Hm9\nzWxL+6TLAhvhlP4CsZ2HdNauCtIfXQ0NUBpiuXWEICDHrKC+V0fl9Qb+TnM3g8V5\nlXrewrcjMlUsriqXCHNEGF2ZQyo0QRQtvujEw0GKOVBx5exOEZ5Zw2Ai0TMPctNo\nP0uTEgYMHWPCq8L7l3ylnJj+0J0E00NA3cOJFyjSTZSj2SMJdm/lwRMmtuMS9JRH\nhNDsHoHkC12MvrfRj50+4kYQn4VQK3Za6+b3UVQGtrlzfaJsPCO79Ji2f/aDwvA=\n=svS8\n-----END PGP SIGNATURE-----\n", "payload": "tree a936cd02425bdf701465d08dc55498f5caa50ad5\nparent d77da9da84fc89908ad01578c33c2dca8f597ffe\nparent c0a22a0209e82975614e51edc7927f4caedc886c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659716672 +0530\ncommitter GitHub <noreply@github.com> 1659716672 +0530\n\nRollup merge of #99835 - TaKO8Ki:suggest-adding-or-removing-ref-for-binding-pattern, r=estebank\n\nSuggest adding/removing `ref` for binding patterns\n\nThis fixes what a fixme comment says.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "html_url": "https://github.com/rust-lang/rust/commit/9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77da9da84fc89908ad01578c33c2dca8f597ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77da9da84fc89908ad01578c33c2dca8f597ffe", "html_url": "https://github.com/rust-lang/rust/commit/d77da9da84fc89908ad01578c33c2dca8f597ffe"}, {"sha": "c0a22a0209e82975614e51edc7927f4caedc886c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a22a0209e82975614e51edc7927f4caedc886c", "html_url": "https://github.com/rust-lang/rust/commit/c0a22a0209e82975614e51edc7927f4caedc886c"}], "stats": {"total": 166, "additions": 160, "deletions": 6}, "files": [{"sha": "a13c7152582077defba80f87f24df6a44adc8c4e", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If there are multiple arms, make sure they all agree on\n         // what the type of the binding `x` ought to be.\n         if var_id != pat.hir_id {\n-            self.check_binding_alt_eq_ty(pat.span, var_id, local_ty, ti);\n+            self.check_binding_alt_eq_ty(ba, pat.span, var_id, local_ty, ti);\n         }\n \n         if let Some(p) = sub {\n@@ -610,7 +610,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         local_ty\n     }\n \n-    fn check_binding_alt_eq_ty(&self, span: Span, var_id: HirId, ty: Ty<'tcx>, ti: TopInfo<'tcx>) {\n+    fn check_binding_alt_eq_ty(\n+        &self,\n+        ba: hir::BindingAnnotation,\n+        span: Span,\n+        var_id: HirId,\n+        ty: Ty<'tcx>,\n+        ti: TopInfo<'tcx>,\n+    ) {\n         let var_ty = self.local_ty(span, var_id).decl_ty;\n         if let Some(mut err) = self.demand_eqtype_pat_diag(span, var_ty, ty, ti) {\n             let hir = self.tcx.hir();\n@@ -628,12 +635,50 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n             let pre = if in_match { \"in the same arm, \" } else { \"\" };\n             err.note(&format!(\"{}a binding must have the same type in all alternatives\", pre));\n-            // FIXME: check if `var_ty` and `ty` can be made the same type by adding or removing\n-            // `ref` or `&` to the pattern.\n+            self.suggest_adding_missing_ref_or_removing_ref(\n+                &mut err,\n+                span,\n+                var_ty,\n+                self.resolve_vars_with_obligations(ty),\n+                ba,\n+            );\n             err.emit();\n         }\n     }\n \n+    fn suggest_adding_missing_ref_or_removing_ref(\n+        &self,\n+        err: &mut Diagnostic,\n+        span: Span,\n+        expected: Ty<'tcx>,\n+        actual: Ty<'tcx>,\n+        ba: hir::BindingAnnotation,\n+    ) {\n+        match (expected.kind(), actual.kind(), ba) {\n+            (ty::Ref(_, inner_ty, _), _, hir::BindingAnnotation::Unannotated)\n+                if self.can_eq(self.param_env, *inner_ty, actual).is_ok() =>\n+            {\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    \"consider adding `ref`\",\n+                    \"ref \",\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            (_, ty::Ref(_, inner_ty, _), hir::BindingAnnotation::Ref)\n+                if self.can_eq(self.param_env, expected, *inner_ty).is_ok() =>\n+            {\n+                err.span_suggestion_verbose(\n+                    span.with_hi(span.lo() + BytePos(4)),\n+                    \"consider removing `ref`\",\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            _ => (),\n+        }\n+    }\n+\n     // Precondition: pat is a Ref(_) pattern\n     fn borrow_pat_suggestion(&self, err: &mut Diagnostic, pat: &Pat<'_>) {\n         let tcx = self.tcx;"}, {"sha": "7fec6ecd72573727ba2829869da3d4f6192d44ca", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -17,6 +17,10 @@ LL |         (0, ref y) | (y, 0) => {}\n    |             first introduced with type `&{integer}` here\n    |\n    = note: in the same arm, a binding must have the same type in all alternatives\n+help: consider adding `ref`\n+   |\n+LL |         (0, ref y) | (ref y, 0) => {}\n+   |                       +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "56f93cfbfdcbec4789a0b8317009370fcd49ce13", "filename": "src/test/ui/mismatched_types/suggest-adding-or-removing-ref-for-binding-pattern.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.fixed?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+fn main() {\n+    enum Blah {\n+        A(isize, isize, usize),\n+        B(isize, usize),\n+    }\n+\n+    match Blah::A(1, 1, 2) {\n+        Blah::A(_, x, ref y) | Blah::B(x, ref y) => {}\n+        //~^ ERROR mismatched types\n+        //~| ERROR variable `y` is bound inconsistently across alternatives separated by `|`\n+    }\n+\n+    match Blah::A(1, 1, 2) {\n+        Blah::A(_, x, y) | Blah::B(x, y) => {}\n+        //~^ ERROR mismatched types\n+        //~| variable `y` is bound inconsistently across alternatives separated by `|`\n+    }\n+}"}, {"sha": "0c33f99a42e8bba011e25b48090d0eb82313f8bd", "filename": "src/test/ui/mismatched_types/suggest-adding-or-removing-ref-for-binding-pattern.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.rs?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![allow(dead_code, unused_variables)]\n+\n+fn main() {\n+    enum Blah {\n+        A(isize, isize, usize),\n+        B(isize, usize),\n+    }\n+\n+    match Blah::A(1, 1, 2) {\n+        Blah::A(_, x, ref y) | Blah::B(x, y) => {}\n+        //~^ ERROR mismatched types\n+        //~| ERROR variable `y` is bound inconsistently across alternatives separated by `|`\n+    }\n+\n+    match Blah::A(1, 1, 2) {\n+        Blah::A(_, x, y) | Blah::B(x, ref y) => {}\n+        //~^ ERROR mismatched types\n+        //~| variable `y` is bound inconsistently across alternatives separated by `|`\n+    }\n+}"}, {"sha": "e8357f9a37f8ce915bd7531eb7fa9d6bb6997a17", "filename": "src/test/ui/mismatched_types/suggest-adding-or-removing-ref-for-binding-pattern.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsuggest-adding-or-removing-ref-for-binding-pattern.stderr?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -0,0 +1,49 @@\n+error[E0409]: variable `y` is bound inconsistently across alternatives separated by `|`\n+  --> $DIR/suggest-adding-or-removing-ref-for-binding-pattern.rs:11:43\n+   |\n+LL |         Blah::A(_, x, ref y) | Blah::B(x, y) => {}\n+   |                           - first binding ^ bound in different ways\n+\n+error[E0409]: variable `y` is bound inconsistently across alternatives separated by `|`\n+  --> $DIR/suggest-adding-or-removing-ref-for-binding-pattern.rs:17:43\n+   |\n+LL |         Blah::A(_, x, y) | Blah::B(x, ref y) => {}\n+   |                       - first binding     ^ bound in different ways\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-adding-or-removing-ref-for-binding-pattern.rs:11:43\n+   |\n+LL |     match Blah::A(1, 1, 2) {\n+   |           ---------------- this expression has type `Blah`\n+LL |         Blah::A(_, x, ref y) | Blah::B(x, y) => {}\n+   |                       -----               ^ expected `&usize`, found `usize`\n+   |                       |\n+   |                       first introduced with type `&usize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n+help: consider adding `ref`\n+   |\n+LL |         Blah::A(_, x, ref y) | Blah::B(x, ref y) => {}\n+   |                                           +++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-adding-or-removing-ref-for-binding-pattern.rs:17:39\n+   |\n+LL |     match Blah::A(1, 1, 2) {\n+   |           ---------------- this expression has type `Blah`\n+LL |         Blah::A(_, x, y) | Blah::B(x, ref y) => {}\n+   |                       -               ^^^^^ expected `usize`, found `&usize`\n+   |                       |\n+   |                       first introduced with type `usize` here\n+   |\n+   = note: in the same arm, a binding must have the same type in all alternatives\n+help: consider removing `ref`\n+   |\n+LL -         Blah::A(_, x, y) | Blah::B(x, ref y) => {}\n+LL +         Blah::A(_, x, y) | Blah::B(x, y) => {}\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0308, E0409.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "c805c9eb125c882638b94eb3c7d7b20ee7072ff0", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -31,6 +31,10 @@ LL |         Opts::A(ref i) | Opts::B(i) => {}\n    |                 first introduced with type `&isize` here\n    |\n    = note: in the same arm, a binding must have the same type in all alternatives\n+help: consider adding `ref`\n+   |\n+LL |         Opts::A(ref i) | Opts::B(ref i) => {}\n+   |                                  +++\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:18:34\n@@ -43,6 +47,10 @@ LL |         Opts::A(ref i) | Opts::B(i) => {}\n    |                 first introduced with type `&isize` here\n    |\n    = note: in the same arm, a binding must have the same type in all alternatives\n+help: consider adding `ref`\n+   |\n+LL |         Opts::A(ref i) | Opts::B(ref i) => {}\n+   |                                  +++\n \n error[E0308]: mismatched types\n   --> $DIR/resolve-inconsistent-binding-mode.rs:27:38"}, {"sha": "9a40b20346c95e78539e07793260769e3a9f6f48", "filename": "src/test/ui/resolve/resolve-inconsistent-names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -23,6 +23,7 @@ fn main() {\n         //~| ERROR mismatched types\n         //~| ERROR variable `c` is not bound in all patterns\n         //~| HELP if you meant to match on unit variant `E::A`, use the full path in the pattern\n+        //~| HELP consider removing `ref`\n     }\n \n     let z = (10, 20);"}, {"sha": "773c9f6cd1114800768a1c43b55f97210b5ff78b", "filename": "src/test/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4feff46a92eedc61ee2d23a8b7bba7570a616e/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=9e4feff46a92eedc61ee2d23a8b7bba7570a616e", "patch": "@@ -55,7 +55,7 @@ LL |         (A, B) | (ref B, c) | (c, A) => ()\n    |             first binding\n \n error[E0408]: variable `CONST1` is not bound in all patterns\n-  --> $DIR/resolve-inconsistent-names.rs:30:23\n+  --> $DIR/resolve-inconsistent-names.rs:31:23\n    |\n LL |         (CONST1, _) | (_, Const2) => ()\n    |          ------       ^^^^^^^^^^^ pattern doesn't bind `CONST1`\n@@ -69,7 +69,7 @@ LL |     const CONST1: usize = 10;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible\n \n error[E0408]: variable `Const2` is not bound in all patterns\n-  --> $DIR/resolve-inconsistent-names.rs:30:9\n+  --> $DIR/resolve-inconsistent-names.rs:31:9\n    |\n LL |         (CONST1, _) | (_, Const2) => ()\n    |         ^^^^^^^^^^^       ------ variable not in all patterns\n@@ -92,6 +92,11 @@ LL |         (A, B) | (ref B, c) | (c, A) => ()\n    |             first introduced with type `E` here\n    |\n    = note: in the same arm, a binding must have the same type in all alternatives\n+help: consider removing `ref`\n+   |\n+LL -         (A, B) | (ref B, c) | (c, A) => ()\n+LL +         (A, B) | (B, c) | (c, A) => ()\n+   |\n \n error: aborting due to 9 previous errors\n "}]}