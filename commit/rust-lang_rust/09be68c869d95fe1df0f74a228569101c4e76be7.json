{"sha": "09be68c869d95fe1df0f74a228569101c4e76be7", "node_id": "C_kwDOAAsO6NoAKDA5YmU2OGM4NjlkOTVmZTFkZjBmNzRhMjI4NTY5MTAxYzRlNzZiZTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-25T14:16:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-25T14:16:13Z"}, "message": "Auto merge of #95280 - InfRandomness:infrandomness/Dtorck_clarification, r=oli-obk\n\nSwap DtorckConstraint to DropckConstraint\n\nThis change was made as per suspicion that this struct was never renamed after consistent use of DropCk.\n\nThis also clarifies the meaning behind the name of this structure.\n\nFixes https://github.com/rust-lang/rust/issues/94310", "tree": {"sha": "733bb3bf64b321e3b11e3c6b86dbdbdab69facaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/733bb3bf64b321e3b11e3c6b86dbdbdab69facaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09be68c869d95fe1df0f74a228569101c4e76be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09be68c869d95fe1df0f74a228569101c4e76be7", "html_url": "https://github.com/rust-lang/rust/commit/09be68c869d95fe1df0f74a228569101c4e76be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09be68c869d95fe1df0f74a228569101c4e76be7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903427b2e807cb1292388940b3f44f3b061cfebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/903427b2e807cb1292388940b3f44f3b061cfebf", "html_url": "https://github.com/rust-lang/rust/commit/903427b2e807cb1292388940b3f44f3b061cfebf"}, {"sha": "645620b3b3c77e47fec44431e167555fe1339056", "url": "https://api.github.com/repos/rust-lang/rust/commits/645620b3b3c77e47fec44431e167555fe1339056", "html_url": "https://github.com/rust-lang/rust/commit/645620b3b3c77e47fec44431e167555fe1339056"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "170dd113f6dfe37f10a83cf46c145302ee2edc31", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=09be68c869d95fe1df0f74a228569101c4e76be7", "patch": "@@ -52,7 +52,7 @@ macro_rules! arena_types {\n                         Vec<rustc_middle::traits::query::OutlivesBound<'tcx>>\n                     >\n                 >,\n-            [] dtorck_constraint: rustc_middle::traits::query::DtorckConstraint<'tcx>,\n+            [] dtorck_constraint: rustc_middle::traits::query::DropckConstraint<'tcx>,\n             [] candidate_step: rustc_middle::traits::query::CandidateStep<'tcx>,\n             [] autoderef_bad_ty: rustc_middle::traits::query::MethodAutoderefBadTy<'tcx>,\n             [] type_op_subtype:"}, {"sha": "95260e9e9173f3940e4fd8177ef28b39aad3bf97", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=09be68c869d95fe1df0f74a228569101c4e76be7", "patch": "@@ -549,7 +549,7 @@ rustc_queries! {\n \n     query adt_dtorck_constraint(\n         key: DefId\n-    ) -> Result<&'tcx DtorckConstraint<'tcx>, NoSolution> {\n+    ) -> Result<&'tcx DropckConstraint<'tcx>, NoSolution> {\n         desc { |tcx| \"computing drop-check constraints for `{}`\", tcx.def_path_str(key) }\n     }\n "}, {"sha": "d43492c903cfe48e893cecf8360848a2ebc413c5", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=09be68c869d95fe1df0f74a228569101c4e76be7", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> DropckOutlivesResult<'tcx> {\n /// A set of constraints that need to be satisfied in order for\n /// a type to be valid for destruction.\n #[derive(Clone, Debug, HashStable)]\n-pub struct DtorckConstraint<'tcx> {\n+pub struct DropckConstraint<'tcx> {\n     /// Types that are required to be alive in order for this\n     /// type to be valid for destruction.\n     pub outlives: Vec<ty::subst::GenericArg<'tcx>>,\n@@ -157,17 +157,17 @@ pub struct DtorckConstraint<'tcx> {\n     pub overflows: Vec<Ty<'tcx>>,\n }\n \n-impl<'tcx> DtorckConstraint<'tcx> {\n-    pub fn empty() -> DtorckConstraint<'tcx> {\n-        DtorckConstraint { outlives: vec![], dtorck_types: vec![], overflows: vec![] }\n+impl<'tcx> DropckConstraint<'tcx> {\n+    pub fn empty() -> DropckConstraint<'tcx> {\n+        DropckConstraint { outlives: vec![], dtorck_types: vec![], overflows: vec![] }\n     }\n }\n \n-impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n-    fn from_iter<I: IntoIterator<Item = DtorckConstraint<'tcx>>>(iter: I) -> Self {\n+impl<'tcx> FromIterator<DropckConstraint<'tcx>> for DropckConstraint<'tcx> {\n+    fn from_iter<I: IntoIterator<Item = DropckConstraint<'tcx>>>(iter: I) -> Self {\n         let mut result = Self::empty();\n \n-        for DtorckConstraint { outlives, dtorck_types, overflows } in iter {\n+        for DropckConstraint { outlives, dtorck_types, overflows } in iter {\n             result.outlives.extend(outlives);\n             result.dtorck_types.extend(dtorck_types);\n             result.overflows.extend(overflows);"}, {"sha": "9e48c569c253a593f1bb0dd5dd1bd3003eb87578", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=09be68c869d95fe1df0f74a228569101c4e76be7", "patch": "@@ -23,7 +23,7 @@ use crate::traits::query::{\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal, NoSolution,\n };\n use crate::traits::query::{\n-    DropckOutlivesResult, DtorckConstraint, MethodAutoderefStepsResult, NormalizationResult,\n+    DropckConstraint, DropckOutlivesResult, MethodAutoderefStepsResult, NormalizationResult,\n     OutlivesBound,\n };\n use crate::traits::specialization_graph;"}, {"sha": "8997a7895abea9eef3a1c76345116a2d8ed7b816", "filename": "compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=09be68c869d95fe1df0f74a228569101c4e76be7", "patch": "@@ -5,7 +5,7 @@ use crate::infer::InferOk;\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-pub use rustc_middle::traits::query::{DropckOutlivesResult, DtorckConstraint};\n+pub use rustc_middle::traits::query::{DropckConstraint, DropckOutlivesResult};\n \n pub trait AtExt<'tcx> {\n     fn dropck_outlives(&self, ty: Ty<'tcx>) -> InferOk<'tcx, Vec<GenericArg<'tcx>>>;"}, {"sha": "e4c22a354232b784704e1e1c1757469059d7c305", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09be68c869d95fe1df0f74a228569101c4e76be7/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=09be68c869d95fe1df0f74a228569101c4e76be7", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_trait_selection::traits::query::dropck_outlives::trivial_dropck_outlives;\n use rustc_trait_selection::traits::query::dropck_outlives::{\n-    DropckOutlivesResult, DtorckConstraint,\n+    DropckConstraint, DropckOutlivesResult,\n };\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, NoSolution};\n@@ -78,7 +78,7 @@ fn dropck_outlives<'tcx>(\n             let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n \n             let cause = ObligationCause::dummy();\n-            let mut constraints = DtorckConstraint::empty();\n+            let mut constraints = DropckConstraint::empty();\n             while let Some((ty, depth)) = ty_stack.pop() {\n                 debug!(\n                     \"{} kinds, {} overflows, {} ty_stack\",\n@@ -159,7 +159,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n     for_ty: Ty<'tcx>,\n     depth: usize,\n     ty: Ty<'tcx>,\n-    constraints: &mut DtorckConstraint<'tcx>,\n+    constraints: &mut DropckConstraint<'tcx>,\n ) -> Result<(), NoSolution> {\n     debug!(\"dtorck_constraint_for_ty({:?}, {:?}, {:?}, {:?})\", span, for_ty, depth, ty);\n \n@@ -267,7 +267,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n         }\n \n         ty::Adt(def, substs) => {\n-            let DtorckConstraint { dtorck_types, outlives, overflows } =\n+            let DropckConstraint { dtorck_types, outlives, overflows } =\n                 tcx.at(span).adt_dtorck_constraint(def.did())?;\n             // FIXME: we can try to recursively `dtorck_constraint_on_ty`\n             // there, but that needs some way to handle cycles.\n@@ -301,7 +301,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n crate fn adt_dtorck_constraint(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> Result<&DtorckConstraint<'_>, NoSolution> {\n+) -> Result<&DropckConstraint<'_>, NoSolution> {\n     let def = tcx.adt_def(def_id);\n     let span = tcx.def_span(def_id);\n     debug!(\"dtorck_constraint: {:?}\", def);\n@@ -311,7 +311,7 @@ crate fn adt_dtorck_constraint(\n         // `PhantomData`.\n         let substs = InternalSubsts::identity_for_item(tcx, def_id);\n         assert_eq!(substs.len(), 1);\n-        let result = DtorckConstraint {\n+        let result = DropckConstraint {\n             outlives: vec![],\n             dtorck_types: vec![substs.type_at(0)],\n             overflows: vec![],\n@@ -320,7 +320,7 @@ crate fn adt_dtorck_constraint(\n         return Ok(tcx.arena.alloc(result));\n     }\n \n-    let mut result = DtorckConstraint::empty();\n+    let mut result = DropckConstraint::empty();\n     for field in def.all_fields() {\n         let fty = tcx.type_of(field.did);\n         dtorck_constraint_for_ty(tcx, span, fty, 0, fty, &mut result)?;\n@@ -333,7 +333,7 @@ crate fn adt_dtorck_constraint(\n     Ok(tcx.arena.alloc(result))\n }\n \n-fn dedup_dtorck_constraint(c: &mut DtorckConstraint<'_>) {\n+fn dedup_dtorck_constraint(c: &mut DropckConstraint<'_>) {\n     let mut outlives = FxHashSet::default();\n     let mut dtorck_types = FxHashSet::default();\n "}]}