{"sha": "3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMmRkNGQyNGExZmFlNGE5ODVhYjM2MDAyOGI0MmNhMWU5YzYxZTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-03T17:23:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-04T01:33:17Z"}, "message": "remove `ast_ty_to_ty_cache` entirely", "tree": {"sha": "b0b55a4a0a889103ef4ddb0891c358b4a796216a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b55a4a0a889103ef4ddb0891c358b4a796216a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "html_url": "https://github.com/rust-lang/rust/commit/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3039398c68a047929bb7f6586610ae023da3b65f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3039398c68a047929bb7f6586610ae023da3b65f", "html_url": "https://github.com/rust-lang/rust/commit/3039398c68a047929bb7f6586610ae023da3b65f"}], "stats": {"total": 39, "additions": 2, "deletions": 37}, "files": [{"sha": "34c9b2d5cd30765bf9b1e3fc4212620bb933aad1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "patch": "@@ -556,9 +556,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// error reporting, and so is lazily initialised and generally\n     /// shouldn't taint the common path (hence the RefCell).\n     pub all_traits: RefCell<Option<Vec<DefId>>>,\n-\n-    /// HIR Ty -> Ty lowering cache.\n-    pub ast_ty_to_ty_cache: RefCell<NodeMap<Ty<'tcx>>>,\n }\n \n impl<'tcx> GlobalCtxt<'tcx> {\n@@ -770,7 +767,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             derive_macros: RefCell::new(NodeMap()),\n             stability_interner: RefCell::new(FxHashSet()),\n             all_traits: RefCell::new(None),\n-            ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n        }, f)\n     }\n "}, {"sha": "33b0aa3dbfffe3bcb2df7c0ebc34f4562de967c4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "patch": "@@ -25,9 +25,8 @@ use rustc::ty::wf::object_region_bounds;\n use rustc_back::slice;\n use require_c_abi_if_variadic;\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n-use util::nodemap::{NodeMap, FxHashSet};\n+use util::nodemap::FxHashSet;\n \n-use std::cell::RefCell;\n use std::iter;\n use syntax::{abi, ast};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -37,9 +36,6 @@ use syntax_pos::Span;\n pub trait AstConv<'gcx, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx>;\n \n-    /// A cache used for the result of `ast_ty_to_ty_cache`\n-    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>>;\n-\n     /// Returns the set of bounds in scope for the type parameter with\n     /// the given id.\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n@@ -1074,11 +1070,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let tcx = self.tcx();\n \n-        let cache = self.ast_ty_to_ty_cache();\n-        if let Some(ty) = cache.borrow().get(&ast_ty.id) {\n-            return ty;\n-        }\n-\n         let result_ty = match ast_ty.node {\n             hir::TySlice(ref ty) => {\n                 tcx.mk_slice(self.ast_ty_to_ty(&ty))\n@@ -1240,8 +1231,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n         };\n \n-        cache.borrow_mut().insert(ast_ty.id, result_ty);\n-\n         result_ty\n     }\n "}, {"sha": "e949e677090b2da5b16ee597c1e45c7cbed775f8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "patch": "@@ -451,8 +451,6 @@ impl<'gcx, 'tcx> EnclosingBreakables<'gcx, 'tcx> {\n }\n \n pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    ast_ty_to_ty_cache: RefCell<NodeMap<Ty<'tcx>>>,\n-\n     body_id: ast::NodeId,\n \n     // Number of errors that had been reported when we started\n@@ -1516,10 +1514,6 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }\n \n-    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>> {\n-        &self.ast_ty_to_ty_cache\n-    }\n-\n     fn get_free_substs(&self) -> Option<&Substs<'tcx>> {\n         Some(&self.parameter_environment.free_substs)\n     }\n@@ -1621,7 +1615,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n         FnCtxt {\n-            ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n             body_id: body_id,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,"}, {"sha": "49440037af57572f5f6f81fb7d244a32f820dd14", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "patch": "@@ -43,7 +43,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_liberated_fn_sigs();\n         wbcx.visit_fru_field_types();\n         wbcx.visit_anon_types();\n-        wbcx.visit_type_nodes();\n         wbcx.visit_cast_types();\n         wbcx.visit_lints();\n         wbcx.visit_free_region_map();\n@@ -442,13 +441,6 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_type_nodes(&self) {\n-        for (&id, ty) in self.fcx.ast_ty_to_ty_cache.borrow().iter() {\n-            let ty = self.resolve(ty, &id);\n-            self.fcx.tcx.ast_ty_to_ty_cache.borrow_mut().insert(id, ty);\n-        }\n-    }\n-\n     fn resolve<T>(&self, x: &T, span: &Locatable) -> T::Lifted\n         where T: TypeFoldable<'tcx> + ty::Lift<'gcx>\n     {"}, {"sha": "f44f74830cbb99849d144c48585feaa882a2e818", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "patch": "@@ -64,11 +64,10 @@ use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n-use util::nodemap::{NodeMap, FxHashMap};\n+use util::nodemap::FxHashMap;\n \n use rustc_const_math::ConstInt;\n \n-use std::cell::RefCell;\n use std::collections::BTreeMap;\n \n use syntax::{abi, ast};\n@@ -198,10 +197,6 @@ impl<'a,'tcx> ItemCtxt<'a,'tcx> {\n impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> { self.tcx }\n \n-    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>> {\n-        &self.tcx.ast_ty_to_ty_cache\n-    }\n-\n     fn get_type_parameter_bounds(&self,\n                                  span: Span,\n                                  def_id: DefId)"}]}