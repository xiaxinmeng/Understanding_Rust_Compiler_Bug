{"sha": "b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjgzZGYwY2Q2N2NhOTdjODNmNWE3ZWE1OGE3ODBkYmU0ZTFiOGU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-03-31T12:00:50Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-02T07:03:30Z"}, "message": "Improve cargo-watch usage", "tree": {"sha": "19b36b1a771914586cf79dd4e141ebf7a6219e18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b36b1a771914586cf79dd4e141ebf7a6219e18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "html_url": "https://github.com/rust-lang/rust/commit/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2912892effbcf24d94da235b9ac0d2a7fccea5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2912892effbcf24d94da235b9ac0d2a7fccea5d", "html_url": "https://github.com/rust-lang/rust/commit/c2912892effbcf24d94da235b9ac0d2a7fccea5d"}], "stats": {"total": 213, "additions": 177, "deletions": 36}, "files": [{"sha": "240aff6c9bc8e6f71efbd8911064cbdcf890aa06", "filename": "editors/code/package.json", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "patch": "@@ -223,18 +223,6 @@\n                     \"${workspaceRoot}\"\n                 ],\n                 \"pattern\": \"$rustc\"\n-            },\n-            {\n-                \"name\": \"rustc-watch\",\n-                \"fileLocation\": [\n-                    \"relative\",\n-                    \"${workspaceRoot}\"\n-                ],\n-                \"background\": {\n-                    \"beginsPattern\": \"^\\\\[Running\\\\b\",\n-                    \"endsPattern\": \"^\\\\[Finished running\\\\b\"\n-                },\n-                \"pattern\": \"$rustc\"\n             }\n         ]\n     }"}, {"sha": "55a1909cb8f4983cc40595a1e51fa46e27bdbbb4", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "patch": "@@ -0,0 +1,168 @@\n+import * as child_process from 'child_process';\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+import { setInterval } from 'timers';\n+\n+const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n+\n+class StatusDisplay {\n+    private i = 0;    \n+    private statusBarItem: vscode.StatusBarItem;\n+    private timer?: NodeJS.Timeout;\n+\n+    constructor(subscriptions: vscode.Disposable[]) {\n+        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 10);\n+        subscriptions.push(this.statusBarItem);\n+        this.statusBarItem.hide();\n+    }\n+\n+    public show() {\n+        this.timer = this.timer || setInterval(() => {\n+            this.statusBarItem!.text = \"cargo check \" + this.frame();\n+        }, 300);        \n+        \n+        this.statusBarItem!.show();            \n+    }\n+\n+    public hide() {\n+        if(this.timer) {\n+            clearInterval(this.timer);\n+            this.timer = undefined;\n+        }\n+\n+        this.statusBarItem!.hide();                        \n+    }\n+\n+    frame() {\n+        return spinnerFrames[this.i = ++this.i % spinnerFrames.length];\n+    }\n+}\n+\n+export class CargoWatchProvider {\n+    private diagnosticCollection?: vscode.DiagnosticCollection;\n+    private cargoProcess?: child_process.ChildProcess;\n+    private outBuffer: string = \"\";    \n+    private statusDisplay? : StatusDisplay;\n+\n+    constructor() {\n+    }\n+\n+    public activate(subscriptions: vscode.Disposable[]) {\n+        subscriptions.push(this);\n+        this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\"rustc\");\n+\n+        this.statusDisplay = new StatusDisplay(subscriptions);\n+\n+        // Start the cargo watch with json message \n+        this.cargoProcess = child_process.spawn('cargo',\n+            [\"watch\", \"-x\", \"\\\"check --message-format json\\\"\"],\n+            {\n+                // stdio: ['ignore', 'pipe', 'ignore'], \n+                shell: true,\n+                cwd: vscode.workspace.rootPath,\n+            });\n+\n+\n+        this.cargoProcess.stdout.on('data', (s: string) => {\n+            this.processOutput(s);\n+        });\n+\n+        this.cargoProcess.stderr.on('data', (s: string) => {\n+            console.error('Error on cargo watch : ' + s);\n+        });\n+\n+        this.cargoProcess.on('error', (err: Error) => {\n+            console.error('Error on spawn cargo process : ' + err);\n+        });\n+    }\n+\n+    public dispose(): void {\n+        if (this.diagnosticCollection) {\n+            this.diagnosticCollection.clear();\n+            this.diagnosticCollection.dispose();\n+        }\n+\n+        if (this.cargoProcess) {\n+            this.cargoProcess.kill();\n+        }\n+    }\n+\n+    parseLine(line: string) {\n+        if (line.startsWith(\"[Running\")) {\n+            this.diagnosticCollection!.clear();\n+            this.statusDisplay!.show();\n+        }\n+\n+        if (line.startsWith(\"[Finished running\")) {\n+            this.statusDisplay!.hide();\n+        }\n+\n+        function getLevel(s: string): vscode.DiagnosticSeverity {\n+            if (s === \"error\")\n+                return vscode.DiagnosticSeverity.Error;\n+\n+            if (s.startsWith(\"warn\"))\n+                return vscode.DiagnosticSeverity.Warning;\n+\n+            return vscode.DiagnosticSeverity.Information;\n+        }\n+\n+        // cargo-watch itself output non json format\n+        // Ignore these lines\n+        let data = null;\n+        try {\n+            data = JSON.parse(line.trim());\n+        } catch (error) {\n+            return;\n+        }\n+\n+        // Only handle compiler-message now\n+        if (data.reason !== \"compiler-message\") {\n+            return;\n+        }\n+\n+        let spans: any[] = data.message.spans;\n+        spans = spans.filter(o => o.is_primary);\n+        let file_name = null;\n+\n+        // We only handle primary span right now.\n+        if (spans.length > 0) {\n+            let o = spans[0];\n+\n+            console.log(\"o\", o);\n+            let rendered = data.message.rendered;\n+            let level = getLevel(data.message.level);\n+            let range = new vscode.Range(\n+                new vscode.Position(o.line_start - 1, o.column_start - 1),\n+                new vscode.Position(o.line_end - 1, o.column_end - 1)\n+            );\n+\n+            file_name = path.join(vscode.workspace.rootPath!, o.file_name);\n+            const diagnostic = new vscode.Diagnostic(range, rendered, level);\n+\n+            diagnostic.source = 'rustc';\n+            diagnostic.code = data.message.code.code;\n+            diagnostic.relatedInformation = [];\n+\n+            let fileUrl = vscode.Uri.file(file_name!);\n+\n+            let diagnostics: vscode.Diagnostic[] = [...(this.diagnosticCollection!.get(fileUrl) || [])];\n+            diagnostics.push(diagnostic);\n+\n+            this.diagnosticCollection!.set(fileUrl, diagnostics);\n+        }\n+    }\n+\n+    processOutput(chunk: string) {\n+        // The stdout is not line based, convert it to line based for proceess.\n+        this.outBuffer += chunk;\n+        let eolIndex;\n+        while ((eolIndex = this.outBuffer.indexOf('\\n')) >= 0) {\n+            // line includes the EOL\n+            const line = this.outBuffer.slice(0, eolIndex + 1);\n+            this.parseLine(line);\n+            this.outBuffer = this.outBuffer.slice(eolIndex + 1);\n+        }\n+    }\n+\n+}"}, {"sha": "722db158aa06d870b0538c93f840fffae4373d69", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "patch": "@@ -1,9 +1,11 @@\n import * as child_process from 'child_process';\n+\n import * as util from 'util';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Server } from '../server';\n+import { CargoWatchProvider } from './cargo_watch';\n \n interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -127,32 +129,13 @@ export async function handleSingle(runnable: Runnable) {\n     return vscode.tasks.executeTask(task);\n }\n \n-export const autoCargoWatchTask: vscode.Task = {\n-    name: 'cargo watch',\n-    source: 'rust-analyzer',\n-    definition: {\n-        type: 'watch'\n-    },\n-    execution: new vscode.ShellExecution('cargo', ['watch'], { cwd: '.' }),\n-\n-    isBackground: true,\n-    problemMatchers: ['$rustc-watch'],\n-    presentationOptions: {\n-        clear: true\n-    },\n-    // Not yet exposed in the vscode.d.ts\n-    // https://github.com/Microsoft/vscode/blob/ea7c31d770e04b51d586b0d3944f3a7feb03afb9/src/vs/workbench/contrib/tasks/common/tasks.ts#L444-L456\n-    runOptions: ({\n-        runOn: 2 // RunOnOptions.folderOpen\n-    } as unknown) as vscode.RunOptions\n-};\n-\n /**\n  * Interactively asks the user whether we should run `cargo check` in order to\n  * provide inline diagnostics; the user is met with a series of dialog boxes\n  * that, when accepted, allow us to `cargo install cargo-watch` and then run it.\n  */\n-export async function interactivelyStartCargoWatch() {\n+export async function interactivelyStartCargoWatch(context: vscode.ExtensionContext) {\n+\n     if (Server.config.enableCargoWatchOnStartup === 'disabled') {\n         return;\n     }\n@@ -212,5 +195,7 @@ export async function interactivelyStartCargoWatch() {\n         }\n     }\n \n-    vscode.tasks.executeTask(autoCargoWatchTask);\n+\n+    let validater = new CargoWatchProvider();\n+    validater.activate(context.subscriptions);    \n }"}, {"sha": "5cbf285e58dbdf9f223122601e5c436376116b2b", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=b3683df0cd67ca97c83f5a7ea58a780dbe4e1b8e", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { interactivelyStartCargoWatch } from './commands/runnables';\n+import { interactivelyStartCargoWatch} from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n@@ -121,7 +121,7 @@ export function activate(context: vscode.ExtensionContext) {\n     );\n \n     // Executing `cargo watch` provides us with inline diagnostics on save\n-    interactivelyStartCargoWatch();\n+    interactivelyStartCargoWatch(context);\n \n     // Start the language server, finally!\n     Server.start(allNotifications);"}]}