{"sha": "90f82e171d17d63167d44f7bffe9c2b5e43da40f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjgyZTE3MWQxN2Q2MzE2N2Q0NGY3YmZmZTljMmI1ZTQzZGE0MGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-20T19:11:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-20T19:11:55Z"}, "message": "Get borrowing working on fixed evecs.", "tree": {"sha": "7367a18313ba31e3ca4291e877566ab3af4f60d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7367a18313ba31e3ca4291e877566ab3af4f60d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f82e171d17d63167d44f7bffe9c2b5e43da40f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f82e171d17d63167d44f7bffe9c2b5e43da40f", "html_url": "https://github.com/rust-lang/rust/commit/90f82e171d17d63167d44f7bffe9c2b5e43da40f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f82e171d17d63167d44f7bffe9c2b5e43da40f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b054973083ed4201a2ba73be6bdd39daf13cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b054973083ed4201a2ba73be6bdd39daf13cf6", "html_url": "https://github.com/rust-lang/rust/commit/37b054973083ed4201a2ba73be6bdd39daf13cf6"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "6b8e3c6c293dd47b81510f4165ef2e3c41c22358", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/90f82e171d17d63167d44f7bffe9c2b5e43da40f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f82e171d17d63167d44f7bffe9c2b5e43da40f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=90f82e171d17d63167d44f7bffe9c2b5e43da40f", "patch": "@@ -2563,6 +2563,7 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n       }\n       none { trans_temp_lval(cx, e) }\n     };\n+    #debug(\"   pre-adaptation value: %s\", val_str(lv.bcx.ccx().tn, lv.val));\n     let lv = adapt_borrowed_value(lv, arg, e);\n     let mut bcx = lv.bcx;\n     let mut val = lv.val;\n@@ -2618,7 +2619,7 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n     }\n \n     if !is_bot && arg.ty != e_ty || ty::type_has_params(arg.ty) {\n-        #debug(\"    casting from %s\", val_str(bcx.ccx().tn, val));\n+        #debug(\"   casting from %s\", val_str(bcx.ccx().tn, val));\n         val = PointerCast(bcx, val, lldestty);\n     }\n     #debug(\"--- trans_arg_expr passing %s\", val_str(bcx.ccx().tn, val));\n@@ -2652,10 +2653,21 @@ fn adapt_borrowed_value(lv: lval_result, _arg: ty::arg,\n       ty::ty_estr(_) |\n       ty::ty_evec(_, _) {\n         let ccx = bcx.ccx();\n+        let val = alt lv.kind {\n+          temporary { lv.val }\n+          owned { load_if_immediate(bcx, lv.val, e_ty) }\n+          owned_imm { lv.val }\n+        };\n+\n         let unit_ty = ty::sequence_element_type(ccx.tcx, e_ty);\n         let llunit_ty = type_of(ccx, unit_ty);\n-        let (base, len) = tvec::get_base_and_len(bcx, lv.val, e_ty);\n+        let (base, len) = tvec::get_base_and_len(bcx, val, e_ty);\n         let p = alloca(bcx, T_struct([T_ptr(llunit_ty), ccx.int_type]));\n+\n+        #debug(\"adapt_borrowed_value: adapting %s to %s\",\n+               val_str(bcx.ccx().tn, val),\n+               val_str(bcx.ccx().tn, p));\n+\n         Store(bcx, base, GEPi(bcx, p, [0, abi::slice_elt_base]));\n         Store(bcx, len, GEPi(bcx, p, [0, abi::slice_elt_len]));\n         ret lval_temp(bcx, p);\n@@ -3064,12 +3076,7 @@ fn trans_expr_save_in(bcx: block, e: @ast::expr, dest: ValueRef)\n fn trans_temp_lval(bcx: block, e: @ast::expr) -> lval_result {\n     let _icx = bcx.insn_ctxt(\"trans_temp_lval\");\n     let mut bcx = bcx;\n-    if expr_is_lval(bcx, e) && !expr_is_borrowed(bcx, e) {\n-        // if the expression is borrowed, then are not actually passing the\n-        // lvalue itself, but rather an adaptation of it.  This is a bit of a\n-        // hack, though, but it only needs to exist so long as we have\n-        // reference modes and the like---otherwise, all potentially borrowed\n-        // things will go directly through trans_expr() as they ought to.\n+    if expr_is_lval(bcx, e) {\n         ret trans_lval(bcx, e);\n     } else {\n         let ty = expr_ty(bcx, e);"}, {"sha": "906333aa207a3af7987b9dd8d57414f0ed67766a", "filename": "src/test/run-pass/regions-borrow-evec-fixed.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90f82e171d17d63167d44f7bffe9c2b5e43da40f/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f82e171d17d63167d44f7bffe9c2b5e43da40f/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs?ref=90f82e171d17d63167d44f7bffe9c2b5e43da40f", "patch": "@@ -0,0 +1,9 @@\n+// xfail-test\n+fn foo(x: [int]/&) -> int {\n+    x[0]\n+}\n+\n+fn main() {\n+    let p = [1,2,3,4,5]/_;\n+    assert foo(p) == 1;\n+}"}]}