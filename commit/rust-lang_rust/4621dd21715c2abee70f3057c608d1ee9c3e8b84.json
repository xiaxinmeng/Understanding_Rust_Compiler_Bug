{"sha": "4621dd21715c2abee70f3057c608d1ee9c3e8b84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MjFkZDIxNzE1YzJhYmVlNzBmMzA1N2M2MDhkMWVlOWMzZThiODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-22T01:36:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-22T01:36:13Z"}, "message": "Auto merge of #32402 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 6 pull requests\n\n- Successful merges: #32322, #32339, #32340, #32373, #32376, #32397\n- Failed merges:", "tree": {"sha": "aba5bce77a65ccf3c8e9a6a8d5fbc90fedf3d797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba5bce77a65ccf3c8e9a6a8d5fbc90fedf3d797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4621dd21715c2abee70f3057c608d1ee9c3e8b84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4621dd21715c2abee70f3057c608d1ee9c3e8b84", "html_url": "https://github.com/rust-lang/rust/commit/4621dd21715c2abee70f3057c608d1ee9c3e8b84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4621dd21715c2abee70f3057c608d1ee9c3e8b84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21922e1f48b263b39498cfeec79c1ca3f5886efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/21922e1f48b263b39498cfeec79c1ca3f5886efe", "html_url": "https://github.com/rust-lang/rust/commit/21922e1f48b263b39498cfeec79c1ca3f5886efe"}, {"sha": "6a3c7d563025eb0df856aebe320965a494052b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3c7d563025eb0df856aebe320965a494052b89", "html_url": "https://github.com/rust-lang/rust/commit/6a3c7d563025eb0df856aebe320965a494052b89"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "12cb71973ab25832f78306f24683e2c3e7753c12", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=4621dd21715c2abee70f3057c608d1ee9c3e8b84", "patch": "@@ -2019,6 +2019,16 @@ impl Error for CliError {\n             CliError::NotFound => \"not found\",\n         }\n     }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        match *self {            \n+            CliError::Io(ref err) => Some(err),\n+            CliError::Parse(ref err) => Some(err),\n+            // Our custom error doesn't have an underlying cause, but we could\n+            // modify it so that it does.\n+            CliError::NotFound() => None,\n+        }\n+    }\n }\n ```\n "}, {"sha": "1c327c376e20335862f06c0940cd644dd2026c95", "filename": "src/doc/book/match.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmatch.md?ref=4621dd21715c2abee70f3057c608d1ee9c3e8b84", "patch": "@@ -36,10 +36,10 @@ give us an error:\n error: non-exhaustive patterns: `_` not covered\n ```\n \n-Rust is telling us that we forgot a value. The compiler infers from `x` that it\n-can have any positive 32bit value; for example 1 to 2,147,483,647. The `_` acts \n+Rust is telling us that we forgot some value. The compiler infers from `x` that it\n+can have any 32bit integer value; for example -2,147,483,648 to 2,147,483,647. The `_` acts \n as a 'catch-all', and will catch all possible values that *aren't* specified in \n-an arm of `match`. As you can see with the previous example, we provide `match` \n+an arm of `match`. As you can see in the previous example, we provide `match` \n arms for integers 1-5, if `x` is 6 or any other value, then it is caught by `_`.\n \n `match` is also an expression, which means we can use it on the right-hand"}, {"sha": "8dfbf4ada765f2870c1a2639416a3b1ae06987b7", "filename": "src/doc/book/primitive-types.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fprimitive-types.md?ref=4621dd21715c2abee70f3057c608d1ee9c3e8b84", "patch": "@@ -7,7 +7,7 @@ of these ones, as well, but these are the most primitive.\n \n # Booleans\n \n-Rust has a built in boolean type, named `bool`. It has two values, `true` and `false`:\n+Rust has a built-in boolean type, named `bool`. It has two values, `true` and `false`:\n \n ```rust\n let x = true;\n@@ -89,13 +89,13 @@ Unsigned types use a `u` for their category, and signed types use `i`. The `i`\n is for \u2018integer\u2019. So `u8` is an eight-bit unsigned number, and `i8` is an\n eight-bit signed number.\n \n-## Fixed size types\n+## Fixed-size types\n \n-Fixed size types have a specific number of bits in their representation. Valid\n+Fixed-size types have a specific number of bits in their representation. Valid\n bit sizes are `8`, `16`, `32`, and `64`. So, `u32` is an unsigned, 32-bit integer,\n and `i64` is a signed, 64-bit integer.\n \n-## Variable sized types\n+## Variable-size types\n \n Rust also provides types whose size depends on the size of a pointer of the\n underlying machine. These types have \u2018size\u2019 as the category, and come in signed"}, {"sha": "a08d53f958ba3eddcaa139646e7df4ef91f4f06a", "filename": "src/doc/book/references-and-borrowing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md?ref=4621dd21715c2abee70f3057c608d1ee9c3e8b84", "patch": "@@ -212,7 +212,7 @@ fn main() {\n \n In other words, the mutable borrow is held through the rest of our example. What\n we want is for the mutable borrow by `y` to end so that the resource can be\n-returned to the owner, `x`. `x` can then provide a mutable borrow to `println!`.\n+returned to the owner, `x`. `x` can then provide a immutable borrow to `println!`.\n In Rust, borrowing is tied to the scope that the borrow is valid for. And our\n scopes look like this:\n "}, {"sha": "49aa0238a996a5f236f68749992ecf5236340056", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=4621dd21715c2abee70f3057c608d1ee9c3e8b84", "patch": "@@ -14,6 +14,21 @@\n //! by the compiler to implement comparison operators. Rust programs may\n //! implement `PartialOrd` to overload the `<`, `<=`, `>`, and `>=` operators,\n //! and may implement `PartialEq` to overload the `==` and `!=` operators.\n+//!\n+//! # Examples\n+//!\n+//! ```\n+//! let x: u32 = 0;\n+//! let y: u32 = 1;\n+//!\n+//! // these two lines are equivalent\n+//! assert_eq!(x < y, true);\n+//! assert_eq!(x.lt(&y), true);\n+//!\n+//! // these two lines are also equivalent\n+//! assert_eq!(x == y, false);\n+//! assert_eq!(x.eq(&y), false);\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -44,6 +59,16 @@ use option::Option::{self, Some};\n /// only if `a != b`.\n ///\n /// This trait can be used with `#[derive]`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let x: u32 = 0;\n+/// let y: u32 = 1;\n+///\n+/// assert_eq!(x == y, false);\n+/// assert_eq!(x.eq(&y), false);\n+/// ```\n #[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n@@ -226,6 +251,16 @@ impl PartialOrd for Ordering {\n ///\n /// This trait can be used with `#[derive]`. When `derive`d, it will produce an ordering\n /// based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let x : u32 = 0;\n+/// let y : u32 = 1;\n+///\n+/// assert_eq!(x < y, true);\n+/// assert_eq!(x.lt(&y), true);\n+/// ```\n #[lang = \"ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {"}, {"sha": "300868721e3ab2f1d230cfaefc3a6c9d5a446045", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4621dd21715c2abee70f3057c608d1ee9c3e8b84/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4621dd21715c2abee70f3057c608d1ee9c3e8b84", "patch": "@@ -3167,8 +3167,8 @@ x <<= 2;\n To fix this error, please check that this type implements this binary\n operation. Example:\n \n-```compile_fail\n-let x = 12u32; // the `u32` type does implement the `ShlAssign` trait\n+```\n+let mut x = 12u32; // the `u32` type does implement the `ShlAssign` trait\n \n x <<= 2; // ok!\n ```"}]}