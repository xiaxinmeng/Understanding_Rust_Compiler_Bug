{"sha": "7b68b5fc2a6586f0575213640023d414d5e0da73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjhiNWZjMmE2NTg2ZjA1NzUyMTM2NDAwMjNkNDE0ZDVlMGRhNzM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-26T12:39:10Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-26T12:44:36Z"}, "message": "Also fix MIRification of unit enum variants", "tree": {"sha": "6950118efa1bad77a6472412d43b0886640625fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6950118efa1bad77a6472412d43b0886640625fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b68b5fc2a6586f0575213640023d414d5e0da73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b68b5fc2a6586f0575213640023d414d5e0da73", "html_url": "https://github.com/rust-lang/rust/commit/7b68b5fc2a6586f0575213640023d414d5e0da73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b68b5fc2a6586f0575213640023d414d5e0da73/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3150dddb0f2f6c84f2355db324794eecab6a3299", "url": "https://api.github.com/repos/rust-lang/rust/commits/3150dddb0f2f6c84f2355db324794eecab6a3299", "html_url": "https://github.com/rust-lang/rust/commit/3150dddb0f2f6c84f2355db324794eecab6a3299"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "ce78a39d599a518d6bd4cf6d2600f249bc61f11b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7b68b5fc2a6586f0575213640023d414d5e0da73/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b68b5fc2a6586f0575213640023d414d5e0da73/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=7b68b5fc2a6586f0575213640023d414d5e0da73", "patch": "@@ -520,26 +520,39 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n     // Otherwise there may be def_map borrow conflicts\n     let def = cx.tcx.def_map.borrow()[&expr.id].full_def();\n     let (def_id, kind) = match def {\n-        // A variant constructor.\n-        def::DefVariant(_, def_id, false) => (def_id, ItemKind::Function),\n         // A regular function.\n         def::DefFn(def_id, _) => (def_id, ItemKind::Function),\n         def::DefMethod(def_id) => (def_id, ItemKind::Method),\n-        def::DefStruct(def_id) => {\n-            match cx.tcx.node_id_to_type(expr.id).sty {\n-                // A tuple-struct constructor.\n-                ty::TyBareFn(..) => (def_id, ItemKind::Function),\n-                // This is a special case: a unit struct which is used as a value. We return a\n-                // completely different ExprKind here to account for this special case.\n-                ty::TyStruct(adt_def, substs) => return ExprKind::Adt {\n+        def::DefStruct(def_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n+            // A tuple-struct constructor.\n+            ty::TyBareFn(..) => (def_id, ItemKind::Function),\n+            // This is a special case: a unit struct which is used as a value. We return a\n+            // completely different ExprKind here to account for this special case.\n+            ty::TyStruct(adt_def, substs) => return ExprKind::Adt {\n+                adt_def: adt_def,\n+                variant_index: 0,\n+                substs: substs,\n+                fields: vec![],\n+                base: None\n+            },\n+            ref sty => panic!(\"unexpected sty: {:?}\", sty)\n+        },\n+        def::DefVariant(enum_id, variant_id, false) => match cx.tcx.node_id_to_type(expr.id).sty {\n+            // A variant constructor.\n+            ty::TyBareFn(..) => (variant_id, ItemKind::Function),\n+            // A unit variant, similar special case to the struct case above.\n+            ty::TyEnum(adt_def, substs) => {\n+                debug_assert!(adt_def.did == enum_id);\n+                let index = adt_def.variant_index_with_id(variant_id);\n+                return ExprKind::Adt {\n                     adt_def: adt_def,\n-                    variant_index: 0,\n                     substs: substs,\n+                    variant_index: index,\n                     fields: vec![],\n                     base: None\n-                },\n-                ref sty => panic!(\"unexpected sty: {:?}\", sty)\n-            }\n+                };\n+            },\n+            ref sty => panic!(\"unexpected sty: {:?}\", sty)\n         },\n         def::DefConst(def_id) |\n         def::DefAssociatedConst(def_id) => {"}, {"sha": "a08ec123895df0cf2d164d670b69e1a266fa418f", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b68b5fc2a6586f0575213640023d414d5e0da73/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b68b5fc2a6586f0575213640023d414d5e0da73/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=7b68b5fc2a6586f0575213640023d414d5e0da73", "patch": "@@ -97,10 +97,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n                 match *kind {\n-                    // Unit struct, which is translated very differently compared to any other\n-                    // aggregate\n-                    mir::AggregateKind::Adt(adt_def, 0, _)\n-                    if adt_def.struct_variant().kind() == ty::VariantKind::Unit => {\n+                    // Unit struct or variant; both are translated very differently compared to any\n+                    // other aggregate\n+                    mir::AggregateKind::Adt(adt_def, index, _)\n+                    if adt_def.variants[index].kind() == ty::VariantKind::Unit => {\n                         let repr = adt::represent_type(bcx.ccx(), dest.ty.to_ty(bcx.tcx()));\n                         adt::trans_set_discr(bcx, &*repr, dest.llval, 0);\n                     },"}, {"sha": "2c0cd5d6c8ad66c424b1f537d886ca114452d0be", "filename": "src/test/run-pass/mir_refs_correct.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b68b5fc2a6586f0575213640023d414d5e0da73/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b68b5fc2a6586f0575213640023d414d5e0da73/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs?ref=7b68b5fc2a6586f0575213640023d414d5e0da73", "patch": "@@ -182,6 +182,11 @@ fn t21() -> Unit {\n     Unit\n }\n \n+#[rustc_mir]\n+fn t22() -> Option<u8> {\n+    None\n+}\n+\n fn main(){\n     unsafe {\n         assert_eq!(t1()(), regular());\n@@ -222,5 +227,6 @@ fn main(){\n         assert_eq!(t19()(322u64, 2u32), F::f(322u64, 2u32));\n         assert_eq!(t20()(123u64, 38u32), <u32 as T<_, _>>::staticmeth(123, 38));\n         assert_eq!(t21(), Unit);\n+        assert_eq!(t22(), None);\n     }\n }"}]}