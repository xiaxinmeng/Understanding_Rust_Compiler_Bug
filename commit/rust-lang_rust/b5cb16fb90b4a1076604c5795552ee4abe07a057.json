{"sha": "b5cb16fb90b4a1076604c5795552ee4abe07a057", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Y2IxNmZiOTBiNGExMDc2NjA0YzU3OTU1NTJlZTRhYmUwN2EwNTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-13T09:45:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T09:45:29Z"}, "message": "Merge #5741\n\n5741: Minor\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "12091cc377801f0a33220543eb180795613077fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12091cc377801f0a33220543eb180795613077fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5cb16fb90b4a1076604c5795552ee4abe07a057", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNQu5CRBK7hj4Ov3rIwAAdHIIACIfbWNFYpX2kJXowUtecsTq\nbO0dF8G+t+8bVEEE8h7/RJm5lTY9CdUjDha2gPvlCSLPI4GV7El8sa0x14pqvZsC\nRKsymVjnI8Cl3pJ5bfDImffjK4FSaTj16EVXyHSXLWlbaQS28e8Z/r2nEqKvm1GC\nU9q/dkwsNvQ0XAuCZivYX+IPEIB54iyhQCeUaJvodbLAz0+VNm6hbgHaSeatYxRL\nA5DHhV+xF5ZUvCGymNxwYrEDc/ulhqjAAH0C+CjYmjr70ugivPplZf99iHr5hr7n\nCLaijmGTrmAWacsD3/dCVpaf/tunbwrqUpJnMiu3hso8nrOvGFfWvdJ0LGEMpnE=\n=Z0fJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 12091cc377801f0a33220543eb180795613077fc\nparent 45883921f93aa2a81ceb8d0e04744ff8d3371df1\nparent 80c241b39a02a949c745676e22b28db95186feda\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597311929 +0000\ncommitter GitHub <noreply@github.com> 1597311929 +0000\n\nMerge #5741\n\n5741: Minor\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5cb16fb90b4a1076604c5795552ee4abe07a057", "html_url": "https://github.com/rust-lang/rust/commit/b5cb16fb90b4a1076604c5795552ee4abe07a057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5cb16fb90b4a1076604c5795552ee4abe07a057/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45883921f93aa2a81ceb8d0e04744ff8d3371df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/45883921f93aa2a81ceb8d0e04744ff8d3371df1", "html_url": "https://github.com/rust-lang/rust/commit/45883921f93aa2a81ceb8d0e04744ff8d3371df1"}, {"sha": "80c241b39a02a949c745676e22b28db95186feda", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c241b39a02a949c745676e22b28db95186feda", "html_url": "https://github.com/rust-lang/rust/commit/80c241b39a02a949c745676e22b28db95186feda"}], "stats": {"total": 141, "additions": 70, "deletions": 71}, "files": [{"sha": "79097621e645f0277db4eabd3bc978167cd88d57", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=b5cb16fb90b4a1076604c5795552ee4abe07a057", "patch": "@@ -1,4 +1,3 @@\n-use ra_fmt::unwrap_trivial_block;\n use syntax::{\n     ast::{\n         self,\n@@ -8,7 +7,10 @@ use syntax::{\n     AstNode,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{unwrap_trivial_block, TryEnum},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: replace_if_let_with_match\n //"}, {"sha": "3851aeb3e7459fc0a8c101293588fb24ec1a3006", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=b5cb16fb90b4a1076604c5795552ee4abe07a057", "patch": "@@ -1,4 +1,3 @@\n-use ra_fmt::unwrap_trivial_block;\n use syntax::{\n     ast::{\n         self,\n@@ -7,7 +6,7 @@ use syntax::{\n     AstNode, TextRange, T,\n };\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{utils::unwrap_trivial_block, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: unwrap_block\n //"}, {"sha": "a20453dd8747b226abe6a59ff382de78e316ea4f", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=b5cb16fb90b4a1076604c5795552ee4abe07a057", "patch": "@@ -4,6 +4,7 @@ pub(crate) mod insert_use;\n use std::{iter, ops};\n \n use hir::{Adt, Crate, Enum, ScopeDef, Semantics, Trait, Type};\n+use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use rustc_hash::FxHashSet;\n use syntax::{\n@@ -17,6 +18,43 @@ use crate::assist_config::SnippetCap;\n \n pub(crate) use insert_use::{find_insert_use_container, insert_use_statement};\n \n+pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n+    extract_trivial_expression(&block)\n+        .filter(|expr| !expr.syntax().text().contains_char('\\n'))\n+        .unwrap_or_else(|| block.into())\n+}\n+\n+pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n+    let has_anything_else = |thing: &SyntaxNode| -> bool {\n+        let mut non_trivial_children =\n+            block.syntax().children_with_tokens().filter(|it| match it.kind() {\n+                WHITESPACE | T!['{'] | T!['}'] => false,\n+                _ => it.as_node() != Some(thing),\n+            });\n+        non_trivial_children.next().is_some()\n+    };\n+\n+    if let Some(expr) = block.expr() {\n+        if has_anything_else(expr.syntax()) {\n+            return None;\n+        }\n+        return Some(expr);\n+    }\n+    // Unwrap `{ continue; }`\n+    let (stmt,) = block.statements().next_tuple()?;\n+    if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n+        if has_anything_else(expr_stmt.syntax()) {\n+            return None;\n+        }\n+        let expr = expr_stmt.expr()?;\n+        match expr.syntax().kind() {\n+            CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n+            _ => (),\n+        }\n+    }\n+    None\n+}\n+\n #[derive(Clone, Copy, Debug)]\n pub(crate) enum Cursor<'a> {\n     Replace(&'a SyntaxNode),"}, {"sha": "b92477f9e7a2d5a375e200f38c26503043a5338a", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=b5cb16fb90b4a1076604c5795552ee4abe07a057", "patch": "@@ -2,12 +2,9 @@\n \n use std::iter::successors;\n \n-use itertools::Itertools;\n use syntax::{\n-    ast::{self, AstNode, AstToken},\n-    SmolStr, SyntaxKind,\n-    SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, T,\n+    ast::{self, AstToken},\n+    SmolStr, SyntaxNode, SyntaxToken,\n };\n \n /// If the node is on the beginning of the line, calculate indent.\n@@ -29,63 +26,3 @@ pub fn leading_indent(node: &SyntaxNode) -> Option<SmolStr> {\n fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     successors(token.prev_token(), |token| token.prev_token())\n }\n-\n-pub fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n-    extract_trivial_expression(&block)\n-        .filter(|expr| !expr.syntax().text().contains_char('\\n'))\n-        .unwrap_or_else(|| block.into())\n-}\n-\n-pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n-    let has_anything_else = |thing: &SyntaxNode| -> bool {\n-        let mut non_trivial_children =\n-            block.syntax().children_with_tokens().filter(|it| match it.kind() {\n-                WHITESPACE | T!['{'] | T!['}'] => false,\n-                _ => it.as_node() != Some(thing),\n-            });\n-        non_trivial_children.next().is_some()\n-    };\n-\n-    if let Some(expr) = block.expr() {\n-        if has_anything_else(expr.syntax()) {\n-            return None;\n-        }\n-        return Some(expr);\n-    }\n-    // Unwrap `{ continue; }`\n-    let (stmt,) = block.statements().next_tuple()?;\n-    if let ast::Stmt::ExprStmt(expr_stmt) = stmt {\n-        if has_anything_else(expr_stmt.syntax()) {\n-            return None;\n-        }\n-        let expr = expr_stmt.expr()?;\n-        match expr.syntax().kind() {\n-            CONTINUE_EXPR | BREAK_EXPR | RETURN_EXPR => return Some(expr),\n-            _ => (),\n-        }\n-    }\n-    None\n-}\n-\n-pub fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {\n-    match left {\n-        T!['('] | T!['['] => return \"\",\n-        T!['{'] => {\n-            if let USE_TREE = right {\n-                return \"\";\n-            }\n-        }\n-        _ => (),\n-    }\n-    match right {\n-        T![')'] | T![']'] => return \"\",\n-        T!['}'] => {\n-            if let USE_TREE = left {\n-                return \"\";\n-            }\n-        }\n-        T![.] => return \"\",\n-        _ => (),\n-    }\n-    \" \"\n-}"}, {"sha": "f5c310701576c091b8a9d0bd0afda39a2e63416f", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb16fb90b4a1076604c5795552ee4abe07a057/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=b5cb16fb90b4a1076604c5795552ee4abe07a057", "patch": "@@ -1,10 +1,10 @@\n use itertools::Itertools;\n-use ra_fmt::{compute_ws, extract_trivial_expression};\n+use ra_assists::utils::extract_trivial_expression;\n use syntax::{\n     algo::{find_covering_element, non_trivia_sibling},\n     ast::{self, AstNode, AstToken},\n     Direction, NodeOrToken, SourceFile,\n-    SyntaxKind::{self, WHITESPACE},\n+    SyntaxKind::{self, USE_TREE, WHITESPACE},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n use text_edit::{TextEdit, TextEditBuilder};\n@@ -168,6 +168,29 @@ fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n     matches!((left, right), (T![,], T![')']) | (T![,], T![']']))\n }\n \n+fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {\n+    match left {\n+        T!['('] | T!['['] => return \"\",\n+        T!['{'] => {\n+            if let USE_TREE = right {\n+                return \"\";\n+            }\n+        }\n+        _ => (),\n+    }\n+    match right {\n+        T![')'] | T![']'] => return \"\",\n+        T!['}'] => {\n+            if let USE_TREE = left {\n+                return \"\";\n+            }\n+        }\n+        T![.] => return \"\",\n+        _ => (),\n+    }\n+    \" \"\n+}\n+\n #[cfg(test)]\n mod tests {\n     use syntax::SourceFile;"}]}