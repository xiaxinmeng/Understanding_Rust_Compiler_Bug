{"sha": "3aeef670373e80aff644ddaea103ceb72d2e6464", "node_id": "C_kwDOAAsO6NoAKDNhZWVmNjcwMzczZTgwYWZmNjQ0ZGRhZWExMDNjZWI3MmQyZTY0NjQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-03T13:11:54Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:08Z"}, "message": "Update search engine and parser to error when quotes are used on queries with more than one element.", "tree": {"sha": "c12ad0ddf640ca5626ae629cd3931f88ac3077bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c12ad0ddf640ca5626ae629cd3931f88ac3077bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aeef670373e80aff644ddaea103ceb72d2e6464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aeef670373e80aff644ddaea103ceb72d2e6464", "html_url": "https://github.com/rust-lang/rust/commit/3aeef670373e80aff644ddaea103ceb72d2e6464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aeef670373e80aff644ddaea103ceb72d2e6464/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be41750a10191363c88f1ef216d0c3067ae94bdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/be41750a10191363c88f1ef216d0c3067ae94bdc", "html_url": "https://github.com/rust-lang/rust/commit/be41750a10191363c88f1ef216d0c3067ae94bdc"}], "stats": {"total": 162, "additions": 104, "deletions": 58}, "files": [{"sha": "443b7e366d4d315a9e60283cb02e856b65b526c6", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 104, "deletions": 58, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/3aeef670373e80aff644ddaea103ceb72d2e6464/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/3aeef670373e80aff644ddaea103ceb72d2e6464/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=3aeef670373e80aff644ddaea103ceb72d2e6464", "patch": "@@ -173,7 +173,14 @@ window.initSearch = function(rawSearchIndex) {\n         function isStopCharacter(c) {\n             return isWhitespace(c) || \"),>-=\".indexOf(c) !== -1;\n         }\n-        function getStringElem(query) {\n+        function getStringElem(query, isInGenerics) {\n+            if (isInGenerics) {\n+                throw new Error(\"`\\\"` cannot be used in generics\");\n+            } else if (query.literalSearch) {\n+                throw new Error(\"Cannot have more than one literal search element\");\n+            } else if (query.totalElems !== 0) {\n+                throw new Error(\"Cannot use literal search when there is more than one element\");\n+            }\n             query.pos += 1;\n             while (query.pos < query.length && query.val[query.pos] !== \"\\\"\") {\n                 if (query.val[query.pos] === \"\\\\\") {\n@@ -182,24 +189,25 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n                 query.pos += 1;\n             }\n+            if (query.pos >= query.length) {\n+                throw new Error(\"Unclosed `\\\"`\");\n+            }\n             // To skip the quote at the end.\n             query.pos += 1;\n+            query.literalSearch = true;\n         }\n         function skipWhitespaces(query) {\n-            var c;\n             while (query.pos < query.length) {\n-                c = query.val[query.pos];\n+                var c = query.val[query.pos];\n                 if (!isWhitespace(c)) {\n                     break;\n                 }\n                 query.pos += 1;\n             }\n-\n         }\n         function skipStopCharacters(query) {\n-            var c;\n             while (query.pos < query.length) {\n-                c = query.val[query.pos];\n+                var c = query.val[query.pos];\n                 if (!isStopCharacter(c)) {\n                     break;\n                 }\n@@ -222,7 +230,7 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n             }\n         }\n-        function createQueryElement(elems, val, generics, isExact) {\n+        function createQueryElement(query, elems, val, generics) {\n             removeEmptyStringsFromArray(generics);\n             if (val === '*' || (val.length === 0 && generics.length === 0)) {\n                 return;\n@@ -234,26 +242,24 @@ window.initSearch = function(rawSearchIndex) {\n                 paths = [\"\"];\n             }\n             elems.push({\n-                isExact: isExact,\n                 name: val,\n                 fullPath: paths,\n                 pathWithoutLast: paths.slice(0, paths.length - 1),\n                 pathLast: paths[paths.length - 1],\n                 generics: generics,\n             });\n+            query.totalElems += 1;\n         }\n-        function getNextElem(query, elems) {\n-            var isExact = false;\n+        function getNextElem(query, elems, isInGenerics) {\n             var generics = [];\n \n             skipStopCharacters(query);\n             var start = query.pos;\n             var end = start;\n             // We handle the strings on their own mostly to make code easier to follow.\n             if (query.val[query.pos] === \"\\\"\") {\n-                isExact = true;\n                 start += 1;\n-                getStringElem(query);\n+                getStringElem(query, isInGenerics);\n                 end = query.pos - 1;\n                 skipWhitespaces(query);\n             } else {\n@@ -281,20 +287,18 @@ window.initSearch = function(rawSearchIndex) {\n             if (start >= end && generics.length === 0) {\n                 return;\n             }\n-            createQueryElement(elems, query.val.slice(start, end), generics, isExact);\n+            createQueryElement(query, elems, query.val.slice(start, end), generics);\n         }\n         function getItemsBefore(query, elems, limit) {\n-            var c;\n-\n             while (query.pos < query.length) {\n-                c = query.val[query.pos];\n+                var c = query.val[query.pos];\n                 if (c === limit) {\n                     break;\n                 } else if (isSpecialStartCharacter(c) || c === \":\") {\n                     // Something weird is going on in here. Ignoring it!\n                     query.pos += 1;\n                 }\n-                getNextElem(query, elems);\n+                getNextElem(query, elems, limit === \">\");\n             }\n             // We skip the \"limit\".\n             query.pos += 1;\n@@ -319,10 +323,12 @@ window.initSearch = function(rawSearchIndex) {\n                     // The type filter doesn't count as an element since it's a modifier.\n                     query.typeFilter = query.elems.pop().name;\n                     query.pos += 1;\n+                    query.totalElems = 0;\n+                    query.literalSearch = false;\n                     continue;\n                 }\n                 before = query.elems.length;\n-                getNextElem(query, query.elems);\n+                getNextElem(query, query.elems, false);\n                 if (query.elems.length === before) {\n                     // Nothing was added, let's check it's not because of a solo \":\"!\n                     if (query.pos >= query.length || query.val[query.pos] !== \":\") {\n@@ -369,20 +375,39 @@ window.initSearch = function(rawSearchIndex) {\n             elemName: null,\n             args: [],\n             returned: [],\n+            // Total number of elements (includes generics).\n+            totalElems: 0,\n+            // Total number of \"top\" elements (does not include generics).\n             foundElems: 0,\n             // This field is used to check if it's needed to re-run a search or not.\n             id: \"\",\n             // This field is used in `sortResults`.\n             nameSplit: null,\n+            literalSearch: false,\n+            error: null,\n         };\n-        parseInput(query);\n+        query.id = val;\n+        try {\n+            parseInput(query);\n+        } catch (err) {\n+            query.error = err.message;\n+            query.elems = [];\n+            query.returned = [];\n+            query.args = [];\n+            return query;\n+        }\n         query.foundElems = query.elems.length + query.args.length + query.returned.length;\n+        if (!query.literalSearch) {\n+            // If there is more than one element in the query, we switch to literalSearch in any\n+            // case.\n+            query.literalSearch = query.foundElems > 1;\n+        }\n         if (query.elemName !== null) {\n             query.foundElems += 1;\n         }\n         if (query.foundElems === 0 && val.length !== 0) {\n             // In this case, we'll simply keep whatever was entered by the user...\n-            createQueryElement(query.elems, val, [], false);\n+            createQueryElement(query, query.elems, val, []);\n             query.foundElems += 1;\n         }\n         if (query.typeFilter !== null) {\n@@ -391,7 +416,6 @@ window.initSearch = function(rawSearchIndex) {\n         } else {\n             query.typeFilter = NO_TYPE_FILTER;\n         }\n-        query.id = val;\n         // In case we only have one argument, we move it back to `elems` to keep things simple.\n         if (query.foundElems === 1 && query.elemName !== null) {\n             query.elems.push(query.elemName);\n@@ -404,15 +428,36 @@ window.initSearch = function(rawSearchIndex) {\n         return query;\n     }\n \n+    /**\n+     * Creates the query results.\n+     *\n+     * @param {Array<Object>} results_in_args\n+     * @param {Array<Object>} results_returned\n+     * @param {Array<Object>} results_in_args\n+     * @param {ParsedQuery} queryInfo\n+     * @return {Object}                        - A search index of results\n+     */\n+    function createQueryResults(results_in_args, results_returned, results_others, queryInfo) {\n+        return {\n+            \"in_args\": results_in_args,\n+            \"returned\": results_returned,\n+            \"others\": results_others,\n+            \"query\": queryInfo,\n+        };\n+    }\n+\n     /**\n      * Executes the query and builds an index of results\n-     * @param  {[Object]} query      [The user query]\n-     * @param  {[type]} searchWords  [The list of search words to query\n-     *                                against]\n-     * @param  {[type]} filterCrates [Crate to search in if defined]\n-     * @return {[type]}              [A search index of results]\n+     *\n+     * @param  {ParsedQuery} query   - The user query\n+     * @param  {Object} searchWords  - The list of search words to query against\n+     * @param  {Object} filterCrates - Crate to search in if defined\n+     * @return {Object}              - A search index of results\n      */\n     function execQuery(queryInfo, searchWords, filterCrates) {\n+        if (queryInfo.error !== null) {\n+            createQueryResults([], [], [], queryInfo);\n+        }\n         var results_others = {}, results_in_args = {}, results_returned = {};\n \n         function transformResults(results) {\n@@ -618,7 +663,7 @@ window.initSearch = function(rawSearchIndex) {\n             var lev = MAX_LEV_DISTANCE + 1;\n             for (var x = 0, length = obj[GENERICS_DATA].length; x < length && lev !== 0; ++x) {\n                 lev = Math.min(\n-                    checkType(obj[GENERICS_DATA][x], val),\n+                    checkType(obj[GENERICS_DATA][x], val, true),\n                     lev\n                 );\n             }\n@@ -629,13 +674,14 @@ window.initSearch = function(rawSearchIndex) {\n           * This function checks if the object (`obj`) matches the given type (`val`) and its\n           * generics (if any).\n           *\n-          * @param {Object} obj\n-          * @param {Object} val\n+          * @param {Row} obj\n+          * @param {QueryElement} val      - The element from the parsed query.\n+          * @param {boolean} literalSearch\n           *\n           * @return {integer} - Returns a Levenshtein distance to the best match. If there is\n           *                     no match, returns `MAX_LEV_DISTANCE + 1`.\n           */\n-        function checkType(obj, val) {\n+        function checkType(obj, val, literalSearch) {\n             if (val.name.length === 0 || obj[NAME].length === 0) {\n                 // This is a pure \"generic\" search, no need to run other checks.\n                 if (obj.length > GENERICS_DATA) {\n@@ -645,7 +691,7 @@ window.initSearch = function(rawSearchIndex) {\n             }\n \n             var lev = levenshtein(obj[NAME], val.name);\n-            if (val.isExact) {\n+            if (literalSearch) {\n                 if (lev !== 0) {\n                     // The name didn't match, let's try to check if the generics do.\n                     if (val.generics.length === 0) {\n@@ -720,13 +766,13 @@ window.initSearch = function(rawSearchIndex) {\n                     if (!typePassesFilter(typeFilter, tmp[1])) {\n                         continue;\n                     }\n-                    lev = Math.min(lev, checkType(tmp, val));\n+                    lev = Math.min(lev, checkType(tmp, val, queryInfo.literalSearch));\n                     if (lev === 0) {\n                         return 0;\n                     }\n                 }\n             }\n-            return val.isExact ? MAX_LEV_DISTANCE + 1 : lev;\n+            return queryInfo.literalSearch ? MAX_LEV_DISTANCE + 1 : lev;\n         }\n \n         /**\n@@ -751,13 +797,13 @@ window.initSearch = function(rawSearchIndex) {\n                     if (!typePassesFilter(typeFilter, tmp[1])) {\n                         continue;\n                     }\n-                    lev = Math.min(lev, checkType(tmp, val));\n+                    lev = Math.min(lev, checkType(tmp, val, queryInfo.literalSearch));\n                     if (lev === 0) {\n                         return 0;\n                     }\n                 }\n             }\n-            return val.isExact ? MAX_LEV_DISTANCE + 1 : lev;\n+            return queryInfo.literalSearch ? MAX_LEV_DISTANCE + 1 : lev;\n         }\n \n         function checkPath(contains, lastElem, ty) {\n@@ -888,7 +934,7 @@ window.initSearch = function(rawSearchIndex) {\n          * This function adds the given result into the provided `res` map if it matches the\n          * following condition:\n          *\n-         * * If it is a \"literal search\" (`isExact`), then `lev` must be 0.\n+         * * If it is a \"literal search\" (`queryInfo.literalSearch`), then `lev` must be 0.\n          * * If it is not a \"literal search\", `lev` must be <= `MAX_LEV_DISTANCE`.\n          *\n          * The `res` map contains information which will be used to sort the search results:\n@@ -898,15 +944,14 @@ window.initSearch = function(rawSearchIndex) {\n          * * `index` is an `integer`` used to sort by the position of the word in the item's name.\n          * * `lev` is the main metric used to sort the search results.\n          *\n-         * @param {boolean} isExact\n          * @param {Object} res\n          * @param {string} fullId\n          * @param {integer} id\n          * @param {integer} index\n          * @param {integer} lev\n          */\n-        function addIntoResults(isExact, res, fullId, id, index, lev) {\n-            if (lev === 0 || (!isExact && lev <= MAX_LEV_DISTANCE)) {\n+        function addIntoResults(res, fullId, id, index, lev) {\n+            if (lev === 0 || (!queryInfo.literalSearch && lev <= MAX_LEV_DISTANCE)) {\n                 if (res[fullId] !== undefined) {\n                     var result = res[fullId];\n                     if (result.dontValidate || result.lev <= lev) {\n@@ -916,7 +961,7 @@ window.initSearch = function(rawSearchIndex) {\n                 res[fullId] = {\n                     id: id,\n                     index: index,\n-                    dontValidate: isExact,\n+                    dontValidate: queryInfo.literalSearch,\n                     lev: lev,\n                 };\n             }\n@@ -939,17 +984,17 @@ window.initSearch = function(rawSearchIndex) {\n             var in_args = findArg(ty, elem, queryInfo.typeFilter);\n             var returned = checkReturned(ty, elem, queryInfo.typeFilter);\n \n-            addIntoResults(elem.isExact, results_in_args, fullId, pos, index, in_args);\n-            addIntoResults(elem.isExact, results_returned, fullId, pos, index, returned);\n+            addIntoResults(results_in_args, fullId, pos, index, in_args);\n+            addIntoResults(results_returned, fullId, pos, index, returned);\n \n             if (!typePassesFilter(queryInfo.typeFilter, ty.ty)) {\n                 return;\n             }\n             var searchWord = searchWords[pos];\n \n-            if (elem.isExact) {\n+            if (queryInfo.literalSearch) {\n                 if (searchWord === elem.name) {\n-                    addIntoResults(true, results_others, fullId, pos, -1, 0);\n+                    addIntoResults(results_others, fullId, pos, -1, 0);\n                 }\n                 return;\n             }\n@@ -958,14 +1003,14 @@ window.initSearch = function(rawSearchIndex) {\n             if (elem.name.length === 0) {\n                 if (ty.type !== null) {\n                     lev = checkGenerics(ty.type, elem, MAX_LEV_DISTANCE + 1);\n-                    addIntoResults(false, results_others, fullId, pos, index, lev);\n+                    addIntoResults(results_others, fullId, pos, index, lev);\n                 }\n                 return;\n             }\n \n             if (elem.fullPath.length > 1) {\n                 lev = checkPath(elem.pathWithoutLast, elem.pathLast, ty);\n-                if (lev > MAX_LEV_DISTANCE || (elem.isExact && lev !== 0)) {\n+                if (lev > MAX_LEV_DISTANCE || (queryInfo.literalSearch && lev !== 0)) {\n                     return;\n                 } else if (lev > 0) {\n                     lev_add = lev / 10;\n@@ -998,7 +1043,7 @@ window.initSearch = function(rawSearchIndex) {\n             if (lev < 0) {\n                 lev = 0;\n             }\n-            addIntoResults(elem.isExact, results_others, fullId, pos, index, lev);\n+            addIntoResults(results_others, fullId, pos, index, lev);\n         }\n \n         /**\n@@ -1024,7 +1069,6 @@ window.initSearch = function(rawSearchIndex) {\n                 for (i = 0, len = args.length; i < len; ++i) {\n                     el = args[i];\n                     // There is more than one parameter to the query so all checks should be \"exact\"\n-                    el.isExact = true;\n                     lev = callback(ty, el, NO_TYPE_FILTER);\n                     if (lev <= 1) {\n                         nbLev += 1;\n@@ -1049,7 +1093,7 @@ window.initSearch = function(rawSearchIndex) {\n                 return;\n             }\n             lev = Math.round(totalLev / nbLev);\n-            addIntoResults(false, results, ty.id, pos, 0, lev);\n+            addIntoResults(results, ty.id, pos, 0, lev);\n         }\n \n         function innerRunQuery() {\n@@ -1069,15 +1113,15 @@ window.initSearch = function(rawSearchIndex) {\n                     for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n                         ty = searchIndex[i];\n                         in_args = findArg(ty, elem, queryInfo.typeFilter);\n-                        addIntoResults(elem.isExact, results_in_args, ty.id, i, -1, in_args);\n+                        addIntoResults(results_in_args, ty.id, i, -1, in_args);\n                     }\n                 } else if (queryInfo.returned.length === 1) {\n                     // We received one returned argument to check, so looking into returned values.\n                     elem = queryInfo.returned[0];\n                     for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n                         ty = searchIndex[i];\n                         in_returned = checkReturned(ty, elem, queryInfo.typeFilter);\n-                        addIntoResults(elem.isExact, results_returned, ty.id, i, -1, in_returned);\n+                        addIntoResults(results_returned, ty.id, i, -1, in_returned);\n                     }\n                 }\n             } else if (queryInfo.foundElems > 0) {\n@@ -1096,12 +1140,11 @@ window.initSearch = function(rawSearchIndex) {\n         }\n         innerRunQuery();\n \n-        var ret = {\n-            \"in_args\": sortResults(results_in_args, true),\n-            \"returned\": sortResults(results_returned, true),\n-            \"others\": sortResults(results_others, false),\n-            \"query\": queryInfo,\n-        };\n+        var ret = createQueryResults(\n+            sortResults(results_in_args, true),\n+            sortResults(results_returned, true),\n+            sortResults(results_others, false),\n+            queryInfo);\n         handleAliases(ret, queryInfo.original.replace(/\"/g, \"\").toLowerCase(), filterCrates);\n         return ret;\n     }\n@@ -1241,7 +1284,7 @@ window.initSearch = function(rawSearchIndex) {\n \n         var output = document.createElement(\"div\");\n         var length = 0;\n-        if (array.length > 0) {\n+        if (array.length > 0 && query.error === null) {\n             output.className = \"search-results \" + extraClass;\n \n             array.forEach(function(item) {\n@@ -1294,6 +1337,9 @@ window.initSearch = function(rawSearchIndex) {\n                 link.appendChild(wrapper);\n                 output.appendChild(link);\n             });\n+        } else if (query.error !== null) {\n+            output.className = \"search-failed\" + extraClass;\n+            output.innerHTML = \"Syntax error: \" + query.error;\n         } else {\n             output.className = \"search-failed\" + extraClass;\n             output.innerHTML = \"No results :(<br/>\" +"}]}