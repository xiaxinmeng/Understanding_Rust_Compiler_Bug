{"sha": "49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YmE5MzYxZDg3ZjVkNThkNTRmZGQxNjRlZjIxMjhjZDUwZWQ0YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-27T13:19:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-27T13:19:48Z"}, "message": "Auto merge of #86295 - usbalbin:revert_revert_of_constness, r=RalfJung\n\nRevert revert of constness in #86003\n\nRe-constify `mem::swap`, `mem::replace`, `ptr::write` which were marked as not `const` in #86003\n\nOnce the checks pass, this should solve #86236", "tree": {"sha": "9efc0b34c080247f2c656b7e4e4e04a0bc31befd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9efc0b34c080247f2c656b7e4e4e04a0bc31befd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "html_url": "https://github.com/rust-lang/rust/commit/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543ab9964065dc2b4e47d7bff5e83c84519f265e", "url": "https://api.github.com/repos/rust-lang/rust/commits/543ab9964065dc2b4e47d7bff5e83c84519f265e", "html_url": "https://github.com/rust-lang/rust/commit/543ab9964065dc2b4e47d7bff5e83c84519f265e"}, {"sha": "4aa1267cbb9d2428e9da6fa05838206c965a96d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa1267cbb9d2428e9da6fa05838206c965a96d4", "html_url": "https://github.com/rust-lang/rust/commit/4aa1267cbb9d2428e9da6fa05838206c965a96d4"}], "stats": {"total": 248, "additions": 231, "deletions": 17}, "files": [{"sha": "5bf47c3951da22ff93397bf17e8abf315bf089c2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -682,7 +682,8 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn swap<T>(x: &mut T, y: &mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const fn swap<T>(x: &mut T, y: &mut T) {\n     // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n     // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {\n@@ -812,7 +813,8 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n-pub fn replace<T>(dest: &mut T, src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n     // nothing here can panic."}, {"sha": "4b81c39ea1d1b5e9ef181d18c9e0e2a1482ad202", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -430,7 +430,8 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n }\n \n #[inline]\n-pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n     // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary\n     // reinterpretation of values as (chunkable) byte arrays, and the loop in the\n     // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back\n@@ -563,7 +564,8 @@ const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n     // SAFETY: the caller must guarantee that `dst` is valid to be\n     // cast to a mutable reference (valid for writes, aligned, initialized),\n     // and cannot overlap `src` since `dst` must point to a distinct\n@@ -869,10 +871,12 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn write<T>(dst: *mut T, src: T) {\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n+pub const unsafe fn write<T>(dst: *mut T, src: T) {\n     // We are calling the intrinsics directly to avoid function calls in the generated code\n     // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n@@ -964,7 +968,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n pub const unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access"}, {"sha": "93ee74719ffa37f2aa0369097c6d32bc3d4a5e01", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -1002,8 +1002,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[inline(always)]\n-    pub unsafe fn write(self, val: T)\n+    pub const unsafe fn write(self, val: T)\n     where\n         T: Sized,\n     {\n@@ -1056,7 +1057,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write_unaligned`]: crate::ptr::write_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[inline(always)]\n     pub const unsafe fn write_unaligned(self, val: T)\n     where"}, {"sha": "152fed803ecdb751167ccbb31a3155958920523a", "filename": "library/core/tests/const_ptr.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Ftests%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/library%2Fcore%2Ftests%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconst_ptr.rs?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -49,3 +49,53 @@ fn mut_ptr_read() {\n     const UNALIGNED: u16 = unsafe { UNALIGNED_PTR.read_unaligned() };\n     assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n }\n+\n+#[test]\n+fn write() {\n+    use core::ptr;\n+\n+    const fn write_aligned() -> i32 {\n+        let mut res = 0;\n+        unsafe {\n+            ptr::write(&mut res as *mut _, 42);\n+        }\n+        res\n+    }\n+    const ALIGNED: i32 = write_aligned();\n+    assert_eq!(ALIGNED, 42);\n+\n+    const fn write_unaligned() -> [u16; 2] {\n+        let mut two_aligned = [0u16; 2];\n+        unsafe {\n+            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            ptr::write_unaligned(unaligned_ptr, u16::from_ne_bytes([0x23, 0x45]));\n+        }\n+        two_aligned\n+    }\n+    const UNALIGNED: [u16; 2] = write_unaligned();\n+    assert_eq!(UNALIGNED, [u16::from_ne_bytes([0x00, 0x23]), u16::from_ne_bytes([0x45, 0x00])]);\n+}\n+\n+#[test]\n+fn mut_ptr_write() {\n+    const fn aligned() -> i32 {\n+        let mut res = 0;\n+        unsafe {\n+            (&mut res as *mut i32).write(42);\n+        }\n+        res\n+    }\n+    const ALIGNED: i32 = aligned();\n+    assert_eq!(ALIGNED, 42);\n+\n+    const fn write_unaligned() -> [u16; 2] {\n+        let mut two_aligned = [0u16; 2];\n+        unsafe {\n+            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            unaligned_ptr.write_unaligned(u16::from_ne_bytes([0x23, 0x45]));\n+        }\n+        two_aligned\n+    }\n+    const UNALIGNED: [u16; 2] = write_unaligned();\n+    assert_eq!(UNALIGNED, [u16::from_ne_bytes([0x00, 0x23]), u16::from_ne_bytes([0x45, 0x00])]);\n+}"}, {"sha": "c45198cc39b08f9d73e1b204ed04b74ee4219e92", "filename": "src/test/ui/const-ptr/out_of_bounds_read.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern: evaluation of constant value failed\n+\n+#![feature(const_ptr_read)]\n+#![feature(const_ptr_offset)]\n+\n+fn main() {\n+    use std::ptr;\n+\n+    const DATA: [u32; 1] = [42];\n+\n+    const PAST_END_PTR: *const u32 = unsafe { DATA.as_ptr().add(1) };\n+\n+    const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n+    const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n+    const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n+}"}, {"sha": "67175d5d1f5c3509764e9e824816f4ba85b37541", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -0,0 +1,70 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   | \n+  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:13:33\n+   |\n+LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n+   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   | \n+  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | \n+  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:14:39\n+   |\n+LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n+   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   | \n+  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | \n+  ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { read(self) }\n+   |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:15:37\n+   |\n+LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n+   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "48d128b10e802a990e4d060418de90165489f796", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -0,0 +1,51 @@\n+#![stable(feature = \"dummy\", since = \"1.0.0\")]\n+\n+// ignore-tidy-linelength\n+#![feature(intrinsics, staged_api)]\n+#![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n+use std::mem;\n+\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+}\n+\n+const COPY_ZERO: () = unsafe {\n+    // Since we are not copying anything, this should be allowed.\n+    let src = ();\n+    let mut dst = ();\n+    copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+};\n+\n+const COPY_OOB_1: () = unsafe {\n+    let mut x = 0i32;\n+    let dangle = (&mut x as *mut i32).wrapping_add(10);\n+    // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n+    copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ evaluation of constant value failed [E0080]\n+};\n+const COPY_OOB_2: () = unsafe {\n+    let x = 0i32;\n+    let dangle = (&x as *const i32).wrapping_add(10);\n+    // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n+    copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ evaluation of constant value failed [E0080]\n+    //~| memory access failed: pointer must be in-bounds\n+};\n+\n+const COPY_SIZE_OVERFLOW: () = unsafe {\n+    let x = 0;\n+    let mut y = 0;\n+    copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ evaluation of constant value failed [E0080]\n+    //~| overflow computing total size of `copy`\n+};\n+const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n+    let x = 0;\n+    let mut y = 0;\n+    copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ evaluation of constant value failed [E0080]\n+    //~| overflow computing total size of `copy_nonoverlapping`\n+};\n+\n+fn main() {\n+}"}, {"sha": "c1779743e8e00b4599a9e3ccfd2d52a0a3714f44", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -0,0 +1,27 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:27:5\n+   |\n+LL |     copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:33:5\n+   |\n+LL |     copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:40:5\n+   |\n+LL |     copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:46:5\n+   |\n+LL |     copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c7fee9e6b4c5a2f8edcef7ef624ffcaa60721d55", "filename": "src/test/ui/thread-local-static.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fthread-local-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fthread-local-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-static.rs?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -11,7 +11,6 @@ const fn g(x: &mut [u32; 8]) {\n     //~| ERROR mutable references are not allowed\n     //~| ERROR use of mutable static is unsafe\n     //~| constant functions cannot refer to statics\n-    //~| ERROR calls in constant functions are limited to constant functions\n }\n \n fn main() {}"}, {"sha": "08bf593a5a748d92c1058a33d55036d04c3ad879", "filename": "src/test/ui/thread-local-static.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fthread-local-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ba9361d87f5d58d54fdd164ef2128cd50ed4b4/src%2Ftest%2Fui%2Fthread-local-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-static.stderr?ref=49ba9361d87f5d58d54fdd164ef2128cd50ed4b4", "patch": "@@ -30,12 +30,6 @@ LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/thread-local-static.rs:9:5\n-   |\n-LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n   --> $DIR/thread-local-static.rs:9:23\n    |\n@@ -44,7 +38,7 @@ LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0013, E0015, E0133, E0658.\n+Some errors have detailed explanations: E0013, E0133, E0658.\n For more information about an error, try `rustc --explain E0013`."}]}