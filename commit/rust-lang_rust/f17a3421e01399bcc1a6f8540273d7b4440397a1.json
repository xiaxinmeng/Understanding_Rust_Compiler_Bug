{"sha": "f17a3421e01399bcc1a6f8540273d7b4440397a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxN2EzNDIxZTAxMzk5YmNjMWE2Zjg1NDAyNzNkN2I0NDQwMzk3YTE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-02-10T03:36:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-10T20:12:10Z"}, "message": "Cleanup for 'be' statement and comments about future typestate", "tree": {"sha": "dc17d7b517a90121f09f400014e6c38d94f52b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc17d7b517a90121f09f400014e6c38d94f52b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17a3421e01399bcc1a6f8540273d7b4440397a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17a3421e01399bcc1a6f8540273d7b4440397a1", "html_url": "https://github.com/rust-lang/rust/commit/f17a3421e01399bcc1a6f8540273d7b4440397a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17a3421e01399bcc1a6f8540273d7b4440397a1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6461cf30de748fbe310640cd9c195965fc3da229", "url": "https://api.github.com/repos/rust-lang/rust/commits/6461cf30de748fbe310640cd9c195965fc3da229", "html_url": "https://github.com/rust-lang/rust/commit/6461cf30de748fbe310640cd9c195965fc3da229"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "61a7bdc13f54feefbcce33d9a263f203c97ab081", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=f17a3421e01399bcc1a6f8540273d7b4440397a1", "patch": "@@ -315,6 +315,17 @@ fn index_native_item(native_mod_index index, @native_item it) {\n     }\n }\n \n+fn is_call_expr(@expr e) -> bool {\n+    alt (e.node) {\n+        case (expr_call(_, _, _)) {\n+            ret true;\n+        }\n+        case (_) {\n+            ret false;\n+        }\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "ea4cf12c48c0801a8e6e3722a93d5c4f7715bc74", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=f17a3421e01399bcc1a6f8540273d7b4440397a1", "patch": "@@ -1203,7 +1203,13 @@ impure fn parse_stmt(parser p) -> @ast.stmt {\n         case (token.BE) {\n             p.bump();\n             auto e = parse_expr(p);\n-            ret @spanned(lo, e.span, ast.stmt_be(e));\n+            // FIXME: Is this the right place for this check?\n+            if /*check*/ (ast.is_call_expr(e)) {\n+                ret @spanned(lo, e.span, ast.stmt_be(e));\n+            }\n+            else {\n+                p.err(\"Non-call expression in tail call\");\n+            }\n         }\n \n         case (token.LET) {"}, {"sha": "45d54e6a9d00e17e583b4c93667d7c04da826cc1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f17a3421e01399bcc1a6f8540273d7b4440397a1", "patch": "@@ -3129,7 +3129,10 @@ fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n }\n \n fn trans_be(@block_ctxt cx, @ast.expr e) -> result {\n-    // FIXME: So this isn't actually a tail call\n+    // FIXME: This should be a typestate precondition\n+    check ast.is_call_expr(e);\n+    // FIXME: Turn this into a real tail call once\n+    // calling convention issues are settled\n     ret trans_ret(cx, some(e));\n }\n "}, {"sha": "4c3903a71394393a119e3e9a767de0a6611f7001", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f17a3421e01399bcc1a6f8540273d7b4440397a1", "patch": "@@ -1720,18 +1720,12 @@ fn check_stmt(&@fn_ctxt fcx, &@ast.stmt stmt) -> @ast.stmt {\n         }\n \n         case (ast.stmt_be(?expr)) {\n-            alt (expr.node) {\n-                case (ast.expr_call(_, _, _)) {\n-                    auto expr_0 = check_expr(fcx, expr);\n-                    auto expr_1 = demand_expr(fcx, fcx.ret_ty, expr_0);\n-                    ret @fold.respan[ast.stmt_](stmt.span,\n-                                                ast.stmt_be(expr_1));\n-                }\n-                case (_) {\n-                    fcx.ccx.sess.err(\"Non-call expression in tail call\");\n-                    fail;\n-                }\n-            }\n+            /* FIXME: prove instead of check */\n+            check ast.is_call_expr(expr);\n+            auto expr_0 = check_expr(fcx, expr);\n+            auto expr_1 = demand_expr(fcx, fcx.ret_ty, expr_0);\n+            ret @fold.respan[ast.stmt_](stmt.span,\n+                                        ast.stmt_be(expr_1));\n         }\n \n         case (ast.stmt_log(?expr)) {"}, {"sha": "00a451f647aabc76e5405edafb7cecbe4f83d1b1", "filename": "src/test/compile-fail/tail-non-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs?ref=f17a3421e01399bcc1a6f8540273d7b4440397a1", "patch": "@@ -7,4 +7,4 @@ fn f() -> int {\n \n fn main() {\n   auto y = f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "64beedb9a99bb45b4428967470383dc1cf2a6804", "filename": "src/test/compile-fail/tail-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17a3421e01399bcc1a6f8540273d7b4440397a1/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs?ref=f17a3421e01399bcc1a6f8540273d7b4440397a1", "patch": "@@ -10,4 +10,4 @@ fn g() -> uint {\n \n fn main() {\n   auto y = f();\n-}\n\\ No newline at end of file\n+}"}]}