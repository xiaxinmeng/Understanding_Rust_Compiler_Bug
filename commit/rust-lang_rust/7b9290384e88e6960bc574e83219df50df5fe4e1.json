{"sha": "7b9290384e88e6960bc574e83219df50df5fe4e1", "node_id": "C_kwDOAAsO6NoAKDdiOTI5MDM4NGU4OGU2OTYwYmM1NzRlODMyMTlkZjUwZGY1ZmU0ZTE", "commit": {"author": {"name": "Ed Page", "email": "eopage@gmail.com", "date": "2023-05-13T17:09:00Z"}, "committer": {"name": "Ed Page", "email": "eopage@gmail.com", "date": "2023-05-13T17:09:00Z"}, "message": "refactor: Remove bespoke from_os_str_bytes_unchecked", "tree": {"sha": "e3e9cab2704ef779d4744d46d6db2eb8f934f57c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3e9cab2704ef779d4744d46d6db2eb8f934f57c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b9290384e88e6960bc574e83219df50df5fe4e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9290384e88e6960bc574e83219df50df5fe4e1", "html_url": "https://github.com/rust-lang/rust/commit/7b9290384e88e6960bc574e83219df50df5fe4e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b9290384e88e6960bc574e83219df50df5fe4e1/comments", "author": {"login": "epage", "id": 60961, "node_id": "MDQ6VXNlcjYwOTYx", "avatar_url": "https://avatars.githubusercontent.com/u/60961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epage", "html_url": "https://github.com/epage", "followers_url": "https://api.github.com/users/epage/followers", "following_url": "https://api.github.com/users/epage/following{/other_user}", "gists_url": "https://api.github.com/users/epage/gists{/gist_id}", "starred_url": "https://api.github.com/users/epage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epage/subscriptions", "organizations_url": "https://api.github.com/users/epage/orgs", "repos_url": "https://api.github.com/users/epage/repos", "events_url": "https://api.github.com/users/epage/events{/privacy}", "received_events_url": "https://api.github.com/users/epage/received_events", "type": "User", "site_admin": false}, "committer": {"login": "epage", "id": 60961, "node_id": "MDQ6VXNlcjYwOTYx", "avatar_url": "https://avatars.githubusercontent.com/u/60961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epage", "html_url": "https://github.com/epage", "followers_url": "https://api.github.com/users/epage/followers", "following_url": "https://api.github.com/users/epage/following{/other_user}", "gists_url": "https://api.github.com/users/epage/gists{/gist_id}", "starred_url": "https://api.github.com/users/epage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epage/subscriptions", "organizations_url": "https://api.github.com/users/epage/orgs", "repos_url": "https://api.github.com/users/epage/repos", "events_url": "https://api.github.com/users/epage/events{/privacy}", "received_events_url": "https://api.github.com/users/epage/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f1a6cd421d699aa249a282d7b5b7a8f486e3b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1a6cd421d699aa249a282d7b5b7a8f486e3b01", "html_url": "https://github.com/rust-lang/rust/commit/7f1a6cd421d699aa249a282d7b5b7a8f486e3b01"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "28cd3c4e4dbd2d301c5728443571810f39c39015", "filename": "library/std/src/path.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7b9290384e88e6960bc574e83219df50df5fe4e1/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b9290384e88e6960bc574e83219df50df5fe4e1/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=7b9290384e88e6960bc574e83219df50df5fe4e1", "patch": "@@ -299,20 +299,6 @@ where\n     }\n }\n \n-unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n-    // SAFETY: See note at the top of this module to understand why this and\n-    // `OsStr::bytes` are used:\n-    //\n-    // This casts are safe as OsStr is internally a wrapper around [u8] on all\n-    // platforms.\n-    //\n-    // Note that currently this relies on the special knowledge that std has;\n-    // these types are single-element structs but are not marked\n-    // repr(transparent) or repr(C) which would make these casts not allowable\n-    // outside std.\n-    unsafe { &*(s as *const [u8] as *const OsStr) }\n-}\n-\n // Detect scheme on Redox\n fn has_redox_scheme(s: &[u8]) -> bool {\n     cfg!(target_os = \"redox\") && s.contains(&b':')\n@@ -344,7 +330,12 @@ fn rsplit_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n     if before == Some(b\"\") {\n         (Some(file), None)\n     } else {\n-        unsafe { (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s))) }\n+        unsafe {\n+            (\n+                before.map(|s| OsStr::from_os_str_bytes_unchecked(s)),\n+                after.map(|s| OsStr::from_os_str_bytes_unchecked(s)),\n+            )\n+        }\n     }\n }\n \n@@ -364,7 +355,12 @@ fn split_file_at_dot(file: &OsStr) -> (&OsStr, Option<&OsStr>) {\n     };\n     let before = &slice[..i];\n     let after = &slice[i + 1..];\n-    unsafe { (u8_slice_as_os_str(before), Some(u8_slice_as_os_str(after))) }\n+    unsafe {\n+        (\n+            OsStr::from_os_str_bytes_unchecked(before),\n+            Some(OsStr::from_os_str_bytes_unchecked(after)),\n+        )\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -743,7 +739,7 @@ impl<'a> Components<'a> {\n             // separately via `include_cur_dir`\n             b\"..\" => Some(Component::ParentDir),\n             b\"\" => None,\n-            _ => Some(Component::Normal(unsafe { u8_slice_as_os_str(comp) })),\n+            _ => Some(Component::Normal(unsafe { OsStr::from_os_str_bytes_unchecked(comp) })),\n         }\n     }\n \n@@ -900,7 +896,7 @@ impl<'a> Iterator for Components<'a> {\n                     let raw = &self.path[..self.prefix_len()];\n                     self.path = &self.path[self.prefix_len()..];\n                     return Some(Component::Prefix(PrefixComponent {\n-                        raw: unsafe { u8_slice_as_os_str(raw) },\n+                        raw: unsafe { OsStr::from_os_str_bytes_unchecked(raw) },\n                         parsed: self.prefix.unwrap(),\n                     }));\n                 }\n@@ -972,7 +968,7 @@ impl<'a> DoubleEndedIterator for Components<'a> {\n                 State::Prefix if self.prefix_len() > 0 => {\n                     self.back = State::Done;\n                     return Some(Component::Prefix(PrefixComponent {\n-                        raw: unsafe { u8_slice_as_os_str(self.path) },\n+                        raw: unsafe { OsStr::from_os_str_bytes_unchecked(self.path) },\n                         parsed: self.prefix.unwrap(),\n                     }));\n                 }\n@@ -2011,7 +2007,7 @@ impl Path {\n     // The following (private!) function allows construction of a path from a u8\n     // slice, which is only safe when it is known to follow the OsStr encoding.\n     unsafe fn from_u8_slice(s: &[u8]) -> &Path {\n-        unsafe { Path::new(u8_slice_as_os_str(s)) }\n+        unsafe { Path::new(OsStr::from_os_str_bytes_unchecked(s)) }\n     }\n     // The following (private!) function reveals the byte encoding used for OsStr.\n     fn as_u8_slice(&self) -> &[u8] {"}, {"sha": "c9c2d10e6c444f42bddaef7294ca96b464ac577e", "filename": "library/std/src/sys/windows/path.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b9290384e88e6960bc574e83219df50df5fe4e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b9290384e88e6960bc574e83219df50df5fe4e1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs?ref=7b9290384e88e6960bc574e83219df50df5fe4e1", "patch": "@@ -1,7 +1,6 @@\n use super::{c, fill_utf16_buf, to_u16s};\n use crate::ffi::{OsStr, OsString};\n use crate::io;\n-use crate::mem;\n use crate::path::{Path, PathBuf, Prefix};\n use crate::ptr;\n \n@@ -11,16 +10,6 @@ mod tests;\n pub const MAIN_SEP_STR: &str = \"\\\\\";\n pub const MAIN_SEP: char = '\\\\';\n \n-/// # Safety\n-///\n-/// `bytes` must be a valid wtf8 encoded slice\n-#[inline]\n-unsafe fn bytes_as_os_str(bytes: &[u8]) -> &OsStr {\n-    // &OsStr is layout compatible with &Slice, which is compatible with &Wtf8,\n-    // which is compatible with &[u8].\n-    mem::transmute(bytes)\n-}\n-\n #[inline]\n pub fn is_sep_byte(b: u8) -> bool {\n     b == b'/' || b == b'\\\\'\n@@ -101,7 +90,7 @@ impl<'a> PrefixParserSlice<'a, '_> {\n         // &[u8] and back. This is safe to do because (1) we only look at ASCII\n         // contents of the encoding and (2) new &OsStr values are produced only\n         // from ASCII-bounded slices of existing &OsStr values.\n-        unsafe { bytes_as_os_str(&self.path.as_os_str_bytes()[self.index..]) }\n+        unsafe { OsStr::from_os_str_bytes_unchecked(&self.path.as_os_str_bytes()[self.index..]) }\n     }\n }\n \n@@ -210,7 +199,12 @@ fn parse_next_component(path: &OsStr, verbatim: bool) -> (&OsStr, &OsStr) {\n             // is encoded in a single byte, therefore `bytes[separator_start]` and\n             // `bytes[separator_end]` must be code point boundaries and thus\n             // `bytes[..separator_start]` and `bytes[separator_end..]` are valid wtf8 slices.\n-            unsafe { (bytes_as_os_str(component), bytes_as_os_str(path)) }\n+            unsafe {\n+                (\n+                    OsStr::from_os_str_bytes_unchecked(component),\n+                    OsStr::from_os_str_bytes_unchecked(path),\n+                )\n+            }\n         }\n         None => (path, OsStr::new(\"\")),\n     }"}]}