{"sha": "44d8abcc0f372dbc7ad58f312303d2e59612dec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDhhYmNjMGYzNzJkYmM3YWQ1OGYzMTIzMDNkMmU1OTYxMmRlYzk=", "commit": {"author": {"name": "Kyle Mayes", "email": "kyle@mayeses.com", "date": "2015-11-14T03:18:59Z"}, "committer": {"name": "Kyle Mayes", "email": "kyle@mayeses.com", "date": "2015-11-14T03:18:59Z"}, "message": "Move the panicking parse functions out of the parser\n\nSince these functions are only used by the AST quoting syntax extensions, they should be there instead of in the parser.", "tree": {"sha": "e3864d10608c8235eb0582ffd30cde25e558fd68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3864d10608c8235eb0582ffd30cde25e558fd68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d8abcc0f372dbc7ad58f312303d2e59612dec9", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d8abcc0f372dbc7ad58f312303d2e59612dec9", "html_url": "https://github.com/rust-lang/rust/commit/44d8abcc0f372dbc7ad58f312303d2e59612dec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d8abcc0f372dbc7ad58f312303d2e59612dec9/comments", "author": {"login": "KyleMayes", "id": 1016104, "node_id": "MDQ6VXNlcjEwMTYxMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1016104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KyleMayes", "html_url": "https://github.com/KyleMayes", "followers_url": "https://api.github.com/users/KyleMayes/followers", "following_url": "https://api.github.com/users/KyleMayes/following{/other_user}", "gists_url": "https://api.github.com/users/KyleMayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/KyleMayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KyleMayes/subscriptions", "organizations_url": "https://api.github.com/users/KyleMayes/orgs", "repos_url": "https://api.github.com/users/KyleMayes/repos", "events_url": "https://api.github.com/users/KyleMayes/events{/privacy}", "received_events_url": "https://api.github.com/users/KyleMayes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KyleMayes", "id": 1016104, "node_id": "MDQ6VXNlcjEwMTYxMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1016104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KyleMayes", "html_url": "https://github.com/KyleMayes", "followers_url": "https://api.github.com/users/KyleMayes/followers", "following_url": "https://api.github.com/users/KyleMayes/following{/other_user}", "gists_url": "https://api.github.com/users/KyleMayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/KyleMayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KyleMayes/subscriptions", "organizations_url": "https://api.github.com/users/KyleMayes/orgs", "repos_url": "https://api.github.com/users/KyleMayes/repos", "events_url": "https://api.github.com/users/KyleMayes/events{/privacy}", "received_events_url": "https://api.github.com/users/KyleMayes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10569cac5561167c10359d20a3ca38dc4ae2efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10569cac5561167c10359d20a3ca38dc4ae2efa", "html_url": "https://github.com/rust-lang/rust/commit/c10569cac5561167c10359d20a3ca38dc4ae2efa"}], "stats": {"total": 104, "additions": 53, "deletions": 51}, "files": [{"sha": "d743a601bbb4b2f23c4cafb3bb19137daeb957ca", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/44d8abcc0f372dbc7ad58f312303d2e59612dec9/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d8abcc0f372dbc7ad58f312303d2e59612dec9/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=44d8abcc0f372dbc7ad58f312303d2e59612dec9", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{self, TokenTree};\n+use ast::{self, Arg, Arm, Block, Expr, Item, Pat, Path, Stmt, TokenTree, Ty};\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n use ext::build::AstBuilder;\n+use parse::parser::{Parser, PathParsingMode};\n use parse::token::*;\n use parse::token;\n use ptr::P;\n@@ -329,6 +330,52 @@ pub mod rt {\n     }\n }\n \n+// These panicking parsing functions are used by the quote_*!() syntax extensions,\n+// but shouldn't be used otherwise.\n+pub fn parse_expr_panic(parser: &mut Parser) -> P<Expr> {\n+    panictry!(parser.parse_expr())\n+}\n+\n+pub fn parse_item_panic(parser: &mut Parser) -> Option<P<Item>> {\n+    panictry!(parser.parse_item())\n+}\n+\n+pub fn parse_pat_panic(parser: &mut Parser) -> P<Pat> {\n+    panictry!(parser.parse_pat())\n+}\n+\n+pub fn parse_arm_panic(parser: &mut Parser) -> Arm {\n+    panictry!(parser.parse_arm())\n+}\n+\n+pub fn parse_ty_panic(parser: &mut Parser) -> P<Ty> {\n+    panictry!(parser.parse_ty())\n+}\n+\n+pub fn parse_stmt_panic(parser: &mut Parser) -> Option<P<Stmt>> {\n+    panictry!(parser.parse_stmt())\n+}\n+\n+pub fn parse_attribute_panic(parser: &mut Parser, permit_inner: bool) -> ast::Attribute {\n+    panictry!(parser.parse_attribute(permit_inner))\n+}\n+\n+pub fn parse_arg_panic(parser: &mut Parser) -> Arg {\n+    panictry!(parser.parse_arg())\n+}\n+\n+pub fn parse_block_panic(parser: &mut Parser) -> P<Block> {\n+    panictry!(parser.parse_block())\n+}\n+\n+pub fn parse_meta_item_panic(parser: &mut Parser) -> P<ast::MetaItem> {\n+    panictry!(parser.parse_meta_item())\n+}\n+\n+pub fn parse_path_panic(parser: &mut Parser, mode: PathParsingMode) -> ast::Path {\n+    panictry!(parser.parse_path(mode))\n+}\n+\n pub fn expand_quote_tokens<'cx>(cx: &'cx mut ExtCtxt,\n                                 sp: Span,\n                                 tts: &[TokenTree])\n@@ -864,8 +911,10 @@ fn expand_parse_call(cx: &ExtCtxt,\n                      cx.expr_ident(sp, id_ext(\"new_parser_from_tts\")),\n                      vec!(parse_sess_call(), cfg_call(), tts_expr));\n \n-    let expr = cx.expr_method_call(sp, new_parser_call, id_ext(parse_method),\n-                                   arg_exprs);\n+    let path = vec![id_ext(\"syntax\"), id_ext(\"ext\"), id_ext(\"quote\"), id_ext(parse_method)];\n+    let mut args = vec![cx.expr_mut_addr_of(sp, new_parser_call)];\n+    args.extend(arg_exprs);\n+    let expr = cx.expr_call_global(sp, path, args);\n \n     if parse_method == \"parse_attribute\" {\n         expand_wrapper(cx, sp, cx_expr, expr, &[&[\"syntax\", \"ext\", \"quote\", \"rt\"],"}, {"sha": "bde910838cbae606cf18de3c9c442cf11ee56f47", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/44d8abcc0f372dbc7ad58f312303d2e59612dec9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d8abcc0f372dbc7ad58f312303d2e59612dec9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=44d8abcc0f372dbc7ad58f312303d2e59612dec9", "patch": "@@ -362,53 +362,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    // Panicing fns (for now!)\n-    // These functions are used by the quote_*!() syntax extensions, but shouldn't\n-    // be used otherwise.\n-    pub fn parse_expr_panic(&mut self) -> P<Expr> {\n-        panictry!(self.parse_expr())\n-    }\n-\n-    pub fn parse_item_panic(&mut self) -> Option<P<Item>> {\n-        panictry!(self.parse_item())\n-    }\n-\n-    pub fn parse_pat_panic(&mut self) -> P<Pat> {\n-        panictry!(self.parse_pat())\n-    }\n-\n-    pub fn parse_arm_panic(&mut self) -> Arm {\n-        panictry!(self.parse_arm())\n-    }\n-\n-    pub fn parse_ty_panic(&mut self) -> P<Ty> {\n-        panictry!(self.parse_ty())\n-    }\n-\n-    pub fn parse_stmt_panic(&mut self) -> Option<P<Stmt>> {\n-        panictry!(self.parse_stmt())\n-    }\n-\n-    pub fn parse_attribute_panic(&mut self, permit_inner: bool) -> ast::Attribute {\n-        panictry!(self.parse_attribute(permit_inner))\n-    }\n-\n-    pub fn parse_arg_panic(&mut self) -> Arg {\n-        panictry!(self.parse_arg())\n-    }\n-\n-    pub fn parse_block_panic(&mut self) -> P<Block> {\n-        panictry!(self.parse_block())\n-    }\n-\n-    pub fn parse_meta_item_panic(&mut self) -> P<ast::MetaItem> {\n-        panictry!(self.parse_meta_item())\n-    }\n-\n-    pub fn parse_path_panic(&mut self, mode: PathParsingMode) -> ast::Path {\n-        panictry!(self.parse_path(mode))\n-    }\n-\n     /// Convert a token to a string using self's reader\n     pub fn token_to_string(token: &token::Token) -> String {\n         pprust::token_to_string(token)"}, {"sha": "7ce80a5647c3a60437681d67be1c7e88ba414b1b", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d8abcc0f372dbc7ad58f312303d2e59612dec9/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d8abcc0f372dbc7ad58f312303d2e59612dec9/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=44d8abcc0f372dbc7ad58f312303d2e59612dec9", "patch": "@@ -54,7 +54,7 @@ fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree])\n     // Parse an expression and emit it unchanged.\n     let mut parser = parse::new_parser_from_tts(cx.parse_sess(),\n         cx.cfg(), tts.to_vec());\n-    let expr = parser.parse_expr_panic();\n+    let expr = parser.parse_expr().unwrap();\n     MacEager::expr(quote_expr!(&mut *cx, $expr))\n }\n "}]}