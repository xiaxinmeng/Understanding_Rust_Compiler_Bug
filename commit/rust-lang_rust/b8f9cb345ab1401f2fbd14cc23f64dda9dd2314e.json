{"sha": "b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "node_id": "C_kwDOAAsO6NoAKGI4ZjljYjM0NWFiMTQwMWYyZmJkMTRjYzIzZjY0ZGRhOWRkMjMxNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T17:44:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T17:44:30Z"}, "message": "Auto merge of #106696 - kylematsuda:early-binder, r=lcnr\n\nSwitch to `EarlyBinder` for `const_param_default` and `impl_trait_ref` queries\n\nPart of the work to close #105779 and implement https://github.com/rust-lang/types-team/issues/78.\n\nSeveral queries `X` have a `bound_X` variant that wraps the output in `EarlyBinder`. This PR adds `EarlyBinder` to the return type of  `const_param_default` and `impl_trait_ref`, and removes their `bound_X` variants.\n\nr? `@lcnr`", "tree": {"sha": "ae7278fa324146c84aef5ec81f3f1dfd91c90c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae7278fa324146c84aef5ec81f3f1dfd91c90c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "html_url": "https://github.com/rust-lang/rust/commit/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6", "html_url": "https://github.com/rust-lang/rust/commit/4b51adf6ffa1ae2286ea436eb48cbaa8771886e6"}, {"sha": "6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b", "html_url": "https://github.com/rust-lang/rust/commit/6e969ea85eb8f5e504c1a0a06c0a63c515fadf3b"}], "stats": {"total": 257, "additions": 145, "deletions": 112}, "files": [{"sha": "8d2cc70c05f16b0e319a6cf15786c783ec6b01ed", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -511,9 +511,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             return tcx.const_error(ty).into();\n                         }\n                         if !infer_args && has_default {\n-                            tcx.bound_const_param_default(param.def_id)\n-                                .subst(tcx, substs.unwrap())\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()\n@@ -2068,7 +2066,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 };\n \n                 self.one_bound_for_assoc_type(\n-                    || traits::supertraits(tcx, ty::Binder::dummy(trait_ref)),\n+                    || traits::supertraits(tcx, ty::Binder::dummy(trait_ref.subst_identity())),\n                     || \"Self\".to_string(),\n                     assoc_ident,\n                     span,\n@@ -2157,7 +2155,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 .is_accessible_from(self.item_def_id(), tcx)\n                             && tcx.all_impls(*trait_def_id)\n                                 .any(|impl_def_id| {\n-                                    let trait_ref = tcx.bound_impl_trait_ref(impl_def_id);\n+                                    let trait_ref = tcx.impl_trait_ref(impl_def_id);\n                                     trait_ref.map_or(false, |trait_ref| {\n                                         let impl_ = trait_ref.subst(\n                                             tcx,\n@@ -2310,7 +2308,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative\n                     })\n                     .filter_map(|impl_def_id| tcx.impl_trait_ref(impl_def_id))\n-                    .map(|impl_| impl_.self_ty())\n+                    .map(|impl_| impl_.subst_identity().self_ty())\n                     // We don't care about blanket impls.\n                     .filter(|self_ty| !self_ty.has_non_region_param())\n                     .map(|self_ty| tcx.erase_regions(self_ty).to_string())"}, {"sha": "e58669433e2189c501620fd0af3f826f2accd333", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -540,7 +540,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n                     tcx,\n                     it.span,\n                     it.owner_id.def_id,\n-                    impl_trait_ref,\n+                    impl_trait_ref.subst_identity(),\n                     &impl_.items,\n                 );\n                 check_on_unimplemented(tcx, it);"}, {"sha": "770d7b6f927e4a4179752e85ca412ee7924e07d0", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -616,7 +616,8 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n ) -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed> {\n     let impl_m = tcx.opt_associated_item(def_id).unwrap();\n     let trait_m = tcx.opt_associated_item(impl_m.trait_item_def_id.unwrap()).unwrap();\n-    let impl_trait_ref = tcx.impl_trait_ref(impl_m.impl_container(tcx).unwrap()).unwrap();\n+    let impl_trait_ref =\n+        tcx.impl_trait_ref(impl_m.impl_container(tcx).unwrap()).unwrap().subst_identity();\n     let param_env = tcx.param_env(def_id);\n \n     // First, check a few of the same things as `compare_impl_method`,\n@@ -1684,7 +1685,8 @@ pub(super) fn compare_impl_const_raw(\n ) -> Result<(), ErrorGuaranteed> {\n     let impl_const_item = tcx.associated_item(impl_const_item_def);\n     let trait_const_item = tcx.associated_item(trait_const_item_def);\n-    let impl_trait_ref = tcx.impl_trait_ref(impl_const_item.container_id(tcx)).unwrap();\n+    let impl_trait_ref =\n+        tcx.impl_trait_ref(impl_const_item.container_id(tcx)).unwrap().subst_identity();\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n \n     let impl_c_span = tcx.def_span(impl_const_item_def.to_def_id());"}, {"sha": "912e0ec560b49e9768e482ec31ffa98a8740ecd3", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -182,7 +182,7 @@ fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n         hir::ItemKind::Impl(ref impl_) => {\n             let is_auto = tcx\n                 .impl_trait_ref(def_id)\n-                .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n+                .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.skip_binder().def_id));\n             if let (hir::Defaultness::Default { .. }, true) = (impl_.defaultness, is_auto) {\n                 let sp = impl_.of_trait.as_ref().map_or(item.span, |t| t.path.span);\n                 let mut err =\n@@ -1253,7 +1253,7 @@ fn check_impl<'tcx>(\n                 // `#[rustc_reservation_impl]` impls are not real impls and\n                 // therefore don't need to be WF (the trait's `Self: Trait` predicate\n                 // won't hold).\n-                let trait_ref = tcx.impl_trait_ref(item.owner_id).unwrap();\n+                let trait_ref = tcx.impl_trait_ref(item.owner_id).unwrap().subst_identity();\n                 let trait_ref = wfcx.normalize(\n                     ast_trait_ref.path.span,\n                     Some(WellFormedLoc::Ty(item.hir_id().expect_owner().def_id)),\n@@ -1350,7 +1350,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                     // is incorrect when dealing with unused substs, for example\n                     // for `struct Foo<const N: usize, const M: usize = { 1 - 2 }>`\n                     // we should eagerly error.\n-                    let default_ct = tcx.const_param_default(param.def_id);\n+                    let default_ct = tcx.const_param_default(param.def_id).subst_identity();\n                     if !default_ct.needs_subst() {\n                         wfcx.register_wf_obligation(\n                             tcx.def_span(param.def_id),\n@@ -1396,7 +1396,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             GenericParamDefKind::Const { .. } => {\n                 // If the param has a default, ...\n                 if is_our_default(param) {\n-                    let default_ct = tcx.const_param_default(param.def_id);\n+                    let default_ct = tcx.const_param_default(param.def_id).subst_identity();\n                     // ... and it's not a dependent default, ...\n                     if !default_ct.needs_subst() {\n                         // ... then substitute it with the default."}, {"sha": "5bdd18fcd637c7eb9b214e588f5a5e053081832d", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -192,7 +192,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n     let source = tcx.type_of(impl_did);\n     assert!(!source.has_escaping_bound_vars());\n     let target = {\n-        let trait_ref = tcx.impl_trait_ref(impl_did).unwrap();\n+        let trait_ref = tcx.impl_trait_ref(impl_did).unwrap().subst_identity();\n         assert_eq!(trait_ref.def_id, dispatch_from_dyn_trait);\n \n         trait_ref.substs.type_at(1)\n@@ -354,7 +354,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n     });\n \n     let source = tcx.type_of(impl_did);\n-    let trait_ref = tcx.impl_trait_ref(impl_did).unwrap();\n+    let trait_ref = tcx.impl_trait_ref(impl_did).unwrap().subst_identity();\n     assert_eq!(trait_ref.def_id, coerce_unsized_trait);\n     let target = trait_ref.substs.type_at(1);\n     debug!(\"visit_implementation_of_coerce_unsized: {:?} -> {:?} (bound)\", source, target);"}, {"sha": "2e9cd2fca01c139d366a0f1f43a06d1179c30f31", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -128,7 +128,7 @@ fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n \n     let impls = tcx.hir().trait_impls(def_id);\n     for &impl_def_id in impls {\n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n \n         check_impl(tcx, impl_def_id, trait_ref);\n         check_object_overlap(tcx, impl_def_id, trait_ref);"}, {"sha": "0aadc9f311b033e4ec3983d86fd8b072c4b85f2b", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn orphan_check_impl(\n     tcx: TyCtxt<'_>,\n     impl_def_id: LocalDefId,\n ) -> Result<(), ErrorGuaranteed> {\n-    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n     trait_ref.error_reported()?;\n \n     let ret = do_orphan_check_impl(tcx, trait_ref, impl_def_id);"}, {"sha": "a485768e37b832c551740a167bc64c20efb0df4a", "filename": "compiler/rustc_hir_analysis/src/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -14,6 +14,7 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let hir::ItemKind::Impl(ref impl_) = item.kind else { bug!() };\n \n     if let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) {\n+        let trait_ref = trait_ref.subst_identity();\n         let trait_def = tcx.trait_def(trait_ref.def_id);\n         let unsafe_attr =\n             impl_.generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\");"}, {"sha": "35f47dfc1a5e289b038e15041e93ff421ddd5149", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -1339,18 +1339,22 @@ fn suggest_impl_trait<'tcx>(\n     None\n }\n \n-fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n+fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::EarlyBinder<ty::TraitRef<'_>>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n     let item = tcx.hir().expect_item(def_id.expect_local());\n     match item.kind {\n-        hir::ItemKind::Impl(ref impl_) => impl_.of_trait.as_ref().map(|ast_trait_ref| {\n-            let selfty = tcx.type_of(def_id);\n-            icx.astconv().instantiate_mono_trait_ref(\n-                ast_trait_ref,\n-                selfty,\n-                check_impl_constness(tcx, impl_.constness, ast_trait_ref),\n-            )\n-        }),\n+        hir::ItemKind::Impl(ref impl_) => impl_\n+            .of_trait\n+            .as_ref()\n+            .map(|ast_trait_ref| {\n+                let selfty = tcx.type_of(def_id);\n+                icx.astconv().instantiate_mono_trait_ref(\n+                    ast_trait_ref,\n+                    selfty,\n+                    check_impl_constness(tcx, impl_.constness, ast_trait_ref),\n+                )\n+            })\n+            .map(ty::EarlyBinder),\n         _ => bug!(),\n     }\n }"}, {"sha": "a7e6494c15adb4cf57198821423968c51c4b9c66", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -87,7 +87,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         Node::Item(item) => match item.kind {\n             ItemKind::Impl(ref impl_) => {\n                 if impl_.defaultness.is_default() {\n-                    is_default_impl_trait = tcx.impl_trait_ref(def_id).map(ty::Binder::dummy);\n+                    is_default_impl_trait =\n+                        tcx.impl_trait_ref(def_id).map(|t| ty::Binder::dummy(t.subst_identity()));\n                 }\n                 &impl_.generics\n             }\n@@ -251,7 +252,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // for details.\n     if let Node::Item(&Item { kind: ItemKind::Impl { .. }, .. }) = node {\n         let self_ty = tcx.type_of(def_id);\n-        let trait_ref = tcx.impl_trait_ref(def_id);\n+        let trait_ref = tcx.impl_trait_ref(def_id).map(ty::EarlyBinder::subst_identity);\n         cgp::setup_constraining_predicates(\n             tcx,\n             &mut predicates,"}, {"sha": "4fe893442b9bd2987c0ed22233a1eb88a2fe5c9c", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -85,7 +85,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n     }\n     let impl_generics = tcx.generics_of(impl_def_id);\n     let impl_predicates = tcx.predicates_of(impl_def_id);\n-    let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n+    let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).map(ty::EarlyBinder::subst_identity);\n \n     let mut input_parameters = cgp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n     cgp::identify_constrained_generic_params("}, {"sha": "bcda26c4cc854156c2c7ed4fdfa75d8e1e95a2e7", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -90,7 +90,7 @@ pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n \n fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId) -> Option<Node> {\n     let trait_ref = tcx.impl_trait_ref(impl1_def_id)?;\n-    let trait_def = tcx.trait_def(trait_ref.def_id);\n+    let trait_def = tcx.trait_def(trait_ref.skip_binder().def_id);\n \n     let impl2_node = trait_def.ancestors(tcx, impl1_def_id.to_def_id()).ok()?.nth(1)?;\n \n@@ -207,7 +207,7 @@ fn unconstrained_parent_impl_substs<'tcx>(\n     let impl_generic_predicates = tcx.predicates_of(impl_def_id);\n     let mut unconstrained_parameters = FxHashSet::default();\n     let mut constrained_params = FxHashSet::default();\n-    let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n+    let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).map(ty::EarlyBinder::subst_identity);\n \n     // Unfortunately the functions in `constrained_generic_parameters` don't do\n     // what we want here. We want only a list of constrained parameters while\n@@ -370,7 +370,7 @@ fn check_predicates<'tcx>(\n     });\n \n     // Include the well-formed predicates of the type parameters of the impl.\n-    for arg in tcx.impl_trait_ref(impl1_def_id).unwrap().substs {\n+    for arg in tcx.impl_trait_ref(impl1_def_id).unwrap().subst_identity().substs {\n         let infcx = &tcx.infer_ctxt().build();\n         let obligations = wf::obligations(\n             infcx,"}, {"sha": "6ed8adb47425a80197d6a2453f54302953fbb376", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -1224,9 +1224,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            tcx.bound_const_param_default(param.def_id)\n-                                .subst(tcx, substs.unwrap())\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}, {"sha": "3c4eef781634fefdc339c36c432cf7ae3c3b6ae4", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -1072,7 +1072,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // the impl, if local to crate (item may be defaulted), else nothing.\n                     let Some(item) = self.associated_value(impl_did, item_name).or_else(|| {\n                         let impl_trait_ref = self.tcx.impl_trait_ref(impl_did)?;\n-                        self.associated_value(impl_trait_ref.def_id, item_name)\n+                        self.associated_value(impl_trait_ref.skip_binder().def_id, item_name)\n                     }) else {\n                         continue;\n                     };\n@@ -1090,7 +1090,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let insertion = match self.tcx.impl_trait_ref(impl_did) {\n                         None => String::new(),\n                         Some(trait_ref) => {\n-                            format!(\" of the trait `{}`\", self.tcx.def_path_str(trait_ref.def_id))\n+                            format!(\n+                                \" of the trait `{}`\",\n+                                self.tcx.def_path_str(trait_ref.skip_binder().def_id)\n+                            )\n                         }\n                     };\n \n@@ -1121,7 +1124,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     if let Some(sugg_span) = sugg_span\n                         && let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n-                        let path = self.tcx.def_path_str(trait_ref.def_id);\n+                        let path = self.tcx.def_path_str(trait_ref.skip_binder().def_id);\n \n                         let ty = match item.kind {\n                             ty::AssocKind::Const | ty::AssocKind::Type => rcvr_ty,\n@@ -2616,7 +2619,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.tcx.impl_polarity(*imp_did) == ty::ImplPolarity::Negative\n                         })\n                         .any(|imp_did| {\n-                            let imp = self.tcx.impl_trait_ref(imp_did).unwrap();\n+                            let imp = self.tcx.impl_trait_ref(imp_did).unwrap().subst_identity();\n                             let imp_simp =\n                                 simplify_type(self.tcx, imp.self_ty(), TreatParams::AsPlaceholder);\n                             imp_simp.map_or(false, |s| s == simp_rcvr_ty)"}, {"sha": "021e741ee2f710b871fb74f33e65cedb1f6152fc", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -320,6 +320,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             .impl_trait_ref(impl_def_id)\n             else { return; };\n         let trait_substs = trait_ref\n+            .subst_identity()\n             // Replace the explicit self type with `Self` for better suggestion rendering\n             .with_self_ty(self.tcx, self.tcx.mk_ty_param(0, kw::SelfUpper))\n             .substs;"}, {"sha": "a8000aa3c8a831562cd1543c91d33033b285abb5", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -1555,7 +1555,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 self.tables.impl_defaultness.set(def_id.index, *defaultness);\n                 self.tables.constness.set(def_id.index, *constness);\n \n-                let trait_ref = self.tcx.impl_trait_ref(def_id);\n+                let trait_ref = self.tcx.impl_trait_ref(def_id).map(ty::EarlyBinder::skip_binder);\n                 if let Some(trait_ref) = trait_ref {\n                     let trait_def = self.tcx.trait_def(trait_ref.def_id);\n                     if let Ok(mut an) = trait_def.ancestors(self.tcx, def_id) {\n@@ -1899,6 +1899,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         for id in tcx.hir().items() {\n             if matches!(tcx.def_kind(id.owner_id), DefKind::Impl) {\n                 if let Some(trait_ref) = tcx.impl_trait_ref(id.owner_id) {\n+                    let trait_ref = trait_ref.subst_identity();\n+\n                     let simplified_self_ty = fast_reject::simplify_type(\n                         self.tcx,\n                         trait_ref.self_ty(),"}, {"sha": "5b7b096b4edf1a903beb400bb27b6e2de463d515", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -359,8 +359,8 @@ define_tables! {\n     variances_of: Table<DefIndex, LazyArray<ty::Variance>>,\n     fn_sig: Table<DefIndex, LazyValue<ty::PolyFnSig<'static>>>,\n     codegen_fn_attrs: Table<DefIndex, LazyValue<CodegenFnAttrs>>,\n-    impl_trait_ref: Table<DefIndex, LazyValue<ty::TraitRef<'static>>>,\n-    const_param_default: Table<DefIndex, LazyValue<rustc_middle::ty::Const<'static>>>,\n+    impl_trait_ref: Table<DefIndex, LazyValue<ty::EarlyBinder<ty::TraitRef<'static>>>>,\n+    const_param_default: Table<DefIndex, LazyValue<ty::EarlyBinder<rustc_middle::ty::Const<'static>>>>,\n     object_lifetime_default: Table<DefIndex, LazyValue<ObjectLifetimeDefault>>,\n     optimized_mir: Table<DefIndex, LazyValue<mir::Body<'static>>>,\n     mir_for_ctfe: Table<DefIndex, LazyValue<mir::Body<'static>>>,"}, {"sha": "f567eaf967724909a88df86872a878956d2c2ff3", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -102,6 +102,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn impl_subject(self, def_id: DefId) -> ImplSubject<'tcx> {\n         self.impl_trait_ref(def_id)\n+            .map(|t| t.subst_identity())\n             .map(ImplSubject::Trait)\n             .unwrap_or_else(|| ImplSubject::Inherent(self.type_of(def_id)))\n     }"}, {"sha": "b3acf815e0c10e931045db237c919ce7191d1acd", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -142,7 +142,7 @@ rustc_queries! {\n \n     /// Given the def_id of a const-generic parameter, computes the associated default const\n     /// parameter. e.g. `fn example<const N: usize=3>` called on `N` would return `3`.\n-    query const_param_default(param: DefId) -> ty::Const<'tcx> {\n+    query const_param_default(param: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n         desc { |tcx| \"computing const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n         cache_on_disk_if { param.is_local() }\n         separate_provide_extern\n@@ -737,7 +737,7 @@ rustc_queries! {\n \n     /// Given an `impl_id`, return the trait it implements.\n     /// Return `None` if this is an inherent impl.\n-    query impl_trait_ref(impl_id: DefId) -> Option<ty::TraitRef<'tcx>> {\n+    query impl_trait_ref(impl_id: DefId) -> Option<ty::EarlyBinder<ty::TraitRef<'tcx>>> {\n         desc { |tcx| \"computing trait implemented by `{}`\", tcx.def_path_str(impl_id) }\n         cache_on_disk_if { impl_id.is_local() }\n         separate_provide_extern"}, {"sha": "65cbac3e8f1cd5f341e7a0054a03be00c6c1bc81", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -239,7 +239,7 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> Const<'_> {\n+pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Const<'_>> {\n     let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {\n         hir::Node::GenericParam(hir::GenericParam {\n             kind: hir::GenericParamKind::Const { default: Some(ac), .. },\n@@ -250,5 +250,5 @@ pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> Const<'_> {\n             \"`const_param_default` expected a generic parameter with a constant\"\n         ),\n     };\n-    Const::from_anon_const(tcx, default_def_id)\n+    ty::EarlyBinder(Const::from_anon_const(tcx, default_def_id))\n }"}, {"sha": "8a5e765b9a30664adc3a20f7c240d7ea78d7c147", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -88,7 +88,7 @@ impl GenericParamDef {\n                 Some(tcx.bound_type_of(self.def_id).map_bound(|t| t.into()))\n             }\n             GenericParamDefKind::Const { has_default } if has_default => {\n-                Some(tcx.bound_const_param_default(self.def_id).map_bound(|c| c.into()))\n+                Some(tcx.const_param_default(self.def_id).map_bound(|c| c.into()))\n             }\n             _ => None,\n         }"}, {"sha": "e9bd0e9866fdcde9cfd70e4a775045faea35b8b5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -2187,8 +2187,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Option<ImplOverlapKind> {\n         // If either trait impl references an error, they're allowed to overlap,\n         // as one of them essentially doesn't exist.\n-        if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())\n-            || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())\n+        if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.subst_identity().references_error())\n+            || self\n+                .impl_trait_ref(def_id2)\n+                .map_or(false, |tr| tr.subst_identity().references_error())\n         {\n             return Some(ImplOverlapKind::Permitted { marker: false });\n         }\n@@ -2218,7 +2220,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let is_marker_overlap = {\n             let is_marker_impl = |def_id: DefId| -> bool {\n                 let trait_ref = self.impl_trait_ref(def_id);\n-                trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)\n+                trait_ref.map_or(false, |tr| self.trait_def(tr.skip_binder().def_id).is_marker)\n             };\n             is_marker_impl(def_id1) && is_marker_impl(def_id2)\n         };\n@@ -2364,7 +2366,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.\n     /// If it implements no trait, returns `None`.\n     pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {\n-        self.impl_trait_ref(def_id).map(|tr| tr.def_id)\n+        self.impl_trait_ref(def_id).map(|tr| tr.skip_binder().def_id)\n     }\n \n     /// If the given `DefId` describes an item belonging to a trait,"}, {"sha": "e32a7ee1c354569c7df399a82b524d88b1190151", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -32,6 +32,10 @@ impl<T: ParameterizedOverTcx> ParameterizedOverTcx for ty::Binder<'static, T> {\n     type Value<'tcx> = ty::Binder<'tcx, T::Value<'tcx>>;\n }\n \n+impl<T: ParameterizedOverTcx> ParameterizedOverTcx for ty::EarlyBinder<T> {\n+    type Value<'tcx> = ty::EarlyBinder<T::Value<'tcx>>;\n+}\n+\n #[macro_export]\n macro_rules! trivially_parameterized_over_tcx {\n     ($($ty:ty),+ $(,)?) => {"}, {"sha": "c302c461195aaf833b9b00e843efb17c5dd8272f", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -116,7 +116,7 @@ pub trait Printer<'tcx>: Sized {\n             DefPathData::Impl => {\n                 let generics = self.tcx().generics_of(def_id);\n                 let self_ty = self.tcx().bound_type_of(def_id);\n-                let impl_trait_ref = self.tcx().bound_impl_trait_ref(def_id);\n+                let impl_trait_ref = self.tcx().impl_trait_ref(def_id);\n                 let (self_ty, impl_trait_ref) = if substs.len() >= generics.count() {\n                     (\n                         self_ty.subst(self.tcx(), substs),"}, {"sha": "8f764011d0ac32c45d71125eb777f323d3b81d6d", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -713,6 +713,10 @@ impl<'tcx, T: TypeFoldable<'tcx>> ty::EarlyBinder<T> {\n         let mut folder = SubstFolder { tcx, substs, binders_passed: 0 };\n         self.0.fold_with(&mut folder)\n     }\n+\n+    pub fn subst_identity(self) -> T {\n+        self.0\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "1286a5253c068618fcc4da0bee0515990a8eb515", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -652,13 +652,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.fn_sig(def_id))\n     }\n \n-    pub fn bound_impl_trait_ref(\n-        self,\n-        def_id: DefId,\n-    ) -> Option<ty::EarlyBinder<ty::TraitRef<'tcx>>> {\n-        self.impl_trait_ref(def_id).map(|i| ty::EarlyBinder(i))\n-    }\n-\n     pub fn bound_explicit_item_bounds(\n         self,\n         def_id: DefId,\n@@ -673,10 +666,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.item_bounds(def_id))\n     }\n \n-    pub fn bound_const_param_default(self, def_id: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n-        ty::EarlyBinder(self.const_param_default(def_id))\n-    }\n-\n     pub fn bound_predicates_of(\n         self,\n         def_id: DefId,"}, {"sha": "34e8a559784e6f021d3abd53b12271a0d8b74658", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -94,6 +94,18 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for Representability {\n     }\n }\n \n+impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<Ty<'_>> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<DepKind>]) -> Self {\n+        ty::EarlyBinder(Ty::from_cycle_error(tcx, cycle))\n+    }\n+}\n+\n+impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<ty::Binder<'_, ty::FnSig<'_>>> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<DepKind>]) -> Self {\n+        ty::EarlyBinder(ty::Binder::from_cycle_error(tcx, cycle))\n+    }\n+}\n+\n // item_and_field_ids should form a cycle where each field contains the\n // type in the next element in the list\n pub fn recursive_type_error("}, {"sha": "ec1de3056872b027f8d8da8b3bb880ee49c67076", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -1352,6 +1352,8 @@ fn create_mono_items_for_default_impls<'tcx>(\n             );\n \n             if let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) {\n+                let trait_ref = trait_ref.subst_identity();\n+\n                 let param_env = ty::ParamEnv::reveal_all();\n                 let trait_ref = tcx.normalize_erasing_regions(param_env, trait_ref);\n                 let overridden_methods = tcx.impl_item_implementor_ids(item.owner_id);"}, {"sha": "94171b4b0c8f1b5ffa6021d2bf3a68c035aceb5c", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -266,7 +266,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             if let Some(trait_of) = self.tcx.trait_id_of_impl(impl_of)\n                 && self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads)\n             {\n-                let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap();\n+                let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap().subst_identity();\n                 if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind()\n                     && let Some(adt_def_id) = adt_def.did().as_local()\n                 {"}, {"sha": "fb55bb4afaac3adadbdc8c993038c794df18b324", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -338,7 +338,7 @@ trait VisibilityLike: Sized {\n         let mut find = FindMin { tcx, effective_visibilities, min: Self::MAX };\n         find.visit(tcx.type_of(def_id));\n         if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {\n-            find.visit_trait(trait_ref);\n+            find.visit_trait(trait_ref.subst_identity());\n         }\n         find.min\n     }\n@@ -838,7 +838,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n                 GenericParamDefKind::Const { has_default } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n                     if has_default {\n-                        self.visit(self.ev.tcx.const_param_default(param.def_id));\n+                        self.visit(self.ev.tcx.const_param_default(param.def_id).subst_identity());\n                     }\n                 }\n             }\n@@ -858,7 +858,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n \n     fn trait_ref(&mut self) -> &mut Self {\n         if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {\n-            self.visit_trait(trait_ref);\n+            self.visit_trait(trait_ref.subst_identity());\n         }\n         self\n     }"}, {"sha": "e9140507192e1d296ec0a1671f383a62004ba7e4", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -110,7 +110,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) {\n         let tcx = acx.cx.tcx;\n         let goal_trait_ref = goal.predicate.projection_ty.trait_ref(tcx);\n-        let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+        let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n         if iter::zip(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs)\n             .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))"}, {"sha": "a43fef5cdb0c875f26e0976766cf9faedc0febf1", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n     ) {\n         let tcx = acx.cx.tcx;\n \n-        let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+        let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n         if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n             .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))"}, {"sha": "0edae34190c300f2a42a616db12251dab87a175e", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -80,7 +80,7 @@ pub fn overlapping_impls(\n     let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n     let may_overlap = match (impl1_ref, impl2_ref) {\n-        (Some(a), Some(b)) => iter::zip(a.substs, b.substs)\n+        (Some(a), Some(b)) => iter::zip(a.skip_binder().substs, b.skip_binder().substs)\n             .all(|(arg1, arg2)| drcx.generic_args_may_unify(arg1, arg2)),\n         (None, None) => {\n             let self_ty1 = tcx.type_of(impl1_def_id);\n@@ -126,7 +126,7 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n     let header = ty::ImplHeader {\n         impl_def_id,\n         self_ty: tcx.bound_type_of(impl_def_id).subst(tcx, impl_substs),\n-        trait_ref: tcx.bound_impl_trait_ref(impl_def_id).map(|i| i.subst(tcx, impl_substs)),\n+        trait_ref: tcx.impl_trait_ref(impl_def_id).map(|i| i.subst(tcx, impl_substs)),\n         predicates: tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs).predicates,\n     };\n \n@@ -461,7 +461,7 @@ pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanChe\n \n     // We only except this routine to be invoked on implementations\n     // of a trait, not inherent implementations.\n-    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n     debug!(\"orphan_check: trait_ref={:?}\", trait_ref);\n \n     // If the *trait* is local to the crate, ok."}, {"sha": "df57c0f60fa6d760675b5ece4064a98d0d41ebe8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -27,7 +27,7 @@ pub fn recompute_applicable_impls<'tcx>(\n             ocx.normalize(&ObligationCause::dummy(), param_env, placeholder_obligation.trait_ref);\n \n         let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n-        let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap().subst(tcx, impl_substs);\n+        let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst(tcx, impl_substs);\n         let impl_trait_ref = ocx.normalize(&ObligationCause::dummy(), param_env, impl_trait_ref);\n \n         if let Err(_) ="}, {"sha": "b23b3d34d515aa854cf451766f161dd064fdb61c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -1964,7 +1964,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     return None;\n                 }\n \n-                let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n+                let imp = self.tcx.impl_trait_ref(def_id).unwrap().skip_binder();\n \n                 self.fuzzy_match_tys(trait_pred.skip_binder().self_ty(), imp.self_ty(), false)\n                     .map(|similarity| ImplCandidate { trait_ref: imp, similarity })\n@@ -2062,6 +2062,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         || self.tcx.is_builtin_derive(def_id)\n                 })\n                 .filter_map(|def_id| self.tcx.impl_trait_ref(def_id))\n+                .map(ty::EarlyBinder::subst_identity)\n                 .filter(|trait_ref| {\n                     let self_ty = trait_ref.self_ty();\n                     // Avoid mentioning type parameters."}, {"sha": "18d308f7123aec90bf1d9192e1cc5b24b76dc8a8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         self.tcx.for_each_relevant_impl(trait_ref.def_id, trait_self_ty, |def_id| {\n             let impl_substs = self.fresh_substs_for_item(obligation.cause.span, def_id);\n-            let impl_trait_ref = tcx.bound_impl_trait_ref(def_id).unwrap().subst(tcx, impl_substs);\n+            let impl_trait_ref = tcx.impl_trait_ref(def_id).unwrap().subst(tcx, impl_substs);\n \n             let impl_self_ty = impl_trait_ref.self_ty();\n "}, {"sha": "241ae0275cec849d9bd31f27dbb1f8c225a5da9c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -521,8 +521,10 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n \n     let generics = tcx.generics_of(trait_item_def_id);\n     let predicates = tcx.predicates_of(trait_item_def_id);\n-    let impl_trait_ref =\n-        tcx.impl_trait_ref(impl_def_id).expect(\"expected impl to correspond to trait\");\n+    let impl_trait_ref = tcx\n+        .impl_trait_ref(impl_def_id)\n+        .expect(\"expected impl to correspond to trait\")\n+        .subst_identity();\n     let param_env = tcx.param_env(impl_def_id);\n \n     let mut visitor = ReferencesOnlyParentGenerics { tcx, generics, trait_item_def_id };"}, {"sha": "e29ad30d5f2ec7cb5a9e7aa4c0382912e45c6e85", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -357,7 +357,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // Before we create the substitutions and everything, first\n                 // consider a \"quick reject\". This avoids creating more types\n                 // and so forth that we need to.\n-                let impl_trait_ref = self.tcx().bound_impl_trait_ref(impl_def_id).unwrap();\n+                let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n                 if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n                     return;\n                 }"}, {"sha": "ba4e668f52ddd93b30abdecc98402aa5171efef0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -2335,7 +2335,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n     ) -> Normalized<'tcx, SubstsRef<'tcx>> {\n-        let impl_trait_ref = self.tcx().bound_impl_trait_ref(impl_def_id).unwrap();\n+        let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n         match self.match_impl(impl_def_id, impl_trait_ref, obligation) {\n             Ok(substs) => substs,\n             Err(()) => {"}, {"sha": "3b796c623c0ab11a771bf7eb990b1433dc607ef5", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -87,7 +87,7 @@ pub fn translate_substs<'tcx>(\n         param_env, source_impl, source_substs, target_node\n     );\n     let source_trait_ref =\n-        infcx.tcx.bound_impl_trait_ref(source_impl).unwrap().subst(infcx.tcx, &source_substs);\n+        infcx.tcx.impl_trait_ref(source_impl).unwrap().subst(infcx.tcx, &source_substs);\n \n     // translate the Self and Param parts of the substitution, since those\n     // vary across impls\n@@ -148,7 +148,7 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // create a parameter environment corresponding to a (placeholder) instantiation of impl1\n     let penv = tcx.param_env(impl1_def_id);\n-    let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id).unwrap();\n+    let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id).unwrap().subst_identity();\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:\n     let infcx = tcx.infer_ctxt().build();\n@@ -431,7 +431,7 @@ fn report_conflicting_impls<'tcx>(\n pub(crate) fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String> {\n     use std::fmt::Write;\n \n-    let trait_ref = tcx.impl_trait_ref(impl_def_id)?;\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id)?.subst_identity();\n     let mut w = \"impl\".to_owned();\n \n     let substs = InternalSubsts::identity_for_item(tcx, impl_def_id);"}, {"sha": "6411206a5a40c276b188a337270ade6dbc2cae6f", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -48,7 +48,7 @@ trait ChildrenExt<'tcx> {\n impl<'tcx> ChildrenExt<'tcx> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n         {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n@@ -63,7 +63,7 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n     /// an impl with a parent. The impl must be present in the list of\n     /// children already.\n     fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n         let vec: &mut Vec<DefId>;\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), TreatParams::AsInfer)\n         {\n@@ -181,15 +181,15 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n             if le && !ge {\n                 debug!(\n                     \"descending as child of TraitRef {:?}\",\n-                    tcx.impl_trait_ref(possible_sibling).unwrap()\n+                    tcx.impl_trait_ref(possible_sibling).unwrap().subst_identity()\n                 );\n \n                 // The impl specializes `possible_sibling`.\n                 return Ok(Inserted::ShouldRecurseOn(possible_sibling));\n             } else if ge && !le {\n                 debug!(\n                     \"placing as parent of TraitRef {:?}\",\n-                    tcx.impl_trait_ref(possible_sibling).unwrap()\n+                    tcx.impl_trait_ref(possible_sibling).unwrap().subst_identity()\n                 );\n \n                 replace_children.push(possible_sibling);\n@@ -275,7 +275,8 @@ impl<'tcx> GraphExt<'tcx> for Graph {\n     ) -> Result<Option<FutureCompatOverlapError<'tcx>>, OverlapError<'tcx>> {\n         assert!(impl_def_id.is_local());\n \n-        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+        // FIXME: use `EarlyBinder` in `self.children`\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().skip_binder();\n         let trait_def_id = trait_ref.def_id;\n \n         debug!(\n@@ -388,7 +389,7 @@ pub(crate) fn assoc_def(\n     impl_def_id: DefId,\n     assoc_def_id: DefId,\n ) -> Result<LeafDef, ErrorGuaranteed> {\n-    let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;\n+    let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n     let trait_def = tcx.trait_def(trait_def_id);\n \n     // This function may be called while we are still building the"}, {"sha": "7c0cae1e7bdc2e6658a8267d575562368a7fca2e", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n         let binders = binders_for(self.interner, bound_vars);\n \n-        let trait_ref = self.interner.tcx.bound_impl_trait_ref(def_id).expect(\"not an impl\");\n+        let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n         let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n@@ -351,7 +351,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let all_impls = self.interner.tcx.all_impls(def_id);\n         let matched_impls = all_impls.filter(|impl_def_id| {\n             use chalk_ir::could_match::CouldMatch;\n-            let trait_ref = self.interner.tcx.bound_impl_trait_ref(*impl_def_id).unwrap();\n+            let trait_ref = self.interner.tcx.impl_trait_ref(*impl_def_id).unwrap();\n             let bound_vars = bound_vars_for_item(self.interner.tcx, *impl_def_id);\n \n             let self_ty = trait_ref.map_bound(|t| t.self_ty());\n@@ -380,7 +380,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let trait_def_id = auto_trait_id.0;\n         let all_impls = self.interner.tcx.all_impls(trait_def_id);\n         for impl_def_id in all_impls {\n-            let trait_ref = self.interner.tcx.impl_trait_ref(impl_def_id).unwrap();\n+            let trait_ref = self.interner.tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n             let self_ty = trait_ref.self_ty();\n             let provides = match (self_ty.kind(), chalk_ty) {\n                 (&ty::Adt(impl_adt_def, ..), Adt(id, ..)) => impl_adt_def.did() == id.0.did(),"}, {"sha": "7a24645803c9660441eef85bba5f794d5d51aced", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -21,14 +21,16 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n             assumed_wf_types.extend(liberated_sig.inputs_and_output);\n             tcx.intern_type_list(&assumed_wf_types)\n         }\n-        DefKind::Impl => match tcx.impl_trait_ref(def_id) {\n-            Some(trait_ref) => {\n-                let types: Vec<_> = trait_ref.substs.types().collect();\n-                tcx.intern_type_list(&types)\n+        DefKind::Impl => {\n+            match tcx.impl_trait_ref(def_id) {\n+                Some(trait_ref) => {\n+                    let types: Vec<_> = trait_ref.skip_binder().substs.types().collect();\n+                    tcx.intern_type_list(&types)\n+                }\n+                // Only the impl self type\n+                None => tcx.intern_type_list(&[tcx.type_of(def_id)]),\n             }\n-            // Only the impl self type\n-            None => tcx.intern_type_list(&[tcx.type_of(def_id)]),\n-        },\n+        }\n         DefKind::AssocConst | DefKind::AssocTy => tcx.assumed_wf_types(tcx.parent(def_id)),\n         DefKind::Mod\n         | DefKind::Struct"}, {"sha": "eb5454bf2634b6b61f948a265efea3b59a0ed8c5", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -289,7 +289,7 @@ fn well_formed_types_in_env(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Predica\n         // In a trait impl, we assume that the header trait ref and all its\n         // constituents are well-formed.\n         NodeKind::TraitImpl => {\n-            let trait_ref = tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n+            let trait_ref = tcx.impl_trait_ref(def_id).expect(\"not an impl\").subst_identity();\n \n             // FIXME(chalk): this has problems because of late-bound regions\n             //inputs.extend(trait_ref.substs.iter().flat_map(|arg| arg.walk()));\n@@ -360,7 +360,8 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n \n     let trait_ref = tcx\n         .impl_trait_ref(def_id)\n-        .unwrap_or_else(|| bug!(\"issue33140_self_ty called on inherent impl {:?}\", def_id));\n+        .unwrap_or_else(|| bug!(\"issue33140_self_ty called on inherent impl {:?}\", def_id))\n+        .skip_binder();\n \n     debug!(\"issue33140_self_ty({:?}), trait-ref={:?}\", def_id, trait_ref);\n "}, {"sha": "e6b2b2349452acff5b992bfbd0d095d7c6c7c509", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     trait_def_id,\n                     impl_def_id\n                 );\n-                let trait_ref = cx.tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+                let trait_ref = cx.tcx.impl_trait_ref(impl_def_id).unwrap();\n                 if !matches!(trait_ref.0.self_ty().kind(), ty::Param(_)) {\n                     continue;\n                 }"}, {"sha": "c6939326144ea87aae3bd7c1c08df53081a755b8", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -376,7 +376,7 @@ pub(crate) fn build_impl(\n     let _prof_timer = cx.tcx.sess.prof.generic_activity(\"build_impl\");\n \n     let tcx = cx.tcx;\n-    let associated_trait = tcx.impl_trait_ref(did);\n+    let associated_trait = tcx.impl_trait_ref(did).map(ty::EarlyBinder::skip_binder);\n \n     // Only inline impl if the implemented trait is\n     // reachable in rustdoc generated documentation"}, {"sha": "415e7d5a360d067eeaee6abe84fef949c8b55d42", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -506,7 +506,9 @@ fn clean_generic_param_def<'tcx>(\n                     Some(def.def_id),\n                 )),\n                 default: match has_default {\n-                    true => Some(Box::new(cx.tcx.const_param_default(def.def_id).to_string())),\n+                    true => Some(Box::new(\n+                        cx.tcx.const_param_default(def.def_id).subst_identity().to_string(),\n+                    )),\n                     false => None,\n                 },\n             },"}, {"sha": "075951312a6393d738fab17772a2778f9b2085b9", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -786,7 +786,7 @@ fn trait_impls_for<'a>(\n         tcx.find_map_relevant_impl(trait_, ty, |impl_| {\n             let trait_ref = tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n-            let impl_type = trait_ref.self_ty();\n+            let impl_type = trait_ref.skip_binder().self_ty();\n             trace!(\n                 \"comparing type {} with kind {:?} against type {:?}\",\n                 impl_type,"}, {"sha": "248d7388410673c3da902461a252936750345e67", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -251,7 +251,7 @@ fn check_hash_peq<'tcx>(\n \n                 // Only care about `impl PartialEq<Foo> for Foo`\n                 // For `impl PartialEq<B> for A, input_types is [A, B]\n-                if trait_ref.substs.type_at(1) == ty {\n+                if trait_ref.subst_identity().substs.type_at(1) == ty {\n                     span_lint_and_then(\n                         cx,\n                         DERIVED_HASH_WITH_MANUAL_EQ,\n@@ -299,7 +299,7 @@ fn check_ord_partial_ord<'tcx>(\n \n                 // Only care about `impl PartialOrd<Foo> for Foo`\n                 // For `impl PartialOrd<B> for A, input_types is [A, B]\n-                if trait_ref.substs.type_at(1) == ty {\n+                if trait_ref.subst_identity().substs.type_at(1) == ty {\n                     let mess = if partial_ord_is_automatically_derived {\n                         \"you are implementing `Ord` explicitly but have derived `PartialOrd`\"\n                     } else {"}, {"sha": "2ef547526d4f7961027d20dbb77f7e846435b992", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n-            if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.def_id);\n+            if cx.tcx.is_diagnostic_item(sym::From, impl_trait_ref.skip_binder().def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);\n             }"}, {"sha": "bd66ace4500a8d305f55ec1e430e1785e09d3348", "filename": "src/tools/clippy/clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n             && let Some(into_trait_seg) = hir_trait_ref.path.segments.last()\n             // `impl Into<target_ty> for self_ty`\n             && let Some(GenericArgs { args: [GenericArg::Type(target_ty)], .. }) = into_trait_seg.args\n-            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n+            && let Some(middle_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(ty::EarlyBinder::subst_identity)\n             && cx.tcx.is_diagnostic_item(sym::Into, middle_trait_ref.def_id)\n             && !matches!(middle_trait_ref.substs.type_at(1).kind(), ty::Alias(ty::Opaque, _))\n         {"}, {"sha": "5a459548153aab242c7a0d4b6aa800e50d522fc2", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         let container_id = assoc_item.container_id(cx.tcx);\n         let trait_def_id = match assoc_item.container {\n             TraitContainer => Some(container_id),\n-            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.def_id),\n+            ImplContainer => cx.tcx.impl_trait_ref(container_id).map(|t| t.skip_binder().def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {"}, {"sha": "839c3a3815c29ef5a55b0bcf877b680916a41923", "filename": "src/tools/clippy/clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n             if send_trait == trait_id;\n             if hir_impl.polarity == ImplPolarity::Positive;\n             if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.owner_id);\n-            if let self_ty = ty_trait_ref.self_ty();\n+            if let self_ty = ty_trait_ref.subst_identity().self_ty();\n             if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n             then {\n                 let mut non_send_fields = Vec::new();"}, {"sha": "7b1d974f2f877e51f0c1d4fe29a89d57d383fb87", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -244,7 +244,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n             })) => {\n                 #[allow(trivial_casts)]\n                 if let Some(Node::Item(item)) = get_parent_node(cx.tcx, owner_id.into())\n-                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id)\n+                    && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.owner_id).map(|t| t.subst_identity())\n                     && let Some(trait_item_id) = cx.tcx.associated_item(owner_id).trait_item_def_id\n                 {\n                     ("}, {"sha": "6ae9d9d63538006d7d4e759b17217a07d98424b5", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=b8f9cb345ab1401f2fbd14cc23f64dda9dd2314e", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             then {\n                 // `self_ty` is the semantic self type of `impl <trait> for <type>`. This cannot be\n                 // `Self`.\n-                let self_ty = impl_trait_ref.self_ty();\n+                let self_ty = impl_trait_ref.subst_identity().self_ty();\n \n                 // `trait_method_sig` is the signature of the function, how it is declared in the\n                 // trait, not in the impl of the trait."}]}