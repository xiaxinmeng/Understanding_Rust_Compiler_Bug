{"sha": "d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMmZlN2U1MWJmNTIwZjRjMDQxNmRmMGRkOWNkZjA2NjJlYTFjYmU=", "commit": {"author": {"name": "Ilya Dmitrichenko", "email": "ilya@xively.com", "date": "2014-07-20T13:05:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:23Z"}, "message": "rlibc: add unit tests", "tree": {"sha": "1744ec38b4fa45497ffc1f04ebb2a88685182f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1744ec38b4fa45497ffc1f04ebb2a88685182f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe", "html_url": "https://github.com/rust-lang/rust/commit/d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe/comments", "author": {"login": "errordeveloper", "id": 251467, "node_id": "MDQ6VXNlcjI1MTQ2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/251467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/errordeveloper", "html_url": "https://github.com/errordeveloper", "followers_url": "https://api.github.com/users/errordeveloper/followers", "following_url": "https://api.github.com/users/errordeveloper/following{/other_user}", "gists_url": "https://api.github.com/users/errordeveloper/gists{/gist_id}", "starred_url": "https://api.github.com/users/errordeveloper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/errordeveloper/subscriptions", "organizations_url": "https://api.github.com/users/errordeveloper/orgs", "repos_url": "https://api.github.com/users/errordeveloper/repos", "events_url": "https://api.github.com/users/errordeveloper/events{/privacy}", "received_events_url": "https://api.github.com/users/errordeveloper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcaee85ced65fae0aad4249e19ec85cbffd4d21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcaee85ced65fae0aad4249e19ec85cbffd4d21c", "html_url": "https://github.com/rust-lang/rust/commit/fcaee85ced65fae0aad4249e19ec85cbffd4d21c"}], "stats": {"total": 108, "additions": 104, "deletions": 4}, "files": [{"sha": "c7295125f42f7504de4c1c22546b748058b9f197", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 104, "deletions": 4, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=d32fe7e51bf520f4c0416df0dd9cdf0662ea1cbe", "patch": "@@ -21,22 +21,26 @@\n //! the system libc library.\n \n #![crate_name = \"rlibc\"]\n+#![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/master/\")]\n-#![feature(intrinsics)]\n \n+#![feature(intrinsics, phase)]\n #![no_std]\n-#![experimental]\n \n // This library defines the builtin functions, so it would be a shame for\n // LLVM to optimize these function calls to themselves!\n #![no_builtins]\n \n-#[cfg(test)] extern crate std;\n #[cfg(test)] extern crate native;\n+#[cfg(test)] extern crate test;\n+#[cfg(test)] extern crate debug;\n+\n+#[cfg(test)] #[phase(plugin, link)] extern crate std;\n+#[cfg(test)] #[phase(plugin, link)] extern crate core;\n \n // Require the offset intrinsics for LLVM to properly optimize the\n // implementations below. If pointer arithmetic is done through integers the\n@@ -102,4 +106,100 @@ pub unsafe extern \"C\" fn memcmp(s1: *const u8, s2: *const u8, n: uint) -> i32 {\n     return 0;\n }\n \n-#[test] fn work_on_windows() { } // FIXME #10872 needed for a happy windows\n+#[cfg(test)]\n+mod test {\n+    use core::option::{Some, None};\n+    use core::iter::Iterator;\n+    use core::collections::Collection;\n+    use core::str::StrSlice;\n+    use core::slice::{MutableVector, ImmutableVector};\n+\n+    use super::{memcmp, memset, memcpy, memmove};\n+\n+    #[test]\n+    fn memcmp_single_byte_pointers() {\n+        unsafe {\n+            assert_eq!(memcmp(&0xFAu8, &0xFAu8, 1), 0x00);\n+            assert!(memcmp(&0xEFu8, &0xFEu8, 1) < 0x00);\n+        }\n+    }\n+\n+    #[test]\n+    fn memcmp_strings() {\n+        {\n+            let (x, z) = (\"Hello!\", \"Good Bye.\");\n+            let l = x.len();\n+            unsafe {\n+                assert_eq!(memcmp(x.as_ptr(), x.as_ptr(), l), 0);\n+                assert!(memcmp(x.as_ptr(), z.as_ptr(), l) > 0);\n+                assert!(memcmp(z.as_ptr(), x.as_ptr(), l) < 0);\n+            }\n+        }\n+        {\n+            let (x, z) = (\"hey!\", \"hey.\");\n+            let l = x.len();\n+            unsafe {\n+                assert!(memcmp(x.as_ptr(), z.as_ptr(), l) < 0);\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn memset_single_byte_pointers() {\n+        let mut x: u8 = 0xFF;\n+        unsafe {\n+            memset(&mut x, 0xAA, 1);\n+            assert_eq!(x, 0xAA);\n+            memset(&mut x, 0x00, 1);\n+            assert_eq!(x, 0x00);\n+            x = 0x01;\n+            memset(&mut x, 0x12, 0);\n+            assert_eq!(x, 0x01);\n+        }\n+    }\n+\n+    #[test]\n+    fn memset_array() {\n+        let mut buffer = [b'X', .. 100];\n+        unsafe {\n+            memset(buffer.as_mut_ptr(), b'#' as i32, buffer.len());\n+        }\n+        for byte in buffer.iter() { assert_eq!(*byte, b'#'); }\n+    }\n+\n+    #[test]\n+    fn memcpy_and_memcmp_arrays() {\n+        let (src, mut dst) = ([b'X', .. 100], [b'Y', .. 100]);\n+        unsafe {\n+            assert!(memcmp(src.as_ptr(), dst.as_ptr(), 100) != 0);\n+            let _ = memcpy(dst.as_mut_ptr(), src.as_ptr(), 100);\n+            assert_eq!(memcmp(src.as_ptr(), dst.as_ptr(), 100), 0);\n+        }\n+    }\n+\n+    #[test]\n+    fn memmove_overlapping() {\n+        {\n+            let mut buffer = [ b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9' ];\n+            unsafe {\n+                memmove(&mut buffer[4], &buffer[0], 6);\n+                let mut i = 0;\n+                for byte in b\"0123012345\".iter() {\n+                    assert_eq!(buffer[i], *byte);\n+                    i += 1;\n+                }\n+            }\n+        }\n+        {\n+            let mut buffer = [ b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9' ];\n+            unsafe {\n+                memmove(&mut buffer[0], &buffer[4], 6);\n+                let mut i = 0;\n+                for byte in b\"4567896789\".iter() {\n+                    assert_eq!(buffer[i], *byte);\n+                    i += 1;\n+                }\n+            }\n+        }\n+    }\n+}"}]}