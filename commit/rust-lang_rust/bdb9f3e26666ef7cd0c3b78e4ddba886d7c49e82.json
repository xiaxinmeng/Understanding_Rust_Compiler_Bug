{"sha": "bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYjlmM2UyNjY2NmVmN2NkMGMzYjc4ZTRkZGJhODg2ZDdjNDllODI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-01-12T16:23:40Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-11T07:50:27Z"}, "message": "shift bindings to accommodate new lifetime/dtor rules.\n\n(My fix to for-loops (21984) did not deal with similar problems in\nif-let expressions, so those binding shifts stay.)", "tree": {"sha": "f58f208074304e28476afd9922199ab4f5f2ed0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f58f208074304e28476afd9922199ab4f5f2ed0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "html_url": "https://github.com/rust-lang/rust/commit/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5936278ed6bef736f6eb8c0dd4d650fd8e10461b", "html_url": "https://github.com/rust-lang/rust/commit/5936278ed6bef736f6eb8c0dd4d650fd8e10461b"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "0913a245c1b50f2c50c2e14866893c1d5520a048", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -2196,7 +2196,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         // Search for external modules.\n         if namespace == TypeNS {\n-            if let Some(module) = module_.external_module_children.borrow().get(&name).cloned() {\n+            // FIXME (21114): In principle unclear `child` *has* to be lifted.\n+            let child = module_.external_module_children.borrow().get(&name).cloned();\n+            if let Some(module) = child {\n                 let name_bindings =\n                     Rc::new(Resolver::create_name_bindings_from_module(module));\n                 debug!(\"lower name bindings succeeded\");\n@@ -2481,7 +2483,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         // Finally, search through external children.\n         if namespace == TypeNS {\n-            if let Some(module) = module_.external_module_children.borrow().get(&name).cloned() {\n+            // FIXME (21114): In principle unclear `child` *has* to be lifted.\n+            let child = module_.external_module_children.borrow().get(&name).cloned();\n+            if let Some(module) = child {\n                 let name_bindings =\n                     Rc::new(Resolver::create_name_bindings_from_module(module));\n                 return Success((Target::new(module_,"}, {"sha": "cfc04a9a92fb6e4d37cab86cf5ff5d647c70323a", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -525,7 +525,8 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                                                             trait_def_id);\n \n         let trait_impls = self.tcx().trait_impls.borrow();\n-        let impl_def_ids = match trait_impls.get(&trait_def_id) {\n+        let impl_def_ids = trait_impls.get(&trait_def_id);\n+        let impl_def_ids = match impl_def_ids {\n             None => { return; }\n             Some(impls) => impls,\n         };"}, {"sha": "219da8f44eb31948243bbf03278aafd668c64213", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -50,7 +50,8 @@\n //!     ```rust\n //!     use std::old_io as io;\n //!\n-//!     for line in io::stdin().lock().lines() {\n+//!     let mut stdin = io::stdin();\n+//!     for line in stdin.lock().lines() {\n //!         print!(\"{}\", line.unwrap());\n //!     }\n //!     ```"}, {"sha": "4b3811bbe38daaac3daf184b6289d38644eea9e9", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -143,7 +143,8 @@ impl StdinReader {\n     /// ```rust\n     /// use std::old_io;\n     ///\n-    /// for line in old_io::stdin().lock().lines() {\n+    /// let mut stdin = old_io::stdin();\n+    /// for line in stdin.lock().lines() {\n     ///     println!(\"{}\", line.unwrap());\n     /// }\n     /// ```"}, {"sha": "dd1ad413a3d279a873f299ec853c7e03dbf68c1a", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -19,5 +19,6 @@ pub type header_map = HashMap<String, Rc<RefCell<Vec<Rc<String>>>>>;\n \n // the unused ty param is necessary so this gets monomorphized\n pub fn request<T>(req: &header_map) {\n-  let _x = req[\"METHOD\".to_string()].clone().borrow().clone()[0].clone();\n+  let data = req[\"METHOD\".to_string()].clone();\n+  let _x = data.borrow().clone()[0].clone();\n }"}, {"sha": "74d2168797296f12dd740477c948331911e055e9", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -295,7 +295,9 @@ fn main() {\n         let fd = std::old_io::File::open(&Path::new(\"shootout-k-nucleotide.data\"));\n         get_sequence(&mut std::old_io::BufferedReader::new(fd), \">THREE\")\n     } else {\n-        get_sequence(&mut *std::old_io::stdin().lock(), \">THREE\")\n+        let mut stdin = std::old_io::stdin();\n+        let mut stdin = stdin.lock();\n+        get_sequence(&mut *stdin, \">THREE\")\n     };\n     let input = Arc::new(input);\n "}, {"sha": "c5a64db95e6a3071632a5a3cfdbae46ab3309f28", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -274,7 +274,9 @@ fn main() {\n     let mut sudoku = if use_default {\n         Sudoku::from_vec(&DEFAULT_SUDOKU)\n     } else {\n-        Sudoku::read(&mut *old_io::stdin().lock())\n+        let mut stdin = old_io::stdin();\n+        let mut stdin = stdin.lock();\n+        Sudoku::read(&mut *stdin)\n     };\n     sudoku.solve();\n     sudoku.write(&mut old_io::stdout());"}, {"sha": "4dc824d9068e52043fb20eb0bceed96e466d2fdc", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -37,7 +37,8 @@ fn parent() {\n }\n \n fn child() {\n-    for line in old_io::stdin().lock().lines() {\n+    let mut stdin = old_io::stdin();\n+    for line in stdin.lock().lines() {\n         println!(\"{}\", line.unwrap());\n     }\n }"}, {"sha": "1c8066bc3c98511e35a989ad8729e45d082be66b", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -27,7 +27,8 @@ fn main() {\n fn child() {\n     old_io::stdout().write_line(\"foo\").unwrap();\n     old_io::stderr().write_line(\"bar\").unwrap();\n-    assert_eq!(old_io::stdin().lock().read_line().err().unwrap().kind, old_io::EndOfFile);\n+    let mut stdin = old_io::stdin();\n+    assert_eq!(stdin.lock().read_line().err().unwrap().kind, old_io::EndOfFile);\n }\n \n fn test() {"}, {"sha": "49ecef9c7359aab92e44df37b2e4fb8c5430e4d8", "filename": "src/test/run-pass/multidispatch-conditional-impl-not-considered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Fmultidispatch-conditional-impl-not-considered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Fmultidispatch-conditional-impl-not-considered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch-conditional-impl-not-considered.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -29,5 +29,5 @@ impl Bar {\n \n fn main() {\n     let b = RefCell::new(Bar);\n-    b.borrow().foo()\n+    b.borrow().foo();\n }"}, {"sha": "faa79f71d9e018d3c7d905513c5c0fe7d332de80", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=bdb9f3e26666ef7cd0c3b78e4ddba886d7c49e82", "patch": "@@ -22,8 +22,9 @@ struct Point {\n }\n \n pub fn main() {\n+    let box_5 = box 5u;\n     assert_eq!(Rc::new(5u).to_uint(), Some(5));\n-    assert_eq!((box &box &Rc::new(box box &box 5u)).to_uint(), Some(5));\n+    assert_eq!((box &box &Rc::new(box box &box_5)).to_uint(), Some(5));\n     let point = Rc::new(Point {x: 2, y: 4});\n     assert_eq!(point.x, 2);\n     assert_eq!(point.y, 4);"}]}