{"sha": "f761c414b12f3851ddef7b5849bb8fdcf8d75d44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NjFjNDE0YjEyZjM4NTFkZGVmN2I1ODQ5YmI4ZmRjZjhkNzVkNDQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:16:12Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:11:33Z"}, "message": "Make a lazy const from a const param\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "6b1525659b9c73bd5849af86e526cf4c48f0d609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1525659b9c73bd5849af86e526cf4c48f0d609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f761c414b12f3851ddef7b5849bb8fdcf8d75d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f761c414b12f3851ddef7b5849bb8fdcf8d75d44", "html_url": "https://github.com/rust-lang/rust/commit/f761c414b12f3851ddef7b5849bb8fdcf8d75d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f761c414b12f3851ddef7b5849bb8fdcf8d75d44/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1c9c08d7afd83644c825305804eb694bddb881", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1c9c08d7afd83644c825305804eb694bddb881", "html_url": "https://github.com/rust-lang/rust/commit/0d1c9c08d7afd83644c825305804eb694bddb881"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "e70756ad2f251869d047f6f6ce5b959ffffa2269", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f761c414b12f3851ddef7b5849bb8fdcf8d75d44/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f761c414b12f3851ddef7b5849bb8fdcf8d75d44/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=f761c414b12f3851ddef7b5849bb8fdcf8d75d44", "patch": "@@ -5,7 +5,7 @@ use crate::hair::cx::to_ref::ToRef;\n use crate::hair::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def::{Def, CtorKind};\n-use rustc::mir::interpret::{GlobalId, ErrorHandled};\n+use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::cast::CastKind as TyCastKind;\n@@ -699,7 +699,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 };\n \n                 let source = if let Some((did, offset, var_ty)) = var {\n-                    let mk_const = |literal| Expr {\n+                    let mk_lazy_const = |literal| Expr {\n                         temp_lifetime,\n                         ty: var_ty,\n                         span: expr.span,\n@@ -708,7 +708,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             user_ty: None\n                         },\n                     }.to_ref();\n-                    let offset = mk_const(ty::LazyConst::Evaluated(ty::Const::from_bits(\n+                    let offset = mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bits(\n                         cx.tcx,\n                         offset as u128,\n                         cx.param_env.and(var_ty),\n@@ -718,7 +718,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             // in case we are offsetting from a computed discriminant\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n-                            let lhs = mk_const(ty::LazyConst::Unevaluated(did, substs));\n+                            let lhs = mk_lazy_const(ty::LazyConst::Unevaluated(did, substs));\n                             let bin = ExprKind::Binary {\n                                 op: BinOp::Add,\n                                 lhs,\n@@ -925,7 +925,26 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ))),\n                 user_ty,\n             }\n-        },\n+        }\n+\n+        Def::ConstParam(def_id) => {\n+            let node_id = cx.tcx.hir().as_local_node_id(def_id).unwrap();\n+            let item_id = cx.tcx.hir().get_parent_node(node_id);\n+            let item_def_id = cx.tcx.hir().local_def_id(item_id);\n+            let generics = cx.tcx.generics_of(item_def_id);\n+            let index = generics.param_def_id_to_index[&cx.tcx.hir().local_def_id(node_id)];\n+            let name = cx.tcx.hir().name(node_id).as_interned_str();\n+            let val = ConstValue::Param(ty::ParamConst::new(index, name));\n+            ExprKind::Literal {\n+                literal: cx.tcx.mk_lazy_const(\n+                    ty::LazyConst::Evaluated(ty::Const {\n+                        val,\n+                        ty: cx.tables().node_type(expr.hir_id),\n+                    })\n+                ),\n+                user_ty: None,\n+            }\n+        }\n \n         Def::Const(def_id) |\n         Def::AssociatedConst(def_id) => {"}]}