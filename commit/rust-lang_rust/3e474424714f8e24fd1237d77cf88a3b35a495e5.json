{"sha": "3e474424714f8e24fd1237d77cf88a3b35a495e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDc0NDI0NzE0ZjhlMjRmZDEyMzdkNzdjZjg4YTNiMzVhNDk1ZTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T20:28:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-21T20:28:50Z"}, "message": "rustc: Add region unification functions", "tree": {"sha": "4aa230ecf124d82041163dc4e126372506b04374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aa230ecf124d82041163dc4e126372506b04374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e474424714f8e24fd1237d77cf88a3b35a495e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e474424714f8e24fd1237d77cf88a3b35a495e5", "html_url": "https://github.com/rust-lang/rust/commit/3e474424714f8e24fd1237d77cf88a3b35a495e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e474424714f8e24fd1237d77cf88a3b35a495e5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e364b54d8caad98d69679a8e4d1cee8d6607c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/68e364b54d8caad98d69679a8e4d1cee8d6607c5", "html_url": "https://github.com/rust-lang/rust/commit/68e364b54d8caad98d69679a8e4d1cee8d6607c5"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "4666487a238f1ebaa1faf52eb6cdd6e2f1235713", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3e474424714f8e24fd1237d77cf88a3b35a495e5/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e474424714f8e24fd1237d77cf88a3b35a495e5/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=3e474424714f8e24fd1237d77cf88a3b35a495e5", "patch": "@@ -1550,26 +1550,36 @@ mod unify {\n \n     type var_bindings =\n         {sets: ufind::ufind, types: smallintmap::smallintmap<t>};\n+    type region_bindings =\n+        {sets: ufind::ufind, regions: smallintmap::smallintmap<region>};\n \n     enum unify_style {\n         precise,\n         in_bindings(@var_bindings),\n+        in_region_bindings(@var_bindings, @region_bindings)\n     }\n     type uctxt = {st: unify_style, tcx: ctxt};\n \n     fn mk_var_bindings() -> @var_bindings {\n         ret @{sets: ufind::make(), types: smallintmap::mk::<t>()};\n     }\n \n+    fn mk_region_bindings() -> @region_bindings {\n+        ret @{sets: ufind::make(), regions: smallintmap::mk::<region>()};\n+    }\n+\n     // Unifies two sets.\n     fn union<T:copy>(\n         cx: @uctxt, set_a: uint, set_b: uint,\n         variance: variance, nxt: fn() -> ures<T>) -> ures<T> {\n \n         let vb = alt cx.st {\n+            in_region_bindings(vb, _) { vb }\n             in_bindings(vb) { vb }\n-            _ { cx.tcx.sess.bug(\"someone forgot to document an invariant \\\n-                         in union\"); }\n+            precise {\n+                cx.tcx.sess.bug(\"someone forgot to document an invariant \\\n+                                 in union\");\n+            }\n         };\n         ufind::grow(vb.sets, uint::max(set_a, set_b) + 1u);\n         let root_a = ufind::find(vb.sets, set_a);\n@@ -1604,6 +1614,54 @@ mod unify {\n         }\n     }\n \n+    // Unifies two region sets.\n+    //\n+    // FIXME: This is a straight copy of the code above. We should use\n+    //        polymorphism to make this better.\n+    fn union_region_sets<T:copy>(\n+        cx: @uctxt, set_a: uint, set_b: uint,\n+        variance: variance, nxt: fn() -> ures<T>) -> ures<T> {\n+\n+        let rb = alt cx.st {\n+            in_region_bindings(_, rb) { rb }\n+            in_bindings(_) | precise {\n+                cx.tcx.sess.bug(\"attempted to unify two region sets without \\\n+                                 a set of region bindings present\");\n+            }\n+        };\n+        ufind::grow(rb.sets, uint::max(set_a, set_b) + 1u);\n+        let root_a = ufind::find(rb.sets, set_a);\n+        let root_b = ufind::find(rb.sets, set_b);\n+\n+        let replace_region = (\n+            fn@(rb: @region_bindings, r: region) {\n+                ufind::union(rb.sets, set_a, set_b);\n+                let root_c: uint = ufind::find(rb.sets, set_a);\n+                smallintmap::insert::<region>(rb.regions, root_c, r);\n+            }\n+        );\n+\n+        alt smallintmap::find(rb.regions, root_a) {\n+          none {\n+            alt smallintmap::find(rb.regions, root_b) {\n+              none { ufind::union(rb.sets, set_a, set_b); ret nxt(); }\n+              some(r_b) { replace_region(rb, r_b); ret nxt(); }\n+            }\n+          }\n+          some(r_a) {\n+            alt smallintmap::find(rb.regions, root_b) {\n+              none { replace_region(rb, r_a); ret nxt(); }\n+              some(r_b) {\n+                ret unify_regions(cx, r_a, r_b, variance) {|r_c|\n+                    replace_region(rb, r_c);\n+                    nxt()\n+                };\n+              }\n+            }\n+          }\n+        }\n+    }\n+\n     fn record_var_binding<T:copy>(\n         cx: @uctxt, key: int,\n         typ: t, variance: variance,"}]}