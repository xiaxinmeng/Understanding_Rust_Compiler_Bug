{"sha": "35dbec338ac837c533843ff7cf0441c3b6052b5e", "node_id": "C_kwDOAAsO6NoAKDM1ZGJlYzMzOGFjODM3YzUzMzg0M2ZmN2NmMDQ0MWMzYjYwNTJiNWU", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2023-01-21T16:45:45Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-14T15:31:45Z"}, "message": "Port another diagnostic", "tree": {"sha": "6f4233ee78a068cba7325d8292c946084e0223c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f4233ee78a068cba7325d8292c946084e0223c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35dbec338ac837c533843ff7cf0441c3b6052b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35dbec338ac837c533843ff7cf0441c3b6052b5e", "html_url": "https://github.com/rust-lang/rust/commit/35dbec338ac837c533843ff7cf0441c3b6052b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35dbec338ac837c533843ff7cf0441c3b6052b5e/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "html_url": "https://github.com/rust-lang/rust/commit/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "c257bf739d11a4c28b5492d468ceb654eab83b9a", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35dbec338ac837c533843ff7cf0441c3b6052b5e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/35dbec338ac837c533843ff7cf0441c3b6052b5e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=35dbec338ac837c533843ff7cf0441c3b6052b5e", "patch": "@@ -146,8 +146,10 @@ infer_region_explanation = {$pref_kind ->\n     [source_pointer_valid_for] source pointer is only valid for\n     [type_satisfy] type must satisfy\n     [type_outlive] type must outlive\n-    [lf_instantiated_with] lifetime parameter instantiated with\n-    [lf_must_outlive] but lifetime parameter must outlive\n+    [lf_param_instantiated_with] lifetime parameter instantiated with\n+    [lf_param_must_outlive] but lifetime parameter must outlive\n+    [lf_instantiated_with] lifetime instantiated with\n+    [lf_must_outlive] but lifetime must outlive\n     [type_valid_for] the type is valid for\n     [borrow_lasts_for] but the borrow lasts for\n     [pointer_valid_for] the pointer is valid for"}, {"sha": "b212a5a09c01dc688b9c4203922f002c3949dbfc", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35dbec338ac837c533843ff7cf0441c3b6052b5e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dbec338ac837c533843ff7cf0441c3b6052b5e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=35dbec338ac837c533843ff7cf0441c3b6052b5e", "patch": "@@ -127,6 +127,8 @@ pub enum PrefixKind {\n     SourcePointerValidFor,\n     TypeSatisfy,\n     TypeOutlive,\n+    LfParamInstantiatedWith,\n+    LfParamMustOutlive,\n     LfInstantiatedWith,\n     LfMustOutlive,\n     TypeValidFor,\n@@ -151,6 +153,8 @@ impl IntoDiagnosticArg for PrefixKind {\n             Self::SourcePointerValidFor => \"source_pointer_valid_for\",\n             Self::TypeSatisfy => \"type_satisfy\",\n             Self::TypeOutlive => \"type_outlive\",\n+            Self::LfParamInstantiatedWith => \"lf_param_instantiated_with\",\n+            Self::LfParamMustOutlive => \"lf_param_must_outlive\",\n             Self::LfInstantiatedWith => \"lf_instantiated_with\",\n             Self::LfMustOutlive => \"lf_must_outlive\",\n             Self::TypeValidFor => \"type_valid_for\","}, {"sha": "adf240e7ce5d782ed86d05464a79c32a3658403a", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/35dbec338ac837c533843ff7cf0441c3b6052b5e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dbec338ac837c533843ff7cf0441c3b6052b5e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=35dbec338ac837c533843ff7cf0441c3b6052b5e", "patch": "@@ -5,8 +5,8 @@ use crate::errors::{\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n use rustc_errors::{\n-    fluent, struct_span_err, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, IntoDiagnostic,\n+    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    IntoDiagnostic,\n };\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::traits::ObligationCauseCode;\n@@ -184,14 +184,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     self.tcx,\n                     sup,\n                     None,\n-                    note_and_explain::PrefixKind::LfInstantiatedWith,\n+                    note_and_explain::PrefixKind::LfParamInstantiatedWith,\n                     note_and_explain::SuffixKind::Empty,\n                 );\n                 let param_must_outlive = note_and_explain::RegionExplanation::new(\n                     self.tcx,\n                     sub,\n                     None,\n-                    note_and_explain::PrefixKind::LfMustOutlive,\n+                    note_and_explain::PrefixKind::LfParamMustOutlive,\n                     note_and_explain::SuffixKind::Empty,\n                 );\n                 LfBoundNotSatisfied {\n@@ -279,25 +279,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 err\n             }\n             infer::AscribeUserTypeProvePredicate(span) => {\n-                let mut err =\n-                    struct_span_err!(self.tcx.sess, span, E0478, \"lifetime bound not satisfied\");\n-                note_and_explain_region(\n+                let instantiated = note_and_explain::RegionExplanation::new(\n                     self.tcx,\n-                    &mut err,\n-                    \"lifetime instantiated with \",\n                     sup,\n-                    \"\",\n                     None,\n+                    note_and_explain::PrefixKind::LfInstantiatedWith,\n+                    note_and_explain::SuffixKind::Empty,\n                 );\n-                note_and_explain_region(\n+                let must_outlive = note_and_explain::RegionExplanation::new(\n                     self.tcx,\n-                    &mut err,\n-                    \"but lifetime must outlive \",\n                     sub,\n-                    \"\",\n                     None,\n+                    note_and_explain::PrefixKind::LfMustOutlive,\n+                    note_and_explain::SuffixKind::Empty,\n                 );\n-                err\n+                LfBoundNotSatisfied {\n+                    span,\n+                    notes: instantiated.into_iter().chain(must_outlive).collect(),\n+                }\n+                .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n             }\n         };\n         if sub.is_error() || sup.is_error() {"}]}