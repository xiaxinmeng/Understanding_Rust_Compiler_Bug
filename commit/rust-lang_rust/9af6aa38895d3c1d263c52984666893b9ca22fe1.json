{"sha": "9af6aa38895d3c1d263c52984666893b9ca22fe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZjZhYTM4ODk1ZDNjMWQyNjNjNTI5ODQ2NjY4OTNiOWNhMjJmZTE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-12-30T04:28:11Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-02-08T23:51:43Z"}, "message": "sanitizer support", "tree": {"sha": "51de3787fa14cc9ae838d86a366eb5f957c82f58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51de3787fa14cc9ae838d86a366eb5f957c82f58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af6aa38895d3c1d263c52984666893b9ca22fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af6aa38895d3c1d263c52984666893b9ca22fe1", "html_url": "https://github.com/rust-lang/rust/commit/9af6aa38895d3c1d263c52984666893b9ca22fe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af6aa38895d3c1d263c52984666893b9ca22fe1/comments", "author": null, "committer": null, "parents": [{"sha": "c14f87e3b0823407a91a283796bf78ef83d5fe99", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14f87e3b0823407a91a283796bf78ef83d5fe99", "html_url": "https://github.com/rust-lang/rust/commit/c14f87e3b0823407a91a283796bf78ef83d5fe99"}], "stats": {"total": 816, "additions": 810, "deletions": 6}, "files": [{"sha": "8e987ba3b7f154c679fbbe5d9ff4a3a5053fa173", "filename": "src/Cargo.lock", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -268,6 +268,15 @@ name = \"rustc-serialize\"\n version = \"0.3.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustc_asan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_back\"\n version = \"0.0.0\"\n@@ -401,6 +410,15 @@ dependencies = [\n  \"rustc_bitflags 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_lsan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n@@ -435,6 +453,15 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_msan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_passes\"\n version = \"0.0.0\"\n@@ -516,6 +543,15 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_tsan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n@@ -577,6 +613,10 @@ dependencies = [\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"rand 0.0.0\",\n+ \"rustc_asan 0.0.0\",\n+ \"rustc_lsan 0.0.0\",\n+ \"rustc_msan 0.0.0\",\n+ \"rustc_tsan 0.0.0\",\n  \"std_unicode 0.0.0\",\n  \"unwind 0.0.0\",\n ]"}, {"sha": "573d0df0cee20ffccd64476ef569dc3cc1bc040d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -332,7 +332,10 @@ pub fn krate(build: &Build,\n              krate: Option<&str>) {\n     let (name, path, features, root) = match mode {\n         Mode::Libstd => {\n-            (\"libstd\", \"src/rustc/std_shim\", build.std_features(), \"std_shim\")\n+            (\"libstd\",\n+             \"src/rustc/std_shim\",\n+             build.std_features(),\n+             \"std_shim\")\n         }\n         Mode::Libtest => {\n             (\"libtest\", \"src/rustc/test_shim\", String::new(), \"test_shim\")"}, {"sha": "3e29339a75b473dd98b540402d79675ec0d18a42", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -51,6 +51,18 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n         features.push_str(\" force_alloc_system\");\n     }\n+\n+    if compiler.stage != 0 && !build.system_llvm(target) {\n+        // This variable is used by the sanitizer runtime crates, e.g.\n+        // rustc_lsan, to build the sanitizer runtime from C code\n+        // When this variable is missing, those crates won't compile the C code,\n+        // so we don't set this variable during stage0 where llvm-config is\n+        // missing\n+        // We also don't build the runtimes when compiling against system llvm\n+        // because some distributions ship llvm packages that have a directory\n+        // layout different from the one that the runtime's build system expects\n+        cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n+    }\n     cargo.arg(\"--features\").arg(features)\n          .arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"));"}, {"sha": "b171c89c20ad35435dc0986cb8e5e590ea55eb5b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -108,6 +108,8 @@ pub struct Config {\n /// Per-target configuration stored in the global configuration structure.\n #[derive(Default)]\n pub struct Target {\n+    // `true` if compiling against system LLVM or a pre-built LLVM\n+    pub system_llvm: bool,\n     pub llvm_config: Option<PathBuf>,\n     pub jemalloc: Option<PathBuf>,\n     pub cc: Option<PathBuf>,\n@@ -512,6 +514,7 @@ impl Config {\n                                      .or_insert(Target::default());\n                     let root = parse_configure_path(value);\n                     target.llvm_config = Some(push_exe_path(root, &[\"bin\", \"llvm-config\"]));\n+                    target.system_llvm = true;\n                 }\n                 \"CFG_JEMALLOC_ROOT\" if value.len() > 0 => {\n                     let target = self.target_config.entry(self.build.clone())"}, {"sha": "21dd4b1520a88fa3f61855e2b6ce27c8445ea29d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -599,7 +599,8 @@ impl Build {\n     /// Get the space-separated set of activated features for the standard\n     /// library.\n     fn std_features(&self) -> String {\n-        let mut features = \"panic-unwind\".to_string();\n+        let mut features = \"panic-unwind asan lsan msan tsan\".to_string();\n+\n         if self.config.debug_jemalloc {\n             features.push_str(\" debug-jemalloc\");\n         }\n@@ -716,6 +717,10 @@ impl Build {\n         }\n     }\n \n+    fn system_llvm(&self, target: &str) -> bool {\n+        self.config.target_config.get(target).map(|t| t.system_llvm).unwrap_or(false)\n+    }\n+\n     /// Returns the path to `FileCheck` binary for the specified target\n     fn llvm_filecheck(&self, target: &str) -> PathBuf {\n         let target_config = self.config.target_config.get(target);"}, {"sha": "d30da544a8afc5d78391dee270bdf40e74a215d3", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -1 +1 @@\n-Subproject commit a8fc4c169fac43a5dc204d4fd56ddb1739f8c178\n+Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3"}, {"sha": "2d80fc32c469dc111f37eb8487811ea9940c24ba", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -229,6 +229,7 @@ pub trait CrateStore<'tcx> {\n     fn is_allocator(&self, cnum: CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n     fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>;\n     /// The name of the crate as it is referred to in source code of the current\n@@ -390,6 +391,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_sanitizer_runtime\") }\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         bug!(\"panic_strategy\")\n     }"}, {"sha": "24615f2fa699213346c07cb91034d79e4a60161b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -51,6 +51,14 @@ pub struct Config {\n     pub uint_type: UintTy,\n }\n \n+#[derive(Clone)]\n+pub enum Sanitizer {\n+    Address,\n+    Leak,\n+    Memory,\n+    Thread,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Hash)]\n pub enum OptLevel {\n     No, // -O0\n@@ -626,11 +634,13 @@ macro_rules! options {\n             Some(\"a number\");\n         pub const parse_panic_strategy: Option<&'static str> =\n             Some(\"either `panic` or `abort`\");\n+        pub const parse_sanitizer: Option<&'static str> =\n+            Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer};\n         use rustc_back::PanicStrategy;\n \n         $(\n@@ -751,6 +761,17 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_sanitizer(slote: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"address\") => *slote = Some(Sanitizer::Address),\n+                Some(\"leak\") => *slote = Some(Sanitizer::Leak),\n+                Some(\"memory\") => *slote = Some(Sanitizer::Memory),\n+                Some(\"thread\") => *slote = Some(Sanitizer::Thread),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -949,6 +970,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"encode MIR of all functions into the crate metadata\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n           \"pass `-install_name @rpath/...` to the OSX linker\"),\n+    sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [UNTRACKED],\n+                                   \"Use a sanitizer\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "abbd7cc0966ea24d35ab1613e07577f0209276d6", "filename": "src/librustc_asan/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_asan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_asan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "3e33efcadb8074f8a09ff3cfe30bf31dafee3897", "filename": "src/librustc_asan/build.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"asan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.asan-x86_64\");\n+\n+        let src_dir = PathBuf::from(env::var_os(\"CARGO_MANIFEST_DIR\").unwrap());\n+        let mut stack = src_dir.join(\"../compiler-rt\")\n+            .read_dir()\n+            .unwrap()\n+            .map(|e| e.unwrap())\n+            .filter(|e| &*e.file_name() != \".git\")\n+            .collect::<Vec<_>>();\n+        while let Some(entry) = stack.pop() {\n+            let path = entry.path();\n+            if entry.file_type().unwrap().is_dir() {\n+                stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+            } else {\n+                println!(\"cargo:rerun-if-changed={}\", path.display());\n+            }\n+        }\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_asan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "6c9976ca3f8e43e8b5a2cd622842828f104612c6", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -126,6 +126,9 @@ pub enum Attribute {\n     UWTable         = 17,\n     ZExt            = 18,\n     InReg           = 19,\n+    SanitizeThread  = 20,\n+    SanitizeAddress  = 21,\n+    SanitizeMemory  = 22,\n }\n \n /// LLVMIntPredicate"}, {"sha": "ac53f3fe73a751cbcb74133a66c1c783bb26f0bb", "filename": "src/librustc_lsan/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_lsan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_lsan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "f13928d2bd4570b61b09cf6e721084a840e61da7", "filename": "src/librustc_lsan/build.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"lsan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.lsan-x86_64\");\n+\n+        let src_dir = PathBuf::from(env::var_os(\"CARGO_MANIFEST_DIR\").unwrap());\n+        let mut stack = src_dir.join(\"../compiler-rt\")\n+            .read_dir()\n+            .unwrap()\n+            .map(|e| e.unwrap())\n+            .filter(|e| &*e.file_name() != \".git\")\n+            .collect::<Vec<_>>();\n+        while let Some(entry) = stack.pop() {\n+            let path = entry.path();\n+            if entry.file_type().unwrap().is_dir() {\n+                stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+            } else {\n+                println!(\"cargo:rerun-if-changed={}\", path.display());\n+            }\n+        }\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_lsan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "55dc5aa2876f6bab0002341acdaae62c6a48fdd4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -17,7 +17,8 @@ use schema::CrateRoot;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::DepKind;\n-use rustc::session::{config, Session};\n+use rustc::session::Session;\n+use rustc::session::config::{Sanitizer, self};\n use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n@@ -786,6 +787,64 @@ impl<'a> CrateLoader<'a> {\n                                   &|data| data.needs_panic_runtime());\n     }\n \n+    fn inject_sanitizer_runtime(&mut self) {\n+        if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n+            // Sanitizers can only be used with x86_64 Linux executables linked\n+            // to `std`\n+            if self.sess.target.target.llvm_target != \"x86_64-unknown-linux-gnu\" {\n+                self.sess.err(&format!(\"Sanitizers only work with the \\\n+                                        `x86_64-unknown-linux-gnu` target.\"));\n+                return\n+            }\n+\n+            if !self.sess.crate_types.borrow().iter().all(|ct| {\n+                match *ct {\n+                    // Link the runtime\n+                    config::CrateTypeExecutable => true,\n+                    // This crate will be compiled with the required\n+                    // instrumentation pass\n+                    config::CrateTypeRlib => false,\n+                    _ => {\n+                        self.sess.err(&format!(\"Only executables and rlibs can be \\\n+                                                compiled with `-Z sanitizer`\"));\n+                        false\n+                    }\n+                }\n+            }) {\n+                return\n+            }\n+\n+            let mut uses_std = false;\n+            self.cstore.iter_crate_data(|_, data| {\n+                if data.name == \"std\" {\n+                    uses_std = true;\n+                }\n+            });\n+\n+            if uses_std {\n+                let name = match *sanitizer {\n+                    Sanitizer::Address => \"rustc_asan\",\n+                    Sanitizer::Leak => \"rustc_lsan\",\n+                    Sanitizer::Memory => \"rustc_msan\",\n+                    Sanitizer::Thread => \"rustc_tsan\",\n+                };\n+                info!(\"loading sanitizer: {}\", name);\n+\n+                let symbol = Symbol::intern(name);\n+                let dep_kind = DepKind::Implicit;\n+                let (_, data) =\n+                    self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n+                                       PathKind::Crate, dep_kind);\n+\n+                // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n+                if !data.is_sanitizer_runtime() {\n+                    self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\",\n+                                           name));\n+                }\n+            }\n+        }\n+    }\n+\n     fn inject_allocator_crate(&mut self) {\n         // Make sure that we actually need an allocator, if none of our\n         // dependencies need one then we definitely don't!\n@@ -982,6 +1041,9 @@ impl<'a> CrateLoader<'a> {\n \n impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n     fn postprocess(&mut self, krate: &ast::Crate) {\n+        // inject the sanitizer runtime before the allocator runtime because all\n+        // sanitizers force the use of the `alloc_system` allocator\n+        self.inject_sanitizer_runtime();\n         self.inject_allocator_crate();\n         self.inject_panic_runtime(krate);\n "}, {"sha": "4709ca6101c7908f11e8ce5ef7e9cd5a96d090ec", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -297,6 +297,11 @@ impl CrateMetadata {\n         attr::contains_name(&attrs, \"compiler_builtins\")\n     }\n \n+    pub fn is_sanitizer_runtime(&self) -> bool {\n+        let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n+        attr::contains_name(&attrs, \"sanitizer_runtime\")\n+    }\n+\n     pub fn is_no_builtins(&self) -> bool {\n         let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n         attr::contains_name(&attrs, \"no_builtins\")"}, {"sha": "7b0177bfd23ed966a2b4fef4a5e6195770e7edb5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -297,6 +297,10 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).is_compiler_builtins()\n     }\n \n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool {\n+        self.get_crate_data(cnum).is_sanitizer_runtime()\n+    }\n+\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         self.get_crate_data(cnum).panic_strategy()\n     }"}, {"sha": "628746ac232dfd45eb1d20b0370788e333cdcabc", "filename": "src/librustc_msan/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_msan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_msan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "bf630c7844a22336057f605887332046e0364ee6", "filename": "src/librustc_msan/build.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"msan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.msan-x86_64\");\n+\n+        let src_dir = PathBuf::from(env::var_os(\"CARGO_MANIFEST_DIR\").unwrap());\n+        let mut stack = src_dir.join(\"../compiler-rt\")\n+            .read_dir()\n+            .unwrap()\n+            .map(|e| e.unwrap())\n+            .filter(|e| &*e.file_name() != \".git\")\n+            .collect::<Vec<_>>();\n+        while let Some(entry) = stack.pop() {\n+            let path = entry.path();\n+            if entry.file_type().unwrap().is_dir() {\n+                stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+            } else {\n+                println!(\"cargo:rerun-if-changed={}\", path.display());\n+            }\n+        }\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_msan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "1cbfa26b705ac8190d6ba15e49477116d767c337", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -1031,6 +1031,9 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // symbols from the dylib.\n         let src = sess.cstore.used_crate_source(cnum);\n         match data[cnum.as_usize() - 1] {\n+            _ if sess.cstore.is_sanitizer_runtime(cnum) => {\n+                link_sanitizer_runtime(cmd, sess, tmpdir, cnum);\n+            }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n             _ if sess.cstore.is_compiler_builtins(cnum) => {\n@@ -1048,6 +1051,8 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         }\n     }\n \n+    // compiler-builtins are always placed last to ensure that they're\n+    // linked correctly.\n     // We must always link the `compiler_builtins` crate statically. Even if it\n     // was already \"included\" in a dylib (e.g. `libstd` when `-C prefer-dynamic`\n     // is used)\n@@ -1064,6 +1069,34 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         }\n     }\n \n+    // We must link the sanitizer runtime using -Wl,--whole-archive but since\n+    // it's packed in a .rlib, it contains stuff that are not objects that will\n+    // make the linker error. So we must remove those bits from the .rlib before\n+    // linking it.\n+    fn link_sanitizer_runtime(cmd: &mut Linker,\n+                              sess: &Session,\n+                              tmpdir: &Path,\n+                              cnum: CrateNum) {\n+        let src = sess.cstore.used_crate_source(cnum);\n+        let cratepath = &src.rlib.unwrap().0;\n+        let dst = tmpdir.join(cratepath.file_name().unwrap());\n+        let cfg = archive_config(sess, &dst, Some(cratepath));\n+        let mut archive = ArchiveBuilder::new(cfg);\n+        archive.update_symbols();\n+\n+        for f in archive.src_files() {\n+            if f.ends_with(\"bytecode.deflate\") ||\n+                f == sess.cstore.metadata_filename() {\n+                    archive.remove_file(&f);\n+                    continue\n+                }\n+        }\n+\n+        archive.build();\n+\n+        cmd.link_whole_rlib(&dst);\n+    }\n+\n     // Adds the static \"rlib\" versions of all crates to the command line.\n     // There's a bit of magic which happens here specifically related to LTO and\n     // dynamic libraries. Specifically:"}, {"sha": "8e71c571095191aee4d732d8ef654118929a83dc", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -12,7 +12,7 @@ use back::lto;\n use back::link::{get_linker, remove};\n use back::symbol_export::ExportedSymbols;\n use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n-use session::config::{OutputFilenames, OutputTypes, Passes, SomePasses, AllPasses};\n+use session::config::{OutputFilenames, OutputTypes, Passes, SomePasses, AllPasses, Sanitizer};\n use session::Session;\n use session::config::{self, OutputType};\n use llvm;\n@@ -678,6 +678,22 @@ pub fn run_passes(sess: &Session,\n     let mut modules_config = ModuleConfig::new(tm, sess.opts.cg.passes.clone());\n     let mut metadata_config = ModuleConfig::new(tm, vec![]);\n \n+    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n+        match *sanitizer {\n+            Sanitizer::Address => {\n+                modules_config.passes.push(\"asan\".to_owned());\n+                modules_config.passes.push(\"asan-module\".to_owned());\n+            }\n+            Sanitizer::Memory => {\n+                modules_config.passes.push(\"msan\".to_owned())\n+            }\n+            Sanitizer::Thread => {\n+                modules_config.passes.push(\"tsan\".to_owned())\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n "}, {"sha": "7ac482459ee39f5846a3dd4ec807bbde27cb8405", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -23,6 +23,7 @@\n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n use rustc::ty;\n+use rustc::session::config::Sanitizer;\n use abi::{Abi, FnType};\n use attributes;\n use context::CrateContext;\n@@ -72,6 +73,21 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n \n+    if let Some(ref sanitizer) = ccx.tcx().sess.opts.debugging_opts.sanitizer {\n+        match *sanitizer {\n+            Sanitizer::Address => {\n+                llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n+            },\n+            Sanitizer::Memory => {\n+                llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n+            },\n+            Sanitizer::Thread => {\n+                llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n+            },\n+            _ => {}\n+        }\n+    }\n+\n     // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n     // compiler-rt, then we want to implicitly compile everything with hidden\n     // visibility as we're going to link this object all over the place but"}, {"sha": "2af0ae3f73411da48d978e251dcb849e81882700", "filename": "src/librustc_tsan/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_tsan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_tsan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "2ba5866ab9d441ce04a48319a7bc75824f2ca8d5", "filename": "src/librustc_tsan/build.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"tsan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.tsan-x86_64\");\n+\n+        let src_dir = PathBuf::from(env::var_os(\"CARGO_MANIFEST_DIR\").unwrap());\n+        let mut stack = src_dir.join(\"../compiler-rt\")\n+            .read_dir()\n+            .unwrap()\n+            .map(|e| e.unwrap())\n+            .filter(|e| &*e.file_name() != \".git\")\n+            .collect::<Vec<_>>();\n+        while let Some(entry) = stack.pop() {\n+            let path = entry.path();\n+            if entry.file_type().unwrap().is_dir() {\n+                stack.extend(path.read_dir().unwrap().map(|e| e.unwrap()));\n+            } else {\n+                println!(\"cargo:rerun-if-changed={}\", path.display());\n+            }\n+        }\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_tsan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "2ba7517d3d2023761a0cc24838d184fe2c95d2f4", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -23,13 +23,23 @@ compiler_builtins = { path = \"../libcompiler_builtins\" }\n std_unicode = { path = \"../libstd_unicode\" }\n unwind = { path = \"../libunwind\" }\n \n+[target.x86_64-unknown-linux-gnu.dependencies]\n+rustc_asan = { path = \"../librustc_asan\", optional = true }\n+rustc_lsan = { path = \"../librustc_lsan\", optional = true }\n+rustc_msan = { path = \"../librustc_msan\", optional = true }\n+rustc_tsan = { path = \"../librustc_tsan\", optional = true }\n+\n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n gcc = \"0.3.27\"\n \n [features]\n+asan = [\"rustc_asan\"]\n backtrace = []\n debug-jemalloc = [\"alloc_jemalloc/debug\"]\n jemalloc = [\"alloc_jemalloc\"]\n force_alloc_system = []\n+lsan = [\"rustc_lsan\"]\n+msan = [\"rustc_msan\"]\n panic-unwind = [\"panic_unwind\"]\n+tsan = [\"rustc_tsan\"]"}, {"sha": "6a16a0ef353a43090923004d5fe9a3727560101c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -328,6 +328,10 @@ declare_features! (\n \n     // `extern \"msp430-interrupt\" fn()`\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n+\n+    // Used to identify crates that contain sanitizer runtimes\n+    // rustc internal\n+    (active, sanitizer_runtime, \"1.17.0\", None),\n );\n \n declare_features! (\n@@ -647,6 +651,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                               contains compiler-rt intrinsics and will never be \\\n                                               stable\",\n                                           cfg_fn!(compiler_builtins))),\n+    (\"sanitizer_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"sanitizer_runtime\",\n+                                             \"the `#[sanitizer_runtime]` attribute is used to \\\n+                                              identify crates that contain the runtime of a \\\n+                                              sanitizer and will never be stable\",\n+                                             cfg_fn!(sanitizer_runtime))),\n \n     (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n                                               \"allow_internal_unstable\","}, {"sha": "db96079d3e916e1fb789fe88bdab6a39a90de3cb", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -35,8 +35,12 @@ core = { path = \"../../libcore\" }\n \n # Reexport features from std\n [features]\n+asan = [\"std/asan\"]\n backtrace = [\"std/backtrace\"]\n debug-jemalloc = [\"std/debug-jemalloc\"]\n jemalloc = [\"std/jemalloc\"]\n force_alloc_system = [\"std/force_alloc_system\"]\n+lsan = [\"std/lsan\"]\n+msan = [\"std/msan\"]\n panic-unwind = [\"std/panic-unwind\"]\n+tsan = [\"std/tsan\"]"}, {"sha": "58dfe0a3d38f37bc68b06cab84c173e3766905f3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -148,6 +148,12 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ZExt;\n   case InReg:\n     return Attribute::InReg;\n+  case SanitizeThread:\n+    return Attribute::SanitizeThread;\n+  case SanitizeAddress:\n+    return Attribute::SanitizeAddress;\n+  case SanitizeMemory:\n+    return Attribute::SanitizeMemory;\n   }\n   llvm_unreachable(\"bad AttributeKind\");\n }"}, {"sha": "0baf5528e9356574397864719da3747f44ed98a8", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -98,6 +98,9 @@ enum LLVMRustAttribute {\n   UWTable = 17,\n   ZExt = 18,\n   InReg = 19,\n+  SanitizeThread = 20,\n+  SanitizeAddress = 21,\n+  SanitizeMemory = 22,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "a18641d824691534bd1934a1cef8969ef724b0dc", "filename": "src/test/compile-fail/feature-gate-sanitizer-runtime.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![sanitizer_runtime] //~ ERROR the `#[sanitizer_runtime]` attribute is\n+\n+fn main() {}"}, {"sha": "c490f490cdf7f91cac3c2231cc2b2d891db25a07", "filename": "src/test/run-make/sanitizer-address/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+# NOTE the address sanitizer only supports x86_64 linux\n+ifndef IS_WINDOWS\n+ifeq ($(shell uname),Linux)\n+ifeq ($(shell uname -m),x86_64)\n+all:\n+\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args overflow.rs | grep -q librustc_asan\n+\t$(TMPDIR)/overflow 2>&1 | grep -q stack-buffer-overflow\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif"}, {"sha": "e35c3873f7eb5a23554fb3a10e40e98face92db5", "filename": "src/test/run-make/sanitizer-address/overflow.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let xs = [0, 1, 2, 3];\n+    let y = unsafe { *xs.as_ptr().offset(4) };\n+}"}, {"sha": "70a8254a6a655caf3957f714edbb496667eb7b18", "filename": "src/test/run-make/sanitizer-dylib/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -Z sanitizer=leak --crate-type dylib hello.rs 2>&1 | grep -q 'Only executables and rlibs can be compiled with `-Z sanitizer`'"}, {"sha": "41782851a1a6d763c5487a0ae35edc01fb71d6fb", "filename": "src/test/run-make/sanitizer-dylib/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "6a1ce8bab2fb6c064668dd3792d970a50aa30616", "filename": "src/test/run-make/sanitizer-invalid-target/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | grep -q 'Sanitizers only work with the `x86_64-unknown-linux-gnu` target'"}, {"sha": "e9e46b7702a804ae77f152ba9bc7a4680c759f51", "filename": "src/test/run-make/sanitizer-invalid-target/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "492e328fab239b59e48da31206e3e563a7d9552d", "filename": "src/test/run-make/sanitizer-leak/Makefile", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,23 @@\n+-include ../tools.mk\n+\n+# NOTE the leak sanitizer only supports x86_64 linux\n+# Also, this particular sanitizer sometimes doesn't work so we are not going to\n+# run the binary\n+ifndef IS_WINDOWS\n+ifeq ($(shell uname),Linux)\n+ifeq ($(shell uname -m),x86_64)\n+all:\n+\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | grep -q librustc_lsan\n+\t$(TMPDIR)/leak 2>&1 | grep -q 'detected memory leaks'\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif"}, {"sha": "279da6aaae707a0ac11073ab63fa8b8ef35c8089", "filename": "src/test/run-make/sanitizer-leak/leak.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+fn main() {\n+    let xs = vec![1, 2, 3, 4];\n+    mem::forget(xs);\n+}"}, {"sha": "f8960992a0df0ce895842ff83fd16f82e2468865", "filename": "src/test/run-make/sanitizer-memory/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+# NOTE the memory sanitizer only supports x86_64 linux\n+ifndef IS_WINDOWS\n+ifeq ($(shell uname),Linux)\n+ifeq ($(shell uname -m),x86_64)\n+all:\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | grep -q librustc_msan\n+\t$(TMPDIR)/uninit 2>&1 | grep -q use-of-uninitialized-value\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif"}, {"sha": "8350c7de3acab91c42de3a650e3f7a9e6eb16aac", "filename": "src/test/run-make/sanitizer-memory/uninit.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+fn main() {\n+    let xs: [u8; 4] = unsafe { mem::uninitialized() };\n+    let y = xs[0] + xs[1];\n+}"}, {"sha": "e32247c4a9b24d4ce1b6852c5fe8dbf5416c2e11", "filename": "src/test/run-make/sanitizer-thread/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+# NOTE the leak sanitizer only supports x86_64 linux\n+ifndef IS_WINDOWS\n+ifeq ($(shell uname),Linux)\n+ifeq ($(shell uname -m),x86_64)\n+all:\n+\t$(RUSTC) -g -Z sanitizer=thread -Z print-link-args racy.rs | grep -q librustc_tsan\n+\t$(TMPDIR)/racy 2>&1 | grep -q 'data race'\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif\n+else\n+all:\n+\n+endif"}, {"sha": "dc929e004a47979d0f0f6cbd5549057bd91b6d20", "filename": "src/test/run-make/sanitizer-thread/racy.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6aa38895d3c1d263c52984666893b9ca22fe1/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs?ref=9af6aa38895d3c1d263c52984666893b9ca22fe1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread;\n+\n+static mut ANSWER: i32 = 0;\n+\n+fn main() {\n+    let t1 = thread::spawn(|| unsafe { ANSWER = 42 });\n+    unsafe {\n+        ANSWER = 24;\n+    }\n+    t1.join().ok();\n+}"}]}