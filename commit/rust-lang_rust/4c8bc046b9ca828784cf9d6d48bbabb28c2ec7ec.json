{"sha": "4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "node_id": "C_kwDOAAsO6NoAKDRjOGJjMDQ2YjljYTgyODc4NGNmOWQ2ZDQ4YmJhYmIyOGMyZWM3ZWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-28T18:41:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T18:41:52Z"}, "message": "Rollup merge of #95397 - dtolnay:disclaimer, r=m-ou-se\n\nLink to std::io's platform-specific behavior disclaimer\n\nThis PR adds some links in standard library documentation to point to https://doc.rust-lang.org/std/io/index.html#platform-specific-behavior.\n\n> ### Platform-specific behavior\n>\n> Many I/O functions throughout the standard library are documented to indicate what various library or syscalls they are delegated to. This is done to help applications both understand what\u2019s happening under the hood as well as investigate any possibly unclear semantics. Note, however, that this is informative, not a binding contract. The implementation of many of these functions are subject to change over time and may call fewer or more syscalls/library functions.\n\nMany of the `std::fs` APIs already link to this disclaimer when discussing system calls.", "tree": {"sha": "edd187e3f26184f9aedf4adfa8eb7d264688dd31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd187e3f26184f9aedf4adfa8eb7d264688dd31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQgFxCRBK7hj4Ov3rIwAAgF8IALG/SLLaPyRjLmUxHBQL+ll4\nbxIv3qCUpGupCoFd8audY7S92KCuSV9Lc/qCsAHbgCEOWI5prbisgqdROBz7/Z3R\nyBIB2miSQa36zicb1eJS5ZEunURDbWo/LMN10a4LOp/bS8j0y4A7ckzqS0743AyK\n1S7ndSSvle+MKAtCMybNTH/7Jsak6BBnrLRks16oK44+DNYw+Tvf+HxQPZCC60ES\nez2lNFZmBzLpOkLnpecJ/Wo8O7xTEBYnFlXRcJzXpHCpTWGg1VZgHeofM9nTITJa\n2sFDu6vK2uQGC6WzJ5QBnc5iPESezvFH8lM+8EUA09C+4VmmVglatH0oTJc2T8M=\n=nMg5\n-----END PGP SIGNATURE-----\n", "payload": "tree edd187e3f26184f9aedf4adfa8eb7d264688dd31\nparent ce319ac1a2a6af741cb7c4b574c7d0d730f899c4\nparent d55854d484f64e7a2b570e28ff1250112b6578e2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648492912 +0200\ncommitter GitHub <noreply@github.com> 1648492912 +0200\n\nRollup merge of #95397 - dtolnay:disclaimer, r=m-ou-se\n\nLink to std::io's platform-specific behavior disclaimer\n\nThis PR adds some links in standard library documentation to point to https://doc.rust-lang.org/std/io/index.html#platform-specific-behavior.\n\n> ### Platform-specific behavior\n>\n> Many I/O functions throughout the standard library are documented to indicate what various library or syscalls they are delegated to. This is done to help applications both understand what\u2019s happening under the hood as well as investigate any possibly unclear semantics. Note, however, that this is informative, not a binding contract. The implementation of many of these functions are subject to change over time and may call fewer or more syscalls/library functions.\n\nMany of the `std::fs` APIs already link to this disclaimer when discussing system calls.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "html_url": "https://github.com/rust-lang/rust/commit/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "html_url": "https://github.com/rust-lang/rust/commit/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4"}, {"sha": "d55854d484f64e7a2b570e28ff1250112b6578e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55854d484f64e7a2b570e28ff1250112b6578e2", "html_url": "https://github.com/rust-lang/rust/commit/d55854d484f64e7a2b570e28ff1250112b6578e2"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "f03d298d8699db9f0127835ffa73a919f1def60e", "filename": "library/std/src/env.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "patch": "@@ -25,9 +25,11 @@ use crate::sys::os as os_imp;\n ///\n /// # Platform-specific behavior\n ///\n-/// This function currently corresponds to the `getcwd` function on Unix\n+/// This function [currently] corresponds to the `getcwd` function on Unix\n /// and the `GetCurrentDirectoryW` function on Windows.\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n+///\n /// # Errors\n ///\n /// Returns an [`Err`] if the current working directory value is invalid.\n@@ -56,11 +58,13 @@ pub fn current_dir() -> io::Result<PathBuf> {\n ///\n /// # Platform-specific behavior\n ///\n-/// This function currently corresponds to the `chdir` function on Unix\n+/// This function [currently] corresponds to the `chdir` function on Unix\n /// and the `SetCurrentDirectoryW` function on Windows.\n ///\n /// Returns an [`Err`] if the operation fails.\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "708e4064e06f3a57921f4a8d01337a50c56d3e90", "filename": "library/std/src/time.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=4c8bc046b9ca828784cf9d6d48bbabb28c2ec7ec", "patch": "@@ -101,7 +101,9 @@ pub use core::time::FromFloatSecsError;\n /// ```\n ///\n /// # Underlying System calls\n-/// Currently, the following system calls are being used to get the current time using `now()`:\n+///\n+/// The following system calls are [currently] being used by `now()` to find out\n+/// the current time:\n ///\n /// |  Platform |               System call                                            |\n /// |-----------|----------------------------------------------------------------------|\n@@ -113,6 +115,7 @@ pub use core::time::FromFloatSecsError;\n /// | WASI      | [__wasi_clock_time_get (Monotonic Clock)]                            |\n /// | Windows   | [QueryPerformanceCounter]                                            |\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n /// [QueryPerformanceCounter]: https://docs.microsoft.com/en-us/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n@@ -203,7 +206,8 @@ pub struct Instant(time::Instant);\n /// For example, on Windows the time is represented in 100 nanosecond intervals whereas Linux\n /// can represent nanosecond intervals.\n ///\n-/// Currently, the following system calls are being used to get the current time using `now()`:\n+/// The following system calls are [currently] being used by `now()` to find out\n+/// the current time:\n ///\n /// |  Platform |               System call                                            |\n /// |-----------|----------------------------------------------------------------------|\n@@ -215,6 +219,7 @@ pub struct Instant(time::Instant);\n /// | WASI      | [__wasi_clock_time_get (Realtime Clock)]                             |\n /// | Windows   | [GetSystemTimePreciseAsFileTime] / [GetSystemTimeAsFileTime]         |\n ///\n+/// [currently]: crate::io#platform-specific-behavior\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: https://man7.org/linux/man-pages/man2/gettimeofday.2.html"}]}