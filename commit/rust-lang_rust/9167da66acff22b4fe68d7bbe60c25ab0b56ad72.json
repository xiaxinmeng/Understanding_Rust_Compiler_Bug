{"sha": "9167da66acff22b4fe68d7bbe60c25ab0b56ad72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjdkYTY2YWNmZjIyYjRmZTY4ZDdiYmU2MGMyNWFiMGI1NmFkNzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T11:15:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T11:15:04Z"}, "message": "Reduce visibility", "tree": {"sha": "a592563455d7c2348a2e1987a731ec105b93b54c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a592563455d7c2348a2e1987a731ec105b93b54c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9167da66acff22b4fe68d7bbe60c25ab0b56ad72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9167da66acff22b4fe68d7bbe60c25ab0b56ad72", "html_url": "https://github.com/rust-lang/rust/commit/9167da66acff22b4fe68d7bbe60c25ab0b56ad72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9167da66acff22b4fe68d7bbe60c25ab0b56ad72/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3948de3143d06cc3056b6b8f0d18cb3e1468ae03", "url": "https://api.github.com/repos/rust-lang/rust/commits/3948de3143d06cc3056b6b8f0d18cb3e1468ae03", "html_url": "https://github.com/rust-lang/rust/commit/3948de3143d06cc3056b6b8f0d18cb3e1468ae03"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c1ecf18b9639c58f22d154f3e9a50f499c26ab00", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9167da66acff22b4fe68d7bbe60c25ab0b56ad72/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9167da66acff22b4fe68d7bbe60c25ab0b56ad72/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=9167da66acff22b4fe68d7bbe60c25ab0b56ad72", "patch": "@@ -285,7 +285,7 @@ impl SourceAnalyzer {\n         self.resolve_hir_path(db, &hir_path)\n     }\n \n-    pub fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n+    fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n         let mut shadowed = FxHashSet::default();\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n@@ -309,9 +309,9 @@ impl SourceAnalyzer {\n         self.resolver.process_all_names(db, f)\n     }\n \n+    // FIXME: we only use this in `inline_local_variable` assist, ideally, we\n+    // should switch to general reference search infra there.\n     pub fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n-        // FIXME: at least, this should work with any DefWithBody, but ideally\n-        // this should be hir-based altogether\n         let fn_def = pat.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n         let ptr = Either::A(AstPtr::new(&ast::Pat::from(pat.clone())));\n         fn_def"}]}