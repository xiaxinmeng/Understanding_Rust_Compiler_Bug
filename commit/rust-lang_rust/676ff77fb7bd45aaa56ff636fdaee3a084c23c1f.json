{"sha": "676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NmZmNzdmYjdiZDQ1YWFhNTZmZjYzNmZkYWVlM2EwODRjMjNjMWY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-05T11:25:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-05T11:25:52Z"}, "message": "Rollup merge of #80726 - lcnr:unsize-query, r=oli-obk\n\nrelax adt unsizing requirements\n\nChanges unsizing of structs in case the last struct field shares generic params with other adt fields which do not change.\nThis change is currently insta stable and changes the language, so it at least requires a lang fcp. I feel like the current state is fairly unintuitive.\n\nAn example for what's now allowed would be https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6dd331d23f5c9ffc8c978175aae2e967\n```rust\nstruct A<T, U: ?Sized>(T, B<T, U>); // previously ERR\n// struct A<T, U: ?Sized>(T, B<[u32; 1], U>); // ok\nstruct B<T, U: ?Sized>(T, U);\n\nfn main() {\n    let x = A([0; 1], B([0; 1], [0; 1]));\n    let y: &A<[u32; 1], [u32]> = &x;\n    assert_eq!(y.1.1.len(), 1);\n}\n```", "tree": {"sha": "4d6c2ec0130435a594a51f16a14d66c387c50356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6c2ec0130435a594a51f16a14d66c387c50356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHStACRBK7hj4Ov3rIwAAdHIIABJcwa6AGSpH/GnnseAHXrIG\nvjMQnDTMn7BDOiNm5YgUZdv5JcbJtwN0IfKmdfURTNHhy4jxly7lRDqAYZHk8iVh\nkVqSR2gVRnZXxtiOSyyvEI5cvkQ1S+diTF8Acbn04davnD2NaOJHkR/1P51lJf2/\neKF9ytWdTur8mPosMydJFW3G3FtW7Av3UCi43AtfIHjEb1kyEBUEH91Yt/f/gZw7\ng+L7ixNItD03AzwuIEqZ0I3vHV/qZTpjbTr1FdyvlAGBPftOuUOzWeVv99nCIM9X\nwOGIrISSgcPWnFVOKbutgvuevXIb/4JG6VlG7arM4X+WQbsYfGMkgN4K53M+zCE=\n=t00s\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d6c2ec0130435a594a51f16a14d66c387c50356\nparent deec6a96d428d20250bfad2317c00fc67e4b70f0\nparent 031cce8cfc7fef922989e8b820da236ee17e016a\nauthor Mara Bos <m-ou.se@m-ou.se> 1612524352 +0100\ncommitter GitHub <noreply@github.com> 1612524352 +0100\n\nRollup merge of #80726 - lcnr:unsize-query, r=oli-obk\n\nrelax adt unsizing requirements\n\nChanges unsizing of structs in case the last struct field shares generic params with other adt fields which do not change.\nThis change is currently insta stable and changes the language, so it at least requires a lang fcp. I feel like the current state is fairly unintuitive.\n\nAn example for what's now allowed would be https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=6dd331d23f5c9ffc8c978175aae2e967\n```rust\nstruct A<T, U: ?Sized>(T, B<T, U>); // previously ERR\n// struct A<T, U: ?Sized>(T, B<[u32; 1], U>); // ok\nstruct B<T, U: ?Sized>(T, U);\n\nfn main() {\n    let x = A([0; 1], B([0; 1], [0; 1]));\n    let y: &A<[u32; 1], [u32]> = &x;\n    assert_eq!(y.1.1.len(), 1);\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "html_url": "https://github.com/rust-lang/rust/commit/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deec6a96d428d20250bfad2317c00fc67e4b70f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/deec6a96d428d20250bfad2317c00fc67e4b70f0", "html_url": "https://github.com/rust-lang/rust/commit/deec6a96d428d20250bfad2317c00fc67e4b70f0"}, {"sha": "031cce8cfc7fef922989e8b820da236ee17e016a", "url": "https://api.github.com/repos/rust-lang/rust/commits/031cce8cfc7fef922989e8b820da236ee17e016a", "html_url": "https://github.com/rust-lang/rust/commit/031cce8cfc7fef922989e8b820da236ee17e016a"}], "stats": {"total": 114, "additions": 96, "deletions": 18}, "files": [{"sha": "4f38e060023675fcb922cc3d151497732c1537e6", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "patch": "@@ -631,6 +631,9 @@ declare_features! (\n \n     /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n     (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n+\n+    /// Lessens the requirements for structs to implement `Unsize`.\n+    (active, relaxed_struct_unsize, \"1.51.0\", Some(1), None),\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "100824f4b94480b8875a733b7a116b2fdfc029f5", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "patch": "@@ -707,6 +707,18 @@ impl<T: Idx> GrowableBitSet<T> {\n         self.bit_set.insert(elem)\n     }\n \n+    /// Returns `true` if the set has changed.\n+    #[inline]\n+    pub fn remove(&mut self, elem: T) -> bool {\n+        self.ensure(elem.index() + 1);\n+        self.bit_set.remove(elem)\n+    }\n+\n+    #[inline]\n+    pub fn is_empty(&self) -> bool {\n+        self.bit_set.is_empty()\n+    }\n+\n     #[inline]\n     pub fn contains(&self, elem: T) -> bool {\n         let (word_index, mask) = word_index_and_mask(elem);"}, {"sha": "86f8061a24affe52ee2ebc076bf261df108b82e9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "patch": "@@ -907,6 +907,7 @@ symbols! {\n         register_attr,\n         register_tool,\n         relaxed_adts,\n+        relaxed_struct_unsize,\n         rem,\n         rem_assign,\n         repr,"}, {"sha": "ed3e117fcfabbbb841243ddf86e5eb868862e95e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "patch": "@@ -823,33 +823,59 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     },\n                 };\n \n+                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+                // by putting it in a query; it would only need the `DefId` as it\n+                // looks at declared field types, not anything substituted.\n+\n                 // The last field of the structure has to exist and contain type/const parameters.\n                 let (tail_field, prefix_fields) =\n                     def.non_enum_variant().fields.split_last().ok_or(Unimplemented)?;\n                 let tail_field_ty = tcx.type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                let mut found = false;\n-                for arg in tail_field_ty.walk() {\n-                    if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                        unsizing_params.insert(i);\n-                        found = true;\n+                if tcx.features().relaxed_struct_unsize {\n+                    for arg in tail_field_ty.walk() {\n+                        if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                            unsizing_params.insert(i);\n+                        }\n                     }\n-                }\n-                if !found {\n-                    return Err(Unimplemented);\n-                }\n \n-                // Ensure none of the other fields mention the parameters used\n-                // in unsizing.\n-                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-                // by putting it in a query; it would only need the `DefId` as it\n-                // looks at declared field types, not anything substituted.\n-                for field in prefix_fields {\n-                    for arg in tcx.type_of(field.did).walk() {\n+                    // Ensure none of the other fields mention the parameters used\n+                    // in unsizing.\n+                    for field in prefix_fields {\n+                        for arg in tcx.type_of(field.did).walk() {\n+                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                                unsizing_params.remove(i);\n+                            }\n+                        }\n+                    }\n+\n+                    if unsizing_params.is_empty() {\n+                        return Err(Unimplemented);\n+                    }\n+                } else {\n+                    let mut found = false;\n+                    for arg in tail_field_ty.walk() {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            if unsizing_params.contains(i) {\n-                                return Err(Unimplemented);\n+                            unsizing_params.insert(i);\n+                            found = true;\n+                        }\n+                    }\n+                    if !found {\n+                        return Err(Unimplemented);\n+                    }\n+\n+                    // Ensure none of the other fields mention the parameters used\n+                    // in unsizing.\n+                    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+                    // by putting it in a query; it would only need the `DefId` as it\n+                    // looks at declared field types, not anything substituted.\n+                    for field in prefix_fields {\n+                        for arg in tcx.type_of(field.did).walk() {\n+                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                                if unsizing_params.contains(i) {\n+                                    return Err(Unimplemented);\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "0cfd0a0b9784c9d2b7b736825c0a607aa4c23b07", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs?ref=676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "patch": "@@ -0,0 +1,10 @@\n+// Test that we allow unsizing even if there is an unchanged param in the\n+// field getting unsized.\n+struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n+struct B<T, U: ?Sized>(T, U);\n+\n+fn main() {\n+    let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));\n+    let y: &A<[u32; 1], [u32]> = &x; //~ ERROR mismatched types\n+    assert_eq!(y.1.1.len(), 1);\n+}"}, {"sha": "f62def47726f92c4e1c5bdccbbd5efc0664428bc", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr?ref=676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-relaxed_struct_unsize.rs:8:34\n+   |\n+LL |     let y: &A<[u32; 1], [u32]> = &x;\n+   |            -------------------   ^^ expected slice `[u32]`, found array `[u32; 1]`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&A<[u32; 1], [u32]>`\n+              found reference `&A<[u32; 1], [u32; 1]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "83199e8112e71d2ad12245d61793e49d91e142bc", "filename": "src/test/ui/unsized/unchanged-param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676ff77fb7bd45aaa56ff636fdaee3a084c23c1f/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs?ref=676ff77fb7bd45aaa56ff636fdaee3a084c23c1f", "patch": "@@ -0,0 +1,12 @@\n+#![feature(relaxed_struct_unsize)]\n+// run-pass\n+// Test that we allow unsizing even if there is an unchanged param in the\n+// field getting unsized.\n+struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n+struct B<T, U: ?Sized>(T, U);\n+\n+fn main() {\n+    let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));\n+    let y: &A<[u32; 1], [u32]> = &x;\n+    assert_eq!(y.1.1.len(), 1);\n+}"}]}