{"sha": "11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYTVkMTBiZjI5NThjNjQyYWU2YTdjNGFmZmY4ZTE4MWFhMjE2N2Q=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-03T19:56:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-03T20:09:02Z"}, "message": "Implement better shape code for evec, estr.", "tree": {"sha": "94e14a4863f8ff951f82556485146960d5584b8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e14a4863f8ff951f82556485146960d5584b8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "html_url": "https://github.com/rust-lang/rust/commit/11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1fc7d5f0126e4c213cac589bf301814e0327b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1fc7d5f0126e4c213cac589bf301814e0327b9e", "html_url": "https://github.com/rust-lang/rust/commit/e1fc7d5f0126e4c213cac589bf301814e0327b9e"}], "stats": {"total": 382, "additions": 336, "deletions": 46}, "files": [{"sha": "bc5e0dfdda5c236ec112475461e8ff1641cc4a7e", "filename": "src/rt/rust_box_annihilator.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "patch": "@@ -49,8 +49,16 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n         task->kernel->free(vec);\n     }\n \n+    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+    }\n+\n     void walk_vec2(bool is_pod,\n                   const std::pair<shape::ptr,shape::ptr> &data_range) {\n+\n+        if (is_pod)\n+            return;\n+\n         annihilator sub(*this, data_range.first);\n         shape::ptr data_end = sub.end_dp = data_range.second;\n         while (sub.dp < data_end) {\n@@ -64,6 +72,10 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n           ::walk_variant1(tinfo, tag_variant);\n     }\n \n+    void walk_rptr2() { }\n+\n+    void walk_slice2(bool, bool) { }\n+\n     void walk_uniq2() {\n         void *x = *((void **)dp);\n         // free contents first:"}, {"sha": "4e3facd0413f1a2a39bde29eca42f96f73c8d2aa", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "patch": "@@ -73,19 +73,37 @@ class irc : public shape::data<irc,shape::ptr> {\n                                   in_tables, in_data),\n       ircs(in_ircs) {}\n \n-    void walk_vec2(bool is_pod) {\n-        if (is_pod || shape::get_dp<void *>(dp) == NULL)\n-            return;     // There can't be any outbound pointers from this.\n \n-        std::pair<uint8_t *,uint8_t *> data_range(get_vec_data_range(dp));\n+    void walk_vec2(bool is_pod, std::pair<uint8_t *,uint8_t *> data_range) {\n+\n+        // There can't be any outbound pointers from pod.\n+        if (is_pod)\n+            return;\n+\n         irc sub(*this, data_range.first);\n         shape::ptr data_end = sub.end_dp = data_range.second;\n         while (sub.dp < data_end) {\n             sub.walk_reset();\n+            // FIXME: shouldn't this be 'sub.align = true;'?\n             align = true;\n         }\n     }\n \n+    void walk_vec2(bool is_pod) {\n+        if (shape::get_dp<void *>(dp) == NULL)\n+            return;\n+\n+        walk_vec2(is_pod, get_vec_data_range(dp));\n+    }\n+\n+    void walk_slice2(bool is_pod, bool is_str) {\n+        walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n+    }\n+\n+    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+    }\n+\n     void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n         shape::data<irc,shape::ptr>::walk_variant1(tinfo, tag_variant);\n     }\n@@ -102,6 +120,10 @@ class irc : public shape::data<irc,shape::ptr> {\n         shape::data<irc,shape::ptr>::walk_uniq_contents1();\n     }\n \n+    void walk_rptr2() {\n+        shape::data<irc,shape::ptr>::walk_rptr_contents1();\n+    }\n+\n     void walk_fn2(char code) {\n         switch (code) {\n           case shape::SHAPE_BOX_FN: {\n@@ -137,6 +159,8 @@ class irc : public shape::data<irc,shape::ptr> {\n \n     void walk_uniq_contents2(irc &sub) { sub.walk(); }\n \n+    void walk_rptr_contents2(irc &sub) { sub.walk(); }\n+\n     void walk_box_contents2(irc &sub) {\n         maybe_record_irc();\n \n@@ -305,11 +329,12 @@ class mark : public shape::data<mark,shape::ptr> {\n                                    in_tables, in_data),\n       marked(in_marked) {}\n \n-    void walk_vec2(bool is_pod) {\n-        if (is_pod || shape::get_dp<void *>(dp) == NULL)\n-            return;     // There can't be any outbound pointers from this.\n+    void walk_vec2(bool is_pod, std::pair<uint8_t *,uint8_t *> data_range) {\n+\n+        // There can't be any outbound pointers from pod.\n+        if (is_pod)\n+            return;\n \n-        std::pair<uint8_t *,uint8_t *> data_range(get_vec_data_range(dp));\n         if (data_range.second - data_range.first > 100000)\n             abort();    // FIXME: Temporary sanity check.\n \n@@ -321,6 +346,20 @@ class mark : public shape::data<mark,shape::ptr> {\n         }\n     }\n \n+    void walk_vec2(bool is_pod) {\n+        if (shape::get_dp<void *>(dp) == NULL)\n+            return;\n+        walk_vec2(is_pod, get_vec_data_range(dp));\n+    }\n+\n+    void walk_slice2(bool is_pod, bool is_str) {\n+        walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n+    }\n+\n+    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+    }\n+\n     void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n         shape::data<mark,shape::ptr>::walk_variant1(tinfo, tag_variant);\n     }\n@@ -337,6 +376,10 @@ class mark : public shape::data<mark,shape::ptr> {\n         shape::data<mark,shape::ptr>::walk_uniq_contents1();\n     }\n \n+    void walk_rptr2() {\n+        shape::data<mark,shape::ptr>::walk_rptr_contents1();\n+    }\n+\n     void walk_fn2(char code) {\n         switch (code) {\n           case shape::SHAPE_BOX_FN: {\n@@ -372,6 +415,8 @@ class mark : public shape::data<mark,shape::ptr> {\n \n     void walk_uniq_contents2(mark &sub) { sub.walk(); }\n \n+    void walk_rptr_contents2(mark &sub) { sub.walk(); }\n+\n     void walk_box_contents2(mark &sub) {\n         rust_opaque_box *box_ptr = *(rust_opaque_box **) dp;\n "}, {"sha": "9f3fbbed89e54955abca09a93f430a96e53ea5e2", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "patch": "@@ -254,6 +254,9 @@ class cmp : public data<cmp,ptr_pair> {\n     friend class data<cmp,ptr_pair>;\n \n private:\n+    void walk_slice2(bool is_pod,\n+                     const std::pair<ptr_pair,ptr_pair> &data_range);\n+\n     void walk_vec2(bool is_pod,\n                    const std::pair<ptr_pair,ptr_pair> &data_range);\n \n@@ -274,6 +277,12 @@ class cmp : public data<cmp,ptr_pair> {\n         result = sub.result;\n     }\n \n+    inline void walk_rptr_contents2(cmp &sub) {\n+        sub.align = true;\n+        sub.walk();\n+        result = sub.result;\n+    }\n+\n     inline void cmp_two_pointers() {\n         ALIGN_TO(rust_alignof<void *>());\n         data_pair<uint8_t *> fst = bump_dp<uint8_t *>(dp);\n@@ -341,6 +350,16 @@ class cmp : public data<cmp,ptr_pair> {\n         walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n+    void walk_slice2(bool is_pod, bool is_str) {\n+        // Slices compare just like vecs.\n+        walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n+    }\n+\n+    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n+        // Fixedvecs compare just like vecs.\n+        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+    }\n+\n     void walk_box2() {\n         data<cmp,ptr_pair>::walk_box_contents1();\n     }\n@@ -349,6 +368,10 @@ class cmp : public data<cmp,ptr_pair> {\n         data<cmp,ptr_pair>::walk_uniq_contents1();\n     }\n \n+    void walk_rptr2() {\n+        data<cmp,ptr_pair>::walk_rptr_contents1();\n+    }\n+\n     void walk_iface2() {\n         data<cmp,ptr_pair>::walk_box_contents1();\n     }"}, {"sha": "112a61ee239796b358b758c58bf2c7499c0c6098", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 161, "deletions": 2, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "patch": "@@ -59,6 +59,8 @@ const uint8_t SHAPE_BARE_FN = 27u;\n const uint8_t SHAPE_TYDESC = 28u;\n const uint8_t SHAPE_SEND_TYDESC = 29u;\n const uint8_t SHAPE_RPTR = 31u;\n+const uint8_t SHAPE_FIXEDVEC = 32u;\n+const uint8_t SHAPE_SLICE = 33u;\n \n #ifdef _LP64\n const uint8_t SHAPE_PTR = SHAPE_U64;\n@@ -279,6 +281,9 @@ class ctxt {\n     void walk_struct0();\n     void walk_res0();\n     void walk_var0();\n+    void walk_rptr0();\n+    void walk_fixedvec0();\n+    void walk_slice0();\n };\n \n \n@@ -377,8 +382,11 @@ ctxt<T>::walk() {\n     case SHAPE_UNIQ_FN:\n     case SHAPE_STACK_FN:\n     case SHAPE_BARE_FN:  static_cast<T*>(this)->walk_fn1(s); break;\n-    case SHAPE_SEND_TYDESC:\n-    case SHAPE_TYDESC:   static_cast<T*>(this)->walk_tydesc1(s); break;\n+    case SHAPE_TYDESC:\n+    case SHAPE_SEND_TYDESC: static_cast<T*>(this)->walk_tydesc1(s); break;\n+    case SHAPE_RPTR:     walk_rptr0();            break;\n+    case SHAPE_FIXEDVEC: walk_fixedvec0();        break;\n+    case SHAPE_SLICE:    walk_slice0();           break;\n     default:             abort();\n     }\n }\n@@ -502,6 +510,44 @@ ctxt<T>::walk_uniq0() {\n     sp = end_sp;\n }\n \n+template<typename T>\n+void\n+ctxt<T>::walk_rptr0() {\n+    uint16_t sp_size = get_u16_bump(sp);\n+    const uint8_t *end_sp = sp + sp_size;\n+\n+    static_cast<T *>(this)->walk_rptr1();\n+\n+    sp = end_sp;\n+}\n+\n+template<typename T>\n+void\n+ctxt<T>::walk_fixedvec0() {\n+    uint16_t vec_size = get_u16_bump(sp);\n+    bool is_pod = *sp++;\n+    uint16_t sp_size = get_u16_bump(sp);\n+    const uint8_t *end_sp = sp + sp_size;\n+\n+    static_cast<T *>(this)->walk_fixedvec1(vec_size, is_pod);\n+\n+    sp = end_sp;\n+}\n+\n+template<typename T>\n+void\n+ctxt<T>::walk_slice0() {\n+    bool is_pod = *sp++;\n+    bool is_str = *sp++;\n+    uint16_t sp_size = get_u16_bump(sp);\n+    const uint8_t *end_sp = sp + sp_size;\n+\n+    static_cast<T *>(this)->walk_slice1(is_pod, is_str);\n+\n+    sp = end_sp;\n+}\n+\n+\n template<typename T>\n void\n ctxt<T>::walk_struct0() {\n@@ -580,6 +626,15 @@ class print : public ctxt<print> {\n     void walk_box1() {\n         DPRINT(\"@<\"); walk(); DPRINT(\">\");\n     }\n+    void walk_rptr1() {\n+        DPRINT(\"&<\"); walk(); DPRINT(\">\");\n+    }\n+    void walk_fixedvec1(uint16_t sz, bool is_pod) {\n+      DPRINT(\"fixedvec<%u, \", sz); walk(); DPRINT(\">\");\n+    }\n+    void walk_slice1(bool is_pod, bool is_str) {\n+      DPRINT(\"slice<\"); walk(); DPRINT(\">\");\n+    }\n \n     void walk_fn1(char kind) {\n         switch(kind) {\n@@ -641,6 +696,9 @@ class size_of : public ctxt<size_of> {\n     void walk_struct1(const uint8_t *end_sp);\n \n     void walk_uniq1()       { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_rptr1()       { sa.set(sizeof(void *),   sizeof(void *)); }\n+    void walk_slice1(bool,bool)\n+                            { sa.set(sizeof(void *)*2, sizeof(void *)); }\n     void walk_box1()        { sa.set(sizeof(void *),   sizeof(void *)); }\n     void walk_fn1(char)     { sa.set(sizeof(void *)*2, sizeof(void *)); }\n     void walk_iface1()      { sa.set(sizeof(void *),   sizeof(void *)); }\n@@ -663,6 +721,12 @@ class size_of : public ctxt<size_of> {\n         abort();    // TODO\n     }\n \n+    void walk_fixedvec1(uint16_t sz, bool is_pod) {\n+        size_of sub(*this);\n+        sub.walk();\n+        sa.set(sub.sa.size * sz, sub.sa.alignment);\n+    }\n+\n     template<typename T>\n     void walk_number1()  { sa.set(sizeof(T), rust_alignof<T>()); }\n \n@@ -881,13 +945,24 @@ class data : public ctxt< data<T,U> > {\n \n     void walk_box_contents1();\n     void walk_uniq_contents1();\n+    void walk_rptr_contents1();\n     void walk_fn_contents1();\n     void walk_iface_contents1();\n     void walk_variant1(tag_info &tinfo, tag_variant_t variant);\n \n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n     static std::pair<ptr_pair,ptr_pair> get_vec_data_range(ptr_pair &dp);\n \n+    static std::pair<uint8_t *,uint8_t *> get_slice_data_range(bool is_str,\n+                                                               ptr dp);\n+    static std::pair<ptr_pair,ptr_pair> get_slice_data_range(bool is_str,\n+                                                             ptr_pair &dp);\n+\n+    static std::pair<uint8_t *,uint8_t *>\n+        get_fixedvec_data_range(uint16_t sz, ptr dp);\n+    static std::pair<ptr_pair,ptr_pair>\n+        get_fixedvec_data_range(uint16_t sz, ptr_pair &dp);\n+\n public:\n     data(rust_task *in_task,\n          bool in_align,\n@@ -902,17 +977,30 @@ class data : public ctxt< data<T,U> > {\n     void walk_tag1(tag_info &tinfo);\n \n     void walk_struct1(const uint8_t *end_sp) {\n+        // FIXME: shouldn't we be aligning to the first element here?\n         static_cast<T *>(this)->walk_struct2(end_sp);\n     }\n \n     void walk_vec1(bool is_pod) {\n         DATA_SIMPLE(void *, walk_vec2(is_pod));\n     }\n \n+    void walk_slice1(bool is_pod, bool is_str) {\n+        DATA_SIMPLE(void *, walk_slice2(is_pod, is_str));\n+    }\n+\n+    void walk_fixedvec1(uint16_t sz, bool is_pod) {\n+        size_align sa = size_of::get(*this);\n+        ALIGN_TO(sa.alignment);\n+        static_cast<T *>(this)->walk_fixedvec2(sz, is_pod);\n+    }\n+\n     void walk_box1() { DATA_SIMPLE(void *, walk_box2()); }\n \n     void walk_uniq1() { DATA_SIMPLE(void *, walk_uniq2()); }\n \n+    void walk_rptr1() { DATA_SIMPLE(void *, walk_rptr2()); }\n+\n     void walk_fn1(char code) {\n         ALIGN_TO(rust_alignof<void *>());\n         U next_dp = dp + sizeof(void *) * 2;\n@@ -985,6 +1073,15 @@ data<T,U>::walk_uniq_contents1() {\n     static_cast<T *>(this)->walk_uniq_contents2(sub);\n }\n \n+template<typename T,typename U>\n+void\n+data<T,U>::walk_rptr_contents1() {\n+    typename U::template data<uint8_t *>::t box_ptr = bump_dp<uint8_t *>(dp);\n+    U data_ptr(box_ptr);\n+    T sub(*static_cast<T *>(this), data_ptr);\n+    static_cast<T *>(this)->walk_rptr_contents2(sub);\n+}\n+\n template<typename T,typename U>\n void\n data<T,U>::walk_variant1(tag_info &tinfo, tag_variant_t variant_id) {\n@@ -1012,6 +1109,45 @@ data<T,U>::get_vec_data_range(ptr_pair &dp) {\n     return std::make_pair(start, end);\n }\n \n+template<typename T,typename U>\n+std::pair<uint8_t *,uint8_t *>\n+data<T,U>::get_slice_data_range(bool is_str, ptr dp) {\n+    uint8_t* ptr = bump_dp<uint8_t*>(dp);\n+    size_t len = bump_dp<size_t>(dp);\n+    if (is_str) len--;\n+    return std::make_pair(ptr, ptr + len);\n+}\n+\n+template<typename T,typename U>\n+std::pair<ptr_pair,ptr_pair>\n+data<T,U>::get_slice_data_range(bool is_str, ptr_pair &dp) {\n+    std::pair<uint8_t *,uint8_t *> fst =\n+        get_slice_data_range(is_str, dp.fst);\n+    std::pair<uint8_t *,uint8_t *> snd =\n+        get_slice_data_range(is_str, dp.snd);\n+    ptr_pair start(fst.first, snd.first);\n+    ptr_pair end(fst.second, snd.second);\n+    return std::make_pair(start, end);\n+}\n+\n+template<typename T,typename U>\n+std::pair<uint8_t *,uint8_t *>\n+data<T,U>::get_fixedvec_data_range(uint16_t sz, ptr dp) {\n+    uint8_t* ptr = (uint8_t*)(dp);\n+    return std::make_pair(ptr, ptr + sz);\n+}\n+\n+template<typename T,typename U>\n+std::pair<ptr_pair,ptr_pair>\n+data<T,U>::get_fixedvec_data_range(uint16_t sz, ptr_pair &dp) {\n+    std::pair<uint8_t *,uint8_t *> fst = get_fixedvec_data_range(sz, dp.fst);\n+    std::pair<uint8_t *,uint8_t *> snd = get_fixedvec_data_range(sz, dp.snd);\n+    ptr_pair start(fst.first, snd.first);\n+    ptr_pair end(fst.second, snd.second);\n+    return std::make_pair(start, end);\n+}\n+\n+\n template<typename T,typename U>\n void\n data<T,U>::walk_tag1(tag_info &tinfo) {\n@@ -1111,6 +1247,16 @@ class log : public data<log,ptr> {\n             walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n+    void walk_slice2(bool is_pod, bool is_str) {\n+        walk_vec2(is_pod, get_slice_data_range(dp, is_str));\n+        out << \"/&\";\n+    }\n+\n+    void walk_fixedvec2(uint16_t sz, bool is_pod) {\n+        walk_vec2(is_pod, get_fixedvec_data_range(sz, dp));\n+        out << \"/\" << sz;\n+    }\n+\n     void walk_tag2(tag_info &tinfo, tag_variant_t tag_variant) {\n         // out << prefix << \"tag\" << tag_variant;\n         out << prefix << get_variant_name(tinfo, tag_variant);\n@@ -1129,6 +1275,12 @@ class log : public data<log,ptr> {\n         data<log,ptr>::walk_uniq_contents1();\n     }\n \n+    void walk_rptr2() {\n+        out << prefix << \"&\";\n+        prefix = \"\";\n+        data<log,ptr>::walk_rptr_contents1();\n+    }\n+\n     void walk_fn2(char kind) {\n         out << prefix << \"fn\";\n         prefix = \"\";\n@@ -1165,8 +1317,15 @@ class log : public data<log,ptr> {\n         sub.walk();\n     }\n \n+    void walk_rptr_contents2(log &sub) {\n+        out << prefix;\n+        sub.align = true;\n+        sub.walk();\n+    }\n+\n     void walk_struct2(const uint8_t *end_sp);\n     void walk_vec2(bool is_pod, const std::pair<ptr,ptr> &data);\n+    void walk_slice2(bool is_pod, const std::pair<ptr,ptr> &data);\n     void walk_variant2(tag_info &tinfo,\n                        tag_variant_t variant_id,\n                        const std::pair<const uint8_t *,const uint8_t *>"}, {"sha": "ce6afcd844d8107f512794b81ec84063d1c32182", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "patch": "@@ -361,50 +361,39 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         s\n       }\n \n-      // FIXME: grotesque hacks for encoding fixed-size evecs and estrs.\n-\n       ty::ty_estr(ty::vstore_fixed(n)) {\n-        let mut s = [shape_struct], sub = [];\n-        let mut i = 0u;\n+        let mut s = [shape_fixedvec];\n         let u8_t = ty::mk_mach_uint(ccx.tcx, ast::ty_u8);\n-        while i < n {\n-            sub += shape_of(ccx, u8_t, ty_param_map);\n-            i += 1u;\n-        }\n-        add_substr(s, sub);\n+        assert (n + 1u) <= 0xffffu;\n+        add_u16(s, (n + 1u) as u16);\n+        add_bool(s, true);\n+        add_substr(s, shape_of(ccx, u8_t, ty_param_map));\n         s\n       }\n \n       ty::ty_evec(mt, ty::vstore_fixed(n)) {\n-        let mut s = [shape_struct], sub = [];\n-        let mut i = 0u;\n-        while i < n {\n-            sub += shape_of(ccx, mt.ty, ty_param_map);\n-            i += 1u;\n-        }\n-        add_substr(s, sub);\n+        let mut s = [shape_fixedvec];\n+        assert n <= 0xffffu;\n+        add_u16(s, n as u16);\n+        add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n         s\n       }\n \n-\n-      // FIXME: slightly-less-grotesque hack for encoding slic,e evecs and\n-      // estrs.\n-\n       ty::ty_estr(ty::vstore_slice(r)) {\n-        let mut s = [shape_struct], sub = [];\n-        let u8_mt = {ty: ty::mk_mach_uint(ccx.tcx, ast::ty_u8),\n-                     mutbl: ast::m_imm };\n-        sub += shape_of(ccx, ty::mk_rptr(ccx.tcx, r, u8_mt), ty_param_map);\n-        sub += shape_of(ccx, ty::mk_uint(ccx.tcx), ty_param_map);\n-        add_substr(s, sub);\n+        let mut s = [shape_slice];\n+        let u8_t = ty::mk_mach_uint(ccx.tcx, ast::ty_u8);\n+        add_bool(s, true); // is_pod\n+        add_bool(s, true); // is_str\n+        add_substr(s, shape_of(ccx, u8_t, ty_param_map));\n         s\n       }\n \n       ty::ty_evec(mt, ty::vstore_slice(r)) {\n-        let mut s = [shape_struct], sub = [];\n-        sub += shape_of(ccx, ty::mk_rptr(ccx.tcx, r, mt), ty_param_map);\n-        sub += shape_of(ccx, ty::mk_uint(ccx.tcx), ty_param_map);\n-        add_substr(s, sub);\n+        let mut s = [shape_slice];\n+        add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n+        add_bool(s, false); // is_str\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n         s\n       }\n \n@@ -434,9 +423,9 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         add_substr(s, sub);\n         s\n       }\n-      ty::ty_rptr(_, tm) {\n+      ty::ty_rptr(_, mt) {\n         let mut s = [shape_rptr];\n-        add_substr(s, shape_of(ccx, tm.ty, ty_param_map));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n         s\n       }\n       ty::ty_res(did, raw_subt, substs) {"}, {"sha": "b5290f3c0ab662e041cbc91d03f0f9c2e1ff127e", "filename": "src/test/run-pass/estr-internal.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Ftest%2Frun-pass%2Festr-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Ftest%2Frun-pass%2Festr-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-internal.rs?ref=11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "patch": "@@ -5,4 +5,26 @@ fn main() {\n     z = x;\n     assert z[0] == ('h' as u8);\n     assert z[4] == ('o' as u8);\n+\n+    let a = \"aaaa\"/_;\n+    let b = \"bbbb\"/_;\n+    let c = \"cccc\"/_;\n+\n+    log(debug, a);\n+\n+    assert a < b;\n+    assert a <= b;\n+    assert a != b;\n+    assert b >= a;\n+    assert b > a;\n+\n+    log(debug, b);\n+\n+    assert a < c;\n+    assert a <= c;\n+    assert a != c;\n+    assert c >= a;\n+    assert c > a;\n+\n+    log(debug, c);\n }"}, {"sha": "af31e546c6aff2270168648ee6ea4c09c17bf425", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a5d10bf2958c642ae6a7c4afff8e181aa2167d/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=11a5d10bf2958c642ae6a7c4afff8e181aa2167d", "patch": "@@ -1,7 +1,47 @@\n+\n fn main() {\n     let x = \"hello\"/&;\n-    let mut y = \"there\"/&;\n-    y = x;\n-    assert y[0] == 'h' as u8;\n-    assert y[4] == 'o' as u8;\n+    let v = \"hello\"/&;\n+    let mut y : str/& = \"there\"/&;\n+\n+    log(debug, x);\n+    log(debug, y);\n+\n+    assert x[0] == 'h' as u8;\n+    assert x[4] == 'o' as u8;\n+\n+    let z : str/& = \"thing\"/&;\n+    assert v == x;\n+    assert x != z;\n+\n+    let a = \"aaaa\"/&;\n+    let b = \"bbbb\"/&;\n+    let c = \"cccc\"/&;\n+    let cc = \"ccccc\"/&;\n+\n+    log(debug, a);\n+\n+    assert a < b;\n+    assert a <= b;\n+    assert a != b;\n+    assert b >= a;\n+    assert b > a;\n+\n+    log(debug, b);\n+\n+    assert a < c;\n+    assert a <= c;\n+    assert a != c;\n+    assert c >= a;\n+    assert c > a;\n+\n+    log(debug, c);\n+\n+    assert c < cc;\n+    assert c <= cc;\n+    assert c != cc;\n+    assert cc >= c;\n+    assert cc > c;\n+\n+    log(debug, cc);\n }\n\\ No newline at end of file"}]}