{"sha": "5b1729030ab99a32f5c68f8964f42f37810116a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTcyOTAzMGFiOTlhMzJmNWM2OGY4OTY0ZjQyZjM3ODEwMTE2YTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-03T16:34:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-03T16:34:41Z"}, "message": "Rollup merge of #71663 - jumbatm:caller-handles-validation-error, r=RalfJung\n\nFix exceeding bitshifts not emitting for assoc. consts (properly this time, I swear!)\n\nFixes #69021 and fixes #71353.\n\nAs described in https://github.com/rust-lang/rust/issues/71353#issuecomment-617901923, this PR:\n\n- adds a variant of `try_validation!` called `try_validation_pat!` that allows specific failures to be turned into validation failures (but returns the rest, unchanged), and\n- allows `InvalidProgram` to be returned out of validation\n\nr? @RalfJung", "tree": {"sha": "0ae5f2bf2f7f942df9f7af59f2efc0e0dcd21b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae5f2bf2f7f942df9f7af59f2efc0e0dcd21b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b1729030ab99a32f5c68f8964f42f37810116a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJervKjCRBK7hj4Ov3rIwAAdHIIAEnUrQG3AOZBEK4IIe92Yz3x\nXU6+TlpoTQibi9cdCtwVHvu698fneJpRTqEjWGVSE8uz7N0XPxik4sUcxqMlNM6V\n8MH9hDNorL7wVW1oFqWsbAf2aOky3J9RM1HuG040GTAG7baqAv/+/YuRODBDq4e4\nQb4Bf+Rm0j6lWIN2YXZ7kUMqc3MRV9fB+FYPS7Ak/mastAHQ/XZDvecAkljUr3uk\npV/2xSYObai1zSSaAaTgh9oX4hEvex6YTw1ODdEKaFFc7yGLe4qZkqySq2XN3gdq\nkLptb/sR0AFzo+OtsUGO2c8OwMPCVeMPXjffsbS/2O6TbKSHc7STLKYI2ne30Ow=\n=k8Gu\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ae5f2bf2f7f942df9f7af59f2efc0e0dcd21b6e\nparent 6f5de87d3f9f192e00defe9a15e8396c13c2ec0c\nparent bd18ad4fef9ca3d618521b8268183497b6104ff9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588523681 +0200\ncommitter GitHub <noreply@github.com> 1588523681 +0200\n\nRollup merge of #71663 - jumbatm:caller-handles-validation-error, r=RalfJung\n\nFix exceeding bitshifts not emitting for assoc. consts (properly this time, I swear!)\n\nFixes #69021 and fixes #71353.\n\nAs described in https://github.com/rust-lang/rust/issues/71353#issuecomment-617901923, this PR:\n\n- adds a variant of `try_validation!` called `try_validation_pat!` that allows specific failures to be turned into validation failures (but returns the rest, unchanged), and\n- allows `InvalidProgram` to be returned out of validation\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1729030ab99a32f5c68f8964f42f37810116a3", "html_url": "https://github.com/rust-lang/rust/commit/5b1729030ab99a32f5c68f8964f42f37810116a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b1729030ab99a32f5c68f8964f42f37810116a3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "html_url": "https://github.com/rust-lang/rust/commit/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c"}, {"sha": "bd18ad4fef9ca3d618521b8268183497b6104ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd18ad4fef9ca3d618521b8268183497b6104ff9", "html_url": "https://github.com/rust-lang/rust/commit/bd18ad4fef9ca3d618521b8268183497b6104ff9"}], "stats": {"total": 479, "additions": 263, "deletions": 216}, "files": [{"sha": "b6991349ff4dc881b9361eac1727850499950ab4", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 61, "deletions": 31, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=5b1729030ab99a32f5c68f8964f42f37810116a3", "patch": "@@ -11,6 +11,7 @@ use std::ops::RangeInclusive;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n+use rustc_middle::mir::interpret::{InterpError, InterpErrorInfo};\n use rustc_middle::ty;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::{sym, Symbol};\n@@ -24,43 +25,71 @@ use super::{\n };\n \n macro_rules! throw_validation_failure {\n-    ($what:expr, $where:expr, $details:expr) => {{\n-        let mut msg = format!(\"encountered {}\", $what);\n-        let where_ = &$where;\n-        if !where_.is_empty() {\n-            msg.push_str(\" at \");\n-            write_path(&mut msg, where_);\n-        }\n-        write!(&mut msg, \", but expected {}\", $details).unwrap();\n-        throw_ub!(ValidationFailure(msg))\n-    }};\n-    ($what:expr, $where:expr) => {{\n+    ($what:expr, $where:expr $(, $expected:expr )?) => {{\n         let mut msg = format!(\"encountered {}\", $what);\n         let where_ = &$where;\n         if !where_.is_empty() {\n             msg.push_str(\" at \");\n             write_path(&mut msg, where_);\n         }\n+        $( write!(&mut msg, \", but expected {}\", $expected).unwrap(); )?\n         throw_ub!(ValidationFailure(msg))\n     }};\n }\n \n+/// Returns a validation failure for any Err value of $e.\n+// FIXME: Replace all usages of try_validation! with try_validation_pat!.\n macro_rules! try_validation {\n-    ($e:expr, $what:expr, $where:expr, $details:expr) => {{\n-        match $e {\n-            Ok(x) => x,\n-            // We re-throw the error, so we are okay with allocation:\n-            // this can only slow down builds that fail anyway.\n-            Err(_) => throw_validation_failure!($what, $where, $details),\n-        }\n+    ($e:expr, $what:expr, $where:expr $(, $expected:expr )?) => {{\n+        try_validation_pat!($e, $where, {\n+            _ => { \"{}\", $what } $( expected { \"{}\", $expected } )?,\n+        })\n     }};\n-\n-    ($e:expr, $what:expr, $where:expr) => {{\n+}\n+/// Like try_validation, but will throw a validation error if any of the patterns in $p are\n+/// matched. Other errors are passed back to the caller, unchanged. This lets you use the patterns\n+/// as a kind of validation blacklist:\n+///\n+/// ```\n+/// let v = try_validation_pat!(some_fn(), some_path, {\n+///     Foo | Bar | Baz => { \"some failure\" },\n+/// });\n+/// // Failures that match $p are thrown up as validation errors, but other errors are passed back\n+/// // unchanged.\n+/// ```\n+///\n+/// An additional expected parameter can also be added to the failure message:\n+///\n+/// ```\n+/// let v = try_validation_pat!(some_fn(), some_path, {\n+///     Foo | Bar | Baz => { \"some failure\" } expected { \"something that wasn't a failure\" },\n+/// });\n+/// ```\n+///\n+/// An additional nicety is that both parameters actually take format args, so you can just write\n+/// the format string in directly:\n+///\n+/// ```\n+/// let v = try_validation_pat!(some_fn(), some_path, {\n+///     Foo | Bar | Baz => { \"{:?}\", some_failure } expected { \"{}\", expected_value },\n+/// });\n+/// ```\n+///\n+macro_rules! try_validation_pat {\n+    ($e:expr, $where:expr, { $( $p:pat )|+ =>\n+        { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )? $( , )?}) => {{\n         match $e {\n             Ok(x) => x,\n-            // We re-throw the error, so we are okay with allocation:\n-            // this can only slow down builds that fail anyway.\n-            Err(_) => throw_validation_failure!($what, $where),\n+            // We catch the error and turn it into a validation failure. We are okay with\n+            // allocation here as this can only slow down builds that fail anyway.\n+            $( Err(InterpErrorInfo { kind: $p, .. }) )|+ =>\n+                throw_validation_failure!(\n+                    format_args!($( $what_fmt ),+),\n+                    $where\n+                    $(, format_args!($( $expected_fmt ),+))?\n+                ),\n+            #[allow(unreachable_patterns)]\n+            Err(e) => Err::<!, _>(e)?,\n         }\n     }};\n }\n@@ -492,11 +521,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // We are conservative with undef for integers, but try to\n                 // actually enforce the strict rules for raw pointers (mostly because\n                 // that lets us re-use `ref_to_mplace`).\n-                let place = try_validation!(\n-                    self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n-                    \"uninitialized raw pointer\",\n-                    self.path\n-                );\n+                let place = try_validation_pat!(self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?), self.path, {\n+                    err_ub!(InvalidUndefBytes(..)) => { \"uninitialized raw pointer\" },\n+                });\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n                 }\n@@ -800,7 +827,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n \n                                 throw_validation_failure!(\"uninitialized bytes\", self.path)\n                             }\n-                            // Other errors shouldn't be possible\n+                            // Propagate upwards (that will also check for unexpected errors).\n                             _ => return Err(err),\n                         }\n                     }\n@@ -843,9 +870,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Run it.\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n-            // We should only get validation errors here. Avoid other errors as\n-            // those do not show *where* in the value the issue lies.\n+            // Pass through validation failures.\n             Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n+            // Also pass through InvalidProgram, those just indicate that we could not\n+            // validate and each caller will know best what to do with them.\n+            Err(err) if matches!(err.kind, InterpError::InvalidProgram(_)) => Err(err),\n+            // Avoid other errors as those do not show *where* in the value the issue lies.\n             Err(err) => bug!(\"Unexpected error during validation: {}\", err),\n         }\n     }"}, {"sha": "aae80185b4d6e4b4dbafef3f7c722403129a5fb7", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=5b1729030ab99a32f5c68f8964f42f37810116a3", "patch": "@@ -549,11 +549,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        // FIXME we need to revisit this for #67176\n-        if rvalue.needs_subst() {\n-            return None;\n-        }\n-\n         // Perform any special handling for specific Rvalue types.\n         // Generally, checks here fall into one of two categories:\n         //   1. Additional checking to provide useful lints to the user\n@@ -594,6 +589,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             _ => {}\n         }\n \n+        // FIXME we need to revisit this for #67176\n+        if rvalue.needs_subst() {\n+            return None;\n+        }\n+\n         self.use_ecx(|this| {\n             trace!(\"calling eval_rvalue_into_place(rvalue = {:?}, place = {:?})\", rvalue, place);\n             this.ecx.eval_rvalue_into_place(rvalue, place)?;"}, {"sha": "0c328a2594a4671d74216251ff7c5cadba806729", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=5b1729030ab99a32f5c68f8964f42f37810116a3", "patch": "@@ -1,146 +1,152 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n    |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+LL |     const N: i32 = T::N << 42;\n+   |                    ^^^^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:8:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: aborting due to 23 previous errors\n+warning: 24 warnings emitted\n "}, {"sha": "0c328a2594a4671d74216251ff7c5cadba806729", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=5b1729030ab99a32f5c68f8964f42f37810116a3", "patch": "@@ -1,146 +1,152 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n    |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+LL |     const N: i32 = T::N << 42;\n+   |                    ^^^^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:8:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: aborting due to 23 previous errors\n+warning: 24 warnings emitted\n "}, {"sha": "0c328a2594a4671d74216251ff7c5cadba806729", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=5b1729030ab99a32f5c68f8964f42f37810116a3", "patch": "@@ -1,146 +1,152 @@\n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:17:20\n    |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n+LL |     const N: i32 = T::N << 42;\n+   |                    ^^^^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:8:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![warn(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:21:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:43:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:49:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:51:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:53:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:55:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:57:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:61:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:63:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:68:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:70:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:76:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+warning: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-error: aborting due to 23 previous errors\n+warning: 24 warnings emitted\n "}, {"sha": "565bef49c9f8ca40e60b0cc746acb93222b57553", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1729030ab99a32f5c68f8964f42f37810116a3/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=5b1729030ab99a32f5c68f8964f42f37810116a3", "patch": "@@ -2,11 +2,10 @@\n //[noopt]compile-flags: -C opt-level=0\n //[opt]compile-flags: -O\n //[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n-\n-// build-fail\n+// build-pass\n \n #![crate_type=\"lib\"]\n-#![deny(arithmetic_overflow, const_err)]\n+#![warn(arithmetic_overflow, const_err)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n@@ -15,65 +14,65 @@ pub trait Foo {\n }\n \n impl<T: Foo> Foo for Vec<T> {\n-    const N: i32 = T::N << 42; // FIXME this should warn\n+    const N: i32 = T::N << 42; //~ WARN: arithmetic operation will overflow\n }\n \n pub fn foo(x: i32) {\n-    let _ = x << 42; //~ ERROR: arithmetic operation will overflow\n+    let _ = x << 42; //~ WARN: arithmetic operation will overflow\n }\n \n pub fn main() {\n       let n = 1u8 << 7;\n-      let n = 1u8 << 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 << 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1u16 << 15;\n-      let n = 1u16 << 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u16 << 16; //~ WARN: arithmetic operation will overflow\n       let n = 1u32 << 31;\n-      let n = 1u32 << 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u32 << 32; //~ WARN: arithmetic operation will overflow\n       let n = 1u64 << 63;\n-      let n = 1u64 << 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u64 << 64; //~ WARN: arithmetic operation will overflow\n       let n = 1i8 << 7;\n-      let n = 1i8 << 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1i8 << 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1i16 << 15;\n-      let n = 1i16 << 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i16 << 16; //~ WARN: arithmetic operation will overflow\n       let n = 1i32 << 31;\n-      let n = 1i32 << 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i32 << 32; //~ WARN: arithmetic operation will overflow\n       let n = 1i64 << 63;\n-      let n = 1i64 << 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 << 64; //~ WARN: arithmetic operation will overflow\n \n       let n = 1u8 >> 7;\n-      let n = 1u8 >> 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 >> 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1u16 >> 15;\n-      let n = 1u16 >> 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u16 >> 16; //~ WARN: arithmetic operation will overflow\n       let n = 1u32 >> 31;\n-      let n = 1u32 >> 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u32 >> 32; //~ WARN: arithmetic operation will overflow\n       let n = 1u64 >> 63;\n-      let n = 1u64 >> 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u64 >> 64; //~ WARN: arithmetic operation will overflow\n       let n = 1i8 >> 7;\n-      let n = 1i8 >> 8;   //~ ERROR: arithmetic operation will overflow\n+      let n = 1i8 >> 8;   //~ WARN: arithmetic operation will overflow\n       let n = 1i16 >> 15;\n-      let n = 1i16 >> 16; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i16 >> 16; //~ WARN: arithmetic operation will overflow\n       let n = 1i32 >> 31;\n-      let n = 1i32 >> 32; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i32 >> 32; //~ WARN: arithmetic operation will overflow\n       let n = 1i64 >> 63;\n-      let n = 1i64 >> 64; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 >> 64; //~ WARN: arithmetic operation will overflow\n \n       let n = 1u8;\n       let n = n << 7;\n-      let n = n << 8; //~ ERROR: arithmetic operation will overflow\n+      let n = n << 8; //~ WARN: arithmetic operation will overflow\n \n-      let n = 1u8 << -8; //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 << -8; //~ WARN: arithmetic operation will overflow\n \n       let n = 1i8<<(1isize+-1);\n \n       let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ ERROR: arithmetic operation will overflow\n+      let n = 1u8 << (4+4); //~ WARN: arithmetic operation will overflow\n       let n = 1i64 >> [63][0];\n-      let n = 1i64 >> [64][0]; //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 >> [64][0]; //~ WARN: arithmetic operation will overflow\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ ERROR: arithmetic operation will overflow\n-      let n = 1_usize << BITS; //~ ERROR: arithmetic operation will overflow\n+      let n = 1_isize << BITS; //~ WARN: arithmetic operation will overflow\n+      let n = 1_usize << BITS; //~ WARN: arithmetic operation will overflow\n }"}]}