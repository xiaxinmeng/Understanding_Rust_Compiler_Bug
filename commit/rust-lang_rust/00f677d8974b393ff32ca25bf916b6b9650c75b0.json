{"sha": "00f677d8974b393ff32ca25bf916b6b9650c75b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZjY3N2Q4OTc0YjM5M2ZmMzJjYTI1YmY5MTZiNmI5NjUwYzc1YjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T11:14:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T11:14:23Z"}, "message": "Auto merge of #71424 - Dylan-DPC:rollup-iunh61a, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #70970 (Detect mistyped associated consts in `Instance::resolve`.)\n - #71203 (Correct await span for async-await error reporting)\n - #71214 (Add error code for inner doc error)\n - #71337 (Moving all rustdoc-ui tests to check-pass)\n - #71412 (Clarify unused_doc_comments note on macro invocations)\n - #71414 (More diagnostic items for Clippy usage)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "dfb7add749b25b2d432a93586814b00a28c45cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb7add749b25b2d432a93586814b00a28c45cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00f677d8974b393ff32ca25bf916b6b9650c75b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00f677d8974b393ff32ca25bf916b6b9650c75b0", "html_url": "https://github.com/rust-lang/rust/commit/00f677d8974b393ff32ca25bf916b6b9650c75b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00f677d8974b393ff32ca25bf916b6b9650c75b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfd62acb12a5e628d28950f9f94c3499216f10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfd62acb12a5e628d28950f9f94c3499216f10c", "html_url": "https://github.com/rust-lang/rust/commit/4bfd62acb12a5e628d28950f9f94c3499216f10c"}, {"sha": "01fdc885d6bd5ee9651fce930cc10d05dc274988", "url": "https://api.github.com/repos/rust-lang/rust/commits/01fdc885d6bd5ee9651fce930cc10d05dc274988", "html_url": "https://github.com/rust-lang/rust/commit/01fdc885d6bd5ee9651fce930cc10d05dc274988"}], "stats": {"total": 400, "additions": 297, "deletions": 103}, "files": [{"sha": "69b582cd8fbc4f67f00f3a99312ac96fd5e24d2d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -4295,6 +4295,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_infer\",\n  \"rustc_middle\","}, {"sha": "a3b61f1f4a5892fa436fcde9d34d96a4b611a579", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -50,6 +50,7 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (64 - 1); // Largest possible power of\n /// [`pop_front`]: #method.pop_front\n /// [`extend`]: #method.extend\n /// [`append`]: #method.append\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"vecdeque_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VecDeque<T> {\n     // tail and head are pointers into the buffer. Tail always points"}, {"sha": "f3fe1adebb141d4dd3c1b91b2c42e304825e3112", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -278,6 +278,7 @@ use crate::vec::Vec;\n /// [`Deref`]: ../../std/ops/trait.Deref.html\n /// [`as_str()`]: struct.String.html#method.as_str\n #[derive(PartialOrd, Eq, Ord)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"string_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct String {\n     vec: Vec<u8>,"}, {"sha": "d385c073074743e181011359563268cf5daa5c19", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -376,6 +376,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     def_id,\n                     tcx.intern_substs(&[]),\n                 )\n+                .unwrap()\n                 .unwrap(),\n             ),\n             _ => {"}, {"sha": "74ec100ba426756c50e70d4e6ec36492bea120a1", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -465,6 +465,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                     start_def_id,\n                     cx.tcx().intern_substs(&[main_ret_ty.into()]),\n                 )\n+                .unwrap()\n                 .unwrap(),\n             );\n             ("}, {"sha": "112833845e5a461ac536b68009e6a21982910a60", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -537,6 +537,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             ty::FnDef(def_id, substs) => (\n                 Some(\n                     ty::Instance::resolve(bx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs)\n+                        .unwrap()\n                         .unwrap(),\n                 ),\n                 None,"}, {"sha": "9f4b5fd85fd4d381f275670e413ea119fcaf4557", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -432,6 +432,7 @@ E0749: include_str!(\"./error_codes/E0749.md\"),\n E0750: include_str!(\"./error_codes/E0750.md\"),\n E0751: include_str!(\"./error_codes/E0751.md\"),\n E0752: include_str!(\"./error_codes/E0752.md\"),\n+E0753: include_str!(\"./error_codes/E0753.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "a69da964aee393cca8da9e554c47f066fe9d3163", "filename": "src/librustc_error_codes/error_codes/E0753.md", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0753.md", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_error_codes%2Ferror_codes%2FE0753.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0753.md?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -0,0 +1,31 @@\n+An inner doc comment was used in an invalid context.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0753\n+fn foo() {}\n+//! foo\n+// ^ error!\n+fn main() {}\n+```\n+\n+Inner document can only be used before items. For example:\n+\n+```\n+//! A working comment applied to the module!\n+fn foo() {\n+    //! Another working comment!\n+}\n+fn main() {}\n+```\n+\n+In case you want to document the item following the doc comment, you might want\n+to use outer doc comment:\n+\n+```\n+/// I am an outer doc comment\n+#[doc = \"I am also an outer doc comment!\"]\n+fn foo() {\n+    // ...\n+}\n+```"}, {"sha": "e5d3227d5afd461e4e27d6b44043e63e54c2ade0", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -566,7 +566,7 @@ pub trait LintContext: Sized {\n                     stability::deprecation_suggestion(&mut db, suggestion, span)\n                 }\n                 BuiltinLintDiagnostics::UnusedDocComment(span) => {\n-                    db.span_label(span, \"rustdoc does not generate documentation for macros\");\n+                    db.span_label(span, \"rustdoc does not generate documentation for macro invocations\");\n                     db.help(\"to document an item produced by a macro, \\\n                                   the macro must produce the documentation as part of its expansion\");\n                 }"}, {"sha": "a7953f0f900fb583fa243370a01a7ef94a099f7c", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -39,12 +39,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n-        let instance = ty::Instance::resolve(self, param_env, def_id, substs);\n-        if let Some(instance) = instance {\n-            let cid = GlobalId { instance, promoted };\n-            self.const_eval_global_id(param_env, cid, span)\n-        } else {\n-            Err(ErrorHandled::TooGeneric)\n+        match ty::Instance::resolve(self, param_env, def_id, substs) {\n+            Ok(Some(instance)) => {\n+                let cid = GlobalId { instance, promoted };\n+                self.const_eval_global_id(param_env, cid, span)\n+            }\n+            Ok(None) => Err(ErrorHandled::TooGeneric),\n+            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n         }\n     }\n "}, {"sha": "fc5deab5725b0ea671a931bdd21d36c6428b62fc", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -679,7 +679,7 @@ rustc_queries! {\n     Codegen {\n         query codegen_fulfill_obligation(\n             key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n-        ) -> Option<Vtable<'tcx, ()>> {\n+        ) -> Result<Vtable<'tcx, ()>, ErrorReported> {\n             cache_on_disk_if { true }\n             desc { |tcx|\n                 \"checking if `{}` fulfills its obligations\",\n@@ -1258,8 +1258,19 @@ rustc_queries! {\n             desc { \"looking up enabled feature gates\" }\n         }\n \n-        query resolve_instance(key: (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>)) -> Option<ty::Instance<'tcx>> {\n-            desc { \"resolving instance `{:?}` `{:?}` with {:?}\", key.1, key.2, key.0 }\n+        /// Attempt to resolve the given `DefId` to an `Instance`, for the\n+        /// given generics args (`SubstsRef`), returning one of:\n+        ///  * `Ok(Some(instance))` on success\n+        ///  * `Ok(None)` when the `SubstsRef` are still too generic,\n+        ///    and therefore don't allow finding the final `Instance`\n+        ///  * `Err(ErrorReported)` when the `Instance` resolution process\n+        ///    couldn't complete due to errors elsewhere - this is distinct\n+        ///    from `Ok(None)` to avoid misleading diagnostics when an error\n+        ///    has already been/will be emitted, for the original cause\n+        query resolve_instance(\n+            key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>\n+        ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n+            desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n         }\n     }\n }"}, {"sha": "9a23f8813fe93c6df7ec3095855873d2512a5113", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -298,14 +298,14 @@ pub struct ResolvedOpaqueTy<'tcx> {\n ///\n /// ```ignore (pseudo-Rust)\n /// async move {\n-///     let x: T = ...;\n+///     let x: T = expr;\n ///     foo.await\n ///     ...\n /// }\n /// ```\n ///\n-/// Here, we would store the type `T`, the span of the value `x`, and the \"scope-span\" for\n-/// the scope that contains `x`.\n+/// Here, we would store the type `T`, the span of the value `x`, the \"scope-span\" for\n+/// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.\n #[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n@@ -314,6 +314,8 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub span: Span,\n     /// Span of the scope of the captured binding.\n     pub scope_span: Option<Span>,\n+    /// Span of `.await` or `yield` expression.\n+    pub yield_span: Span,\n     /// Expr which the type evaluated from.\n     pub expr: Option<hir::HirId>,\n }"}, {"sha": "88cc63a7285712ccb210b08d59f7dfd7f1523229", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,6 +1,7 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::DropInPlaceFnLangItem;\n@@ -268,29 +269,41 @@ impl<'tcx> Instance<'tcx> {\n     /// this is used to find the precise code that will run for a trait method invocation,\n     /// if known.\n     ///\n-    /// Returns `None` if we cannot resolve `Instance` to a specific instance.\n+    /// Returns `Ok(None)` if we cannot resolve `Instance` to a specific instance.\n     /// For example, in a context like this,\n     ///\n     /// ```\n     /// fn foo<T: Debug>(t: T) { ... }\n     /// ```\n     ///\n-    /// trying to resolve `Debug::fmt` applied to `T` will yield `None`, because we do not\n+    /// trying to resolve `Debug::fmt` applied to `T` will yield `Ok(None)`, because we do not\n     /// know what code ought to run. (Note that this setting is also affected by the\n     /// `RevealMode` in the parameter environment.)\n     ///\n     /// Presuming that coherence and type-check have succeeded, if this method is invoked\n     /// in a monomorphic context (i.e., like during codegen), then it is guaranteed to return\n-    /// `Some`.\n+    /// `Ok(Some(instance))`.\n+    ///\n+    /// Returns `Err(ErrorReported)` when the `Instance` resolution process\n+    /// couldn't complete due to errors elsewhere - this is distinct\n+    /// from `Ok(None)` to avoid misleading diagnostics when an error\n+    /// has already been/will be emitted, for the original cause\n     pub fn resolve(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n-    ) -> Option<Instance<'tcx>> {\n+    ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n         // All regions in the result of this query are erased, so it's\n         // fine to erase all of the input regions.\n-        tcx.resolve_instance((tcx.erase_regions(&param_env), def_id, tcx.erase_regions(&substs)))\n+\n+        // HACK(eddyb) erase regions in `substs` first, so that `param_env.and(...)`\n+        // below is more likely to ignore the bounds in scope (e.g. if the only\n+        // generic parameters mentioned by `substs` were lifetime ones).\n+        let substs = tcx.erase_regions(&substs);\n+\n+        // FIXME(eddyb) should this always use `param_env.with_reveal_all()`?\n+        tcx.resolve_instance(tcx.erase_regions(&param_env.and((def_id, substs))))\n     }\n \n     pub fn resolve_for_fn_ptr(\n@@ -300,7 +313,7 @@ impl<'tcx> Instance<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n-        Instance::resolve(tcx, param_env, def_id, substs).map(|mut resolved| {\n+        Instance::resolve(tcx, param_env, def_id, substs).ok().flatten().map(|mut resolved| {\n             match resolved.def {\n                 InstanceDef::Item(def_id) if resolved.def.requires_caller_location(tcx) => {\n                     debug!(\" => fn pointer created for function with #[track_caller]\");\n@@ -332,7 +345,7 @@ impl<'tcx> Instance<'tcx> {\n             debug!(\" => associated item with unsizeable self: Self\");\n             Some(Instance { def: InstanceDef::VtableShim(def_id), substs })\n         } else {\n-            Instance::resolve(tcx, param_env, def_id, substs)\n+            Instance::resolve(tcx, param_env, def_id, substs).ok().flatten()\n         }\n     }\n \n@@ -353,7 +366,7 @@ impl<'tcx> Instance<'tcx> {\n     pub fn resolve_drop_in_place(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::Instance<'tcx> {\n         let def_id = tcx.require_lang_item(DropInPlaceFnLangItem, None);\n         let substs = tcx.intern_substs(&[ty.into()]);\n-        Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n+        Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n     }\n \n     pub fn fn_once_adapter_instance("}, {"sha": "a261e484a85faada4d493a0fc16df0a29f74f62e", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -296,14 +296,3 @@ impl Key for (Symbol, u32, u32) {\n         DUMMY_SP\n     }\n }\n-\n-impl<'tcx> Key for (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n-    fn query_crate(&self) -> CrateNum {\n-        self.1.krate\n-    }\n-    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        tcx.def_span(self.1)\n-    }\n-}"}, {"sha": "0a33dfde9dbfedf8f3e09bbf44e8635b86dd879c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -461,8 +461,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"param_env: {:#?}\", self.param_env);\n         trace!(\"substs: {:#?}\", substs);\n-        ty::Instance::resolve(*self.tcx, self.param_env, def_id, substs)\n-            .ok_or_else(|| err_inval!(TooGeneric).into())\n+        match ty::Instance::resolve(*self.tcx, self.param_env, def_id, substs) {\n+            Ok(Some(instance)) => Ok(instance),\n+            Ok(None) => throw_inval!(TooGeneric),\n+\n+            // FIXME(eddyb) this could be a bit more specific than `TypeckError`.\n+            Err(error_reported) => throw_inval!(TypeckError(error_reported)),\n+        }\n     }\n \n     pub fn layout_of_local("}, {"sha": "7e63d8637be93cccd187f7ec3ef862764c468498", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -674,9 +674,12 @@ fn visit_fn_use<'tcx>(\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n     if let ty::FnDef(def_id, substs) = ty.kind {\n-        let resolver =\n-            if is_direct_call { ty::Instance::resolve } else { ty::Instance::resolve_for_fn_ptr };\n-        let instance = resolver(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n+        let instance = if is_direct_call {\n+            ty::Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n+        } else {\n+            ty::Instance::resolve_for_fn_ptr(tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n+                .unwrap()\n+        };\n         visit_instance_use(tcx, instance, is_direct_call, output);\n     }\n }\n@@ -1056,6 +1059,7 @@ impl RootCollector<'_, 'v> {\n             start_def_id,\n             self.tcx.intern_substs(&[main_ret_ty.into()]),\n         )\n+        .unwrap()\n         .unwrap();\n \n         self.output.push(create_fn_mono_item(start_instance));\n@@ -1111,8 +1115,9 @@ fn create_mono_items_for_default_impls<'tcx>(\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         });\n-                    let instance =\n-                        ty::Instance::resolve(tcx, param_env, method.def_id, substs).unwrap();\n+                    let instance = ty::Instance::resolve(tcx, param_env, method.def_id, substs)\n+                        .unwrap()\n+                        .unwrap();\n \n                     let mono_item = create_fn_mono_item(instance);\n                     if mono_item.is_instantiable(tcx) && should_monomorphize_locally(tcx, &instance)"}, {"sha": "98a3d9584f58781d85447f931ac22931994a743f", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -18,7 +18,7 @@ pub fn custom_coerce_unsize_info<'tcx>(\n     });\n \n     match tcx.codegen_fulfill_obligation((ty::ParamEnv::reveal_all(), trait_ref)) {\n-        Some(traits::VtableImpl(traits::VtableImplData { impl_def_id, .. })) => {\n+        Ok(traits::VtableImpl(traits::VtableImplData { impl_def_id, .. })) => {\n             tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n         }\n         vtable => {"}, {"sha": "c51136cdaba2c879c6861e52b5de9f43f6cbb6ec", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -522,7 +522,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 if self.tcx.features().const_trait_impl {\n                     let instance = Instance::resolve(self.tcx, self.param_env, def_id, substs);\n                     debug!(\"Resolving ({:?}) -> {:?}\", def_id, instance);\n-                    if let Some(func) = instance {\n+                    if let Ok(Some(func)) = instance {\n                         if let InstanceDef::Item(def_id) = func.def {\n                             if is_const_fn(self.tcx, def_id) {\n                                 return;"}, {"sha": "6f67ef92da4b14f4fae054c88601f6d77db9c183", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -176,7 +176,8 @@ impl Inliner<'tcx> {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func: ref op, .. } = terminator.kind {\n             if let ty::FnDef(callee_def_id, substs) = op.ty(caller_body, self.tcx).kind {\n-                let instance = Instance::resolve(self.tcx, param_env, callee_def_id, substs)?;\n+                let instance =\n+                    Instance::resolve(self.tcx, param_env, callee_def_id, substs).ok().flatten()?;\n \n                 if let InstanceDef::Virtual(..) = instance.def {\n                     return None;"}, {"sha": "66d56858527ae5e673d40ae97da1c57348d9a004", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -72,7 +72,7 @@ impl<'mir, 'tcx> Search<'mir, 'tcx> {\n         let func_ty = func.ty(body, tcx);\n         if let ty::FnDef(fn_def_id, substs) = func_ty.kind {\n             let (call_fn_id, call_substs) =\n-                if let Some(instance) = Instance::resolve(tcx, param_env, fn_def_id, substs) {\n+                if let Ok(Some(instance)) = Instance::resolve(tcx, param_env, fn_def_id, substs) {\n                     (instance.def_id(), instance.substs)\n                 } else {\n                     (fn_def_id, substs)"}, {"sha": "803f14a2a228a6789915694fe27ee9ec38541dbb", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::attr;\n use rustc_ast::token::{self, Nonterminal};\n use rustc_ast::util::comments;\n use rustc_ast_pretty::pprust;\n-use rustc_errors::PResult;\n+use rustc_errors::{error_code, PResult};\n use rustc_span::{Span, Symbol};\n \n use log::debug;\n@@ -50,10 +50,16 @@ impl<'a> Parser<'a> {\n             } else if let token::DocComment(s) = self.token.kind {\n                 let attr = self.mk_doc_comment(s);\n                 if attr.style != ast::AttrStyle::Outer {\n-                    self.struct_span_err(self.token.span, \"expected outer doc comment\")\n+                    self.sess\n+                        .span_diagnostic\n+                        .struct_span_err_with_code(\n+                            self.token.span,\n+                            \"expected outer doc comment\",\n+                            error_code!(E0753),\n+                        )\n                         .note(\n                             \"inner doc comments like this (starting with \\\n-                              `//!` or `/*!`) can only appear before items\",\n+                             `//!` or `/*!`) can only appear before items\",\n                         )\n                         .emit();\n                 }"}, {"sha": "b2e46bc6da116bcddc9078ffc7fd53df9a199b1d", "filename": "src/librustc_trait_selection/traits/codegen/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_trait_selection%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_trait_selection%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcodegen%2Fmod.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -7,6 +7,7 @@ use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::{\n     FulfillmentContext, Obligation, ObligationCause, SelectionContext, TraitEngine, Vtable,\n };\n+use rustc_errors::ErrorReported;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -19,7 +20,7 @@ use rustc_middle::ty::{self, TyCtxt};\n pub fn codegen_fulfill_obligation<'tcx>(\n     ty: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n-) -> Option<Vtable<'tcx, ()>> {\n+) -> Result<Vtable<'tcx, ()>, ErrorReported> {\n     // Remove any references to regions; this helps improve caching.\n     let trait_ref = ty.erase_regions(&trait_ref);\n \n@@ -55,7 +56,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n                         trait_ref\n                     ),\n                 );\n-                return None;\n+                return Err(ErrorReported);\n             }\n             Err(e) => {\n                 bug!(\"Encountered error `{:?}` selecting `{:?}` during codegen\", e, trait_ref)\n@@ -75,7 +76,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         let vtable = drain_fulfillment_cx_or_panic(&infcx, &mut fulfill_cx, &vtable);\n \n         info!(\"Cache miss: {:?} => {:?}\", trait_ref, vtable);\n-        Some(vtable)\n+        Ok(vtable)\n     })\n }\n "}, {"sha": "e579393434e003d71b41c7da81672b066f745ff0", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -125,6 +125,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        await_span: Span,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1289,20 +1290,31 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         ty_matches(ty)\n                     })\n                     .map(|expr| expr.span);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, expr, .. } = cause;\n-                (span, source_map.span_to_snippet(*span), scope_span, expr, from_awaited_ty)\n+                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n+                    cause;\n+                (\n+                    span,\n+                    source_map.span_to_snippet(*span),\n+                    scope_span,\n+                    yield_span,\n+                    expr,\n+                    from_awaited_ty,\n+                )\n             });\n \n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: target_ty={:?} \\\n                 generator_interior_types={:?} target_span={:?}\",\n             target_ty, tables.generator_interior_types, target_span\n         );\n-        if let Some((target_span, Ok(snippet), scope_span, expr, from_awaited_ty)) = target_span {\n+        if let Some((target_span, Ok(snippet), scope_span, yield_span, expr, from_awaited_ty)) =\n+            target_span\n+        {\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 *target_span,\n                 scope_span,\n+                *yield_span,\n                 *expr,\n                 snippet,\n                 generator_body,\n@@ -1327,6 +1339,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        yield_span: Span,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1418,10 +1431,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 \"note_obligation_cause_for_async_await generator_interior_types: {:#?}\",\n                 tables.generator_interior_types\n             );\n-            let await_span = tables.generator_interior_types.iter().map(|t| t.span).last().unwrap();\n-            let mut span = MultiSpan::from_span(await_span);\n+            let mut span = MultiSpan::from_span(yield_span);\n             span.push_span_label(\n-                await_span,\n+                yield_span,\n                 format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n             );\n "}, {"sha": "b6db75e44f971c949de1b98667c3907513f19718", "filename": "src/librustc_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2FCargo.toml?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc_middle = { path = \"../librustc_middle\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "2a99bb1aed954393ac8f021d77cb3d5b41a921a1", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n@@ -9,10 +10,12 @@ use traits::{translate_substs, Reveal};\n \n use log::debug;\n \n-pub fn resolve_instance<'tcx>(\n+fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    (param_env, def_id, substs): (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>),\n-) -> Option<Instance<'tcx>> {\n+    key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    let (param_env, (def_id, substs)) = key.into_parts();\n+\n     debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n@@ -38,7 +41,7 @@ pub fn resolve_instance<'tcx>(\n                 if ty.needs_drop(tcx, param_env) {\n                     // `DropGlue` requires a monomorphic aka concrete type.\n                     if ty.needs_subst() {\n-                        return None;\n+                        return Ok(None);\n                     }\n \n                     debug!(\" => nontrivial drop glue\");\n@@ -53,7 +56,7 @@ pub fn resolve_instance<'tcx>(\n                 ty::InstanceDef::Item(def_id)\n             }\n         };\n-        Some(Instance { def, substs })\n+        Ok(Some(Instance { def, substs }))\n     };\n     debug!(\"resolve(def_id={:?}, substs={:?}) = {:?}\", def_id, substs, result);\n     result\n@@ -65,7 +68,7 @@ fn resolve_associated_item<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     trait_id: DefId,\n     rcvr_substs: SubstsRef<'tcx>,\n-) -> Option<Instance<'tcx>> {\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let def_id = trait_item.def_id;\n     debug!(\n         \"resolve_associated_item(trait_item={:?}, \\\n@@ -80,7 +83,7 @@ fn resolve_associated_item<'tcx>(\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n-    match vtbl {\n+    Ok(match vtbl {\n         traits::VtableImpl(impl_data) => {\n             debug!(\n                 \"resolving VtableImpl: {:?}, {:?}, {:?}, {:?}\",\n@@ -92,13 +95,11 @@ fn resolve_associated_item<'tcx>(\n             let trait_def_id = tcx.trait_id_of_impl(impl_data.impl_def_id).unwrap();\n             let trait_def = tcx.trait_def(trait_def_id);\n             let leaf_def = trait_def\n-                .ancestors(tcx, impl_data.impl_def_id)\n-                .ok()?\n+                .ancestors(tcx, impl_data.impl_def_id)?\n                 .leaf_def(tcx, trait_item.ident, trait_item.kind)\n                 .unwrap_or_else(|| {\n                     bug!(\"{:?} not found in {:?}\", trait_item, impl_data.impl_def_id);\n                 });\n-            let def_id = leaf_def.item.def_id;\n \n             let substs = tcx.infer_ctxt().enter(|infcx| {\n                 let param_env = param_env.with_reveal_all();\n@@ -133,11 +134,52 @@ fn resolve_associated_item<'tcx>(\n             };\n \n             if !eligible {\n-                return None;\n+                return Ok(None);\n             }\n \n             let substs = tcx.erase_regions(&substs);\n-            Some(ty::Instance::new(def_id, substs))\n+\n+            // Check if we just resolved an associated `const` declaration from\n+            // a `trait` to an associated `const` definition in an `impl`, where\n+            // the definition in the `impl` has the wrong type (for which an\n+            // error has already been/will be emitted elsewhere).\n+            //\n+            // NB: this may be expensive, we try to skip it in all the cases where\n+            // we know the error would've been caught (e.g. in an upstream crate).\n+            //\n+            // A better approach might be to just introduce a query (returning\n+            // `Result<(), ErrorReported>`) for the check that `rustc_typeck`\n+            // performs (i.e. that the definition's type in the `impl` matches\n+            // the declaration in the `trait`), so that we can cheaply check\n+            // here if it failed, instead of approximating it.\n+            if trait_item.kind == ty::AssocKind::Const\n+                && trait_item.def_id != leaf_def.item.def_id\n+                && leaf_def.item.def_id.is_local()\n+            {\n+                let normalized_type_of = |def_id, substs| {\n+                    tcx.subst_and_normalize_erasing_regions(substs, param_env, &tcx.type_of(def_id))\n+                };\n+\n+                let original_ty = normalized_type_of(trait_item.def_id, rcvr_substs);\n+                let resolved_ty = normalized_type_of(leaf_def.item.def_id, substs);\n+\n+                if original_ty != resolved_ty {\n+                    let msg = format!(\n+                        \"Instance::resolve: inconsistent associated `const` type: \\\n+                         was `{}: {}` but resolved to `{}: {}`\",\n+                        tcx.def_path_str_with_substs(trait_item.def_id, rcvr_substs),\n+                        original_ty,\n+                        tcx.def_path_str_with_substs(leaf_def.item.def_id, substs),\n+                        resolved_ty,\n+                    );\n+                    let span = tcx.def_span(leaf_def.item.def_id);\n+                    tcx.sess.delay_span_bug(span, &msg);\n+\n+                    return Err(ErrorReported);\n+                }\n+            }\n+\n+            Some(ty::Instance::new(leaf_def.item.def_id, substs))\n         }\n         traits::VtableGenerator(generator_data) => Some(Instance {\n             def: ty::InstanceDef::Item(generator_data.generator_def_id),\n@@ -155,7 +197,7 @@ fn resolve_associated_item<'tcx>(\n         traits::VtableFnPointer(ref data) => {\n             // `FnPtrShim` requires a monomorphic aka concrete type.\n             if data.fn_ty.needs_subst() {\n-                return None;\n+                return Ok(None);\n             }\n \n             Some(Instance {\n@@ -176,7 +218,7 @@ fn resolve_associated_item<'tcx>(\n \n                     // `CloneShim` requires a monomorphic aka concrete type.\n                     if self_ty.needs_subst() {\n-                        return None;\n+                        return Ok(None);\n                     }\n \n                     Some(Instance {\n@@ -195,7 +237,7 @@ fn resolve_associated_item<'tcx>(\n             }\n         }\n         traits::VtableAutoImpl(..) | traits::VtableParam(..) | traits::VtableTraitAlias(..) => None,\n-    }\n+    })\n }\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {"}, {"sha": "ce376a08ea60486ddf2c8f60705e9e2ad3b16f64", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -96,6 +96,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         span: source_span,\n                         ty: &ty,\n                         scope_span,\n+                        yield_span: yield_data.span,\n                         expr: expr.map(|e| e.hir_id),\n                     })\n                     .or_insert(entries);"}, {"sha": "e6da7426eb4afc08a88d7a2d12572ef17986a367", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -198,6 +198,7 @@ use crate::sys;\n /// ```\n \n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"hashmap_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct HashMap<K, V, S = RandomState> {\n     base: base::HashMap<K, V, S>,"}, {"sha": "c1a57f2ce6129b27b74426136ee7afeee210ca4b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -105,6 +105,7 @@ use super::map::{self, HashMap, Keys, RandomState};\n /// [`PartialEq`]: ../../std/cmp/trait.PartialEq.html\n /// [`RefCell`]: ../../std/cell/struct.RefCell.html\n #[derive(Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"hashset_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct HashSet<T, S = RandomState> {\n     map: HashMap<T, (), S>,"}, {"sha": "797b22fdd1279ca931234284192bac2e2e4ddc02", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -108,6 +108,7 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n /// *guard += 1;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"mutex_type\")]\n pub struct Mutex<T: ?Sized> {\n     // Note that this mutex is in a *box*, not inlined into the struct itself.\n     // Once a native mutex has been used once, its address can never change (it"}, {"sha": "597c86a1f19cae5fbcf4d0952e0543f987fa0f64", "filename": "src/test/rustdoc-ui/cfg-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags:--test --test-args --test-threads=1\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n "}, {"sha": "98507f99e8d4bdf80347d89a19eab109d32ef94c", "filename": "src/test/rustdoc-ui/coverage/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(extern_types)]\n "}, {"sha": "55a87e9d97b3108f938a62882bcd156743d1783c", "filename": "src/test/rustdoc-ui/coverage/empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // an empty crate still has one item to document: the crate root"}, {"sha": "a4ae36d6837afe5ad691674e6aafbd20c59b70e0", "filename": "src/test/rustdoc-ui/coverage/enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n //! (remember the crate root is still a module)\n "}, {"sha": "281ce571aa03f543aae1e8951e69c60a1ecfee53", "filename": "src/test/rustdoc-ui/coverage/exotic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(doc_keyword)]\n "}, {"sha": "2bd6a312ab58366207acc87b14237d58f23ffcba", "filename": "src/test/rustdoc-ui/coverage/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fjson.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass\n+// check-pass\n // compile-flags:-Z unstable-options --output-format json --show-coverage\n \n pub mod foo {"}, {"sha": "2a0271727f26e5f5f89a7216f725966f03615476", "filename": "src/test/rustdoc-ui/coverage/private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage --document-private-items\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(unused)]\n "}, {"sha": "5a35260fa3580ef6656a5c1c2399723c70acd693", "filename": "src/test/rustdoc-ui/coverage/statics-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n //! gotta make sure we can count statics and consts correctly, too\n "}, {"sha": "7d5cf049e7fdddd1d290b9b95b36ad39b19b3bcf", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-Z unstable-options --show-coverage\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(trait_alias)]\n "}, {"sha": "0d5dfa733fab69ec33c2108ac2eff057881ecadb", "filename": "src/test/rustdoc-ui/deprecated-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![doc(no_default_passes, passes = \"collapse-docs unindent-comments\")]\n "}, {"sha": "9a79fb88383516ea7491aa7299c7451b8d2432e5", "filename": "src/test/rustdoc-ui/doc-test-doctest-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass\n+// check-pass\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n "}, {"sha": "2af5782453e6d62dc22bcf5262d21d12c3f4c2e8", "filename": "src/test/rustdoc-ui/doc-test-rustdoc-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass\n+// check-pass\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n "}, {"sha": "18c9837b0bb457e449312e21e811e12cec6b5b97", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-cr\n-// build-pass\n+// check-pass\n \n // This file checks the spans of intra-link warnings in a file with CRLF line endings. The\n // .gitattributes file in this directory should enforce it."}, {"sha": "623dcc320bb8dcd83a06b860640f4fb3dbba7733", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass\n+// check-pass\n \n        //! Test with [Foo::baz], [Bar::foo], ...\n //~^ WARNING `[Foo::baz]` cannot be resolved"}, {"sha": "c395a8ef3d41ab930fe5259beea5b884e2930096", "filename": "src/test/rustdoc-ui/invalid-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass\n+// check-pass\n \n /// ```\n /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/"}, {"sha": "e5f3b4daf572998eddad061d4f8e945df8c54a95", "filename": "src/test/rustdoc-ui/issue-58473-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473-2.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(private_doc_tests)]\n "}, {"sha": "44e1f58d0a0fbc64db81086ea998bb62f53cf1f5", "filename": "src/test/rustdoc-ui/issue-58473.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-58473.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub trait Foo {\n     /**"}, {"sha": "af4843ad324054371e3a25c4dfe3afba7d80ca73", "filename": "src/test/rustdoc-ui/test-no_std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,6 +1,6 @@\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n-// build-pass\n+// check-pass\n \n #![no_std]\n "}, {"sha": "702b24c36c56c0bd31245045e9ae7472c29938da", "filename": "src/test/rustdoc-ui/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Frustdoc-ui%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funused.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // This test purpose is to check that unused_imports lint isn't fired\n // by rustdoc. Why would it? Because when rustdoc is running, it uses"}, {"sha": "ebb392a45308e85bb34c7c84ab5adc4ba8345e87", "filename": "src/test/ui/async-await/issue-71137.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+use std::future::Future;\n+use std::sync::Mutex;\n+\n+fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n+\n+async fn wrong_mutex() {\n+  let m = Mutex::new(1);\n+  {\n+    let mut guard = m.lock().unwrap();\n+    (async { \"right\"; }).await;\n+    *guard += 1;\n+  }\n+\n+  (async { \"wrong\"; }).await;\n+}\n+\n+fn main() {\n+  fake_spawn(wrong_mutex()); //~ Error future cannot be sent between threads safely\n+}"}, {"sha": "788a9bc2c7e47a2e902e4ec650f247c2b2e5c82f", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-71137.rs:20:3\n+   |\n+LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n+   |                           ---- required by this bound in `fake_spawn`\n+...\n+LL |   fake_spawn(wrong_mutex());\n+   |   ^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, i32>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-71137.rs:12:5\n+   |\n+LL |     let mut guard = m.lock().unwrap();\n+   |         --------- has type `std::sync::MutexGuard<'_, i32>` which is not `Send`\n+LL |     (async { \"right\"; }).await;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `mut guard` maybe used later\n+LL |     *guard += 1;\n+LL |   }\n+   |   - `mut guard` is later dropped here\n+\n+error: aborting due to previous error\n+"}, {"sha": "b65f5345034e5f280afcb9d6c18dac5d4af3d378", "filename": "src/test/ui/consts/issue-70942-trait-vs-impl-mismatch.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -0,0 +1,14 @@\n+trait Nat {\n+    const VALUE: usize;\n+}\n+\n+struct Zero;\n+\n+impl Nat for Zero {\n+    const VALUE: i32 = 0;\n+    //~^ ERROR implemented const `VALUE` has an incompatible type for trait\n+}\n+\n+fn main() {\n+    let _: [i32; Zero::VALUE] = [];\n+}"}, {"sha": "19d9ff71667842aa1b3cfc8651705a05e0f9e4a3", "filename": "src/test/ui/consts/issue-70942-trait-vs-impl-mismatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -0,0 +1,12 @@\n+error[E0326]: implemented const `VALUE` has an incompatible type for trait\n+  --> $DIR/issue-70942-trait-vs-impl-mismatch.rs:8:18\n+   |\n+LL |     const VALUE: usize;\n+   |                  ----- type in trait\n+...\n+LL |     const VALUE: i32 = 0;\n+   |                  ^^^ expected `usize`, found `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0326`."}, {"sha": "2c5257ce063cb525897cd2c19a1b4380f1d0c37d", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -19,5 +19,4 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n-    //~^ ERROR constant expression depends on a generic parameter\n }"}, {"sha": "8ae0f8b804c93e822b6b5f97fa81105cb3215dcc", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -13,15 +13,7 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n-   |\n-LL |     let _ = [0; B::VALUE];\n-   |                 ^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0046, E0437.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "be52a0afd46b76ca90ec86cac02c774467656b54", "filename": "src/test/ui/parser/doc-comment-in-if-statement.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-error: expected outer doc comment\n+error[E0753]: expected outer doc comment\n   --> $DIR/doc-comment-in-if-statement.rs:2:13\n    |\n LL |     if true /*!*/ {}\n@@ -17,3 +17,4 @@ LL |     if true /*!*/ {}\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0753`."}, {"sha": "b3a27f19851711db634f74fcfa146856ee6d212d", "filename": "src/test/ui/parser/issue-30318.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fparser%2Fissue-30318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fparser%2Fissue-30318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-30318.stderr?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -1,4 +1,4 @@\n-error: expected outer doc comment\n+error[E0753]: expected outer doc comment\n   --> $DIR/issue-30318.rs:3:1\n    |\n LL | //! Misplaced comment...\n@@ -8,3 +8,4 @@ LL | //! Misplaced comment...\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0753`."}, {"sha": "5a0af8db7c504dfa78b3342375dbf1fb9a9a26e2", "filename": "src/test/ui/useless-comment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fuseless-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f677d8974b393ff32ca25bf916b6b9650c75b0/src%2Ftest%2Fui%2Fuseless-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuseless-comment.stderr?ref=00f677d8974b393ff32ca25bf916b6b9650c75b0", "patch": "@@ -2,7 +2,7 @@ error: unused doc comment\n   --> $DIR/useless-comment.rs:9:1\n    |\n LL | /// foo\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macros\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macro invocations\n    |\n note: the lint level is defined here\n   --> $DIR/useless-comment.rs:3:9\n@@ -15,7 +15,7 @@ error: unused doc comment\n   --> $DIR/useless-comment.rs:32:5\n    |\n LL |     /// bar\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macros\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macro invocations\n    |\n    = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n "}]}