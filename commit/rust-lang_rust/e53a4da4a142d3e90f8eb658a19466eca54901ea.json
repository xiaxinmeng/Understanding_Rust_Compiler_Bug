{"sha": "e53a4da4a142d3e90f8eb658a19466eca54901ea", "node_id": "C_kwDOAAsO6NoAKGU1M2E0ZGE0YTE0MmQzZTkwZjhlYjY1OGExOTQ2NmVjYTU0OTAxZWE", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-16T07:51:09Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:18Z"}, "message": "it works i think (incl some `dbg`s)", "tree": {"sha": "5834f359fac08caf59ba7e8e6c6fae13474948e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5834f359fac08caf59ba7e8e6c6fae13474948e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53a4da4a142d3e90f8eb658a19466eca54901ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53a4da4a142d3e90f8eb658a19466eca54901ea", "html_url": "https://github.com/rust-lang/rust/commit/e53a4da4a142d3e90f8eb658a19466eca54901ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53a4da4a142d3e90f8eb658a19466eca54901ea/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "523b0131618d8e4437a788eb1e3ddca743b3789f", "url": "https://api.github.com/repos/rust-lang/rust/commits/523b0131618d8e4437a788eb1e3ddca743b3789f", "html_url": "https://github.com/rust-lang/rust/commit/523b0131618d8e4437a788eb1e3ddca743b3789f"}], "stats": {"total": 132, "additions": 82, "deletions": 50}, "files": [{"sha": "62f8ecdc2163a3c420cc99c4a8ee8a0832a3aec7", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e53a4da4a142d3e90f8eb658a19466eca54901ea/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a4da4a142d3e90f8eb658a19466eca54901ea/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=e53a4da4a142d3e90f8eb658a19466eca54901ea", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n // use clippy_utils::is_integer_const;\n use clippy_utils::consts::{miri_to_const, Constant};\n use rustc_errors::Applicability;\n-use rustc_hir::{Item, ItemKind, TyKind, VariantData};\n+use rustc_hir::{HirId, Item, ItemKind, TyKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -45,17 +45,29 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_AR\n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         dbg!(item.ident);\n-        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_c(cx, item) {\n-            // span_lint_and_sugg(\n-            //     cx,\n-            //     todo!(),\n-            //     todo!(),\n-            //     todo!(),\n-            //     \"try\",\n-            //     \"`#[repr(C)]`\".to_string(),\n-            //     Applicability::MachineApplicable,\n-            // );\n-            // println!(\"consider yourself linted \ud83d\ude0e\");\n+\n+        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id);\n+        let hir_id2 = item.hir_id();\n+        dbg!(hir_id);\n+        dbg!(hir_id2);\n+        dbg!(hir_id == hir_id2);\n+\n+        let span1 = cx.tcx.hir().span(hir_id);\n+        let span2 = item.span;\n+        dbg!(span1);\n+        dbg!(span2);\n+        dbg!(span1 == span2);\n+\n+        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_c(cx, hir_id) {\n+            span_lint_and_sugg(\n+                cx,\n+                TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C,\n+                span2,\n+                \"trailing zero-sized array in a struct which isn't marked `#[repr(C)]`\",\n+                \"try\",\n+                \"#[repr(C)]\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n         }\n     }\n }\n@@ -76,7 +88,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n                         .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n                     if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n                         if val == 0 {\n-                            eprintln!(\"trailing: true\");\n+                            // eprintln!(\"trailing: true\");\n                             return true;\n                         }\n                     }\n@@ -85,28 +97,21 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n         }\n     }\n     // dbg!(aconst);\n-    eprintln!(\"trailing: false\");\n+    // eprintln!(\"trailing: false\");\n     false\n }\n \n-fn has_repr_c(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n-    // let hir_id2 = if let Some(body) = cx.enclosing_body {\n-    //     body.hir_id\n-    // } else {\n-    //     todo!();\n-    // };\n-\n-    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id);\n+fn has_repr_c(cx: &LateContext<'tcx>, hir_id: HirId) -> bool {\n     let attrs = cx.tcx.hir().attrs(hir_id);\n     // NOTE: Can there ever be more than one `repr` attribute?\n     // other `repr` syms: repr, repr128, repr_align, repr_align_enum, repr_no_niche, repr_packed,\n     // repr_simd, repr_transparent\n \n     if let Some(repr_attr) = attrs.iter().find(|attr| attr.has_name(sym::repr)) {\n-        eprintln!(\"repr: true\");\n+        // eprintln!(\"repr: true\");\n         true\n     } else {\n-        eprintln!(\"repr: false\");\n+        // eprintln!(\"repr: false\");\n         false\n     }\n }"}, {"sha": "1e3683b2c25964c0bc3d0a49c0b37b1842551ad5", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e53a4da4a142d3e90f8eb658a19466eca54901ea/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53a4da4a142d3e90f8eb658a19466eca54901ea/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=e53a4da4a142d3e90f8eb658a19466eca54901ea", "patch": "@@ -15,35 +15,62 @@ struct OnlyFieldIsZeroSizeArray {\n     first_and_last: [usize; 0],\n }\n \n-struct GenericArrayType<T> {\n-    field: i32,\n-    last: [T; 0],\n-}\n+// struct GenericArrayType<T> {\n+//     field: i32,\n+//     last: [T; 0],\n+// }\n \n-struct SizedArray {\n-    field: i32,\n-    last: [usize; 1],\n-}\n+// struct SizedArray {\n+//     field: i32,\n+//     last: [usize; 1],\n+// }\n \n-const ZERO: usize = 0;\n-struct ZeroSizedFromExternalConst {\n-    field: i32,\n-    last: [usize; ZERO],\n-}\n+// const ZERO: usize = 0;\n+// struct ZeroSizedFromExternalConst {\n+//     field: i32,\n+//     last: [usize; ZERO],\n+// }\n \n-const ONE: usize = 1;\n-struct NonZeroSizedFromExternalConst {\n-    field: i32,\n-    last: [usize; ONE],\n-}\n+// const ONE: usize = 1;\n+// struct NonZeroSizedFromExternalConst {\n+//     field: i32,\n+//     last: [usize; ONE],\n+// }\n \n-#[allow(clippy::eq_op)] // lmao im impressed\n-const fn compute_zero() -> usize {\n-    (4 + 6) - (2 * 5)\n-}\n-struct UsingFunction {\n-    field: i32,\n-    last: [usize; compute_zero()],\n-}\n+// #[allow(clippy::eq_op)] // lmao im impressed\n+// const fn compute_zero() -> usize {\n+//     (4 + 6) - (2 * 5)\n+// }\n+// struct UsingFunction {\n+//     field: i32,\n+//     last: [usize; compute_zero()],\n+// }\n+\n+// // TODO: same\n+// #[repr(packed)]\n+// struct ReprPacked {\n+//     small: u8,\n+//     medium: i32,\n+//     weird: [u64; 0],\n+// }\n+\n+// // TODO: actually, uh,, \n+// #[repr(align(64))]\n+// struct ReprAlign {\n+//     field: i32,\n+//     last: [usize; 0],\n+// }\n+// #[repr(C, align(64))]\n+// struct ReprCAlign {\n+//     field: i32,\n+//     last: [usize; 0],\n+// }\n+\n+// #[repr(C)]\n+// enum DontLintAnonymousStructsFromDesuraging {\n+//     A(u32),\n+//     B(f32, [u64; 0]),\n+//     C { x: u32, y: [u64; 0] },\n+// }\n \n fn main() {}"}]}