{"sha": "acfd327fd4e3a302ebb0a077f422a527a7935333", "node_id": "C_kwDOAAsO6NoAKGFjZmQzMjdmZDRlM2EzMDJlYmIwYTA3N2Y0MjJhNTI3YTc5MzUzMzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T06:47:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T06:47:36Z"}, "message": "Auto merge of #97177 - oli-obk:const-stability, r=davidtwco\n\nImplement proper stability check for const impl Trait, fall back to unstable const when undeclared\n\nContinuation of #93960\n\n`@jhpratt` it looks to me like the test was simply not testing for the failure you were looking for? Your checks actually do the right thing for const traits?", "tree": {"sha": "0fc26d507911459b9a9ac91b65c4f8cbe10a5ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc26d507911459b9a9ac91b65c4f8cbe10a5ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acfd327fd4e3a302ebb0a077f422a527a7935333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acfd327fd4e3a302ebb0a077f422a527a7935333", "html_url": "https://github.com/rust-lang/rust/commit/acfd327fd4e3a302ebb0a077f422a527a7935333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acfd327fd4e3a302ebb0a077f422a527a7935333/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "html_url": "https://github.com/rust-lang/rust/commit/bb5e6c984de2fbabba37655551f4bab16fbd9e5e"}, {"sha": "f9c4f2b7ad431c6658682724a057b4a36920fdb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c4f2b7ad431c6658682724a057b4a36920fdb4", "html_url": "https://github.com/rust-lang/rust/commit/f9c4f2b7ad431c6658682724a057b4a36920fdb4"}], "stats": {"total": 427, "additions": 259, "deletions": 168}, "files": [{"sha": "2704cb8d78538da8497e3d793e4eb97591077f82", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -101,6 +101,16 @@ pub struct Stability {\n     pub feature: Symbol,\n }\n \n+impl Stability {\n+    pub fn is_unstable(&self) -> bool {\n+        self.level.is_unstable()\n+    }\n+\n+    pub fn is_stable(&self) -> bool {\n+        self.level.is_stable()\n+    }\n+}\n+\n /// Represents the `#[rustc_const_unstable]` and `#[rustc_const_stable]` attributes.\n #[derive(Encodable, Decodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n #[derive(HashStable_Generic)]\n@@ -111,6 +121,16 @@ pub struct ConstStability {\n     pub promotable: bool,\n }\n \n+impl ConstStability {\n+    pub fn is_const_unstable(&self) -> bool {\n+        self.level.is_unstable()\n+    }\n+\n+    pub fn is_const_stable(&self) -> bool {\n+        self.level.is_stable()\n+    }\n+}\n+\n /// The available stability levels.\n #[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]"}, {"sha": "d6f62062d1f8ee39c8348249bcf949a96b37a9f1", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::Symbol;\n pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     if tcx.is_const_fn_raw(def_id) {\n         let const_stab = tcx.lookup_const_stability(def_id)?;\n-        if const_stab.level.is_unstable() { Some(const_stab.feature) } else { None }\n+        if const_stab.is_const_unstable() { Some(const_stab.feature) } else { None }\n     } else {\n         None\n     }"}, {"sha": "2c669dd6d9a9b494dc4f4124071e67d97b9a4216", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -229,18 +229,6 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n         // The local type and predicate checks are not free and only relevant for `const fn`s.\n         if self.const_kind() == hir::ConstContext::ConstFn {\n-            // Prevent const trait methods from being annotated as `stable`.\n-            // FIXME: Do this as part of stability checking.\n-            if self.is_const_stable_const_fn() {\n-                if crate::const_eval::is_parent_const_impl_raw(tcx, def_id) {\n-                    self.ccx\n-                        .tcx\n-                        .sess\n-                        .struct_span_err(self.span, \"trait methods cannot be stable const fn\")\n-                        .emit();\n-                }\n-            }\n-\n             for (idx, local) in body.local_decls.iter_enumerated() {\n                 // Handle the return place below.\n                 if idx == RETURN_PLACE || local.internal {\n@@ -944,7 +932,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 // have no `rustc_const_stable` attributes to be const-unstable as well. This\n                 // should be fixed later.\n                 let callee_is_unstable_unmarked = tcx.lookup_const_stability(callee).is_none()\n-                    && tcx.lookup_stability(callee).map_or(false, |s| s.level.is_unstable());\n+                    && tcx.lookup_stability(callee).map_or(false, |s| s.is_unstable());\n                 if callee_is_unstable_unmarked {\n                     trace!(\"callee_is_unstable_unmarked\");\n                     // We do not use `const` modifiers for intrinsic \"functions\", as intrinsics are"}, {"sha": "0f79fe5513dd8790db99a80faba783ef77fb94e2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -84,8 +84,6 @@ pub fn rustc_allow_const_fn_unstable(\n // functions are subject to more stringent restrictions than \"const-unstable\" functions: They\n // cannot use unstable features and can only call other \"const-stable\" functions.\n pub fn is_const_stable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    use attr::{ConstStability, Stability, StabilityLevel};\n-\n     // A default body marked const is not const-stable because const\n     // trait fns currently cannot be const-stable. We shouldn't\n     // restrict default bodies to only call const-stable functions.\n@@ -96,22 +94,39 @@ pub fn is_const_stable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Const-stability is only relevant for `const fn`.\n     assert!(tcx.is_const_fn_raw(def_id));\n \n-    // Functions with `#[rustc_const_unstable]` are const-unstable.\n+    // A function is only const-stable if it has `#[rustc_const_stable]` or it the trait it belongs\n+    // to is const-stable.\n     match tcx.lookup_const_stability(def_id) {\n-        Some(ConstStability { level: StabilityLevel::Unstable { .. }, .. }) => return false,\n-        Some(ConstStability { level: StabilityLevel::Stable { .. }, .. }) => return true,\n-        None => {}\n+        Some(stab) => stab.is_const_stable(),\n+        None if is_parent_const_stable_trait(tcx, def_id) => {\n+            // Remove this when `#![feature(const_trait_impl)]` is stabilized,\n+            // returning `true` unconditionally.\n+            tcx.sess.delay_span_bug(\n+                tcx.def_span(def_id),\n+                \"trait implementations cannot be const stable yet\",\n+            );\n+            true\n+        }\n+        None => false, // By default, items are not const stable.\n     }\n+}\n+\n+fn is_parent_const_stable_trait(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    let local_def_id = def_id.expect_local();\n+    let hir_id = tcx.local_def_id_to_hir_id(local_def_id);\n+\n+    let Some(parent) = tcx.hir().find_parent_node(hir_id) else { return false };\n+    let parent_def = tcx.hir().get(parent);\n \n-    // Functions with `#[unstable]` are const-unstable.\n-    //\n-    // FIXME(ecstaticmorse): We should keep const-stability attributes wholly separate from normal stability\n-    // attributes. `#[unstable]` should be irrelevant.\n-    if let Some(Stability { level: StabilityLevel::Unstable { .. }, .. }) =\n-        tcx.lookup_stability(def_id)\n-    {\n+    if !matches!(\n+        parent_def,\n+        hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n+            ..\n+        })\n+    ) {\n         return false;\n     }\n \n-    true\n+    tcx.lookup_const_stability(parent.owner).map_or(false, |stab| stab.is_const_stable())\n }"}, {"sha": "1b4669106338f9d2333d8517573866f9c8dfcdc8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -2791,7 +2791,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn is_const_fn(self, def_id: DefId) -> bool {\n         if self.is_const_fn_raw(def_id) {\n             match self.lookup_const_stability(def_id) {\n-                Some(stability) if stability.level.is_unstable() => {\n+                Some(stability) if stability.is_const_unstable() => {\n                     // has a `rustc_const_unstable` attribute, check whether the user enabled the\n                     // corresponding feature gate.\n                     self.features()\n@@ -2808,6 +2808,21 @@ impl<'tcx> TyCtxt<'tcx> {\n             false\n         }\n     }\n+\n+    /// Whether the trait impl is marked const. This does not consider stability or feature gates.\n+    pub fn is_const_trait_impl_raw(self, def_id: DefId) -> bool {\n+        let Some(local_def_id) = def_id.as_local() else { return false };\n+        let hir_id = self.local_def_id_to_hir_id(local_def_id);\n+        let node = self.hir().get(hir_id);\n+\n+        matches!(\n+            node,\n+            hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n+                ..\n+            })\n+        )\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {"}, {"sha": "70cb1f2a281a8bfe8091777b27ea853ac1b70e2a", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             // Propagate unstability.  This can happen even for non-staged-api crates in case\n             // -Zforce-unstable-if-unmarked is set.\n             if let Some(stab) = self.parent_stab {\n-                if inherit_deprecation.yes() && stab.level.is_unstable() {\n+                if inherit_deprecation.yes() && stab.is_unstable() {\n                     self.index.stab_map.insert(def_id, stab);\n                 }\n             }\n@@ -190,7 +190,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if const_stab.is_none() {\n             debug!(\"annotate: const_stab not found, parent = {:?}\", self.parent_const_stab);\n             if let Some(parent) = self.parent_const_stab {\n-                if parent.level.is_unstable() {\n+                if parent.is_const_unstable() {\n                     self.index.const_stab_map.insert(def_id, parent);\n                 }\n             }\n@@ -272,9 +272,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if stab.is_none() {\n             debug!(\"annotate: stab not found, parent = {:?}\", self.parent_stab);\n             if let Some(stab) = self.parent_stab {\n-                if inherit_deprecation.yes() && stab.level.is_unstable()\n-                    || inherit_from_parent.yes()\n-                {\n+                if inherit_deprecation.yes() && stab.is_unstable() || inherit_from_parent.yes() {\n                     self.index.stab_map.insert(def_id, stab);\n                 }\n             }\n@@ -532,7 +530,8 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n             return;\n         }\n \n-        let is_const = self.tcx.is_const_fn(def_id.to_def_id());\n+        let is_const = self.tcx.is_const_fn(def_id.to_def_id())\n+            || self.tcx.is_const_trait_impl_raw(def_id.to_def_id());\n         let is_stable = self\n             .tcx\n             .lookup_stability(def_id)\n@@ -710,16 +709,23 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n             // For implementations of traits, check the stability of each item\n             // individually as it's possible to have a stable trait with unstable\n             // items.\n-            hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref t), self_ty, items, .. }) => {\n-                if self.tcx.features().staged_api {\n+            hir::ItemKind::Impl(hir::Impl {\n+                of_trait: Some(ref t),\n+                self_ty,\n+                items,\n+                constness,\n+                ..\n+            }) => {\n+                let features = self.tcx.features();\n+                if features.staged_api {\n+                    let attrs = self.tcx.hir().attrs(item.hir_id());\n+                    let (stab, const_stab) = attr::find_stability(&self.tcx.sess, attrs, item.span);\n+\n                     // If this impl block has an #[unstable] attribute, give an\n                     // error if all involved types and traits are stable, because\n                     // it will have no effect.\n                     // See: https://github.com/rust-lang/rust/issues/55436\n-                    let attrs = self.tcx.hir().attrs(item.hir_id());\n-                    if let (Some((Stability { level: attr::Unstable { .. }, .. }, span)), _) =\n-                        attr::find_stability(&self.tcx.sess, attrs, item.span)\n-                    {\n+                    if let Some((Stability { level: attr::Unstable { .. }, .. }, span)) = stab {\n                         let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n                         c.visit_ty(self_ty);\n                         c.visit_trait_ref(t);\n@@ -735,6 +741,19 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                             );\n                         }\n                     }\n+\n+                    // `#![feature(const_trait_impl)]` is unstable, so any impl declared stable\n+                    // needs to have an error emitted.\n+                    if features.const_trait_impl\n+                        && *constness == hir::Constness::Const\n+                        && const_stab.map_or(false, |(stab, _)| stab.is_const_stable())\n+                    {\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(item.span, \"trait implementations cannot be const stable yet\")\n+                            .note(\"see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\")\n+                            .emit();\n+                    }\n                 }\n \n                 for impl_item_ref in *items {"}, {"sha": "e7b966758d6e05c38019d6e8e8eb9f0970fe5ec2", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -344,7 +344,7 @@ pub(crate) fn build_impl(\n             }\n \n             if let Some(stab) = tcx.lookup_stability(did) {\n-                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n+                if stab.is_unstable() && stab.feature == sym::rustc_private {\n                     return;\n                 }\n             }\n@@ -373,7 +373,7 @@ pub(crate) fn build_impl(\n             }\n \n             if let Some(stab) = tcx.lookup_stability(did) {\n-                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n+                if stab.is_unstable() && stab.feature == sym::rustc_private {\n                     return;\n                 }\n             }"}, {"sha": "a832d03a5011fd54c6eb66dc8c16c500efeba59c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -632,7 +632,7 @@ impl Item {\n         self.stability(tcx).as_ref().and_then(|s| {\n             let mut classes = Vec::with_capacity(2);\n \n-            if s.level.is_unstable() {\n+            if s.is_unstable() {\n                 classes.push(\"unstable\");\n             }\n "}, {"sha": "2c0b8d7bde1466ef4afcc58501e238c728ab65b6", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -445,10 +445,7 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n \n     // The \"rustc_private\" crates are permanently unstable so it makes no sense\n     // to render \"unstable\" everywhere.\n-    if item\n-        .stability(tcx)\n-        .as_ref()\n-        .map(|s| s.level.is_unstable() && s.feature != sym::rustc_private)\n+    if item.stability(tcx).as_ref().map(|s| s.is_unstable() && s.feature != sym::rustc_private)\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"\", \"Experimental\");"}, {"sha": "0c18efa0a0235310a1e8d1a1ff9a4c3474d4442d", "filename": "src/test/ui/consts/rustc-impl-const-stability.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -1,19 +1,18 @@\n-// build-pass\n+// check-pass\n \n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n #![feature(const_trait_impl)]\n #![stable(feature = \"foo\", since = \"1.0.0\")]\n \n-\n #[stable(feature = \"potato\", since = \"1.27.0\")]\n pub struct Data {\n-    _data: u128\n+    _data: u128,\n }\n \n #[stable(feature = \"potato\", since = \"1.27.0\")]\n+#[rustc_const_unstable(feature = \"data_foo\", issue = \"none\")]\n impl const Default for Data {\n-    #[rustc_const_unstable(feature = \"data_foo\", issue = \"none\")]\n     fn default() -> Data {\n         Data { _data: 42 }\n     }"}, {"sha": "19e9006094beda950255271d99242095d3b3ba48", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/staged-api.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-\n #![feature(staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -13,9 +12,7 @@ pub trait MyTrait {\n pub struct Unstable;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"staged\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"unstable\", issue = \"none\")]\n impl const MyTrait for Unstable {\n-    fn func() {\n-\n-    }\n+    fn func() {}\n }"}, {"sha": "906956f5eba49613034cb3fe00d86ad2140d1f31", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -1,45 +0,0 @@\n-#![feature(allow_internal_unstable)]\n-#![feature(const_add)]\n-#![feature(const_trait_impl)]\n-#![feature(staged_api)]\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Int(i32);\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl const std::ops::Sub for Int {\n-    type Output = Self;\n-\n-    fn sub(self, rhs: Self) -> Self {\n-        //~^ ERROR trait methods cannot be stable const fn\n-        Int(self.0 - rhs.0)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_add\", issue = \"none\")]\n-impl const std::ops::Add for Int {\n-    type Output = Self;\n-\n-    fn add(self, rhs: Self) -> Self {\n-        Int(self.0 + rhs.0)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const fn foo() -> Int {\n-    Int(1i32) + Int(2i32)\n-    //~^ ERROR not yet stable as a const fn\n-}\n-\n-// ok\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"bar\", issue = \"none\")]\n-pub const fn bar() -> Int {\n-    Int(1i32) + Int(2i32)\n-}\n-\n-fn main() {}"}, {"sha": "7473b801cce63127f3fa609594d438e70f9acad0", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -1,19 +0,0 @@\n-error: trait methods cannot be stable const fn\n-  --> $DIR/stability.rs:15:5\n-   |\n-LL | /     fn sub(self, rhs: Self) -> Self {\n-LL | |\n-LL | |         Int(self.0 - rhs.0)\n-LL | |     }\n-   | |_____^\n-\n-error: `<Int as Add>::add` is not yet stable as a const fn\n-  --> $DIR/stability.rs:34:5\n-   |\n-LL |     Int(1i32) + Int(2i32)\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: const-stable functions can only call other const-stable functions\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "fc0d82727b553d2dd2ff4d5ee77a67f29c96dbbf", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api-user-crate.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -0,0 +1,16 @@\n+// aux-build: staged-api.rs\n+extern crate staged_api;\n+\n+use staged_api::*;\n+\n+// Const stability has no impact on usage in non-const contexts.\n+fn non_const_context() {\n+    Unstable::func();\n+}\n+\n+const fn stable_const_context() {\n+    Unstable::func();\n+    //~^ ERROR cannot call non-const fn `<staged_api::Unstable as staged_api::MyTrait>::func` in constant functions\n+}\n+\n+fn main() {}"}, {"sha": "61f9840e0d0a0b8b1233094cfc95f6516830616f", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api-user-crate.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -0,0 +1,11 @@\n+error[E0015]: cannot call non-const fn `<staged_api::Unstable as staged_api::MyTrait>::func` in constant functions\n+  --> $DIR/staged-api-user-crate.rs:12:5\n+   |\n+LL |     Unstable::func();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "1d79f5adf93f399f91b76362b720617f709a17ce", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -1,9 +1,7 @@\n-// revisions: stock staged\n-#![cfg_attr(staged, feature(staged))]\n+// revisions: stable unstable\n \n+#![cfg_attr(unstable, feature(unstable))] // The feature from the ./auxiliary/staged-api.rs file.\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n-\n #![feature(staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -13,27 +11,53 @@ extern crate staged_api;\n use staged_api::*;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Stable;\n+pub struct Foo;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(staged, rustc_const_stable(feature = \"rust1\", since = \"1.0.0\"))]\n-// ^ should trigger error with or without the attribute\n-impl const MyTrait for Stable {\n-    fn func() { //~ ERROR trait methods cannot be stable const fn\n-\n-    }\n+#[cfg_attr(unstable, rustc_const_unstable(feature = \"foo\", issue = \"none\"))]\n+#[cfg_attr(stable, rustc_const_stable(feature = \"foo\", since = \"1.0.0\"))]\n+impl const MyTrait for Foo {\n+    //[stable]~^ ERROR trait implementations cannot be const stable yet\n+    fn func() {}\n }\n \n+// Const stability has no impact on usage in non-const contexts.\n fn non_const_context() {\n     Unstable::func();\n-    Stable::func();\n+    Foo::func();\n }\n \n #[unstable(feature = \"none\", issue = \"none\")]\n const fn const_context() {\n     Unstable::func();\n-    //[stock]~^ ERROR `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n-    Stable::func();\n+    // ^ This is okay regardless of whether the `unstable` feature is enabled, as this function is\n+    // not const-stable.\n+    Foo::func();\n+    //[unstable]~^ ERROR not yet stable as a const fn\n+    // ^ fails, because the `foo` feature is not active\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(unstable, rustc_const_unstable(feature = \"foo\", issue = \"none\"))]\n+pub const fn const_context_not_const_stable() {\n+    //[stable]~^ ERROR function has missing const stability attribute\n+    Unstable::func();\n+    // ^ This is okay regardless of whether the `unstable` feature is enabled, as this function is\n+    // not const-stable.\n+    Foo::func();\n+    //[unstable]~^ ERROR not yet stable as a const fn\n+    // ^ fails, because the `foo` feature is not active\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"cheese\", since = \"1.0.0\")]\n+const fn stable_const_context() {\n+    Unstable::func();\n+    //[unstable]~^ ERROR not yet stable as a const fn\n+    Foo::func();\n+    //[unstable]~^ ERROR not yet stable as a const fn\n+    const_context_not_const_stable()\n+    //[unstable]~^ ERROR not yet stable as a const fn\n }\n \n fn main() {}"}, {"sha": "a1aca762ef479c296f9e3e5073261b81e086a524", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.stable.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -0,0 +1,25 @@\n+error: trait implementations cannot be const stable yet\n+  --> $DIR/staged-api.rs:19:1\n+   |\n+LL | / impl const MyTrait for Foo {\n+LL | |\n+LL | |     fn func() {}\n+LL | | }\n+   | |_^\n+   |\n+   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n+\n+error: function has missing const stability attribute\n+  --> $DIR/staged-api.rs:42:1\n+   |\n+LL | / pub const fn const_context_not_const_stable() {\n+LL | |\n+LL | |     Unstable::func();\n+LL | |     // ^ This is okay regardless of whether the `unstable` feature is enabled, as this function is\n+...  |\n+LL | |     // ^ fails, because the `foo` feature is not active\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d2ff4ce2001304e52a294429cc9337385da818b9", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.staged.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -1,10 +0,0 @@\n-error: trait methods cannot be stable const fn\n-  --> $DIR/staged-api.rs:22:5\n-   |\n-LL | /     fn func() {\n-LL | |\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "91c5469bd90a5d5f9f0adf8f420984d9337a318f", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.stock.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb5e6c984de2fbabba37655551f4bab16fbd9e5e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr?ref=bb5e6c984de2fbabba37655551f4bab16fbd9e5e", "patch": "@@ -1,18 +0,0 @@\n-error: trait methods cannot be stable const fn\n-  --> $DIR/staged-api.rs:22:5\n-   |\n-LL | /     fn func() {\n-LL | |\n-LL | |     }\n-   | |_____^\n-\n-error: `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n-  --> $DIR/staged-api.rs:34:5\n-   |\n-LL |     Unstable::func();\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(staged)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "c38d1a81ae77b7ccfc957708d91e07a2dece5e57", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.unstable.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -0,0 +1,42 @@\n+error: `<Foo as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:35:5\n+   |\n+LL |     Foo::func();\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(foo)]` to the crate attributes to enable\n+\n+error: `<Foo as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:47:5\n+   |\n+LL |     Foo::func();\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(foo)]` to the crate attributes to enable\n+\n+error: `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:55:5\n+   |\n+LL |     Unstable::func();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: const-stable functions can only call other const-stable functions\n+\n+error: `<Foo as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:57:5\n+   |\n+LL |     Foo::func();\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: const-stable functions can only call other const-stable functions\n+\n+error: `const_context_not_const_stable` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:59:5\n+   |\n+LL |     const_context_not_const_stable()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: const-stable functions can only call other const-stable functions\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "d89886af314a4c91db909388439e90d0d7450b6f", "filename": "src/test/ui/stability-attribute/missing-const-stability.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -18,9 +18,15 @@ impl Foo {\n     pub const fn bar() {} // ok because function is unstable\n }\n \n-// FIXME Once #![feature(const_trait_impl)] is allowed to be stable, add a test\n-// for const trait impls. Right now, a \"trait methods cannot be stable const fn\"\n-// error is emitted. This occurs prior to the lint being tested here, such that\n-// the lint cannot currently be tested on this use case.\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+pub trait Bar {\n+    #[stable(feature = \"stable\", since = \"1.0.0\")]\n+    fn fun();\n+}\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+impl const Bar for Foo {\n+    //~^ ERROR implementation has missing const stability attribute\n+    fn fun() {}\n+}\n \n fn main() {}"}, {"sha": "6f2ade0d0abf406a8ffe7b5e8efeea8cb81081c5", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfd327fd4e3a302ebb0a077f422a527a7935333/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=acfd327fd4e3a302ebb0a077f422a527a7935333", "patch": "@@ -10,5 +10,14 @@ error: associated function has missing const stability attribute\n LL |     pub const fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: implementation has missing const stability attribute\n+  --> $DIR/missing-const-stability.rs:27:1\n+   |\n+LL | / impl const Bar for Foo {\n+LL | |\n+LL | |     fn fun() {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n "}]}