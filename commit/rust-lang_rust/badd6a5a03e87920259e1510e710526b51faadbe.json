{"sha": "badd6a5a03e87920259e1510e710526b51faadbe", "node_id": "C_kwDOAAsO6NoAKGJhZGQ2YTVhMDNlODc5MjAyNTllMTUxMGU3MTA1MjZiNTFmYWFkYmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T06:24:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T06:24:28Z"}, "message": "Auto merge of #104449 - oli-obk:unhide_unknown_spans, r=estebank,RalfJung\n\nStart emitting labels even if their pointed to file is not available locally\n\nr? `@estebank`\n\ncc `@RalfJung`\n\nfixes #97699", "tree": {"sha": "0a50648bc8747cab60037bbd8ca7409250ba54bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a50648bc8747cab60037bbd8ca7409250ba54bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/badd6a5a03e87920259e1510e710526b51faadbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/badd6a5a03e87920259e1510e710526b51faadbe", "html_url": "https://github.com/rust-lang/rust/commit/badd6a5a03e87920259e1510e710526b51faadbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/badd6a5a03e87920259e1510e710526b51faadbe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7701a7e7d4eed74a106f39fa64899dffd1e1025f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7701a7e7d4eed74a106f39fa64899dffd1e1025f", "html_url": "https://github.com/rust-lang/rust/commit/7701a7e7d4eed74a106f39fa64899dffd1e1025f"}, {"sha": "717fdb58176096d5cd01d9d9ebaf01d756f2234b", "url": "https://api.github.com/repos/rust-lang/rust/commits/717fdb58176096d5cd01d9d9ebaf01d756f2234b", "html_url": "https://github.com/rust-lang/rust/commit/717fdb58176096d5cd01d9d9ebaf01d756f2234b"}], "stats": {"total": 3066, "additions": 2196, "deletions": 870}, "files": [{"sha": "c60d6e4fed9f55277ba8640f9fb8ed81d4612dfc", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -123,14 +123,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 // Helper closure to print duplicated lines.\n                 let mut flush_last_line = |last_frame, times| {\n                     if let Some((line, span)) = last_frame {\n-                        err.span_label(span, &line);\n+                        err.span_note(span, &line);\n                         // Don't print [... additional calls ...] if the number of lines is small\n                         if times < 3 {\n                             for _ in 0..times {\n-                                err.span_label(span, &line);\n+                                err.span_note(span, &line);\n                             }\n                         } else {\n-                            err.span_label(\n+                            err.span_note(\n                                 span,\n                                 format!(\"[... {} additional calls {} ...]\", times, &line),\n                             );"}, {"sha": "0b2809f1d2c285238c1a93a8bb65fc314483de87", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::{\n };\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_session::Limit;\n-use rustc_span::{Pos, Span};\n+use rustc_span::Span;\n use rustc_target::abi::{call::FnAbi, Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n@@ -256,25 +256,13 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n             if tcx.def_key(self.instance.def_id()).disambiguated_data.data\n                 == DefPathData::ClosureExpr\n             {\n-                write!(f, \"inside closure\")?;\n+                write!(f, \"inside closure\")\n             } else {\n                 // Note: this triggers a `good_path_bug` state, which means that if we ever get here\n                 // we must emit a diagnostic. We should never display a `FrameInfo` unless we\n                 // actually want to emit a warning or error to the user.\n-                write!(f, \"inside `{}`\", self.instance)?;\n+                write!(f, \"inside `{}`\", self.instance)\n             }\n-            if !self.span.is_dummy() {\n-                let sm = tcx.sess.source_map();\n-                let lo = sm.lookup_char_pos(self.span.lo());\n-                write!(\n-                    f,\n-                    \" at {}:{}:{}\",\n-                    sm.filename_for_diagnostics(&lo.file.name),\n-                    lo.line,\n-                    lo.col.to_usize() + 1\n-                )?;\n-            }\n-            Ok(())\n         })\n     }\n }"}, {"sha": "4df2198fb0e9bc8eaad61d0babc663efe6e6bd72", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 81, "deletions": 59, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -24,7 +24,7 @@ use rustc_lint_defs::pluralize;\n \n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::sync::Lrc;\n-use rustc_error_messages::FluentArgs;\n+use rustc_error_messages::{FluentArgs, SpanLabel};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n@@ -773,6 +773,7 @@ impl EmitterWriter {\n         draw_col_separator_no_space(buffer, line_offset, width_offset - 2);\n     }\n \n+    #[instrument(level = \"trace\", skip(self), ret)]\n     fn render_source_line(\n         &self,\n         buffer: &mut StyledBuffer,\n@@ -804,6 +805,7 @@ impl EmitterWriter {\n             Some(s) => normalize_whitespace(&s),\n             None => return Vec::new(),\n         };\n+        trace!(?source_string);\n \n         let line_offset = buffer.num_lines();\n \n@@ -1323,6 +1325,7 @@ impl EmitterWriter {\n         }\n     }\n \n+    #[instrument(level = \"trace\", skip(self, args), ret)]\n     fn emit_message_default(\n         &mut self,\n         msp: &MultiSpan,\n@@ -1384,22 +1387,15 @@ impl EmitterWriter {\n             }\n         }\n         let mut annotated_files = FileWithAnnotatedLines::collect_annotations(self, args, msp);\n+        trace!(\"{annotated_files:#?}\");\n \n         // Make sure our primary file comes first\n-        let (primary_lo, sm) = if let (Some(sm), Some(ref primary_span)) =\n-            (self.sm.as_ref(), msp.primary_span().as_ref())\n-        {\n-            if !primary_span.is_dummy() {\n-                (sm.lookup_char_pos(primary_span.lo()), sm)\n-            } else {\n-                emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n-                return Ok(());\n-            }\n-        } else {\n+        let primary_span = msp.primary_span().unwrap_or_default();\n+        let (Some(sm), false) = (self.sm.as_ref(), primary_span.is_dummy()) else {\n             // If we don't have span information, emit and exit\n-            emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n-            return Ok(());\n+            return emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message);\n         };\n+        let primary_lo = sm.lookup_char_pos(primary_span.lo());\n         if let Ok(pos) =\n             annotated_files.binary_search_by(|x| x.file.name.cmp(&primary_lo.file.name))\n         {\n@@ -1410,6 +1406,54 @@ impl EmitterWriter {\n         for annotated_file in annotated_files {\n             // we can't annotate anything if the source is unavailable.\n             if !sm.ensure_source_file_source_present(annotated_file.file.clone()) {\n+                if !self.short_message {\n+                    // We'll just print an unannotated message.\n+                    for (annotation_id, line) in annotated_file.lines.into_iter().enumerate() {\n+                        let mut annotations = line.annotations.clone();\n+                        annotations.sort_by_key(|a| Reverse(a.start_col));\n+                        let mut line_idx = buffer.num_lines();\n+                        buffer.append(\n+                            line_idx,\n+                            &format!(\n+                                \"{}:{}:{}\",\n+                                sm.filename_for_diagnostics(&annotated_file.file.name),\n+                                sm.doctest_offset_line(&annotated_file.file.name, line.line_index),\n+                                annotations[0].start_col + 1,\n+                            ),\n+                            Style::LineAndColumn,\n+                        );\n+                        if annotation_id == 0 {\n+                            buffer.prepend(line_idx, \"--> \", Style::LineNumber);\n+                            for _ in 0..max_line_num_len {\n+                                buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                            }\n+                            line_idx += 1;\n+                        };\n+                        for (i, annotation) in annotations.into_iter().enumerate() {\n+                            if let Some(label) = &annotation.label {\n+                                let style = if annotation.is_primary {\n+                                    Style::LabelPrimary\n+                                } else {\n+                                    Style::LabelSecondary\n+                                };\n+                                if annotation_id == 0 {\n+                                    buffer.prepend(line_idx, \" |\", Style::LineNumber);\n+                                    for _ in 0..max_line_num_len {\n+                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                                    }\n+                                    line_idx += 1;\n+                                    buffer.append(line_idx + i, \" = note: \", style);\n+                                    for _ in 0..max_line_num_len {\n+                                        buffer.prepend(line_idx, \" \", Style::NoStyle);\n+                                    }\n+                                } else {\n+                                    buffer.append(line_idx + i, \": \", style);\n+                                }\n+                                buffer.append(line_idx + i, label, style);\n+                            }\n+                        }\n+                    }\n+                }\n                 continue;\n             }\n \n@@ -1656,6 +1700,7 @@ impl EmitterWriter {\n                     multilines.extend(&to_add);\n                 }\n             }\n+            trace!(\"buffer: {:#?}\", buffer.render());\n         }\n \n         if let Some(tracked) = emitted_at {\n@@ -1979,6 +2024,7 @@ impl EmitterWriter {\n         Ok(())\n     }\n \n+    #[instrument(level = \"trace\", skip(self, args, code, children, suggestions))]\n     fn emit_messages_default(\n         &mut self,\n         level: &Level,\n@@ -2209,46 +2255,28 @@ impl FileWithAnnotatedLines {\n         let mut multiline_annotations = vec![];\n \n         if let Some(ref sm) = emitter.source_map() {\n-            for span_label in msp.span_labels() {\n-                let fixup_lo_hi = |span: Span| {\n-                    let lo = sm.lookup_char_pos(span.lo());\n-                    let mut hi = sm.lookup_char_pos(span.hi());\n-\n-                    // Watch out for \"empty spans\". If we get a span like 6..6, we\n-                    // want to just display a `^` at 6, so convert that to\n-                    // 6..7. This is degenerate input, but it's best to degrade\n-                    // gracefully -- and the parser likes to supply a span like\n-                    // that for EOF, in particular.\n-\n-                    if lo.col_display == hi.col_display && lo.line == hi.line {\n-                        hi.col_display += 1;\n-                    }\n-                    (lo, hi)\n+            for SpanLabel { span, is_primary, label } in msp.span_labels() {\n+                // If we don't have a useful span, pick the primary span if that exists.\n+                // Worst case we'll just print an error at the top of the main file.\n+                let span = match (span.is_dummy(), msp.primary_span()) {\n+                    (_, None) | (false, _) => span,\n+                    (true, Some(span)) => span,\n                 };\n \n-                if span_label.span.is_dummy() {\n-                    if let Some(span) = msp.primary_span() {\n-                        // if we don't know where to render the annotation, emit it as a note\n-                        // on the primary span.\n-\n-                        let (lo, hi) = fixup_lo_hi(span);\n-\n-                        let ann = Annotation {\n-                            start_col: lo.col_display,\n-                            end_col: hi.col_display,\n-                            is_primary: span_label.is_primary,\n-                            label: span_label\n-                                .label\n-                                .as_ref()\n-                                .map(|m| emitter.translate_message(m, args).to_string()),\n-                            annotation_type: AnnotationType::Singleline,\n-                        };\n-                        add_annotation_to_file(&mut output, lo.file, lo.line, ann);\n-                    }\n-                    continue;\n+                let lo = sm.lookup_char_pos(span.lo());\n+                let mut hi = sm.lookup_char_pos(span.hi());\n+\n+                // Watch out for \"empty spans\". If we get a span like 6..6, we\n+                // want to just display a `^` at 6, so convert that to\n+                // 6..7. This is degenerate input, but it's best to degrade\n+                // gracefully -- and the parser likes to supply a span like\n+                // that for EOF, in particular.\n+\n+                if lo.col_display == hi.col_display && lo.line == hi.line {\n+                    hi.col_display += 1;\n                 }\n \n-                let (lo, hi) = fixup_lo_hi(span_label.span);\n+                let label = label.as_ref().map(|m| emitter.translate_message(m, args).to_string());\n \n                 if lo.line != hi.line {\n                     let ml = MultilineAnnotation {\n@@ -2257,23 +2285,17 @@ impl FileWithAnnotatedLines {\n                         line_end: hi.line,\n                         start_col: lo.col_display,\n                         end_col: hi.col_display,\n-                        is_primary: span_label.is_primary,\n-                        label: span_label\n-                            .label\n-                            .as_ref()\n-                            .map(|m| emitter.translate_message(m, args).to_string()),\n+                        is_primary,\n+                        label,\n                         overlaps_exactly: false,\n                     };\n                     multiline_annotations.push((lo.file, ml));\n                 } else {\n                     let ann = Annotation {\n                         start_col: lo.col_display,\n                         end_col: hi.col_display,\n-                        is_primary: span_label.is_primary,\n-                        label: span_label\n-                            .label\n-                            .as_ref()\n-                            .map(|m| emitter.translate_message(m, args).to_string()),\n+                        is_primary,\n+                        label,\n                         annotation_type: AnnotationType::Singleline,\n                     };\n                     add_annotation_to_file(&mut output, lo.file, lo.line, ann);"}, {"sha": "1b03bc3af9c72d8c4fbbc0d84141233aedf7b078", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-81899.rs:11:5\n    |\n-LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                        -------------- inside `_CONST` at $DIR/issue-81899.rs:4:24\n-...\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:11:5\n+   |\n+note: inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>`\n+  --> $DIR/issue-81899.rs:11:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:11:5\n-   |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+note: inside `_CONST`\n+  --> $DIR/issue-81899.rs:4:24\n    |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   |                        ^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "a5a571c6d4df09036758caf0ffe792cba65a8e02", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-minimal-example.rs:10:5\n    |\n-LL | const _CONST: &() = &f(&|_| {});\n-   |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:3:22\n-...\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n+   |\n+note: inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>`\n+  --> $DIR/issue-88434-minimal-example.rs:10:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+note: inside `_CONST`\n+  --> $DIR/issue-88434-minimal-example.rs:3:22\n    |\n+LL | const _CONST: &() = &f(&|_| {});\n+   |                      ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "00023c459a8e7228b6e5c4bcd3250debddb2c507", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n    |\n-LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n-...\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n+   |\n+note: inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>`\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+note: inside `_CONST`\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n    |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   |                        ^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "bf1b411ee7ccfdffe5485386a183c7ac81dd9376", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,15 +2,18 @@ error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     size_of called on unsized type `dyn Debug`\n-   |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ size_of called on unsized type `dyn Debug`\n+   |\n+note: inside `std::mem::size_of::<dyn Debug>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-  ::: $DIR/issue-80742.rs:22:10\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `Inline::<dyn Debug>::{constant#0}`\n+  --> $DIR/issue-80742.rs:22:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:22:10\n+   |          ^^^^^^^^^^^^^^\n \n error[E0599]: the function or associated item `new` exists for struct `Inline<dyn Debug>`, but its trait bounds were not satisfied\n   --> $DIR/issue-80742.rs:30:36\n@@ -33,15 +36,18 @@ error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     size_of called on unsized type `dyn Debug`\n-   |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ size_of called on unsized type `dyn Debug`\n+   |\n+note: inside `std::mem::size_of::<dyn Debug>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-  ::: $DIR/issue-80742.rs:14:10\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `Inline::<dyn Debug>::{constant#0}`\n+  --> $DIR/issue-80742.rs:14:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:14:10\n+   |          ^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/issue-80742.rs:30:15"}, {"sha": "d4b486376cac822ddf8dd2dc2f7825755b1773f1", "filename": "src/test/ui/const-generics/issues/issue-100313.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-100313.rs:10:13\n    |\n+LL |             *(B as *const bool as *mut bool) = false;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ writing to alloc7 which is read-only\n+   |\n+note: inside `T::<&true>::set_false`\n+  --> $DIR/issue-100313.rs:10:13\n+   |\n LL |             *(B as *const bool as *mut bool) = false;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |             |\n-   |             writing to alloc7 which is read-only\n-   |             inside `T::<&true>::set_false` at $DIR/issue-100313.rs:10:13\n-...\n+note: inside `_`\n+  --> $DIR/issue-100313.rs:18:5\n+   |\n LL |     x.set_false();\n-   |     ------------- inside `_` at $DIR/issue-100313.rs:18:5\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "563f3ffd6744f0650cab1cd129d4688a99440c0f", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 110, "deletions": 77, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,43 +2,52 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:18:34\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S0`\n+  --> $DIR/forbidden_slices.rs:18:34\n    |\n LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:18:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, ()>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:19:33\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S1`\n+  --> $DIR/forbidden_slices.rs:19:33\n    |\n LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:19:33\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:22:34\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S2`\n+  --> $DIR/forbidden_slices.rs:22:34\n    |\n LL | pub static S2: &[u32] = unsafe { from_raw_parts(&D0, 2) };\n-   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:22:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:25:1\n@@ -89,72 +98,85 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n-  ::: $DIR/forbidden_slices.rs:43:5\n+note: inside `std::slice::from_raw_parts::<'_, u64>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S8`\n+  --> $DIR/forbidden_slices.rs:43:5\n    |\n LL |     from_raw_parts(ptr, 1)\n-   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:43:5\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:46:34\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R0`\n+  --> $DIR/forbidden_slices.rs:46:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:46:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const ()>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, ()>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:47:33\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R1`\n+  --> $DIR/forbidden_slices.rs:47:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:47:33\n-   |\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const u32>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-...\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::add`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:50:25\n+LL |         unsafe { self.offset(count as isize) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R2`\n+  --> $DIR/forbidden_slices.rs:50:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n-   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:50:25\n+   |                         ^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:52:1\n@@ -204,57 +226,68 @@ LL | pub static R7: &[u16] = unsafe {\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const u64>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-...\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u64>::add`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:74:25\n+LL |         unsafe { self.offset(count as isize) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R8`\n+  --> $DIR/forbidden_slices.rs:74:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n-   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:74:25\n+   |                         ^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:79:34\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R9`\n+  --> $DIR/forbidden_slices.rs:79:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n-   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:79:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:80:35\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R10`\n+  --> $DIR/forbidden_slices.rs:80:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n-   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:80:35\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}, {"sha": "43529d57f4021aabc40869804ed85b177fece5ac", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 110, "deletions": 77, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,43 +2,52 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:18:34\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S0`\n+  --> $DIR/forbidden_slices.rs:18:34\n    |\n LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:18:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, ()>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:19:33\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S1`\n+  --> $DIR/forbidden_slices.rs:19:33\n    |\n LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:19:33\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `std::slice::from_raw_parts::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:22:34\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S2`\n+  --> $DIR/forbidden_slices.rs:22:34\n    |\n LL | pub static S2: &[u32] = unsafe { from_raw_parts(&D0, 2) };\n-   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:22:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:25:1\n@@ -89,72 +98,85 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |         &*ptr::slice_from_raw_parts(data, len)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |\n-  ::: $DIR/forbidden_slices.rs:43:5\n+note: inside `std::slice::from_raw_parts::<'_, u64>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |\n+LL |         &*ptr::slice_from_raw_parts(data, len)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `S8`\n+  --> $DIR/forbidden_slices.rs:43:5\n    |\n LL |     from_raw_parts(ptr, 1)\n-   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:43:5\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:46:34\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R0`\n+  --> $DIR/forbidden_slices.rs:46:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:46:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const ()>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, ()>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:47:33\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R1`\n+  --> $DIR/forbidden_slices.rs:47:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:47:33\n-   |\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const u32>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-...\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::add`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:50:25\n+LL |         unsafe { self.offset(count as isize) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R2`\n+  --> $DIR/forbidden_slices.rs:50:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n-   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:50:25\n+   |                         ^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:52:1\n@@ -204,57 +226,68 @@ LL | pub static R7: &[u16] = unsafe {\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const u64>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-...\n-LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u64>::add`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:74:25\n+LL |         unsafe { self.offset(count as isize) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R8`\n+  --> $DIR/forbidden_slices.rs:74:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n-   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:74:25\n+   |                         ^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:79:34\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R9`\n+  --> $DIR/forbidden_slices.rs:79:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n-   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:79:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from_unsigned` called on pointers into different allocations\n    |\n-  ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `from_ptr_range::<'_, u32>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-  ::: $DIR/forbidden_slices.rs:80:35\n+LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `R10`\n+  --> $DIR/forbidden_slices.rs:80:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n-   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:80:35\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}, {"sha": "bca29b4688136542bae551591938a27e90fa9de1", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,53 +2,62 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:12:33\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `_READ`\n+  --> $DIR/out_of_bounds_read.rs:12:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:12:33\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |\n-  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:13:39\n+LL |         unsafe { read(self) }\n+   |                  ^^^^^^^^^^\n+note: inside `_CONST_READ`\n+  --> $DIR/out_of_bounds_read.rs:13:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:13:39\n+   |                                       ^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::mut_ptr::<impl *mut u32>::read`\n+  --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-   |\n-  ::: $DIR/out_of_bounds_read.rs:14:37\n+   |                  ^^^^^^^^^^\n+note: inside `_MUT_READ`\n+  --> $DIR/out_of_bounds_read.rs:14:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:14:37\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0734f479f9897b41a2190df93da3462fab41698e", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,26 +1,36 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n+LL |     x(y)\n+   |     ^^^^ calling non-const function `double`\n+   |\n+note: inside `bar`\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n+   |\n LL |     x(y)\n    |     ^^^^\n-   |     |\n-   |     calling non-const function `double`\n-   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:9:5\n-...\n+note: inside `Y`\n+  --> $DIR/const_fn_ptr_fail2.rs:14:18\n+   |\n LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n-   |                  --------- inside `Y` at $DIR/const_fn_ptr_fail2.rs:14:18\n+   |                  ^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_fn_ptr_fail2.rs:9:5\n    |\n+LL |     x(y)\n+   |     ^^^^ calling non-const function `double`\n+   |\n+note: inside `bar`\n+  --> $DIR/const_fn_ptr_fail2.rs:9:5\n+   |\n LL |     x(y)\n    |     ^^^^\n-   |     |\n-   |     calling non-const function `double`\n-   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:9:5\n-...\n+note: inside `Z`\n+  --> $DIR/const_fn_ptr_fail2.rs:15:18\n+   |\n LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n-   |                  -------------- inside `Z` at $DIR/const_fn_ptr_fail2.rs:15:18\n+   |                  ^^^^^^^^^^^^^^\n \n warning: skipping const checks\n    |"}, {"sha": "846458176d6fd79fc1fb710ace41c55912adc867", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_track_caller.rs:15:5\n    |\n+LL |     b()\n+   |     ^^^ the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:15:5\n+   |\n+note: inside `c`\n+  --> $DIR/const_panic_track_caller.rs:15:5\n+   |\n LL |     b()\n    |     ^^^\n-   |     |\n-   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:15:5\n-   |     inside `c` at $DIR/const_panic_track_caller.rs:15:5\n-...\n+note: inside `X`\n+  --> $DIR/const_panic_track_caller.rs:21:16\n+   |\n LL | const X: u32 = c();\n-   |                --- inside `X` at $DIR/const_panic_track_caller.rs:21:16\n+   |                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "8f3b3d5f700a22c037f5519126495dd722befa7d", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/alloc_intrinsic_errors.rs:9:17\n    |\n-LL | const FOO: i32 = foo();\n-   |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:6:18\n-...\n+LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ align has to be a power of 2, `3` is not a power of 2\n+   |\n+note: inside `foo`\n+  --> $DIR/alloc_intrinsic_errors.rs:9:17\n+   |\n LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 align has to be a power of 2, `3` is not a power of 2\n-   |                 inside `foo` at $DIR/alloc_intrinsic_errors.rs:9:17\n+note: inside `FOO`\n+  --> $DIR/alloc_intrinsic_errors.rs:6:18\n+   |\n+LL | const FOO: i32 = foo();\n+   |                  ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "759ce15ab1b5d30e74961ac7077802d0f0d8317e", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,15 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/unwind-abort.rs:4:5\n    |\n+LL |     panic!()\n+   |     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:4:5\n+   |\n+note: inside `foo`\n+  --> $DIR/unwind-abort.rs:4:5\n+   |\n LL |     panic!()\n    |     ^^^^^^^^\n-   |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:4:5\n-   |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n-...\n-LL | const _: () = foo();\n-   |               ----- inside `_` at $DIR/unwind-abort.rs:7:15\n+note: inside `_`\n+  --> $DIR/unwind-abort.rs:7:15\n    |\n+LL | const _: () = foo();\n+   |               ^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "9710bf476ecc913b26808998c73240d9bad37f3f", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -13,14 +13,19 @@ LL |     unsafe { std::mem::transmute(()) }\n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |\n+note: inside `foo`\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n+   |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n-...\n+note: inside `FOO`\n+  --> $DIR/validate_uninhabited_zsts.rs:19:33\n+   |\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n-   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:19:33\n+   |                                 ^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_uninhabited_zsts.rs:21:1"}, {"sha": "9710bf476ecc913b26808998c73240d9bad37f3f", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -13,14 +13,19 @@ LL |     unsafe { std::mem::transmute(()) }\n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+   |\n+note: inside `foo`\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n+   |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n-...\n+note: inside `FOO`\n+  --> $DIR/validate_uninhabited_zsts.rs:19:33\n+   |\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n-   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:19:33\n+   |                                 ^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_uninhabited_zsts.rs:21:1"}, {"sha": "195a087ffa5b0aad0c0c8abd0e41b7885cf29fd2", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 52, "deletions": 36, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,39 +1,47 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n+note: inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32` at $SRC_DIR/core/src/panic.rs:LL:COL\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits` at $SRC_DIR/core/src/num/f32.rs:LL:COL\n+note: inside `core::f32::<impl f32>::to_bits`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:28:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f32::MASKED_NAN1`\n+  --> $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n LL |     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n-   |                              ------------------ inside `f32::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:28:30\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n+note: inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32` at $SRC_DIR/core/src/panic.rs:LL:COL\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits` at $SRC_DIR/core/src/num/f32.rs:LL:COL\n+note: inside `core::f32::<impl f32>::to_bits`\n+  --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:30:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f32::MASKED_NAN2`\n+  --> $DIR/const-float-bits-reject-conv.rs:30:30\n    |\n LL |     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n-   |                              ------------------ inside `f32::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:30:30\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used\n@@ -63,39 +71,47 @@ LL |     const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n+note: inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64` at $SRC_DIR/core/src/panic.rs:LL:COL\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits` at $SRC_DIR/core/src/num/f64.rs:LL:COL\n+note: inside `core::f64::<impl f64>::to_bits`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:50:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f64::MASKED_NAN1`\n+  --> $DIR/const-float-bits-reject-conv.rs:50:30\n    |\n LL |     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n-   |                              ------------------ inside `f64::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:50:30\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n+LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n+note: inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |\n LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a NaN\")\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64` at $SRC_DIR/core/src/panic.rs:LL:COL\n-...\n-LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits` at $SRC_DIR/core/src/num/f64.rs:LL:COL\n+note: inside `core::f64::<impl f64>::to_bits`\n+  --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n    |\n-  ::: $DIR/const-float-bits-reject-conv.rs:52:30\n+LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `f64::MASKED_NAN2`\n+  --> $DIR/const-float-bits-reject-conv.rs:52:30\n    |\n LL |     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n-   |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:52:30\n-   |\n+   |                              ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used"}, {"sha": "6e110dbdd6417dd5f87e0f8e845437e592dd6d6f", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: evaluation of constant value failed\n   --> $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n    |\n+LL |     Some(&mut *(42 as *mut i32))\n+   |          ^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n+   |\n+note: inside `helper`\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n+   |\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n-   |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n-...\n+note: inside `A`\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:18:29\n+   |\n LL | const A: Option<&mut i32> = helper();\n-   |                             -------- inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:18:29\n+   |                             ^^^^^^^^\n \n error: encountered dangling pointer in final constant\n   --> $DIR/mut_ref_in_final_dynamic_check.rs:25:1"}, {"sha": "cbc7cac937ae1b5b945e34a8c4f411780f26bd70", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,18 +2,23 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n LL |         intrinsics::unreachable()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         entering unreachable code\n-   |         inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+   |\n+note: inside `unreachable_unchecked`\n+  --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n-  ::: $DIR/const_unsafe_unreachable_ub.rs:6:18\n+LL |         intrinsics::unreachable()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `foo`\n+  --> $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |\n LL |         false => std::hint::unreachable_unchecked(),\n-   |                  ---------------------------------- inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:6:18\n-...\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `BAR`\n+  --> $DIR/const_unsafe_unreachable_ub.rs:10:28\n+   |\n LL | const BAR: bool = unsafe { foo(false) };\n-   |                            ---------- inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:10:28\n+   |                            ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2603a73583ebda4b6b007a9668a8ece944b3c545", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -32,20 +32,23 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         accessing memory with alignment 1, but alignment 4 is required\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment 1, but alignment 4 is required\n    |\n-  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/detect-extra-ub.rs:38:9\n+LL |         unsafe { read(self) }\n+   |                  ^^^^^^^^^^\n+note: inside `INNER`\n+  --> $DIR/detect-extra-ub.rs:38:9\n    |\n LL |         ptr.read();\n-   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:38:9\n+   |         ^^^^^^^^^^\n \n note: erroneous constant used\n   --> $DIR/detect-extra-ub.rs:32:5"}, {"sha": "1f82e1777af5bf43de2242ccd75029923cf5fc71", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,23 +2,25 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         unable to copy parts of a pointer from memory at ALLOC\n-   |         inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to copy parts of a pointer from memory at ALLOC\n    |\n-  ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n+   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+note: inside `std::ptr::read::<u8>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ptr::const_ptr::<impl *const u8>::read`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/issue-miri-1910.rs:8:5\n+LL |         unsafe { read(self) }\n+   |                  ^^^^^^^^^^\n+note: inside `C`\n+  --> $DIR/issue-miri-1910.rs:8:5\n    |\n LL |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n-   |     ------------------------------------------------------------------- inside `C` at $DIR/issue-miri-1910.rs:8:5\n-   |\n-   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n-   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cf3fd88d0342e06c15700d8e46ea2ad669b4add0", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,14 +1,19 @@\n error[E0080]: could not evaluate static initializer\n   --> $DIR/abi-mismatch.rs:9:5\n    |\n+LL |     my_fn();\n+   |     ^^^^^^^ calling a function with calling convention C using calling convention Rust\n+   |\n+note: inside `call_rust_fn`\n+  --> $DIR/abi-mismatch.rs:9:5\n+   |\n LL |     my_fn();\n    |     ^^^^^^^\n-   |     |\n-   |     calling a function with calling convention C using calling convention Rust\n-   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:9:5\n-...\n+note: inside `VAL`\n+  --> $DIR/abi-mismatch.rs:15:18\n+   |\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:15:18\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n    |"}, {"sha": "b26f121dba0612946658cb27fc97dbf5dddaa642", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,17 +1,24 @@\n error[E0080]: evaluation of `<std::string::String as Bar<std::vec::Vec<u32>, std::string::String>>::F` failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `<Vec<u32> as Drop>::drop`\n+   |\n+note: inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | calling non-const function `<Vec<u32> as Drop>::drop`\n-   | inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   | inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/assoc_const.rs:12:31\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `<String as Bar<Vec<u32>, String>>::F`\n+  --> $DIR/assoc_const.rs:12:31\n    |\n LL |     const F: u32 = (U::X, 42).1;\n-   |                               - inside `<String as Bar<Vec<u32>, String>>::F` at $DIR/assoc_const.rs:12:31\n+   |                               ^\n \n note: erroneous constant used\n   --> $DIR/assoc_const.rs:29:13"}, {"sha": "e2e2f16d5a02500fc5d03ffd14412dc9e2be89ef", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,15 +2,18 @@ error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | calling non-const function `<Vec<i32> as Drop>::drop`\n-   | inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `<Vec<i32> as Drop>::drop`\n+   |\n+note: inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/drop.rs:17:1\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `TEST_BAD`\n+  --> $DIR/drop.rs:17:1\n    |\n LL | };\n-   | - inside `TEST_BAD` at $DIR/drop.rs:17:1\n+   | ^\n \n warning: skipping const checks\n    |"}, {"sha": "c4930b73aaab8996def56ae74f102f09f8c823a4", "filename": "src/test/ui/consts/missing_span_in_backtrace.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.rs?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n+// normalize-stderr-test \"alloc[0-9]+\" -> \"ALLOC_ID\"\n+\n+#![feature(const_swap)]\n+#![feature(const_mut_refs)]\n+use std::{\n+    mem::{self, MaybeUninit},\n+    ptr,\n+};\n+\n+const X: () = {\n+    let mut ptr1 = &1;\n+    let mut ptr2 = &2;\n+\n+    // Swap them, bytewise.\n+    unsafe {\n+        ptr::swap_nonoverlapping(\n+            &mut ptr1 as *mut _ as *mut MaybeUninit<u8>,\n+            &mut ptr2 as *mut _ as *mut MaybeUninit<u8>,\n+            mem::size_of::<&i32>(),\n+        );\n+    }\n+};\n+\n+fn main() {\n+    X\n+}"}, {"sha": "e6d3d51990dd502f5748ab7e47a583ff961c359e", "filename": "src/test/ui/consts/missing_span_in_backtrace.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -0,0 +1,28 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+   = note: unable to copy parts of a pointer from memory at ALLOC_ID\n+   |\n+   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n+   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+note: inside `std::ptr::read::<MaybeUninit<MaybeUninit<u8>>>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `mem::swap_simple::<MaybeUninit<MaybeUninit<u8>>>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: inside `ptr::swap_nonoverlapping_simple_untyped::<MaybeUninit<u8>>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `swap_nonoverlapping::<MaybeUninit<u8>>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `X`\n+  --> $DIR/missing_span_in_backtrace.rs:17:9\n+   |\n+17 | /         ptr::swap_nonoverlapping(\n+18 | |             &mut ptr1 as *mut _ as *mut MaybeUninit<u8>,\n+19 | |             &mut ptr2 as *mut _ as *mut MaybeUninit<u8>,\n+20 | |             mem::size_of::<&i32>(),\n+21 | |         );\n+   | |_________^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "9578d90ea9d8827762177a1be47df1d3a080745a", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,15 +8,18 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  `ptr_offset_from` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ptr_offset_from` called on pointers into different allocations\n+   |\n+note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_from_ub.rs:24:14\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `NOT_PTR`\n+  --> $DIR/offset_from_ub.rs:24:14\n    |\n LL |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n-   |              ----------------------------------- inside `NOT_PTR` at $DIR/offset_from_ub.rs:24:14\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:31:14\n@@ -88,29 +91,35 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_from_ub.rs:115:14\n+note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OFFSET_VERY_FAR1`\n+  --> $DIR/offset_from_ub.rs:115:14\n    |\n LL |     unsafe { ptr2.offset_from(ptr1) }\n-   |              ---------------------- inside `OFFSET_VERY_FAR1` at $DIR/offset_from_ub.rs:115:14\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_from_ub.rs:121:14\n+note: inside `ptr::const_ptr::<impl *const u8>::offset_from`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OFFSET_VERY_FAR2`\n+  --> $DIR/offset_from_ub.rs:121:14\n    |\n LL |     unsafe { ptr1.offset_from(ptr2.wrapping_offset(1)) }\n-   |              ----------------------------------------- inside `OFFSET_VERY_FAR2` at $DIR/offset_from_ub.rs:121:14\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 15 previous errors\n "}, {"sha": "7938f70a2695ed60f43b0123a4177340da9b5902", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 108, "deletions": 72, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,169 +2,205 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   |\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:7:46\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `BEFORE_START`\n+  --> $DIR/offset_ub.rs:7:46\n    |\n LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1) };\n-   |                                              ------------------------------ inside `BEFORE_START` at $DIR/offset_ub.rs:7:46\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:8:43\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `AFTER_END`\n+  --> $DIR/offset_ub.rs:8:43\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n-   |                                           ----------------------------- inside `AFTER_END` at $DIR/offset_ub.rs:8:43\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:9:45\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `AFTER_ARRAY`\n+  --> $DIR/offset_ub.rs:9:45\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n-   |                                             ------------------------------- inside `AFTER_ARRAY` at $DIR/offset_ub.rs:9:45\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   |\n+note: inside `ptr::const_ptr::<impl *const u16>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:11:43\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OVERFLOW`\n+  --> $DIR/offset_ub.rs:11:43\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n-   |                                           ------------------------------------- inside `OVERFLOW` at $DIR/offset_ub.rs:11:43\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n-  ::: $DIR/offset_ub.rs:12:44\n+note: inside `ptr::const_ptr::<impl *const u16>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `UNDERFLOW`\n+  --> $DIR/offset_ub.rs:12:44\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n-   |                                            ------------------------------------- inside `UNDERFLOW` at $DIR/offset_ub.rs:12:44\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n-  ::: $DIR/offset_ub.rs:13:56\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `OVERFLOW_ADDRESS_SPACE`\n+  --> $DIR/offset_ub.rs:13:56\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n-   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:56\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+   |\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:14:57\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `UNDERFLOW_ADDRESS_SPACE`\n+  --> $DIR/offset_ub.rs:14:57\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n-   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:57\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:15:49\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `NEGATIVE_OFFSET`\n+  --> $DIR/offset_ub.rs:15:49\n    |\n LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) };\n-   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET` at $DIR/offset_ub.rs:15:49\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |\n-  ::: $DIR/offset_ub.rs:17:50\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `ZERO_SIZED_ALLOC`\n+  --> $DIR/offset_ub.rs:17:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n-   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:17:50\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n+   |\n+note: inside `ptr::mut_ptr::<impl *mut u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:18:42\n+LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `DANGLING`\n+  --> $DIR/offset_ub.rs:18:42\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n-   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:18:42\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_ub.rs:21:50\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `NULL_OFFSET_ZERO`\n+  --> $DIR/offset_ub.rs:21:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n-   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:21:50\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n    |\n-  ::: $DIR/offset_ub.rs:24:47\n+note: inside `ptr::const_ptr::<impl *const u8>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `UNDERFLOW_ABS`\n+  --> $DIR/offset_ub.rs:24:47\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n-   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:24:47\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "274753ef1bc234c4a5cae52520870ec906aa6085", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,15 +2,18 @@ error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n+   |\n+note: inside `ptr::const_ptr::<impl *const usize>::offset`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/ptr_comparisons.rs:50:34\n+LL |         unsafe { intrinsics::offset(self, count) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `_`\n+  --> $DIR/ptr_comparisons.rs:50:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:50:34\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/ptr_comparisons.rs:53:33"}, {"sha": "60ce64d2a1e0f4dd864a8d565bc61cd13718cfc7", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -12,15 +12,24 @@ LL |     f(x);\n error[E0080]: evaluation of constant value failed\n   --> $DIR/recursive.rs:4:5\n    |\n+LL |     f(x);\n+   |     ^^^^ reached the configured maximum number of stack frames\n+   |\n+note: inside `f::<i32>`\n+  --> $DIR/recursive.rs:4:5\n+   |\n LL |     f(x);\n    |     ^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n-   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n-...\n+note: [... 126 additional calls inside `f::<i32>` ...]\n+  --> $DIR/recursive.rs:4:5\n+   |\n+LL |     f(x);\n+   |     ^^^^\n+note: inside `X`\n+  --> $DIR/recursive.rs:8:15\n+   |\n LL | const X: () = f(1);\n-   |               ---- inside `X` at $DIR/recursive.rs:8:15\n+   |               ^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "3a94e19313f6c52b719ead4dddf54b6e1872822c", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 640, "deletions": 135, "changes": 775, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,144 +1,649 @@\n error[E0080]: evaluation of `<i32 as Const>::CONSTANT` failed\n   --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^ reached the configured maximum number of stack frames\n+   |\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n LL |     hint_unreachable()\n    |     ^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-...\n-LL |     fake_type()\n-   |     -----------\n-   |     |\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-...\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<!>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+note: inside `fake_type::<i32>`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n+note: inside `<i32 as Const>::CONSTANT`\n+  --> $DIR/uninhabited-const-issue-61744.rs:12:36\n+   |\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |                                    ----------- inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:12:36\n+   |                                    ^^^^^^^^^^^\n \n note: erroneous constant used\n   --> $DIR/uninhabited-const-issue-61744.rs:18:10"}, {"sha": "53b603a47b5516a7d2f6800ed980e593c16bbf0f", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 640, "deletions": 135, "changes": 775, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,143 +2,648 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/infinite-recursion-const-fn.rs:4:5\n    |\n LL |     b()\n+   |     ^^^ reached the configured maximum number of stack frames\n+   |\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n    |     ^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-...\n-LL |     a()\n-   |     ---\n-   |     |\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-LL | }\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `b`\n+  --> $DIR/infinite-recursion-const-fn.rs:7:5\n+   |\n+LL |     a()\n+   |     ^^^\n+note: inside `a`\n+  --> $DIR/infinite-recursion-const-fn.rs:4:5\n+   |\n+LL |     b()\n+   |     ^^^\n+note: inside `ARR::{constant#0}`\n+  --> $DIR/infinite-recursion-const-fn.rs:9:18\n+   |\n LL | const ARR: [i32; a()] = [5; 6];\n-   |                  --- inside `ARR::{constant#0}` at $DIR/infinite-recursion-const-fn.rs:9:18\n+   |                  ^^^\n \n error: aborting due to previous error\n "}, {"sha": "f17f8141b909a442c7897f818c30e2090c90df23", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -2,12 +2,18 @@ error[E0080]: values of the type `[u8; SIZE]` are too big for the current archit\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ inside `std::mem::size_of::<[u8; SIZE]>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-  ::: $DIR/issue-55878.rs:7:26\n+note: inside `std::mem::size_of::<[u8; SIZE]>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: inside `main`\n+  --> $DIR/issue-55878.rs:7:26\n    |\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n-   |                          ---------------------------------------------- inside `main` at $DIR/issue-55878.rs:7:26\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n note: erroneous constant used\n   --> $DIR/issue-55878.rs:7:26"}, {"sha": "f187d0efa8451abe60bfae1fe0f013ac6439b06d", "filename": "src/test/ui/span/issue-71363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n+// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n \n struct MyError;\n impl std::error::Error for MyError {}"}, {"sha": "0370e46e6ceb749c82ae6166a7de3f06aaff7da6", "filename": "src/test/ui/span/issue-71363.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -7,6 +7,9 @@ error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n+ --> $SRC_DIR/core/src/error.rs:LL:COL\n+  |\n+  = note: required by this bound in `std::error::Error`\n \n error[E0277]: `MyError` doesn't implement `Debug`\n  --> $DIR/issue-71363.rs:4:6\n@@ -17,6 +20,9 @@ error[E0277]: `MyError` doesn't implement `Debug`\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n note: required by a bound in `std::error::Error`\n+ --> $SRC_DIR/core/src/error.rs:LL:COL\n+  |\n+  = note: required by this bound in `std::error::Error`\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n 3 | #[derive(Debug)]"}, {"sha": "1542b1c17ad112006df87805d19e354b82bd6fc8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -3542,6 +3542,8 @@ impl<'test> TestCx<'test> {\n             option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n             // Virtual `/rustc/$sha` coming from download-rustc:\n             std::env::var_os(\"FAKE_DOWNLOAD_RUSTC_PREFIX\").map(PathBuf::from),\n+            // Tests using -Zsimulate-remapped-rust-src-base should use this fake path\n+            Some(\"/rustc/FAKE_PREFIX\".into()),\n         ];\n         for base_dir in source_bases {\n             if let Some(base_dir) = base_dir {"}, {"sha": "c22ac50e4557e5fe107d942d46ab384abb495479", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -364,7 +364,9 @@ fn report_msg<'tcx>(\n         if is_local && idx > 0 {\n             err.span_note(frame_info.span, &frame_info.to_string());\n         } else {\n-            err.note(&frame_info.to_string());\n+            let sm = sess.source_map();\n+            let span = sm.span_to_embeddable_string(frame_info.span);\n+            err.note(format!(\"{frame_info} at {span}\"));\n         }\n     }\n "}, {"sha": "2d3275f6b19011eda917967475e5cf9d3c77cc1c", "filename": "src/tools/miri/tests/fail/abort-terminator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -10,7 +10,7 @@ LL | | }\n    | |_^ the program aborted execution\n    |\n    = note: inside `panic_abort` at $DIR/abort-terminator.rs:LL:CC\n-note: inside `main` at $DIR/abort-terminator.rs:LL:CC\n+note: inside `main`\n   --> $DIR/abort-terminator.rs:LL:CC\n    |\n LL |     panic_abort();"}, {"sha": "095eeeb79de7b2d4e58ec72f945f85fbee7d4cd5", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-alignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/deallocate-bad-alignment.rs:LL:CC\n+note: inside `main`\n   --> $DIR/deallocate-bad-alignment.rs:LL:CC\n    |\n LL |         dealloc(x, Layout::from_size_align_unchecked(1, 2));"}, {"sha": "5fe93c841b22c80c963456a3f77fe230a29ee89b", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/deallocate-bad-size.rs:LL:CC\n+note: inside `main`\n   --> $DIR/deallocate-bad-size.rs:LL:CC\n    |\n LL |         dealloc(x, Layout::from_size_align_unchecked(2, 1));"}, {"sha": "fa7a74ee13cfe64cb12d27181463715ef1c92767", "filename": "src/tools/miri/tests/fail/alloc/deallocate-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/deallocate-twice.rs:LL:CC\n+note: inside `main`\n   --> $DIR/deallocate-twice.rs:LL:CC\n    |\n LL |         dealloc(x, Layout::from_size_align_unchecked(1, 1));"}, {"sha": "62ffb8142a3fb36c971153894af5f7734c4cbd8f", "filename": "src/tools/miri/tests/fail/alloc/global_system_mixup.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -9,7 +9,7 @@ LL |         FREE();\n    = note: BACKTRACE:\n    = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc` at RUSTLIB/std/src/sys/PLATFORM/alloc.rs:LL:CC\n    = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate` at RUSTLIB/std/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/global_system_mixup.rs:LL:CC\n+note: inside `main`\n   --> $DIR/global_system_mixup.rs:LL:CC\n    |\n LL |         System.deallocate(ptr, l);"}, {"sha": "24cabb395649c21766fd4234f7a89826ff9a846e", "filename": "src/tools/miri/tests/fail/alloc/reallocate-bad-size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/reallocate-bad-size.rs:LL:CC\n+note: inside `main`\n   --> $DIR/reallocate-bad-size.rs:LL:CC\n    |\n LL |         let _y = realloc(x, Layout::from_size_align_unchecked(2, 1), 1);"}, {"sha": "b1460bfb763eed3d219accd982bdfbef528c11b8", "filename": "src/tools/miri/tests/fail/alloc/reallocate-dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/reallocate-dangling.rs:LL:CC\n+note: inside `main`\n   --> $DIR/reallocate-dangling.rs:LL:CC\n    |\n LL |         let _z = realloc(x, Layout::from_size_align_unchecked(1, 1), 1);"}, {"sha": "b1636050a78ca70972762891a49342f57d66049c", "filename": "src/tools/miri/tests/fail/alloc/stack_free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -12,7 +12,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside `main` at $DIR/stack_free.rs:LL:CC\n+note: inside `main`\n   --> $DIR/stack_free.rs:LL:CC\n    |\n LL |     drop(bad_box);"}, {"sha": "f57b52c4bda7a14943ba15cc87f305851f85c4d6", "filename": "src/tools/miri/tests/fail/box-cell-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     let res = helper(val, ptr);\n    |                      ^^^\n    = note: BACKTRACE:\n    = note: inside `helper` at $DIR/box-cell-alias.rs:LL:CC\n-note: inside `main` at $DIR/box-cell-alias.rs:LL:CC\n+note: inside `main`\n   --> $DIR/box-cell-alias.rs:LL:CC\n    |\n LL |     let res = helper(val, ptr);"}, {"sha": "7b297b260d87ab2ce141265147188e8a195132ce", "filename": "src/tools/miri/tests/fail/concurrency/windows_join_detached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -10,7 +10,7 @@ LL |         let rc = unsafe { c::WaitForSingleObject(self.handle.as_raw_handle(\n    = note: inside `std::sys::PLATFORM::thread::Thread::join` at RUSTLIB/std/src/sys/PLATFORM/thread.rs:LL:CC\n    = note: inside `std::thread::JoinInner::<'_, ()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n    = note: inside `std::thread::JoinHandle::<()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n-note: inside `main` at $DIR/windows_join_detached.rs:LL:CC\n+note: inside `main`\n   --> $DIR/windows_join_detached.rs:LL:CC\n    |\n LL |     thread.join().unwrap();"}, {"sha": "1e7dfaa7499041851561a4da9b354f1b33b6dd95", "filename": "src/tools/miri/tests/fail/crates/tokio_mvp.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fcrates%2Ftokio_mvp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fcrates%2Ftokio_mvp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fcrates%2Ftokio_mvp.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -6,7 +6,7 @@ LL |         let res = syscall!(epoll_create1(libc::EPOLL_CLOEXEC));\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-note: inside `main` at $DIR/tokio_mvp.rs:LL:CC\n+note: inside `main`\n   --> $DIR/tokio_mvp.rs:LL:CC\n    |\n LL | #[tokio::main]"}, {"sha": "2ba8116cadc247ca710e303e2a2b2fd529c2cfd7", "filename": "src/tools/miri/tests/fail/dangling_pointers/storage_dead_dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { &mut *(LEAK as *mut i32) };\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `evil` at $DIR/storage_dead_dangling.rs:LL:CC\n-note: inside `main` at $DIR/storage_dead_dangling.rs:LL:CC\n+note: inside `main`\n   --> $DIR/storage_dead_dangling.rs:LL:CC\n    |\n LL |     evil();"}, {"sha": "0075f877b29dc9b12fb6afceaaaaad85a6e91938", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL | }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `race` at $DIR/stack_pop_race.rs:LL:CC\n-note: inside `main` at $DIR/stack_pop_race.rs:LL:CC\n+note: inside `main`\n   --> $DIR/stack_pop_race.rs:LL:CC\n    |\n LL |     race(0);"}, {"sha": "484f703f9c1b52dba2f20f664a4a73eb45174e99", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.both.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -11,7 +11,7 @@ LL | | }\n    | |_^ the program aborted execution\n    |\n    = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n-note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+note: inside `main`\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL |     unsafe { nounwind() }"}, {"sha": "484f703f9c1b52dba2f20f664a4a73eb45174e99", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.definition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -11,7 +11,7 @@ LL | | }\n    | |_^ the program aborted execution\n    |\n    = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n-note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+note: inside `main`\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL |     unsafe { nounwind() }"}, {"sha": "80c5794736a9f9b1bcc309e3262cd4482bf8902d", "filename": "src/tools/miri/tests/fail/generator-pinned-moved.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fgenerator-pinned-moved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fgenerator-pinned-moved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fgenerator-pinned-moved.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,13 +8,13 @@ LL |         *num += 1;\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside closure at $DIR/generator-pinned-moved.rs:LL:CC\n-note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]> as std::iter::Iterator>::next` at $DIR/generator-pinned-moved.rs:LL:CC\n+note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]> as std::iter::Iterator>::next`\n   --> $DIR/generator-pinned-moved.rs:LL:CC\n    |\n LL |         match me.resume(()) {\n    |               ^^^^^^^^^^^^^\n    = note: inside `<std::boxed::Box<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]>> as std::iter::Iterator>::next` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n-note: inside `main` at $DIR/generator-pinned-moved.rs:LL:CC\n+note: inside `main`\n   --> $DIR/generator-pinned-moved.rs:LL:CC\n    |\n LL |     generator_iterator_2.next(); // and use moved value"}, {"sha": "5c73c76a1613d3119ca8eae60cf92dcc880d6d1b", "filename": "src/tools/miri/tests/fail/intrinsics/simd-float-to-int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |         unsafe { intrinsics::simd_cast(self) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::simd::Simd::<f32, 2>::to_int_unchecked::<i32>` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n-note: inside `main` at $DIR/simd-float-to-int.rs:LL:CC\n+note: inside `main`\n   --> $DIR/simd-float-to-int.rs:LL:CC\n    |\n LL |         let _x: i32x2 = f32x2::from_array([f32::MAX, f32::MIN]).to_int_unchecked();"}, {"sha": "7512d57f6720e3836a21d8044882923fe665169f", "filename": "src/tools/miri/tests/fail/intrinsics/simd-gather.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |         unsafe { intrinsics::simd_gather(or, ptrs, enable.to_int()) }\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::simd::Simd::<i8, 4>::gather_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n-note: inside `main` at $DIR/simd-gather.rs:LL:CC\n+note: inside `main`\n   --> $DIR/simd-gather.rs:LL:CC\n    |\n LL |         let _result = Simd::gather_select_unchecked(&vec, Mask::splat(true), idxs, Simd::splat(0));"}, {"sha": "a9ad60a0e5be2218a57b1a29b5b5cf5afbfccd1f", "filename": "src/tools/miri/tests/fail/intrinsics/simd-scatter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |             intrinsics::simd_scatter(self, ptrs, enable.to_int())\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::simd::Simd::<i8, 4>::scatter_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n-note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n+note: inside `main`\n   --> $DIR/simd-scatter.rs:LL:CC\n    |\n LL | /         Simd::from_array([-27, 82, -41, 124]).scatter_select_unchecked("}, {"sha": "f1cb50ab9be788b384ed98693b0812f7baa2142c", "filename": "src/tools/miri/tests/fail/issue-miri-1112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-1112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-1112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-1112.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |         let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj)\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `FunnyPointer::from_data_ptr` at $DIR/issue-miri-1112.rs:LL:CC\n-note: inside `main` at $DIR/issue-miri-1112.rs:LL:CC\n+note: inside `main`\n   --> $DIR/issue-miri-1112.rs:LL:CC\n    |\n LL |         let _raw: &FunnyPointer = FunnyPointer::from_data_ptr(&hello, &meta as *const _);"}, {"sha": "413172b25464a683451b6652cced69565b029d4c", "filename": "src/tools/miri/tests/fail/never_transmute_void.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |         match v.0 {}\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `m::f` at $DIR/never_transmute_void.rs:LL:CC\n-note: inside `main` at $DIR/never_transmute_void.rs:LL:CC\n+note: inside `main`\n   --> $DIR/never_transmute_void.rs:LL:CC\n    |\n LL |     m::f(v);"}, {"sha": "5d7f01f4786561ffe5700a2927c47672d56f867a", "filename": "src/tools/miri/tests/fail/panic/bad_unwind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_unwind.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -13,7 +13,7 @@ LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();\n    = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC]>` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::panic::catch_unwind::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panic.rs:LL:CC\n-note: inside `main` at $DIR/bad_unwind.rs:LL:CC\n+note: inside `main`\n   --> $DIR/bad_unwind.rs:LL:CC\n    |\n LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();"}, {"sha": "6bf13f21601503766daadfb984df0585078d9511", "filename": "src/tools/miri/tests/fail/panic/double_panic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -75,13 +75,13 @@ LL |     ABORT();\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-note: inside `<Foo as std::ops::Drop>::drop` at RUSTLIB/std/src/panic.rs:LL:CC\n+note: inside `<Foo as std::ops::Drop>::drop`\n   --> $DIR/double_panic.rs:LL:CC\n    |\n LL |         panic!(\"second\");\n    | ^\n    = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-note: inside `main` at $DIR/double_panic.rs:LL:CC\n+note: inside `main`\n   --> $DIR/double_panic.rs:LL:CC\n    |\n LL | }"}, {"sha": "39ad0d268b94ea9b9e58f515a1b3e467abf32efe", "filename": "src/tools/miri/tests/fail/panic/no_std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -6,7 +6,7 @@ LL |     core::intrinsics::abort();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the program aborted execution\n    |\n    = note: inside `panic_handler` at $DIR/no_std.rs:LL:CC\n-note: inside `start` at RUSTLIB/core/src/panic.rs:LL:CC\n+note: inside `start`\n   --> $DIR/no_std.rs:LL:CC\n    |\n LL |     panic!(\"blarg I am dead\")"}, {"sha": "d25dd7be63596e3761edc033cef1df496d65cfac", "filename": "src/tools/miri/tests/fail/panic/panic_abort1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -12,7 +12,7 @@ LL |                 ABORT();\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n+note: inside `main`\n   --> $DIR/panic_abort1.rs:LL:CC\n    |\n LL |     std::panic!(\"panicking from libstd\");"}, {"sha": "f56d509a697b4661f22c9e9bf092adf87a05bdcc", "filename": "src/tools/miri/tests/fail/panic/panic_abort2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -13,7 +13,7 @@ LL |                 ABORT();\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n+note: inside `main`\n   --> $DIR/panic_abort2.rs:LL:CC\n    |\n LL |     std::panic!(\"{}-panicking from libstd\", 42);"}, {"sha": "43792f769930b6a7964dce2220018619d03cfccc", "filename": "src/tools/miri/tests/fail/panic/panic_abort3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -13,7 +13,7 @@ LL |                 ABORT();\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n+note: inside `main`\n   --> $DIR/panic_abort3.rs:LL:CC\n    |\n LL |     core::panic!(\"panicking from libcore\");"}, {"sha": "89e181bfb276c984a5deb2bb9eee286fbe09d8d5", "filename": "src/tools/miri/tests/fail/panic/panic_abort4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -13,7 +13,7 @@ LL |                 ABORT();\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n+note: inside `main`\n   --> $DIR/panic_abort4.rs:LL:CC\n    |\n LL |     core::panic!(\"{}-panicking from libcore\", 42);"}, {"sha": "042d8cd4afe79a99d13573491d3925a3b85c5f46", "filename": "src/tools/miri/tests/fail/provenance/provenance_transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |         let _val = *left_ptr;\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `deref` at $DIR/provenance_transmute.rs:LL:CC\n-note: inside `main` at $DIR/provenance_transmute.rs:LL:CC\n+note: inside `main`\n   --> $DIR/provenance_transmute.rs:LL:CC\n    |\n LL |         deref(ptr1, ptr2.with_addr(ptr1.addr()));"}, {"sha": "2385439c8a5f7f85ae007287cfeb6e08313cf33b", "filename": "src/tools/miri/tests/fail/shims/fs/isolated_file.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -17,7 +17,7 @@ LL |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode a\n    = note: inside `std::fs::OpenOptions::_open` at RUSTLIB/std/src/fs.rs:LL:CC\n    = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at RUSTLIB/std/src/fs.rs:LL:CC\n    = note: inside `std::fs::File::open::<&str>` at RUSTLIB/std/src/fs.rs:LL:CC\n-note: inside `main` at $DIR/isolated_file.rs:LL:CC\n+note: inside `main`\n   --> $DIR/isolated_file.rs:LL:CC\n    |\n LL |     let _file = std::fs::File::open(\"file.txt\").unwrap();"}, {"sha": "35ff1926b065740d35e30966228e67c0af9d4e78", "filename": "src/tools/miri/tests/fail/shims/fs/mkstemp_immutable_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |     let _fd = unsafe { libc::mkstemp(s) };\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `test_mkstemp_immutable_arg` at $DIR/mkstemp_immutable_arg.rs:LL:CC\n-note: inside `main` at $DIR/mkstemp_immutable_arg.rs:LL:CC\n+note: inside `main`\n   --> $DIR/mkstemp_immutable_arg.rs:LL:CC\n    |\n LL |     test_mkstemp_immutable_arg();"}, {"sha": "5a8e7352c768618f53b3cc47ef3b9b95481fc494", "filename": "src/tools/miri/tests/fail/shims/fs/unix_open_missing_required_mode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL | ...safe { libc::open(name_ptr, libc::O_CREAT) };\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `test_file_open_missing_needed_mode` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n-note: inside `main` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n+note: inside `main`\n   --> $DIR/unix_open_missing_required_mode.rs:LL:CC\n    |\n LL |     test_file_open_missing_needed_mode();"}, {"sha": "325565fa1e786aa327cd337838c91979fa9aa080", "filename": "src/tools/miri/tests/fail/should-pass/cpp20_rwc_syncs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |             std::hint::unreachable_unchecked();\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `test_cpp20_rwc_syncs` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n-note: inside `main` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n+note: inside `main`\n   --> $DIR/cpp20_rwc_syncs.rs:LL:CC\n    |\n LL |         test_cpp20_rwc_syncs();"}, {"sha": "4514abb4ab2e47900200bc4dde0ababfa159fe4a", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n    |             ^^\n    = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/aliasing_mut1.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xraw);"}, {"sha": "9ca9743cbd929be46fb3418a504316321bb3cc9c", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n    |             ^^\n    = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut2.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut2.rs:LL:CC\n+note: inside `main`\n   --> $DIR/aliasing_mut2.rs:LL:CC\n    |\n LL |     safe_raw(xshr, xraw);"}, {"sha": "b504097a3c91f2541339f527e04e3edf93c545af", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     safe_raw(xraw, xshr);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut3.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut3.rs:LL:CC\n+note: inside `main`\n   --> $DIR/aliasing_mut3.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xshr);"}, {"sha": "6fe0d70902930fe864390ec1e7c0f9914d77dc21", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n    |             ^^\n    = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut4.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut4.rs:LL:CC\n+note: inside `main`\n   --> $DIR/aliasing_mut4.rs:LL:CC\n    |\n LL |     safe_raw(xshr, xraw as *mut _);"}, {"sha": "f114130f6fafdabece908fc8999b7a357ffc0d0e", "filename": "src/tools/miri/tests/fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,12 +21,12 @@ LL |     *our = 5;\n    |     ^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `unknown_code_2` at $DIR/box_exclusive_violation1.rs:LL:CC\n-note: inside `demo_box_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n+note: inside `demo_box_advanced_unique`\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n LL |     unknown_code_2();\n    |     ^^^^^^^^^^^^^^^^\n-note: inside `main` at $DIR/box_exclusive_violation1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n LL |     demo_box_advanced_unique(Box::new(0));"}, {"sha": "139fcd0ca4583d67502bb5e41081831f0b902093", "filename": "src/tools/miri/tests/fail/stacked_borrows/box_noalias_violation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_noalias_violation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_noalias_violation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_noalias_violation.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | unsafe fn test(mut x: Box<i32>, y: *const i32) -> i32 {\n    |                ^^^^^\n    = note: BACKTRACE:\n    = note: inside `test` at $DIR/box_noalias_violation.rs:LL:CC\n-note: inside `main` at $DIR/box_noalias_violation.rs:LL:CC\n+note: inside `main`\n   --> $DIR/box_noalias_violation.rs:LL:CC\n    |\n LL |         test(Box::from_raw(ptr), ptr);"}, {"sha": "516964b9a4e6f11a95cc3195d2af7da83ab5ef86", "filename": "src/tools/miri/tests/fail/stacked_borrows/deallocate_against_protector1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -12,18 +12,18 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside closure at $DIR/deallocate_against_protector1.rs:LL:CC\n+note: inside closure\n   --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `<[closure@$DIR/deallocate_against_protector1.rs:LL:CC] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n-note: inside `inner` at $DIR/deallocate_against_protector1.rs:LL:CC\n+note: inside `inner`\n   --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL |     f(x)\n    |     ^^^^\n-note: inside `main` at $DIR/deallocate_against_protector1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL | /     inner(Box::leak(Box::new(0)), |x| {"}, {"sha": "47cfa0de7258c1fe0263442c8387a6d7b3d7a7d9", "filename": "src/tools/miri/tests/fail/stacked_borrows/deallocate_against_protector2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -12,18 +12,18 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = note: inside `alloc::alloc::box_free::<NotUnpin, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `std::ptr::drop_in_place::<std::boxed::Box<NotUnpin>> - shim(Some(std::boxed::Box<NotUnpin>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: inside `std::mem::drop::<std::boxed::Box<NotUnpin>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside closure at $DIR/deallocate_against_protector2.rs:LL:CC\n+note: inside closure\n   --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: inside `<[closure@$DIR/deallocate_against_protector2.rs:LL:CC] as std::ops::FnOnce<(&mut NotUnpin,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n-note: inside `inner` at $DIR/deallocate_against_protector2.rs:LL:CC\n+note: inside `inner`\n   --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL |     f(x)\n    |     ^^^^\n-note: inside `main` at $DIR/deallocate_against_protector2.rs:LL:CC\n+note: inside `main`\n   --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL | /     inner(Box::leak(Box::new(NotUnpin(0, PhantomPinned))), |x| {"}, {"sha": "f2f13d0d5594ea1215bf7f43a95560e05325a390", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_dealloc1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_dealloc1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL |         ptr1.write(0);\n    |         ^^^^^^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/illegal_deALLOC.rs:LL:CC\n+note: inside `main`\n   --> $DIR/illegal_deALLOC.rs:LL:CC\n    |\n LL |         dealloc(ptr2, Layout::from_size_align_unchecked(1, 1));"}, {"sha": "49d9050f3094771d1f44672fec01770dc6b0c89c", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | fn foo(a: &mut u32, y: *mut u32) -> u32 {\n    |        ^\n    = note: BACKTRACE:\n    = note: inside `foo` at $DIR/illegal_write6.rs:LL:CC\n-note: inside `main` at $DIR/illegal_write6.rs:LL:CC\n+note: inside `main`\n   --> $DIR/illegal_write6.rs:LL:CC\n    |\n LL |     foo(x, p);"}, {"sha": "a53c633c3813076df0bc1a336970017d5430fc5a", "filename": "src/tools/miri/tests/fail/stacked_borrows/invalidate_against_protector1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | fn inner(x: *mut i32, _y: &mut i32) {\n    |                       ^^\n    = note: BACKTRACE:\n    = note: inside `inner` at $DIR/invalidate_against_protector1.rs:LL:CC\n-note: inside `main` at $DIR/invalidate_against_protector1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/invalidate_against_protector1.rs:LL:CC\n    |\n LL |     inner(xraw, xref);"}, {"sha": "6ee78d1aac682fd9c79e4286525f627dcf37e269", "filename": "src/tools/miri/tests/fail/stacked_borrows/invalidate_against_protector2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | fn inner(x: *mut i32, _y: &i32) {\n    |                       ^^\n    = note: BACKTRACE:\n    = note: inside `inner` at $DIR/invalidate_against_protector2.rs:LL:CC\n-note: inside `main` at $DIR/invalidate_against_protector2.rs:LL:CC\n+note: inside `main`\n   --> $DIR/invalidate_against_protector2.rs:LL:CC\n    |\n LL |     inner(xraw, xref);"}, {"sha": "2b38dea9dbb719221b89285fd97ba785fd53fa6a", "filename": "src/tools/miri/tests/fail/stacked_borrows/invalidate_against_protector3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector3.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -18,7 +18,7 @@ LL | fn inner(x: *mut i32, _y: &i32) {\n    |                       ^^\n    = note: BACKTRACE:\n    = note: inside `inner` at $DIR/invalidate_against_protector3.rs:LL:CC\n-note: inside `main` at $DIR/invalidate_against_protector3.rs:LL:CC\n+note: inside `main`\n   --> $DIR/invalidate_against_protector3.rs:LL:CC\n    |\n LL |         inner(ptr, &*ptr);"}, {"sha": "c69a3af293c13b1e6b59556a00cf6b64088cb780", "filename": "src/tools/miri/tests/fail/stacked_borrows/issue-miri-1050-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -9,7 +9,7 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n    = note: BACKTRACE:\n    = note: inside `std::boxed::Box::<u32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<u32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n-note: inside `main` at $DIR/issue-miri-1050-1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/issue-miri-1050-1.rs:LL:CC\n    |\n LL |         drop(Box::from_raw(ptr as *mut u32));"}, {"sha": "23d7fdcd03bc5a3333d409cf0242696b66557ae5", "filename": "src/tools/miri/tests/fail/stacked_borrows/issue-miri-1050-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -9,7 +9,7 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n    = note: BACKTRACE:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n-note: inside `main` at $DIR/issue-miri-1050-2.rs:LL:CC\n+note: inside `main`\n   --> $DIR/issue-miri-1050-2.rs:LL:CC\n    |\n LL |         drop(Box::from_raw(ptr.as_ptr()));"}, {"sha": "2f3900c40d7261fd8f342e6ecc94d2eacc6e3f07", "filename": "src/tools/miri/tests/fail/stacked_borrows/mut_exclusive_violation1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,12 +21,12 @@ LL |     *our = 5;\n    |     ^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `unknown_code_2` at $DIR/mut_exclusive_violation1.rs:LL:CC\n-note: inside `demo_mut_advanced_unique` at $DIR/mut_exclusive_violation1.rs:LL:CC\n+note: inside `demo_mut_advanced_unique`\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n LL |     unknown_code_2();\n    |     ^^^^^^^^^^^^^^^^\n-note: inside `main` at $DIR/mut_exclusive_violation1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC\n    |\n LL |     demo_mut_advanced_unique(&mut 0);"}, {"sha": "90677dfaf555e4c8226919cb89f3d08cca536384", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_pair_retagging.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_pair_retagging.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -19,17 +19,17 @@ LL | fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {\n    = note: BACKTRACE:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n-note: inside closure at $DIR/newtype_pair_retagging.rs:LL:CC\n+note: inside closure\n   --> $DIR/newtype_pair_retagging.rs:LL:CC\n    |\n LL |             || drop(Box::from_raw(ptr)),\n    |                     ^^^^^^^^^^^^^^^^^^\n-note: inside `dealloc_while_running::<[closure@$DIR/newtype_pair_retagging.rs:LL:CC]>` at $DIR/newtype_pair_retagging.rs:LL:CC\n+note: inside `dealloc_while_running::<[closure@$DIR/newtype_pair_retagging.rs:LL:CC]>`\n   --> $DIR/newtype_pair_retagging.rs:LL:CC\n    |\n LL |     dealloc();\n    |     ^^^^^^^^^\n-note: inside `main` at $DIR/newtype_pair_retagging.rs:LL:CC\n+note: inside `main`\n   --> $DIR/newtype_pair_retagging.rs:LL:CC\n    |\n LL | /         dealloc_while_running("}, {"sha": "f189d0483d12d9e459ed3862d1259375ff1cc5f6", "filename": "src/tools/miri/tests/fail/stacked_borrows/newtype_retagging.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -19,17 +19,17 @@ LL | fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {\n    = note: BACKTRACE:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n-note: inside closure at $DIR/newtype_retagging.rs:LL:CC\n+note: inside closure\n   --> $DIR/newtype_retagging.rs:LL:CC\n    |\n LL |             || drop(Box::from_raw(ptr)),\n    |                     ^^^^^^^^^^^^^^^^^^\n-note: inside `dealloc_while_running::<[closure@$DIR/newtype_retagging.rs:LL:CC]>` at $DIR/newtype_retagging.rs:LL:CC\n+note: inside `dealloc_while_running::<[closure@$DIR/newtype_retagging.rs:LL:CC]>`\n   --> $DIR/newtype_retagging.rs:LL:CC\n    |\n LL |     dealloc();\n    |     ^^^^^^^^^\n-note: inside `main` at $DIR/newtype_retagging.rs:LL:CC\n+note: inside `main`\n   --> $DIR/newtype_retagging.rs:LL:CC\n    |\n LL | /         dealloc_while_running("}, {"sha": "7d58d1aebbecd6154df1cbb535942b3b4356f735", "filename": "src/tools/miri/tests/fail/stacked_borrows/pointer_smuggling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n    |     ^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `fun2` at $DIR/pointer_smuggling.rs:LL:CC\n-note: inside `main` at $DIR/pointer_smuggling.rs:LL:CC\n+note: inside `main`\n   --> $DIR/pointer_smuggling.rs:LL:CC\n    |\n LL |     fun2(); // if they now use a raw ptr they break our reference"}, {"sha": "5dc936f0707443f5805196e164c647ff5c17a238", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_read.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_read.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |         *p = 5;\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `thread_2` at $DIR/retag_data_race_read.rs:LL:CC\n-note: inside closure at $DIR/retag_data_race_read.rs:LL:CC\n+note: inside closure\n   --> $DIR/retag_data_race_read.rs:LL:CC\n    |\n LL |     let t2 = std::thread::spawn(move || thread_2(p));"}, {"sha": "03c2450356416586a3d153f6261e01dec8f2c9e2", "filename": "src/tools/miri/tests/fail/stacked_borrows/retag_data_race_write.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fretag_data_race_write.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -8,7 +8,7 @@ LL |         *p = 5;\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `thread_2` at $DIR/retag_data_race_write.rs:LL:CC\n-note: inside closure at $DIR/retag_data_race_write.rs:LL:CC\n+note: inside closure\n   --> $DIR/retag_data_race_write.rs:LL:CC\n    |\n LL |     let t2 = std::thread::spawn(move || thread_2(p));"}, {"sha": "1b28f780c1c544a63f0ca9d9850f4539d77f4c09", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n    = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_mut.rs:LL:CC\n-note: inside `main` at $DIR/return_invalid_mut.rs:LL:CC\n+note: inside `main`\n   --> $DIR/return_invalid_mut.rs:LL:CC\n    |\n LL |     foo(&mut (1, 2));"}, {"sha": "db14dcafa008445530d4629312495cc4629ff18d", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_mut_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n    = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_mut_option.rs:LL:CC\n-note: inside `main` at $DIR/return_invalid_mut_option.rs:LL:CC\n+note: inside `main`\n   --> $DIR/return_invalid_mut_option.rs:LL:CC\n    |\n LL |     match foo(&mut (1, 2)) {"}, {"sha": "81ed4218aade789d54d5ad5598725c862ec98b04", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_mut_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n    = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_mut_tuple.rs:LL:CC\n-note: inside `main` at $DIR/return_invalid_mut_tuple.rs:LL:CC\n+note: inside `main`\n   --> $DIR/return_invalid_mut_tuple.rs:LL:CC\n    |\n LL |     foo(&mut (1, 2)).0;"}, {"sha": "9c8cc50b2d7ac7b4c87399b9f1ecd4c99a6b34d0", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_shr.rs:LL:CC\n-note: inside `main` at $DIR/return_invalid_shr.rs:LL:CC\n+note: inside `main`\n   --> $DIR/return_invalid_shr.rs:LL:CC\n    |\n LL |     foo(&mut (1, 2));"}, {"sha": "00ce6f6cd5fe129e6f13fe9c26c32b1fcc2440e3", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_shr_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_shr_option.rs:LL:CC\n-note: inside `main` at $DIR/return_invalid_shr_option.rs:LL:CC\n+note: inside `main`\n   --> $DIR/return_invalid_shr_option.rs:LL:CC\n    |\n LL |     match foo(&mut (1, 2)) {"}, {"sha": "bbd17b1284c5e6b9508cf5e55de49edd544771a5", "filename": "src/tools/miri/tests/fail/stacked_borrows/return_invalid_shr_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -21,7 +21,7 @@ LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_shr_tuple.rs:LL:CC\n-note: inside `main` at $DIR/return_invalid_shr_tuple.rs:LL:CC\n+note: inside `main`\n   --> $DIR/return_invalid_shr_tuple.rs:LL:CC\n    |\n LL |     foo(&mut (1, 2)).0;"}, {"sha": "fe0ac211318aac832bd587bf2a4a69fbc3b1fbcf", "filename": "src/tools/miri/tests/fail/stacked_borrows/shr_frozen_violation1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -16,12 +16,12 @@ LL |         *(x as *const i32 as *mut i32) = 7;\n    |           ^\n    = note: BACKTRACE:\n    = note: inside `unknown_code` at $DIR/shr_frozen_violation1.rs:LL:CC\n-note: inside `foo` at $DIR/shr_frozen_violation1.rs:LL:CC\n+note: inside `foo`\n   --> $DIR/shr_frozen_violation1.rs:LL:CC\n    |\n LL |     unknown_code(&*x);\n    |     ^^^^^^^^^^^^^^^^^\n-note: inside `main` at $DIR/shr_frozen_violation1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/shr_frozen_violation1.rs:LL:CC\n    |\n LL |     println!(\"{}\", foo(&mut 0));"}, {"sha": "e134ee2845d05ea1871bdb3a23b3d1490cd09846", "filename": "src/tools/miri/tests/fail/stacked_borrows/zst_slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -16,7 +16,7 @@ LL |         assert_eq!(*s.get_unchecked(1), 2);\n    |                     ^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n    = note: inside `core::slice::<impl [i32]>::get_unchecked::<usize>` at RUSTLIB/core/src/slice/mod.rs:LL:CC\n-note: inside `main` at $DIR/zst_slice.rs:LL:CC\n+note: inside `main`\n   --> $DIR/zst_slice.rs:LL:CC\n    |\n LL |         assert_eq!(*s.get_unchecked(1), 2);"}, {"sha": "8da532cfff05b38e458ce1052eb8ac2f13380ad1", "filename": "src/tools/miri/tests/fail/uninit_buffer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -9,7 +9,7 @@ LL |         let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len)\n    = note: BACKTRACE:\n    = note: inside `<u8 as core::slice::cmp::SliceOrd>::compare` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n    = note: inside `core::slice::cmp::<impl std::cmp::Ord for [u8]>::cmp` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n-note: inside `main` at $DIR/uninit_buffer.rs:LL:CC\n+note: inside `main`\n   --> $DIR/uninit_buffer.rs:LL:CC\n    |\n LL |         drop(slice1.cmp(slice2));"}, {"sha": "210fc8e109aa4843d90de139b0235150c1540685", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -9,7 +9,7 @@ LL |         let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len)\n    = note: BACKTRACE:\n    = note: inside `<u8 as core::slice::cmp::SliceOrd>::compare` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n    = note: inside `core::slice::cmp::<impl std::cmp::Ord for [u8]>::cmp` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n-note: inside `main` at $DIR/uninit_buffer_with_provenance.rs:LL:CC\n+note: inside `main`\n   --> $DIR/uninit_buffer_with_provenance.rs:LL:CC\n    |\n LL |         drop(slice1.cmp(slice2));"}, {"sha": "4c2fb40e1102179641d96233433afc38aedb4b8b", "filename": "src/tools/miri/tests/pass/box.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badd6a5a03e87920259e1510e710526b51faadbe/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fbox.stderr?ref=badd6a5a03e87920259e1510e710526b51faadbe", "patch": "@@ -12,7 +12,7 @@ LL |         let r2 = ((r as usize) + 0) as *mut i32;\n    = help: Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\n    = note: BACKTRACE:\n    = note: inside `into_raw` at $DIR/box.rs:LL:CC\n-note: inside `main` at $DIR/box.rs:LL:CC\n+note: inside `main`\n   --> $DIR/box.rs:LL:CC\n    |\n LL |     into_raw();\n@@ -25,7 +25,7 @@ LL |         let r = ((u.as_ptr() as usize) + 0) as *mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n    |\n    = note: inside `into_unique` at $DIR/box.rs:LL:CC\n-note: inside `main` at $DIR/box.rs:LL:CC\n+note: inside `main`\n   --> $DIR/box.rs:LL:CC\n    |\n LL |     into_unique();"}]}