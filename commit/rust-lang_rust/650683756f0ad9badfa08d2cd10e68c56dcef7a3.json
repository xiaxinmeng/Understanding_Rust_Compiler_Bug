{"sha": "650683756f0ad9badfa08d2cd10e68c56dcef7a3", "node_id": "C_kwDOAAsO6NoAKDY1MDY4Mzc1NmYwYWQ5YmFkZmEwOGQyY2QxMGU2OGM1NmRjZWY3YTM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T09:35:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T09:37:31Z"}, "message": "Add mir-opt test.", "tree": {"sha": "cef6ba6b14eb743110335fd5cc15e3d6b4bf2d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cef6ba6b14eb743110335fd5cc15e3d6b4bf2d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/650683756f0ad9badfa08d2cd10e68c56dcef7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/650683756f0ad9badfa08d2cd10e68c56dcef7a3", "html_url": "https://github.com/rust-lang/rust/commit/650683756f0ad9badfa08d2cd10e68c56dcef7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/650683756f0ad9badfa08d2cd10e68c56dcef7a3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa5c24b7d763fb98d998819571128ff2eb8a3ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa5c24b7d763fb98d998819571128ff2eb8a3ca", "html_url": "https://github.com/rust-lang/rust/commit/9aa5c24b7d763fb98d998819571128ff2eb8a3ca"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "5a1a608952cd99bce2e627e25bda35e64e9cd1bd", "filename": "tests/mir-opt/dataflow-const-prop/enum.multiple.DataflowConstProp.diff", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/650683756f0ad9badfa08d2cd10e68c56dcef7a3/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/650683756f0ad9badfa08d2cd10e68c56dcef7a3/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff?ref=650683756f0ad9badfa08d2cd10e68c56dcef7a3", "patch": "@@ -0,0 +1,83 @@\n+- // MIR for `multiple` before DataflowConstProp\n++ // MIR for `multiple` after DataflowConstProp\n+  \n+  fn multiple(_1: bool, _2: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/enum.rs:+0:13: +0:14\n+      debug i => _2;                       // in scope 0 at $DIR/enum.rs:+0:22: +0:23\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum.rs:+0:29: +0:29\n+      let _3: std::option::Option<u8>;     // in scope 0 at $DIR/enum.rs:+1:9: +1:10\n+      let mut _4: bool;                    // in scope 0 at $DIR/enum.rs:+1:16: +1:17\n+      let mut _5: u8;                      // in scope 0 at $DIR/enum.rs:+2:14: +2:15\n+      let mut _7: isize;                   // in scope 0 at $DIR/enum.rs:+9:23: +9:30\n+      scope 1 {\n+          debug e => _3;                   // in scope 1 at $DIR/enum.rs:+1:9: +1:10\n+          let _6: u8;                      // in scope 1 at $DIR/enum.rs:+9:9: +9:10\n+          let _8: u8;                      // in scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          scope 2 {\n+              debug x => _6;               // in scope 2 at $DIR/enum.rs:+9:9: +9:10\n+              let _9: u8;                  // in scope 2 at $DIR/enum.rs:+11:9: +11:10\n+              scope 4 {\n+                  debug y => _9;           // in scope 4 at $DIR/enum.rs:+11:9: +11:10\n+              }\n+          }\n+          scope 3 {\n+              debug i => _8;               // in scope 3 at $DIR/enum.rs:+9:28: +9:29\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n+          StorageLive(_4);                 // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+          _4 = _1;                         // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+          switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/enum.rs:+2:14: +2:15\n+          _5 = _2;                         // scope 0 at $DIR/enum.rs:+2:14: +2:15\n+          _3 = Option::<u8>::Some(move _5); // scope 0 at $DIR/enum.rs:+2:9: +2:16\n+          StorageDead(_5);                 // scope 0 at $DIR/enum.rs:+2:15: +2:16\n+          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+      }\n+  \n+      bb2: {\n+          _3 = Option::<u8>::None;         // scope 0 at $DIR/enum.rs:+4:9: +4:13\n+          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+      }\n+  \n+      bb3: {\n+          StorageDead(_4);                 // scope 0 at $DIR/enum.rs:+5:5: +5:6\n+          StorageLive(_6);                 // scope 1 at $DIR/enum.rs:+9:9: +9:10\n+          _7 = discriminant(_3);           // scope 1 at $DIR/enum.rs:+9:19: +9:20\n+          switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 1 at $DIR/enum.rs:+9:13: +9:20\n+      }\n+  \n+      bb4: {\n+          _6 = const 0_u8;                 // scope 1 at $DIR/enum.rs:+9:45: +9:46\n+          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:45: +9:46\n+      }\n+  \n+      bb5: {\n+          unreachable;                     // scope 1 at $DIR/enum.rs:+9:19: +9:20\n+      }\n+  \n+      bb6: {\n+          StorageLive(_8);                 // scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          _8 = ((_3 as Some).0: u8);       // scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          _6 = _8;                         // scope 3 at $DIR/enum.rs:+9:34: +9:35\n+          StorageDead(_8);                 // scope 1 at $DIR/enum.rs:+9:34: +9:35\n+          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:34: +9:35\n+      }\n+  \n+      bb7: {\n+          StorageLive(_9);                 // scope 2 at $DIR/enum.rs:+11:9: +11:10\n+-         _9 = _6;                         // scope 2 at $DIR/enum.rs:+11:13: +11:14\n++         _9 = const 0_u8;                 // scope 2 at $DIR/enum.rs:+11:13: +11:14\n+          _0 = const ();                   // scope 0 at $DIR/enum.rs:+0:29: +12:2\n+          StorageDead(_9);                 // scope 2 at $DIR/enum.rs:+12:1: +12:2\n+          StorageDead(_6);                 // scope 1 at $DIR/enum.rs:+12:1: +12:2\n+          StorageDead(_3);                 // scope 0 at $DIR/enum.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/enum.rs:+12:2: +12:2\n+      }\n+  }\n+  "}, {"sha": "79a20d7ef457dc09058ed54f19e1ee67ffa2462d", "filename": "tests/mir-opt/dataflow-const-prop/enum.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/650683756f0ad9badfa08d2cd10e68c56dcef7a3/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/650683756f0ad9badfa08d2cd10e68c56dcef7a3/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs?ref=650683756f0ad9badfa08d2cd10e68c56dcef7a3", "patch": "@@ -46,7 +46,23 @@ fn mutate_discriminant() -> u8 {\n     )\n }\n \n+// EMIT_MIR enum.multiple.DataflowConstProp.diff\n+fn multiple(x: bool, i: u8) {\n+    let e = if x {\n+        Some(i)\n+    } else {\n+        None\n+    };\n+    // The dataflow state must have:\n+    //   discriminant(e) => Top\n+    //   (e as Some).0 => Top\n+    let x = match e { Some(i) => i, None => 0 };\n+    // Therefore, `x` should be `Top` here, and no replacement shall happen.\n+    let y = x;\n+}\n+\n fn main() {\n     simple();\n     mutate_discriminant();\n+    multiple(false, 5);\n }"}]}