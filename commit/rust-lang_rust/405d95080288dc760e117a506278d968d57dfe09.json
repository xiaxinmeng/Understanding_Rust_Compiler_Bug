{"sha": "405d95080288dc760e117a506278d968d57dfe09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNWQ5NTA4MDI4OGRjNzYwZTExN2E1MDYyNzhkOTY4ZDU3ZGZlMDk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-28T17:08:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-28T17:08:48Z"}, "message": "Move rustdoc-js testing into compiletest", "tree": {"sha": "ba273434a12fb8f022888f3847e75f5ea7c11a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba273434a12fb8f022888f3847e75f5ea7c11a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/405d95080288dc760e117a506278d968d57dfe09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/405d95080288dc760e117a506278d968d57dfe09", "html_url": "https://github.com/rust-lang/rust/commit/405d95080288dc760e117a506278d968d57dfe09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/405d95080288dc760e117a506278d968d57dfe09/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "240fad04f1c5517d5d38ab62c321f09c35a468d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/240fad04f1c5517d5d38ab62c321f09c35a468d1", "html_url": "https://github.com/rust-lang/rust/commit/240fad04f1c5517d5d38ab62c321f09c35a468d1"}], "stats": {"total": 95, "additions": 42, "deletions": 53}, "files": [{"sha": "b7323b2eadc3dd21b798158f999404cfa4edc193", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 13, "deletions": 49, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/405d95080288dc760e117a506278d968d57dfe09/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405d95080288dc760e117a506278d968d57dfe09/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=405d95080288dc760e117a506278d968d57dfe09", "patch": "@@ -4,7 +4,7 @@\n //! our CI.\n \n use std::env;\n-use std::ffi::{OsStr, OsString};\n+use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n use std::iter;\n@@ -638,52 +638,15 @@ impl Step for RustdocJSNotStd {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        if let Some(ref nodejs) = builder.config.nodejs {\n-            builder.ensure(crate::doc::Std {\n+        if builder.config.nodejs.is_some() {\n+            builder.ensure(Compiletest {\n+                compiler: self.compiler,\n                 target: self.target,\n-                stage: builder.top_stage,\n+                mode: \"js-doc-test\",\n+                suite: \"rustdoc-js\",\n+                path: None,\n+                compare_mode: None,\n             });\n-\n-            let mut tests_to_run = Vec::new();\n-            let out = Path::new(\"build\").join(&*self.host)\n-                                        .join(&format!(\"stage{}\",\n-                                                       builder.top_stage.to_string().as_str()))\n-                                        .join(\"tests\")\n-                                        .join(\"rustdoc-js\");\n-\n-            if let Ok(it) = fs::read_dir(\"src/test/rustdoc-js/\") {\n-                for entry in it {\n-                    if let Ok(entry) = entry {\n-                        let path = entry.path();\n-                        if path.extension() != Some(&OsStr::new(\"rs\")) || !path.is_file() {\n-                            continue\n-                        }\n-                        let path_clone = path.clone();\n-                        let file_stem = path_clone.file_stem().expect(\"cannot get file stem\");\n-                        let out = out.join(file_stem);\n-                        let mut cmd = builder.rustdoc_cmd(self.host);\n-                        cmd.arg(\"-o\");\n-                        cmd.arg(out);\n-                        cmd.arg(path);\n-                        if if builder.config.verbose_tests {\n-                            try_run(builder, &mut cmd)\n-                        } else {\n-                            try_run_quiet(builder, &mut cmd)\n-                        } {\n-                            tests_to_run.push(file_stem.to_os_string());\n-                        }\n-                    }\n-                }\n-            }\n-            assert!(!tests_to_run.is_empty(), \"no rustdoc-js test generated...\");\n-\n-            tests_to_run.insert(0, \"src/tools/rustdoc-js/tester.js\".into());\n-            tests_to_run.insert(1, out.into());\n-\n-            let mut command = Command::new(nodejs);\n-            command.args(&tests_to_run);\n-\n-            builder.run(&mut command);\n         } else {\n             builder.info(\n                 \"No nodejs found, skipping \\\"src/test/rustdoc-js\\\" tests\"\n@@ -1070,12 +1033,13 @@ impl Step for Compiletest {\n             .arg(builder.sysroot_libdir(compiler, target));\n         cmd.arg(\"--rustc-path\").arg(builder.rustc(compiler));\n \n-        let is_rustdoc_ui = suite.ends_with(\"rustdoc-ui\");\n+        let is_rustdoc = suite.ends_with(\"rustdoc-ui\") || suite.ends_with(\"rustdoc-js\");\n \n         // Avoid depending on rustdoc when we don't need it.\n         if mode == \"rustdoc\"\n             || (mode == \"run-make\" && suite.ends_with(\"fulldeps\"))\n-            || (mode == \"ui\" && is_rustdoc_ui)\n+            || (mode == \"ui\" && is_rustdoc)\n+            || mode == \"js-doc-test\"\n         {\n             cmd.arg(\"--rustdoc-path\")\n                 .arg(builder.rustdoc(compiler.host));\n@@ -1109,12 +1073,12 @@ impl Step for Compiletest {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n \n-        let mut flags = if is_rustdoc_ui {\n+        let mut flags = if is_rustdoc {\n             Vec::new()\n         } else {\n             vec![\"-Crpath\".to_string()]\n         };\n-        if !is_rustdoc_ui {\n+        if !is_rustdoc {\n             if builder.config.rust_optimize_tests {\n                 flags.push(\"-O\".to_string());\n             }"}, {"sha": "1b4963fcebea8b71b4285bf8e0b15e986ec74ae1", "filename": "src/test/rustdoc-js/basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/405d95080288dc760e117a506278d968d57dfe09/src%2Ftest%2Frustdoc-js%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405d95080288dc760e117a506278d968d57dfe09/src%2Ftest%2Frustdoc-js%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.rs?ref=405d95080288dc760e117a506278d968d57dfe09", "patch": "@@ -1 +1,2 @@\n+/// Foo\n pub struct Foo;"}, {"sha": "f0991c8cdb5477f827c91388a5c52f570ab4147d", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/405d95080288dc760e117a506278d968d57dfe09/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405d95080288dc760e117a506278d968d57dfe09/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=405d95080288dc760e117a506278d968d57dfe09", "patch": "@@ -24,6 +24,7 @@ pub enum Mode {\n     Incremental,\n     RunMake,\n     Ui,\n+    JsDocTest,\n     MirOpt,\n }\n \n@@ -59,6 +60,7 @@ impl FromStr for Mode {\n             \"incremental\" => Ok(Incremental),\n             \"run-make\" => Ok(RunMake),\n             \"ui\" => Ok(Ui),\n+            \"js-doc-test\" => Ok(JsDocTest),\n             \"mir-opt\" => Ok(MirOpt),\n             _ => Err(()),\n         }\n@@ -82,6 +84,7 @@ impl fmt::Display for Mode {\n             Incremental => \"incremental\",\n             RunMake => \"run-make\",\n             Ui => \"ui\",\n+            JsDocTest => \"js-doc-test\",\n             MirOpt => \"mir-opt\",\n         };\n         fmt::Display::fmt(s, f)"}, {"sha": "f7c02e831a9aacc734fca611a306da364a526f3c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/405d95080288dc760e117a506278d968d57dfe09/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405d95080288dc760e117a506278d968d57dfe09/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=405d95080288dc760e117a506278d968d57dfe09", "patch": "@@ -4,7 +4,7 @@ use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, DebugInfoBoth, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use crate::common::{CompileFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use crate::common::{Config, TestPaths};\n-use crate::common::{Incremental, MirOpt, RunMake, Ui};\n+use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest};\n use diff;\n use crate::errors::{self, Error, ErrorKind};\n use filetime::FileTime;\n@@ -275,6 +275,7 @@ impl<'test> TestCx<'test> {\n             RunMake => self.run_rmake_test(),\n             RunPass | Ui => self.run_ui_test(),\n             MirOpt => self.run_mir_opt_test(),\n+            JsDocTest => self.run_js_doc_test(),\n         }\n     }\n \n@@ -290,7 +291,7 @@ impl<'test> TestCx<'test> {\n     fn should_compile_successfully(&self) -> bool {\n         match self.config.mode {\n             CompileFail => self.props.compile_pass,\n-            RunPass => true,\n+            RunPass | JsDocTest => true,\n             Ui => self.props.compile_pass,\n             Incremental => {\n                 let revision = self.revision\n@@ -1712,7 +1713,8 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n-        let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\");\n+        let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\") ||\n+                         self.config.src_base.ends_with(\"rustdoc-js\");\n         let mut rustc = if !is_rustdoc {\n             Command::new(&self.config.rustc_path)\n         } else {\n@@ -1802,7 +1804,7 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(dir_opt);\n             }\n             RunFail | RunPassValgrind | Pretty | DebugInfoBoth | DebugInfoGdb | DebugInfoLldb\n-            | Codegen | Rustdoc | RunMake | CodegenUnits => {\n+            | Codegen | Rustdoc | RunMake | CodegenUnits | JsDocTest => {\n                 // do not use JSON output\n             }\n         }\n@@ -2710,6 +2712,25 @@ impl<'test> TestCx<'test> {\n         fs::remove_dir(path)\n     }\n \n+    fn run_js_doc_test(&self) {\n+        if let Some(nodejs) = &self.config.nodejs {\n+            let out_dir = self.output_base_dir();\n+\n+            self.document(&out_dir);\n+\n+            let root = self.config.find_rust_src_root().unwrap();\n+            let res = self.cmd2procres(\n+                Command::new(&nodejs)\n+                    .arg(root.join(\"src/tools/rustdoc-js/tester.js\"))\n+                    .arg(out_dir.parent().expect(\"no parent\"))\n+                    .arg(&self.testpaths.file.file_stem().expect(\"couldn't get file stem\")),\n+            );\n+            if !res.status.success() {\n+                self.fatal_proc_rec(\"rustdoc-js test failed!\", &res);\n+            }\n+        }\n+    }\n+\n     fn run_ui_test(&self) {\n         // if the user specified a format in the ui test\n         // print the output to the stderr file, otherwise extract"}]}