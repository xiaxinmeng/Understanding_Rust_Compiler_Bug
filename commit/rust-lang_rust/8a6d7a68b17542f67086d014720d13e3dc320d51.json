{"sha": "8a6d7a68b17542f67086d014720d13e3dc320d51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNmQ3YTY4YjE3NTQyZjY3MDg2ZDAxNDcyMGQxM2UzZGMzMjBkNTE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T14:55:16Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:15Z"}, "message": "remove mk_closure", "tree": {"sha": "e85c504d7d65371b3e7aae1a64c6117b092eefb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e85c504d7d65371b3e7aae1a64c6117b092eefb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a6d7a68b17542f67086d014720d13e3dc320d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6d7a68b17542f67086d014720d13e3dc320d51", "html_url": "https://github.com/rust-lang/rust/commit/8a6d7a68b17542f67086d014720d13e3dc320d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a6d7a68b17542f67086d014720d13e3dc320d51/comments", "author": null, "committer": null, "parents": [{"sha": "4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "html_url": "https://github.com/rust-lang/rust/commit/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36"}], "stats": {"total": 47, "additions": 3, "deletions": 44}, "files": [{"sha": "07dc13ff0d48f6e3b782bb1bbf858b57f935359c", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=8a6d7a68b17542f67086d014720d13e3dc320d51", "patch": "@@ -506,9 +506,6 @@ fn parse_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> Ty<'tcx> w\n         st.pos = st.pos + 1u;\n         return ty::mk_tup(tcx, params);\n       }\n-      'f' => {\n-        return ty::mk_closure(tcx, parse_closure_ty_(st, conv));\n-      }\n       'F' => {\n           let def_id = parse_def_(st, NominalType, conv);\n           return ty::mk_bare_fn(tcx, Some(def_id),"}, {"sha": "715151434f29d58b6b35ba7eab7f04c51d773ee5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8a6d7a68b17542f67086d014720d13e3dc320d51", "patch": "@@ -2738,10 +2738,6 @@ pub fn mk_nil<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> {\n     mk_tup(cx, Vec::new())\n }\n \n-pub fn mk_closure<'tcx>(cx: &ctxt<'tcx>, fty: ClosureTy<'tcx>) -> Ty<'tcx> {\n-    panic!(\"stub\");\n-}\n-\n pub fn mk_bare_fn<'tcx>(cx: &ctxt<'tcx>,\n                         opt_def_id: Option<ast::DefId>,\n                         fty: &'tcx BareFnTy<'tcx>) -> Ty<'tcx> {"}, {"sha": "b1e65dce6045a592200f44e9d29cd5f760e09447", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=8a6d7a68b17542f67086d014720d13e3dc320d51", "patch": "@@ -277,26 +277,6 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         ty::mk_tup(self.infcx.tcx, vec![ty1, ty2])\n     }\n \n-    pub fn t_closure(&self,\n-                     input_tys: &[Ty<'tcx>],\n-                     output_ty: Ty<'tcx>,\n-                     region_bound: ty::Region)\n-                     -> Ty<'tcx>\n-    {\n-        ty::mk_closure(self.infcx.tcx, ty::ClosureTy {\n-            unsafety: ast::Unsafety::Normal,\n-            onceness: ast::Many,\n-            store: ty::RegionTraitStore(region_bound, ast::MutMutable),\n-            bounds: ty::region_existential_bound(region_bound),\n-            sig: ty::Binder(ty::FnSig {\n-                inputs: input_tys.to_vec(),\n-                output: ty::FnConverging(output_ty),\n-                variadic: false,\n-            }),\n-            abi: abi::Rust,\n-        })\n-    }\n-\n     pub fn t_param(&self, space: subst::ParamSpace, index: u32) -> Ty<'tcx> {\n         let name = format!(\"T{}\", index);\n         ty::mk_param(self.infcx.tcx, space, index, token::intern(name[]))\n@@ -780,19 +760,6 @@ fn escaping() {\n         assert!(!ty::type_has_escaping_regions(t_param));\n         let t_fn = env.t_fn(&[t_param], env.t_nil());\n         assert!(!ty::type_has_escaping_regions(t_fn));\n-\n-        // t_fn = |&int|+'a\n-        let t_fn = env.t_closure(&[t_rptr_bound1], env.t_nil(), env.re_free(0, 1));\n-        assert!(!ty::type_has_escaping_regions(t_fn));\n-\n-        // t_fn = |&int|+'a (where &int has depth 2)\n-        let t_fn = env.t_closure(&[t_rptr_bound2], env.t_nil(), env.re_free(0, 1));\n-        assert!(ty::type_has_escaping_regions(t_fn));\n-\n-        // t_fn = |&int|+&int\n-        let t_fn = env.t_closure(&[t_rptr_bound1], env.t_nil(),\n-                                 env.re_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1)));\n-        assert!(ty::type_has_escaping_regions(t_fn));\n     })\n }\n "}, {"sha": "a8363699db8e3b071ac5931aeca59b94d1cfcc1c", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=8a6d7a68b17542f67086d014720d13e3dc320d51", "patch": "@@ -530,7 +530,6 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n     // of the closure expression.\n     let typer = NormalizingUnboxedClosureTyper::new(bcx.tcx());\n     let function_type = typer.unboxed_closure_type(closure_id, bcx.fcx.param_substs);\n-    let function_type = ty::mk_closure(bcx.tcx(), function_type);\n \n     let freevars: Vec<ty::Freevar> =\n         ty::with_freevars(bcx.tcx(), id, |fv| fv.iter().map(|&fv| fv).collect());\n@@ -543,8 +542,8 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n                   bcx.fcx.param_substs,\n                   id,\n                   &[],\n-                  ty::ty_fn_ret(function_type),\n-                  ty::ty_fn_abi(function_type),\n+                  function_type.sig.0.output,\n+                  function_type.abi,\n                   ClosureEnv::new(freevars[],\n                                   UnboxedClosure(freevar_mode)));\n "}, {"sha": "fb15a55d83420543bdf3c9e64a49fc7b5830e562", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d7a68b17542f67086d014720d13e3dc320d51/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=8a6d7a68b17542f67086d014720d13e3dc320d51", "patch": "@@ -316,7 +316,7 @@ fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                        abi::Rust,\n                                        expected_sig);\n     let fn_sig = fn_ty.sig.clone();\n-    let fty = ty::mk_closure(tcx, fn_ty);\n+    let fty = panic!(\"stub\");\n     debug!(\"check_expr_fn fty={}\", fcx.infcx().ty_to_string(fty));\n \n     fcx.write_ty(expr.id, fty);"}]}