{"sha": "b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YTIxMTc0NzViZTA4MmIyZjkzYmJjYjgzNmIxZjA1ZWE1MmI1ZTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-01T23:42:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T18:09:06Z"}, "message": "rustc: Make the various constraint-related types in middle::ty use interior vectors", "tree": {"sha": "43b3451894d8e309724ded9fdc63a6b22befb954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43b3451894d8e309724ded9fdc63a6b22befb954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "html_url": "https://github.com/rust-lang/rust/commit/b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb889f9d2512c60a8edbf2a3f06049191c07d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb889f9d2512c60a8edbf2a3f06049191c07d93", "html_url": "https://github.com/rust-lang/rust/commit/0eb889f9d2512c60a8edbf2a3f06049191c07d93"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "de6ff36cd7d9f9eed9409a26e9c1573f8fb99e0e", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "patch": "@@ -103,7 +103,7 @@ fn parse_path(@pstate st, str_def sd) -> ast::path {\n }\n \n fn parse_constr(@pstate st, str_def sd) -> @ty::constr_def {\n-    let vec[@ast::constr_arg] args = [];\n+    let (@ast::constr_arg)[] args = ~[];\n     auto sp = rec(lo=0u,hi=0u); // FIXME: use a real span\n     let ast::path pth = parse_path(st, sd);\n     let char ignore = next(st) as char;\n@@ -113,14 +113,15 @@ fn parse_constr(@pstate st, str_def sd) -> @ty::constr_def {\n         alt (peek(st) as char) {\n             case ('*') {\n                 st.pos += 1u;\n-                args += [@respan(sp, ast::carg_base)];\n+                args += ~[@respan(sp, ast::carg_base)];\n             }\n             case (?c) {\n                 /* how will we disambiguate between\n                  an arg index and a lit argument? */\n                 if (c >= '0' && c <= '9') {\n                     // FIXME\n-                    args += [@respan(sp, ast::carg_ident((c as uint) - 48u))];\n+                    args += ~[@respan(sp,\n+                                      ast::carg_ident((c as uint) - 48u))];\n                     ignore = next(st) as char;\n                 }\n                 else {"}, {"sha": "ba45497caabd597218e50a479e5adcac6c6912a2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "patch": "@@ -138,7 +138,7 @@ fn resolve_crate(session sess, &ast_map::map amap, @ast::crate crate) ->\n     auto e =\n         @rec(crate_map=new_int_hash[ast::crate_num](),\n              def_map=new_int_hash[def](),\n-             fn_constrs = new_int_hash[vec[ty::constr_def]](),\n+             fn_constrs = new_int_hash[ty::constr_def[]](),\n              ast_map=amap,\n              imports=new_int_hash[import_state](),\n              mod_map=new_int_hash[@indexed_mod](),\n@@ -416,8 +416,14 @@ fn resolve_constr(@env e, node_id id, &@ast::constr c, &scopes sc,\n     if (option::is_some(new_def)) {\n         alt (option::get(new_def)) {\n             case (ast::def_fn(?pred_id, ast::pure_fn)) {\n+                // FIXME: Remove this vec->ivec conversion.\n+                let (@ast::constr_arg_general[uint])[] cag_ivec = ~[];\n+                for (@ast::constr_arg_general[uint] cag in c.node.args) {\n+                    cag_ivec += ~[cag];\n+                }\n+\n                 let ty::constr_general[uint] c_ =\n-                    rec(path=c.node.path, args=c.node.args, id=pred_id);\n+                    rec(path=c.node.path, args=cag_ivec, id=pred_id);\n                 let ty::constr_def new_constr = respan(c.span, c_);\n                 add_constr(e, id, new_constr);\n             }\n@@ -433,8 +439,8 @@ fn resolve_constr(@env e, node_id id, &@ast::constr c, &scopes sc,\n fn add_constr(&@env e, node_id id, &ty::constr_def c) {\n     e.fn_constrs.insert(id,\n                         alt (e.fn_constrs.find(id)) {\n-                            case (none) { [c] }\n-                            case (some(?cs)) { cs + [c] }\n+                            case (none) { ~[c] }\n+                            case (some(?cs)) { cs + ~[c] }\n                         });\n }\n "}, {"sha": "3b8d689bc46b85219ecfb41398f11283ed409e12", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "patch": "@@ -504,7 +504,7 @@ fn constraints(&fn_ctxt fcx) -> vec[norm_constraint] {\n     ret rslt;\n }\n \n-fn match_args(&fn_ctxt fcx, vec[pred_desc] occs, vec[@constr_arg_use] occ) ->\n+fn match_args(&fn_ctxt fcx, vec[pred_desc] occs, &(@constr_arg_use)[] occ) ->\n    uint {\n     log \"match_args: looking at \" +\n         constr_args_to_str(std::util::fst[ident, def_id], occ);\n@@ -513,7 +513,13 @@ fn match_args(&fn_ctxt fcx, vec[pred_desc] occs, vec[@constr_arg_use] occ) ->\n         fn eq(&tup(ident, def_id) p, &tup(ident, def_id) q) -> bool {\n             ret p._1 == q._1;\n         }\n-        if (ty::args_eq(eq, pd.node.args, occ)) { ret pd.node.bit_num; }\n+\n+        // FIXME: Remove this vec->ivec conversion.\n+        let (@constr_arg_use)[] cau_ivec = ~[];\n+        for (@constr_arg_use cau in pd.node.args) {\n+            cau_ivec += ~[cau];\n+        }\n+        if (ty::args_eq(eq, cau_ivec, occ)) { ret pd.node.bit_num; }\n     }\n     fcx.ccx.tcx.sess.bug(\"match_args: no match for occurring args\");\n }\n@@ -593,8 +599,14 @@ fn expr_to_constr(ty::ctxt tcx, &@expr e) -> constr {\n }\n \n fn pred_desc_to_str(&pred_desc p) -> str {\n+    // FIXME: Remove this vec->ivec conversion.\n+    let (@constr_arg_use)[] cau_ivec = ~[];\n+    for (@constr_arg_use cau in p.node.args) {\n+        cau_ivec += ~[cau];\n+    }\n+\n     ret \"<\" + uint::str(p.node.bit_num) + \", \" +\n-        constr_args_to_str(std::util::fst[ident, def_id], p.node.args) + \">\";\n+        constr_args_to_str(std::util::fst[ident, def_id], cau_ivec) + \">\";\n }\n \n fn substitute_constr_args(&ty::ctxt cx, &vec[@expr] actuals,"}, {"sha": "371cfc0580f78ec8cd5dfbf39abea0f3feae81c8", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "patch": "@@ -5,6 +5,7 @@ import std::option::*;\n import std::vec;\n import std::vec::len;\n import std::vec::slice;\n+import aux::constr_arg_use;\n import aux::local_node_id_to_def;\n import aux::fn_ctxt;\n import aux::fn_info;\n@@ -63,7 +64,14 @@ fn bit_num(&fn_ctxt fcx, &constr_ c) -> uint {\n         }\n         case (npred(_, ?args)) {\n             alt (rslt) {\n-                case (cpred(_, ?descs)) { ret match_args(fcx, *descs, args); }\n+                case (cpred(_, ?descs)) {\n+                    // FIXME: Remove this vec->ivec conversion.\n+                    let (@constr_arg_use)[] cau_ivec = ~[];\n+                    for (@constr_arg_use cau in args) {\n+                        cau_ivec += ~[cau];\n+                    }\n+                    ret match_args(fcx, *descs, cau_ivec);\n+                }\n                 case (_) {\n                     fcx.ccx.tcx.sess.bug(\"bit_num: asked for pred constraint,\"\n                                              + \" found an init constraint\");"}, {"sha": "40aeb491bcc511a2a27c70a1d7e69ab44162107b", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "patch": "@@ -198,7 +198,7 @@ type method =\n         controlflow cf,\n         (@constr_def)[] constrs);\n \n-type constr_table = hashmap[ast::node_id, vec[constr_def]]; \n+type constr_table = hashmap[ast::node_id, constr_def[]];\n \n type mt = rec(t ty, ast::mutability mut);\n \n@@ -281,7 +281,7 @@ tag sty {\n type constr_def = spanned[constr_general[uint]];\n \n type constr_general[T] =\n-    rec(ast::path path, vec[@constr_arg_general[T]] args, def_id id);\n+    rec(ast::path path, (@constr_arg_general[T])[] args, def_id id);\n \n \n // Data structures used in type unification\n@@ -1438,8 +1438,8 @@ fn arg_eq[T](&fn(&T, &T) -> bool  eq, @ast::constr_arg_general[T] a,\n     }\n }\n \n-fn args_eq[T](fn(&T, &T) -> bool  eq, vec[@ast::constr_arg_general[T]] a,\n-              vec[@ast::constr_arg_general[T]] b) -> bool {\n+fn args_eq[T](fn(&T, &T) -> bool eq, &(@ast::constr_arg_general[T])[] a,\n+              &(@ast::constr_arg_general[T])[] b) -> bool {\n     let uint i = 0u;\n     for (@ast::constr_arg_general[T] arg in a) {\n         if (!arg_eq(eq, arg, b.(i))) { ret false; }"}, {"sha": "936b44c92aa85edaf0703698de77e2afd4186c6b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "patch": "@@ -2355,7 +2355,13 @@ fn ast_constr_to_constr(ty::ctxt tcx, &@ast::constr c)\n     -> @ty::constr_def {\n     alt (tcx.def_map.find(c.node.id)) {\n         case (some(ast::def_fn(?pred_id, ast::pure_fn))) {\n-            ret @respan(c.span, rec(path=c.node.path, args=c.node.args,\n+            // FIXME: Remove this vec->ivec conversion.\n+            let (@ast::constr_arg_general[uint])[] cag_ivec = ~[];\n+            for (@ast::constr_arg_general[uint] cag in c.node.args) {\n+                cag_ivec += ~[cag];\n+            }\n+\n+            ret @respan(c.span, rec(path=c.node.path, args=cag_ivec,\n                                     id=pred_id));\n         }\n         case (_) {"}, {"sha": "beab560b8d512271c4634650df7518fea1b93a3f", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a2117475be082b2f93bbcb836b1f05ea52b5e2/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=b9a2117475be082b2f93bbcb836b1f05ea52b5e2", "patch": "@@ -1421,7 +1421,7 @@ fn next_comment(&ps s) -> option::t[lexer::cmnt] {\n \n \n fn constr_args_to_str[T](fn(&T) -> str  f,\n-                         &vec[@ast::constr_arg_general[T]] args) -> str {\n+                         &(@ast::constr_arg_general[T])[] args) -> str {\n     auto comma = false;\n     auto s = \"(\";\n     for (@ast::constr_arg_general[T] a in args) {\n@@ -1447,8 +1447,13 @@ fn constr_arg_to_str[T](fn(&T) -> str  f, &ast::constr_arg_general_[T] c) ->\n fn uint_to_str(&uint i) -> str { ret uint::str(i); }\n \n fn ast_constr_to_str(&@ast::constr c) -> str {\n+    // TODO: Remove this vec->ivec conversion.\n+    auto cag_ivec = ~[];\n+    for (@ast::constr_arg_general[uint] cag in c.node.args) {\n+        cag_ivec += ~[cag];\n+    }\n     ret ast::path_to_str(c.node.path) +\n-            constr_args_to_str(uint_to_str, c.node.args);\n+            constr_args_to_str(uint_to_str, cag_ivec);\n }\n \n fn ast_constrs_str(&vec[@ast::constr] constrs) -> str {"}]}