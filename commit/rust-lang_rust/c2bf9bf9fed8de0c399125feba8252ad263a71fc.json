{"sha": "c2bf9bf9fed8de0c399125feba8252ad263a71fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYmY5YmY5ZmVkOGRlMGMzOTkxMjVmZWJhODI1MmFkMjYzYTcxZmM=", "commit": {"author": {"name": "Jyun-Yan You", "email": "jyyou@cs.nctu.edu.tw", "date": "2013-05-07T10:03:32Z"}, "committer": {"name": "Jyun-Yan You", "email": "jyyou@cs.nctu.edu.tw", "date": "2013-05-09T08:51:42Z"}, "message": "improve MIPS backend and implement segmented stacks", "tree": {"sha": "7b4795d84124bcf8eb6de69be5b908f7029f93c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b4795d84124bcf8eb6de69be5b908f7029f93c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2bf9bf9fed8de0c399125feba8252ad263a71fc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bf9bf9fed8de0c399125feba8252ad263a71fc", "html_url": "https://github.com/rust-lang/rust/commit/c2bf9bf9fed8de0c399125feba8252ad263a71fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2bf9bf9fed8de0c399125feba8252ad263a71fc/comments", "author": {"login": "crabtw", "id": 36015, "node_id": "MDQ6VXNlcjM2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/36015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crabtw", "html_url": "https://github.com/crabtw", "followers_url": "https://api.github.com/users/crabtw/followers", "following_url": "https://api.github.com/users/crabtw/following{/other_user}", "gists_url": "https://api.github.com/users/crabtw/gists{/gist_id}", "starred_url": "https://api.github.com/users/crabtw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crabtw/subscriptions", "organizations_url": "https://api.github.com/users/crabtw/orgs", "repos_url": "https://api.github.com/users/crabtw/repos", "events_url": "https://api.github.com/users/crabtw/events{/privacy}", "received_events_url": "https://api.github.com/users/crabtw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crabtw", "id": 36015, "node_id": "MDQ6VXNlcjM2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/36015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crabtw", "html_url": "https://github.com/crabtw", "followers_url": "https://api.github.com/users/crabtw/followers", "following_url": "https://api.github.com/users/crabtw/following{/other_user}", "gists_url": "https://api.github.com/users/crabtw/gists{/gist_id}", "starred_url": "https://api.github.com/users/crabtw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crabtw/subscriptions", "organizations_url": "https://api.github.com/users/crabtw/orgs", "repos_url": "https://api.github.com/users/crabtw/repos", "events_url": "https://api.github.com/users/crabtw/events{/privacy}", "received_events_url": "https://api.github.com/users/crabtw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda176b07046c25c67af978c20c3d4eda2068079", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda176b07046c25c67af978c20c3d4eda2068079", "html_url": "https://github.com/rust-lang/rust/commit/fda176b07046c25c67af978c20c3d4eda2068079"}], "stats": {"total": 230, "additions": 220, "deletions": 10}, "files": [{"sha": "efba83e6ad4c71eee98b2dba5c7123cead153644", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -247,12 +247,12 @@ AR_mips-unknown-linux-gnu=mips-linux-gnu-ar\n CFG_LIB_NAME_mips-unknown-linux-gnu=lib$(1).so\n CFG_LIB_GLOB_mips-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_mips-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32\n+CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32 -mno-compact-eh\n CFG_GCCISH_CXXFLAGS_mips-unknown-linux-gnu := -fno-rtti\n CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-gnu := -shared -fPIC -g -mips32r2 -msoft-float -mabi=32\n CFG_GCCISH_DEF_FLAG_mips-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n CFG_GCCISH_PRE_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-no-whole-archive -Wl,-znoexecstack\n+CFG_GCCISH_POST_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_mips-unknown-linux-gnu := .linux.def\n CFG_INSTALL_NAME_mips-unknown-linux-gnu =\n CFG_LIBUV_LINK_FLAGS_mips-unknown-linux-gnu ="}, {"sha": "7ae3f0fd2d462124d964d7e7a158c32b21c4efbc", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -268,14 +268,17 @@ pub mod types {\n                 pub type ssize_t = i32;\n             }\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_short, c_long, time_t};\n+                use libc::types::os::arch::c95::{c_short, c_long, c_ulong, time_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n                 use libc::types::os::arch::posix88::{mode_t, off_t};\n                 use libc::types::os::arch::posix88::{uid_t};\n \n                 pub type nlink_t = u32;\n                 pub type blksize_t = i32;\n                 pub type blkcnt_t = i32;\n+\n+                #[cfg(target_arch = \"x86\")]\n+                #[cfg(target_arch = \"arm\")]\n                 pub struct stat {\n                     st_dev: dev_t,\n                     __pad1: c_short,\n@@ -298,6 +301,30 @@ pub mod types {\n                     __unused4: c_long,\n                     __unused5: c_long,\n                 }\n+\n+                #[cfg(target_arch = \"mips\")]\n+                pub struct stat {\n+                    st_dev: c_ulong,\n+                    st_pad1: [c_long, ..3],\n+                    st_ino: ino_t,\n+                    st_mode: mode_t,\n+                    st_nlink: nlink_t,\n+                    st_uid: uid_t,\n+                    st_gid: gid_t,\n+                    st_rdev: c_ulong,\n+                    st_pad2: [c_long, ..2],\n+                    st_size: off_t,\n+                    st_pad3: c_long,\n+                    st_atime: time_t,\n+                    st_atime_nsec: c_long,\n+                    st_mtime: time_t,\n+                    st_mtime_nsec: c_long,\n+                    st_ctime: time_t,\n+                    st_ctime_nsec: c_long,\n+                    st_blksize: blksize_t,\n+                    st_blocks: blkcnt_t,\n+                    st_pad5: [c_long, ..14],\n+                }\n             }\n             pub mod posix08 {}\n             pub mod bsd44 {}\n@@ -963,6 +990,9 @@ pub mod consts {\n         }\n         pub mod c99 {\n         }\n+        #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(target_arch = \"arm\")]\n         pub mod posix88 {\n             pub static O_RDONLY : int = 0;\n             pub static O_WRONLY : int = 1;\n@@ -1007,6 +1037,51 @@ pub mod consts {\n             pub static SIGALRM : int = 14;\n             pub static SIGTERM : int = 15;\n         }\n+        #[cfg(target_arch = \"mips\")]\n+        pub mod posix88 {\n+            pub static O_RDONLY : int = 0;\n+            pub static O_WRONLY : int = 1;\n+            pub static O_RDWR : int = 2;\n+            pub static O_APPEND : int = 8;\n+            pub static O_CREAT : int = 256;\n+            pub static O_EXCL : int = 1024;\n+            pub static O_TRUNC : int = 512;\n+            pub static S_IFIFO : int = 4096;\n+            pub static S_IFCHR : int = 8192;\n+            pub static S_IFBLK : int = 24576;\n+            pub static S_IFDIR : int = 16384;\n+            pub static S_IFREG : int = 32768;\n+            pub static S_IFMT : int = 61440;\n+            pub static S_IEXEC : int = 64;\n+            pub static S_IWRITE : int = 128;\n+            pub static S_IREAD : int = 256;\n+            pub static S_IRWXU : int = 448;\n+            pub static S_IXUSR : int = 64;\n+            pub static S_IWUSR : int = 128;\n+            pub static S_IRUSR : int = 256;\n+            pub static F_OK : int = 0;\n+            pub static R_OK : int = 4;\n+            pub static W_OK : int = 2;\n+            pub static X_OK : int = 1;\n+            pub static STDIN_FILENO : int = 0;\n+            pub static STDOUT_FILENO : int = 1;\n+            pub static STDERR_FILENO : int = 2;\n+            pub static F_LOCK : int = 1;\n+            pub static F_TEST : int = 3;\n+            pub static F_TLOCK : int = 2;\n+            pub static F_ULOCK : int = 0;\n+            pub static SIGHUP : int = 1;\n+            pub static SIGINT : int = 2;\n+            pub static SIGQUIT : int = 3;\n+            pub static SIGILL : int = 4;\n+            pub static SIGABRT : int = 6;\n+            pub static SIGFPE : int = 8;\n+            pub static SIGKILL : int = 9;\n+            pub static SIGSEGV : int = 11;\n+            pub static SIGPIPE : int = 13;\n+            pub static SIGALRM : int = 14;\n+            pub static SIGTERM : int = 15;\n+        }\n         pub mod posix01 {\n             pub static SIGTRAP : int = 5;\n \n@@ -1026,11 +1101,20 @@ pub mod consts {\n         }\n         pub mod bsd44 {\n         }\n+        #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(target_arch = \"arm\")]\n         pub mod extra {\n             pub static O_RSYNC : int = 1052672;\n             pub static O_DSYNC : int = 4096;\n             pub static O_SYNC : int = 1052672;\n         }\n+        #[cfg(target_arch = \"mips\")]\n+        pub mod extra {\n+            pub static O_RSYNC : int = 16400;\n+            pub static O_DSYNC : int = 16;\n+            pub static O_SYNC : int = 16400;\n+        }\n     }\n \n     #[cfg(target_os = \"freebsd\")]"}, {"sha": "d3010aff3e8cde8af65a72fdc03ab79350666254", "filename": "src/libcore/path.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -122,7 +122,6 @@ pub trait GenericPath {\n mod stat {\n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"arm\")]\n-    #[cfg(target_arch = \"mips\")]\n     pub mod arch {\n         use libc;\n \n@@ -152,6 +151,36 @@ mod stat {\n         }\n     }\n \n+    #[cfg(target_arch = \"mips\")]\n+    pub mod arch {\n+        use libc;\n+\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_pad1: [0, ..3],\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_pad2: [0, ..2],\n+                st_size: 0,\n+                st_pad3: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                st_blksize: 0,\n+                st_blocks: 0,\n+                st_pad5: [0, ..14],\n+            }\n+        }\n+    }\n+\n     #[cfg(target_arch = \"x86_64\")]\n     pub mod arch {\n         use libc;"}, {"sha": "55f48fb86716c59dfb4ee4b7cf0d5030b8d67132", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -157,6 +157,7 @@ pub mod reader {\n     }\n \n     #[cfg(target_arch = \"arm\")]\n+    #[cfg(target_arch = \"mips\")]\n     pub fn vuint_at(data: &[u8], start: uint) -> Res {\n         vuint_at_slow(data, start)\n     }"}, {"sha": "cdcdc07db555d6f132dedb2cce35358fd76a0937", "filename": "src/rt/arch/mips/ccall.S", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Farch%2Fmips%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Farch%2Fmips%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2Fccall.S?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -8,7 +8,6 @@\n .align 2\n .globl __morestack\n .hidden __morestack\n-.cfi_sections .eh_frame_entry\n .cfi_startproc\n .set nomips16\n .ent __morestack"}, {"sha": "e534ac059133df53fc856009addd691871334270", "filename": "src/rt/arch/mips/morestack.S", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Farch%2Fmips%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Farch%2Fmips%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2Fmorestack.S?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -0,0 +1,97 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section        .note.GNU-stack, \"\", @progbits\n+#endif\n+\n+.text\n+\n+.globl upcall_new_stack\n+.globl upcall_del_stack\n+.globl __morestack\n+\n+.hidden __morestack\n+\n+.cfi_startproc\n+.set nomips16\n+.ent __morestack\n+__morestack:\n+        .set noreorder\n+        .set nomacro\n+\n+        addiu $29, $29, -12\n+        sw $31, 8($29)\n+        sw $30, 4($29)\n+        sw $23, 0($29)\n+\n+        // 24 = 12 (current) + 12 (previous)\n+        .cfi_def_cfa_offset 24\n+        .cfi_offset 31, -4\n+        .cfi_offset 30, -20\n+        .cfi_offset 23, -24\n+\n+        move $23, $28\n+        move $30, $29\n+        .cfi_def_cfa_register 30\n+\n+        // Save argument registers of the original function\n+        addiu $29, $29, -32\n+        sw $4, 16($29)\n+        sw $5, 20($29)\n+        sw $6, 24($29)\n+        sw $7, 28($29)\n+\n+        move $4, $14     // Size of stack arguments\n+        addu $5, $30, 24 // Address of stack arguments\n+        move $6, $15     // The amount of stack needed\n+\n+        move $28, $23\n+        lw $25, %call16(upcall_new_stack)($23)\n+        jalr $25\n+        nop\n+\n+        // Pop the saved arguments\n+        lw $4, 16($29)\n+        lw $5, 20($29)\n+        lw $6, 24($29)\n+        lw $7, 28($29)\n+        addiu $29, $29, 32\n+\n+        lw $24, 8($30)     // Grab the return pointer.\n+        addiu $24, $24, 12 // Skip past the `lw`, `jr`, `addiu` in our parent frame\n+        move $29, $2       // Switch to the new stack.\n+\n+        // for PIC\n+        lw $2, 12($30)\n+        lw $25, 16($30)\n+\n+        move $28, $23\n+        jalr $24           // Reenter the caller function\n+        nop\n+\n+        // Switch back to the rust stack\n+        move $29, $30\n+\n+        // Save the return value\n+        addiu $29, $29, -24\n+        sw $2, 16($29)\n+        sw $3, 20($29)\n+\n+        move $28, $23\n+        lw $25, %call16(upcall_del_stack)($23)\n+        jalr $25\n+        nop\n+\n+        // Restore the return value\n+        lw $2, 16($29)\n+        lw $3, 20($29)\n+        addiu $29, $29, 24\n+\n+        lw $31, 8($29)\n+        lw $30, 4($29)\n+        lw $23, 0($29)\n+        addiu $29, $29, 12\n+\n+        jr $31\n+        nop\n+.end __morestack\n+.cfi_endproc"}, {"sha": "a88fefead049fd3cc764b2a0e30e141adc291f9a", "filename": "src/rt/arch/mips/record_sp.S", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Farch%2Fmips%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Farch%2Fmips%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2Frecord_sp.S?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -16,8 +16,8 @@ record_sp_limit:\n         .set mips32r2\n         rdhwr $3, $29\n         .set pop\n-        addiu $3, $3, -0x7008\n-        sw $4, 4($3)\n+        addiu $3, $3, -0x7004\n+        sw $4, 0($3)\n         jr $31\n         nop\n .end record_sp_limit\n@@ -33,8 +33,8 @@ get_sp_limit:\n         .set mips32r2\n         rdhwr $3, $29\n         .set pop\n-        addiu $3, $3, -0x7008\n-        lw $2, 4($3)\n+        addiu $3, $3, -0x7004\n+        lw $2, 0($3)\n         jr $31\n         nop\n .end get_sp_limit"}, {"sha": "672af608db86358053ad1880a5897f3371547999", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/c2bf9bf9fed8de0c399125feba8252ad263a71fc/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=c2bf9bf9fed8de0c399125feba8252ad263a71fc", "patch": "@@ -144,7 +144,7 @@\n #define RED_ZONE_SIZE RZ_LINUX_64\n #endif\n #ifdef __mips__\n-#define RED_ZONE_SIZE RZ_LINUX_32\n+#define RED_ZONE_SIZE RZ_MAC_32\n #endif\n #endif\n #ifdef __APPLE__"}]}