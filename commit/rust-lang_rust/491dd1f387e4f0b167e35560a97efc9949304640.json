{"sha": "491dd1f387e4f0b167e35560a97efc9949304640", "node_id": "C_kwDOAAsO6NoAKDQ5MWRkMWYzODdlNGYwYjE2N2UzNTU2MGE5N2VmYzk5NDkzMDQ2NDA", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-08-28T17:02:00Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-12-03T22:51:49Z"}, "message": "Adjust llvm wrapper for unwinding support for inlineasm", "tree": {"sha": "c2a6ecc0913a65cc7c06b9ef8850c88c6ffd6398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a6ecc0913a65cc7c06b9ef8850c88c6ffd6398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/491dd1f387e4f0b167e35560a97efc9949304640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/491dd1f387e4f0b167e35560a97efc9949304640", "html_url": "https://github.com/rust-lang/rust/commit/491dd1f387e4f0b167e35560a97efc9949304640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/491dd1f387e4f0b167e35560a97efc9949304640/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940b2eabad13d7781316d077ea4b64d559242f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/940b2eabad13d7781316d077ea4b64d559242f50", "html_url": "https://github.com/rust-lang/rust/commit/940b2eabad13d7781316d077ea4b64d559242f50"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "aa979c6d77c78d052d7cfa9c37e3ee4048c2ca6b", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/491dd1f387e4f0b167e35560a97efc9949304640/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491dd1f387e4f0b167e35560a97efc9949304640/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=491dd1f387e4f0b167e35560a97efc9949304640", "patch": "@@ -450,6 +450,7 @@ pub(crate) fn inline_asm_call(\n ) -> Option<&'ll Value> {\n     let volatile = if volatile { llvm::True } else { llvm::False };\n     let alignstack = if alignstack { llvm::True } else { llvm::False };\n+    let can_throw = llvm::False;\n \n     let argtys = inputs\n         .iter()\n@@ -475,6 +476,7 @@ pub(crate) fn inline_asm_call(\n                 volatile,\n                 alignstack,\n                 llvm::AsmDialect::from_generic(dia),\n+                can_throw,\n             );\n             let call = bx.call(fty, v, inputs, None);\n "}, {"sha": "d9a6723fe27fde21a2515e2a377b1b0186ee5494", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/491dd1f387e4f0b167e35560a97efc9949304640/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491dd1f387e4f0b167e35560a97efc9949304640/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=491dd1f387e4f0b167e35560a97efc9949304640", "patch": "@@ -1847,6 +1847,7 @@ extern \"C\" {\n         SideEffects: Bool,\n         AlignStack: Bool,\n         Dialect: AsmDialect,\n+        CanThrow: Bool,\n     ) -> &Value;\n     pub fn LLVMRustInlineAsmVerify(\n         Ty: &Type,"}, {"sha": "ccfc6bdc7350b587860014fc37b9711781a67fa0", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/491dd1f387e4f0b167e35560a97efc9949304640/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/491dd1f387e4f0b167e35560a97efc9949304640/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=491dd1f387e4f0b167e35560a97efc9949304640", "patch": "@@ -445,11 +445,12 @@ extern \"C\" LLVMValueRef\n LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString, size_t AsmStringLen,\n                   char *Constraints, size_t ConstraintsLen,\n                   LLVMBool HasSideEffects, LLVMBool IsAlignStack,\n-                  LLVMRustAsmDialect Dialect) {\n+                  LLVMRustAsmDialect Dialect, LLVMBool CanThrow) {\n   return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n                              StringRef(AsmString, AsmStringLen),\n                              StringRef(Constraints, ConstraintsLen),\n-                             HasSideEffects, IsAlignStack, fromRust(Dialect)));\n+                             HasSideEffects, IsAlignStack,\n+                             fromRust(Dialect), CanThrow));\n }\n \n extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,"}]}