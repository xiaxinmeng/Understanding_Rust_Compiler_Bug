{"sha": "8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "node_id": "C_kwDOAAsO6NoAKDhhMGViY2E5N2VhYmFlZDE0YTM2ZDkwYWEyNTMyN2RjZWMyZmE4YjE", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-04T23:35:49Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-27T22:58:54Z"}, "message": "Update static AFIT tests based on feedback", "tree": {"sha": "3f5e2a5f7db28d489e5c68436215c4ae2d9973ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f5e2a5f7db28d489e5c68436215c4ae2d9973ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "html_url": "https://github.com/rust-lang/rust/commit/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "html_url": "https://github.com/rust-lang/rust/commit/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2"}], "stats": {"total": 172, "additions": 28, "deletions": 144}, "files": [{"sha": "8f679190d7a12aea66536002c631833938eef91d", "filename": "src/test/ui/async-await/in-trait/async-associated-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "patch": "@@ -6,7 +6,7 @@\n use std::fmt::Debug;\n \n trait MyTrait<'a, 'b, T> where Self: 'a, T: Debug + Sized + 'b {\n-    type MyAssoc;// = (&'a T, &'b U);\n+    type MyAssoc;\n \n     async fn foo(&'a self, key: &'b T) -> Self::MyAssoc;\n }"}, {"sha": "85d29eb703e7673ad6a2f7b1240dced57929af4c", "filename": "src/test/ui/async-await/in-trait/async-associated-types2-desugared.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.rs?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -1,31 +0,0 @@\n-// edition: 2021\n-\n-#![feature(async_fn_in_trait)]\n-#![allow(incomplete_features)]\n-\n-use std::future::Future;\n-\n-trait MyTrait {\n-    type Fut<'a>: Future<Output = i32>\n-    where\n-        Self: 'a;\n-\n-    async fn foo(&self) -> Self::Fut<'a>;\n-    //~^ ERROR use of undeclared lifetime name `'a`\n-    //~| ERROR the parameter type `Self` may not live long enough\n-}\n-\n-impl MyTrait for i32 {\n-    type Fut<'a> = impl Future + 'a\n-    where\n-        Self: 'a;\n-    //~^^^ ERROR `impl Trait` in type aliases is unstable\n-\n-    fn foo<'a>(&'a self) -> Self::Fut<'a> {\n-        async {\n-            *self\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "6bc553b26350affffa5a5804d847254abca1b52f", "filename": "src/test/ui/async-await/in-trait/async-associated-types2-desugared.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2-desugared.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -1,42 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/async-associated-types2-desugared.rs:13:38\n-   |\n-LL |     async fn foo(&self) -> Self::Fut<'a>;\n-   |                                      ^^ undeclared lifetime\n-   |\n-help: consider introducing lifetime `'a` here\n-   |\n-LL |     async fn foo<'a>(&self) -> Self::Fut<'a>;\n-   |                 ++++\n-help: consider introducing lifetime `'a` here\n-   |\n-LL | trait MyTrait<'a> {\n-   |              ++++\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/async-associated-types2-desugared.rs:19:20\n-   |\n-LL |     type Fut<'a> = impl Future + 'a\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0310]: the parameter type `Self` may not live long enough\n-  --> $DIR/async-associated-types2-desugared.rs:13:28\n-   |\n-LL |     async fn foo(&self) -> Self::Fut<'a>;\n-   |                            ^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `Self: 'static`...\n-   = note: ...so that the type `Self` will meet its required lifetime bounds...\n-note: ...that is required by this bound\n-  --> $DIR/async-associated-types2-desugared.rs:11:15\n-   |\n-LL |         Self: 'a;\n-   |               ^^\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0261, E0310, E0658.\n-For more information about an error, try `rustc --explain E0261`."}, {"sha": "e546a0579c66f2f5774bd9b98b00943575b6a259", "filename": "src/test/ui/async-await/in-trait/async-associated-types2.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "patch": "@@ -1,6 +1,8 @@\n+// check-pass\n // edition: 2021\n \n #![feature(async_fn_in_trait)]\n+#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n use std::future::Future;\n@@ -10,19 +12,15 @@ trait MyTrait {\n     where\n         Self: 'a;\n \n-    fn foo(&self) -> Self::Fut<'a>;\n-    //~^ ERROR use of undeclared lifetime name `'a`\n+    fn foo<'a>(&'a self) -> Self::Fut<'a>;\n }\n \n impl MyTrait for i32 {\n-    type Fut<'a> = impl Future + 'a\n+    type Fut<'a> = impl Future<Output = i32> + 'a\n     where\n         Self: 'a;\n-    //~^^^ ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR expected `<i32 as MyTrait>::Fut<'a>` to be a future that resolves to `i32`, but it resolves to `<<i32 as MyTrait>::Fut<'a> as Future>::Output`\n \n     fn foo<'a>(&'a self) -> Self::Fut<'a> {\n-        //~^ ERROR `impl` item signature doesn't match `trait` item signature\n         async {\n             *self\n         }"}, {"sha": "f3343852fa0932045dfbb7018c6086248a1ac569", "filename": "src/test/ui/async-await/in-trait/async-associated-types2.stderr", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.stderr?ref=97423d331f5dbed3bbbf474e3b6bd2d8b7bd9af2", "patch": "@@ -1,63 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/async-associated-types2.rs:13:32\n-   |\n-LL |     fn foo(&self) -> Self::Fut<'a>;\n-   |                                ^^ undeclared lifetime\n-   |\n-help: consider introducing lifetime `'a` here\n-   |\n-LL |     fn foo<'a>(&self) -> Self::Fut<'a>;\n-   |           ++++\n-help: consider introducing lifetime `'a` here\n-   |\n-LL | trait MyTrait<'a> {\n-   |              ++++\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/async-associated-types2.rs:18:20\n-   |\n-LL |     type Fut<'a> = impl Future + 'a\n-   |                    ^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0271]: expected `<i32 as MyTrait>::Fut<'a>` to be a future that resolves to `i32`, but it resolves to `<<i32 as MyTrait>::Fut<'a> as Future>::Output`\n-  --> $DIR/async-associated-types2.rs:18:20\n-   |\n-LL |     type Fut<'a> = impl Future + 'a\n-   |                    ^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n-   |\n-   = note:         expected type `i32`\n-           found associated type `<<i32 as MyTrait>::Fut<'a> as Future>::Output`\n-note: required by a bound in `MyTrait::Fut`\n-  --> $DIR/async-associated-types2.rs:9:26\n-   |\n-LL |     type Fut<'a>: Future<Output = i32>\n-   |                          ^^^^^^^^^^^^ required by this bound in `MyTrait::Fut`\n-help: consider constraining the associated type `<<i32 as MyTrait>::Fut<'a> as Future>::Output` to `i32`\n-   |\n-LL |     type Fut<'a> = impl Future<Output = i32> + 'a\n-   |                               ++++++++++++++\n-\n-error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/async-associated-types2.rs:24:5\n-   |\n-LL |     fn foo(&self) -> Self::Fut<'a>;\n-   |     ------------------------------- expected `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'static>`\n-...\n-LL |     fn foo<'a>(&'a self) -> Self::Fut<'a> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'1>`\n-   |\n-   = note: expected `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'static>`\n-              found `fn(&'1 i32) -> <i32 as MyTrait>::Fut<'1>`\n-help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n-  --> $DIR/async-associated-types2.rs:13:22\n-   |\n-LL |     fn foo(&self) -> Self::Fut<'a>;\n-   |                      ^^^^ consider borrowing this type parameter in the trait\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0261, E0271, E0658.\n-For more information about an error, try `rustc --explain E0261`."}, {"sha": "faf9a43d352d5a097c1f2c05987c5bd7062dc20c", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2-rpitit.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2-rpitit.rs?ref=8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> impl Future<Output = i32> + '_ {\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "594baa91ad8ba61c21eb6914ae4c0b24e5fedd0b", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0ebca97eabaed14a36d90aa25327dcec2fa8b1/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=8a0ebca97eabaed14a36d90aa25327dcec2fa8b1", "patch": "@@ -8,7 +8,7 @@ use std::future::Future;\n trait MyTrait {\n     async fn foo(&self) -> i32;\n }\n-    \n+\n impl MyTrait for i32 {\n     fn foo(&self) -> impl Future<Output = i32> {\n         //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]"}]}