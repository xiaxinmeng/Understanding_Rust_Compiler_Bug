{"sha": "545cdf955e55960cc1047f80ff24e5e34e68693b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NWNkZjk1NWU1NTk2MGNjMTA0N2Y4MGZmMjRlNWUzNGU2ODY5M2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-31T11:24:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T11:24:30Z"}, "message": "Merge #10091\n\n10091: fix: fix \"disjunction in conjunction\" panic r=matklad a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10073\r\n\r\nThe DNF construction code created expressions that were combined in a way that made us \"forget\" to make their contents valid DNF again. This PR fixes that by flattening nested `any(any())` and `all(all())` predicates. There was also a typo that led to a redundant call to `make_nnf` instead of the correct recursive call to `make_dnf` (but this didn't seem to break/fix anything).\r\n\r\nThis also adds some light property testing, though I'm not really sure this is the best way to do it.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "3b03b843d2d2b5ff7666df195d4a5e68db1dc630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b03b843d2d2b5ff7666df195d4a5e68db1dc630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/545cdf955e55960cc1047f80ff24e5e34e68693b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLhFuCRBK7hj4Ov3rIwAAWxoIAGLuPiQwk/NQa0eQefmRTU90\ngVeEknkYDnUIgQ2p2mUoq+62mhk3mX2QkPqQrDwDsM6+6T33L5DIxC7RWaHDwzjY\n9DRvUkM2Tij4MQt7dswMXECqoMoZMmU7MO7oWvbxG723oRKU5pdvRjQ19cBE4cJ6\nB6TEoP5blvtWyZjblNbmQY8scmd3WevkMVQXdDQ2O2+WLy8UjJxWA6qAEYyZ0fI7\nCKJMuUQOBUznsqsZQy86uOR2p5jVU/9yyuiImrOKQMRTWAjOK52k3FgPf5pYFgkk\nDbfhRJulWwZ/haBDxlr9uCZCDLVNvOqCt6Xw4gMZPvO99+GOitO6hOb8UTtt0yg=\n=WvKj\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b03b843d2d2b5ff7666df195d4a5e68db1dc630\nparent 70dbf35712888e035a9a8ffdc91315725303b12f\nparent 8c9de51fa354f7d2486ba8b89129daedbbb62155\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630409070 +0000\ncommitter GitHub <noreply@github.com> 1630409070 +0000\n\nMerge #10091\n\n10091: fix: fix \"disjunction in conjunction\" panic r=matklad a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10073\r\n\r\nThe DNF construction code created expressions that were combined in a way that made us \"forget\" to make their contents valid DNF again. This PR fixes that by flattening nested `any(any())` and `all(all())` predicates. There was also a typo that led to a redundant call to `make_nnf` instead of the correct recursive call to `make_dnf` (but this didn't seem to break/fix anything).\r\n\r\nThis also adds some light property testing, though I'm not really sure this is the best way to do it.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/545cdf955e55960cc1047f80ff24e5e34e68693b", "html_url": "https://github.com/rust-lang/rust/commit/545cdf955e55960cc1047f80ff24e5e34e68693b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/545cdf955e55960cc1047f80ff24e5e34e68693b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70dbf35712888e035a9a8ffdc91315725303b12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70dbf35712888e035a9a8ffdc91315725303b12f", "html_url": "https://github.com/rust-lang/rust/commit/70dbf35712888e035a9a8ffdc91315725303b12f"}, {"sha": "8c9de51fa354f7d2486ba8b89129daedbbb62155", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9de51fa354f7d2486ba8b89129daedbbb62155", "html_url": "https://github.com/rust-lang/rust/commit/8c9de51fa354f7d2486ba8b89129daedbbb62155"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "1842bf46da2b70001fa6cd2cc98c7f20b593e775", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/545cdf955e55960cc1047f80ff24e5e34e68693b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/545cdf955e55960cc1047f80ff24e5e34e68693b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=545cdf955e55960cc1047f80ff24e5e34e68693b", "patch": "@@ -47,6 +47,12 @@ version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"33954243bd79057c2de7338850b85983a44588021f8a5fee574a8888c6de4344\"\n \n+[[package]]\n+name = \"arbitrary\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"577b08a4acd7b99869f863c50011b01eb73424ccc798ecd996f2e24817adfca7\"\n+\n [[package]]\n name = \"arrayvec\"\n version = \"0.7.1\"\n@@ -147,8 +153,11 @@ checksum = \"e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2\"\n name = \"cfg\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arbitrary\",\n+ \"derive_arbitrary\",\n  \"expect-test\",\n  \"mbe\",\n+ \"oorandom\",\n  \"rustc-hash\",\n  \"syntax\",\n  \"tt\",\n@@ -291,6 +300,17 @@ dependencies = [\n  \"num_cpus\",\n ]\n \n+[[package]]\n+name = \"derive_arbitrary\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b24629208e87a2d8b396ff43b15c4afb0a69cea3fbbaa9ed9b92b7c02f0aed73\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"dissimilar\"\n version = \"1.0.2\""}, {"sha": "132505fbf4a6d5ad6fb86a3aa31c00ad3abe5c1e", "filename": "crates/cfg/Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2FCargo.toml?ref=545cdf955e55960cc1047f80ff24e5e34e68693b", "patch": "@@ -17,3 +17,9 @@ tt = { path = \"../tt\", version = \"0.0.0\" }\n mbe = { path = \"../mbe\" }\n syntax = { path = \"../syntax\" }\n expect-test = \"1.1\"\n+oorandom = \"11\"\n+# We depend on both individually instead of using `features = [\"derive\"]` to microoptimize the\n+# build graph: if the feature was enabled, syn would be built early on in the graph if `smolstr`\n+# supports `arbitrary`. This way, we avoid feature unification.\n+arbitrary = \"1\"\n+derive_arbitrary = \"1\""}, {"sha": "2158fb9f2dc927013b3c0470b7be556e843b6ec3", "filename": "crates/cfg/src/cfg_expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs?ref=545cdf955e55960cc1047f80ff24e5e34e68693b", "patch": "@@ -50,6 +50,7 @@ impl fmt::Display for CfgAtom {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[cfg_attr(test, derive(derive_arbitrary::Arbitrary))]\n pub enum CfgExpr {\n     Invalid,\n     Atom(CfgAtom),\n@@ -128,3 +129,17 @@ fn next_cfg_expr(it: &mut SliceIter<tt::TokenTree>) -> Option<CfgExpr> {\n     }\n     Some(ret)\n }\n+\n+#[cfg(test)]\n+impl arbitrary::Arbitrary<'_> for CfgAtom {\n+    fn arbitrary(u: &mut arbitrary::Unstructured<'_>) -> arbitrary::Result<Self> {\n+        if u.arbitrary()? {\n+            Ok(CfgAtom::Flag(String::arbitrary(u)?.into()))\n+        } else {\n+            Ok(CfgAtom::KeyValue {\n+                key: String::arbitrary(u)?.into(),\n+                value: String::arbitrary(u)?.into(),\n+            })\n+        }\n+    }\n+}"}, {"sha": "0ae685a7d0de6ee88c80036f7da37ebd00c5d7b2", "filename": "crates/cfg/src/dnf.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2Fsrc%2Fdnf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2Fsrc%2Fdnf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fdnf.rs?ref=545cdf955e55960cc1047f80ff24e5e34e68693b", "patch": "@@ -255,11 +255,11 @@ impl Builder {\n fn make_dnf(expr: CfgExpr) -> CfgExpr {\n     match expr {\n         CfgExpr::Invalid | CfgExpr::Atom(_) | CfgExpr::Not(_) => expr,\n-        CfgExpr::Any(e) => CfgExpr::Any(e.into_iter().map(make_dnf).collect()),\n+        CfgExpr::Any(e) => flatten(CfgExpr::Any(e.into_iter().map(make_dnf).collect())),\n         CfgExpr::All(e) => {\n-            let e = e.into_iter().map(make_nnf).collect::<Vec<_>>();\n+            let e = e.into_iter().map(make_dnf).collect::<Vec<_>>();\n \n-            CfgExpr::Any(distribute_conj(&e))\n+            flatten(CfgExpr::Any(distribute_conj(&e)))\n         }\n     }\n }\n@@ -289,7 +289,7 @@ fn distribute_conj(conj: &[CfgExpr]) -> Vec<CfgExpr> {\n         }\n     }\n \n-    let mut out = Vec::new();\n+    let mut out = Vec::new(); // contains only `all()`\n     let mut with = Vec::new();\n \n     go(&mut out, &mut with, conj);\n@@ -318,3 +318,28 @@ fn make_nnf(expr: CfgExpr) -> CfgExpr {\n         },\n     }\n }\n+\n+/// Collapses nested `any()` and `all()` predicates.\n+fn flatten(expr: CfgExpr) -> CfgExpr {\n+    match expr {\n+        CfgExpr::All(inner) => CfgExpr::All(\n+            inner\n+                .into_iter()\n+                .flat_map(|e| match e {\n+                    CfgExpr::All(inner) => inner,\n+                    _ => vec![e],\n+                })\n+                .collect(),\n+        ),\n+        CfgExpr::Any(inner) => CfgExpr::Any(\n+            inner\n+                .into_iter()\n+                .flat_map(|e| match e {\n+                    CfgExpr::Any(inner) => inner,\n+                    _ => vec![e],\n+                })\n+                .collect(),\n+        ),\n+        _ => expr,\n+    }\n+}"}, {"sha": "bdc3f854e08661cd6cd9e377813ae6e8530a1fc3", "filename": "crates/cfg/src/tests.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545cdf955e55960cc1047f80ff24e5e34e68693b/crates%2Fcfg%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Ftests.rs?ref=545cdf955e55960cc1047f80ff24e5e34e68693b", "patch": "@@ -1,3 +1,4 @@\n+use arbitrary::{Arbitrary, Unstructured};\n use expect_test::{expect, Expect};\n use mbe::syntax_node_to_token_tree;\n use syntax::{ast, AstNode};\n@@ -130,6 +131,18 @@ fn nested() {\n     check_dnf(\"#![cfg(not(all(all(a, b))))]\", expect![[r#\"#![cfg(any(not(a), not(b)))]\"#]]);\n }\n \n+#[test]\n+fn regression() {\n+    check_dnf(\"#![cfg(all(not(not(any(any(any()))))))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(any(all(any()))))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any())))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+\n+    check_dnf(\"#![cfg(all(all(any(), x)))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any()), x))]\", expect![[r##\"#![cfg(any())]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any(x))))]\", expect![[r##\"#![cfg(x)]\"##]]);\n+    check_dnf(\"#![cfg(all(all(any(x), x)))]\", expect![[r##\"#![cfg(all(x, x))]\"##]]);\n+}\n+\n #[test]\n fn hints() {\n     let mut opts = CfgOptions::default();\n@@ -191,3 +204,21 @@ fn why_inactive() {\n         expect![[\"test and test2 are enabled and a is disabled\"]],\n     );\n }\n+\n+#[test]\n+fn proptest() {\n+    const REPEATS: usize = 512;\n+\n+    let mut rng = oorandom::Rand32::new(123456789);\n+    let mut buf = Vec::new();\n+    for _ in 0..REPEATS {\n+        buf.clear();\n+        while buf.len() < 512 {\n+            buf.extend(rng.rand_u32().to_ne_bytes());\n+        }\n+\n+        let mut u = Unstructured::new(&buf);\n+        let cfg = CfgExpr::arbitrary(&mut u).unwrap();\n+        DnfExpr::new(cfg);\n+    }\n+}"}]}