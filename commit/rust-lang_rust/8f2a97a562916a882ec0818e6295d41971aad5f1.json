{"sha": "8f2a97a562916a882ec0818e6295d41971aad5f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMmE5N2E1NjI5MTZhODgyZWMwODE4ZTYyOTVkNDE5NzFhYWQ1ZjE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-28T00:20:12Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-29T04:14:08Z"}, "message": "Add partial support for if expressions resulting in generic types", "tree": {"sha": "ffe8982b5f86bea44766186e68dbcca0a1482f99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe8982b5f86bea44766186e68dbcca0a1482f99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f2a97a562916a882ec0818e6295d41971aad5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2a97a562916a882ec0818e6295d41971aad5f1", "html_url": "https://github.com/rust-lang/rust/commit/8f2a97a562916a882ec0818e6295d41971aad5f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f2a97a562916a882ec0818e6295d41971aad5f1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38d54535840603b131cfac0aafc4133e62a7fb56", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d54535840603b131cfac0aafc4133e62a7fb56", "html_url": "https://github.com/rust-lang/rust/commit/38d54535840603b131cfac0aafc4133e62a7fb56"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "3995e1de5715db03a604777b2f7f003224453f73", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f2a97a562916a882ec0818e6295d41971aad5f1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2a97a562916a882ec0818e6295d41971aad5f1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8f2a97a562916a882ec0818e6295d41971aad5f1", "patch": "@@ -3046,11 +3046,14 @@ fn trans_if(@block_ctxt cx, @ast.expr cond,\n \n             // If we have an else expression, then the entire\n             // if expression can have a non-nil type.\n-            // FIXME: Handle dynamic type sizes\n             auto expr_ty = ty.expr_ty(elexpr);\n-            expr_llty = type_of(else_res.bcx.fcx.ccx, expr_ty);\n-            if (ty.type_is_structural(expr_ty)) {\n-                expr_llty = T_ptr(expr_llty);\n+            if (ty.type_has_dynamic_size(expr_ty)) {\n+                expr_llty = T_typaram_ptr(cx.fcx.ccx.tn);\n+            } else {\n+                expr_llty = type_of(else_res.bcx.fcx.ccx, expr_ty);\n+                if (ty.type_is_structural(expr_ty)) {\n+                    expr_llty = T_ptr(expr_llty);\n+                }\n             }\n         }\n         case (_) {"}, {"sha": "f23ce23a6b7e97073a54b3f8a730166cc35d022c", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8f2a97a562916a882ec0818e6295d41971aad5f1/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2a97a562916a882ec0818e6295d41971aad5f1/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=8f2a97a562916a882ec0818e6295d41971aad5f1", "patch": "@@ -0,0 +1,53 @@\n+// xfail-boot\n+// xfail-stage0\n+// -*- rust -*-\n+\n+// Tests for if as expressions with dynamic type sizes\n+\n+type compare[T] = fn(&T t1, &T t2) -> bool;\n+\n+fn test_generic[T](&T expected, &T not_expected, &compare[T] eq) {\n+  let T actual = if (true) { expected } else { not_expected };\n+  check (eq(expected, actual));\n+}\n+\n+fn test_bool() {\n+  fn compare_bool(&bool b1, &bool b2) -> bool {\n+    ret b1 == b2;\n+  }\n+  auto eq = bind compare_bool(_, _);\n+  test_generic[bool](true, false, eq);\n+}\n+\n+fn test_tup() {\n+  type t = tup(int, int);\n+  fn compare_tup(&t t1, &t t2) -> bool {\n+    ret t1 == t2;\n+  }\n+  auto eq = bind compare_tup(_, _);\n+  test_generic[t](tup(1, 2), tup(2, 3), eq);\n+}\n+\n+fn test_vec() {\n+  fn compare_vec(&vec[int] v1, &vec[int] v2) -> bool {\n+    ret v1 == v2;\n+  }\n+  auto eq = bind compare_vec(_, _);\n+  test_generic[vec[int]](vec(1, 2), vec(2, 3), eq);\n+}\n+\n+fn test_box() {\n+  fn compare_box(&@bool b1, &@bool b2) -> bool {\n+    ret *b1 == *b2;\n+  }\n+  auto eq = bind compare_box(_, _);\n+  test_generic[@bool](@true, @false, eq);\n+}\n+\n+fn main() {\n+  test_bool();\n+  test_tup();\n+  // FIXME: These two don't pass yet\n+  test_vec();\n+  test_box();\n+}\n\\ No newline at end of file"}]}