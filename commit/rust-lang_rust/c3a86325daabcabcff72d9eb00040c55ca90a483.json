{"sha": "c3a86325daabcabcff72d9eb00040c55ca90a483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYTg2MzI1ZGFhYmNhYmNmZjcyZDllYjAwMDQwYzU1Y2E5MGE0ODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-31T19:57:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-31T19:57:26Z"}, "message": "Merge pull request #2672 from Speedy37/master\n\nfix #2520: change expand_repeat loop stop condition", "tree": {"sha": "405355b7f8df139992428386bc4395b21c11f9a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/405355b7f8df139992428386bc4395b21c11f9a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a86325daabcabcff72d9eb00040c55ca90a483", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeC6gmCRBK7hj4Ov3rIwAAdHIIAGq+MZX3zms5oKqY9VhnwXGx\ng/+d0Jk2vks+hfSyJER6t7Q7Sewc4Nh6e4v2LoOgskkiS+7f/9pzh1xR8sKSCqHl\nz1wgUqJzUdhcxIytJ4vObZcpfwJkGyE+LIHtVx/2RVJvkV5B32p6BanhLiY2fXOH\n8iTgFTupXzBKuC2C5kVnrvOIliSQzS4mFmtwOH/evPUxatq11l1INv3+umSazzZ9\naD+gPBRtbYWOzlr+1rmOz/u1FwI1hodBlQ/JB5hkGtTl7f7ZG3xkSyepMlZoe6h7\nfsQz38osG9nEg2PAeV0oxBQt802hiE2YOUHOKdKVNd9emxT5UZe1IINDP/HAazQ=\n=XOxd\n-----END PGP SIGNATURE-----\n", "payload": "tree 405355b7f8df139992428386bc4395b21c11f9a4\nparent e4d217074d1f2c922cf8c5a247ca05fa06b0b7ed\nparent dc989309655a5a587a1d3ea154bbc21d67fea423\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1577822246 +0100\ncommitter GitHub <noreply@github.com> 1577822246 +0100\n\nMerge pull request #2672 from Speedy37/master\n\nfix #2520: change expand_repeat loop stop condition"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a86325daabcabcff72d9eb00040c55ca90a483", "html_url": "https://github.com/rust-lang/rust/commit/c3a86325daabcabcff72d9eb00040c55ca90a483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a86325daabcabcff72d9eb00040c55ca90a483/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4d217074d1f2c922cf8c5a247ca05fa06b0b7ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d217074d1f2c922cf8c5a247ca05fa06b0b7ed", "html_url": "https://github.com/rust-lang/rust/commit/e4d217074d1f2c922cf8c5a247ca05fa06b0b7ed"}, {"sha": "dc989309655a5a587a1d3ea154bbc21d67fea423", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc989309655a5a587a1d3ea154bbc21d67fea423", "html_url": "https://github.com/rust-lang/rust/commit/dc989309655a5a587a1d3ea154bbc21d67fea423"}], "stats": {"total": 120, "additions": 83, "deletions": 37}, "files": [{"sha": "7662020f36dcd5c75739a1a4c1219a6796ce6947", "filename": "crates/ra_mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c3a86325daabcabcff72d9eb00040c55ca90a483/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a86325daabcabcff72d9eb00040c55ca90a483/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=c3a86325daabcabcff72d9eb00040c55ca90a483", "patch": "@@ -14,21 +14,24 @@ impl Bindings {\n         self.inner.contains_key(name)\n     }\n \n-    fn get(&self, name: &str, nesting: &[usize]) -> Result<&Fragment, ExpandError> {\n+    fn get(&self, name: &str, nesting: &mut [NestingState]) -> Result<&Fragment, ExpandError> {\n         let mut b = self.inner.get(name).ok_or_else(|| {\n             ExpandError::BindingError(format!(\"could not find binding `{}`\", name))\n         })?;\n-        for &idx in nesting.iter() {\n+        for nesting_state in nesting.iter_mut() {\n+            nesting_state.hit = true;\n             b = match b {\n                 Binding::Fragment(_) => break,\n-                Binding::Nested(bs) => bs.get(idx).ok_or_else(|| {\n+                Binding::Nested(bs) => bs.get(nesting_state.idx).ok_or_else(|| {\n+                    nesting_state.at_end = true;\n                     ExpandError::BindingError(format!(\"could not find nested binding `{}`\", name))\n                 })?,\n                 Binding::Empty => {\n+                    nesting_state.at_end = true;\n                     return Err(ExpandError::BindingError(format!(\n                         \"could not find empty binding `{}`\",\n                         name\n-                    )))\n+                    )));\n                 }\n             };\n         }\n@@ -51,15 +54,25 @@ pub(super) fn transcribe(\n     bindings: &Bindings,\n ) -> Result<tt::Subtree, ExpandError> {\n     assert!(template.delimiter == None);\n-    let mut ctx = ExpandCtx { bindings: &bindings, nesting: Vec::new(), var_expanded: false };\n+    let mut ctx = ExpandCtx { bindings: &bindings, nesting: Vec::new() };\n     expand_subtree(&mut ctx, template)\n }\n \n+#[derive(Debug)]\n+struct NestingState {\n+    idx: usize,\n+    /// `hit` is currently necessary to tell `expand_repeat` if it should stop\n+    /// because there is no variable in use by the current repetition\n+    hit: bool,\n+    /// `at_end` is currently necessary to tell `expand_repeat` if it should stop\n+    /// because there is no more value avaible for the current repetition\n+    at_end: bool,\n+}\n+\n #[derive(Debug)]\n struct ExpandCtx<'a> {\n     bindings: &'a Bindings,\n-    nesting: Vec<usize>,\n-    var_expanded: bool,\n+    nesting: Vec<NestingState>,\n }\n \n fn expand_subtree(ctx: &mut ExpandCtx, template: &tt::Subtree) -> Result<tt::Subtree, ExpandError> {\n@@ -121,9 +134,7 @@ fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> Result<Fragment, ExpandError>\n         .into();\n         Fragment::Tokens(tt)\n     } else {\n-        let fragment = ctx.bindings.get(&v, &ctx.nesting)?.clone();\n-        ctx.var_expanded = true;\n-        fragment\n+        ctx.bindings.get(&v, &mut ctx.nesting)?.clone()\n     };\n     Ok(res)\n }\n@@ -135,37 +146,24 @@ fn expand_repeat(\n     separator: Option<Separator>,\n ) -> Result<Fragment, ExpandError> {\n     let mut buf: Vec<tt::TokenTree> = Vec::new();\n-    ctx.nesting.push(0);\n+    ctx.nesting.push(NestingState { idx: 0, at_end: false, hit: false });\n     // Dirty hack to make macro-expansion terminate.\n     // This should be replaced by a propper macro-by-example implementation\n-    let mut limit = 65536;\n+    let limit = 65536;\n     let mut has_seps = 0;\n     let mut counter = 0;\n \n-    // We store the old var expanded value, and restore it later\n-    // It is because before this `$repeat`,\n-    // it is possible some variables already expanad in the same subtree\n-    //\n-    // `some_var_expanded` keep check if the deeper subtree has expanded variables\n-    let mut some_var_expanded = false;\n-    let old_var_expanded = ctx.var_expanded;\n-    ctx.var_expanded = false;\n-\n-    while let Ok(mut t) = expand_subtree(ctx, template) {\n-        t.delimiter = None;\n-        // if no var expanded in the child, we count it as a fail\n-        if !ctx.var_expanded {\n+    loop {\n+        let res = expand_subtree(ctx, template);\n+        let nesting_state = ctx.nesting.last_mut().unwrap();\n+        if nesting_state.at_end || !nesting_state.hit {\n             break;\n         }\n-\n-        // Reset `ctx.var_expandeded` to see if there is other expanded variable\n-        // in the next matching\n-        some_var_expanded = true;\n-        ctx.var_expanded = false;\n+        nesting_state.idx += 1;\n+        nesting_state.hit = false;\n \n         counter += 1;\n-        limit -= 1;\n-        if limit == 0 {\n+        if counter == limit {\n             log::warn!(\n                 \"expand_tt excced in repeat pattern exceed limit => {:#?}\\n{:#?}\",\n                 template,\n@@ -174,8 +172,11 @@ fn expand_repeat(\n             break;\n         }\n \n-        let idx = ctx.nesting.pop().unwrap();\n-        ctx.nesting.push(idx + 1);\n+        let mut t = match res {\n+            Ok(t) => t,\n+            Err(_) => continue,\n+        };\n+        t.delimiter = None;\n         push_subtree(&mut buf, t);\n \n         if let Some(ref sep) = separator {\n@@ -203,9 +204,6 @@ fn expand_repeat(\n         }\n     }\n \n-    // Restore the `var_expanded` by combining old one and the new one\n-    ctx.var_expanded = some_var_expanded || old_var_expanded;\n-\n     ctx.nesting.pop().unwrap();\n     for _ in 0..has_seps {\n         buf.pop();"}, {"sha": "e0d689704b41649d7a9814da78e36a8d0677c60b", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c3a86325daabcabcff72d9eb00040c55ca90a483/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a86325daabcabcff72d9eb00040c55ca90a483/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=c3a86325daabcabcff72d9eb00040c55ca90a483", "patch": "@@ -1491,3 +1491,51 @@ fn debug_dump_ignore_spaces(node: &ra_syntax::SyntaxNode) -> String {\n \n     buf\n }\n+\n+#[test]\n+fn test_issue_2520() {\n+    let macro_fixture = parse_macro(\n+        r#\"\n+        macro_rules! my_macro {\n+            {\n+                ( $(\n+                    $( [] $sname:ident : $stype:ty  )?\n+                    $( [$expr:expr] $nname:ident : $ntype:ty  )?\n+                ),* )\n+            } => {\n+                Test {\n+                    $(\n+                        $( $sname, )?\n+                    )*\n+                }\n+            };\n+        }\n+    \"#,\n+    );\n+\n+    macro_fixture.assert_expand_items(\n+        r#\"my_macro ! {\n+            ([] p1 : u32 , [|_| S0K0] s : S0K0 , [] k0 : i32)\n+        }\"#,\n+        \"Test {p1 , k0 ,}\",\n+    );\n+}\n+\n+#[test]\n+fn test_repeat_bad_var() {\n+    // FIXME: the second rule of the macro should be removed and an error about\n+    // `$( $c )+` raised\n+    parse_macro(\n+        r#\"\n+        macro_rules! foo {\n+            ($( $b:ident )+) => {\n+                $( $c )+\n+            };\n+            ($( $b:ident )+) => {\n+                $( $b )+\n+            }\n+        }\n+    \"#,\n+    )\n+    .assert_expand_items(\"foo!(b0 b1);\", \"b0 b1\");\n+}"}]}