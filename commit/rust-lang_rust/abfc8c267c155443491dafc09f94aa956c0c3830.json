{"sha": "abfc8c267c155443491dafc09f94aa956c0c3830", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZmM4YzI2N2MxNTU0NDM0OTFkYWZjMDlmOTRhYTk1NmMwYzM4MzA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-21T13:46:05Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-04-06T08:32:31Z"}, "message": "Use InternedString instead of Symbol for type parameters.", "tree": {"sha": "79b8a4511407834f17373b40b031c5ada515f22d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b8a4511407834f17373b40b031c5ada515f22d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abfc8c267c155443491dafc09f94aa956c0c3830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abfc8c267c155443491dafc09f94aa956c0c3830", "html_url": "https://github.com/rust-lang/rust/commit/abfc8c267c155443491dafc09f94aa956c0c3830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abfc8c267c155443491dafc09f94aa956c0c3830/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48fa6f9631868b07309b02f479e2ec523bb58c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/48fa6f9631868b07309b02f479e2ec523bb58c2b", "html_url": "https://github.com/rust-lang/rust/commit/48fa6f9631868b07309b02f479e2ec523bb58c2b"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "5e96f4eb576f523e5d20e79454de36ec4f1f95bd", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast;\n+use syntax::symbol::InternedString;\n use syntax_pos::Span;\n use ty::{self, Ty};\n \n@@ -53,7 +53,7 @@ pub enum TypeVariableOrigin {\n     MiscVariable(Span),\n     NormalizeProjectionType(Span),\n     TypeInference(Span),\n-    TypeParameterDefinition(Span, ast::Name),\n+    TypeParameterDefinition(Span, InternedString),\n \n     /// one of the upvars or closure kind parameters in a `ClosureSubsts`\n     /// (before it has been determined)"}, {"sha": "2af4c3f9fd463ca7adfd651df4750763872a8961", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -378,7 +378,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         for param in generics.types.iter() {\n-            let name = param.name.as_str().to_string();\n+            let name = param.name.to_string();\n             let ty = trait_ref.substs.type_for_def(param);\n             let ty_str = ty.to_string();\n             flags.push((name.clone(),"}, {"sha": "f7ce55c2e1df2557598aad8467836a4fb0cb07a7", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let trait_str = tcx.item_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.types.iter().map(|param| {\n-            (param.name.as_str().to_string(),\n+            (param.name.to_string(),\n              trait_ref.substs.type_for_def(param).to_string())\n         }).collect::<FxHashMap<String, String>>();\n "}, {"sha": "88668578efb0535393585bef6c03af70b9832845", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -70,11 +70,11 @@ use std::iter;\n use std::sync::mpsc;\n use std::sync::Arc;\n use syntax::abi;\n-use syntax::ast::{self, Name, NodeId};\n+use syntax::ast::{self, NodeId};\n use syntax::attr;\n use syntax::codemap::MultiSpan;\n use syntax::feature_gate;\n-use syntax::symbol::{Symbol, keywords};\n+use syntax::symbol::{Symbol, keywords, InternedString};\n use syntax_pos::Span;\n \n use hir;\n@@ -2395,12 +2395,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_param(self,\n                     index: u32,\n-                    name: Name) -> Ty<'tcx> {\n+                    name: InternedString) -> Ty<'tcx> {\n         self.mk_ty(TyParam(ParamTy { idx: index, name: name }))\n     }\n \n     pub fn mk_self_type(self) -> Ty<'tcx> {\n-        self.mk_param(0, keywords::SelfType.name())\n+        self.mk_param(0, keywords::SelfType.name().as_str())\n     }\n \n     pub fn mk_param_from_def(self, def: &ty::TypeParameterDef) -> Ty<'tcx> {"}, {"sha": "43c5ba46b44c9bdf28e4ef6f8169bdb139ba15ae", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -712,7 +712,7 @@ pub struct FloatVarValue(pub ast::FloatTy);\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n pub struct TypeParameterDef {\n-    pub name: Name,\n+    pub name: InternedString,\n     pub def_id: DefId,\n     pub index: u32,\n     pub has_default: bool,"}, {"sha": "7a9174cbfaf73206619e80f66ffed4ded7a94384", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -24,7 +24,7 @@ use std::iter;\n use std::cmp::Ordering;\n use syntax::abi;\n use syntax::ast::{self, Name};\n-use syntax::symbol::keywords;\n+use syntax::symbol::{keywords, InternedString};\n \n use serialize;\n \n@@ -864,16 +864,16 @@ impl<'tcx> PolyFnSig<'tcx> {\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct ParamTy {\n     pub idx: u32,\n-    pub name: Name,\n+    pub name: InternedString,\n }\n \n impl<'a, 'gcx, 'tcx> ParamTy {\n-    pub fn new(index: u32, name: Name) -> ParamTy {\n+    pub fn new(index: u32, name: InternedString) -> ParamTy {\n         ParamTy { idx: index, name: name }\n     }\n \n     pub fn for_self() -> ParamTy {\n-        ParamTy::new(0, keywords::SelfType.name())\n+        ParamTy::new(0, keywords::SelfType.name().as_str())\n     }\n \n     pub fn for_def(def: &ty::TypeParameterDef) -> ParamTy {\n@@ -885,7 +885,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n     }\n \n     pub fn is_self(&self) -> bool {\n-        if self.name == keywords::SelfType.name() {\n+        if self.name == keywords::SelfType.name().as_str() {\n             assert_eq!(self.idx, 0);\n             true\n         } else {"}, {"sha": "c170c2a63e82996b697b913e67141dea58fe22bd", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -729,7 +729,7 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             }\n             TyParam(p) => {\n                 self.hash(p.idx);\n-                self.hash(p.name.as_str());\n+                self.hash(p.name);\n             }\n             TyProjection(ref data) => {\n                 self.def_id(data.item_def_id);"}, {"sha": "87d9623e4003849ae98f67628a40d12090fe155d", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -42,7 +42,7 @@ use std::ptr;\n \n use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{Symbol, InternedString};\n use rustc::ty::layout::{self, LayoutOf};\n \n pub mod gdb;\n@@ -393,7 +393,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             substs.types().zip(names).map(|(ty, name)| {\n                 let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n-                let name = CString::new(name.as_str().as_bytes()).unwrap();\n+                let name = CString::new(name.as_bytes()).unwrap();\n                 unsafe {\n                     llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),\n@@ -412,7 +412,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         return create_DIArray(DIB(cx), &template_params[..]);\n     }\n \n-    fn get_type_parameter_names(cx: &CodegenCx, generics: &ty::Generics) -> Vec<ast::Name> {\n+    fn get_type_parameter_names(cx: &CodegenCx, generics: &ty::Generics) -> Vec<InternedString> {\n         let mut names = generics.parent.map_or(vec![], |def_id| {\n             get_type_parameter_names(cx, cx.tcx.generics_of(def_id))\n         });"}, {"sha": "c4ea543ab36b6d8cd33cf831b7c2db4b8ec7e0e9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -979,7 +979,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let item_def_id = tcx.hir.local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id)];\n-                tcx.mk_param(index, tcx.hir.name(node_id))\n+                tcx.mk_param(index, tcx.hir.name(node_id).as_str())\n             }\n             Def::SelfTy(_, Some(def_id)) => {\n                 // Self in impl (we know the concrete type)."}, {"sha": "da0d4509353b5652e3a9798e45ea3e513cca9ec6", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -76,7 +76,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n-    let param = |n| tcx.mk_param(n, Symbol::intern(&format!(\"P{}\", n)));\n+    let param = |n| tcx.mk_param(n, Symbol::intern(&format!(\"P{}\", n)).as_str());\n     let name = it.name.as_str();\n     let (n_tps, inputs, output) = if name.starts_with(\"atomic_\") {\n         let split : Vec<&str> = name.split('_').collect();\n@@ -341,7 +341,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                it: &hir::ForeignItem) {\n     let param = |n| {\n-        let name = Symbol::intern(&format!(\"P{}\", n));\n+        let name = Symbol::intern(&format!(\"P{}\", n)).as_str();\n         tcx.mk_param(n, name)\n     };\n "}, {"sha": "c67327232ea3f34a93aa29ab029786302d606c01", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -649,7 +649,7 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, def_id: DefId) {\n             // local so it should be okay to just unwrap everything.\n             let trait_def_id = impl_params[&method_param.name];\n             let trait_decl_span = tcx.def_span(trait_def_id);\n-            error_194(tcx, type_span, trait_decl_span, method_param.name);\n+            error_194(tcx, type_span, trait_decl_span, &method_param.name[..]);\n         }\n     }\n }\n@@ -753,7 +753,7 @@ fn error_392<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span, param_name: ast:\n     err\n }\n \n-fn error_194(tcx: TyCtxt, span: Span, trait_decl_span: Span, name: ast::Name) {\n+fn error_194(tcx: TyCtxt, span: Span, trait_decl_span: Span, name: &str) {\n     struct_span_err!(tcx.sess, span, E0194,\n               \"type parameter `{}` shadows another type parameter of the same name\",\n               name)"}, {"sha": "a4f820d1fdcf9553488b85b9da013929f9307f47", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfc8c267c155443491dafc09f94aa956c0c3830/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=abfc8c267c155443491dafc09f94aa956c0c3830", "patch": "@@ -241,7 +241,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_owner_def_id = tcx.hir.local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n     let index = generics.type_param_to_index[&def_id];\n-    let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id));\n+    let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id).as_str());\n \n     // Don't look for bounds where the type parameter isn't in scope.\n     let parent = if item_def_id == param_owner_def_id {\n@@ -839,7 +839,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                     opt_self = Some(ty::TypeParameterDef {\n                         index: 0,\n-                        name: keywords::SelfType.name(),\n+                        name: keywords::SelfType.name().as_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n                         has_default: false,\n                         object_lifetime_default: rl::Set1::Empty,\n@@ -915,7 +915,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         ty::TypeParameterDef {\n             index: type_start + i as u32,\n-            name: p.name,\n+            name: p.name.as_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n             has_default: p.default.is_some(),\n             object_lifetime_default:\n@@ -934,7 +934,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // add a dummy parameter for the closure kind\n         types.push(ty::TypeParameterDef {\n             index: type_start,\n-            name: Symbol::intern(\"<closure_kind>\"),\n+            name: Symbol::intern(\"<closure_kind>\").as_str(),\n             def_id,\n             has_default: false,\n             object_lifetime_default: rl::Set1::Empty,\n@@ -945,7 +945,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // add a dummy parameter for the closure signature\n         types.push(ty::TypeParameterDef {\n             index: type_start + 1,\n-            name: Symbol::intern(\"<closure_signature>\"),\n+            name: Symbol::intern(\"<closure_signature>\").as_str(),\n             def_id,\n             has_default: false,\n             object_lifetime_default: rl::Set1::Empty,\n@@ -956,7 +956,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.with_freevars(node_id, |fv| {\n             types.extend(fv.iter().zip(2..).map(|(_, i)| ty::TypeParameterDef {\n                 index: type_start + i,\n-                name: Symbol::intern(\"<upvar>\"),\n+                name: Symbol::intern(\"<upvar>\").as_str(),\n                 def_id,\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n@@ -1436,7 +1436,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T:Foo>`).\n     for param in ast_generics.ty_params() {\n-        let param_ty = ty::ParamTy::new(index, param.name).to_ty(tcx);\n+        let param_ty = ty::ParamTy::new(index, param.name.as_str()).to_ty(tcx);\n         index += 1;\n \n         let bounds = compute_bounds(&icx,"}]}