{"sha": "0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOThhYzdiZGQ4MDdhYmViOGY2YjQyM2MyMmIxZTU5NGZiMGI0YmY=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-15T13:40:28Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-15T14:29:18Z"}, "message": "Add fn_sig_opt to get fn signature from HirId", "tree": {"sha": "1677b774d9af36b387b73bd80fc31a958a12de45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1677b774d9af36b387b73bd80fc31a958a12de45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf", "html_url": "https://github.com/rust-lang/rust/commit/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93796b2346a1177809628ea141f0dd958f4c4d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/93796b2346a1177809628ea141f0dd958f4c4d29", "html_url": "https://github.com/rust-lang/rust/commit/93796b2346a1177809628ea141f0dd958f4c4d29"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "b6730afa4af7de788067d51971c7129aea9f92a7", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=0198ac7bdd807abeb8f6b423c22b1e594fb0b4bf", "patch": "@@ -1,12 +1,12 @@\n use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n use rustc_hir::{\n     intravisit::{walk_expr, walk_stmt, NestedVisitorMap, Visitor},\n-    Body, Expr, ExprKind, Lit, Stmt, StmtKind,\n+    Body, Expr, ExprKind, HirId, Lit, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::{\n     hir::map::Map,\n-    ty::{self, FloatTy, IntTy, Ty},\n+    ty::{self, FloatTy, IntTy, PolyFnSig, Ty},\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -64,15 +64,15 @@ struct NumericFallbackVisitor<'a, 'tcx> {\n impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n-            ty_bounds: vec![TyBound::Nothing],\n+            ty_bounds: Vec::new(),\n             cx,\n         }\n     }\n \n     /// Check whether a passed literal has potential to cause fallback or not.\n     fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>) {\n-        let ty_bound = self.ty_bounds.last().unwrap();\n         if_chain! {\n+                if let Some(ty_bound) = self.ty_bounds.last();\n                 if matches!(lit.node,\n                             LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed));\n                 if matches!(lit_ty.kind(), ty::Int(IntTy::I32) | ty::Float(FloatTy::F64));\n@@ -98,19 +98,14 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             ExprKind::Call(func, args) => {\n-                if_chain! {\n-                    if let ExprKind::Path(ref func_path) = func.kind;\n-                    if let Some(def_id) = self.cx.qpath_res(func_path, func.hir_id).opt_def_id();\n-                    then {\n-                        let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n-                        for (expr, bound) in args.iter().zip(fn_sig.inputs().iter()) {\n-                            // Push found arg type, then visit arg.\n-                            self.ty_bounds.push(TyBound::Ty(bound));\n-                            self.visit_expr(expr);\n-                            self.ty_bounds.pop();\n-                        }\n-                        return;\n+                if let Some(fn_sig) = fn_sig_opt(self.cx, func.hir_id) {\n+                    for (expr, bound) in args.iter().zip(fn_sig.skip_binder().inputs().iter()) {\n+                        // Push found arg type, then visit arg.\n+                        self.ty_bounds.push(TyBound::Ty(bound));\n+                        self.visit_expr(expr);\n+                        self.ty_bounds.pop();\n                     }\n+                    return;\n                 }\n             },\n \n@@ -160,6 +155,16 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n     }\n }\n \n+fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'tcx>> {\n+    let node_ty = cx.typeck_results().node_type_opt(hir_id)?;\n+    // We can't use `TyS::fn_sig` because it automatically performs substs, this may result in FNs.\n+    match node_ty.kind() {\n+        ty::FnDef(def_id, _) => Some(cx.tcx.fn_sig(*def_id)),\n+        ty::FnPtr(fn_sig) => Some(*fn_sig),\n+        _ => None,\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy)]\n enum TyBound<'ctx> {\n     Any,"}]}