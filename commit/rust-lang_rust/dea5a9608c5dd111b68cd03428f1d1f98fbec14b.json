{"sha": "dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYTVhOTYwOGM1ZGQxMTFiNjhjZDAzNDI4ZjFkMWY5OGZiZWMxNGI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-06-18T18:07:36Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-06-20T01:35:24Z"}, "message": "Simplify argument forwarding in the various shim generators", "tree": {"sha": "25b58cf4c5e960096eda850b07eb2afa5e44fa05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25b58cf4c5e960096eda850b07eb2afa5e44fa05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "html_url": "https://github.com/rust-lang/rust/commit/dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f862da5bb8283bff99052c045fc470b8a45688c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f862da5bb8283bff99052c045fc470b8a45688c5", "html_url": "https://github.com/rust-lang/rust/commit/f862da5bb8283bff99052c045fc470b8a45688c5"}], "stats": {"total": 90, "additions": 28, "deletions": 62}, "files": [{"sha": "c4960c8d6a3998ac1c59ee4804bfbc10c1dae3a4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "patch": "@@ -2252,6 +2252,18 @@ pub fn get_param(llfn: ValueRef, index: c_uint) -> ValueRef {\n     }\n }\n \n+pub fn get_params(llfn: ValueRef) -> Vec<ValueRef> {\n+    unsafe {\n+        let num_params = LLVMCountParams(llfn);\n+        let mut params = Vec::with_capacity(num_params as usize);\n+        for idx in 0..num_params {\n+            params.push(LLVMGetParam(llfn, idx));\n+        }\n+\n+        params\n+    }\n+}\n+\n #[allow(missing_copy_implementations)]\n pub enum RustString_opaque {}\n pub type RustStringRef = *mut RustString_opaque;"}, {"sha": "10aea37f2e95eb91f55e59c372ff0ecea3175885", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "patch": "@@ -21,9 +21,7 @@ pub use self::CallArgs::*;\n use arena::TypedArena;\n use back::link;\n use session;\n-use llvm::ValueRef;\n-use llvm::get_param;\n-use llvm;\n+use llvm::{self, ValueRef, get_params};\n use metadata::csearch;\n use middle::def;\n use middle::subst;\n@@ -343,19 +341,15 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n                       &block_arena);\n     let mut bcx = init_function(&fcx, false, sig.output);\n \n+    let llargs = get_params(fcx.llfn);\n+\n     // the first argument (`self`) will be ptr to the the fn pointer\n     let llfnpointer = if is_by_ref {\n-        Load(bcx, get_param(fcx.llfn, fcx.arg_pos(0) as u32))\n+        Load(bcx, llargs[fcx.arg_pos(0)])\n     } else {\n-        get_param(fcx.llfn, fcx.arg_pos(0) as u32)\n+        llargs[fcx.arg_pos(0)]\n     };\n \n-    // the remaining arguments will be the untupled values\n-    let llargs: Vec<_> =\n-        sig.inputs.iter()\n-        .enumerate()\n-        .map(|(i, _)| get_param(fcx.llfn, fcx.arg_pos(i+1) as u32))\n-        .collect();\n     assert!(!fcx.needs_ret_allocas);\n \n     let dest = fcx.llretslotptr.get().map(|_|\n@@ -366,7 +360,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n                            DebugLoc::None,\n                            bare_fn_ty,\n                            |bcx, _| Callee { bcx: bcx, data: Fn(llfnpointer) },\n-                           ArgVals(&llargs[..]),\n+                           ArgVals(&llargs[fcx.arg_pos(1)..]),\n                            dest).bcx;\n \n     finish_fn(&fcx, bcx, sig.output, DebugLoc::None);"}, {"sha": "127fee222da01238eaac58bca9e8948ab492f6b8", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "patch": "@@ -10,7 +10,7 @@\n \n use arena::TypedArena;\n use back::link::{self, mangle_internal_name_by_path_and_seq};\n-use llvm::{ValueRef, get_param};\n+use llvm::{ValueRef, get_params};\n use middle::mem_categorization::Typer;\n use trans::adt;\n use trans::attributes;\n@@ -405,11 +405,13 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n                       &block_arena);\n     let mut bcx = init_function(&fcx, false, sig.output);\n \n+    let llargs = get_params(fcx.llfn);\n+\n     // the first argument (`self`) will be the (by value) closure env.\n     let self_scope = fcx.push_custom_cleanup_scope();\n     let self_scope_id = CustomScope(self_scope);\n     let rvalue_mode = datum::appropriate_rvalue_mode(ccx, closure_ty);\n-    let llself = get_param(lloncefn, fcx.arg_pos(0) as u32);\n+    let llself = llargs[fcx.arg_pos(0)];\n     let env_datum = Datum::new(llself, closure_ty, Rvalue::new(rvalue_mode));\n     let env_datum = unpack_datum!(bcx,\n                                   env_datum.to_lvalue_datum_in_scope(bcx, \"self\",\n@@ -418,19 +420,6 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     debug!(\"trans_fn_once_adapter_shim: env_datum={}\",\n            bcx.val_to_string(env_datum.val));\n \n-    // the remaining arguments will be packed up in a tuple.\n-    let input_tys = match sig.inputs[1].sty {\n-        ty::TyTuple(ref tys) => &**tys,\n-        _ => bcx.sess().bug(&format!(\"trans_fn_once_adapter_shim: not rust-call! \\\n-                                      closure_def_id={:?}\",\n-                                     closure_def_id))\n-    };\n-    let llargs: Vec<_> =\n-        input_tys.iter()\n-                 .enumerate()\n-                 .map(|(i, _)| get_param(lloncefn, fcx.arg_pos(i+1) as u32))\n-                 .collect();\n-\n     let dest =\n         fcx.llretslotptr.get().map(\n             |_| expr::SaveIn(fcx.get_ret_slot(bcx, sig.output, \"ret_slot\")));\n@@ -442,7 +431,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n                                    DebugLoc::None,\n                                    llref_fn_ty,\n                                    |bcx, _| Callee { bcx: bcx, data: callee_data },\n-                                   ArgVals(&llargs),\n+                                   ArgVals(&llargs[fcx.arg_pos(1)..]),\n                                    dest).bcx;\n \n     fcx.pop_custom_cleanup_scope(self_scope);"}, {"sha": "6955e03596fde36a46408e50d60af9325c6fd332", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea5a9608c5dd111b68cd03428f1d1f98fbec14b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=dea5a9608c5dd111b68cd03428f1d1f98fbec14b", "patch": "@@ -11,7 +11,7 @@\n use arena::TypedArena;\n use back::abi;\n use back::link;\n-use llvm::{ValueRef, get_param};\n+use llvm::{ValueRef, get_params};\n use metadata::csearch;\n use middle::subst::{Subst, Substs};\n use middle::subst::VecPerParamSpace;\n@@ -611,43 +611,14 @@ pub fn trans_object_shim<'a, 'tcx>(\n                       &block_arena);\n     let mut bcx = init_function(&fcx, false, sig.output);\n \n+    let llargs = get_params(fcx.llfn);\n+\n     // the first argument (`self`) will be a trait object\n-    let llobject = get_param(fcx.llfn, fcx.arg_pos(0) as u32);\n+    let llobject = llargs[fcx.arg_pos(0)];\n \n     debug!(\"trans_object_shim: llobject={}\",\n            bcx.val_to_string(llobject));\n \n-    // the remaining arguments will be, well, whatever they are\n-    let input_tys =\n-        match fty.abi {\n-            RustCall => {\n-                // unpack the tuple to extract the input type arguments:\n-                match sig.inputs[1].sty {\n-                    ty::TyTuple(ref tys) => &**tys,\n-                    _ => {\n-                        bcx.sess().bug(\n-                            &format!(\"rust-call expects a tuple not {:?}\",\n-                                     sig.inputs[1]));\n-                    }\n-                }\n-            }\n-            _ => {\n-                // skip the self parameter:\n-                &sig.inputs[1..]\n-            }\n-        };\n-\n-    let llargs: Vec<_> =\n-        input_tys.iter()\n-        .enumerate()\n-        .map(|(i, _)| {\n-            let llarg = get_param(fcx.llfn, fcx.arg_pos(i+1) as u32);\n-            debug!(\"trans_object_shim: input #{} == {}\",\n-                   i, bcx.val_to_string(llarg));\n-            llarg\n-        })\n-        .collect();\n-\n     assert!(!fcx.needs_ret_allocas);\n \n     let dest =\n@@ -669,7 +640,7 @@ pub fn trans_object_shim<'a, 'tcx>(\n                                                                   method_bare_fn_ty,\n                                                                   method_offset_in_vtable,\n                                                                   llobject),\n-                           ArgVals(&llargs),\n+                           ArgVals(&llargs[fcx.arg_pos(1)..]),\n                            dest).bcx;\n \n     finish_fn(&fcx, bcx, sig.output, DebugLoc::None);"}]}