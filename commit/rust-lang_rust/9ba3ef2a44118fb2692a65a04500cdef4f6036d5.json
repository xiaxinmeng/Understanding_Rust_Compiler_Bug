{"sha": "9ba3ef2a44118fb2692a65a04500cdef4f6036d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYTNlZjJhNDQxMThmYjI2OTJhNjVhMDQ1MDBjZGVmNGY2MDM2ZDU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T04:01:03Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Change representation and conversion of ThreadId and BlockSetId.", "tree": {"sha": "db720c79c43a10f5efbc7b08afd41b0d2122d58d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db720c79c43a10f5efbc7b08afd41b0d2122d58d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba3ef2a44118fb2692a65a04500cdef4f6036d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba3ef2a44118fb2692a65a04500cdef4f6036d5", "html_url": "https://github.com/rust-lang/rust/commit/9ba3ef2a44118fb2692a65a04500cdef4f6036d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba3ef2a44118fb2692a65a04500cdef4f6036d5/comments", "author": null, "committer": null, "parents": [{"sha": "174adad2b34ddacc129232c6127a260270d1f52a", "url": "https://api.github.com/repos/rust-lang/rust/commits/174adad2b34ddacc129232c6127a260270d1f52a", "html_url": "https://github.com/rust-lang/rust/commit/174adad2b34ddacc129232c6127a260270d1f52a"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "b0605b4e8146b3fdc76b5267695b1e394e53e7de", "filename": "src/shims/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba3ef2a44118fb2692a65a04500cdef4f6036d5/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba3ef2a44118fb2692a65a04500cdef4f6036d5/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=9ba3ef2a44118fb2692a65a04500cdef4f6036d5", "patch": "@@ -158,7 +158,7 @@ fn mutex_get_or_create_blockset<'mir, 'tcx: 'mir>(\n         mutex_set_blockset(ecx, mutex_op, blockset.to_u32_scalar())?;\n         Ok(blockset)\n     } else {\n-        Ok(blockset.into())\n+        Ok(BlockSetId::new(blockset))\n     }\n }\n \n@@ -233,7 +233,7 @@ fn rwlock_get_or_create_writer_blockset<'mir, 'tcx: 'mir>(\n         rwlock_set_writer_blockset(ecx, rwlock_op, blockset.to_u32_scalar())?;\n         Ok(blockset)\n     } else {\n-        Ok(blockset.into())\n+        Ok(BlockSetId::new(blockset))\n     }\n }\n \n@@ -264,7 +264,7 @@ fn rwlock_get_or_create_reader_blockset<'mir, 'tcx: 'mir>(\n         rwlock_set_reader_blockset(ecx, rwlock_op, blockset.to_u32_scalar())?;\n         Ok(blockset)\n     } else {\n-        Ok(blockset.into())\n+        Ok(BlockSetId::new(blockset))\n     }\n }\n "}, {"sha": "749d6bf955f27a66a6b35d8780f7da7142cb91c8", "filename": "src/thread.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ba3ef2a44118fb2692a65a04500cdef4f6036d5/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba3ef2a44118fb2692a65a04500cdef4f6036d5/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=9ba3ef2a44118fb2692a65a04500cdef4f6036d5", "patch": "@@ -30,7 +30,7 @@ pub enum SchedulingAction {\n \n /// A thread identifier.\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n-pub struct ThreadId(usize);\n+pub struct ThreadId(u32);\n \n /// The main thread. When it terminates, the whole application terminates.\n const MAIN_THREAD: ThreadId = ThreadId(0);\n@@ -43,22 +43,22 @@ impl ThreadId {\n \n impl Idx for ThreadId {\n     fn new(idx: usize) -> Self {\n-        ThreadId(idx)\n+        ThreadId(u32::try_from(idx).unwrap())\n     }\n     fn index(self) -> usize {\n-        self.0\n+        usize::try_from(self.0).unwrap()\n     }\n }\n \n impl From<u64> for ThreadId {\n     fn from(id: u64) -> Self {\n-        Self(usize::try_from(id).unwrap())\n+        Self(u32::try_from(id).unwrap())\n     }\n }\n \n impl From<u32> for ThreadId {\n     fn from(id: u32) -> Self {\n-        Self(usize::try_from(id).unwrap())\n+        Self(u32::try_from(id).unwrap())\n     }\n }\n \n@@ -73,13 +73,11 @@ impl ThreadId {\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n pub struct BlockSetId(NonZeroU32);\n \n-impl From<u32> for BlockSetId {\n-    fn from(id: u32) -> Self {\n+impl BlockSetId {\n+    /// Panics if `id` is 0.\n+    pub fn new(id: u32) -> Self {\n         Self(NonZeroU32::new(id).expect(\"0 is not a valid blockset id\"))\n     }\n-}\n-\n-impl BlockSetId {\n     pub fn to_u32_scalar<'tcx>(&self) -> Scalar<Tag> {\n         Scalar::from_u32(self.0.get())\n     }\n@@ -325,7 +323,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     /// Allocate a new blockset id.\n     fn create_blockset(&mut self) -> BlockSetId {\n         self.blockset_counter = self.blockset_counter.checked_add(1).unwrap();\n-        self.blockset_counter.into()\n+        BlockSetId::new(self.blockset_counter)\n     }\n \n     /// Block the currently active thread and put it into the given blockset."}]}