{"sha": "0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMGZhMjZjNzJmMTFmMWNiNjIyZGI4ZTE5YzZjMDAxNGE2ZTViYmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-18T03:51:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-18T03:51:34Z"}, "message": "Enforce variance rules for mutable types", "tree": {"sha": "a340d490bf3ee66f2a417dd13cd7499253cbc2f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a340d490bf3ee66f2a417dd13cd7499253cbc2f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "html_url": "https://github.com/rust-lang/rust/commit/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d351b21e72112059b705f6ba7ad9b09afa1819", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d351b21e72112059b705f6ba7ad9b09afa1819", "html_url": "https://github.com/rust-lang/rust/commit/48d351b21e72112059b705f6ba7ad9b09afa1819"}], "stats": {"total": 180, "additions": 140, "deletions": 40}, "files": [{"sha": "dde4237aa48d5e93451d886b6e40ac7a584433e4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -1845,31 +1845,25 @@ mod unify {\n     fn record_var_binding_for_expected(\n         cx: @ctxt, key: int, typ: t, variance: variance) -> result {\n         record_var_binding(\n-            cx, key, typ,\n-            lambda (cx: @ctxt, old_type: t, new_type: t) -> result {\n-                unify_step(cx, old_type, new_type, variance)\n-            })\n+            cx, key, typ, variance_transform(variance, covariant))\n     }\n \n     fn record_var_binding_for_actual(\n         cx: @ctxt, key: int, typ: t, variance: variance) -> result {\n+        // Unifying in 'the other direction' so flip the variance\n         record_var_binding(\n-            cx, key, typ,\n-            lambda (cx: @ctxt, old_type: t, new_type: t) -> result {\n-                unify_step(cx, new_type, old_type, variance)\n-            })\n+            cx, key, typ, variance_transform(variance, contravariant))\n     }\n \n     fn record_var_binding(\n-        cx: @ctxt, key: int, typ: t,\n-        unify_types: fn(@ctxt, t, t) -> result) -> result {\n+        cx: @ctxt, key: int, typ: t, variance: variance) -> result {\n \n         ufind::grow(cx.vb.sets, (key as uint) + 1u);\n         let root = ufind::find(cx.vb.sets, key as uint);\n         let result_type = typ;\n         alt smallintmap::find::<t>(cx.vb.types, root) {\n           some(old_type) {\n-            alt unify_types(cx, old_type, typ) {\n+            alt unify_step(cx, old_type, typ, variance) {\n               ures_ok(unified_type) { result_type = unified_type; }\n               rs { ret rs; }\n             }\n@@ -1949,10 +1943,24 @@ mod unify {\n     }\n \n     // Unifies two mutability flags.\n-    fn unify_mut(expected: ast::mutability, actual: ast::mutability) ->\n-       option::t<ast::mutability> {\n-        if expected == actual { ret some(expected); }\n-        if expected == ast::maybe_mut { ret some(actual); }\n+    fn unify_mut(expected: ast::mutability, actual: ast::mutability,\n+                 variance: variance) ->\n+       option::t<(ast::mutability, variance)> {\n+\n+        // If you're unifying mutability then the thing inside\n+        // will be invariant on anything it contains\n+        let newvariance = variance_transform(variance, invariant);\n+\n+        if expected == actual { ret some((expected, newvariance)); }\n+        if variance == covariant {\n+            if expected == ast::maybe_mut {\n+                ret some((actual, newvariance));\n+            }\n+        } else if variance == contravariant {\n+            if actual == ast::maybe_mut {\n+                ret some((expected, newvariance));\n+            }\n+        }\n         ret none;\n     }\n     tag fn_common_res {\n@@ -2258,13 +2266,13 @@ mod unify {\n           ty::ty_box(expected_mt) {\n             alt struct(cx.tcx, actual) {\n               ty::ty_box(actual_mt) {\n-                let mut;\n-                alt unify_mut(expected_mt.mut, actual_mt.mut) {\n+                let (mut, var) = alt unify_mut(\n+                    expected_mt.mut, actual_mt.mut, variance) {\n                   none. { ret ures_err(terr_box_mutability); }\n-                  some(m) { mut = m; }\n-                }\n+                  some(mv) { mv }\n+                };\n                 let result = unify_step(\n-                    cx, expected_mt.ty, actual_mt.ty, variance);\n+                    cx, expected_mt.ty, actual_mt.ty, var);\n                 alt result {\n                   ures_ok(result_sub) {\n                     let mt = {ty: result_sub, mut: mut};\n@@ -2279,13 +2287,13 @@ mod unify {\n           ty::ty_uniq(expected_mt) {\n             alt struct(cx.tcx, actual) {\n               ty::ty_uniq(actual_mt) {\n-                let mut = expected_mt.mut;\n-                alt unify_mut(expected_mt.mut, actual_mt.mut) {\n+                let (mut, var) = alt unify_mut(\n+                    expected_mt.mut, actual_mt.mut, variance) {\n                   none. { ret ures_err(terr_box_mutability); }\n-                  some(m) { mut = m; }\n-                }\n+                  some(mv) { mv }\n+                };\n                 let result = unify_step(\n-                    cx, expected_mt.ty, actual_mt.ty, variance);\n+                    cx, expected_mt.ty, actual_mt.ty, var);\n                 alt result {\n                   ures_ok(result_mt) {\n                     let mt = {ty: result_mt, mut: mut};\n@@ -2300,13 +2308,13 @@ mod unify {\n           ty::ty_vec(expected_mt) {\n             alt struct(cx.tcx, actual) {\n               ty::ty_vec(actual_mt) {\n-                let mut;\n-                alt unify_mut(expected_mt.mut, actual_mt.mut) {\n+                let (mut, var) = alt unify_mut(\n+                    expected_mt.mut, actual_mt.mut, variance) {\n                   none. { ret ures_err(terr_vec_mutability); }\n-                  some(m) { mut = m; }\n-                }\n+                  some(mv) { mv }\n+                };\n                 let result = unify_step(\n-                    cx, expected_mt.ty, actual_mt.ty, variance);\n+                    cx, expected_mt.ty, actual_mt.ty, var);\n                 alt result {\n                   ures_ok(result_sub) {\n                     let mt = {ty: result_sub, mut: mut};\n@@ -2321,13 +2329,13 @@ mod unify {\n           ty::ty_ptr(expected_mt) {\n             alt struct(cx.tcx, actual) {\n               ty::ty_ptr(actual_mt) {\n-                let mut;\n-                alt unify_mut(expected_mt.mut, actual_mt.mut) {\n+                let (mut, var) = alt unify_mut(\n+                    expected_mt.mut, actual_mt.mut, variance) {\n                   none. { ret ures_err(terr_vec_mutability); }\n-                  some(m) { mut = m; }\n-                }\n+                  some(mv) { mv }\n+                };\n                 let result = unify_step(\n-                    cx, expected_mt.ty, actual_mt.ty, variance);\n+                    cx, expected_mt.ty, actual_mt.ty, var);\n                 alt result {\n                   ures_ok(result_sub) {\n                     let mt = {ty: result_sub, mut: mut};\n@@ -2385,12 +2393,12 @@ mod unify {\n                 while i < expected_len {\n                     let expected_field = expected_fields[i];\n                     let actual_field = actual_fields[i];\n-                    let mut;\n-                    alt unify_mut(expected_field.mt.mut, actual_field.mt.mut)\n+                    let (mut, var) = alt unify_mut(\n+                        expected_field.mt.mut, actual_field.mt.mut, variance)\n                         {\n                       none. { ret ures_err(terr_record_mutability); }\n-                      some(m) { mut = m; }\n-                    }\n+                      some(mv) { mv }\n+                    };\n                     if !str::eq(expected_field.ident, actual_field.ident) {\n                         let err =\n                             terr_record_fields(expected_field.ident,\n@@ -2399,7 +2407,7 @@ mod unify {\n                     }\n                     let result =\n                         unify_step(cx, expected_field.mt.ty,\n-                                   actual_field.mt.ty, variance);\n+                                   actual_field.mt.ty, var);\n                     alt result {\n                       ures_ok(rty) {\n                         let mt = {ty: rty, mut: mut};"}, {"sha": "72732a5d0b2f8fc9f318bb17c9445fc6ffde7784", "filename": "src/test/compile-fail/mutable-huh-variance-box.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = @mutable [0];\n+\n+    fn f(&&v: @mutable [mutable? int]) {\n+        *v = [mutable 3]\n+    }\n+\n+    f(v);\n+}"}, {"sha": "aafe0f1465d12a28a8d49d65e2318a800012d50d", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = [mutable @mutable ~mutable [0]];\n+\n+    fn f(&&v: [mutable @mutable ~mutable [mutable? int]]) {\n+    }\n+\n+    f(v);\n+}"}, {"sha": "b515f5aad7d2791c68ee8e765012609b19711242", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern: mismatched types\n+\n+use std;\n+\n+fn main() {\n+    let a = [0];\n+    let v: *mutable [int] = std::ptr::addr_of(a);\n+\n+    fn f(&&v: *mutable [mutable? int]) {\n+        unsafe {\n+            *v = [mutable 3]\n+        }\n+    }\n+\n+    f(v);\n+}"}, {"sha": "2225eb5c36473a1c0fb5be09547a818d733a28d9", "filename": "src/test/compile-fail/mutable-huh-variance-rec.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = {mutable g: [0]};\n+\n+    fn f(&&v: {mutable g: [mutable? int]}) {\n+        v.g = [mutable 3]\n+    }\n+\n+    f(v);\n+}"}, {"sha": "ca3751629e38eff0a3b3391afcda9127ab2f49b2", "filename": "src/test/compile-fail/mutable-huh-variance-unique.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = ~mutable [0];\n+\n+    fn f(&&v: ~mutable [mutable? int]) {\n+        *v = [mutable 3]\n+    }\n+\n+    f(v);\n+}"}, {"sha": "0b834ab59d338761610419011fea462c21404ce8", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = [mutable [0]];\n+\n+    fn f(&&v: [mutable [mutable? int]]) {\n+        v[0] = [mutable 3]\n+    }\n+\n+    f(v);\n+}"}, {"sha": "c3b5c36d1d1ab7e9b9f9d311da43654652a0e448", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = [mutable [mutable 0]];\n+\n+    fn f(&&v: [mutable [mutable? int]]) {\n+        v[0] = [3]\n+    }\n+\n+    f(v);\n+}"}, {"sha": "dff3c1173fe9ff53c5a048921884ae814bb5a963", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=0f0fa26c72f11f1cb622db8e19c6c0014a6e5bbc", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = [mutable [mutable [0]]];\n+\n+    fn f(&&v: [mutable [mutable [mutable? int]]]) {\n+        v[0][1] = [mutable 3]\n+    }\n+\n+    f(v);\n+}"}]}