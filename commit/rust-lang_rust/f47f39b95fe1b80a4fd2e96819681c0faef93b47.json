{"sha": "f47f39b95fe1b80a4fd2e96819681c0faef93b47", "node_id": "C_kwDOAAsO6NoAKGY0N2YzOWI5NWZlMWI4MGE0ZmQyZTk2ODE5NjgxYzBmYWVmOTNiNDc", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-28T17:34:49Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-06T16:11:04Z"}, "message": "remove UnsafetyChecker\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "da3882a7954884049e2d6da0b9a6a636a5edc779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3882a7954884049e2d6da0b9a6a636a5edc779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47f39b95fe1b80a4fd2e96819681c0faef93b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47f39b95fe1b80a4fd2e96819681c0faef93b47", "html_url": "https://github.com/rust-lang/rust/commit/f47f39b95fe1b80a4fd2e96819681c0faef93b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47f39b95fe1b80a4fd2e96819681c0faef93b47/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c3c5889888809dafe3906b472e07a9cdf399f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3c5889888809dafe3906b472e07a9cdf399f03", "html_url": "https://github.com/rust-lang/rust/commit/7c3c5889888809dafe3906b472e07a9cdf399f03"}], "stats": {"total": 219, "additions": 136, "deletions": 83}, "files": [{"sha": "619bae9b7edc38ad90b0333f2954e7df4e25c814", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 136, "deletions": 83, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/f47f39b95fe1b80a4fd2e96819681c0faef93b47/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47f39b95fe1b80a4fd2e96819681c0faef93b47/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=f47f39b95fe1b80a4fd2e96819681c0faef93b47", "patch": "@@ -3,101 +3,154 @@\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::def::DefKind;\n use rustc_hir::Unsafety;\n use rustc_middle::ty::TyCtxt;\n \n pub fn check(tcx: TyCtxt<'_>) {\n-    let mut unsafety = UnsafetyChecker { tcx };\n-    tcx.hir().visit_all_item_likes(&mut unsafety);\n+    for id in tcx.hir().items() {\n+        if matches!(tcx.hir().def_kind(id.def_id), DefKind::Impl) {\n+            let item = tcx.hir().item(id);\n+            if let hir::ItemKind::Impl(ref impl_) = item.kind {\n+                check_unsafety_coherence(\n+                    tcx,\n+                    item,\n+                    Some(&impl_.generics),\n+                    impl_.unsafety,\n+                    impl_.polarity,\n+                );\n+            }\n+        }\n+    }\n }\n \n-struct UnsafetyChecker<'tcx> {\n+fn check_unsafety_coherence<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-}\n-\n-impl<'tcx> UnsafetyChecker<'tcx> {\n-    fn check_unsafety_coherence(\n-        &mut self,\n-        item: &hir::Item<'_>,\n-        impl_generics: Option<&hir::Generics<'_>>,\n-        unsafety: hir::Unsafety,\n-        polarity: hir::ImplPolarity,\n-    ) {\n-        if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id) {\n-            let trait_def = self.tcx.trait_def(trait_ref.def_id);\n-            let unsafe_attr = impl_generics.and_then(|generics| {\n-                generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\")\n-            });\n-            match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n-                (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        item.span,\n-                        E0199,\n-                        \"implementing the trait `{}` is not unsafe\",\n-                        trait_ref.print_only_trait_path()\n-                    )\n-                    .emit();\n-                }\n+    item: &hir::Item<'_>,\n+    impl_generics: Option<&hir::Generics<'_>>,\n+    unsafety: hir::Unsafety,\n+    polarity: hir::ImplPolarity,\n+) {\n+    if let Some(trait_ref) = tcx.impl_trait_ref(item.def_id) {\n+        let trait_def = tcx.trait_def(trait_ref.def_id);\n+        let unsafe_attr = impl_generics.and_then(|generics| {\n+            generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\")\n+        });\n+        match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n+            (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    item.span,\n+                    E0199,\n+                    \"implementing the trait `{}` is not unsafe\",\n+                    trait_ref.print_only_trait_path()\n+                )\n+                .emit();\n+            }\n \n-                (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        item.span,\n-                        E0200,\n-                        \"the trait `{}` requires an `unsafe impl` declaration\",\n-                        trait_ref.print_only_trait_path()\n-                    )\n-                    .emit();\n-                }\n+            (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    item.span,\n+                    E0200,\n+                    \"the trait `{}` requires an `unsafe impl` declaration\",\n+                    trait_ref.print_only_trait_path()\n+                )\n+                .emit();\n+            }\n \n-                (\n-                    Unsafety::Normal,\n-                    Some(attr_name),\n-                    Unsafety::Normal,\n-                    hir::ImplPolarity::Positive,\n-                ) => {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        item.span,\n-                        E0569,\n-                        \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n-                        attr_name\n-                    )\n-                    .emit();\n-                }\n+            (Unsafety::Normal, Some(attr_name), Unsafety::Normal, hir::ImplPolarity::Positive) => {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    item.span,\n+                    E0569,\n+                    \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n+                    attr_name\n+                )\n+                .emit();\n+            }\n \n-                (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative(_)) => {\n-                    // Reported in AST validation\n-                    self.tcx.sess.delay_span_bug(item.span, \"unsafe negative impl\");\n-                }\n-                (_, _, Unsafety::Normal, hir::ImplPolarity::Negative(_))\n-                | (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive)\n-                | (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive)\n-                | (Unsafety::Normal, None, Unsafety::Normal, _) => {\n-                    // OK\n-                }\n+            (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative(_)) => {\n+                // Reported in AST validation\n+                tcx.sess.delay_span_bug(item.span, \"unsafe negative impl\");\n+            }\n+            (_, _, Unsafety::Normal, hir::ImplPolarity::Negative(_))\n+            | (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive)\n+            | (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive)\n+            | (Unsafety::Normal, None, Unsafety::Normal, _) => {\n+                // OK\n             }\n         }\n     }\n }\n \n-impl<'tcx> ItemLikeVisitor<'_> for UnsafetyChecker<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        if let hir::ItemKind::Impl(ref impl_) = item.kind {\n-            self.check_unsafety_coherence(\n-                item,\n-                Some(&impl_.generics),\n-                impl_.unsafety,\n-                impl_.polarity,\n-            );\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n-\n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n-\n-    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n-}\n+// struct UnsafetyChecker<'tcx> {\n+//     tcx: TyCtxt<'tcx>,\n+// }\n+//\n+// impl<'tcx> UnsafetyChecker<'tcx> {\n+//     fn check_unsafety_coherence(\n+//         &mut self,\n+//         item: &hir::Item<'_>,\n+//         impl_generics: Option<&hir::Generics<'_>>,\n+//         unsafety: hir::Unsafety,\n+//         polarity: hir::ImplPolarity,\n+//     ) {\n+//         if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id) {\n+//             let trait_def = self.tcx.trait_def(trait_ref.def_id);\n+//             let unsafe_attr = impl_generics.and_then(|generics| {\n+//                 generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\")\n+//             });\n+//             match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n+//                 (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {\n+//                     struct_span_err!(\n+//                         self.tcx.sess,\n+//                         item.span,\n+//                         E0199,\n+//                         \"implementing the trait `{}` is not unsafe\",\n+//                         trait_ref.print_only_trait_path()\n+//                     )\n+//                     .emit();\n+//                 }\n+//\n+//                 (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n+//                     struct_span_err!(\n+//                         self.tcx.sess,\n+//                         item.span,\n+//                         E0200,\n+//                         \"the trait `{}` requires an `unsafe impl` declaration\",\n+//                         trait_ref.print_only_trait_path()\n+//                     )\n+//                     .emit();\n+//                 }\n+//\n+//                 (\n+//                     Unsafety::Normal,\n+//                     Some(attr_name),\n+//                     Unsafety::Normal,\n+//                     hir::ImplPolarity::Positive,\n+//                 ) => {\n+//                     struct_span_err!(\n+//                         self.tcx.sess,\n+//                         item.span,\n+//                         E0569,\n+//                         \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n+//                         attr_name\n+//                     )\n+//                     .emit();\n+//                 }\n+//\n+//                 (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative(_)) => {\n+//                     // Reported in AST validation\n+//                     self.tcx.sess.delay_span_bug(item.span, \"unsafe negative impl\");\n+//                 }\n+//                 (_, _, Unsafety::Normal, hir::ImplPolarity::Negative(_))\n+//                 | (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive)\n+//                 | (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive)\n+//                 | (Unsafety::Normal, None, Unsafety::Normal, _) => {\n+//                     // OK\n+//                 }\n+//             }\n+//         }\n+//     }\n+// }"}]}