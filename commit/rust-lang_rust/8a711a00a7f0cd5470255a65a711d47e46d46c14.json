{"sha": "8a711a00a7f0cd5470255a65a711d47e46d46c14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNzExYTAwYTdmMGNkNTQ3MDI1NWE2NWE3MTFkNDdlNDZkNDZjMTQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-27T12:11:11Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert cargo to use Tarball", "tree": {"sha": "a56429be915f4e5f88b5bb7c216f14531b1ef780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a56429be915f4e5f88b5bb7c216f14531b1ef780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a711a00a7f0cd5470255a65a711d47e46d46c14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjfYACgkQPgar6Auq\n8Zwfnw//UqnGxra+KAHCWRKgVdhguAV2R+f1uJ9kLeG4UZkc4kztz8I5TTYwFhdA\nIYW2Sn1RGZShaMYyXVVnsCWEEWvqfzY4fmTsl0TdzAcLF1Q6vxm3aPOqx2hFOYW0\nVGoTr/OejCWjP8/aw3fEX4kgthVz0W9r0OMmGNUP2D3iZnZldd23zblfZq+zFm+g\n+iPhEZZ0WZepPS1fARWi3Gd0RXhQX/QnlTRYT01xuGGIdnBgw13WZ2/zcVFD351t\nbyTSymUpQVfDZqUXucrq9Umout5WFJsHu++9vaeEdXa8Gd1ajQ6VQUjxaXML4rzc\nOdgSEFoyu57kKjY68QtyCSHdrCabvcQzrAGBS0GhjG4N+PCF5QVSDB37rO2UsjU3\nogieCFdqCDMEa+RpyxnKjyWfFPh1MpwTHcZTXOarE6aDoz6Dc8ApxvK721rphTEl\n3KvFKa9SfRN9rNpVR2s5Lkf4NMytiqiORHSGAGBydzO+Kf8uIZdZy/f2VgO8eDWh\ne1R6JJPq9ci29XaPA/O276DgNcyWSfOFFlgwdYlticjZLwxEwtIuHjDe1nfO6+fR\nrtnMLGtoGLnNOeZtjCQ0bZPZmWrhbItz3x7Yepsmf7Ml2FnD4jkoJOGd6wARLHL8\ncu9VZy+RS21E5nOTaqa4DvX3MmpeiD7sFptOJb0nIUsAv/g7gNY=\n=jEeS\n-----END PGP SIGNATURE-----", "payload": "tree a56429be915f4e5f88b5bb7c216f14531b1ef780\nparent c4aaff65f0cac8fe4375423f36d544440e47878b\nauthor Pietro Albini <pietro@pietroalbini.org> 1606479071 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert cargo to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a711a00a7f0cd5470255a65a711d47e46d46c14", "html_url": "https://github.com/rust-lang/rust/commit/8a711a00a7f0cd5470255a65a711d47e46d46c14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a711a00a7f0cd5470255a65a711d47e46d46c14/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4aaff65f0cac8fe4375423f36d544440e47878b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4aaff65f0cac8fe4375423f36d544440e47878b", "html_url": "https://github.com/rust-lang/rust/commit/c4aaff65f0cac8fe4375423f36d544440e47878b"}], "stats": {"total": 101, "additions": 44, "deletions": 57}, "files": [{"sha": "7e7c7edceff06355db632735823a1b443503e8ba", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 15, "deletions": 56, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8a711a00a7f0cd5470255a65a711d47e46d46c14/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a711a00a7f0cd5470255a65a711d47e46d46c14/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8a711a00a7f0cd5470255a65a711d47e46d46c14", "patch": "@@ -1015,72 +1015,31 @@ impl Step for Cargo {\n         let compiler = self.compiler;\n         let target = self.target;\n \n+        let cargo = builder.ensure(tool::Cargo { compiler, target });\n         let src = builder.src.join(\"src/tools/cargo\");\n         let etc = src.join(\"src/etc\");\n-        let release_num = builder.release_num(\"cargo\");\n-        let name = pkgname(builder, \"cargo\");\n-        let version = builder.cargo_info.version(builder, &release_num);\n-\n-        let tmp = tmpdir(builder);\n-        let image = tmp.join(\"cargo-image\");\n-        drop(fs::remove_dir_all(&image));\n-        builder.create_dir(&image);\n \n         // Prepare the image directory\n-        builder.create_dir(&image.join(\"share/zsh/site-functions\"));\n-        builder.create_dir(&image.join(\"etc/bash_completion.d\"));\n-        let cargo = builder.ensure(tool::Cargo { compiler, target });\n-        builder.install(&cargo, &image.join(\"bin\"), 0o755);\n+        let mut tarball = Tarball::new(builder, \"cargo\", &target.triple);\n+        tarball.set_overlay(OverlayKind::Cargo);\n+\n+        tarball.add_file(&cargo, \"bin\", 0o755);\n+        tarball.add_file(src.join(\"README.md\"), \"share/doc/cargo\", 0o644);\n+        tarball.add_file(src.join(\"LICENSE-MIT\"), \"share/doc/cargo\", 0o644);\n+        tarball.add_file(src.join(\"LICENSE-APACHE\"), \"share/doc/cargo\", 0o644);\n+        tarball.add_file(src.join(\"LICENSE-THIRD-PARTY\"), \"share/doc/cargo\", 0o644);\n+        tarball.add_file(etc.join(\"_cargo\"), \"share/zsh/site-functions\", 0o644);\n+        tarball.add_renamed_file(etc.join(\"cargo.bashcomp.sh\"), \"etc/bash_completion.d\", \"cargo\");\n+        tarball.add_dir(etc.join(\"man\"), \"share/man/man1\");\n+\n         for dirent in fs::read_dir(cargo.parent().unwrap()).expect(\"read_dir\") {\n             let dirent = dirent.expect(\"read dir entry\");\n             if dirent.file_name().to_str().expect(\"utf8\").starts_with(\"cargo-credential-\") {\n-                builder.install(&dirent.path(), &image.join(\"libexec\"), 0o755);\n+                tarball.add_file(&dirent.path(), \"libexec\", 0o755);\n             }\n         }\n-        for man in t!(etc.join(\"man\").read_dir()) {\n-            let man = t!(man);\n-            builder.install(&man.path(), &image.join(\"share/man/man1\"), 0o644);\n-        }\n-        builder.install(&etc.join(\"_cargo\"), &image.join(\"share/zsh/site-functions\"), 0o644);\n-        builder.copy(&etc.join(\"cargo.bashcomp.sh\"), &image.join(\"etc/bash_completion.d/cargo\"));\n-        let doc = image.join(\"share/doc/cargo\");\n-        builder.install(&src.join(\"README.md\"), &doc, 0o644);\n-        builder.install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n-        builder.install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n-        builder.install(&src.join(\"LICENSE-THIRD-PARTY\"), &doc, 0o644);\n-\n-        // Prepare the overlay\n-        let overlay = tmp.join(\"cargo-overlay\");\n-        drop(fs::remove_dir_all(&overlay));\n-        builder.create_dir(&overlay);\n-        builder.install(&src.join(\"README.md\"), &overlay, 0o644);\n-        builder.install(&src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n-        builder.install(&src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n-        builder.install(&src.join(\"LICENSE-THIRD-PARTY\"), &overlay, 0o644);\n-        builder.create(&overlay.join(\"version\"), &version);\n-\n-        // Generate the installer tarball\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(\"--non-installed-overlay\")\n-            .arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n-            .arg(\"--component-name=cargo\")\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n-        builder.info(&format!(\"Dist cargo stage{} ({})\", compiler.stage, target));\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple))\n+        tarball.generate()\n     }\n }\n "}, {"sha": "5340995ce96f477813a00da3b607b7a66562d64c", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a711a00a7f0cd5470255a65a711d47e46d46c14/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a711a00a7f0cd5470255a65a711d47e46d46c14/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=8a711a00a7f0cd5470255a65a711d47e46d46c14", "patch": "@@ -8,6 +8,7 @@ use crate::builder::Builder;\n pub(crate) enum OverlayKind {\n     Rust,\n     LLVM,\n+    Cargo,\n }\n \n impl OverlayKind {\n@@ -17,6 +18,22 @@ impl OverlayKind {\n             OverlayKind::LLVM => {\n                 &[\"src/llvm-project/llvm/LICENSE.TXT\", \"src/llvm-project/llvm/README.txt\"]\n             }\n+            OverlayKind::Cargo => &[\n+                \"src/tools/cargo/README.md\",\n+                \"src/tools/cargo/LICENSE-MIT\",\n+                \"src/tools/cargo/LICENSE-APACHE\",\n+                \"src/tools/cargo/LICENSE-THIRD-PARTY\",\n+            ],\n+        }\n+    }\n+\n+    fn version(&self, builder: &Builder<'_>) -> String {\n+        match self {\n+            OverlayKind::Rust => builder.rust_version(),\n+            OverlayKind::LLVM => builder.rust_version(),\n+            OverlayKind::Cargo => {\n+                builder.cargo_info.version(builder, &builder.release_num(\"cargo\"))\n+            }\n         }\n     }\n }\n@@ -103,6 +120,17 @@ impl<'a> Tarball<'a> {\n         self.builder.install(src.as_ref(), &destdir, perms);\n     }\n \n+    pub(crate) fn add_renamed_file(\n+        &self,\n+        src: impl AsRef<Path>,\n+        destdir: impl AsRef<Path>,\n+        new_name: &str,\n+    ) {\n+        let destdir = self.image_dir.join(destdir.as_ref());\n+        t!(std::fs::create_dir_all(&destdir));\n+        self.builder.copy(src.as_ref(), &destdir.join(new_name));\n+    }\n+\n     pub(crate) fn add_dir(&self, src: impl AsRef<Path>, dest: impl AsRef<Path>) {\n         let dest = self.image_dir.join(dest.as_ref());\n \n@@ -112,7 +140,7 @@ impl<'a> Tarball<'a> {\n \n     pub(crate) fn generate(self) -> PathBuf {\n         t!(std::fs::create_dir_all(&self.overlay_dir));\n-        self.builder.create(&self.overlay_dir.join(\"version\"), &self.builder.rust_version());\n+        self.builder.create(&self.overlay_dir.join(\"version\"), &self.overlay.version(self.builder));\n         if let Some(sha) = self.builder.rust_sha() {\n             self.builder.create(&self.overlay_dir.join(\"git-commit-hash\"), &sha);\n         }"}]}