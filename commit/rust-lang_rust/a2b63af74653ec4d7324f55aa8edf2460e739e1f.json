{"sha": "a2b63af74653ec4d7324f55aa8edf2460e739e1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYjYzYWY3NDY1M2VjNGQ3MzI0ZjU1YWE4ZWRmMjQ2MGU3MzllMWY=", "commit": {"author": {"name": "daxpedda", "email": "1645124+daxpedda@users.noreply.github.com", "date": "2019-07-16T12:46:33Z"}, "committer": {"name": "daxpedda", "email": "1645124+daxpedda@users.noreply.github.com", "date": "2019-07-16T12:46:33Z"}, "message": "Removed lintining on never type.\n\nAbstracted repeating strings into statics.", "tree": {"sha": "29f2a5fbc531f23fa5ab3f101d2d838050f244cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f2a5fbc531f23fa5ab3f101d2d838050f244cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b63af74653ec4d7324f55aa8edf2460e739e1f", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEtfVYniVMfR+YKQUSxyLctqGR7qsFAl0txykACgkQxyLctqGR\n7qvTqg//QpHB2lwjGY/NDlFvbhSscsAbzdNNpxyj61VbYAw2OxAEOpOg5qXAovP1\n5uG8jUWXrgEJnVJmU/5BPhRJqN+u1C38nXV7BTvb0ZypSNhZrQsTPq3S9FjiBYpa\nUaVrIuvUxn+2LHuHPB3palVeB5EA+rpGkGMvqA6F8+5SvbmjMSRRwy32PsJt0IFj\n9B6CqOMYhqm7FD6ET5pG90ASFcH5NCKDE6TWuB3FpTtpoDPdeZXsHWcd4KA3CaHY\n9LAlQvOax22jKTe9xG88HDnHIBpgj7f98xGOCDqEi0BB39VOLCB8SOtjEB41IRhc\nE7RT6lFLkotM2NmKSs67fxCv4pF20Ldflxxq9GiRSQlIuXzlERpoHMiGurf6164n\nlQius8eiBwSCh1VdDGvqfc3CsUNel7egLbiQiS7gxnhJBiELF3rlkYhKvEztAnP3\nAP2femboL2+i+DjyvdehvnItiMnXW2J3EYuAuvSGEyuGo49sMO1tinVfZeILgLxM\nZ7wqnaVwh0P5R4/5htYh+E/ug7doeL+POt81V02myM4TB/YeEYLXgGv0sP/h2oKV\n1fQh0aXfEimPiqC4dSGQNECxgiMWgRkbydAB0/yHYNdk0wGsO8MwaJ5AWhQFjfj/\nqcw9RyuPbQf1ZRXdHlrgEH7WQZog1y6cuTfFxi8xGr+3QuUeqGE=\n=DHIN\n-----END PGP SIGNATURE-----", "payload": "tree 29f2a5fbc531f23fa5ab3f101d2d838050f244cf\nparent 6c067bf50eeb503aa4781ffafc77496b5c260ba3\nauthor daxpedda <1645124+daxpedda@users.noreply.github.com> 1563281193 +0200\ncommitter daxpedda <1645124+daxpedda@users.noreply.github.com> 1563281193 +0200\n\nRemoved lintining on never type.\n\nAbstracted repeating strings into statics.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b63af74653ec4d7324f55aa8edf2460e739e1f", "html_url": "https://github.com/rust-lang/rust/commit/a2b63af74653ec4d7324f55aa8edf2460e739e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b63af74653ec4d7324f55aa8edf2460e739e1f/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c067bf50eeb503aa4781ffafc77496b5c260ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c067bf50eeb503aa4781ffafc77496b5c260ba3", "html_url": "https://github.com/rust-lang/rust/commit/6c067bf50eeb503aa4781ffafc77496b5c260ba3"}], "stats": {"total": 51, "additions": 17, "deletions": 34}, "files": [{"sha": "a2a2148319185a2cf87370312af79cdf592b4c8a", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2b63af74653ec4d7324f55aa8edf2460e739e1f/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b63af74653ec4d7324f55aa8edf2460e739e1f/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=a2b63af74653ec4d7324f55aa8edf2460e739e1f", "patch": "@@ -42,6 +42,9 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ImplicitReturn => [IMPLICIT_RETURN]);\n \n+static LINT_BREAK: &str = \"change `break` to `return` as shown\";\n+static LINT_RETURN: &str = \"add `return` as shown\";\n+\n fn lint(cx: &LateContext<'_, '_>, outer_span: Span, inner_span: Span, msg: &str) {\n     let outer_span = span_to_outer_expn(outer_span);\n     let inner_span = span_to_outer_expn(inner_span);\n@@ -66,12 +69,12 @@ fn span_to_outer_expn(span: Span) -> Span {\n     }\n }\n \n-fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr, ret_ty_is_never: bool) {\n+fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr) {\n     match &expr.node {\n         // loops could be using `break` instead of `return`\n         ExprKind::Block(block, ..) | ExprKind::Loop(block, ..) => {\n             if let Some(expr) = &block.expr {\n-                expr_match(cx, expr, ret_ty_is_never);\n+                expr_match(cx, expr);\n             }\n             // only needed in the case of `break` with `;` at the end\n             else if let Some(stmt) = block.stmts.last() {\n@@ -81,15 +84,15 @@ fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr, ret_ty_is_never: bool) {\n                     if let ExprKind::Break(.., break_expr) = &expr.node;\n                     if let Some(break_expr) = break_expr;\n                     then {\n-                            lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n+                            lint(cx, expr.span, break_expr.span, LINT_BREAK);\n                     }\n                 }\n             }\n         },\n         // use `return` instead of `break`\n         ExprKind::Break(.., break_expr) => {\n             if let Some(break_expr) = break_expr {\n-                lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n+                lint(cx, expr.span, break_expr.span, LINT_BREAK);\n             }\n         },\n         ExprKind::Match(.., arms, source) => {\n@@ -102,38 +105,29 @@ fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr, ret_ty_is_never: bool) {\n \n             if check_all_arms {\n                 for arm in arms {\n-                    expr_match(cx, &arm.body, ret_ty_is_never);\n+                    expr_match(cx, &arm.body);\n                 }\n             } else {\n-                expr_match(\n-                    cx,\n-                    &arms.first().expect(\"if let doesn't have a single arm\").body,\n-                    ret_ty_is_never,\n-                );\n+                expr_match(cx, &arms.first().expect(\"if let doesn't have a single arm\").body);\n             }\n         },\n         // skip if it already has a return statement\n         ExprKind::Ret(..) => (),\n-        // make sure it's not a call that panics unless we intend to return a panic\n+        // make sure it's not a call that panics\n         ExprKind::Call(expr, ..) => {\n             if_chain! {\n                 if let ExprKind::Path(qpath) = &expr.node;\n                 if let Some(path_def_id) = resolve_node(cx, qpath, expr.hir_id).opt_def_id();\n                 if match_def_path(cx, path_def_id, &BEGIN_PANIC) ||\n                     match_def_path(cx, path_def_id, &BEGIN_PANIC_FMT);\n-                then {\n-                    // only put `return` on panics if the return type of the function/closure is a panic\n-                    if ret_ty_is_never {\n-                        lint(cx, expr.span, expr.span, \"add `return` as shown\")\n-                    }\n-                }\n+                then { }\n                 else {\n-                    lint(cx, expr.span, expr.span, \"add `return` as shown\")\n+                    lint(cx, expr.span, expr.span, LINT_RETURN)\n                 }\n             }\n         },\n         // everything else is missing `return`\n-        _ => lint(cx, expr.span, expr.span, \"add `return` as shown\"),\n+        _ => lint(cx, expr.span, expr.span, LINT_RETURN),\n     }\n }\n \n@@ -149,12 +143,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n     ) {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n         let mir = cx.tcx.optimized_mir(def_id);\n-        let ret_ty = mir.return_ty();\n \n         // checking return type through MIR, HIR is not able to determine inferred closure return types\n         // make sure it's not a macro\n-        if !ret_ty.is_unit() && !in_macro_or_desugar(span) {\n-            expr_match(cx, &body.value, ret_ty.is_never());\n+        if !mir.return_ty().is_unit() && !in_macro_or_desugar(span) {\n+            expr_match(cx, &body.value);\n         }\n     }\n }"}, {"sha": "47e0679c430d78dd49f4d851f5c3ad1cfae1cbd1", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b63af74653ec4d7324f55aa8edf2460e739e1f/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b63af74653ec4d7324f55aa8edf2460e739e1f/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=a2b63af74653ec4d7324f55aa8edf2460e739e1f", "patch": "@@ -77,10 +77,6 @@ fn test_closure() {\n     let _ = || true;\n }\n \n-fn test_return_never() -> ! {\n-    panic!()\n-}\n-\n fn test_panic() -> bool {\n     panic!()\n }"}, {"sha": "41b0873317e8af730370982c157e6abdb1a5e3d9", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2b63af74653ec4d7324f55aa8edf2460e739e1f/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2b63af74653ec4d7324f55aa8edf2460e739e1f/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=a2b63af74653ec4d7324f55aa8edf2460e739e1f", "patch": "@@ -61,16 +61,10 @@ LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:81:5\n-   |\n-LL |     panic!()\n-   |     ^^^^^^^^ help: add `return` as shown: `return panic!()`\n-\n-error: missing return statement\n-  --> $DIR/implicit_return.rs:89:5\n+  --> $DIR/implicit_return.rs:85:5\n    |\n LL |     format!(\"test {}\", \"test\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `return` as shown: `return format!(\"test {}\", \"test\")`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n "}]}