{"sha": "8ac545d0fe224791875ed939db787cb311fac406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzU0NWQwZmUyMjQ3OTE4NzVlZDkzOWRiNzg3Y2IzMTFmYWM0MDY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-25T22:08:31Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-05-25T22:08:31Z"}, "message": "Fix documentation", "tree": {"sha": "770d8c754b224d71233c6026fb9d0205db2ce02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770d8c754b224d71233c6026fb9d0205db2ce02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac545d0fe224791875ed939db787cb311fac406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac545d0fe224791875ed939db787cb311fac406", "html_url": "https://github.com/rust-lang/rust/commit/8ac545d0fe224791875ed939db787cb311fac406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac545d0fe224791875ed939db787cb311fac406/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c347320bebdc79de09dc2410bd238df69f4c25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c347320bebdc79de09dc2410bd238df69f4c25c", "html_url": "https://github.com/rust-lang/rust/commit/4c347320bebdc79de09dc2410bd238df69f4c25c"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "719e6ee287ea39e68843e5c4cf6ab3b3a4ab1883", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac545d0fe224791875ed939db787cb311fac406/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ac545d0fe224791875ed939db787cb311fac406/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8ac545d0fe224791875ed939db787cb311fac406", "patch": "@@ -72,7 +72,7 @@ All notable changes to this project will be documented in this file.\n ## ~~0.0.52~~\n \n ## 0.0.51 \u2014 2016-03-13\n-* Add `str` to types considered by `len_zero`\n+* Add `str` to types considered by [`len_zero`]\n * New lints: [`indexing_slicing`]\n \n ## 0.0.50 \u2014 2016-03-11"}, {"sha": "c289116809e9584d85092ee3adf841dcd118be59", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ac545d0fe224791875ed939db787cb311fac406/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ac545d0fe224791875ed939db787cb311fac406/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8ac545d0fe224791875ed939db787cb311fac406", "patch": "@@ -74,7 +74,7 @@ name\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                         | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                       | warn    | `#[inline(always)]` is a bad idea in most cases\n [integer_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#integer_arithmetic)                             | allow   | Any integer arithmetic statement\n-[invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                       | deny    | finds invalid regular expressions in `Regex::new(_)` invocations\n+[invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                       | deny    | finds invalid regular expressions\n [invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)             | allow   | a comparison involving an upcast which is always true or false\n [items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | finds blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                     | warn    | for-looping over `_.next()` which is probably not intended\n@@ -150,7 +150,7 @@ name\n [too_many_arguments](https://github.com/Manishearth/rust-clippy/wiki#too_many_arguments)                             | warn    | functions with too many arguments\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                 | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n [transmute_ptr_to_ref](https://github.com/Manishearth/rust-clippy/wiki#transmute_ptr_to_ref)                         | warn    | transmutes from a pointer to a reference type\n-[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | finds trivial regular expressions in `Regex::new(_)` invocations\n+[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | finds trivial regular expressions\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                   | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)"}, {"sha": "c97a64ebf0945887c587c5e94501f04cf3febe87", "filename": "src/regex.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ac545d0fe224791875ed939db787cb311fac406/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac545d0fe224791875ed939db787cb311fac406/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=8ac545d0fe224791875ed939db787cb311fac406", "patch": "@@ -11,7 +11,8 @@ use syntax::codemap::{Span, BytePos};\n use syntax::parse::token::InternedString;\n use utils::{is_expn_of, match_def_path, match_type, paths, span_lint, span_help_and_lint};\n \n-/// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax.\n+/// **What it does:** This lint checks [regex] creation (with `Regex::new`, `RegexBuilder::new` or\n+/// `RegexSet::new`) for correct regex syntax.\n ///\n /// **Why is this bad?** This will lead to a runtime panic.\n ///\n@@ -21,21 +22,24 @@ use utils::{is_expn_of, match_def_path, match_type, paths, span_lint, span_help_\n declare_lint! {\n     pub INVALID_REGEX,\n     Deny,\n-    \"finds invalid regular expressions in `Regex::new(_)` invocations\"\n+    \"finds invalid regular expressions\"\n }\n \n-/// **What it does:** This lint checks for `Regex::new(_)` invocations with trivial regex.\n+/// **What it does:** This lint checks for trivial [regex] creation (with `Regex::new`,\n+/// `RegexBuilder::new` or `RegexSet::new`).\n ///\n /// **Why is this bad?** This can likely be replaced by `==` or `str::starts_with`,\n /// `str::ends_with` or `std::contains` or other `str` methods.\n ///\n /// **Known problems:** None.\n ///\n /// **Example:** `Regex::new(\"^foobar\")`\n+///\n+/// [regex]: https://crates.io/crates/regex\n declare_lint! {\n     pub TRIVIAL_REGEX,\n     Warn,\n-    \"finds trivial regular expressions in `Regex::new(_)` invocations\"\n+    \"finds trivial regular expressions\"\n }\n \n /// **What it does:** This lint checks for usage of `regex!(_)` which as of now is usually slower than `Regex::new(_)` unless called in a loop (which is a bad idea anyway)."}]}