{"sha": "6c00e546679fc653396377e226a30fb0b86fd5e6", "node_id": "C_kwDOAAsO6NoAKDZjMDBlNTQ2Njc5ZmM2NTMzOTYzNzdlMjI2YTMwZmIwYjg2ZmQ1ZTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-03T19:54:11Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-11T16:30:37Z"}, "message": "Guide inference along during type_changing_struct_update", "tree": {"sha": "cfbfce214f46554ad2630f54c4c6fc1aba1c26a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfbfce214f46554ad2630f54c4c6fc1aba1c26a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c00e546679fc653396377e226a30fb0b86fd5e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c00e546679fc653396377e226a30fb0b86fd5e6", "html_url": "https://github.com/rust-lang/rust/commit/6c00e546679fc653396377e226a30fb0b86fd5e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c00e546679fc653396377e226a30fb0b86fd5e6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa68e73e9947be8ffc5b3b46d899e4953a44e7e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa68e73e9947be8ffc5b3b46d899e4953a44e7e9", "html_url": "https://github.com/rust-lang/rust/commit/fa68e73e9947be8ffc5b3b46d899e4953a44e7e9"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "33cff62772e237d51d66693f9ae5fec32446d577", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6c00e546679fc653396377e226a30fb0b86fd5e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c00e546679fc653396377e226a30fb0b86fd5e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6c00e546679fc653396377e226a30fb0b86fd5e6", "patch": "@@ -1557,9 +1557,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // FIXME: We are currently creating two branches here in order to maintain\n             // consistency. But they should be merged as much as possible.\n             let fru_tys = if self.tcx.features().type_changing_struct_update {\n-                let base_ty = self.check_expr(base_expr);\n                 match adt_ty.kind() {\n                     ty::Adt(adt, substs) if adt.is_struct() => {\n+                        // Make an ADT with fresh inference substitutions. This\n+                        // will allow us to guide inference along so that, e.g.\n+                        // ```\n+                        // let x = MyStruct<'a, B, const C: usize> {\n+                        //    f: 1,\n+                        //    ..Default::default()\n+                        // };\n+                        // ```\n+                        // will have the default base expression constrained to\n+                        // `MyStruct<'_, _, _>`, as opposed to just `_`... This\n+                        // will allow us to then do a subtyping relation on all\n+                        // of the `remaining_fields` below, per the RFC.\n+                        let fresh_substs = self.fresh_substs_for_item(base_expr.span, adt.did());\n+                        let base_ty = self.check_expr_has_type_or_error(\n+                            base_expr,\n+                            self.tcx.mk_adt(*adt, fresh_substs),\n+                            |_| {},\n+                        );\n+                        let base_ty = self.shallow_resolve(base_ty);\n                         match base_ty.kind() {\n                             ty::Adt(base_adt, base_subs) if adt == base_adt => {\n                                 variant\n@@ -1585,7 +1603,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                     self.register_predicates(obligations)\n                                                 }\n                                                 // FIXME: Need better diagnostics for `FieldMisMatch` error\n-                                                Err(_) => {\n+                                                Err(type_error) => {\n+                                                    debug!(\"check_expr_struct_fields: {fru_ty} sub {target_ty} failed: {type_error:?}\");\n                                                     self.report_mismatched_types(\n                                                         &cause,\n                                                         target_ty,\n@@ -1596,7 +1615,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                 }\n                                             }\n                                         }\n-                                        fru_ty\n+                                        self.resolve_vars_if_possible(fru_ty)\n                                     })\n                                     .collect()\n                             }\n@@ -1613,6 +1632,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     _ => {\n+                        // Check the base_expr, regardless of a bad expected adt_ty, so we can get\n+                        // type errors on that expression, too.\n+                        self.check_expr(base_expr);\n                         self.tcx\n                             .sess\n                             .emit_err(FunctionalRecordUpdateOnNonStruct { span: base_expr.span });"}, {"sha": "3dfbef0ee90fd83b4546e80ac28be86b66f2b4b8", "filename": "src/test/ui/rfcs/rfc-2528-type-changing-struct-update/issue-96878.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6c00e546679fc653396377e226a30fb0b86fd5e6/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-96878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c00e546679fc653396377e226a30fb0b86fd5e6/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-96878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-96878.rs?ref=6c00e546679fc653396377e226a30fb0b86fd5e6", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+#![feature(type_changing_struct_update)]\n+#![allow(incomplete_features)]\n+\n+use std::borrow::Cow;\n+use std::marker::PhantomData;\n+\n+#[derive(Default)]\n+struct NonGeneric {\n+    field1: usize,\n+}\n+\n+#[derive(Default)]\n+struct Generic<T, U> {\n+    field1: T,\n+    field2: U,\n+}\n+\n+#[derive(Default)]\n+struct MoreGeneric<'a, const N: usize> {\n+    // If only `for<const N: usize> [u32; N]: Default`...\n+    field1: PhantomData<[u32; N]>,\n+    field2: Cow<'a, str>,\n+}\n+\n+fn main() {\n+    let default1 = NonGeneric { ..Default::default() };\n+    let default2: Generic<i32, f32> = Generic { ..Default::default() };\n+    let default3: MoreGeneric<'static, 12> = MoreGeneric { ..Default::default() };\n+}"}]}