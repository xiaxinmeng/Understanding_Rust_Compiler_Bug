{"sha": "c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTUzMjk0NzVkMDQxZGJlYjA3N2VjZGE2YWU3MWY2OTBiNGJjYzE=", "commit": {"author": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-12-01T00:54:50Z"}, "committer": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2020-12-04T00:14:26Z"}, "message": "Add more functions to size_of_in_element_count\nSpecifically ptr::{sub, wrapping_sub, add, wrapping_add, offset, wrapping_offset} and slice::{from_raw_parts, from_raw_parts_mut}\nThe lint now also looks for size_of calls through casts (Since offset takes an isize)", "tree": {"sha": "e2728ea2ddb8c10755e8b868f9b4bc50a80bb25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2728ea2ddb8c10755e8b868f9b4bc50a80bb25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "html_url": "https://github.com/rust-lang/rust/commit/c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/comments", "author": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5", "html_url": "https://github.com/rust-lang/rust/commit/af9685bb1e7e27a7b21d9939a42c1e9dce8c4df5"}], "stats": {"total": 169, "additions": 127, "deletions": 42}, "files": [{"sha": "4ef595bcffd9992f10ea5f38c3bd1c32b2cf6814", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "patch": "@@ -848,6 +848,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &shadow::SHADOW_SAME,\n         &shadow::SHADOW_UNRELATED,\n         &single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n+        &size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n         &slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n         &stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n         &strings::STRING_ADD,\n@@ -917,7 +918,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unnecessary_wraps::UNNECESSARY_WRAPS,\n         &unnested_or_patterns::UNNESTED_OR_PATTERNS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n-        &size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n         &unused_self::UNUSED_SELF,\n         &unused_unit::UNUSED_UNIT,\n@@ -1562,6 +1562,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&self_assignment::SELF_ASSIGNMENT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n+        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n         LintId::of(&strings::STRING_FROM_UTF8_AS_BYTES),\n@@ -1608,7 +1609,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n         LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n-        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n@@ -1872,6 +1872,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&self_assignment::SELF_ASSIGNMENT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n+        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n@@ -1887,7 +1888,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n-        LintId::of(&size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n         LintId::of(&vec_resize_to_zero::VEC_RESIZE_TO_ZERO),"}, {"sha": "210cf5773e1cd43fb600a5f767f7fc50c389a637", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "patch": "@@ -54,31 +54,40 @@ fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tc\n         ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node || BinOpKind::Div == op.node => {\n             get_size_of_ty(cx, left).or_else(|| get_size_of_ty(cx, right))\n         },\n+        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr),\n         _ => None,\n     }\n }\n \n-const FUNCTIONS: [[&str; 3]; 6] = [\n-    paths::COPY_NONOVERLAPPING,\n-    paths::COPY,\n-    paths::WRITE_BYTES,\n-    paths::PTR_SWAP_NONOVERLAPPING,\n-    paths::PTR_SLICE_FROM_RAW_PARTS,\n-    paths::PTR_SLICE_FROM_RAW_PARTS_MUT,\n+fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<(Ty<'tcx>, &'tcx Expr<'tcx>)> {\n+    const FUNCTIONS: [&[&str]; 8] = [\n+        &paths::COPY_NONOVERLAPPING,\n+        &paths::COPY,\n+        &paths::WRITE_BYTES,\n+        &paths::PTR_SWAP_NONOVERLAPPING,\n+        &paths::PTR_SLICE_FROM_RAW_PARTS,\n+        &paths::PTR_SLICE_FROM_RAW_PARTS_MUT,\n+        &paths::SLICE_FROM_RAW_PARTS,\n+        &paths::SLICE_FROM_RAW_PARTS_MUT,\n     ];\n-const METHODS: [&str; 5] = [\n-    \"write_bytes\",\n-    \"copy_to\",\n-    \"copy_from\",\n-    \"copy_to_nonoverlapping\",\n-    \"copy_from_nonoverlapping\",\n+    const METHODS: [&str; 11] = [\n+        \"write_bytes\",\n+        \"copy_to\",\n+        \"copy_from\",\n+        \"copy_to_nonoverlapping\",\n+        \"copy_from_nonoverlapping\",\n+        \"add\",\n+        \"wrapping_add\",\n+        \"sub\",\n+        \"wrapping_sub\",\n+        \"offset\",\n+        \"wrapping_offset\",\n     ];\n-fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<(Ty<'tcx>, &'tcx Expr<'tcx>)> {\n+\n     if_chain! {\n         // Find calls to ptr::{copy, copy_nonoverlapping}\n         // and ptr::{swap_nonoverlapping, write_bytes},\n-        if let ExprKind::Call(func, args) = expr.kind;\n-        if let [.., count] = args;\n+        if let ExprKind::Call(func, [.., count]) = expr.kind;\n         if let ExprKind::Path(ref func_qpath) = func.kind;\n         if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n         if FUNCTIONS.iter().any(|func_path| match_def_path(cx, def_id, func_path));\n@@ -91,13 +100,12 @@ fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -\n     };\n     if_chain! {\n         // Find calls to copy_{from,to}{,_nonoverlapping} and write_bytes methods\n-        if let ExprKind::MethodCall(method_path, _, args, _) = expr.kind;\n-        if let [ptr_self, _, count] = args;\n+        if let ExprKind::MethodCall(method_path, _, [ptr_self, .., count], _) = expr.kind;\n         let method_ident = method_path.ident.as_str();\n         if METHODS.iter().any(|m| *m == &*method_ident);\n \n         // Get the pointee type\n-        if let ty::RawPtr(TypeAndMut { ty: pointee_ty, mutbl:_mutability }) =\n+        if let ty::RawPtr(TypeAndMut { ty: pointee_ty, .. }) =\n             cx.typeck_results().expr_ty(ptr_self).kind();\n         then {\n             return Some((pointee_ty, count));\n@@ -115,7 +123,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n              instead of a count of elements of T\";\n \n         if_chain! {\n-            // Find calls to unsafe copy functions and get\n+            // Find calls to functions with an element count parameter and get\n             // the pointee type and count parameter expression\n             if let Some((pointee_ty, count_expr)) = get_pointee_ty_and_count_expr(cx, expr);\n "}, {"sha": "6fdc7b4587f049c207f4fff45760fd5cd3e17419", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "patch": "@@ -128,6 +128,8 @@ pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGu\n pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n+pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];\n+pub const SLICE_FROM_RAW_PARTS_MUT: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts_mut\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 4] = [\"core\", \"slice\", \"iter\", \"Iter\"];\n pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];"}, {"sha": "b13e390705ab79e96317b57375dff763f9725039", "filename": "tests/ui/size_of_in_element_count.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/tests%2Fui%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/tests%2Fui%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count.rs?ref=c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "patch": "@@ -1,10 +1,11 @@\n #![warn(clippy::size_of_in_element_count)]\n+#![allow(clippy::ptr_offset_with_cast)]\n \n use std::mem::{size_of, size_of_val};\n use std::ptr::{\n-    copy, copy_nonoverlapping, slice_from_raw_parts,\n-    slice_from_raw_parts_mut, swap_nonoverlapping, write_bytes,\n+    copy, copy_nonoverlapping, slice_from_raw_parts, slice_from_raw_parts_mut, swap_nonoverlapping, write_bytes,\n };\n+use std::slice::{from_raw_parts, from_raw_parts_mut};\n \n fn main() {\n     const SIZE: usize = 128;\n@@ -33,6 +34,16 @@ fn main() {\n     slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n     slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n \n+    unsafe { from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+    unsafe { from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n+\n+    unsafe { y.as_mut_ptr().sub(size_of::<u8>()) };\n+    y.as_ptr().wrapping_sub(size_of::<u8>());\n+    unsafe { y.as_ptr().add(size_of::<u8>()) };\n+    y.as_mut_ptr().wrapping_add(size_of::<u8>());\n+    unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n+    y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n+\n     // Count expression involving multiplication of size_of (Should trigger the lint)\n     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n "}, {"sha": "b7f421ec99741abc64bc3e1d11a87c208e024f27", "filename": "tests/ui/size_of_in_element_count.stderr", "status": "modified", "additions": 81, "deletions": 17, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/tests%2Fui%2Fsize_of_in_element_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1a5329475d041dbeb077ecda6ae71f690b4bcc1/tests%2Fui%2Fsize_of_in_element_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count.stderr?ref=c1a5329475d041dbeb077ecda6ae71f690b4bcc1", "patch": "@@ -1,5 +1,5 @@\n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:17:68\n+  --> $DIR/size_of_in_element_count.rs:18:68\n    |\n LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                    ^^^^^^^^^^^^^^^\n@@ -8,124 +8,188 @@ LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of:\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:18:62\n+  --> $DIR/size_of_in_element_count.rs:19:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:20:49\n+  --> $DIR/size_of_in_element_count.rs:21:49\n    |\n LL |     unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:21:64\n+  --> $DIR/size_of_in_element_count.rs:22:64\n    |\n LL |     unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:22:51\n+  --> $DIR/size_of_in_element_count.rs:23:51\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n    |                                                   ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:23:66\n+  --> $DIR/size_of_in_element_count.rs:24:66\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n    |                                                                  ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:25:47\n+  --> $DIR/size_of_in_element_count.rs:26:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                               ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:26:47\n+  --> $DIR/size_of_in_element_count.rs:27:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:28:46\n+  --> $DIR/size_of_in_element_count.rs:29:46\n    |\n LL |     unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:29:47\n+  --> $DIR/size_of_in_element_count.rs:30:47\n    |\n LL |     unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:31:66\n+  --> $DIR/size_of_in_element_count.rs:32:66\n    |\n LL |     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:33:46\n+  --> $DIR/size_of_in_element_count.rs:34:46\n    |\n LL |     slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:34:38\n+  --> $DIR/size_of_in_element_count.rs:35:38\n    |\n LL |     slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:37:62\n+  --> $DIR/size_of_in_element_count.rs:37:49\n+   |\n+LL |     unsafe { from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:38:41\n+   |\n+LL |     unsafe { from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:40:33\n+   |\n+LL |     unsafe { y.as_mut_ptr().sub(size_of::<u8>()) };\n+   |                                 ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:41:29\n+   |\n+LL |     y.as_ptr().wrapping_sub(size_of::<u8>());\n+   |                             ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:42:29\n+   |\n+LL |     unsafe { y.as_ptr().add(size_of::<u8>()) };\n+   |                             ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:43:33\n+   |\n+LL |     y.as_mut_ptr().wrapping_add(size_of::<u8>());\n+   |                                 ^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:44:32\n+   |\n+LL |     unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:45:36\n+   |\n+LL |     y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of T\n+  --> $DIR/size_of_in_element_count.rs:48:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:40:62\n+  --> $DIR/size_of_in_element_count.rs:51:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of T\n-  --> $DIR/size_of_in_element_count.rs:43:47\n+  --> $DIR/size_of_in_element_count.rs:54:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 24 previous errors\n "}]}