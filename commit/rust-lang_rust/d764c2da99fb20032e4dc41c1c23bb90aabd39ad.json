{"sha": "d764c2da99fb20032e4dc41c1c23bb90aabd39ad", "node_id": "C_kwDOAAsO6NoAKGQ3NjRjMmRhOTlmYjIwMDMyZTRkYzQxYzFjMjNiYjkwYWFiZDM5YWQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-06T04:52:03Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-06T04:55:58Z"}, "message": "address comments", "tree": {"sha": "a2b1c84196df00ae477cdec8261996c0b08eef7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b1c84196df00ae477cdec8261996c0b08eef7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d764c2da99fb20032e4dc41c1c23bb90aabd39ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d764c2da99fb20032e4dc41c1c23bb90aabd39ad", "html_url": "https://github.com/rust-lang/rust/commit/d764c2da99fb20032e4dc41c1c23bb90aabd39ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d764c2da99fb20032e4dc41c1c23bb90aabd39ad/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25fdea009ef0db01134d17cf97cd09b507beca99", "url": "https://api.github.com/repos/rust-lang/rust/commits/25fdea009ef0db01134d17cf97cd09b507beca99", "html_url": "https://github.com/rust-lang/rust/commit/25fdea009ef0db01134d17cf97cd09b507beca99"}], "stats": {"total": 95, "additions": 50, "deletions": 45}, "files": [{"sha": "b9b09c66230b8de6bde1ee419cb04633cfd40ac3", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/d764c2da99fb20032e4dc41c1c23bb90aabd39ad/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d764c2da99fb20032e4dc41c1c23bb90aabd39ad/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=d764c2da99fb20032e4dc41c1c23bb90aabd39ad", "patch": "@@ -420,6 +420,51 @@ pub(super) enum AllowMultipleAlternatives {\n     Yes,\n }\n \n+fn parse_suggestion_values(\n+    nested: ParseNestedMeta<'_>,\n+    allow_multiple: AllowMultipleAlternatives,\n+) -> syn::Result<Vec<LitStr>> {\n+    let values = if let Ok(val) = nested.value() {\n+        vec![val.parse()?]\n+    } else {\n+        let content;\n+        parenthesized!(content in nested.input);\n+\n+        if let AllowMultipleAlternatives::No = allow_multiple {\n+            span_err(\n+                nested.input.span().unwrap(),\n+                \"expected exactly one string literal for `code = ...`\",\n+            )\n+            .emit();\n+            vec![]\n+        } else {\n+            let literals = Punctuated::<LitStr, Token![,]>::parse_terminated(&content);\n+\n+            match literals {\n+                Ok(p) if p.is_empty() => {\n+                    span_err(\n+                        content.span().unwrap(),\n+                        \"expected at least one string literal for `code(...)`\",\n+                    )\n+                    .emit();\n+                    vec![]\n+                }\n+                Ok(p) => p.into_iter().collect(),\n+                Err(_) => {\n+                    span_err(\n+                        content.span().unwrap(),\n+                        \"`code(...)` must contain only string literals\",\n+                    )\n+                    .emit();\n+                    vec![]\n+                }\n+            }\n+        }\n+    };\n+\n+    Ok(values)\n+}\n+\n /// Constructs the `format!()` invocation(s) necessary for a `#[suggestion*(code = \"foo\")]` or\n /// `#[suggestion*(code(\"foo\", \"bar\"))]` attribute field\n pub(super) fn build_suggestion_code(\n@@ -428,47 +473,7 @@ pub(super) fn build_suggestion_code(\n     fields: &impl HasFieldMap,\n     allow_multiple: AllowMultipleAlternatives,\n ) -> TokenStream {\n-    let values = match (|| {\n-        let values: Vec<LitStr> = if let Ok(val) = nested.value() {\n-            vec![val.parse()?]\n-        } else {\n-            let content;\n-            parenthesized!(content in nested.input);\n-\n-            if let AllowMultipleAlternatives::No = allow_multiple {\n-                span_err(\n-                    nested.input.span().unwrap(),\n-                    \"expected exactly one string literal for `code = ...`\",\n-                )\n-                .emit();\n-                vec![]\n-            } else {\n-                let literals = Punctuated::<LitStr, Token![,]>::parse_terminated(&content);\n-\n-                match literals {\n-                    Ok(p) if p.is_empty() => {\n-                        span_err(\n-                            content.span().unwrap(),\n-                            \"expected at least one string literal for `code(...)`\",\n-                        )\n-                        .emit();\n-                        vec![]\n-                    }\n-                    Ok(p) => p.into_iter().collect(),\n-                    Err(_) => {\n-                        span_err(\n-                            content.span().unwrap(),\n-                            \"`code(...)` must contain only string literals\",\n-                        )\n-                        .emit();\n-                        vec![]\n-                    }\n-                }\n-            }\n-        };\n-\n-        Ok(values)\n-    })() {\n+    let values = match parse_suggestion_values(nested, allow_multiple) {\n         Ok(x) => x,\n         Err(e) => return e.into_compile_error(),\n     };\n@@ -706,14 +711,14 @@ impl SubdiagnosticKind {\n             let path_span = nested.path.span().unwrap();\n             let val_span = nested.input.span().unwrap();\n \n-            macro get_string() {\n-                {\n+            macro_rules! get_string {\n+                () => {{\n                     let Ok(value) = nested.value().and_then(|x| x.parse::<LitStr>()) else {\n                         span_err(val_span, \"expected `= \\\"xxx\\\"`\").emit();\n                         return Ok(());\n                     };\n                     value\n-                }\n+                }};\n             }\n \n             let mut has_errors = false;"}, {"sha": "78a6f74887d4b1a3e258f3411f9c0ef7ee91fefd", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d764c2da99fb20032e4dc41c1c23bb90aabd39ad/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d764c2da99fb20032e4dc41c1c23bb90aabd39ad/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=d764c2da99fb20032e4dc41c1c23bb90aabd39ad", "patch": "@@ -47,7 +47,7 @@ impl Parse for Newtype {\n                     false\n                 }\n                 \"debug_format\" => {\n-                    let Meta::NameValue(MetaNameValue { value: Expr::Lit(lit), .. } ) = &attr.meta else {\n+                    let Meta::NameValue(MetaNameValue { value: Expr::Lit(lit), .. }) = &attr.meta else {\n                         panic!(\"#[debug_format = FMT] attribute requires a format\");\n                     };\n "}]}