{"sha": "db98d32ea04438cf759b749d5cbeba4f77222664", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOThkMzJlYTA0NDM4Y2Y3NTliNzQ5ZDVjYmViYTRmNzcyMjI2NjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-28T15:56:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-28T15:56:45Z"}, "message": "Auto merge of #71644 - Dylan-DPC:rollup-cq7plwa, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71340 (Moving more build-pass tests to check-pass)\n - #71456 (Use lib crate type for SGX in `fn build_auxiliary`)\n - #71615 (share some common code for compile-time miri instances)\n - #71637 (Minor formatting changes in `cfg-sanitize.md`)\n - #71641 (Update books)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ab4353a17ab024e87815a1936b07c3391295c734", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab4353a17ab024e87815a1936b07c3391295c734"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db98d32ea04438cf759b749d5cbeba4f77222664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db98d32ea04438cf759b749d5cbeba4f77222664", "html_url": "https://github.com/rust-lang/rust/commit/db98d32ea04438cf759b749d5cbeba4f77222664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db98d32ea04438cf759b749d5cbeba4f77222664/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6", "html_url": "https://github.com/rust-lang/rust/commit/b7bd7c1024a1449449c3ae7b4b4c63a904a620e6"}, {"sha": "b17ef8669e4a2d3fdd1b9a67cb7a8be18a47c07b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17ef8669e4a2d3fdd1b9a67cb7a8be18a47c07b", "html_url": "https://github.com/rust-lang/rust/commit/b17ef8669e4a2d3fdd1b9a67cb7a8be18a47c07b"}], "stats": {"total": 296, "additions": 128, "deletions": 168}, "files": [{"sha": "e37c0e84e2ef73d3a4ebffda8011db6814a3b02d", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1 +1 @@\n-Subproject commit f5db319e0b19c22964398d56bc63103d669e1bba\n+Subproject commit e37c0e84e2ef73d3a4ebffda8011db6814a3b02d"}, {"sha": "40beccdf1bb8eb9184a2e3b42db8b8c6e394247f", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1 +1 @@\n-Subproject commit 668fb07b6160b9c468f598e839c1e044db65de30\n+Subproject commit 40beccdf1bb8eb9184a2e3b42db8b8c6e394247f"}, {"sha": "4d2d275997746d35eabfc4d992dfbdcce2f626ed", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1 +1 @@\n-Subproject commit 6eb24d6e9c0773d4aee68ed5fca121ce3cdf676a\n+Subproject commit 4d2d275997746d35eabfc4d992dfbdcce2f626ed"}, {"sha": "ed22e6fbfcb6ce436e9ea3b4bb4a55b2fb50a57e", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1 +1 @@\n-Subproject commit 3ce94caed4cf967106c51ae86be5e098f7875f11\n+Subproject commit ed22e6fbfcb6ce436e9ea3b4bb4a55b2fb50a57e"}, {"sha": "ffc99581689fe2455908aaef5f5cf50dd03bb8f5", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1 +1 @@\n-Subproject commit c106d1683c3a2b0960f0f0fb01728cbb19807332\n+Subproject commit ffc99581689fe2455908aaef5f5cf50dd03bb8f5"}, {"sha": "3442abf46df86cae98e4a85482b84b5d37caa2c9", "filename": "src/doc/unstable-book/src/language-features/cfg-sanitize.md", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-sanitize.md", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-sanitize.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-sanitize.md?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -11,26 +11,24 @@ depending on whether a particular sanitizer is enabled or not.\n \n ## Examples\n \n-``` rust\n+```rust\n #![feature(cfg_sanitize)]\n \n #[cfg(sanitize = \"thread\")]\n fn a() {\n-  // ...\n+    // ...\n }\n \n #[cfg(not(sanitize = \"thread\"))]\n fn a() {\n-  // ...\n+    // ...\n }\n \n fn b() {\n-  if cfg!(sanitize = \"leak\") {\n-    // ...\n-  } else {\n-    // ...\n-  }\n+    if cfg!(sanitize = \"leak\") {\n+        // ...\n+    } else {\n+        // ...\n+    }\n }\n-\n ```\n-"}, {"sha": "84031ec0f17649aea4b0046ad45ca5c91b0cde93", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 56, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,7 +1,7 @@\n use rustc_middle::mir;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, Ty};\n-use std::borrow::{Borrow, Cow};\n+use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::hash::Hash;\n \n@@ -13,8 +13,8 @@ use rustc_middle::mir::AssertMessage;\n use rustc_span::symbol::Symbol;\n \n use crate::interpret::{\n-    self, AllocId, Allocation, Frame, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n-    OpTy, PlaceTy, Pointer, Scalar,\n+    self, compile_time_machine, AllocId, Allocation, Frame, GlobalId, ImmTy, InterpCx,\n+    InterpResult, Memory, OpTy, PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n@@ -171,29 +171,9 @@ impl interpret::MayLeak for ! {\n }\n \n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir, 'tcx> {\n-    type MemoryKind = !;\n-    type PointerTag = ();\n-    type ExtraFnVal = !;\n+    compile_time_machine!(<'mir, 'tcx>);\n \n-    type FrameExtra = ();\n     type MemoryExtra = MemoryExtra;\n-    type AllocExtra = ();\n-\n-    type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n-\n-    const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n-\n-    #[inline(always)]\n-    fn enforce_alignment(_memory_extra: &Self::MemoryExtra) -> bool {\n-        // We do not check for alignment to avoid having to carry an `Align`\n-        // in `ConstValue::ByRef`.\n-        false\n-    }\n-\n-    #[inline(always)]\n-    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n-        false // for now, we don't enforce validity\n-    }\n \n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n@@ -241,16 +221,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         }))\n     }\n \n-    fn call_extra_fn(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        fn_val: !,\n-        _args: &[OpTy<'tcx>],\n-        _ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n-        _unwind: Option<mir::BasicBlock>,\n-    ) -> InterpResult<'tcx> {\n-        match fn_val {}\n-    }\n-\n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n@@ -310,20 +280,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Err(ConstEvalErrKind::NeedsRfc(\"pointer arithmetic or comparison\".to_string()).into())\n     }\n \n-    #[inline(always)]\n-    fn init_allocation_extra<'b>(\n-        _memory_extra: &MemoryExtra,\n-        _id: AllocId,\n-        alloc: Cow<'b, Allocation>,\n-        _kind: Option<MemoryKind<!>>,\n-    ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n-        // We do not use a tag so we can just cheaply forward the allocation\n-        (alloc, ())\n-    }\n-\n-    #[inline(always)]\n-    fn tag_global_base_pointer(_memory_extra: &MemoryExtra, _id: AllocId) -> Self::PointerTag {}\n-\n     fn box_alloc(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n@@ -345,14 +301,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Ok(())\n     }\n \n-    #[inline(always)]\n-    fn init_frame_extra(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        frame: Frame<'mir, 'tcx>,\n-    ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n-        Ok(frame)\n-    }\n-\n     #[inline(always)]\n     fn stack(\n         ecx: &'a InterpCx<'mir, 'tcx, Self>,"}, {"sha": "03a617993e916e08ba0b0cbf6ff37ebe2576d0ac", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -357,3 +357,67 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         _ptr: Pointer<Self::PointerTag>,\n     ) -> InterpResult<'tcx, u64>;\n }\n+\n+// A lot of the flexibility above is just needed for `Miri`, but all \"compile-time\" machines\n+// (CTFE and ConstProp) use the same instance.  Here, we share that code.\n+pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n+    type PointerTag = ();\n+    type ExtraFnVal = !;\n+\n+    type MemoryKind = !;\n+    type MemoryMap = rustc_data_structures::fx::FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n+    const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n+\n+    type AllocExtra = ();\n+    type FrameExtra = ();\n+\n+    #[inline(always)]\n+    fn enforce_alignment(_memory_extra: &Self::MemoryExtra) -> bool {\n+        // We do not check for alignment to avoid having to carry an `Align`\n+        // in `ConstValue::ByRef`.\n+        false\n+    }\n+\n+    #[inline(always)]\n+    fn enforce_validity(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+        false // for now, we don't enforce validity\n+    }\n+\n+    #[inline(always)]\n+    fn call_extra_fn(\n+        _ecx: &mut InterpCx<$mir, $tcx, Self>,\n+        fn_val: !,\n+        _args: &[OpTy<$tcx>],\n+        _ret: Option<(PlaceTy<$tcx>, mir::BasicBlock)>,\n+        _unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<$tcx> {\n+        match fn_val {}\n+    }\n+\n+    #[inline(always)]\n+    fn init_allocation_extra<'b>(\n+        _memory_extra: &Self::MemoryExtra,\n+        _id: AllocId,\n+        alloc: Cow<'b, Allocation>,\n+        _kind: Option<MemoryKind<!>>,\n+    ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n+        // We do not use a tag so we can just cheaply forward the allocation\n+        (alloc, ())\n+    }\n+\n+    #[inline(always)]\n+    fn tag_global_base_pointer(\n+        _memory_extra: &Self::MemoryExtra,\n+        _id: AllocId,\n+    ) -> Self::PointerTag {\n+        ()\n+    }\n+\n+    #[inline(always)]\n+    fn init_frame_extra(\n+        _ecx: &mut InterpCx<$mir, $tcx, Self>,\n+        frame: Frame<$mir, $tcx>,\n+    ) -> InterpResult<$tcx, Frame<$mir, $tcx>> {\n+        Ok(frame)\n+    }\n+}"}, {"sha": "d46010d98a5aa82349559a0fb1e13bb3a0183bd1", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -19,7 +19,7 @@ pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in\n \n pub use self::eval_context::{Frame, InterpCx, LocalState, LocalValue, StackPopCleanup};\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n-pub use self::machine::{AllocMap, Machine, MayLeak, StackPopJump};\n+pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};"}, {"sha": "ae7bbe9f36a3a2bc8b8dda5a552485100fbea0c7", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -13,6 +13,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n+#![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]\n #![feature(iter_order_by)]"}, {"sha": "a38cf3bba85bfb243571dc3c36302020e740768b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 56, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,11 +1,9 @@\n //! Propagates constants for early reporting of statically known\n //! assertion failures\n \n-use std::borrow::Cow;\n use std::cell::Cell;\n \n use rustc_ast::ast::Mutability;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n@@ -29,9 +27,9 @@ use rustc_trait_selection::traits;\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n-    self, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy, Immediate, InternKind,\n-    InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy,\n-    Pointer, ScalarMaybeUndef, StackPopCleanup,\n+    self, compile_time_machine, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy,\n+    Immediate, InternKind, InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy,\n+    Operand as InterpOperand, PlaceTy, Pointer, ScalarMaybeUndef, StackPopCleanup,\n };\n use crate::transform::{MirPass, MirSource};\n \n@@ -162,27 +160,9 @@ impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n }\n \n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx> {\n-    type MemoryKind = !;\n-    type PointerTag = ();\n-    type ExtraFnVal = !;\n+    compile_time_machine!(<'mir, 'tcx>);\n \n-    type FrameExtra = ();\n     type MemoryExtra = ();\n-    type AllocExtra = ();\n-\n-    type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n-\n-    const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n-\n-    #[inline(always)]\n-    fn enforce_alignment(_memory_extra: &Self::MemoryExtra) -> bool {\n-        false\n-    }\n-\n-    #[inline(always)]\n-    fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n-        false\n-    }\n \n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n@@ -194,16 +174,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         Ok(None)\n     }\n \n-    fn call_extra_fn(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        fn_val: !,\n-        _args: &[OpTy<'tcx>],\n-        _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n-        _unwind: Option<BasicBlock>,\n-    ) -> InterpResult<'tcx> {\n-        match fn_val {}\n-    }\n-\n     fn call_intrinsic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n@@ -236,20 +206,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         throw_machine_stop_str!(\"pointer arithmetic or comparisons aren't supported in ConstProp\")\n     }\n \n-    #[inline(always)]\n-    fn init_allocation_extra<'b>(\n-        _memory_extra: &(),\n-        _id: AllocId,\n-        alloc: Cow<'b, Allocation>,\n-        _kind: Option<MemoryKind<!>>,\n-    ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n-        // We do not use a tag so we can just cheaply forward the allocation\n-        (alloc, ())\n-    }\n-\n-    #[inline(always)]\n-    fn tag_global_base_pointer(_memory_extra: &(), _id: AllocId) -> Self::PointerTag {}\n-\n     fn box_alloc(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n@@ -290,14 +246,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         Ok(())\n     }\n \n-    #[inline(always)]\n-    fn init_frame_extra(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        frame: Frame<'mir, 'tcx>,\n-    ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n-        Ok(frame)\n-    }\n-\n     #[inline(always)]\n     fn stack(\n         ecx: &'a InterpCx<'mir, 'tcx, Self>,"}, {"sha": "0e6b8823241c21318de521ce608afddfa8f0e9b3", "filename": "src/test/incremental/warnings-reemitted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,6 +1,6 @@\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Coverflow-checks=on\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n \n #![warn(arithmetic_overflow)]\n "}, {"sha": "d288bba5957a282e169f541ad948623680730c33", "filename": "src/test/ui/anon-params/anon-params-deprecated.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,7 +1,7 @@\n #![warn(anonymous_parameters)]\n // Test for the anonymous_parameters deprecation lint (RFC 1685)\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2015\n // run-rustfix\n "}, {"sha": "d677e0c32b04a4ee9e1e2040fb39eeb162e009f6", "filename": "src/test/ui/anon-params/anon-params-deprecated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,7 +1,7 @@\n #![warn(anonymous_parameters)]\n // Test for the anonymous_parameters deprecation lint (RFC 1685)\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2015\n // run-rustfix\n "}, {"sha": "9ecb3b1295ee4be5fea966f18f06ed60342a436e", "filename": "src/test/ui/async-await/issues/issue-55324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n use std::future::Future;"}, {"sha": "11920b07243e6e75bc9b97ccd7a60bde914445f9", "filename": "src/test/ui/async-await/issues/issue-58885.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n struct Xyz {"}, {"sha": "4ddebcf20a368f70e5c0b0663a12f8a4bbe32d22", "filename": "src/test/ui/async-await/issues/issue-59001.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n use std::future::Future;"}, {"sha": "66a3b07c3bd968d86523c5c269ced1838d44933d", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,6 +1,6 @@\n // Test that opaque `impl Trait` types are allowed to contain late-bound regions.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n \n #![feature(type_alias_impl_trait)]"}, {"sha": "a3d5933965a4114b3ebdcb327a4775d80fcd4338", "filename": "src/test/ui/attributes/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -2,7 +2,7 @@\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n "}, {"sha": "d9ca7ddc7cab731c95b4949ad2dc8f3a4c54462f", "filename": "src/test/ui/bastion-of-the-turbofish.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // Bastion of the Turbofish\n // ------------------------"}, {"sha": "34582de45cb9c71cc141d2a18b466f53f1192daf", "filename": "src/test/ui/codemap_tests/unicode_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn main() {\n     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; } //~ WARNING while_true"}, {"sha": "303bc8326fdb7ef1e7d82876e3dc50bf2ab70d0e", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n "}, {"sha": "fb234eb08275ef768bc1523d5538ab07bab7e21b", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash"}, {"sha": "d8485ed7da169e552bd41a47f52e74346f3267d7", "filename": "src/test/ui/deprecation/atomic_initializers.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.fixed?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #[allow(deprecated, unused_imports)]\n use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT};"}, {"sha": "b15a1bbfd92d6c0f6a7a9a569a29136135ac599a", "filename": "src/test/ui/deprecation/atomic_initializers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #[allow(deprecated, unused_imports)]\n use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT};"}, {"sha": "35c3065ea815081e1bbb3422d84a2c43cd0a1a57", "filename": "src/test/ui/derive-uninhabited-enum-38885.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Wunused\n \n // ensure there are no special warnings about uninhabited types"}, {"sha": "8d142cea5de00f06c0454a90929c62335aca5e71", "filename": "src/test/ui/editions/edition-extern-crate-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,6 +1,6 @@\n // aux-build:edition-extern-crate-allowed.rs\n // edition:2015\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(rust_2018_idioms)]\n "}, {"sha": "1049a2da8fd1c96fb0d80707885630ff7b59c97f", "filename": "src/test/ui/editions/edition-feature-redundant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-feature-redundant.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rust_2018_preview)]\n //~^ WARN the feature `rust_2018_preview` is included in the Rust 2018 edition"}, {"sha": "984a7fabb6633ee8c750b69c46993dff237da645", "filename": "src/test/ui/emit-artifact-notifications.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:--emit=metadata --error-format=json --json artifacts\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n "}, {"sha": "05abcb629b1c88e9b5232933bbe6a66c32739c17", "filename": "src/test/ui/error-codes/E0705.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Ferror-codes%2FE0705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Ferror-codes%2FE0705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0705.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // This is a stub feature that doesn't control anything, so to make tidy happy,\n // gate-test-test_2018_feature"}, {"sha": "5364d92e0c46b43b1549895eb479a290317b0984", "filename": "src/test/ui/explain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fexplain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fexplain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,2 +1,2 @@\n // compile-flags: --explain E0591\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass"}, {"sha": "b4e9da0fc84051339a5be4ccc69ed34173558275", "filename": "src/test/ui/fn_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn_must_use.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(unused_must_use)]\n "}, {"sha": "2ab0f9fed3fc67fc9b0b4dcd99addc3f62327848", "filename": "src/test/ui/if/if-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fif%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fif%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn macros() {\n     macro_rules! foo{"}, {"sha": "a0f3aeffe9f7cf473de52d8790514a2212ee88db", "filename": "src/test/ui/loops/loops-reject-duplicate-labels-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // ignore-tidy-linelength\n "}, {"sha": "a501ac18588fb081616f81eb34adc7cc90c0e8fc", "filename": "src/test/ui/loops/loops-reject-duplicate-labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // ignore-tidy-linelength\n "}, {"sha": "741ea0c1ca8bc51bc91fe97636016e0880fa442b", "filename": "src/test/ui/loops/loops-reject-labels-shadowing-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,7 +1,7 @@\n // Issue #21633: reject duplicate loop labels in function bodies.\n // This is testing interaction between lifetime-params and labels.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "3212b78b08cd8e6e7d1ecc00d18793614bf27568", "filename": "src/test/ui/loops/loops-reject-lifetime-shadowing-label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "e7c3462867b5990b063bb9be1b7e4fd6a92be307", "filename": "src/test/ui/macros/must-use-in-macro-55516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Wunused\n \n // make sure write!() can't hide its unused Result"}, {"sha": "2e0ebe2cfa446caa5be1650e42d29b14e022d927", "filename": "src/test/ui/parser/underscore-suffix-for-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn main() {\n     let _ = \"Foo\"_;"}, {"sha": "95e8e10a3ece9948deb514ea1bc2778cecd354eb", "filename": "src/test/ui/proc-macro/attributes-included.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,5 +1,5 @@\n // aux-build:attributes-included.rs\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(unused)]\n "}, {"sha": "72f2868e0bfd65ea44cbe5bf86aadcfc4a11b3ec", "filename": "src/test/ui/rust-2018/macro-use-warned-against.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,6 +1,6 @@\n // aux-build:macro-use-warned-against.rs\n // aux-build:macro-use-warned-against2.rs\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(macro_use_extern_crate, unused)]\n "}, {"sha": "832632268fb2e6582c6569ff9bd73f4dc9a28c65", "filename": "src/test/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n // edition:2018\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // aux-build:remove-extern-crate.rs\n // compile-flags:--extern remove_extern_crate\n "}, {"sha": "bbb84cd462d7e62cef075665a63fddbdfe4889a8", "filename": "src/test/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n // edition:2018\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // aux-build:remove-extern-crate.rs\n // compile-flags:--extern remove_extern_crate\n "}, {"sha": "12348e6e07dbccb5206bfb2ba7e6df481e7b44ff", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -2,7 +2,7 @@\n // edition:2015\n // run-rustfix\n // rustfix-only-machine-applicable\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rust_2018_preview)]\n #![warn(rust_2018_compatibility)]"}, {"sha": "12348e6e07dbccb5206bfb2ba7e6df481e7b44ff", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -2,7 +2,7 @@\n // edition:2015\n // run-rustfix\n // rustfix-only-machine-applicable\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rust_2018_preview)]\n #![warn(rust_2018_compatibility)]"}, {"sha": "13f6f8e28291df6f1b006fece83f0373e6f142a0", "filename": "src/test/ui/rust-2018/try-ident.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(rust_2018_compatibility)]\n "}, {"sha": "bed7118011e9a882bce0f87087356156de8f842f", "filename": "src/test/ui/rust-2018/try-ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(rust_2018_compatibility)]\n "}, {"sha": "25df4a2aa3860517d1f1ff7393ed48a80855f7f3", "filename": "src/test/ui/span/macro-span-replacement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(unused)]\n "}, {"sha": "3ce7f2ce35da8fb2dcaa1cda57fee37d7fdec75e", "filename": "src/test/ui/span/multispan-import-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(unused)]\n "}, {"sha": "b71878406d7645878c20a78bc286a2fae254cf45", "filename": "src/test/ui/test-attrs/test-should-panic-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: --test\n \n #[test]"}, {"sha": "c021ad5ee0d2bcf00f720643c544561d8cd0ad60", "filename": "src/test/ui/underscore-imports/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fbasic.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // aux-build:underscore-imports.rs\n \n #![warn(unused_imports, unused_extern_crates)]"}, {"sha": "63fd052a5560d5770370a771c2dfd4eccf88a2b0", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db98d32ea04438cf759b749d5cbeba4f77222664/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=db98d32ea04438cf759b749d5cbeba4f77222664", "patch": "@@ -1750,6 +1750,7 @@ impl<'test> TestCx<'test> {\n             || self.config.target.contains(\"wasm32\")\n             || self.config.target.contains(\"nvptx\")\n             || self.is_vxworks_pure_static()\n+            || self.config.target.contains(\"sgx\")\n         {\n             // We primarily compile all auxiliary libraries as dynamic libraries\n             // to avoid code size bloat and large binaries as much as possible"}]}