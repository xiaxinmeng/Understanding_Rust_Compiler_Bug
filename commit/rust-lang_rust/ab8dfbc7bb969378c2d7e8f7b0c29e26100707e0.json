{"sha": "ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOGRmYmM3YmI5NjkzNzhjMmQ3ZThmN2IwYzI5ZTI2MTAwNzA3ZTA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-08-17T03:32:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-08-20T04:00:51Z"}, "message": "Merge `IdxSet` and `IdxSetBuf`.\n\nThe `Buf` vs. non-`Buf` distinction is no longer necessary, and the\nnastiest code in this file can be removed.\n\nTo minimize this patch, `IdxSet` is made a typedef of `IdxSetBuf`. The\nnext patch will remove this typedef.", "tree": {"sha": "de03d2940d1f9df29dab96510c4143e5039767de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de03d2940d1f9df29dab96510c4143e5039767de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0", "html_url": "https://github.com/rust-lang/rust/commit/ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b50e22bb978f10d90df78a377f23fd122a8d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b50e22bb978f10d90df78a377f23fd122a8d83", "html_url": "https://github.com/rust-lang/rust/commit/04b50e22bb978f10d90df78a377f23fd122a8d83"}], "stats": {"total": 93, "additions": 5, "deletions": 88}, "files": [{"sha": "6c64e5de378078e188d92719225bb09b0c6527ee", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 5, "deletions": 88, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=ab8dfbc7bb969378c2d7e8f7b0c29e26100707e0", "patch": "@@ -9,20 +9,18 @@\n // except according to those terms.\n \n use array_vec::ArrayVec;\n-use std::borrow::{Borrow, BorrowMut, ToOwned};\n use std::fmt;\n use std::iter;\n use std::marker::PhantomData;\n use std::mem;\n-use std::ops::{Deref, DerefMut, Range};\n use std::slice;\n use bitslice::{BitSlice, Word};\n use bitslice::{bitwise, Union, Subtract, Intersect};\n use indexed_vec::Idx;\n use rustc_serialize;\n \n-/// Represents a set (or packed family of sets), of some element type\n-/// E, where each E is identified by some unique index type `T`.\n+/// Represents a set of some element type E, where each E is identified by some\n+/// unique index type `T`.\n ///\n /// In other words, `T` is the type used to index into the bitvector\n /// this type uses to represent the set of object it holds.\n@@ -34,6 +32,9 @@ pub struct IdxSetBuf<T: Idx> {\n     bits: Vec<Word>,\n }\n \n+// FIXME: temporary\n+pub type IdxSet<T> = IdxSetBuf<T>;\n+\n impl<T: Idx> Clone for IdxSetBuf<T> {\n     fn clone(&self) -> Self {\n         IdxSetBuf { _pd: PhantomData, bits: self.bits.clone() }\n@@ -59,40 +60,6 @@ impl<T: Idx> rustc_serialize::Decodable for IdxSetBuf<T> {\n     }\n }\n \n-\n-// pnkfelix wants to have this be `IdxSet<T>([Word]) and then pass\n-// around `&mut IdxSet<T>` or `&IdxSet<T>`.\n-\n-/// Represents a set (or packed family of sets), of some element type\n-/// E, where each E is identified by some unique index type `T`.\n-///\n-/// In other words, `T` is the type used to index into the bitslice\n-/// this type uses to represent the set of object it holds.\n-#[repr(transparent)]\n-pub struct IdxSet<T: Idx> {\n-    _pd: PhantomData<fn(&T)>,\n-    bits: [Word],\n-}\n-\n-impl<T: Idx> Borrow<IdxSet<T>> for IdxSetBuf<T> {\n-    fn borrow(&self) -> &IdxSet<T> {\n-        &*self\n-    }\n-}\n-\n-impl<T: Idx> BorrowMut<IdxSet<T>> for IdxSetBuf<T> {\n-    fn borrow_mut(&mut self) -> &mut IdxSet<T> {\n-        &mut *self\n-    }\n-}\n-\n-impl<T: Idx> ToOwned for IdxSet<T> {\n-    type Owned = IdxSetBuf<T>;\n-    fn to_owned(&self) -> Self::Owned {\n-        IdxSet::to_owned(self)\n-    }\n-}\n-\n const BITS_PER_WORD: usize = mem::size_of::<Word>() * 8;\n \n impl<T: Idx> fmt::Debug for IdxSetBuf<T> {\n@@ -103,14 +70,6 @@ impl<T: Idx> fmt::Debug for IdxSetBuf<T> {\n     }\n }\n \n-impl<T: Idx> fmt::Debug for IdxSet<T> {\n-    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n-        w.debug_list()\n-         .entries(self.iter())\n-         .finish()\n-    }\n-}\n-\n impl<T: Idx> IdxSetBuf<T> {\n     fn new(init: Word, universe_size: usize) -> Self {\n         let num_words = (universe_size + (BITS_PER_WORD - 1)) / BITS_PER_WORD;\n@@ -131,38 +90,6 @@ impl<T: Idx> IdxSetBuf<T> {\n     pub fn new_empty(universe_size: usize) -> Self {\n         Self::new(0, universe_size)\n     }\n-}\n-\n-impl<T: Idx> IdxSet<T> {\n-    unsafe fn from_slice(s: &[Word]) -> &Self {\n-        &*(s as *const [Word] as *const Self)\n-    }\n-\n-    unsafe fn from_slice_mut(s: &mut [Word]) -> &mut Self {\n-        &mut *(s as *mut [Word] as *mut Self)\n-    }\n-}\n-\n-impl<T: Idx> Deref for IdxSetBuf<T> {\n-    type Target = IdxSet<T>;\n-    fn deref(&self) -> &IdxSet<T> {\n-        unsafe { IdxSet::from_slice(&self.bits) }\n-    }\n-}\n-\n-impl<T: Idx> DerefMut for IdxSetBuf<T> {\n-    fn deref_mut(&mut self) -> &mut IdxSet<T> {\n-        unsafe { IdxSet::from_slice_mut(&mut self.bits) }\n-    }\n-}\n-\n-impl<T: Idx> IdxSet<T> {\n-    pub fn to_owned(&self) -> IdxSetBuf<T> {\n-        IdxSetBuf {\n-            _pd: Default::default(),\n-            bits: self.bits.to_owned(),\n-        }\n-    }\n \n     /// Duplicates as a hybrid set.\n     pub fn to_hybrid(&self) -> HybridIdxSetBuf<T> {\n@@ -219,16 +146,6 @@ impl<T: Idx> IdxSet<T> {\n         self.bits.set_bit(elem.index())\n     }\n \n-    pub fn range(&self, elems: &Range<T>) -> &Self {\n-        let elems = elems.start.index()..elems.end.index();\n-        unsafe { Self::from_slice(&self.bits[elems]) }\n-    }\n-\n-    pub fn range_mut(&mut self, elems: &Range<T>) -> &mut Self {\n-        let elems = elems.start.index()..elems.end.index();\n-        unsafe { Self::from_slice_mut(&mut self.bits[elems]) }\n-    }\n-\n     /// Returns true iff set `self` contains `elem`.\n     pub fn contains(&self, elem: &T) -> bool {\n         self.bits.get_bit(elem.index())"}]}