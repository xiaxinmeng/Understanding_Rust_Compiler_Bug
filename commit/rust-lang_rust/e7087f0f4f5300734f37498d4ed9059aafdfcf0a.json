{"sha": "e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MDg3ZjBmNGY1MzAwNzM0ZjM3NDk4ZDRlZDkwNTlhYWZkZmNmMGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-17T17:57:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-17T17:57:15Z"}, "message": "Rollup merge of #47404 - integer32llc:reexport-to-re-export, r=steveklabnik\n\nStandardize on \"re-export\" rather than \"reexport\"\n\nWhile working on the book with our editors, it was brought to our attention that we're not consistent with when we use \"re-export\" versus \"reexport\". For the book, we've decided (with our editors) to go with \"re-export\"; in prose, I think that looks better. In code, I'm fine with \"reexport\".\n\nHowever, the rustdoc generated section is currently \"Reexports\", so when we have a screenshot of generated documentation with the prose where we use \"re-export\", it's inconsistent.\n\nIt's too late to fix this for the book because we're using 1.21.0 for the output in the book, and it's really only one spot so it's not a huge deal, but I'd like to advocate for changing the documentation header so that a future edition of the book can be consistent.\n\nThe first commit here only changes the documentation section heading text and rustdoc documentation that references it. This is the commit that's most important to me.\n\nThe second commit changes error messages and associated tests to also be consistent with the use of re-export. This is the next most important commit to me, but I could be argued out of this one because then it won't match code like the `macro_reexports` feature name, which ostensibly should change to `macro_re_exports` to be most consistent but I didn't want to change code.\n\nThe last commit changes re-export anywhere else in prose: either in documentation comments or regular comments. This is least important as most of them aren't user-visible. Instances like these will likely sneak back in over time. I'm totally fine dropping this commit if anyone wants, but [the hobgoblins made me do it](http://www.bartleby.com/100/420.47.html) and it sets a good example.\n\nr? @steveklabnik", "tree": {"sha": "5e1d823dd4aa3d1132d2e3e93acbbec4840dbb1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1d823dd4aa3d1132d2e3e93acbbec4840dbb1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "html_url": "https://github.com/rust-lang/rust/commit/e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c2aa7932ff0cd067f4edbc0bf9731e9dac37b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c2aa7932ff0cd067f4edbc0bf9731e9dac37b4", "html_url": "https://github.com/rust-lang/rust/commit/29c2aa7932ff0cd067f4edbc0bf9731e9dac37b4"}, {"sha": "e168aa385b9afb6c84071a09910724bdde3dfc5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e168aa385b9afb6c84071a09910724bdde3dfc5f", "html_url": "https://github.com/rust-lang/rust/commit/e168aa385b9afb6c84071a09910724bdde3dfc5f"}], "stats": {"total": 201, "additions": 102, "deletions": 99}, "files": [{"sha": "45c389d72afc7fc873d231d98d747e02aaecb317", "filename": "RELEASES.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -577,7 +577,7 @@ Compatibility Notes\n   a warning.\n - [From the pound escape, lines consisting of multiple `#`s are\n   now visible][41785]\n-- [It is an error to reexport private enum variants][42460]. This is\n+- [It is an error to re-export private enum variants][42460]. This is\n   known to break a number of crates that depend on an older version of\n   mustache.\n - [On Windows, if `VCINSTALLDIR` is set incorrectly, `rustc` will try\n@@ -2251,10 +2251,10 @@ Rustdoc\n -------\n \n * [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n-* [Fix inlined renamed reexports in import lists](https://github.com/rust-lang/rust/pull/34479)\n+* [Fix inlined renamed re-exports in import lists](https://github.com/rust-lang/rust/pull/34479)\n * [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n * [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n-* [Fix redirect pages for renamed reexports](https://github.com/rust-lang/rust/pull/34245)\n+* [Fix redirect pages for renamed re-exports](https://github.com/rust-lang/rust/pull/34245)\n \n Tooling\n -------\n@@ -4988,7 +4988,7 @@ Version 0.10 (2014-04-03)\n     * std: The `vec` module has been renamed to `slice`.\n     * std: A new vector type, `Vec<T>`, has been added in preparation for DST.\n       This will become the only growable vector in the future.\n-    * std: `std::io` now has more public-reexports. Types such as `BufferedReader`\n+    * std: `std::io` now has more public re-exports. Types such as `BufferedReader`\n       are now found at `std::io::BufferedReader` instead of\n       `std::io::buffered::BufferedReader`.\n     * std: `print` and `println` are no longer in the prelude, the `print!` and\n@@ -5079,8 +5079,8 @@ Version 0.10 (2014-04-03)\n       * render standalone markdown files.\n       * the --test flag tests all code blocks by default.\n       * exported macros are displayed.\n-      * reexported types have their documentation inlined at the location of the\n-        first reexport.\n+      * re-exported types have their documentation inlined at the location of the\n+        first re-export.\n       * search works across crates that have been rendered to the same output\n         directory.\n \n@@ -5467,7 +5467,7 @@ Version 0.7 (2013-07-03)\n         incl. `any`, `all`. removed.\n       * std: The `finalize` method of `Drop` renamed to `drop`.\n       * std: The `drop` method now takes `&mut self` instead of `&self`.\n-      * std: The prelude no longer reexports any modules, only types and traits.\n+      * std: The prelude no longer re-exports any modules, only types and traits.\n       * std: Prelude additions: `print`, `println`, `FromStr`, `ApproxEq`, `Equiv`,\n         `Iterator`, `IteratorUtil`, many numeric traits, many tuple traits.\n       * std: New numeric traits: `Fractional`, `Real`, `RealExt`, `Integer`, `Ratio`,"}, {"sha": "296422744fa4059a4b7f0f19e202f76d9830d4ce", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -1,7 +1,7 @@\n # The `#[doc]` attribute\n \n The `#[doc]` attribute lets you control various aspects of how `rustdoc` does\n-its job. \n+its job.\n \n The most basic function of `#[doc]` is to handle the actual documentation\n text. That is, `///` is syntax sugar for `#[doc]`. This means that these two\n@@ -143,7 +143,7 @@ pub mod bar {\n }\n ```\n \n-The documentation will generate a \"Reexports\" section, and say `pub use bar::Bar;`, where\n+The documentation will generate a \"Re-exports\" section, and say `pub use bar::Bar;`, where\n `Bar` is a link to its page.\n \n If we change the `use` line like this:\n@@ -184,7 +184,7 @@ mod bar {\n }\n ```\n \n-Now we'll have a `Reexports` line, and `Bar` will not link to anywhere.\n+Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere.\n \n ## `#[doc(hidden)]`\n "}, {"sha": "6ee4f802802abe93ba18795385a2d4ccad943d8a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -15,7 +15,7 @@\n //!\n //! This library, like libcore, is not intended for general usage, but rather as\n //! a building block of other libraries. The types and interfaces in this\n-//! library are reexported through the [standard library](../std/index.html),\n+//! library are re-exported through the [standard library](../std/index.html),\n //! and should not be used through this library.\n //!\n //! ## Boxed values\n@@ -52,7 +52,7 @@\n //! ## Collections\n //!\n //! Implementations of the most common general purpose data structures are\n-//! defined in this library. They are reexported through the\n+//! defined in this library. They are re-exported through the\n //! [standard collections library](../std/collections/index.html).\n //!\n //! ## Heap interfaces"}, {"sha": "d43496c387cb8ab668ab9b2562d21632e494d787", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -16,20 +16,20 @@\n \n #![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n \n-// Reexported core operators\n+// Re-exported core operators\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use marker::{Copy, Send, Sized, Sync};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// Reexported functions\n+// Re-exported functions\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use mem::drop;\n \n-// Reexported types and traits\n+// Re-exported types and traits\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use clone::Clone;\n@@ -55,7 +55,7 @@ pub use option::Option::{self, Some, None};\n #[doc(no_inline)]\n pub use result::Result::{self, Ok, Err};\n \n-// Reexported extension traits for primitive types\n+// Re-exported extension traits for primitive types\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use slice::SliceExt;"}, {"sha": "244bf476cafb074a112f562dbdb13087cf407b42", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -22,7 +22,7 @@\n // a lot of stuff defined here. Let's keep it clean.\n //\n // Since slices don't support inherent methods; all operations\n-// on them are defined on traits, which are then reexported from\n+// on them are defined on traits, which are then re-exported from\n // the prelude for convenience. So there are a lot of traits here.\n //\n // The layout of this file is thus:"}, {"sha": "238145a061f551a76c82f085553c503a41b1f375", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -2119,7 +2119,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // Privatize the degenerate import base, used only to check\n                 // the stability of `use a::{};`, to avoid it showing up as\n-                // a reexport by accident when `pub`, e.g. in documentation.\n+                // a re-export by accident when `pub`, e.g. in documentation.\n                 let path = P(self.lower_path(id, &prefix, ParamMode::Explicit, true));\n                 *vis = hir::Inherited;\n                 hir::ItemUse(path, hir::UseKind::ListStem)"}, {"sha": "143d2c2ea28bba8361cdf48539715bb418d45d39", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -127,7 +127,7 @@ declare_lint! {\n declare_lint! {\n     pub PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n     Deny,\n-    \"detect public reexports of private extern crates\"\n+    \"detect public re-exports of private extern crates\"\n }\n \n declare_lint! {"}, {"sha": "e2de0b6bd013d939c4a002837f1c67bf3771de14", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -26,9 +26,9 @@ pub enum AccessLevel {\n     // public, then type `T` is reachable. Its values can be obtained by other crates\n     // even if the type itself is not nameable.\n     Reachable,\n-    // Public items + items accessible to other crates with help of `pub use` reexports\n+    // Public items + items accessible to other crates with help of `pub use` re-exports\n     Exported,\n-    // Items accessible to other crates directly, without help of reexports\n+    // Items accessible to other crates directly, without help of re-exports\n     Public,\n }\n "}, {"sha": "06728b2e6257c03b9292a4da3d115b351f10c742", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -702,8 +702,8 @@ impl<'a, 'tcx> CrateMetadata {\n                     let vis = self.get_visibility(child_index);\n                     let is_import = false;\n                     callback(def::Export { def, ident, vis, span, is_import });\n-                    // For non-reexport structs and variants add their constructors to children.\n-                    // Reexport lists automatically contain constructors when necessary.\n+                    // For non-re-export structs and variants add their constructors to children.\n+                    // Re-export lists automatically contain constructors when necessary.\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {"}, {"sha": "b46882f054df9d0bb139743e3a611849135623d2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemExternCrate(..) => {}\n             // All nested items are checked by visit_item\n             hir::ItemMod(..) => {}\n-            // Reexports are handled in visit_mod\n+            // Re-exports are handled in visit_mod\n             hir::ItemUse(..) => {}\n             // The interface is empty\n             hir::ItemGlobalAsm(..) => {}\n@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n-            // contents of a private mod can be reexported, so we need\n+            // contents of a private mod can be re-exported, so we need\n             // to check internals.\n             hir::ItemMod(_) => {}\n "}, {"sha": "c55bf395d71b3247b384ca990482f25dc41bdacf", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -683,7 +683,7 @@ impl<'a> Resolver<'a> {\n                 let (def, vis) = (binding.def(), binding.vis);\n                 self.macro_exports.push(Export { ident, def, vis, span, is_import: true });\n             } else {\n-                span_err!(self.session, span, E0470, \"reexported macro not found\");\n+                span_err!(self.session, span, E0470, \"re-exported macro not found\");\n             }\n         }\n         used\n@@ -729,7 +729,7 @@ impl<'a> Resolver<'a> {\n                 }\n             } else if attr.check_name(\"macro_reexport\") {\n                 let bad_macro_reexport = |this: &mut Self, span| {\n-                    span_err!(this.session, span, E0467, \"bad macro reexport\");\n+                    span_err!(this.session, span, E0467, \"bad macro re-export\");\n                 };\n                 if let Some(names) = attr.meta_item_list() {\n                     for attr in names {"}, {"sha": "3f0f1a1a4cb58ef2cd5c3e1fef2966955c3e5874", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -1374,7 +1374,7 @@ arguments.\n \"##,\n \n E0467: r##\"\n-Macro reexport declarations were empty or malformed.\n+Macro re-export declarations were empty or malformed.\n \n Erroneous code examples:\n \n@@ -1389,12 +1389,12 @@ extern crate core as other_macros_for_good;\n This is a syntax error at the level of attribute declarations.\n \n Currently, `macro_reexport` requires at least one macro name to be listed.\n-Unlike `macro_use`, listing no names does not reexport all macros from the\n+Unlike `macro_use`, listing no names does not re-export all macros from the\n given crate.\n \n Decide which macros you would like to export and list them properly.\n \n-These are proper reexport declarations:\n+These are proper re-export declarations:\n \n ```ignore (cannot-doctest-multicrate-project)\n #[macro_reexport(some_macro, another_macro)]\n@@ -1475,7 +1475,7 @@ extern crate some_crate; //ok!\n \"##,\n \n E0470: r##\"\n-A macro listed for reexport was not found.\n+A macro listed for re-export was not found.\n \n Erroneous code example:\n \n@@ -1493,7 +1493,7 @@ exported from the given crate.\n \n This could be caused by a typo. Did you misspell the macro's name?\n \n-Double-check the names of the macros listed for reexport, and that the crate\n+Double-check the names of the macros listed for re-export, and that the crate\n in question exports them.\n \n A working version:"}, {"sha": "3aedc840521665145472ba1ac061f00a9cef5c0b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -2751,7 +2751,7 @@ impl<'a> Resolver<'a> {\n                                 let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n                                 self.session.buffer_lint(lint, id, span,\n                                     \"private struct constructors are not usable through \\\n-                                     reexports in outer modules\",\n+                                     re-exports in outer modules\",\n                                 );\n                                 res = Some(PathResolution::new(ctor_def));\n                             }"}, {"sha": "31f3493010c3a816b7461d25b6c3e64f231e455c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -46,8 +46,8 @@ pub enum ImportDirectiveSubclass<'a> {\n     },\n     GlobImport {\n         is_prelude: bool,\n-        max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n-        // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n+        max_vis: Cell<ty::Visibility>, // The visibility of the greatest re-export.\n+        // n.b. `max_vis` is only used in `finalize_import` to check for re-export errors.\n     },\n     ExternCrate(Option<Name>),\n     MacroUse,\n@@ -803,21 +803,22 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if !any_successful_reexport {\n             let (ns, binding) = reexport_error.unwrap();\n             if ns == TypeNS && binding.is_extern_crate() {\n-                let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n-                                   (error E0365), consider declaring with `pub`\",\n+                let msg = format!(\"extern crate `{}` is private, and cannot be \\\n+                                   re-exported (error E0365), consider declaring with \\\n+                                   `pub`\",\n                                    ident);\n                 self.session.buffer_lint(PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n                                          directive.id,\n                                          directive.span,\n                                          &msg);\n             } else if ns == TypeNS {\n                 struct_span_err!(self.session, directive.span, E0365,\n-                                 \"`{}` is private, and cannot be reexported\", ident)\n-                    .span_label(directive.span, format!(\"reexport of private `{}`\", ident))\n+                                 \"`{}` is private, and cannot be re-exported\", ident)\n+                    .span_label(directive.span, format!(\"re-export of private `{}`\", ident))\n                     .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n                     .emit();\n             } else {\n-                let msg = format!(\"`{}` is private, and cannot be reexported\", ident);\n+                let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n                 let note_msg =\n                     format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n                 struct_span_err!(self.session, directive.span, E0364, \"{}\", &msg)\n@@ -876,7 +877,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.record_def(directive.id, PathResolution::new(module.def().unwrap()));\n     }\n \n-    // Miscellaneous post-processing, including recording reexports,\n+    // Miscellaneous post-processing, including recording re-exports,\n     // reporting conflicts, and reporting unresolved imports.\n     fn finalize_resolutions_in(&mut self, module: Module<'b>) {\n         // Since import resolution is finished, globs will not define any more names.\n@@ -932,12 +933,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         !orig_binding.vis.is_at_least(binding.vis, &*self) {\n                             let msg = match directive.subclass {\n                                 ImportDirectiveSubclass::SingleImport { .. } => {\n-                                    format!(\"variant `{}` is private and cannot be reexported\",\n+                                    format!(\"variant `{}` is private and cannot be re-exported\",\n                                             ident)\n                                 },\n                                 ImportDirectiveSubclass::GlobImport { .. } => {\n                                     let msg = \"enum is private and its variants \\\n-                                               cannot be reexported\".to_owned();\n+                                               cannot be re-exported\".to_owned();\n                                     let error_id = (DiagnosticMessageId::ErrorId(0), // no code?!\n                                                     Some(binding.span),\n                                                     msg.clone());"}, {"sha": "d284757df63fa24c99ce1c0813846f19814bea08", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -82,9 +82,9 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n             ret.extend(build_impls(cx, did));\n             clean::ForeignTypeItem\n         }\n-        // Never inline enum variants but leave them shown as reexports.\n+        // Never inline enum variants but leave them shown as re-exports.\n         Def::Variant(..) => return None,\n-        // Assume that enum variants and struct types are reexported next to\n+        // Assume that enum variants and struct types are re-exported next to\n         // their constructors.\n         Def::VariantCtor(..) |\n         Def::StructCtor(..) => return Some(Vec::new()),\n@@ -365,7 +365,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n     };\n \n     fn fill_in(cx: &DocContext, did: DefId, items: &mut Vec<clean::Item>) {\n-        // If we're reexporting a reexport it may actually reexport something in\n+        // If we're re-exporting a re-export it may actually re-export something in\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n         let mut visited = FxHashSet();"}, {"sha": "2293e31b5794d2c27e13570c35c19f4c5db06f30", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -1286,9 +1286,9 @@ impl DocFolder for Cache {\n             clean::ConstantItem(..) | clean::StaticItem(..) |\n             clean::UnionItem(..) | clean::ForeignTypeItem\n             if !self.stripped_mod => {\n-                // Reexported items mean that the same id can show up twice\n+                // Re-exported items mean that the same id can show up twice\n                 // in the rustdoc ast that we're looking at. We know,\n-                // however, that a reexported item doesn't show up in the\n+                // however, that a re-exported item doesn't show up in the\n                 // `public_items` map, so we can skip inserting into the\n                 // paths map if there was already an entry present and we're\n                 // not a public item.\n@@ -1545,7 +1545,7 @@ impl Context {\n     {\n         // Stripped modules survive the rustdoc passes (i.e. `strip-private`)\n         // if they contain impls for public types. These modules can also\n-        // contain items such as publicly reexported structures.\n+        // contain items such as publicly re-exported structures.\n         //\n         // External crates will provide links to these structures, so\n         // these modules are recursed into, but not rendered normally\n@@ -2008,7 +2008,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     if cx.shared.sort_modules_alphabetically {\n         indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n     }\n-    // This call is to remove reexport duplicates in cases such as:\n+    // This call is to remove re-export duplicates in cases such as:\n     //\n     // ```\n     // pub mod foo {\n@@ -2059,7 +2059,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             curty = myty;\n             let (short, name) = match myty.unwrap() {\n                 ItemType::ExternCrate |\n-                ItemType::Import          => (\"reexports\", \"Reexports\"),\n+                ItemType::Import          => (\"reexports\", \"Re-exports\"),\n                 ItemType::Module          => (\"modules\", \"Modules\"),\n                 ItemType::Struct          => (\"structs\", \"Structs\"),\n                 ItemType::Union           => (\"unions\", \"Unions\"),\n@@ -3959,7 +3959,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                              it.type_() == ItemType::Import) {\n         sidebar.push_str(&format!(\"<li><a href=\\\"#{id}\\\">{name}</a></li>\",\n                                   id = \"reexports\",\n-                                  name = \"Reexports\"));\n+                                  name = \"Re-exports\"));\n     }\n \n     // ordering taken from item_module, reorder, where it prioritized elements in a certain order\n@@ -3972,7 +3972,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n         if items.iter().any(|it| !it.is_stripped() && it.type_() == myty) {\n             let (short, name) = match myty {\n                 ItemType::ExternCrate |\n-                ItemType::Import          => (\"reexports\", \"Reexports\"),\n+                ItemType::Import          => (\"reexports\", \"Re-exports\"),\n                 ItemType::Module          => (\"modules\", \"Modules\"),\n                 ItemType::Struct          => (\"structs\", \"Structs\"),\n                 ItemType::Union           => (\"unions\", \"Unions\"),"}, {"sha": "1cb52d735bb18317d8c81029f2496b507d32de20", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -55,7 +55,7 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn new(cstore: &'tcx CrateStore,\n                cx: &'a core::DocContext<'a, 'tcx>) -> RustdocVisitor<'a, 'tcx> {\n-        // If the root is reexported, terminate all recursion.\n+        // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);\n         RustdocVisitor {\n@@ -214,7 +214,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     let imported_from = self.cx.tcx.original_crate_name(def_id.krate);\n                     let def = match self.cstore.load_macro_untracked(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroDef(macro_def) => macro_def,\n-                        // FIXME(jseyfried): document proc macro reexports\n+                        // FIXME(jseyfried): document proc macro re-exports\n                         LoadedMacro::ProcMacro(..) => continue,\n                     };\n "}, {"sha": "bb38fc550917fb8307d97f2171ee17940ea3b298", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -351,9 +351,9 @@ use prelude::v1::*;\n #[cfg(test)] extern crate test;\n #[cfg(test)] extern crate rand;\n \n-// We want to reexport a few macros from core but libcore has already been\n+// We want to re-export a few macros from core but libcore has already been\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n-// add a new crate name so we can attach the reexports to it.\n+// add a new crate name so we can attach the re-exports to it.\n #[macro_reexport(assert, assert_eq, assert_ne, debug_assert, debug_assert_eq,\n                  debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n extern crate core as __core;\n@@ -390,7 +390,7 @@ mod macros;\n // The Rust prelude\n pub mod prelude;\n \n-// Public module declarations and reexports\n+// Public module declarations and re-exports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "919e033f2b4bdba30aeb8d4372af009545823a49", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -52,7 +52,7 @@\n //! # Prelude contents\n //!\n //! The current version of the prelude (version 1) lives in\n-//! [`std::prelude::v1`], and reexports the following.\n+//! [`std::prelude::v1`], and re-exports the following.\n //!\n //! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`]}. The marker\n //!   traits indicate fundamental properties of types."}, {"sha": "feedd4e1abe5f852a37738589ab4071e707616f5", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -14,17 +14,17 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-// Reexported core operators\n+// Re-exported core operators\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// Reexported functions\n+// Re-exported functions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use mem::drop;\n \n-// Reexported types and traits\n+// Re-exported types and traits\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use boxed::Box;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9dbaf784f89e0b7e2f6bb6d88b366f91c925c976", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -23,7 +23,7 @@\n #![doc(hidden)]\n \n \n-// Reexport some of our utilities which are expected by other crates.\n+// Re-export some of our utilities which are expected by other crates.\n pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n // To reduce the generated code of the new `lang_start`, this function is doing"}, {"sha": "b4be4a9691183d595e5a7a04534e1cd0365014bf", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -33,15 +33,15 @@ use core::iter::FusedIterator;\n use core::fmt::{self, Write};\n use tables::{conversions, derived_property, general_category, property};\n \n-// stable reexports\n+// stable re-exports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{EscapeDebug, EscapeDefault, EscapeUnicode};\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use core::char::ParseCharError;\n \n-// unstable reexports\n+// unstable re-exports\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub use core::char::CharTryFromError;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]"}, {"sha": "7f7ff56fd7fbe580132e337c266c9d6e2d792b3e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -17,7 +17,7 @@ use ext::base::ExtCtxt;\n use ptr::P;\n use symbol::{Symbol, keywords};\n \n-// Transitional reexports so qquote can find the paths it is looking for\n+// Transitional re-exports so qquote can find the paths it is looking for\n mod syntax {\n     pub use ext;\n     pub use parse;"}, {"sha": "0c4bcf4f6c7662fe4e7ae9e7a2a38cf47136d11c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -155,7 +155,7 @@ declare_features! (\n     // OIBIT specific features\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231)),\n \n-    // macro reexport needs more discussion and stabilization\n+    // macro re-export needs more discussion and stabilization\n     (active, macro_reexport, \"1.0.0\", Some(29638)),\n \n     // Allows use of #[staged_api]\n@@ -1479,7 +1479,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ItemKind::ExternCrate(_) => {\n                 if let Some(attr) = attr::find_by_name(&i.attrs[..], \"macro_reexport\") {\n                     gate_feature_post!(&self, macro_reexport, attr.span,\n-                                       \"macros reexports are experimental \\\n+                                       \"macros re-exports are experimental \\\n                                         and possibly buggy\");\n                 }\n             }"}, {"sha": "8b448e401bd2536118d3325513326dcbe01d475d", "filename": "src/test/compile-fail-fulldeps/gated-macro-reexports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that macro reexports item are gated by `macro_reexport` feature gate.\n+// Test that macro re-exports item are gated by `macro_reexport` feature gate.\n \n // aux-build:macro_reexport_1.rs\n // gate-test-macro_reexport\n \n #![crate_type = \"dylib\"]\n \n #[macro_reexport(reexported)]\n-//~^ ERROR macros reexports are experimental and possibly buggy\n+//~^ ERROR macros re-exports are experimental and possibly buggy\n #[macro_use] #[no_link]\n extern crate macro_reexport_1;"}, {"sha": "18a72b0ff9a55a70361236962013d25030088914", "filename": "src/test/compile-fail/E0365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0365.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -13,6 +13,6 @@ mod foo {\n }\n \n pub use foo as foo2;\n-//~^ ERROR `foo` is private, and cannot be reexported [E0365]\n+//~^ ERROR `foo` is private, and cannot be re-exported [E0365]\n \n fn main() {}"}, {"sha": "73597e51f08021b95ef21278c699300486c58f4d", "filename": "src/test/compile-fail/auxiliary/static_priv_by_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -32,7 +32,7 @@ mod foo {\n         fn foo() {}\n     }\n \n-    // these are public so the parent can reexport them.\n+    // these are public so the parent can re-export them.\n     pub static reexported_a: isize = 0;\n     pub fn reexported_b() {}\n     pub struct reexported_c;"}, {"sha": "f50b5b0e849992ed3bb0c12e21d24d6325bf3e3d", "filename": "src/test/compile-fail/imports/reexports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -13,7 +13,7 @@ mod a {\n     mod foo {}\n \n     mod a {\n-        pub use super::foo; //~ ERROR cannot be reexported\n+        pub use super::foo; //~ ERROR cannot be re-exported\n         pub use super::*; //~ ERROR must import something with the glob's visibility\n     }\n }\n@@ -24,17 +24,17 @@ mod b {\n \n     pub mod a {\n         pub use super::foo; // This is OK since the value `foo` is visible enough.\n-        fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` reexported).\n+        fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` re-exported).\n     }\n \n     pub mod b {\n         pub use super::*; // This is also OK since the value `foo` is visible enough.\n-        fn f(_: foo::S) {} // Again, the module `foo` is imported (but not `pub` reexported).\n+        fn f(_: foo::S) {} // Again, the module `foo` is imported (but not `pub` re-exported).\n     }\n }\n \n mod c {\n-    // Test that `foo` is not reexported.\n+    // Test that `foo` is not re-exported.\n     use b::a::foo::S; //~ ERROR `foo`\n     use b::b::foo::S as T; //~ ERROR `foo`\n }"}, {"sha": "f5a20dd96dc902d354c33449dfdfad2dec6178df", "filename": "src/test/compile-fail/issue-46209-private-enum-variant-reexport.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -12,14 +12,14 @@\n \n mod rank {\n     pub use self::Professor::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n     pub use self::Lieutenant::{JuniorGrade, Full};\n-    //~^ ERROR variant `JuniorGrade` is private and cannot be reexported\n-    //~| ERROR variant `Full` is private and cannot be reexported\n+    //~^ ERROR variant `JuniorGrade` is private and cannot be re-exported\n+    //~| ERROR variant `Full` is private and cannot be re-exported\n     pub use self::PettyOfficer::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n     pub use self::Crewman::*;\n-    //~^ ERROR enum is private and its variants cannot be reexported\n+    //~^ ERROR enum is private and its variants cannot be re-exported\n \n     enum Professor {\n         Adjunct,"}, {"sha": "8f0b53fd599713c3519654d6ef236a7f27a7aa1d", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -20,7 +20,7 @@\n \n extern crate lint_unused_extern_crate5; //~ ERROR: unused extern crate\n \n-pub extern crate lint_unused_extern_crate4; // no error, it is reexported\n+pub extern crate lint_unused_extern_crate4; // no error, it is re-exported\n \n extern crate lint_unused_extern_crate3; // no error, it is used\n "}, {"sha": "36a6fce00a13a05f9e6b20607ba30e727ee1606e", "filename": "src/test/compile-fail/macro-reexport-malformed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-1.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport]  //~ ERROR bad macro reexport\n+#[macro_reexport]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "5f741d010de806e0d4910ad5b5887988f8e5d007", "filename": "src/test/compile-fail/macro-reexport-malformed-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-2.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport=\"foo\"]  //~ ERROR bad macro reexport\n+#[macro_reexport=\"foo\"]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "1a7e3b918cd966d53b8d68230f1f89556ce74a8c", "filename": "src/test/compile-fail/macro-reexport-malformed-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-malformed-3.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -12,5 +12,5 @@\n #![feature(macro_reexport)]\n \n #[allow(unused_extern_crates)]\n-#[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro reexport\n+#[macro_reexport(foo=\"bar\")]  //~ ERROR bad macro re-export\n extern crate std;"}, {"sha": "50ac89e49e08ffab0b0f3590eee6f0bcd66e7c9b", "filename": "src/test/compile-fail/macro-reexport-undef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -13,7 +13,7 @@\n #![feature(macro_reexport)]\n \n #[macro_use(macro_two)]\n-#[macro_reexport(no_way)] //~ ERROR reexported macro not found\n+#[macro_reexport(no_way)] //~ ERROR re-exported macro not found\n extern crate two_macros;\n \n pub fn main() {"}, {"sha": "95144916fd7852046e6132751c8de6dcc58494e7", "filename": "src/test/compile-fail/privacy/legacy-ctor-visibility.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![allow(unused)]\n \n use m::S;\n@@ -19,7 +21,7 @@ mod m {\n         use S;\n         fn f() {\n             S(10);\n-            //~^ ERROR private struct constructors are not usable through reexports in outer modules\n+            //~^ ERROR private struct constructors are not usable through re-exports in outer modules\n             //~| WARN this was previously accepted\n         }\n     }"}, {"sha": "8c1d609e2446725e28259fe87fcd1f6e8b8b65a8", "filename": "src/test/compile-fail/privacy/restricted/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -28,7 +28,7 @@ mod foo {\n     fn f() {\n         use foo::bar::S;\n         pub(self) use foo::bar::f; // ok\n-        pub(super) use foo::bar::f as g; //~ ERROR cannot be reexported\n+        pub(super) use foo::bar::f as g; //~ ERROR cannot be re-exported\n         S::default().x; // ok\n         S::default().f(); // ok\n         S::g(); // ok"}, {"sha": "5d770f88155ec9f03f8b24d27d1802d2554b0b21", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n mod m1 {\n-    pub use ::E::V; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::V; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be reexported\n+    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be re-exported\n }\n \n mod m4 {\n-    pub use ::E::*; //~ ERROR enum is private and its variants cannot be reexported\n+    pub use ::E::*; //~ ERROR enum is private and its variants cannot be re-exported\n }\n \n enum E { V }"}, {"sha": "2e71e007e9eed6f011eab933fd34d33ba47c4f93", "filename": "src/test/compile-fail/pub-reexport-priv-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -11,23 +11,23 @@\n #![allow(unused)]\n \n extern crate core;\n-pub use core as reexported_core; //~ ERROR `core` is private, and cannot be reexported\n+pub use core as reexported_core; //~ ERROR `core` is private, and cannot be re-exported\n                                  //~^ WARN this was previously accepted\n \n mod foo1 {\n     extern crate core;\n }\n \n mod foo2 {\n-    use foo1::core; //~ ERROR `core` is private, and cannot be reexported\n+    use foo1::core; //~ ERROR `core` is private, and cannot be re-exported\n                     //~^ WARN this was previously accepted\n     pub mod bar {\n         extern crate core;\n     }\n }\n \n mod baz {\n-    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be reexported\n+    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be re-exported\n                              //~^ WARN this was previously accepted\n }\n "}, {"sha": "210bc4c8320c5f164268d40c4c80457453c097b3", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateC.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -18,7 +18,7 @@\n // compile-fail/type-mismatch-same-crate-name.rs\n // but deals with the case where one of the crates\n // is only introduced as an indirect dependency.\n-// and the type is accessed via a reexport.\n+// and the type is accessed via a re-export.\n // This is similar to how the error can be introduced\n // when using cargo's automatic dependency resolution.\n "}, {"sha": "f82b04f37c502c988588d82f8312bdbcdc9ed0b0", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that the reexports of `FnOnce` et al from the prelude work.\n+// Tests that the re-exports of `FnOnce` et al from the prelude work.\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "5fee36959c23d65ed8d9131084cd0b9843154438", "filename": "src/test/rustdoc/inline_cross/auxiliary/rustdoc-nonreachable-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -36,7 +36,7 @@ pub mod hidden {\n     pub struct Wobble;\n \n \n-    // these should only be shown if they're reexported correctly\n+    // these should only be shown if they're re-exported correctly\n     impl Qux for ::Foo {}\n     impl Qux for Wobble {}\n     impl ::Bark for Wobble {}"}, {"sha": "698005b5d3068a10ddae00340a5e79ffd3f1bc8b", "filename": "src/test/ui/issue-46112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fui%2Fissue-46112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7087f0f4f5300734f37498d4ed9059aafdfcf0a/src%2Ftest%2Fui%2Fissue-46112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46112.rs?ref=e7087f0f4f5300734f37498d4ed9059aafdfcf0a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Issue 46112: An extern crate pub reexporting libcore was causing\n+// Issue 46112: An extern crate pub re-exporting libcore was causing\n // paths rooted from `std` to be misrendered in the diagnostic output.\n \n // ignore-windows"}]}