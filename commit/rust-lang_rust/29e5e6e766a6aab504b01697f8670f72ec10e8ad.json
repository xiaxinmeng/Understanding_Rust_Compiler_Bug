{"sha": "29e5e6e766a6aab504b01697f8670f72ec10e8ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTVlNmU3NjZhNmFhYjUwNGIwMTY5N2Y4NjcwZjcyZWMxMGU4YWQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-05T17:12:40Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-05T17:14:40Z"}, "message": "Use MIR dump interface for dataflow", "tree": {"sha": "05fca9ada8c569f48075ec5e0bcf2c0ac5cc6c00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05fca9ada8c569f48075ec5e0bcf2c0ac5cc6c00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e5e6e766a6aab504b01697f8670f72ec10e8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e5e6e766a6aab504b01697f8670f72ec10e8ad", "html_url": "https://github.com/rust-lang/rust/commit/29e5e6e766a6aab504b01697f8670f72ec10e8ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e5e6e766a6aab504b01697f8670f72ec10e8ad/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f317a93d4d326442680eaeb78c22eece739433c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f317a93d4d326442680eaeb78c22eece739433c7", "html_url": "https://github.com/rust-lang/rust/commit/f317a93d4d326442680eaeb78c22eece739433c7"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "d77e741d1a3ca62b6c90b90e4a50fa12b5b1f211", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/29e5e6e766a6aab504b01697f8670f72ec10e8ad/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e5e6e766a6aab504b01697f8670f72ec10e8ad/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=29e5e6e766a6aab504b01697f8670f72ec10e8ad", "patch": "@@ -2,7 +2,6 @@\n \n use std::borrow::BorrowMut;\n use std::ffi::OsString;\n-use std::fs;\n use std::path::PathBuf;\n \n use rustc_ast as ast;\n@@ -12,7 +11,7 @@ use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{self, traversal, BasicBlock};\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n \n use super::fmt::DebugWithContext;\n@@ -21,7 +20,7 @@ use super::{\n     visit_results, Analysis, Direction, GenKill, GenKillAnalysis, GenKillSet, JoinSemiLattice,\n     ResultsCursor, ResultsVisitor,\n };\n-use crate::util::pretty::dump_enabled;\n+use crate::util::pretty::{create_dump_file, dump_enabled};\n \n /// A dataflow analysis that has converged to fixpoint.\n pub struct Results<'tcx, A>\n@@ -270,6 +269,9 @@ where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n {\n+    use std::fs;\n+    use std::io::{self, Write};\n+\n     let def_id = body.source.def_id();\n     let attrs = match RustcMirAttrs::parse(tcx, def_id) {\n         Ok(attrs) => attrs,\n@@ -278,35 +280,36 @@ where\n         Err(()) => return Ok(()),\n     };\n \n-    let path = match attrs.output_path(A::NAME) {\n-        Some(path) => path,\n+    let mut file = match attrs.output_path(A::NAME) {\n+        Some(path) => {\n+            debug!(\"printing dataflow results for {:?} to {}\", def_id, path.display());\n+            if let Some(parent) = path.parent() {\n+                fs::create_dir_all(parent)?;\n+            }\n+            io::BufWriter::new(fs::File::create(&path)?)\n+        }\n \n         None if tcx.sess.opts.debugging_opts.dump_mir_dataflow\n             && dump_enabled(tcx, A::NAME, def_id) =>\n         {\n-            // FIXME: Use some variant of `pretty::dump_path` for this\n-            let mut path = PathBuf::from(&tcx.sess.opts.debugging_opts.dump_mir_dir);\n-\n-            let crate_name = tcx.crate_name(def_id.krate);\n-            let item_name = ty::print::with_forced_impl_filename_line(|| {\n-                tcx.def_path(def_id).to_filename_friendly_no_crate()\n-            });\n-\n-            let pass_name = pass_name.map(|s| format!(\".{}\", s)).unwrap_or_default();\n-\n-            path.push(format!(\"{}.{}.{}{}.dot\", crate_name, item_name, A::NAME, pass_name));\n-            path\n+            create_dump_file(\n+                tcx,\n+                \".dot\",\n+                None,\n+                A::NAME,\n+                &pass_name.unwrap_or(\"-----\"),\n+                body.source,\n+            )?\n         }\n \n-        None => return Ok(()),\n+        _ => return Ok(()),\n     };\n \n     let style = match attrs.formatter {\n         Some(sym::two_phase) => graphviz::OutputStyle::BeforeAndAfter,\n         _ => graphviz::OutputStyle::AfterOnly,\n     };\n \n-    debug!(\"printing dataflow results for {:?} to {}\", def_id, path.display());\n     let mut buf = Vec::new();\n \n     let graphviz = graphviz::Formatter::new(body, results, style);\n@@ -317,10 +320,7 @@ where\n     }\n     dot::render_opts(&graphviz, &mut buf, &render_opts)?;\n \n-    if let Some(parent) = path.parent() {\n-        fs::create_dir_all(parent)?;\n-    }\n-    fs::write(&path, buf)?;\n+    file.write_all(&buf)?;\n \n     Ok(())\n }"}]}