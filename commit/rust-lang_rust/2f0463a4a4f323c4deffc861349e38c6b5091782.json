{"sha": "2f0463a4a4f323c4deffc861349e38c6b5091782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMDQ2M2E0YTRmMzIzYzRkZWZmYzg2MTM0OWUzOGM2YjUwOTE3ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T04:25:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T04:25:03Z"}, "message": "Auto merge of #39000 - nikomatsakis:incr_comp_crosscontaminate_impl_item, r=michaelwoerister\n\nprocess trait/impl items directly from the visitor callback\n\nThe current setup processes impl/trait items while visiting\nthe impl/trait. This means we basically have this setup:\n\n    <Lots> -> TypeckItemBody(Impl) -> Tables(ImplItem{0,1,2,3})\n\nBut this was largely an artifact of the older code. By moving the\nprocessing of items into method dedicated for their use, we produce this\nsetup:\n\n    <Little> -> TypeckItemBody(ImplItem0) -> Tables(ImplItem0)\n    ...\n    <Little> -> TypeckItemBody(ImplItem3) -> Tables(ImplItem3)\n\nr? @michaelwoerister\n\nAlso, we might consider removing the `TypeckItemBody` node altogether and just using `Tables` as the task. `Tables` is its primary output, I imagine? That would reduce size of dep-graph somewhat.\n\ncc @eddyb -- perhaps this pattern applies elsewhere?", "tree": {"sha": "a172e30795a2a6eeb51ef62b04e620b2f56f286a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a172e30795a2a6eeb51ef62b04e620b2f56f286a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f0463a4a4f323c4deffc861349e38c6b5091782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0463a4a4f323c4deffc861349e38c6b5091782", "html_url": "https://github.com/rust-lang/rust/commit/2f0463a4a4f323c4deffc861349e38c6b5091782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f0463a4a4f323c4deffc861349e38c6b5091782/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6991938d3e91c200de7b6c6ef08f9600c075c89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6991938d3e91c200de7b6c6ef08f9600c075c89b", "html_url": "https://github.com/rust-lang/rust/commit/6991938d3e91c200de7b6c6ef08f9600c075c89b"}, {"sha": "282f7a3c44a428c26155b4686ad95e802fcd4158", "url": "https://api.github.com/repos/rust-lang/rust/commits/282f7a3c44a428c26155b4686ad95e802fcd4158", "html_url": "https://github.com/rust-lang/rust/commit/282f7a3c44a428c26155b4686ad95e802fcd4158"}], "stats": {"total": 514, "additions": 255, "deletions": 259}, "files": [{"sha": "6f2b9ca0c4220488be3378e2a7d9900d0c579859", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -18,7 +18,7 @@ use hir::{self, PatKind};\n \n struct CFGBuilder<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n     graph: CFGGraph,\n     fn_exit: CFGIndex,\n     loop_scopes: Vec<LoopScope>,"}, {"sha": "daed41f04700d95afb4d145db71344329495b5f8", "filename": "src/librustc/dep_graph/README.md", "status": "modified", "additions": 12, "deletions": 31, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fdep_graph%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fdep_graph%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2FREADME.md?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -326,15 +326,15 @@ The idea is that you can annotate a test like:\n #[rustc_if_this_changed]\n fn foo() { }\n \n-#[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+#[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n fn bar() { foo(); }\n \n-#[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n fn baz() { }\n ```\n \n This will check whether there is a path in the dependency graph from\n-`Hir(foo)` to `TypeckItemBody(bar)`. An error is reported for each\n+`Hir(foo)` to `TypeckTables(bar)`. An error is reported for each\n `#[rustc_then_this_would_need]` annotation that indicates whether a\n path exists. `//~ ERROR` annotations can then be used to test if a\n path is found (as demonstrated above).\n@@ -371,27 +371,27 @@ A node is considered to match a filter if all of those strings appear in its\n label. So, for example:\n \n ```\n-RUST_DEP_GRAPH_FILTER='-> TypeckItemBody'\n+RUST_DEP_GRAPH_FILTER='-> TypeckTables'\n ```\n \n-would select the predecessors of all `TypeckItemBody` nodes. Usually though you\n-want the `TypeckItemBody` node for some particular fn, so you might write:\n+would select the predecessors of all `TypeckTables` nodes. Usually though you\n+want the `TypeckTables` node for some particular fn, so you might write:\n \n ```\n-RUST_DEP_GRAPH_FILTER='-> TypeckItemBody & bar'\n+RUST_DEP_GRAPH_FILTER='-> TypeckTables & bar'\n ```\n \n-This will select only the `TypeckItemBody` nodes for fns with `bar` in their name.\n+This will select only the `TypeckTables` nodes for fns with `bar` in their name.\n \n Perhaps you are finding that when you change `foo` you need to re-type-check `bar`,\n but you don't think you should have to. In that case, you might do:\n \n ```\n-RUST_DEP_GRAPH_FILTER='Hir&foo -> TypeckItemBody & bar'\n+RUST_DEP_GRAPH_FILTER='Hir&foo -> TypeckTables & bar'\n ```\n \n This will dump out all the nodes that lead from `Hir(foo)` to\n-`TypeckItemBody(bar)`, from which you can (hopefully) see the source\n+`TypeckTables(bar)`, from which you can (hopefully) see the source\n of the erroneous edge.\n \n #### Tracking down incorrect edges\n@@ -417,27 +417,8 @@ dep-graph as described in the previous section and open `dep-graph.txt`\n to see something like:\n \n     Hir(foo) -> Collect(bar)\n-    Collect(bar) -> TypeckItemBody(bar)\n-\n+    Collect(bar) -> TypeckTables(bar)\n+    \n That first edge looks suspicious to you. So you set\n `RUST_FORBID_DEP_GRAPH_EDGE` to `Hir&foo -> Collect&bar`, re-run, and\n then observe the backtrace. Voila, bug fixed!\n-\n-### Inlining of HIR nodes\n-\n-For the time being, at least, we still sometimes \"inline\" HIR nodes\n-from other crates into the current HIR map. This creates a weird\n-scenario where the same logical item (let's call it `X`) has two\n-def-ids: the original def-id `X` and a new, inlined one `X'`. `X'` is\n-in the current crate, but it's not like other HIR nodes: in\n-particular, when we restart compilation, it will not be available to\n-hash. Therefore, we do not want `Hir(X')` nodes appearing in our\n-graph.  Instead, we want a \"read\" of `Hir(X')` to be represented as a\n-read of `MetaData(X)`, since the metadata for `X` is where the inlined\n-representation originated in the first place.\n-\n-To achieve this, the HIR map will detect if the def-id originates in\n-an inlined node and add a dependency to a suitable `MetaData` node\n-instead. If you are reading a HIR node and are not sure if it may be\n-inlined or not, you can use `tcx.map.read(node_id)` and it will detect\n-whether the node is inlined or not and do the right thing."}, {"sha": "d9fd0b9a1f939db7de2dfcb2100a2c893db1183e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -78,7 +78,6 @@ pub enum DepNode<D: Clone + Debug> {\n     Variance,\n     WfCheck(D),\n     TypeckItemType(D),\n-    TypeckItemBody(D),\n     Dropck,\n     DropckImpl(D),\n     UnusedTraitCheck,\n@@ -113,7 +112,7 @@ pub enum DepNode<D: Clone + Debug> {\n     SizedConstraint(D),\n     AssociatedItemDefIds(D),\n     InherentImpls(D),\n-    Tables(D),\n+    TypeckTables(D),\n \n     // The set of impls for a given trait. Ultimately, it would be\n     // nice to get more fine-grained here (e.g., to include a\n@@ -158,12 +157,11 @@ impl<D: Clone + Debug> DepNode<D> {\n             HirBody,\n             TransCrateItem,\n             TypeckItemType,\n-            TypeckItemBody,\n             AssociatedItems,\n             ItemSignature,\n             AssociatedItemDefIds,\n             InherentImpls,\n-            Tables,\n+            TypeckTables,\n             TraitImpls,\n             ReprHints,\n         }\n@@ -216,7 +214,6 @@ impl<D: Clone + Debug> DepNode<D> {\n             CoherenceOrphanCheck(ref d) => op(d).map(CoherenceOrphanCheck),\n             WfCheck(ref d) => op(d).map(WfCheck),\n             TypeckItemType(ref d) => op(d).map(TypeckItemType),\n-            TypeckItemBody(ref d) => op(d).map(TypeckItemBody),\n             DropckImpl(ref d) => op(d).map(DropckImpl),\n             CheckConst(ref d) => op(d).map(CheckConst),\n             IntrinsicCheck(ref d) => op(d).map(IntrinsicCheck),\n@@ -232,7 +229,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             SizedConstraint(ref d) => op(d).map(SizedConstraint),\n             AssociatedItemDefIds(ref d) => op(d).map(AssociatedItemDefIds),\n             InherentImpls(ref d) => op(d).map(InherentImpls),\n-            Tables(ref d) => op(d).map(Tables),\n+            TypeckTables(ref d) => op(d).map(TypeckTables),\n             TraitImpls(ref d) => op(d).map(TraitImpls),\n             TraitItems(ref d) => op(d).map(TraitItems),\n             ReprHints(ref d) => op(d).map(ReprHints),"}, {"sha": "4e64dda1a3044f619b86c55c25419864ef5ffa26", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -76,23 +76,23 @@ pub type Bound<T> = Option<T>;\n pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n pub type FixupResult<T> = Result<T, FixupError>; // \"fixup result\"\n \n-/// A version of &ty::Tables which can be `Missing` (not needed),\n+/// A version of &ty::TypeckTables which can be `Missing` (not needed),\n /// `InProgress` (during typeck) or `Interned` (result of typeck).\n /// Only the `InProgress` version supports `borrow_mut`.\n #[derive(Copy, Clone)]\n pub enum InferTables<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    Interned(&'a ty::Tables<'gcx>),\n-    InProgress(&'a RefCell<ty::Tables<'tcx>>),\n+    Interned(&'a ty::TypeckTables<'gcx>),\n+    InProgress(&'a RefCell<ty::TypeckTables<'tcx>>),\n     Missing\n }\n \n pub enum InferTablesRef<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    Interned(&'a ty::Tables<'gcx>),\n-    InProgress(Ref<'a, ty::Tables<'tcx>>)\n+    Interned(&'a ty::TypeckTables<'gcx>),\n+    InProgress(Ref<'a, ty::TypeckTables<'tcx>>)\n }\n \n impl<'a, 'gcx, 'tcx> Deref for InferTablesRef<'a, 'gcx, 'tcx> {\n-    type Target = ty::Tables<'tcx>;\n+    type Target = ty::TypeckTables<'tcx>;\n     fn deref(&self) -> &Self::Target {\n         match *self {\n             InferTablesRef::Interned(tables) => tables,\n@@ -112,7 +112,7 @@ impl<'a, 'gcx, 'tcx> InferTables<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn expect_interned(self) -> &'a ty::Tables<'gcx> {\n+    pub fn expect_interned(self) -> &'a ty::TypeckTables<'gcx> {\n         match self {\n             InferTables::Interned(tables) => tables,\n             InferTables::InProgress(_) => {\n@@ -124,7 +124,7 @@ impl<'a, 'gcx, 'tcx> InferTables<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn borrow_mut(self) -> RefMut<'a, ty::Tables<'tcx>> {\n+    pub fn borrow_mut(self) -> RefMut<'a, ty::TypeckTables<'tcx>> {\n         match self {\n             InferTables::Interned(_) => {\n                 bug!(\"InferTables: infcx.tables.borrow_mut() outside of type-checking\");\n@@ -407,51 +407,51 @@ impl fmt::Display for FixupError {\n \n pub trait InferEnv<'a, 'tcx> {\n     fn to_parts(self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                -> (Option<&'a ty::Tables<'tcx>>,\n-                    Option<ty::Tables<'tcx>>,\n+                -> (Option<&'a ty::TypeckTables<'tcx>>,\n+                    Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>);\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for () {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n-                -> (Option<&'a ty::Tables<'tcx>>,\n-                    Option<ty::Tables<'tcx>>,\n+                -> (Option<&'a ty::TypeckTables<'tcx>>,\n+                    Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>) {\n         (None, None, None)\n     }\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for ty::ParameterEnvironment<'tcx> {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n-                -> (Option<&'a ty::Tables<'tcx>>,\n-                    Option<ty::Tables<'tcx>>,\n+                -> (Option<&'a ty::TypeckTables<'tcx>>,\n+                    Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>) {\n         (None, None, Some(self))\n     }\n }\n \n-impl<'a, 'tcx> InferEnv<'a, 'tcx> for (&'a ty::Tables<'tcx>, ty::ParameterEnvironment<'tcx>) {\n+impl<'a, 'tcx> InferEnv<'a, 'tcx> for (&'a ty::TypeckTables<'tcx>, ty::ParameterEnvironment<'tcx>) {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n-                -> (Option<&'a ty::Tables<'tcx>>,\n-                    Option<ty::Tables<'tcx>>,\n+                -> (Option<&'a ty::TypeckTables<'tcx>>,\n+                    Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>) {\n         (Some(self.0), None, Some(self.1))\n     }\n }\n \n-impl<'a, 'tcx> InferEnv<'a, 'tcx> for (ty::Tables<'tcx>, ty::ParameterEnvironment<'tcx>) {\n+impl<'a, 'tcx> InferEnv<'a, 'tcx> for (ty::TypeckTables<'tcx>, ty::ParameterEnvironment<'tcx>) {\n     fn to_parts(self, _: TyCtxt<'a, 'tcx, 'tcx>)\n-                -> (Option<&'a ty::Tables<'tcx>>,\n-                    Option<ty::Tables<'tcx>>,\n+                -> (Option<&'a ty::TypeckTables<'tcx>>,\n+                    Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>) {\n         (None, Some(self.0), Some(self.1))\n     }\n }\n \n impl<'a, 'tcx> InferEnv<'a, 'tcx> for hir::BodyId {\n     fn to_parts(self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                -> (Option<&'a ty::Tables<'tcx>>,\n-                    Option<ty::Tables<'tcx>>,\n+                -> (Option<&'a ty::TypeckTables<'tcx>>,\n+                    Option<ty::TypeckTables<'tcx>>,\n                     Option<ty::ParameterEnvironment<'tcx>>) {\n         let item_id = tcx.map.body_owner(self);\n         (Some(tcx.item_tables(tcx.map.local_def_id(item_id))),\n@@ -466,8 +466,8 @@ impl<'a, 'tcx> InferEnv<'a, 'tcx> for hir::BodyId {\n pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     global_tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     arena: DroplessArena,\n-    fresh_tables: Option<RefCell<ty::Tables<'tcx>>>,\n-    tables: Option<&'a ty::Tables<'gcx>>,\n+    fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n+    tables: Option<&'a ty::TypeckTables<'gcx>>,\n     param_env: Option<ty::ParameterEnvironment<'gcx>>,\n     projection_mode: Reveal,\n }"}, {"sha": "5ac000923e071ff4ba86501e0901a9c20ab85acf", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -337,7 +337,7 @@ pub struct LateContext<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     /// Side-tables for the body we are in.\n-    pub tables: &'a ty::Tables<'tcx>,\n+    pub tables: &'a ty::TypeckTables<'tcx>,\n \n     /// The crate being checked.\n     pub krate: &'a hir::Crate,\n@@ -1212,7 +1212,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let lint_store = mem::replace(&mut *tcx.sess.lint_store.borrow_mut(), LintStore::new());\n     let mut cx = LateContext {\n         tcx: tcx,\n-        tables: &ty::Tables::empty(),\n+        tables: &ty::TypeckTables::empty(),\n         krate: krate,\n         access_levels: access_levels,\n         lints: lint_store,"}, {"sha": "38fbe650a89bd64b776fc57b5b049a3b92add95d", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -49,7 +49,7 @@ fn should_explore<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     worklist: Vec<ast::NodeId>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n     live_symbols: Box<FxHashSet<ast::NodeId>>,\n     struct_has_extern_repr: bool,\n     ignore_non_const_paths: bool,\n@@ -392,7 +392,7 @@ fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist: worklist,\n         tcx: tcx,\n-        tables: &ty::Tables::empty(),\n+        tables: &ty::TypeckTables::empty(),\n         live_symbols: box FxHashSet(),\n         struct_has_extern_repr: false,\n         ignore_non_const_paths: false,"}, {"sha": "f90d9143e9d5776ffb7117ec68206327145f222c", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -52,7 +52,7 @@ fn type_is_unsafe_function(ty: Ty) -> bool {\n \n struct EffectCheckVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n \n     /// Whether we're in an unsafe context.\n     unsafe_context: UnsafeContext,\n@@ -245,7 +245,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n-        tables: &ty::Tables::empty(),\n+        tables: &ty::TypeckTables::empty(),\n         unsafe_context: UnsafeContext::new(SafeContext),\n     };\n "}, {"sha": "e0521f98416bc02a6a989139efc99c00302bc2f3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -512,7 +512,7 @@ const ACC_USE: u32 = 4;\n \n struct Liveness<'a, 'tcx: 'a> {\n     ir: &'a mut IrMaps<'a, 'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n     s: Specials,\n     successors: Vec<LiveNode>,\n     users: Vec<Users>,"}, {"sha": "385dd3d9bf764a98b7e320453a9a62ee02a7a349", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -79,7 +79,7 @@ fn method_might_be_inlined<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n struct ReachableContext<'a, 'tcx: 'a> {\n     // The type context.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n     // The set of items which must be exported in the linkage sense.\n     reachable_symbols: NodeSet,\n     // A worklist of item IDs. Each item ID in this worklist will be inlined\n@@ -370,7 +370,7 @@ pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n     let mut reachable_context = ReachableContext {\n         tcx: tcx,\n-        tables: &ty::Tables::empty(),\n+        tables: &ty::TypeckTables::empty(),\n         reachable_symbols: NodeSet(),\n         worklist: Vec::new(),\n         any_library: any_library,"}, {"sha": "c32e40c6cef2219f73872688478928dffed1c551", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -65,7 +65,7 @@ pub struct GlobalArenas<'tcx> {\n     trait_def: TypedArena<ty::TraitDef>,\n     adt_def: TypedArena<ty::AdtDef>,\n     mir: TypedArena<RefCell<Mir<'tcx>>>,\n-    tables: TypedArena<ty::Tables<'tcx>>,\n+    tables: TypedArena<ty::TypeckTables<'tcx>>,\n }\n \n impl<'tcx> GlobalArenas<'tcx> {\n@@ -192,7 +192,7 @@ pub struct CommonTypes<'tcx> {\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-pub struct Tables<'tcx> {\n+pub struct TypeckTables<'tcx> {\n     /// Resolved definitions for `<T>::X` associated paths.\n     pub type_relative_path_defs: NodeMap<Def>,\n \n@@ -234,9 +234,9 @@ pub struct Tables<'tcx> {\n     pub fru_field_types: NodeMap<Vec<Ty<'tcx>>>\n }\n \n-impl<'tcx> Tables<'tcx> {\n-    pub fn empty() -> Tables<'tcx> {\n-        Tables {\n+impl<'tcx> TypeckTables<'tcx> {\n+    pub fn empty() -> TypeckTables<'tcx> {\n+        TypeckTables {\n             type_relative_path_defs: NodeMap(),\n             node_types: FxHashMap(),\n             item_substs: NodeMap(),\n@@ -402,7 +402,7 @@ pub struct GlobalCtxt<'tcx> {\n     free_region_maps: RefCell<NodeMap<FreeRegionMap>>,\n     // FIXME: jroesch make this a refcell\n \n-    pub tables: RefCell<DepTrackingMap<maps::Tables<'tcx>>>,\n+    pub tables: RefCell<DepTrackingMap<maps::TypeckTables<'tcx>>>,\n \n     /// Maps from a trait item to the trait item \"descriptor\"\n     pub associated_items: RefCell<DepTrackingMap<maps::AssociatedItems<'tcx>>>,\n@@ -654,7 +654,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.global_arenas.mir.alloc(RefCell::new(mir))\n     }\n \n-    pub fn alloc_tables(self, tables: ty::Tables<'gcx>) -> &'gcx ty::Tables<'gcx> {\n+    pub fn alloc_tables(self, tables: ty::TypeckTables<'gcx>) -> &'gcx ty::TypeckTables<'gcx> {\n         self.global_arenas.tables.alloc(tables)\n     }\n "}, {"sha": "c0cf1d724273ed558e7c15a00c2eba318f8d4062", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -48,4 +48,4 @@ dep_map_ty! { ReprHints: ReprHints(DefId) -> Rc<Vec<attr::ReprAttr>> }\n dep_map_ty! { Mir: Mir(DefId) -> &'tcx RefCell<mir::Mir<'tcx>> }\n dep_map_ty! { ClosureKinds: ItemSignature(DefId) -> ty::ClosureKind }\n dep_map_ty! { ClosureTypes: ItemSignature(DefId) -> ty::ClosureTy<'tcx> }\n-dep_map_ty! { Tables: Tables(DefId) -> &'tcx ty::Tables<'tcx> }\n+dep_map_ty! { TypeckTables: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx> }"}, {"sha": "697ab6ee491d43960632a0beb14824557ed43e92", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -69,7 +69,7 @@ pub use self::sty::TypeVariants::*;\n \n pub use self::contents::TypeContents;\n pub use self::context::{TyCtxt, GlobalArenas, tls};\n-pub use self::context::{Lift, Tables};\n+pub use self::context::{Lift, TypeckTables};\n \n pub use self::trait_def::{TraitDef, TraitFlags};\n \n@@ -1917,11 +1917,11 @@ impl BorrowKind {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub fn body_tables(self, body: hir::BodyId) -> &'gcx Tables<'gcx> {\n+    pub fn body_tables(self, body: hir::BodyId) -> &'gcx TypeckTables<'gcx> {\n         self.item_tables(self.map.body_owner_def_id(body))\n     }\n \n-    pub fn item_tables(self, def_id: DefId) -> &'gcx Tables<'gcx> {\n+    pub fn item_tables(self, def_id: DefId) -> &'gcx TypeckTables<'gcx> {\n         self.tables.memoize(def_id, || {\n             if def_id.is_local() {\n                 // Closures' tables come from their outermost function,"}, {"sha": "a6452a3f0310ad4eb02eaf197aae7a4f6c0d7c0a", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -69,7 +69,7 @@ fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> Diagn\n \n struct MatchVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n     param_env: &'a ty::ParameterEnvironment<'tcx>\n }\n "}, {"sha": "2325c37bc40501f51352a642648d852bd033f2d7", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -52,7 +52,7 @@ macro_rules! math {\n \n fn lookup_variant_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   variant_def: DefId)\n-                                  -> Option<(&'tcx Expr, Option<&'a ty::Tables<'tcx>>)> {\n+                                  -> Option<(&'tcx Expr, Option<&'a ty::TypeckTables<'tcx>>)> {\n     if let Some(variant_node_id) = tcx.map.as_local_node_id(variant_def) {\n         let enum_node_id = tcx.map.get_parent(variant_node_id);\n         if let Some(ast_map::NodeItem(it)) = tcx.map.find(enum_node_id) {\n@@ -81,7 +81,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         def_id: DefId,\n                                         substs: Option<&'tcx Substs<'tcx>>)\n                                         -> Option<(&'tcx Expr,\n-                                                   Option<&'a ty::Tables<'tcx>>,\n+                                                   Option<&'a ty::TypeckTables<'tcx>>,\n                                                    Option<ty::Ty<'tcx>>)> {\n     if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n         match tcx.map.find(node_id) {\n@@ -154,7 +154,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn lookup_const_fn_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-                                   -> Option<(&'tcx hir::Body, Option<&'a ty::Tables<'tcx>>)>\n+                                   -> Option<(&'tcx hir::Body, Option<&'a ty::TypeckTables<'tcx>>)>\n {\n     if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n         FnLikeNode::from_node(tcx.map.get(node_id)).and_then(|fn_like| {\n@@ -226,7 +226,7 @@ pub fn note_const_eval_err<'a, 'tcx>(\n \n pub struct ConstContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: Option<&'a ty::Tables<'tcx>>,\n+    tables: Option<&'a ty::TypeckTables<'tcx>>,\n     fn_args: Option<DefIdMap<ConstVal>>\n }\n \n@@ -240,7 +240,7 @@ impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn with_tables(tcx: TyCtxt<'a, 'tcx, 'tcx>, tables: &'a ty::Tables<'tcx>) -> Self {\n+    pub fn with_tables(tcx: TyCtxt<'a, 'tcx, 'tcx>, tables: &'a ty::TypeckTables<'tcx>) -> Self {\n         ConstContext {\n             tcx: tcx,\n             tables: Some(tables),\n@@ -920,10 +920,10 @@ fn infer<'a, 'tcx>(i: ConstInt,\n fn resolve_trait_associated_const<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_item_id: DefId,\n-    default_value: Option<(&'tcx Expr, Option<&'a ty::Tables<'tcx>>, Option<ty::Ty<'tcx>>)>,\n+    default_value: Option<(&'tcx Expr, Option<&'a ty::TypeckTables<'tcx>>, Option<ty::Ty<'tcx>>)>,\n     trait_id: DefId,\n     rcvr_substs: &'tcx Substs<'tcx>\n-) -> Option<(&'tcx Expr, Option<&'a ty::Tables<'tcx>>, Option<ty::Ty<'tcx>>)>\n+) -> Option<(&'tcx Expr, Option<&'a ty::TypeckTables<'tcx>>, Option<ty::Ty<'tcx>>)>\n {\n     let trait_ref = ty::Binder(ty::TraitRef::new(trait_id, rcvr_substs));\n     debug!(\"resolve_trait_associated_const: trait_ref={:?}\","}, {"sha": "24c795befa3c848701cba8bbfe8626b4f4dd00b8", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -264,13 +264,13 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n \n pub struct PatternContext<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pub tables: &'a ty::Tables<'gcx>,\n+    pub tables: &'a ty::TypeckTables<'gcx>,\n     pub errors: Vec<PatternError>,\n }\n \n impl<'a, 'gcx, 'tcx> Pattern<'tcx> {\n     pub fn from_hir(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                    tables: &'a ty::Tables<'gcx>,\n+                    tables: &'a ty::TypeckTables<'gcx>,\n                     pat: &hir::Pat) -> Self {\n         let mut pcx = PatternContext::new(tcx, tables);\n         let result = pcx.lower_pattern(pat);\n@@ -283,7 +283,7 @@ impl<'a, 'gcx, 'tcx> Pattern<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>, tables: &'a ty::Tables<'gcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>, tables: &'a ty::TypeckTables<'gcx>) -> Self {\n         PatternContext { tcx: tcx, tables: tables, errors: vec![] }\n     }\n "}, {"sha": "c5e0e8fb45f64ab9164a53acf1858b4ff4958312", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -237,7 +237,7 @@ impl PpSourceMode {\n                                                                  arenas,\n                                                                  id,\n                                                                  |tcx, _, _, _| {\n-                    let empty_tables = ty::Tables::empty();\n+                    let empty_tables = ty::TypeckTables::empty();\n                     let annotation = TypedAnnotation {\n                         tcx: tcx,\n                         tables: Cell::new(&empty_tables)\n@@ -493,7 +493,7 @@ impl<'ast> pprust::PpAnn for HygieneAnnotation<'ast> {\n \n struct TypedAnnotation<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    tables: Cell<&'a ty::Tables<'tcx>>,\n+    tables: Cell<&'a ty::TypeckTables<'tcx>>,\n }\n \n impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {"}, {"sha": "4cefc16efe5abde89ffb4bdd9233ac2ea1a590e8", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -14,11 +14,11 @@\n //! we will check that a suitable node for that item either appears\n //! or does not appear in the dep-graph, as appropriate:\n //!\n-//! - `#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rev2\")]` if we are\n+//! - `#[rustc_dirty(label=\"TypeckTables\", cfg=\"rev2\")]` if we are\n //!   in `#[cfg(rev2)]`, then there MUST NOT be a node\n-//!   `DepNode::TypeckItemBody(X)` where `X` is the def-id of the\n+//!   `DepNode::TypeckTables(X)` where `X` is the def-id of the\n //!   current node.\n-//! - `#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rev2\")]` same as above,\n+//! - `#[rustc_clean(label=\"TypeckTables\", cfg=\"rev2\")]` same as above,\n //!   except that the node MUST exist.\n //!\n //! Errors are reported if we are in the suitable configuration but"}, {"sha": "c75a325941f15211d1fe0861185478e6e04bd55e", "filename": "src/librustc_incremental/persist/preds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -56,7 +56,7 @@ impl<'q> Predecessors<'q> {\n \n                 // if -Z query-dep-graph is passed, save more extended data\n                 // to enable better unit testing\n-                DepNode::TypeckItemBody(_) |\n+                DepNode::TypeckTables(_) |\n                 DepNode::TransCrateItem(_) => tcx.sess.opts.debugging_opts.query_dep_graph,\n \n                 _ => false,"}, {"sha": "ef7bb80312eb5088a21b5a9525eb66406d947eb1", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -21,7 +21,7 @@ use rustc_serialize::Encodable;\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct Ast<'tcx> {\n     pub body: Lazy<hir::Body>,\n-    pub tables: Lazy<ty::Tables<'tcx>>,\n+    pub tables: Lazy<ty::TypeckTables<'tcx>>,\n     pub nested_bodies: LazySeq<hir::Body>,\n     pub rvalue_promotable_to_static: bool,\n }"}, {"sha": "533d804a23651a7bc884ad02ab27b8dedfa421ce", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n \n-    pub fn tables(&self) -> &'a ty::Tables<'gcx> {\n+    pub fn tables(&self) -> &'a ty::TypeckTables<'gcx> {\n         self.infcx.tables.expect_interned()\n     }\n "}, {"sha": "fa148da2e3996bdd00022c0a345b8ff09af3dff7", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -60,7 +60,7 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n     promotable: bool,\n     mut_rvalue_borrows: NodeSet,\n     param_env: ty::ParameterEnvironment<'tcx>,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n }\n \n impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n@@ -462,7 +462,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.visit_all_item_likes_in_krate(DepNode::CheckConst,\n                                       &mut CheckCrateVisitor {\n                                           tcx: tcx,\n-                                          tables: &ty::Tables::empty(),\n+                                          tables: &ty::TypeckTables::empty(),\n                                           in_fn: false,\n                                           promotable: false,\n                                           mut_rvalue_borrows: NodeSet(),"}, {"sha": "445da5a8c3f4ee13df7fca0c8c60ae2747870caf", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -392,7 +392,7 @@ struct PrivacyVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     curitem: DefId,\n     in_foreign: bool,\n-    tables: &'a ty::Tables<'tcx>,\n+    tables: &'a ty::TypeckTables<'tcx>,\n }\n \n impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n@@ -1212,7 +1212,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         curitem: DefId::local(CRATE_DEF_INDEX),\n         in_foreign: false,\n         tcx: tcx,\n-        tables: &ty::Tables::empty(),\n+        tables: &ty::TypeckTables::empty(),\n     };\n     intravisit::walk_crate(&mut visitor, krate);\n "}, {"sha": "ded59cfccf13471bc7c3c528dd441a88efad2570", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -84,7 +84,7 @@ pub mod recorder {\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n-    tables: &'l ty::Tables<'tcx>,\n+    tables: &'l ty::TypeckTables<'tcx>,\n     analysis: &'l ty::CrateAnalysis<'tcx>,\n     span_utils: SpanUtils<'tcx>,\n }\n@@ -899,7 +899,7 @@ pub fn process_crate<'l, 'tcx>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n \n     let save_ctxt = SaveContext {\n         tcx: tcx,\n-        tables: &ty::Tables::empty(),\n+        tables: &ty::TypeckTables::empty(),\n         analysis: analysis,\n         span_utils: SpanUtils::new(&tcx.sess),\n     };"}, {"sha": "7a9df90c1a6138e045f69facdd2bf4a71edae242", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 36, "deletions": 58, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -483,7 +483,7 @@ pub struct InheritedBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> CrateCtxt<'a, 'gcx> {\n     pub fn inherited(&'a self, id: ast::NodeId)\n                      -> InheritedBuilder<'a, 'gcx, 'tcx> {\n-        let tables = ty::Tables::empty();\n+        let tables = ty::TypeckTables::empty();\n         let param_env = ParameterEnvironment::for_item(self.tcx, id);\n         InheritedBuilder {\n             ccx: self,\n@@ -570,16 +570,43 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &'tcx hir::Item) {\n-        check_item_body(self.ccx, i);\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        match item.node {\n+            hir::ItemFn(ref decl, .., body_id) => {\n+                check_bare_fn(self.ccx, &decl, body_id, item.id, item.span);\n+            }\n+            _ => { }\n+        }\n     }\n \n-    fn visit_trait_item(&mut self, _item: &'tcx hir::TraitItem) {\n-        // done as part of `visit_item` above\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+        match trait_item.node {\n+            hir::TraitItemKind::Const(_, Some(expr)) => {\n+                check_const(self.ccx, expr, trait_item.id)\n+            }\n+            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body_id)) => {\n+                check_bare_fn(self.ccx, &sig.decl, body_id, trait_item.id, trait_item.span);\n+            }\n+            hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) |\n+            hir::TraitItemKind::Const(_, None) |\n+            hir::TraitItemKind::Type(..) => {\n+                // Nothing to do.\n+            }\n+        }\n     }\n \n-    fn visit_impl_item(&mut self, _item: &'tcx hir::ImplItem) {\n-        // done as part of `visit_item` above\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+        match impl_item.node {\n+            hir::ImplItemKind::Const(_, expr) => {\n+                check_const(self.ccx, expr, impl_item.id)\n+            }\n+            hir::ImplItemKind::Method(ref sig, body_id) => {\n+                check_bare_fn(self.ccx, &sig.decl, body_id, impl_item.id, impl_item.span);\n+            }\n+            hir::ImplItemKind::Type(_) => {\n+                // Nothing to do here.\n+            }\n+        }\n     }\n }\n \n@@ -601,14 +628,14 @@ pub fn check_item_types(ccx: &CrateCtxt) -> CompileResult {\n pub fn check_item_bodies(ccx: &CrateCtxt) -> CompileResult {\n     ccx.tcx.sess.track_errors(|| {\n         let mut visit = CheckItemBodiesVisitor { ccx: ccx };\n-        ccx.tcx.visit_all_item_likes_in_krate(DepNode::TypeckItemBody, &mut visit);\n+        ccx.tcx.visit_all_item_likes_in_krate(DepNode::TypeckTables, &mut visit);\n \n         // Process deferred obligations, now that all functions\n         // bodies have been fully inferred.\n         for (&item_id, obligations) in ccx.deferred_obligations.borrow().iter() {\n             // Use the same DepNode as for the body of the original function/item.\n             let def_id = ccx.tcx.map.local_def_id(item_id);\n-            let _task = ccx.tcx.dep_graph.in_task(DepNode::TypeckItemBody(def_id));\n+            let _task = ccx.tcx.dep_graph.in_task(DepNode::TypeckTables(def_id));\n \n             let param_env = ParameterEnvironment::for_item(ccx.tcx, item_id);\n             ccx.tcx.infer_ctxt(param_env, Reveal::NotSpecializable).enter(|infcx| {\n@@ -897,55 +924,6 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n     }\n }\n \n-pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n-    debug!(\"check_item_body(it.id={}, it.name={})\",\n-           it.id,\n-           ccx.tcx.item_path_str(ccx.tcx.map.local_def_id(it.id)));\n-    let _indenter = indenter();\n-    match it.node {\n-      hir::ItemFn(ref decl, .., body_id) => {\n-        check_bare_fn(ccx, &decl, body_id, it.id, it.span);\n-      }\n-      hir::ItemImpl(.., ref impl_item_refs) => {\n-        debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n-\n-        for impl_item_ref in impl_item_refs {\n-            let impl_item = ccx.tcx.map.impl_item(impl_item_ref.id);\n-            match impl_item.node {\n-                hir::ImplItemKind::Const(_, expr) => {\n-                    check_const(ccx, expr, impl_item.id)\n-                }\n-                hir::ImplItemKind::Method(ref sig, body_id) => {\n-                    check_bare_fn(ccx, &sig.decl, body_id, impl_item.id, impl_item.span);\n-                }\n-                hir::ImplItemKind::Type(_) => {\n-                    // Nothing to do here.\n-                }\n-            }\n-        }\n-      }\n-      hir::ItemTrait(.., ref trait_item_refs) => {\n-        for trait_item_ref in trait_item_refs {\n-            let trait_item = ccx.tcx.map.trait_item(trait_item_ref.id);\n-            match trait_item.node {\n-                hir::TraitItemKind::Const(_, Some(expr)) => {\n-                    check_const(ccx, expr, trait_item.id)\n-                }\n-                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body_id)) => {\n-                    check_bare_fn(ccx, &sig.decl, body_id, trait_item.id, trait_item.span);\n-                }\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) |\n-                hir::TraitItemKind::Const(_, None) |\n-                hir::TraitItemKind::Type(..) => {\n-                    // Nothing to do.\n-                }\n-            }\n-        }\n-      }\n-      _ => {/* nothing to do */ }\n-    }\n-}\n-\n fn check_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     def_id: DefId,\n                                     item: &hir::Item) {"}, {"sha": "172c1dfe35eae17e1da9b9490f22f2ba73f2bd36", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n struct WritebackCx<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> {\n     fcx: &'cx FnCtxt<'cx, 'gcx, 'tcx>,\n \n-    tables: ty::Tables<'gcx>,\n+    tables: ty::TypeckTables<'gcx>,\n \n     // Mapping from free regions of the function to the\n     // early-bound versions of them, visible from the\n@@ -81,7 +81,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     fn new(fcx: &'cx FnCtxt<'cx, 'gcx, 'tcx>) -> WritebackCx<'cx, 'gcx, 'tcx> {\n         let mut wbcx = WritebackCx {\n             fcx: fcx,\n-            tables: ty::Tables::empty(),\n+            tables: ty::TypeckTables::empty(),\n             free_to_bound_regions: DefIdMap()\n         };\n "}, {"sha": "fe76a4d439f377d95ec4e7096d0309d1f801144a", "filename": "src/test/compile-fail/dep-graph-assoc-type-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-assoc-type-trans.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -35,7 +35,7 @@ mod x {\n mod y {\n     use Foo;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn use_char_assoc() {\n         // Careful here: in the representation, <char as Foo>::T gets"}, {"sha": "9cb87886809a8ada47ad401780355dd646b3f191", "filename": "src/test/compile-fail/dep-graph-caller-callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-caller-callee.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -27,7 +27,7 @@ mod y {\n     use x;\n \n     // These dependencies SHOULD exist:\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn y() {\n         x::x();\n@@ -39,7 +39,7 @@ mod z {\n \n     // These are expected to yield errors, because changes to `x`\n     // affect the BODY of `y`, but not its signature.\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn z() {\n         y::y();"}, {"sha": "7dd02f57b366e81636b2752411a8707f6206fced", "filename": "src/test/compile-fail/dep-graph-trait-impl-two-traits-same-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits-same-method.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -39,7 +39,7 @@ mod x {\n mod y {\n     use {Foo, Bar};\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     pub fn with_char() {\n         char::method('a');\n     }\n@@ -48,7 +48,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n     pub fn z() {\n         y::with_char();\n     }"}, {"sha": "6b3525333bcbc71d364991248b9a87175ed9e8fc", "filename": "src/test/compile-fail/dep-graph-trait-impl-two-traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl-two-traits.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -38,7 +38,7 @@ mod x {\n mod y {\n     use {Foo, Bar};\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n     pub fn call_bar() {\n         char::bar('a');\n     }\n@@ -47,7 +47,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n     pub fn z() {\n         y::call_bar();\n     }"}, {"sha": "c0f9f0546260a05b6e1dfc44e32821ec3bf8ec09", "filename": "src/test/compile-fail/dep-graph-trait-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-trait-impl.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -34,25 +34,25 @@ mod x {\n mod y {\n     use Foo;\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn with_char() {\n         char::method('a');\n     }\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn take_foo_with_char() {\n         take_foo::<char>('a');\n     }\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn with_u32() {\n         u32::method(22);\n     }\n \n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR OK\n     pub fn take_foo_with_u32() {\n         take_foo::<u32>(22);\n@@ -66,7 +66,7 @@ mod z {\n \n     // These are expected to yield errors, because changes to `x`\n     // affect the BODY of `y`, but not its signature.\n-    #[rustc_then_this_would_need(TypeckItemBody)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n     #[rustc_then_this_would_need(TransCrateItem)] //~ ERROR no path\n     pub fn z() {\n         y::with_char();"}, {"sha": "2520e3a095e1d623bb510f8e4ae125d3cf7c6ed3", "filename": "src/test/compile-fail/dep_graph_crosscontaminate_tables.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep_graph_crosscontaminate_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fcompile-fail%2Fdep_graph_crosscontaminate_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep_graph_crosscontaminate_tables.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the `TypeckTables` nodes for impl items are independent from\n+// one another.\n+\n+// compile-flags: -Z query-dep-graph\n+\n+#![feature(rustc_attrs)]\n+\n+struct Foo {\n+    x: u8\n+}\n+\n+impl Foo {\n+    // Changing the item `new`...\n+    #[rustc_if_this_changed(HirBody)]\n+    fn new() -> Foo {\n+        Foo { x: 0 }\n+    }\n+\n+    // ...should not cause us to recompute the tables for `with`!\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n+    fn with(x: u8) -> Foo {\n+        Foo { x: x }\n+    }\n+}\n+\n+fn main() {\n+    let f = Foo::new();\n+    let g = Foo::with(22);\n+    assert_eq!(f.x, g.x - 22);\n+}"}, {"sha": "40067efd57595973a13dc00676ee0347c5681eeb", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -32,7 +32,7 @@ extern crate point;\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -43,7 +43,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_free_fn {\n     use point::{self, Point};\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         point::distance_squared(&x);\n@@ -54,7 +54,7 @@ mod fn_calls_free_fn {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -64,7 +64,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -74,7 +74,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "9e56d34636ff0083b4dc53a91809aef0a13c8eb0", "filename": "src/test/incremental/callee_caller_cross_crate/b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -16,12 +16,12 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn call_function0() {\n     a::function0(77);\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn call_function1() {\n     a::function1(77);\n }"}, {"sha": "e18b30a8c72428100e6f220f26cb2dfef54169ea", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -79,7 +79,7 @@ mod point {\n mod fn_with_type_in_sig {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn boop(p: Option<&Point>) -> f32 {\n         p.map(|p| p.total()).unwrap_or(0.0)\n     }\n@@ -95,7 +95,7 @@ mod fn_with_type_in_sig {\n mod call_fn_with_type_in_sig {\n     use fn_with_type_in_sig;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_sig::boop(None)\n     }\n@@ -111,7 +111,7 @@ mod call_fn_with_type_in_sig {\n mod fn_with_type_in_body {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn boop() -> f32 {\n         Point::origin().total()\n     }\n@@ -124,7 +124,7 @@ mod fn_with_type_in_body {\n mod call_fn_with_type_in_body {\n     use fn_with_type_in_body;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_body::boop()\n     }\n@@ -134,7 +134,7 @@ mod call_fn_with_type_in_body {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin(p: Point) -> Point {\n         Point { ..p }\n     }\n@@ -144,7 +144,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -154,7 +154,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "5ee75d44f1d157e9f6def6d3751c86860f08c522", "filename": "src/test/incremental/change_crate_order/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_order%2Fmain.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -28,7 +28,7 @@ extern crate a;\n use a::A;\n use b::B;\n \n-//? #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+//? #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn main() {\n     A + B;\n }"}, {"sha": "abfd55ba52cc7a5bd310fcebaadde581aeb6ef99", "filename": "src/test/incremental/change_private_fn/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -59,7 +59,7 @@ mod point {\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -70,7 +70,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -81,7 +81,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -91,7 +91,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -101,7 +101,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "a6d029515d74263d23cbeb295eb101fb68618967", "filename": "src/test/incremental/change_private_fn_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -31,7 +31,7 @@ extern crate point;\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -42,7 +42,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -53,7 +53,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -63,7 +63,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -73,7 +73,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "d8c6cafe596a696880f03a6b17012938350c54fe", "filename": "src/test/incremental/change_private_impl_method/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -59,7 +59,7 @@ mod point {\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -70,7 +70,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -81,7 +81,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -91,7 +91,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -101,7 +101,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "05c076b9f4bc3b47dd286d658a3221024fef4ef3", "filename": "src/test/incremental/change_private_impl_method_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -32,7 +32,7 @@ extern crate point;\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -43,7 +43,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn dirty() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -54,7 +54,7 @@ mod fn_calls_methods_in_another_impl {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -64,7 +64,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -74,7 +74,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "5b29ee1435f9a70cbb4942e2163a66c2f3e5d053", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -50,7 +50,7 @@ mod point {\n mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_origin();\n@@ -61,7 +61,7 @@ mod fn_calls_changed_method {\n mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n@@ -72,7 +72,7 @@ mod fn_calls_another_method {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -82,7 +82,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -92,7 +92,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "f8db6c69a76f9f0cf90cac88df35c3650bb4783c", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -61,7 +61,7 @@ mod point {\n mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_point(None);\n@@ -72,7 +72,7 @@ mod fn_calls_changed_method {\n mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n@@ -83,7 +83,7 @@ mod fn_calls_another_method {\n mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -93,7 +93,7 @@ mod fn_make_struct {\n mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -103,7 +103,7 @@ mod fn_read_field {\n mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "9f20128de4f5599bc28bc471d4cc2bbdd5ce1721", "filename": "src/test/incremental/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -35,20 +35,20 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"TransCrateItem\", cfg=\"cfail2\")]\n     pub fn y() {\n-        //[cfail2]~^ ERROR `TypeckItemBody(\"y::y\")` not found in dep graph, but should be clean\n+        //[cfail2]~^ ERROR `TypeckTables(\"y::y\")` not found in dep graph, but should be clean\n         //[cfail2]~| ERROR `TransCrateItem(\"y::y\")` not found in dep graph, but should be clean\n         x::x();\n     }\n }\n \n mod z {\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"TransCrateItem\", cfg=\"cfail2\")]\n     pub fn z() {\n-        //[cfail2]~^ ERROR `TypeckItemBody(\"z::z\")` found in dep graph, but should be dirty\n+        //[cfail2]~^ ERROR `TypeckTables(\"z::z\")` found in dep graph, but should be dirty\n         //[cfail2]~| ERROR `TransCrateItem(\"z::z\")` found in dep graph, but should be dirty\n     }\n }"}, {"sha": "2d65e0aa657a6690cb271f42b564c1ab39d58dbb", "filename": "src/test/incremental/hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fhello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fhello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhello_world.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -31,7 +31,7 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn yyyy() {\n         x::xxxx();\n     }\n@@ -40,7 +40,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     pub fn z() {\n         y::yyyy();\n     }"}, {"sha": "9849e93d3ff9ef4e0de1eb6aea01f9bd5c9d89a1", "filename": "src/test/incremental/rlib_cross_crate/b.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -22,15 +22,15 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass3\")]\n pub fn use_X() -> u32 {\n     let x: a::X = 22;\n     x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass3\")]\n pub fn use_Y() {\n     let x: a::Y = 'c';\n }"}, {"sha": "669d001cc63d69a3057258fe510849d19d359fcb", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -27,7 +27,7 @@ mod x {\n     }\n \n     #[cfg(rpass2)]\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n     #[rustc_dirty(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n@@ -37,7 +37,7 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn y() {\n         x::x();\n@@ -47,7 +47,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"TransCrateItem\", cfg=\"rpass2\")]\n     pub fn z() {\n         y::y();"}, {"sha": "42681eb2be45d449f1a3e4cf65b15d3a9ea94dc9", "filename": "src/test/incremental/struct_add_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_add_field.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -31,17 +31,17 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_X(x: X) -> u32 {\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "63df407d5c02a6e57db2c9fa166256646c8bcecf", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -34,21 +34,21 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     //[cfail2]~^ ERROR struct `X` has no field named `x`\n     x.x as u32\n     //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n     //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "67b34163979489be7612940a5a910ccaca944c17", "filename": "src/test/incremental/struct_change_field_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -34,19 +34,19 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(x: EmbedX) -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "9660f47da35c1ef6de5ad5a6b3dac243cd563000", "filename": "src/test/incremental/struct_change_field_type_cross_crate/b.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -18,18 +18,18 @@ extern crate a;\n \n use a::*;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "e2d4045874431b8affd1a5ab94150f2d07175985", "filename": "src/test/incremental/struct_change_nothing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -34,19 +34,19 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(x: EmbedX) -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "fba965ff5a005ddd6db201cae67b1bfafddd4740", "filename": "src/test/incremental/struct_remove_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -35,17 +35,17 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_X(x: X) -> u32 {\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "ee35a4d9b9c6e9f0c96af2a5ba000fb32168da90", "filename": "src/test/incremental/type_alias_cross_crate/b.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0463a4a4f323c4deffc861349e38c6b5091782/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs?ref=2f0463a4a4f323c4deffc861349e38c6b5091782", "patch": "@@ -16,15 +16,15 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass3\")]\n pub fn use_X() -> u32 {\n     let x: a::X = 22;\n     x as u32\n }\n \n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass3\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"TypeckTables\", cfg=\"rpass3\")]\n pub fn use_Y() {\n     let x: a::Y = 'c';\n }"}]}