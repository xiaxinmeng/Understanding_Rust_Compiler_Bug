{"sha": "5f11e71721e038ebdd9b225eec3e86f1ee7f867b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTFlNzE3MjFlMDM4ZWJkZDliMjI1ZWVjM2U4NmYxZWU3Zjg2N2I=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-11T20:55:39Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-14T22:41:09Z"}, "message": "Reuse memory for process_cycles", "tree": {"sha": "ce543a8b36592f17793ec2d319e91314287a449b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce543a8b36592f17793ec2d319e91314287a449b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f11e71721e038ebdd9b225eec3e86f1ee7f867b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f11e71721e038ebdd9b225eec3e86f1ee7f867b", "html_url": "https://github.com/rust-lang/rust/commit/5f11e71721e038ebdd9b225eec3e86f1ee7f867b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f11e71721e038ebdd9b225eec3e86f1ee7f867b/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86e030391b2e81c44beed94e3070406994caaad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e030391b2e81c44beed94e3070406994caaad5", "html_url": "https://github.com/rust-lang/rust/commit/86e030391b2e81c44beed94e3070406994caaad5"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "aeb926bca3e4cf5588e7b19b4ad4d7b1bed7b4b4", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f11e71721e038ebdd9b225eec3e86f1ee7f867b/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f11e71721e038ebdd9b225eec3e86f1ee7f867b/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=5f11e71721e038ebdd9b225eec3e86f1ee7f867b", "patch": "@@ -149,8 +149,8 @@ pub struct ObligationForest<O: ForestObligation> {\n     /// comments in `process_obligation` for details.\n     active_cache: FxHashMap<O::CacheKey, usize>,\n \n-    /// A vector reused in compress(), to avoid allocating new vectors.\n-    node_rewrites: Vec<usize>,\n+    /// A vector reused in compress() and find_cycles_from_node(), to avoid allocating new vectors.\n+    reused_node_vec: Vec<usize>,\n \n     obligation_tree_id_generator: ObligationTreeIdGenerator,\n \n@@ -289,7 +289,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             nodes: vec![],\n             done_cache: Default::default(),\n             active_cache: Default::default(),\n-            node_rewrites: vec![],\n+            reused_node_vec: vec![],\n             obligation_tree_id_generator: (0..).map(ObligationTreeId),\n             error_cache: Default::default(),\n         }\n@@ -544,12 +544,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     /// Report cycles between all `Success` nodes, and convert all `Success`\n     /// nodes to `Done`. This must be called after `mark_successes`.\n-    fn process_cycles<P>(&self, processor: &mut P)\n+    fn process_cycles<P>(&mut self, processor: &mut P)\n     where\n         P: ObligationProcessor<Obligation = O>,\n     {\n-        let mut stack = vec![];\n-\n+        let mut stack = std::mem::take(&mut self.reused_node_vec);\n         for (index, node) in self.nodes.iter().enumerate() {\n             // For some benchmarks this state test is extremely hot. It's a win\n             // to handle the no-op cases immediately to avoid the cost of the\n@@ -560,6 +559,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         }\n \n         debug_assert!(stack.is_empty());\n+        self.reused_node_vec = stack;\n     }\n \n     fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)\n@@ -594,7 +594,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n     #[inline(never)]\n     fn compress(&mut self, do_completed: DoCompleted) -> Option<Vec<O>> {\n         let orig_nodes_len = self.nodes.len();\n-        let mut node_rewrites: Vec<_> = std::mem::take(&mut self.node_rewrites);\n+        let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);\n         debug_assert!(node_rewrites.is_empty());\n         node_rewrites.extend(0..orig_nodes_len);\n         let mut dead_nodes = 0;\n@@ -655,7 +655,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         }\n \n         node_rewrites.truncate(0);\n-        self.node_rewrites = node_rewrites;\n+        self.reused_node_vec = node_rewrites;\n \n         if do_completed == DoCompleted::Yes { Some(removed_done_obligations) } else { None }\n     }"}]}