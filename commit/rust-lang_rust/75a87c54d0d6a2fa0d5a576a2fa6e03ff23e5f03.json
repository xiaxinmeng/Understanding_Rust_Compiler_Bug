{"sha": "75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YTg3YzU0ZDBkNmEyZmEwZDVhNTc2YTJmYTZlMDNmZjIzZTVmMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-29T12:41:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-29T12:41:05Z"}, "message": "Auto merge of #37378 - petrochenkov:nopat, r=eddyb\n\nProhibit patterns in trait methods without bodies\n\nThey are not properly type checked\n```rust\ntrait Tr {\n    fn f(&a: u8); // <- This compiles\n}\n```\n, mostly rejected by the parser already and generally don't make much sense.\nThis PR is kind of a missing part of https://github.com/rust-lang/rust/pull/35015.\n\nGiven the [statistics from crater](https://github.com/rust-lang/rust/pull/37378#issuecomment-256154994), the effect of this PR is mostly equivalent to improving `unused_mut` lint.\n\ncc https://github.com/rust-lang/rust/issues/35078#issuecomment-255707355 https://github.com/rust-lang/rust/pull/35015 https://github.com/rust-lang/rfcs/pull/1685 https://github.com/rust-lang/rust/issues/35203\nr? @eddyb", "tree": {"sha": "7e925323526d1a3c01e51d56aeba905442e1d553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e925323526d1a3c01e51d56aeba905442e1d553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "html_url": "https://github.com/rust-lang/rust/commit/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db21c3af66ccd6d3c48d420a036c65e6f7711ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db21c3af66ccd6d3c48d420a036c65e6f7711ed", "html_url": "https://github.com/rust-lang/rust/commit/5db21c3af66ccd6d3c48d420a036c65e6f7711ed"}, {"sha": "4ca11ce196d07206852a265d6a0546569de88912", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca11ce196d07206852a265d6a0546569de88912", "html_url": "https://github.com/rust-lang/rust/commit/4ca11ce196d07206852a265d6a0546569de88912"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "4838ecd2d42e62108b156dd760d9c8eb19b9942e", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -4023,9 +4023,9 @@ Methods that take either `self` or `Box<Self>` can optionally place them in a\n mutable variable by prefixing them with `mut` (similar to regular arguments):\n \n ```\n-trait Changer {\n-    fn change(mut self) -> Self;\n-    fn modify(mut self: Box<Self>) -> Box<Self>;\n+trait Changer: Sized {\n+    fn change(mut self) {}\n+    fn modify(mut self: Box<Self>) {}\n }\n ```\n "}, {"sha": "3472c77cf42272038e401f17a493aba49466c96e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -192,6 +192,12 @@ declare_lint! {\n     \"safe access to extern statics was erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub PATTERNS_IN_FNS_WITHOUT_BODY,\n+    Warn,\n+    \"patterns in functions without body were erroneously allowed\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -228,7 +234,8 @@ impl LintPass for HardwiredLints {\n             SUPER_OR_SELF_IN_GLOBAL_PATH,\n             HR_LIFETIME_IN_ASSOC_TYPE,\n             LIFETIME_UNDERSCORE,\n-            SAFE_EXTERN_STATICS\n+            SAFE_EXTERN_STATICS,\n+            PATTERNS_IN_FNS_WITHOUT_BODY\n         )\n     }\n }"}, {"sha": "6f114e09a6c7df7be1349fb4777ca14a5e89468e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -225,6 +225,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/35112>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n+            reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "828efbf373131d9e005e91177b88dce0c94ca075", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -190,8 +190,16 @@ impl<'a> Visitor for AstValidator<'a> {\n             }\n             ItemKind::Trait(.., ref trait_items) => {\n                 for trait_item in trait_items {\n-                    if let TraitItemKind::Method(ref sig, _) = trait_item.node {\n+                    if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n                         self.check_trait_fn_not_const(sig.constness);\n+                        if block.is_none() {\n+                            self.check_decl_no_pat(&sig.decl, |span, _| {\n+                                self.session.add_lint(lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n+                                                      trait_item.id, span,\n+                                                      \"patterns aren't allowed in methods \\\n+                                                       without bodies\".to_string());\n+                            });\n+                        }\n                     }\n                 }\n             }"}, {"sha": "385d012cadee65f58396390849972b540f9c79c3", "filename": "src/test/compile-fail/no-patterns-in-args-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(patterns_in_fns_without_body)]\n+\n+trait Tr {\n+    fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n+                        //~^ WARN was previously accepted\n+    fn f2(&arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n+                     //~^ WARN was previously accepted\n+    fn g1(arg: u8); // OK\n+    fn g2(_: u8); // OK\n+    fn g3(u8); // OK\n+}\n+\n+fn main() {}"}, {"sha": "391c2e75ba4d5770dbd81840130fe2708043ab5e", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -264,17 +264,17 @@ trait TraitChangeModeSelfRefToMut {\n \n \n #[cfg(cfail1)]\n-trait TraitChangeModeSelfOwnToMut {\n-    fn method(self);\n+trait TraitChangeModeSelfOwnToMut: Sized {\n+    fn method(self) {}\n }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-trait TraitChangeModeSelfOwnToMut {\n-    fn method(mut self);\n+trait TraitChangeModeSelfOwnToMut: Sized {\n+    fn method(mut self) {}\n }\n \n "}, {"sha": "846b695c35b3d771ee9781cf5129f4b1e4a0996e", "filename": "src/test/run-pass/by-value-self-in-mut-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -14,7 +14,7 @@ struct X {\n }\n \n trait Changer {\n-    fn change(mut self) -> Self;\n+    fn change(self) -> Self;\n }\n \n impl Changer for X {"}, {"sha": "7910380abeef0db7c0204893a694239c960067e3", "filename": "src/test/run-pass/uniq-self-in-mut-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -17,7 +17,7 @@ struct X {\n }\n \n trait Changer {\n-    fn change(mut self: Box<Self>) -> Box<Self>;\n+    fn change(self: Box<Self>) -> Box<Self>;\n }\n \n impl Changer for X {"}, {"sha": "800186a926df612e881928bd447b49abba0db3c6", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "patch": "@@ -24,7 +24,7 @@ struct Test {\n const TEST_REPOS: &'static [Test] = &[Test {\n                                           name: \"cargo\",\n                                           repo: \"https://github.com/rust-lang/cargo\",\n-                                          sha: \"d3bad1ab29efae414e9b4c24534b2d02b3a59782\",\n+                                          sha: \"806e3c368a15f618244a3b4e918bf77f9c403fd0\",\n                                           lock: None,\n                                       },\n                                       Test {"}]}