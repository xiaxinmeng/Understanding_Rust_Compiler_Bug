{"sha": "4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NjhlNWZiMjNjMDU4ZWJhOTBmMGExZGNkNmU5ZDVjMGVjZGVlMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T16:32:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T16:45:39Z"}, "message": "internal: document diagnostics crate", "tree": {"sha": "814f6a8ace5d131b9f704b3f81e8287b36943b79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/814f6a8ace5d131b9f704b3f81e8287b36943b79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "html_url": "https://github.com/rust-lang/rust/commit/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f7b63522cb7464a853c74a8431587db6434b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f7b63522cb7464a853c74a8431587db6434b12", "html_url": "https://github.com/rust-lang/rust/commit/94f7b63522cb7464a853c74a8431587db6434b12"}], "stats": {"total": 152, "additions": 87, "deletions": 65}, "files": [{"sha": "5ad0fbd1bb065a4ef8d1e882bfecfc31d402cb68", "filename": "crates/ide_diagnostics/src/handlers/break_outside_of_loop.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -3,7 +3,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // Diagnostic: break-outside-of-loop\n //\n // This diagnostic is triggered if the `break` keyword is used outside of a loop.\n-pub(super) fn break_outside_of_loop(\n+pub(crate) fn break_outside_of_loop(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::BreakOutsideOfLoop,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/break_outside_of_loop.rs"}, {"sha": "4b722fd64b7933e1491e6318e6464f0eefa7ad23", "filename": "crates/ide_diagnostics/src/handlers/inactive_code.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -6,7 +6,7 @@ use crate::{Diagnostic, DiagnosticsContext, Severity};\n // Diagnostic: inactive-code\n //\n // This diagnostic is shown for code with inactive `#[cfg]` attributes.\n-pub(super) fn inactive_code(\n+pub(crate) fn inactive_code(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::InactiveCode,\n ) -> Option<Diagnostic> {", "previous_filename": "crates/ide_diagnostics/src/inactive_code.rs"}, {"sha": "3a33029cf727bcaef757c22dbff8ea5507130e90", "filename": "crates/ide_diagnostics/src/handlers/incorrect_case.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -13,7 +13,7 @@ use crate::{\n // Diagnostic: incorrect-ident-case\n //\n // This diagnostic is triggered if an item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n-pub(super) fn incorrect_case(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Diagnostic {\n+pub(crate) fn incorrect_case(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Diagnostic {\n     Diagnostic::new(\n         \"incorrect-ident-case\",\n         format!(", "previous_filename": "crates/ide_diagnostics/src/incorrect_case.rs"}, {"sha": "d4d928ad105c5c02aedad7be9fc5a336ac7f03b1", "filename": "crates/ide_diagnostics/src/handlers/macro_error.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -3,7 +3,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // Diagnostic: macro-error\n //\n // This diagnostic is shown for macro expansion errors.\n-pub(super) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) -> Diagnostic {\n+pub(crate) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) -> Diagnostic {\n     Diagnostic::new(\n         \"macro-error\",\n         d.message.clone(),", "previous_filename": "crates/ide_diagnostics/src/macro_error.rs"}, {"sha": "ce313b2cce53d08e1cb271b23a546a9881f8df61", "filename": "crates/ide_diagnostics/src/handlers/mismatched_arg_count.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -3,7 +3,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // Diagnostic: mismatched-arg-count\n //\n // This diagnostic is triggered if a function is invoked with an incorrect amount of arguments.\n-pub(super) fn mismatched_arg_count(\n+pub(crate) fn mismatched_arg_count(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::MismatchedArgCount,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/mismatched_arg_count.rs"}, {"sha": "bc82c0e4a0d466b7f8a9d03b973733ad77f91bb1", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -18,7 +18,7 @@ use crate::{fix, Diagnostic, DiagnosticsContext};\n //\n // let a = A { a: 10 };\n // ```\n-pub(super) fn missing_fields(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Diagnostic {\n+pub(crate) fn missing_fields(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Diagnostic {\n     let mut message = String::from(\"Missing structure fields:\\n\");\n     for field in &d.missed_fields {\n         format_to!(message, \"- {}\\n\", field);", "previous_filename": "crates/ide_diagnostics/src/missing_fields.rs"}, {"sha": "9ea533d74fd5bcd1af5f0f1508c0d74448b29bc8", "filename": "crates/ide_diagnostics/src/handlers/missing_match_arms.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -5,7 +5,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // Diagnostic: missing-match-arm\n //\n // This diagnostic is triggered if `match` block is missing one or more match arms.\n-pub(super) fn missing_match_arms(\n+pub(crate) fn missing_match_arms(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::MissingMatchArms,\n ) -> Diagnostic {\n@@ -17,7 +17,7 @@ pub(super) fn missing_match_arms(\n }\n \n #[cfg(test)]\n-pub(super) mod tests {\n+mod tests {\n     use crate::tests::check_diagnostics;\n \n     fn check_diagnostics_no_bails(ra_fixture: &str) {", "previous_filename": "crates/ide_diagnostics/src/missing_match_arms.rs"}, {"sha": "63de545707cb03bb5a344936ed65fac27e9e5587", "filename": "crates/ide_diagnostics/src/handlers/missing_ok_or_some_in_tail_expr.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -17,7 +17,7 @@ use crate::{fix, Diagnostic, DiagnosticsContext};\n //     10\n // }\n // ```\n-pub(super) fn missing_ok_or_some_in_tail_expr(\n+pub(crate) fn missing_ok_or_some_in_tail_expr(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::MissingOkOrSomeInTailExpr,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/missing_ok_or_some_in_tail_expr.rs"}, {"sha": "62d8687ba75a57693ab8b68cd5f280f1fe24e488", "filename": "crates/ide_diagnostics/src/handlers/missing_unsafe.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -3,7 +3,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // Diagnostic: missing-unsafe\n //\n // This diagnostic is triggered if an operation marked as `unsafe` is used outside of an `unsafe` function or block.\n-pub(super) fn missing_unsafe(ctx: &DiagnosticsContext<'_>, d: &hir::MissingUnsafe) -> Diagnostic {\n+pub(crate) fn missing_unsafe(ctx: &DiagnosticsContext<'_>, d: &hir::MissingUnsafe) -> Diagnostic {\n     Diagnostic::new(\n         \"missing-unsafe\",\n         \"this operation is unsafe and requires an unsafe function or block\",", "previous_filename": "crates/ide_diagnostics/src/missing_unsafe.rs"}, {"sha": "e4cc8a840d9271b578beac465083e76477f08b05", "filename": "crates/ide_diagnostics/src/handlers/no_such_field.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -11,7 +11,7 @@ use crate::{fix, Assist, Diagnostic, DiagnosticsContext};\n // Diagnostic: no-such-field\n //\n // This diagnostic is triggered if created structure does not have field provided in record.\n-pub(super) fn no_such_field(ctx: &DiagnosticsContext<'_>, d: &hir::NoSuchField) -> Diagnostic {\n+pub(crate) fn no_such_field(ctx: &DiagnosticsContext<'_>, d: &hir::NoSuchField) -> Diagnostic {\n     Diagnostic::new(\n         \"no-such-field\",\n         \"no such field\",", "previous_filename": "crates/ide_diagnostics/src/no_such_field.rs"}, {"sha": "b52e4dc84f33df28aed109c13b16348e354aa8f1", "filename": "crates/ide_diagnostics/src/handlers/remove_this_semicolon.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fremove_this_semicolon.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -8,7 +8,7 @@ use crate::{fix, Assist, Diagnostic, DiagnosticsContext};\n // Diagnostic: remove-this-semicolon\n //\n // This diagnostic is triggered when there's an erroneous `;` at the end of the block.\n-pub(super) fn remove_this_semicolon(\n+pub(crate) fn remove_this_semicolon(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::RemoveThisSemicolon,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/remove_this_semicolon.rs"}, {"sha": "10d5da15dbf4b6337649a05efd65865640942162", "filename": "crates/ide_diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -11,7 +11,7 @@ use crate::{fix, Assist, Diagnostic, DiagnosticsContext, Severity};\n // Diagnostic: replace-filter-map-next-with-find-map\n //\n // This diagnostic is triggered when `.filter_map(..).next()` is used, rather than the more concise `.find_map(..)`.\n-pub(super) fn replace_filter_map_next_with_find_map(\n+pub(crate) fn replace_filter_map_next_with_find_map(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::ReplaceFilterMapNextWithFindMap,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/replace_filter_map_next_with_find_map.rs"}, {"sha": "e879de75cd8477f3d971cc244500b47074df22f3", "filename": "crates/ide_diagnostics/src/handlers/unimplemented_builtin_macro.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funimplemented_builtin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funimplemented_builtin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funimplemented_builtin_macro.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -3,7 +3,7 @@ use crate::{Diagnostic, DiagnosticsContext, Severity};\n // Diagnostic: unimplemented-builtin-macro\n //\n // This diagnostic is shown for builtin macros which are not yet implemented by rust-analyzer\n-pub(super) fn unimplemented_builtin_macro(\n+pub(crate) fn unimplemented_builtin_macro(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnimplementedBuiltinMacro,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/unimplemented_builtin_macro.rs"}, {"sha": "8921ddde257eae8d7c6c98ec0a0690f9f197559c", "filename": "crates/ide_diagnostics/src/handlers/unlinked_file.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -23,7 +23,7 @@ pub(crate) struct UnlinkedFile {\n //\n // This diagnostic is shown for files that are not included in any crate, or files that are part of\n // crates rust-analyzer failed to discover. The file will not have IDE features available.\n-pub(super) fn unlinked_file(ctx: &DiagnosticsContext, d: &UnlinkedFile) -> Diagnostic {\n+pub(crate) fn unlinked_file(ctx: &DiagnosticsContext, d: &UnlinkedFile) -> Diagnostic {\n     // Limit diagnostic to the first few characters in the file. This matches how VS Code\n     // renders it with the full span, but on other editors, and is less invasive.\n     let range = ctx.sema.db.parse(d.file).syntax_node().text_range();", "previous_filename": "crates/ide_diagnostics/src/unlinked_file.rs"}, {"sha": "f5313cc0c659f5cad20f39c1e5e0fc98f9404e91", "filename": "crates/ide_diagnostics/src/handlers/unresolved_extern_crate.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_extern_crate.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -3,7 +3,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n // Diagnostic: unresolved-extern-crate\n //\n // This diagnostic is triggered if rust-analyzer is unable to discover referred extern crate.\n-pub(super) fn unresolved_extern_crate(\n+pub(crate) fn unresolved_extern_crate(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnresolvedExternCrate,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/unresolved_extern_crate.rs"}, {"sha": "f30051c1266e859ff2cc2be35d75c83fd6ded98f", "filename": "crates/ide_diagnostics/src/handlers/unresolved_import.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_import.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -4,7 +4,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n //\n // This diagnostic is triggered if rust-analyzer is unable to resolve a path in\n // a `use` declaration.\n-pub(super) fn unresolved_import(\n+pub(crate) fn unresolved_import(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnresolvedImport,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/unresolved_import.rs"}, {"sha": "4c3c1c19afedb0c2e9ff8d39b2ecf357934e5fbd", "filename": "crates/ide_diagnostics/src/handlers/unresolved_macro_call.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_macro_call.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -7,7 +7,7 @@ use crate::{Diagnostic, DiagnosticsContext};\n //\n // This diagnostic is triggered if rust-analyzer is unable to resolve the path\n // to a macro in a macro invocation.\n-pub(super) fn unresolved_macro_call(\n+pub(crate) fn unresolved_macro_call(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnresolvedMacroCall,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/unresolved_macro_call.rs"}, {"sha": "17166a0c6c88e87ae4f6ba2b5a46b41e9ead73f2", "filename": "crates/ide_diagnostics/src/handlers/unresolved_module.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -7,7 +7,7 @@ use crate::{fix, Diagnostic, DiagnosticsContext};\n // Diagnostic: unresolved-module\n //\n // This diagnostic is triggered if rust-analyzer is unable to discover referred module.\n-pub(super) fn unresolved_module(\n+pub(crate) fn unresolved_module(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnresolvedModule,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/unresolved_module.rs"}, {"sha": "fde1d1323f5bcdf142da117622283407c286c486", "filename": "crates/ide_diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -9,7 +9,7 @@ use crate::{Diagnostic, DiagnosticsContext, Severity};\n // If you are seeing a lot of \"proc macro not expanded\" warnings, you can add this option to the\n // `rust-analyzer.diagnostics.disabled` list to prevent them from showing. Alternatively you can\n // enable support for procedural macros (see `rust-analyzer.procMacro.enable`).\n-pub(super) fn unresolved_proc_macro(\n+pub(crate) fn unresolved_proc_macro(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnresolvedProcMacro,\n ) -> Diagnostic {", "previous_filename": "crates/ide_diagnostics/src/unresolved_proc_macro.rs"}, {"sha": "88037be5a92f79578ff5b7d384ffca44fe607fd9", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 67, "deletions": 45, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=4768e5fb23c058eba90f0a1dcd6e9d5c0ecdee1b", "patch": "@@ -1,28 +1,49 @@\n-//! Collects diagnostics & fixits  for a single file.\n+//! Diagnostics rendering and fixits.\n //!\n-//! The tricky bit here is that diagnostics are produced by hir in terms of\n-//! macro-expanded files, but we need to present them to the users in terms of\n-//! original files. So we need to map the ranges.\n-\n-mod break_outside_of_loop;\n-mod inactive_code;\n-mod incorrect_case;\n-mod macro_error;\n-mod mismatched_arg_count;\n-mod missing_fields;\n-mod missing_match_arms;\n-mod missing_ok_or_some_in_tail_expr;\n-mod missing_unsafe;\n-mod no_such_field;\n-mod remove_this_semicolon;\n-mod replace_filter_map_next_with_find_map;\n-mod unimplemented_builtin_macro;\n-mod unlinked_file;\n-mod unresolved_extern_crate;\n-mod unresolved_import;\n-mod unresolved_macro_call;\n-mod unresolved_module;\n-mod unresolved_proc_macro;\n+//! Most of the diagnostics originate from the dark depth of the compiler, and\n+//! are originally expressed in term of IR. When we emit the diagnostic, we are\n+//! usually not in the position to decide how to best \"render\" it in terms of\n+//! user-authored source code. We are especially not in the position to offer\n+//! fixits, as the compiler completely lacks the infrastructure to edit the\n+//! source code.\n+//!\n+//! Instead, we \"bubble up\" raw, structured diagnostics until the `hir` crate,\n+//! where we \"cook\" them so that each diagnostic is formulated in terms of `hir`\n+//! types. Well, at least that's the aspiration, the \"cooking\" is somewhat\n+//! ad-hoc at the moment. Anyways, we get a bunch of ide-friendly diagnostic\n+//! structs from hir, and we want to render them to unified serializable\n+//! representation (span, level, message) here. If we can, we also provide\n+//! fixits. By the way, that's why we want to keep diagnostics structured\n+//! internally -- so that we have all the info to make fixes.\n+//!\n+//! We have one \"handler\" module per diagnostic code. Such a module contains\n+//! rendering, optional fixes and tests. It's OK if some low-level compiler\n+//! functionality ends up being tested via a diagnostic.\n+//!\n+//! There are also a couple of ad-hoc diagnostics implemented directly here, we\n+//! don't yet have a great pattern for how to do them properly.\n+\n+mod handlers {\n+    pub(crate) mod break_outside_of_loop;\n+    pub(crate) mod inactive_code;\n+    pub(crate) mod incorrect_case;\n+    pub(crate) mod macro_error;\n+    pub(crate) mod mismatched_arg_count;\n+    pub(crate) mod missing_fields;\n+    pub(crate) mod missing_match_arms;\n+    pub(crate) mod missing_ok_or_some_in_tail_expr;\n+    pub(crate) mod missing_unsafe;\n+    pub(crate) mod no_such_field;\n+    pub(crate) mod remove_this_semicolon;\n+    pub(crate) mod replace_filter_map_next_with_find_map;\n+    pub(crate) mod unimplemented_builtin_macro;\n+    pub(crate) mod unlinked_file;\n+    pub(crate) mod unresolved_extern_crate;\n+    pub(crate) mod unresolved_import;\n+    pub(crate) mod unresolved_macro_call;\n+    pub(crate) mod unresolved_module;\n+    pub(crate) mod unresolved_proc_macro;\n+}\n \n mod field_shorthand;\n \n@@ -41,7 +62,8 @@ use syntax::{\n     SyntaxNode, TextRange,\n };\n use text_edit::TextEdit;\n-use unlinked_file::UnlinkedFile;\n+\n+use crate::handlers::unlinked_file::UnlinkedFile;\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct DiagnosticCode(pub &'static str);\n@@ -148,32 +170,32 @@ pub fn diagnostics(\n     let ctx = DiagnosticsContext { config, sema, resolve };\n     if module.is_none() {\n         let d = UnlinkedFile { file: file_id };\n-        let d = unlinked_file::unlinked_file(&ctx, &d);\n+        let d = handlers::unlinked_file::unlinked_file(&ctx, &d);\n         res.push(d)\n     }\n \n     for diag in diags {\n         #[rustfmt::skip]\n         let d = match diag {\n-            AnyDiagnostic::BreakOutsideOfLoop(d) => break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n-            AnyDiagnostic::IncorrectCase(d) => incorrect_case::incorrect_case(&ctx, &d),\n-            AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n-            AnyDiagnostic::MismatchedArgCount(d) => mismatched_arg_count::mismatched_arg_count(&ctx, &d),\n-            AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n-            AnyDiagnostic::MissingMatchArms(d) => missing_match_arms::missing_match_arms(&ctx, &d),\n-            AnyDiagnostic::MissingOkOrSomeInTailExpr(d) => missing_ok_or_some_in_tail_expr::missing_ok_or_some_in_tail_expr(&ctx, &d),\n-            AnyDiagnostic::MissingUnsafe(d) => missing_unsafe::missing_unsafe(&ctx, &d),\n-            AnyDiagnostic::NoSuchField(d) => no_such_field::no_such_field(&ctx, &d),\n-            AnyDiagnostic::RemoveThisSemicolon(d) => remove_this_semicolon::remove_this_semicolon(&ctx, &d),\n-            AnyDiagnostic::ReplaceFilterMapNextWithFindMap(d) => replace_filter_map_next_with_find_map::replace_filter_map_next_with_find_map(&ctx, &d),\n-            AnyDiagnostic::UnimplementedBuiltinMacro(d) => unimplemented_builtin_macro::unimplemented_builtin_macro(&ctx, &d),\n-            AnyDiagnostic::UnresolvedExternCrate(d) => unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n-            AnyDiagnostic::UnresolvedImport(d) => unresolved_import::unresolved_import(&ctx, &d),\n-            AnyDiagnostic::UnresolvedMacroCall(d) => unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n-            AnyDiagnostic::UnresolvedModule(d) => unresolved_module::unresolved_module(&ctx, &d),\n-            AnyDiagnostic::UnresolvedProcMacro(d) => unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n-\n-            AnyDiagnostic::InactiveCode(d) => match inactive_code::inactive_code(&ctx, &d) {\n+            AnyDiagnostic::BreakOutsideOfLoop(d) => handlers::break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n+            AnyDiagnostic::IncorrectCase(d) => handlers::incorrect_case::incorrect_case(&ctx, &d),\n+            AnyDiagnostic::MacroError(d) => handlers::macro_error::macro_error(&ctx, &d),\n+            AnyDiagnostic::MismatchedArgCount(d) => handlers::mismatched_arg_count::mismatched_arg_count(&ctx, &d),\n+            AnyDiagnostic::MissingFields(d) => handlers::missing_fields::missing_fields(&ctx, &d),\n+            AnyDiagnostic::MissingMatchArms(d) => handlers::missing_match_arms::missing_match_arms(&ctx, &d),\n+            AnyDiagnostic::MissingOkOrSomeInTailExpr(d) => handlers::missing_ok_or_some_in_tail_expr::missing_ok_or_some_in_tail_expr(&ctx, &d),\n+            AnyDiagnostic::MissingUnsafe(d) => handlers::missing_unsafe::missing_unsafe(&ctx, &d),\n+            AnyDiagnostic::NoSuchField(d) => handlers::no_such_field::no_such_field(&ctx, &d),\n+            AnyDiagnostic::RemoveThisSemicolon(d) => handlers::remove_this_semicolon::remove_this_semicolon(&ctx, &d),\n+            AnyDiagnostic::ReplaceFilterMapNextWithFindMap(d) => handlers::replace_filter_map_next_with_find_map::replace_filter_map_next_with_find_map(&ctx, &d),\n+            AnyDiagnostic::UnimplementedBuiltinMacro(d) => handlers::unimplemented_builtin_macro::unimplemented_builtin_macro(&ctx, &d),\n+            AnyDiagnostic::UnresolvedExternCrate(d) => handlers::unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n+            AnyDiagnostic::UnresolvedImport(d) => handlers::unresolved_import::unresolved_import(&ctx, &d),\n+            AnyDiagnostic::UnresolvedMacroCall(d) => handlers::unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n+            AnyDiagnostic::UnresolvedModule(d) => handlers::unresolved_module::unresolved_module(&ctx, &d),\n+            AnyDiagnostic::UnresolvedProcMacro(d) => handlers::unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n+\n+            AnyDiagnostic::InactiveCode(d) => match handlers::inactive_code::inactive_code(&ctx, &d) {\n                 Some(it) => it,\n                 None => continue,\n             }"}]}