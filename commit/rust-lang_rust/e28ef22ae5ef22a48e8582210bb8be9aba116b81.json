{"sha": "e28ef22ae5ef22a48e8582210bb8be9aba116b81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOGVmMjJhZTVlZjIyYTQ4ZTg1ODIyMTBiYjhiZTlhYmExMTZiODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-11T21:42:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-11T21:42:32Z"}, "message": "Auto merge of #49875 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #49525 (Use sort_by_cached_key where appropriate)\n - #49575 (Stabilize `Option::filter`.)\n - #49614 (in which the non-shorthand patterns lint keeps its own counsel in macros)\n - #49665 (Small nits to make couple of tests pass on mips targets.)\n - #49781 (add regression test for #16223 (NLL): use of collaterally moved value)\n - #49795 (Properly look for uninhabitedness of variants in niche-filling check)\n - #49809 (Stop emitting color codes on TERM=dumb)\n - #49856 (Do not uppercase-lint #[no_mangle] statics)\n - #49863 (fixed typo)\n - #49857 (Fix \"fp\" target feature for AArch64)\n - #49849 (Add --enable-debug flag to musl CI build script)\n - #49734 (proc_macro: Generalize `FromIterator` impl)\n - #49730 (Fix ICE with impl Trait)\n - #48270 (Replace `structurally_resolved_type` in casts check.)\n\nFailed merges:", "tree": {"sha": "889e41667449d0a802493b0fd5ded94e9b0b2b9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/889e41667449d0a802493b0fd5ded94e9b0b2b9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28ef22ae5ef22a48e8582210bb8be9aba116b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28ef22ae5ef22a48e8582210bb8be9aba116b81", "html_url": "https://github.com/rust-lang/rust/commit/e28ef22ae5ef22a48e8582210bb8be9aba116b81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28ef22ae5ef22a48e8582210bb8be9aba116b81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad610bed83f43158892222a71336bdcaa167909a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad610bed83f43158892222a71336bdcaa167909a", "html_url": "https://github.com/rust-lang/rust/commit/ad610bed83f43158892222a71336bdcaa167909a"}, {"sha": "9f6e5ae0246333115c53d059a17f5da92988f3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6e5ae0246333115c53d059a17f5da92988f3bf", "html_url": "https://github.com/rust-lang/rust/commit/9f6e5ae0246333115c53d059a17f5da92988f3bf"}], "stats": {"total": 307, "additions": 243, "deletions": 64}, "files": [{"sha": "b411b19bd53d21047bd4f93956195070b1e9779c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -1167,7 +1167,9 @@ pub fn stream_cargo(\n     cargo.arg(\"--message-format\").arg(\"json\")\n          .stdout(Stdio::piped());\n \n-    if stderr_isatty() && build.ci_env == CiEnv::None {\n+    if stderr_isatty() && build.ci_env == CiEnv::None &&\n+        // if the terminal is reported as dumb, then we don't want to enable color for rustc\n+        env::var_os(\"TERM\").map(|t| t != *\"dumb\").unwrap_or(true) {\n         // since we pass message-format=json to cargo, we need to tell the rustc\n         // wrapper to give us colored output if necessary. This is because we\n         // only want Cargo's JSON output, not rustcs."}, {"sha": "f87ba8fe4e60e150613178a8157b170f33fc398c", "filename": "src/ci/docker/scripts/musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -40,7 +40,7 @@ if [ ! -d $MUSL ]; then\n fi\n \n cd $MUSL\n-./configure --disable-shared --prefix=/musl-$TAG $@\n+./configure --enable-optimize --enable-debug --disable-shared --prefix=/musl-$TAG $@\n if [ \"$TAG\" = \"i586\" -o \"$TAG\" = \"i686\" ]; then\n   hide_output make -j$(nproc) AR=ar RANLIB=ranlib\n else"}, {"sha": "56c53fca62cb1be2ffaf0da408e664ce1e27ab77", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -1400,6 +1400,7 @@ impl<T> [T] {\n         let sz_usize = mem::size_of::<(K, usize)>();\n \n         let len = self.len();\n+        if len < 2 { return }\n         if sz_u8  < sz_u16   && len <= ( u8::MAX as usize) { return sort_by_key!( u8, self, f) }\n         if sz_u16 < sz_u32   && len <= (u16::MAX as usize) { return sort_by_key!(u16, self, f) }\n         if sz_u32 < sz_usize && len <= (u32::MAX as usize) { return sort_by_key!(u32, self, f) }"}, {"sha": "0dfdabee03182e18ab9553b0473a84eb27962f03", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -628,8 +628,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// #![feature(option_filter)]\n-    ///\n     /// fn is_even(n: &i32) -> bool {\n     ///     n % 2 == 0\n     /// }\n@@ -639,7 +637,7 @@ impl<T> Option<T> {\n     /// assert_eq!(Some(4).filter(is_even), Some(4));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_filter\", issue = \"45860\")]\n+    #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {\n         if let Some(x) = self {\n             if predicate(&x) {"}, {"sha": "e171216523a1e3a6dd1ea35bf6c06d20868045d8", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -140,9 +140,16 @@ impl From<TokenTree> for TokenStream {\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n impl iter::FromIterator<TokenTree> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenTree>>(trees: I) -> Self {\n+        trees.into_iter().map(TokenStream::from).collect()\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl iter::FromIterator<TokenStream> for TokenStream {\n+    fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {\n         let mut builder = tokenstream::TokenStreamBuilder::new();\n-        for tree in trees {\n-            builder.push(tree.to_internal());\n+        for stream in streams {\n+            builder.push(stream.0);\n         }\n         TokenStream(builder.build())\n     }"}, {"sha": "725ea9734abf4b2540dee577c378dd90ebe4d334", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -533,10 +533,14 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ReverseMapper<'cx, 'gcx, 'tcx>\n         match r {\n             // ignore bound regions that appear in the type (e.g., this\n             // would ignore `'r` in a type like `for<'r> fn(&'r u32)`.\n-            ty::ReLateBound(..) => return r,\n+            ty::ReLateBound(..) |\n \n             // ignore `'static`, as that can appear anywhere\n-            ty::ReStatic => return r,\n+            ty::ReStatic |\n+\n+            // ignore `ReScope`, as that can appear anywhere\n+            // See `src/test/run-pass/issue-49556.rs` for example.\n+            ty::ReScope(..) => return r,\n \n             _ => { }\n         }"}, {"sha": "8d314e251972d140e1b173b931b1b71d306b5a40", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 self.msg_span_from_early_bound_and_free_regions(region)\n             },\n             ty::ReStatic => (\"the static lifetime\".to_owned(), None),\n-            _ => bug!(),\n+            _ => bug!(\"{:?}\", region),\n         }\n     }\n "}, {"sha": "a2cefe488c68ac53767b9ec0727a3750d1a10779", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -60,6 +60,7 @@\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(trace_macros)]"}, {"sha": "41334a37dbef65050cecff58c463f781c1f0db4e", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -401,7 +401,7 @@ pub fn used_crates(tcx: TyCtxt, prefer: LinkagePreference)\n         .collect::<Vec<_>>();\n     let mut ordering = tcx.postorder_cnums(LOCAL_CRATE);\n     Lrc::make_mut(&mut ordering).reverse();\n-    libs.sort_by_key(|&(a, _)| {\n+    libs.sort_by_cached_key(|&(a, _)| {\n         ordering.iter().position(|x| *x == a)\n     });\n     libs"}, {"sha": "3ba79d91964abb0a653cb4a434877a5d7af3ee83", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -20,7 +20,6 @@ use syntax::ast;\n pub enum IntTy {\n     U(ast::UintTy),\n     I,\n-    Ivar,\n     CEnum,\n     Bool,\n     Char\n@@ -64,7 +63,7 @@ impl<'tcx> CastTy<'tcx> {\n             ty::TyBool => Some(CastTy::Int(IntTy::Bool)),\n             ty::TyChar => Some(CastTy::Int(IntTy::Char)),\n             ty::TyInt(_) => Some(CastTy::Int(IntTy::I)),\n-            ty::TyInfer(ty::InferTy::IntVar(_)) => Some(CastTy::Int(IntTy::Ivar)),\n+            ty::TyInfer(ty::InferTy::IntVar(_)) => Some(CastTy::Int(IntTy::I)),\n             ty::TyInfer(ty::InferTy::FloatVar(_)) => Some(CastTy::Float),\n             ty::TyUint(u) => Some(CastTy::Int(IntTy::U(u))),\n             ty::TyFloat(_) => Some(CastTy::Float),"}, {"sha": "16d28ff4266ffb391c4bfba4865ce6f3ea7a9f7f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -1471,10 +1471,10 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n                     // Find one non-ZST variant.\n                     'variants: for (v, fields) in variants.iter().enumerate() {\n+                        if fields.iter().any(|f| f.abi == Abi::Uninhabited) {\n+                            continue 'variants;\n+                        }\n                         for f in fields {\n-                            if f.abi == Abi::Uninhabited {\n-                                continue 'variants;\n-                            }\n                             if !f.is_zst() {\n                                 if dataful_variant.is_none() {\n                                     dataful_variant = Some(v);"}, {"sha": "3dec84d174dd8d922badd5cd17625b8a14987639", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -22,6 +22,7 @@\n #![cfg_attr(unix, feature(libc))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(set_stdio)]\n #![feature(rustc_stack_internals)]\n \n@@ -82,7 +83,6 @@ use rustc_trans_utils::trans_crate::TransCrate;\n use serialize::json::ToJson;\n \n use std::any::Any;\n-use std::cmp::Ordering::Equal;\n use std::cmp::max;\n use std::default::Default;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n@@ -1176,13 +1176,8 @@ Available lint options:\n \n     fn sort_lints(sess: &Session, lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n         let mut lints: Vec<_> = lints.into_iter().map(|(x, _)| x).collect();\n-        lints.sort_by(|x: &&Lint, y: &&Lint| {\n-            match x.default_level(sess).cmp(&y.default_level(sess)) {\n-                // The sort doesn't case-fold but it's doubtful we care.\n-                Equal => x.name.cmp(y.name),\n-                r => r,\n-            }\n-        });\n+        // The sort doesn't case-fold but it's doubtful we care.\n+        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess), x.name));\n         lints\n     }\n "}, {"sha": "463ec4796e8b628e37a76d96b4f90dcba1ee93bb", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -368,6 +368,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemStatic(..) => {\n+                if attr::find_by_name(&it.attrs, \"no_mangle\").is_some() {\n+                    return;\n+                }\n                 NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", it.name, it.span);\n             }\n             hir::ItemConst(..) => {"}, {"sha": "48e9cc498dceb8b44ceba28e9abaf0202e8b3bd8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -173,6 +173,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                 }\n                 if let PatKind::Binding(_, _, name, None) = fieldpat.node.pat.node {\n                     if name.node == fieldpat.node.name {\n+                        if let Some(_) = fieldpat.span.ctxt().outer().expn_info() {\n+                            // Don't lint if this is a macro expansion: macro authors\n+                            // shouldn't have to worry about this kind of style issue\n+                            // (Issue #49588)\n+                            return;\n+                        }\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n                                      fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant\","}, {"sha": "e40a3057a95cf903d218b941a3edbd2a0d50d5a7", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -1414,15 +1414,15 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();\n \n         // Bring everything into deterministic order for hashing\n-        all_impls.sort_unstable_by_key(|&(trait_def_id, _)| {\n+        all_impls.sort_by_cached_key(|&(trait_def_id, _)| {\n             tcx.def_path_hash(trait_def_id)\n         });\n \n         let all_impls: Vec<_> = all_impls\n             .into_iter()\n             .map(|(trait_def_id, mut impls)| {\n                 // Bring everything into deterministic order for hashing\n-                impls.sort_unstable_by_key(|&def_index| {\n+                impls.sort_by_cached_key(|&def_index| {\n                     tcx.hir.definitions().def_path_hash(def_index)\n                 });\n "}, {"sha": "cbbc9d74228de9e8bf9de8c7d262cec33aefd7ed", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -20,6 +20,7 @@\n #![feature(macro_lifetime_matcher)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(specialization)]\n #![feature(rustc_private)]\n "}, {"sha": "fe440a56ea060c4a228e8d43dc9d74dd53ecaa15", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -15,6 +15,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n */\n \n #![feature(slice_patterns)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(from_ref)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "f29f86af4aba73e6fb31b5d13f3636a3a622f14e", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -112,11 +112,11 @@ use rustc::ty::{self, TyCtxt, InstanceDef};\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use std::collections::hash_map::Entry;\n+use std::cmp;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use rustc::mir::mono::MonoItem;\n use monomorphize::item::{MonoItemExt, InstantiationMode};\n-use core::usize;\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -189,11 +189,9 @@ pub trait CodegenUnitExt<'tcx> {\n             }, item.symbol_name(tcx))\n         }\n \n-        let items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n-        let mut items : Vec<_> = items.iter()\n-            .map(|il| (il, item_sort_key(tcx, il.0))).collect();\n-        items.sort_by(|&(_, ref key1), &(_, ref key2)| key1.cmp(key2));\n-        items.into_iter().map(|(&item_linkage, _)| item_linkage).collect()\n+        let mut items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n+        items.sort_by_cached_key(|&(i, _)| item_sort_key(tcx, i));\n+        items\n     }\n }\n \n@@ -509,7 +507,7 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n     // Merge the two smallest codegen units until the target size is reached.\n     while codegen_units.len() > target_cgu_count {\n         // Sort small cgus to the back\n-        codegen_units.sort_by_key(|cgu| usize::MAX - cgu.size_estimate());\n+        codegen_units.sort_by_cached_key(|cgu| cmp::Reverse(cgu.size_estimate()));\n         let mut smallest = codegen_units.pop().unwrap();\n         let second_smallest = codegen_units.last_mut().unwrap();\n "}, {"sha": "d32d853c18bf5d45f1e767c1bdaaeb1e732a3d56", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -13,6 +13,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n \n #[macro_use]\n extern crate log;\n@@ -1149,13 +1150,9 @@ impl<'a> ModuleData<'a> {\n \n     fn for_each_child_stable<F: FnMut(Ident, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n         let resolutions = self.resolutions.borrow();\n-        let mut resolutions = resolutions.iter().map(|(&(ident, ns), &resolution)| {\n-                                                    // Pre-compute keys for sorting\n-                                                    (ident.name.as_str(), ns, ident, resolution)\n-                                                })\n-                                                .collect::<Vec<_>>();\n-        resolutions.sort_unstable_by_key(|&(str, ns, ..)| (str, ns));\n-        for &(_, ns, ident, resolution) in resolutions.iter() {\n+        let mut resolutions = resolutions.iter().collect::<Vec<_>>();\n+        resolutions.sort_by_cached_key(|&(&(ident, ns), _)| (ident.name.as_str(), ns));\n+        for &(&(ident, ns), &resolution) in resolutions.iter() {\n             resolution.borrow().binding.map(|binding| f(ident, ns, binding));\n         }\n     }\n@@ -3340,7 +3337,9 @@ impl<'a> Resolver<'a> {\n                         let is_mod = |def| match def { Def::Mod(..) => true, _ => false };\n                         let mut candidates =\n                             self.lookup_import_candidates(name, TypeNS, is_mod);\n-                        candidates.sort_by_key(|c| (c.path.segments.len(), c.path.to_string()));\n+                        candidates.sort_by_cached_key(|c| {\n+                            (c.path.segments.len(), c.path.to_string())\n+                        });\n                         if let Some(candidate) = candidates.get(0) {\n                             format!(\"Did you mean `{}`?\", candidate.path)\n                         } else {\n@@ -3578,7 +3577,7 @@ impl<'a> Resolver<'a> {\n \n         let name = path[path.len() - 1].name;\n         // Make sure error reporting is deterministic.\n-        names.sort_by_key(|name| name.as_str());\n+        names.sort_by_cached_key(|name| name.as_str());\n         match find_best_match_for_name(names.iter(), &name.as_str(), None) {\n             Some(found) if found != name => Some(found),\n             _ => None,"}, {"sha": "09aba830d050de149bb21d02830a51d910a49495", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -82,7 +82,8 @@ use std::ffi::CString;\n use std::str;\n use std::sync::Arc;\n use std::time::{Instant, Duration};\n-use std::{i32, usize};\n+use std::i32;\n+use std::cmp;\n use std::sync::mpsc;\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n@@ -830,7 +831,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // a bit more efficiently.\n     let codegen_units = {\n         let mut codegen_units = codegen_units;\n-        codegen_units.sort_by_key(|cgu| usize::MAX - cgu.size_estimate());\n+        codegen_units.sort_by_cached_key(|cgu| cmp::Reverse(cgu.size_estimate()));\n         codegen_units\n     };\n "}, {"sha": "a38d51e754670dd96d8d4cb55cac1fe572d0b493", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -26,6 +26,7 @@\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]\n #![feature(underscore_lifetimes)]"}, {"sha": "ad128516a3af3f69ad9fd2cc6f48109c541cc1c1", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -134,6 +134,7 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n         (\"x86\", \"pclmulqdq\") => \"pclmul\",\n         (\"x86\", \"rdrand\") => \"rdrnd\",\n         (\"x86\", \"bmi1\") => \"bmi\",\n+        (\"aarch64\", \"fp\") => \"fp-armv8\",\n         (\"aarch64\", \"fp16\") => \"fullfp16\",\n         (_, s) => s,\n     }"}, {"sha": "734d72584da9b2c629e2e11b18ca356a16bb0a7a", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -486,11 +486,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     ty::TypeVariants::TyInfer(t) => {\n                         match t {\n                             ty::InferTy::IntVar(_) |\n-                            ty::InferTy::FloatVar(_) |\n-                            ty::InferTy::FreshIntTy(_) |\n-                            ty::InferTy::FreshFloatTy(_) => {\n-                                Err(CastError::NeedDeref)\n-                            }\n+                            ty::InferTy::FloatVar(_) => Err(CastError::NeedDeref),\n                             _ => Err(CastError::NeedViaPtr),\n                         }\n                     }"}, {"sha": "de5709566225c54cc595f7340155edbc9264fdf7", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -799,7 +799,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             .collect();\n \n         // sort them by the name so we have a stable result\n-        names.sort_by_key(|n| n.as_str());\n+        names.sort_by_cached_key(|n| n.as_str());\n         names\n     }\n "}, {"sha": "3a48e1806af2cad25b83d5037b35b192576b4673", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -76,11 +76,11 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(from_ref)]\n #![feature(exhaustive_patterns)]\n-#![feature(option_filter)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(dyn_trait)]\n \n #[macro_use] extern crate log;"}, {"sha": "888148352c70a46a26d432213771912302c6ad7d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -1437,9 +1437,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n     // involved (impls rarely have more than a few bounds) means that it\n     // shouldn't matter in practice.\n     fn unstable_debug_sort<T: Debug>(&self, vec: &mut Vec<T>) {\n-        vec.sort_unstable_by(|first, second| {\n-            format!(\"{:?}\", first).cmp(&format!(\"{:?}\", second))\n-        });\n+        vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n     fn is_fn_ty(&self, tcx: &TyCtxt, ty: &Type) -> bool {"}, {"sha": "b87777ac4b5c1b18894cf7329c8bec998ca2acee", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -19,6 +19,7 @@\n #![feature(box_syntax)]\n #![feature(fs_read_write)]\n #![feature(set_stdio)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(test)]\n #![feature(unicode)]\n #![feature(vec_remove_item)]"}, {"sha": "dbf2123fb5477a69c65c26867341ea86f527ac53", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -21,6 +21,7 @@\n \n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(slice_sort_by_cached_key)]\n #![feature(non_exhaustive)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]"}, {"sha": "027b24cbbdcd69cae1eea65576ef658fa368a4b4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -689,7 +689,7 @@ impl<'a> Parser<'a> {\n                 .chain(inedible.iter().map(|x| TokenType::Token(x.clone())))\n                 .chain(self.expected_tokens.iter().cloned())\n                 .collect::<Vec<_>>();\n-            expected.sort_by(|a, b| a.to_string().cmp(&b.to_string()));\n+            expected.sort_by_cached_key(|x| x.to_string());\n             expected.dedup();\n             let expect = tokens_to_string(&expected[..]);\n             let actual = self.this_token_to_string();"}, {"sha": "415ee6eb7eab8754834de460088b0ac260935313", "filename": "src/test/codegen/link_section.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink_section.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -15,8 +15,14 @@\n // CHECK: @VAR1 = constant <{ [4 x i8] }> <{ [4 x i8] c\"\\01\\00\\00\\00\" }>, section \".test_one\"\n #[no_mangle]\n #[link_section = \".test_one\"]\n+#[cfg(target_endian = \"little\")]\n pub static VAR1: u32 = 1;\n \n+#[no_mangle]\n+#[link_section = \".test_one\"]\n+#[cfg(target_endian = \"big\")]\n+pub static VAR1: u32 = 0x01000000;\n+\n pub enum E {\n     A(u32),\n     B(f32)"}, {"sha": "84cc24a00109f5eb7dadbd3dc5ddf770fe0b3fcd", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -16,4 +16,7 @@ static foo: isize = 1; //~ ERROR static variable `foo` should have an upper case\n static mut bar: isize = 1;\n         //~^ ERROR static variable `bar` should have an upper case name such as `BAR`\n \n+#[no_mangle]\n+pub static extern_foo: isize = 1; // OK, because #[no_mangle] supersedes the warning\n+\n fn main() { }"}, {"sha": "80fa5362a8be940c134ea9a112487991f03e805c", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -19,4 +19,9 @@ pub fn main() {\n     assert_eq!(i as u8 as i8, 'Q' as u8 as i8);\n     assert_eq!(0x51 as char, 'Q');\n     assert_eq!(0 as u32, false as u32);\n+\n+    // Test that `_` is correctly inferred.\n+    let x = &\"hello\";\n+    let mut y = x as *const _;\n+    y = 0 as *const _;\n }"}, {"sha": "70ccee99f664d835f61b5aa185f9af9fd84c60f3", "filename": "src/test/run-pass/issue-49556.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Fissue-49556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Fissue-49556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-49556.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn iter<'a>(data: &'a [usize]) -> impl Iterator<Item = usize> + 'a {\n+    data.iter()\n+        .map(\n+            |x| x // fn(&'a usize) -> &'(ReScope) usize\n+        )\n+        .map(\n+            |x| *x // fn(&'(ReScope) usize) -> usize\n+        )\n+}\n+\n+fn main() {\n+}"}, {"sha": "51b2b5a4f7c0f00e6e4f035e62d6c6baadf00010", "filename": "src/test/run-pass/issue-49588-non-shorthand-field-patterns-in-pattern-macro.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Fissue-49588-non-shorthand-field-patterns-in-pattern-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Fissue-49588-non-shorthand-field-patterns-in-pattern-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-49588-non-shorthand-field-patterns-in-pattern-macro.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(non_shorthand_field_patterns)]\n+\n+pub struct Value<A> { pub value: A }\n+\n+#[macro_export]\n+macro_rules! pat {\n+    ($a:pat) => {\n+        Value { value: $a }\n+    };\n+}\n+\n+fn main() {\n+    let pat!(value) = Value { value: () };\n+}"}, {"sha": "0bb18d8729a97d048bdce4fae8fba6cebb851f45", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -42,6 +42,12 @@ enum ReorderedEnum {\n     B(u8, u16, u8),\n }\n \n+enum NicheFilledEnumWithInhabitedVariant {\n+    A(&'static ()),\n+    B(&'static (), !),\n+    C,\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -67,4 +73,5 @@ pub fn main() {\n     assert_eq!(size_of::<e3>(), 4 as usize);\n     assert_eq!(size_of::<ReorderedStruct>(), 4);\n     assert_eq!(size_of::<ReorderedEnum>(), 6);\n+    assert_eq!(size_of::<NicheFilledEnumWithInhabitedVariant>(), size_of::<&'static ()>());\n }"}, {"sha": "055a169deda74da9b934a2fd8a7a030a2f49b6a6", "filename": "src/test/ui/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -12,6 +12,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-mips\n \n #![feature(asm)]\n "}, {"sha": "d9fd4b26c390015f2e284ac87a94f140743c70e7", "filename": "src/test/ui/asm-out-assign-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:29:9\n+  --> $DIR/asm-out-assign-imm.rs:30:9\n    |\n LL |     x = 1;\n    |     ----- first assignment to `x`"}, {"sha": "64fc3df30b98c3e787a6698889dc968262eb7ccb", "filename": "src/test/ui/nll/issue-16223.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-16223.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #16223: without NLL the `if let` construct together with\n+// the nested box-structure of `Root` causes an unwanted collateral move.\n+\n+// The exact error prevented here is:\n+//\n+// error[E0382]: use of collaterally moved value: `(root.boxed.rhs as SomeVariant::B).0`\n+//   --> src/main.rs:55:29\n+//    |\n+// 56 |         lhs: SomeVariant::A(a),\n+//    |                             - value moved here\n+// 57 |         rhs: SomeVariant::B(b),\n+//    |                             ^ value used here after move\n+//    |\n+//    = note: move occurs because the value has type `A`, which does not implement the `Copy` trait\n+\n+// must-compile-successfully\n+\n+#![feature(nll)]\n+#![feature(box_patterns)]\n+\n+struct Root {\n+    boxed: Box<SetOfVariants>,\n+}\n+\n+struct SetOfVariants {\n+    lhs: SomeVariant,\n+    rhs: SomeVariant,\n+}\n+\n+enum SomeVariant {\n+    A(A),\n+    B(B),\n+}\n+\n+struct A(String);\n+struct B(String);\n+\n+fn main() {\n+    let root = Root {\n+        boxed: Box::new(SetOfVariants {\n+            lhs: SomeVariant::A(A(String::from(\"This is A\"))),\n+            rhs: SomeVariant::B(B(String::from(\"This is B\"))),\n+        }),\n+    };\n+    if let box SetOfVariants {\n+        lhs: SomeVariant::A(a),\n+        rhs: SomeVariant::B(b),\n+    } = root.boxed\n+    {\n+        println!(\"a = {}\", a.0);\n+        println!(\"b = {}\", b.0);\n+    }\n+}"}, {"sha": "afcd402343b25b33d2e83d4c4c64a336cc027904", "filename": "src/test/ui/order-dependent-cast-inference.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Forder-dependent-cast-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Forder-dependent-cast-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // Tests case where inference fails due to the order in which casts are checked.\n+    // Ideally this would compile, see #48270.\n+    let x = &\"hello\";\n+    let mut y = 0 as *const _;\n+    //~^ ERROR cannot cast to a pointer of an unknown kind\n+    y = x as *const _;\n+}"}, {"sha": "556acc87cffaf14308fd2bf07f0bd47b61757146", "filename": "src/test/ui/order-dependent-cast-inference.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -0,0 +1,13 @@\n+error[E0641]: cannot cast to a pointer of an unknown kind\n+  --> $DIR/order-dependent-cast-inference.rs:15:17\n+   |\n+LL |     let mut y = 0 as *const _;\n+   |                 ^^^^^--------\n+   |                      |\n+   |                      help: consider giving more type information\n+   |\n+   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0641`."}, {"sha": "eb83ee724c785804d5f6332164ae28cdcbc57d39", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -12,6 +12,9 @@\n // ignore-aarch64\n // ignore-wasm\n // ignore-emscripten\n+// ignore-mips\n+// ignore-powerpc\n+// ignore-s390x\n \n #![feature(target_feature)]\n "}, {"sha": "b5e650eaf9ac4373acd8cb2284fa1c5665ef261b", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -1,35 +1,35 @@\n warning: #[target_feature = \"..\"] is deprecated and will eventually be removed, use #[target_feature(enable = \"..\")] instead\n-  --> $DIR/target-feature-wrong.rs:18:1\n+  --> $DIR/target-feature-wrong.rs:21:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/target-feature-wrong.rs:20:18\n+  --> $DIR/target-feature-wrong.rs:23:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^\n \n error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:22:18\n+  --> $DIR/target-feature-wrong.rs:25:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^\n \n error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:24:18\n+  --> $DIR/target-feature-wrong.rs:27:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^\n \n error: #[target_feature(..)] can only be applied to `unsafe` function\n-  --> $DIR/target-feature-wrong.rs:28:1\n+  --> $DIR/target-feature-wrong.rs:31:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: attribute should be applied to a function\n-  --> $DIR/target-feature-wrong.rs:32:1\n+  --> $DIR/target-feature-wrong.rs:35:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -38,7 +38,7 @@ LL | mod another {}\n    | -------------- not a function\n \n error: cannot use #[inline(always)] with #[target_feature]\n-  --> $DIR/target-feature-wrong.rs:36:1\n+  --> $DIR/target-feature-wrong.rs:39:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "94a6353ad24313edf183d2b8bcb28af22db15eb8", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ef22ae5ef22a48e8582210bb8be9aba116b81/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=e28ef22ae5ef22a48e8582210bb8be9aba116b81", "patch": "@@ -595,7 +595,7 @@ impl Config {\n     fn has_cfg_prefix(&self, line: &str, prefix: &str) -> bool {\n         // returns whether this line contains this prefix or not. For prefix\n         // \"ignore\", returns true if line says \"ignore-x86_64\", \"ignore-arch\",\n-        // \"ignore-andorid\" etc.\n+        // \"ignore-android\" etc.\n         line.starts_with(prefix) && line.as_bytes().get(prefix.len()) == Some(&b'-')\n     }\n "}]}