{"sha": "a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjIyZGM1YzY3YjA2YzllNmJhYzlkYWU5ODk5YWVkM2E0ZGE5YzE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-12T12:47:03Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Fix generics type parameter handling in miri", "tree": {"sha": "af2b713646414f70f775c10fb5947e5516ef81a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2b713646414f70f775c10fb5947e5516ef81a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "html_url": "https://github.com/rust-lang/rust/commit/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1", "html_url": "https://github.com/rust-lang/rust/commit/5b4e2b7fbc6fb97c09d61f9785a8555044df59c1"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "1da6d9e17402438e6138098354a75969a8ef8a10", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "patch": "@@ -616,10 +616,9 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ReverseMapper<'cx, 'gcx, 'tcx>\n                 // during trans.\n \n                 let generics = self.tcx.generics_of(def_id);\n-                let parent_len = generics.parent_count();\n                 let substs = self.tcx.mk_substs(substs.substs.iter().enumerate().map(\n                     |(index, &kind)| {\n-                        if index < parent_len {\n+                        if index < generics.parent_count {\n                             // Accommodate missing regions in the parent kinds...\n                             self.fold_kind_mapping_missing_regions_to_empty(kind)\n                         } else {"}, {"sha": "8acda182b976b4c165ba65f85de1ea59c0567508", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "patch": "@@ -252,7 +252,6 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         }\n \n         for def in &defs.params {\n-            assert_eq!(def.index() as usize, substs.len());\n             let param = match def {\n                 ty::GenericParam::Lifetime(ref lt) => {\n                     mk_region(lt, substs).into()\n@@ -265,6 +264,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                     mk_type(ty, substs).into()\n                 }\n             };\n+            assert_eq!(def.index() as usize, substs.len());\n             substs.push(param);\n         }\n     }"}, {"sha": "111783fff7e45d6932b142babe3d0340745cd54e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "patch": "@@ -184,7 +184,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n             // evaluate the promoted and replace the constant with the evaluated result\n             Literal::Promoted { index } => {\n                 let generics = self.tcx.generics_of(self.source.def_id);\n-                if generics.parent_types as usize + generics.types.len() > 0 {\n+                if generics.has_type_parameters(self.tcx) {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }\n@@ -295,7 +295,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     self.source.def_id\n                 };\n                 let generics = self.tcx.generics_of(def_id);\n-                if generics.parent_types as usize + generics.types.len() > 0 {\n+                if generics.has_type_parameters(self.tcx) {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }\n@@ -317,8 +317,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                     self.source.def_id\n                 };\n                 let generics = self.tcx.generics_of(def_id);\n-                let has_generics = generics.parent_types as usize + generics.types.len() > 0;\n-                if has_generics {\n+                if generics.has_type_parameters(self.tcx) {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }"}, {"sha": "39326713df2a13ed823dc5791959939d1aa0a275", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "patch": "@@ -280,7 +280,8 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     if def.is_phantom_data() {\n         let result = DtorckConstraint {\n             outlives: vec![],\n-            dtorck_types: vec![tcx.mk_param_from_def(&tcx.generics_of(def_id).types[0])],\n+            dtorck_types: vec![tcx.mk_param_from_def(&tcx.generics_of(def_id).types().next()\n+                .expect(\"should be at least one type parameter\"))],\n             overflows: vec![],\n         };\n         debug!(\"dtorck_constraint: {:?} => {:?}\", def, result);"}, {"sha": "c4a2d1798019d9e400638f1b2ab5036287077f71", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "patch": "@@ -117,7 +117,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }) => {\n                     let def_id = tcx.hir.local_def_id(node_id);\n                     let generics = tcx.generics_of(def_id);\n-                    if (generics.parent_types == 0 && generics.types.is_empty()) &&\n+                    if !generics.has_type_parameters(tcx) &&\n                         // Functions marked with #[inline] are only ever translated\n                         // with \"internal\" linkage and are never exported.\n                         !Instance::mono(tcx, def_id).def.requires_local(tcx) {"}, {"sha": "d5c4cfc8be7a9b0356fbf2d2dfaf3cc36dd6080a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "patch": "@@ -369,13 +369,13 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n \n     let generics = tcx.generics_of(def_id);\n     let is_our_default = |def: &ty::TypeParameterDef|\n-                            def.has_default && def.index >= generics.parent_count() as u32;\n+                            def.has_default && def.index >= generics.parent_count as u32;\n \n     // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`.\n     // For example this forbids the declaration:\n     // struct Foo<T = Vec<[u32]>> { .. }\n     // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n-    for d in generics.types.iter().cloned().filter(is_our_default).map(|p| p.def_id) {\n+    for d in generics.types().cloned().filter(is_our_default).map(|p| p.def_id) {\n         let ty = fcx.tcx.type_of(d);\n         // ignore dependent defaults -- that is, where the default of one type\n         // parameter includes another (e.g., <T, U = T>). In those cases, we can't"}, {"sha": "0a5830e5f86e94e630a22a792c53e84ab4c8cd77", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a9622dc5c67b06c9e6bac9dae9899aed3a4da9c1", "patch": "@@ -970,10 +970,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    .map(|param| (param.def_id, param.index))\n                                    .collect();\n \n-    let lifetimes: Vec<ty::GenericParam> =\n-        regions.into_iter().map(|lt| ty::GenericParam::Lifetime(lt));\n-    let types: Vec<ty::GenericParam> =\n-        types.into_iter().map(|ty| ty::GenericParam::Type(ty));\n+    let lifetimes = regions.into_iter().map(|lt| ty::GenericParam::Lifetime(lt));\n+    let types = types.into_iter().map(|ty| ty::GenericParam::Type(ty));\n     let params = lifetimes.chain(types).collect();\n \n     tcx.alloc_generics(ty::Generics {"}]}