{"sha": "8eae2d37072ad3f39a5fabae39652f09c77455e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYWUyZDM3MDcyYWQzZjM5YTVmYWJhZTM5NjUyZjA5Yzc3NDU1ZTQ=", "commit": {"author": {"name": "cemil", "email": "cemil.oten@gmail.com", "date": "2019-04-24T14:02:38Z"}, "committer": {"name": "cemil", "email": "cemil.oten@gmail.com", "date": "2019-04-25T10:06:20Z"}, "message": "Ignore unnecessary cast if inside macro", "tree": {"sha": "4c0a02a03ac863cc1cfa2a87a005e7d05faf5c79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0a02a03ac863cc1cfa2a87a005e7d05faf5c79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eae2d37072ad3f39a5fabae39652f09c77455e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eae2d37072ad3f39a5fabae39652f09c77455e4", "html_url": "https://github.com/rust-lang/rust/commit/8eae2d37072ad3f39a5fabae39652f09c77455e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eae2d37072ad3f39a5fabae39652f09c77455e4/comments", "author": {"login": "cemiloten", "id": 25157087, "node_id": "MDQ6VXNlcjI1MTU3MDg3", "avatar_url": "https://avatars.githubusercontent.com/u/25157087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cemiloten", "html_url": "https://github.com/cemiloten", "followers_url": "https://api.github.com/users/cemiloten/followers", "following_url": "https://api.github.com/users/cemiloten/following{/other_user}", "gists_url": "https://api.github.com/users/cemiloten/gists{/gist_id}", "starred_url": "https://api.github.com/users/cemiloten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cemiloten/subscriptions", "organizations_url": "https://api.github.com/users/cemiloten/orgs", "repos_url": "https://api.github.com/users/cemiloten/repos", "events_url": "https://api.github.com/users/cemiloten/events{/privacy}", "received_events_url": "https://api.github.com/users/cemiloten/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cemiloten", "id": 25157087, "node_id": "MDQ6VXNlcjI1MTU3MDg3", "avatar_url": "https://avatars.githubusercontent.com/u/25157087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cemiloten", "html_url": "https://github.com/cemiloten", "followers_url": "https://api.github.com/users/cemiloten/followers", "following_url": "https://api.github.com/users/cemiloten/following{/other_user}", "gists_url": "https://api.github.com/users/cemiloten/gists{/gist_id}", "starred_url": "https://api.github.com/users/cemiloten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cemiloten/subscriptions", "organizations_url": "https://api.github.com/users/cemiloten/orgs", "repos_url": "https://api.github.com/users/cemiloten/repos", "events_url": "https://api.github.com/users/cemiloten/events{/privacy}", "received_events_url": "https://api.github.com/users/cemiloten/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf0805614e1d0e115d6f0641dd4fcf2b40d3737", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf0805614e1d0e115d6f0641dd4fcf2b40d3737", "html_url": "https://github.com/rust-lang/rust/commit/bcf0805614e1d0e115d6f0641dd4fcf2b40d3737"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "d69e13534188231a52e4a701dd94d61b0227e560", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8eae2d37072ad3f39a5fabae39652f09c77455e4/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eae2d37072ad3f39a5fabae39652f09c77455e4/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=8eae2d37072ad3f39a5fabae39652f09c77455e4", "patch": "@@ -1110,6 +1110,9 @@ fn fp_ty_mantissa_nbits(typ: Ty<'_>) -> u32 {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if in_macro(expr.span) {\n+            return;\n+        }\n         if let ExprKind::Cast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);"}, {"sha": "16da099bd2115c3c7aac81bc6c46a6f01ae41b0a", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8eae2d37072ad3f39a5fabae39652f09c77455e4/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eae2d37072ad3f39a5fabae39652f09c77455e4/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=8eae2d37072ad3f39a5fabae39652f09c77455e4", "patch": "@@ -48,6 +48,18 @@ fn main() {\n     1f32 as f32;\n     false as bool;\n     &1i32 as &i32;\n+    // macro version\n+    macro_rules! foo {\n+        ($a:ident, $b:ident) => {\n+            pub fn $a() -> $b {\n+                1 as $b\n+            }\n+        };\n+    }\n+    foo!(a, i32);\n+    foo!(b, f32);\n+    foo!(c, f64);\n+\n     // casting integer literal to float is unnecessary\n     100 as f32;\n     100 as f64;"}, {"sha": "42232808c9bc549130e96dc259b41f789466e21a", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eae2d37072ad3f39a5fabae39652f09c77455e4/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eae2d37072ad3f39a5fabae39652f09c77455e4/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=8eae2d37072ad3f39a5fabae39652f09c77455e4", "patch": "@@ -159,19 +159,19 @@ LL |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n error: casting integer literal to f32 is unnecessary\n-  --> $DIR/cast.rs:52:5\n+  --> $DIR/cast.rs:64:5\n    |\n LL |     100 as f32;\n    |     ^^^^^^^^^^ help: try: `100_f32`\n \n error: casting integer literal to f64 is unnecessary\n-  --> $DIR/cast.rs:53:5\n+  --> $DIR/cast.rs:65:5\n    |\n LL |     100 as f64;\n    |     ^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to f64 is unnecessary\n-  --> $DIR/cast.rs:54:5\n+  --> $DIR/cast.rs:66:5\n    |\n LL |     100_i32 as f64;\n    |     ^^^^^^^^^^^^^^ help: try: `100_f64`"}]}