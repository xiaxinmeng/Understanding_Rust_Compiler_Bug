{"sha": "f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZDBhNDUyYmEwYjUwYjc5NmNiYmNjNDljYzZlMjVmMmIyOWEyNTY=", "commit": {"author": {"name": "RobbieClarken", "email": "robbie.clarken@gmail.com", "date": "2019-12-06T00:00:23Z"}, "committer": {"name": "RobbieClarken", "email": "robbie.clarken@gmail.com", "date": "2019-12-06T06:49:05Z"}, "message": "Add lint for pub fns returning a `Result` without documenting errors\n\nThe Rust Book recommends that functions that return a `Result` type have\na doc comment with an `# Errors` section describing the kind of errors\nthat can be returned\n(https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#commonly-used-sections).\nThis change adds a lint to enforce this. The lint is allow by default;\nit can be enabled with `#![warn(clippy::missing_errors_doc)]`.\n\nCloses #4854.", "tree": {"sha": "e95ee8f672a373bdcc2d399b10a22ba70e01747a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e95ee8f672a373bdcc2d399b10a22ba70e01747a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "html_url": "https://github.com/rust-lang/rust/commit/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/comments", "author": {"login": "RobbieClarken", "id": 663161, "node_id": "MDQ6VXNlcjY2MzE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/663161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobbieClarken", "html_url": "https://github.com/RobbieClarken", "followers_url": "https://api.github.com/users/RobbieClarken/followers", "following_url": "https://api.github.com/users/RobbieClarken/following{/other_user}", "gists_url": "https://api.github.com/users/RobbieClarken/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobbieClarken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobbieClarken/subscriptions", "organizations_url": "https://api.github.com/users/RobbieClarken/orgs", "repos_url": "https://api.github.com/users/RobbieClarken/repos", "events_url": "https://api.github.com/users/RobbieClarken/events{/privacy}", "received_events_url": "https://api.github.com/users/RobbieClarken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RobbieClarken", "id": 663161, "node_id": "MDQ6VXNlcjY2MzE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/663161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobbieClarken", "html_url": "https://github.com/RobbieClarken", "followers_url": "https://api.github.com/users/RobbieClarken/followers", "following_url": "https://api.github.com/users/RobbieClarken/following{/other_user}", "gists_url": "https://api.github.com/users/RobbieClarken/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobbieClarken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobbieClarken/subscriptions", "organizations_url": "https://api.github.com/users/RobbieClarken/orgs", "repos_url": "https://api.github.com/users/RobbieClarken/repos", "events_url": "https://api.github.com/users/RobbieClarken/events{/privacy}", "received_events_url": "https://api.github.com/users/RobbieClarken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff1607ea4afa596ca2d7d8519af3e2553e1f4129", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1607ea4afa596ca2d7d8519af3e2553e1f4129", "html_url": "https://github.com/rust-lang/rust/commit/ff1607ea4afa596ca2d7d8519af3e2553e1f4129"}], "stats": {"total": 249, "additions": 202, "deletions": 47}, "files": [{"sha": "a9448a57f7fda933ff56d40026b5524bf4f8af06", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "patch": "@@ -1092,6 +1092,7 @@ Released 2018-09-13\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n+[`missing_errors_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\n [`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes"}, {"sha": "97a7c97b49a2d87b2d50f35def04674bd4853491", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 338 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 339 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "8f8d8ad96bbee14a9eb714cc0d05c23fd40efa9e", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 92, "deletions": 45, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use crate::utils::{match_type, paths, return_ty, span_lint};\n use itertools::Itertools;\n use pulldown_cmark;\n use rustc::hir;\n@@ -8,7 +8,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_session::declare_tool_lint;\n use std::ops::Range;\n use syntax::ast::{AttrKind, Attribute};\n-use syntax::source_map::{BytePos, Span};\n+use syntax::source_map::{BytePos, MultiSpan, Span};\n use syntax_pos::Pos;\n use url::Url;\n \n@@ -45,7 +45,7 @@ declare_clippy_lint! {\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Examples**:\n+    /// **Examples:**\n     /// ```rust\n     ///# type Universe = ();\n     /// /// This function should really be documented\n@@ -70,6 +70,35 @@ declare_clippy_lint! {\n     \"`pub unsafe fn` without `# Safety` docs\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks the doc comments of publicly visible functions that\n+    /// return a `Result` type and warns if there is no `# Errors` section.\n+    ///\n+    /// **Why is this bad?** Documenting the type of errors that can be returned from a\n+    /// function can help callers write code to handle the errors appropriately.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Examples:**\n+    ///\n+    /// Since the following function returns a `Result` it has an `# Errors` section in\n+    /// its doc comment:\n+    ///\n+    /// ```rust\n+    ///# use std::io;\n+    /// /// # Errors\n+    /// ///\n+    /// /// Will return `Err` if `filename` does not exist or the user does not have\n+    /// /// permission to read it.\n+    /// pub fn read(filename: String) -> io::Result<String> {\n+    ///     unimplemented!();\n+    /// }\n+    /// ```\n+    pub MISSING_ERRORS_DOC,\n+    pedantic,\n+    \"`pub fn` returns `Result` without `# Errors` in doc comment\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `fn main() { .. }` in doctests\n     ///\n@@ -114,28 +143,18 @@ impl DocMarkdown {\n     }\n }\n \n-impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC, NEEDLESS_DOCTEST_MAIN]);\n+impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, NEEDLESS_DOCTEST_MAIN]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n     fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n         check_attrs(cx, &self.valid_idents, &krate.attrs);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n-        if check_attrs(cx, &self.valid_idents, &item.attrs) {\n-            return;\n-        }\n-        // no safety header\n+        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ..) => {\n-                if cx.access_levels.is_exported(item.hir_id) && sig.header.unsafety == hir::Unsafety::Unsafe {\n-                    span_lint(\n-                        cx,\n-                        MISSING_SAFETY_DOC,\n-                        item.span,\n-                        \"unsafe function's docs miss `# Safety` section\",\n-                    );\n-                }\n+                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n             },\n             hir::ItemKind::Impl(_, _, _, _, ref trait_ref, ..) => {\n                 self.in_trait_impl = trait_ref.is_some();\n@@ -151,40 +170,51 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n-        if check_attrs(cx, &self.valid_idents, &item.attrs) {\n-            return;\n-        }\n-        // no safety header\n+        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n-            if cx.access_levels.is_exported(item.hir_id) && sig.header.unsafety == hir::Unsafety::Unsafe {\n-                span_lint(\n-                    cx,\n-                    MISSING_SAFETY_DOC,\n-                    item.span,\n-                    \"unsafe function's docs miss `# Safety` section\",\n-                );\n-            }\n+            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n-        if check_attrs(cx, &self.valid_idents, &item.attrs) || self.in_trait_impl {\n+        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        if self.in_trait_impl {\n             return;\n         }\n-        // no safety header\n         if let hir::ImplItemKind::Method(ref sig, ..) = item.kind {\n-            if cx.access_levels.is_exported(item.hir_id) && sig.header.unsafety == hir::Unsafety::Unsafe {\n-                span_lint(\n-                    cx,\n-                    MISSING_SAFETY_DOC,\n-                    item.span,\n-                    \"unsafe function's docs miss `# Safety` section\",\n-                );\n-            }\n+            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n         }\n     }\n }\n \n+fn lint_for_missing_headers<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    hir_id: hir::HirId,\n+    span: impl Into<MultiSpan> + Copy,\n+    sig: &hir::FnSig,\n+    headers: DocHeaders,\n+) {\n+    if !cx.access_levels.is_exported(hir_id) {\n+        return; // Private functions do not require doc comments\n+    }\n+    if !headers.safety && sig.header.unsafety == hir::Unsafety::Unsafe {\n+        span_lint(\n+            cx,\n+            MISSING_SAFETY_DOC,\n+            span,\n+            \"unsafe function's docs miss `# Safety` section\",\n+        );\n+    }\n+    if !headers.errors && match_type(cx, return_ty(cx, hir_id), &paths::RESULT) {\n+        span_lint(\n+            cx,\n+            MISSING_ERRORS_DOC,\n+            span,\n+            \"docs for function returning `Result` missing `# Errors` section\",\n+        );\n+    }\n+}\n+\n /// Cleanup documentation decoration (`///` and such).\n ///\n /// We can't use `syntax::attr::AttributeMethods::with_desugared_doc` or\n@@ -243,7 +273,13 @@ pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(\n     panic!(\"not a doc-comment: {}\", comment);\n }\n \n-pub fn check_attrs<'a>(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> bool {\n+#[derive(Copy, Clone)]\n+struct DocHeaders {\n+    safety: bool,\n+    errors: bool,\n+}\n+\n+fn check_attrs<'a>(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> DocHeaders {\n     let mut doc = String::new();\n     let mut spans = vec![];\n \n@@ -255,7 +291,11 @@ pub fn check_attrs<'a>(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String\n             doc.push_str(&comment);\n         } else if attr.check_name(sym!(doc)) {\n             // ignore mix of sugared and non-sugared doc\n-            return true; // don't trigger the safety check\n+            // don't trigger the safety or errors check\n+            return DocHeaders {\n+                safety: true,\n+                errors: true,\n+            };\n         }\n     }\n \n@@ -267,7 +307,10 @@ pub fn check_attrs<'a>(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String\n     }\n \n     if doc.is_empty() {\n-        return false;\n+        return DocHeaders {\n+            safety: false,\n+            errors: false,\n+        };\n     }\n \n     let parser = pulldown_cmark::Parser::new(&doc).into_offset_iter();\n@@ -295,12 +338,15 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     valid_idents: &FxHashSet<String>,\n     events: Events,\n     spans: &[(usize, Span)],\n-) -> bool {\n+) -> DocHeaders {\n     // true if a safety header was found\n     use pulldown_cmark::Event::*;\n     use pulldown_cmark::Tag::*;\n \n-    let mut safety_header = false;\n+    let mut headers = DocHeaders {\n+        safety: false,\n+        errors: false,\n+    };\n     let mut in_code = false;\n     let mut in_link = None;\n     let mut in_heading = false;\n@@ -323,7 +369,8 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                     // text \"http://example.com\" by pulldown-cmark\n                     continue;\n                 }\n-                safety_header |= in_heading && text.trim() == \"Safety\";\n+                headers.safety |= in_heading && text.trim() == \"Safety\";\n+                headers.errors |= in_heading && text.trim() == \"Errors\";\n                 let index = match spans.binary_search_by(|c| c.0.cmp(&range.start)) {\n                     Ok(o) => o,\n                     Err(e) => e - 1,\n@@ -340,7 +387,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n             },\n         }\n     }\n-    safety_header\n+    headers\n }\n \n fn check_code(cx: &LateContext<'_, '_>, text: &str, span: Span) {"}, {"sha": "d14f946c8eb8b22160c5667a6a18384a0310cdda", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "patch": "@@ -488,6 +488,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &derive::DERIVE_HASH_XOR_EQ,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &doc::DOC_MARKDOWN,\n+        &doc::MISSING_ERRORS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n         &doc::NEEDLESS_DOCTEST_MAIN,\n         &double_comparison::DOUBLE_COMPARISONS,\n@@ -1013,6 +1014,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n         LintId::of(&doc::DOC_MARKDOWN),\n+        LintId::of(&doc::MISSING_ERRORS_DOC),\n         LintId::of(&empty_enum::EMPTY_ENUM),\n         LintId::of(&enum_glob_use::ENUM_GLOB_USE),\n         LintId::of(&enum_variants::MODULE_NAME_REPETITIONS),"}, {"sha": "1f1c24b2c30364443c1e8965eb106cb33f976d5e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 338] = [\n+pub const ALL_LINTS: [Lint; 339] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1127,6 +1127,13 @@ pub const ALL_LINTS: [Lint; 338] = [\n         deprecation: None,\n         module: \"missing_doc\",\n     },\n+    Lint {\n+        name: \"missing_errors_doc\",\n+        group: \"pedantic\",\n+        desc: \"`pub fn` returns `Result` without `# Errors` in doc comment\",\n+        deprecation: None,\n+        module: \"doc\",\n+    },\n     Lint {\n         name: \"missing_inline_in_public_items\",\n         group: \"restriction\","}, {"sha": "408cf573896a7e7f793b55ec0e00ce5d038a56c5", "filename": "tests/ui/doc_errors.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "patch": "@@ -0,0 +1,64 @@\n+#![warn(clippy::missing_errors_doc)]\n+\n+use std::io;\n+\n+pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n+/// This is not sufficiently documented.\n+pub fn pub_fn_returning_io_result() -> io::Result<()> {\n+    unimplemented!();\n+}\n+\n+/// # Errors\n+/// A description of the errors goes here.\n+pub fn pub_fn_with_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n+/// This function doesn't require the documentation because it is private\n+fn priv_fn_missing_errors_header() -> Result<(), ()> {\n+    unimplemented!();\n+}\n+\n+pub struct Struct1;\n+\n+impl Struct1 {\n+    /// This is not sufficiently documented.\n+    pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+\n+    /// # Errors\n+    /// A description of the errors goes here.\n+    pub fn pub_method_with_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+\n+    /// This function doesn't require the documentation because it is private.\n+    fn priv_method_missing_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+}\n+\n+pub trait Trait1 {\n+    /// This is not sufficiently documented.\n+    fn trait_method_missing_errors_header() -> Result<(), ()>;\n+\n+    /// # Errors\n+    /// A description of the errors goes here.\n+    fn trait_method_with_errors_header() -> Result<(), ()>;\n+}\n+\n+impl Trait1 for Struct1 {\n+    fn trait_method_missing_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+\n+    fn trait_method_with_errors_header() -> Result<(), ()> {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f1d321cf909cc2d6e0a34cc61e875a21e03dc2d5", "filename": "tests/ui/doc_errors.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/tests%2Fui%2Fdoc_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256/tests%2Fui%2Fdoc_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.stderr?ref=f5d0a452ba0b50b796cbbcc49cc6e25f2b29a256", "patch": "@@ -0,0 +1,34 @@\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:5:1\n+   |\n+LL | / pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n+LL | |     unimplemented!();\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::missing-errors-doc` implied by `-D warnings`\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:10:1\n+   |\n+LL | / pub fn pub_fn_returning_io_result() -> io::Result<()> {\n+LL | |     unimplemented!();\n+LL | | }\n+   | |_^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:29:5\n+   |\n+LL | /     pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+\n+error: docs for function returning `Result` missing `# Errors` section\n+  --> $DIR/doc_errors.rs:47:5\n+   |\n+LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}