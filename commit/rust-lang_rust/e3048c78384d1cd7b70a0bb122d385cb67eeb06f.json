{"sha": "e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "node_id": "C_kwDOAAsO6NoAKGUzMDQ4Yzc4Mzg0ZDFjZDdiNzBhMGJiMTIyZDM4NWNiNjdlZWIwNmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T10:11:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T10:11:05Z"}, "message": "Rollup merge of #104012 - chenyukang:yukang/fix-103882-deli-indentation, r=petrochenkov\n\nImprove unexpected close and mismatch delimiter hint in TokenTreesReader\n\nFixes #103882\nFixes #68987\nFixes #69259\n\nThe inner indentation mismatching will be covered by outer block, the new added function `report_error_prone_delim_block` will find out the error prone candidates for reporting.", "tree": {"sha": "5f7b411e5d184259778d5f14a1d00bfb6b159ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f7b411e5d184259778d5f14a1d00bfb6b159ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1PS5CRBK7hj4Ov3rIwAAGhcIAHd7/HicNafgQAvgnpELVzEJ\nn0KInKE9+dMup3krgvYZbeK4L5ZfJgWpFhejH0sQ1OhpS7uc/cvP31lz9lJ/umou\n0+V5X3PgUSDHwYadsaL6vORDOoGjuvtp6g2UorgFBM9Qsrgs/VP9XG+H+RV7gM8V\nrkeLIu6QwfyU/pNVP1UkmV9rDj1VoK1ZO+wQ3mj/QeddnuQhQ1vZ9i5+FzsA3J/Z\n3akdpoEmseTRMpoCikNJvWGLYNLwPbALcvnWRszNoY5YJutoBvNI1PxaudV/ZYtL\npmmRxLuktbHdO36W6F1gUKUwmJzYiNBPbAmcALEN1i76lhqM/0CVhEXwnEFsO24=\n=NETj\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f7b411e5d184259778d5f14a1d00bfb6b159ec7\nparent 226b2496fc3ef997fa1cccf84259539203f82375\nparent cd233231aa215b7a5642e6a80869959b375e0725\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674900665 +0100\ncommitter GitHub <noreply@github.com> 1674900665 +0100\n\nRollup merge of #104012 - chenyukang:yukang/fix-103882-deli-indentation, r=petrochenkov\n\nImprove unexpected close and mismatch delimiter hint in TokenTreesReader\n\nFixes #103882\nFixes #68987\nFixes #69259\n\nThe inner indentation mismatching will be covered by outer block, the new added function `report_error_prone_delim_block` will find out the error prone candidates for reporting.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "html_url": "https://github.com/rust-lang/rust/commit/e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226b2496fc3ef997fa1cccf84259539203f82375", "url": "https://api.github.com/repos/rust-lang/rust/commits/226b2496fc3ef997fa1cccf84259539203f82375", "html_url": "https://github.com/rust-lang/rust/commit/226b2496fc3ef997fa1cccf84259539203f82375"}, {"sha": "cd233231aa215b7a5642e6a80869959b375e0725", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd233231aa215b7a5642e6a80869959b375e0725", "html_url": "https://github.com/rust-lang/rust/commit/cd233231aa215b7a5642e6a80869959b375e0725"}], "stats": {"total": 514, "additions": 408, "deletions": 106}, "files": [{"sha": "386bf026bb4afcefccc134408bc16918c3850844", "filename": "compiler/rustc_parse/src/lexer/diagnostics.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,119 @@\n+use super::UnmatchedBrace;\n+use rustc_ast::token::Delimiter;\n+use rustc_errors::Diagnostic;\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::Span;\n+\n+#[derive(Default)]\n+pub struct TokenTreeDiagInfo {\n+    /// Stack of open delimiters and their spans. Used for error message.\n+    pub open_braces: Vec<(Delimiter, Span)>,\n+    pub unmatched_braces: Vec<UnmatchedBrace>,\n+\n+    /// Used only for error recovery when arriving to EOF with mismatched braces.\n+    pub last_unclosed_found_span: Option<Span>,\n+\n+    /// Collect empty block spans that might have been auto-inserted by editors.\n+    pub empty_block_spans: Vec<Span>,\n+\n+    /// Collect the spans of braces (Open, Close). Used only\n+    /// for detecting if blocks are empty and only braces.\n+    pub matching_block_spans: Vec<(Span, Span)>,\n+}\n+\n+pub fn same_identation_level(sm: &SourceMap, open_sp: Span, close_sp: Span) -> bool {\n+    match (sm.span_to_margin(open_sp), sm.span_to_margin(close_sp)) {\n+        (Some(open_padding), Some(close_padding)) => open_padding == close_padding,\n+        _ => false,\n+    }\n+}\n+\n+// When we get a `)` or `]` for `{`, we should emit help message here\n+// it's more friendly compared to report `unmatched error` in later phase\n+pub fn report_missing_open_delim(\n+    err: &mut Diagnostic,\n+    unmatched_braces: &[UnmatchedBrace],\n+) -> bool {\n+    let mut reported_missing_open = false;\n+    for unmatch_brace in unmatched_braces.iter() {\n+        if let Some(delim) = unmatch_brace.found_delim\n+            && matches!(delim, Delimiter::Parenthesis | Delimiter::Bracket)\n+        {\n+            let missed_open = match delim {\n+                Delimiter::Parenthesis => \"(\",\n+                Delimiter::Bracket => \"[\",\n+                _ => unreachable!(),\n+            };\n+            err.span_label(\n+                unmatch_brace.found_span.shrink_to_lo(),\n+                format!(\"missing open `{}` for this delimiter\", missed_open),\n+            );\n+            reported_missing_open = true;\n+        }\n+    }\n+    reported_missing_open\n+}\n+\n+pub fn report_suspicious_mismatch_block(\n+    err: &mut Diagnostic,\n+    diag_info: &TokenTreeDiagInfo,\n+    sm: &SourceMap,\n+    delim: Delimiter,\n+) {\n+    if report_missing_open_delim(err, &diag_info.unmatched_braces) {\n+        return;\n+    }\n+\n+    let mut matched_spans: Vec<(Span, bool)> = diag_info\n+        .matching_block_spans\n+        .iter()\n+        .map(|&(open, close)| (open.with_hi(close.lo()), same_identation_level(sm, open, close)))\n+        .collect();\n+\n+    // sort by `lo`, so the large block spans in the front\n+    matched_spans.sort_by(|a, b| a.0.lo().cmp(&b.0.lo()));\n+\n+    // We use larger block whose identation is well to cover those inner mismatched blocks\n+    // O(N^2) here, but we are on error reporting path, so it is fine\n+    for i in 0..matched_spans.len() {\n+        let (block_span, same_ident) = matched_spans[i];\n+        if same_ident {\n+            for j in i + 1..matched_spans.len() {\n+                let (inner_block, inner_same_ident) = matched_spans[j];\n+                if block_span.contains(inner_block) && !inner_same_ident {\n+                    matched_spans[j] = (inner_block, true);\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find the inner-most span candidate for final report\n+    let candidate_span =\n+        matched_spans.into_iter().rev().find(|&(_, same_ident)| !same_ident).map(|(span, _)| span);\n+\n+    if let Some(block_span) = candidate_span {\n+        err.span_label(block_span.shrink_to_lo(), \"this delimiter might not be properly closed...\");\n+        err.span_label(\n+            block_span.shrink_to_hi(),\n+            \"...as it matches this but it has different indentation\",\n+        );\n+\n+        // If there is a empty block in the mismatched span, note it\n+        if delim == Delimiter::Brace {\n+            for span in diag_info.empty_block_spans.iter() {\n+                if block_span.contains(*span) {\n+                    err.span_label(*span, \"block is empty, you might have not meant to close it\");\n+                    break;\n+                }\n+            }\n+        }\n+    } else {\n+        // If there is no suspicious span, give the last properly closed block may help\n+        if let Some(parent) = diag_info.matching_block_spans.last()\n+            && diag_info.open_braces.last().is_none()\n+            && diag_info.empty_block_spans.iter().all(|&sp| sp != parent.0.to(parent.1)) {\n+                err.span_label(parent.0, \"this opening brace...\");\n+                err.span_label(parent.1, \"...matches this closing brace\");\n+        }\n+    }\n+}"}, {"sha": "e957224a03377805bbfb7fa666d60df3c29cb607", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -17,6 +17,7 @@ use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{edition::Edition, BytePos, Pos, Span};\n \n+mod diagnostics;\n mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;"}, {"sha": "0de8f79112c654033ef64b8efe0441ff0cb152cf", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 42, "deletions": 87, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -1,29 +1,18 @@\n+use super::diagnostics::report_suspicious_mismatch_block;\n+use super::diagnostics::same_identation_level;\n+use super::diagnostics::TokenTreeDiagInfo;\n use super::{StringReader, UnmatchedBrace};\n use rustc_ast::token::{self, Delimiter, Token};\n use rustc_ast::tokenstream::{DelimSpan, Spacing, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust::token_to_string;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{PErr, PResult};\n-use rustc_span::Span;\n \n pub(super) struct TokenTreesReader<'a> {\n     string_reader: StringReader<'a>,\n     /// The \"next\" token, which has been obtained from the `StringReader` but\n     /// not yet handled by the `TokenTreesReader`.\n     token: Token,\n-    /// Stack of open delimiters and their spans. Used for error message.\n-    open_braces: Vec<(Delimiter, Span)>,\n-    unmatched_braces: Vec<UnmatchedBrace>,\n-    /// The type and spans for all braces\n-    ///\n-    /// Used only for error recovery when arriving to EOF with mismatched braces.\n-    matching_delim_spans: Vec<(Delimiter, Span, Span)>,\n-    last_unclosed_found_span: Option<Span>,\n-    /// Collect empty block spans that might have been auto-inserted by editors.\n-    last_delim_empty_block_spans: FxHashMap<Delimiter, Span>,\n-    /// Collect the spans of braces (Open, Close). Used only\n-    /// for detecting if blocks are empty and only braces.\n-    matching_block_spans: Vec<(Span, Span)>,\n+    diag_info: TokenTreeDiagInfo,\n }\n \n impl<'a> TokenTreesReader<'a> {\n@@ -33,15 +22,10 @@ impl<'a> TokenTreesReader<'a> {\n         let mut tt_reader = TokenTreesReader {\n             string_reader,\n             token: Token::dummy(),\n-            open_braces: Vec::new(),\n-            unmatched_braces: Vec::new(),\n-            matching_delim_spans: Vec::new(),\n-            last_unclosed_found_span: None,\n-            last_delim_empty_block_spans: FxHashMap::default(),\n-            matching_block_spans: Vec::new(),\n+            diag_info: TokenTreeDiagInfo::default(),\n         };\n         let res = tt_reader.parse_token_trees(/* is_delimited */ false);\n-        (res, tt_reader.unmatched_braces)\n+        (res, tt_reader.diag_info.unmatched_braces)\n     }\n \n     // Parse a stream of tokens into a list of `TokenTree`s.\n@@ -92,9 +76,9 @@ impl<'a> TokenTreesReader<'a> {\n     fn eof_err(&mut self) -> PErr<'a> {\n         let msg = \"this file contains an unclosed delimiter\";\n         let mut err = self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);\n-        for &(_, sp) in &self.open_braces {\n+        for &(_, sp) in &self.diag_info.open_braces {\n             err.span_label(sp, \"unclosed delimiter\");\n-            self.unmatched_braces.push(UnmatchedBrace {\n+            self.diag_info.unmatched_braces.push(UnmatchedBrace {\n                 expected_delim: Delimiter::Brace,\n                 found_delim: None,\n                 found_span: self.token.span,\n@@ -103,23 +87,13 @@ impl<'a> TokenTreesReader<'a> {\n             });\n         }\n \n-        if let Some((delim, _)) = self.open_braces.last() {\n-            if let Some((_, open_sp, close_sp)) =\n-                self.matching_delim_spans.iter().find(|(d, open_sp, close_sp)| {\n-                    let sm = self.string_reader.sess.source_map();\n-                    if let Some(close_padding) = sm.span_to_margin(*close_sp) {\n-                        if let Some(open_padding) = sm.span_to_margin(*open_sp) {\n-                            return delim == d && close_padding != open_padding;\n-                        }\n-                    }\n-                    false\n-                })\n-            // these are in reverse order as they get inserted on close, but\n-            {\n-                // we want the last open/first close\n-                err.span_label(*open_sp, \"this delimiter might not be properly closed...\");\n-                err.span_label(*close_sp, \"...as it matches this but it has different indentation\");\n-            }\n+        if let Some((delim, _)) = self.diag_info.open_braces.last() {\n+            report_suspicious_mismatch_block(\n+                &mut err,\n+                &self.diag_info,\n+                &self.string_reader.sess.source_map(),\n+                *delim,\n+            )\n         }\n         err\n     }\n@@ -128,7 +102,7 @@ impl<'a> TokenTreesReader<'a> {\n         // The span for beginning of the delimited section\n         let pre_span = self.token.span;\n \n-        self.open_braces.push((open_delim, self.token.span));\n+        self.diag_info.open_braces.push((open_delim, self.token.span));\n \n         // Parse the token trees within the delimiters.\n         // We stop at any delimiter so we can try to recover if the user\n@@ -137,35 +111,29 @@ impl<'a> TokenTreesReader<'a> {\n \n         // Expand to cover the entire delimited token tree\n         let delim_span = DelimSpan::from_pair(pre_span, self.token.span);\n+        let sm = self.string_reader.sess.source_map();\n \n         match self.token.kind {\n             // Correct delimiter.\n             token::CloseDelim(close_delim) if close_delim == open_delim => {\n-                let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();\n+                let (open_brace, open_brace_span) = self.diag_info.open_braces.pop().unwrap();\n                 let close_brace_span = self.token.span;\n \n-                if tts.is_empty() {\n+                if tts.is_empty() && close_delim == Delimiter::Brace {\n                     let empty_block_span = open_brace_span.to(close_brace_span);\n-                    let sm = self.string_reader.sess.source_map();\n                     if !sm.is_multiline(empty_block_span) {\n                         // Only track if the block is in the form of `{}`, otherwise it is\n                         // likely that it was written on purpose.\n-                        self.last_delim_empty_block_spans.insert(open_delim, empty_block_span);\n+                        self.diag_info.empty_block_spans.push(empty_block_span);\n                     }\n                 }\n \n-                //only add braces\n+                // only add braces\n                 if let (Delimiter::Brace, Delimiter::Brace) = (open_brace, open_delim) {\n-                    self.matching_block_spans.push((open_brace_span, close_brace_span));\n+                    // Add all the matching spans, we will sort by span later\n+                    self.diag_info.matching_block_spans.push((open_brace_span, close_brace_span));\n                 }\n \n-                if self.open_braces.is_empty() {\n-                    // Clear up these spans to avoid suggesting them as we've found\n-                    // properly matched delimiters so far for an entire block.\n-                    self.matching_delim_spans.clear();\n-                } else {\n-                    self.matching_delim_spans.push((open_brace, open_brace_span, close_brace_span));\n-                }\n                 // Move past the closing delimiter.\n                 self.token = self.string_reader.next_token().0;\n             }\n@@ -174,36 +142,33 @@ impl<'a> TokenTreesReader<'a> {\n                 let mut unclosed_delimiter = None;\n                 let mut candidate = None;\n \n-                if self.last_unclosed_found_span != Some(self.token.span) {\n+                if self.diag_info.last_unclosed_found_span != Some(self.token.span) {\n                     // do not complain about the same unclosed delimiter multiple times\n-                    self.last_unclosed_found_span = Some(self.token.span);\n+                    self.diag_info.last_unclosed_found_span = Some(self.token.span);\n                     // This is a conservative error: only report the last unclosed\n                     // delimiter. The previous unclosed delimiters could actually be\n                     // closed! The parser just hasn't gotten to them yet.\n-                    if let Some(&(_, sp)) = self.open_braces.last() {\n+                    if let Some(&(_, sp)) = self.diag_info.open_braces.last() {\n                         unclosed_delimiter = Some(sp);\n                     };\n-                    let sm = self.string_reader.sess.source_map();\n-                    if let Some(current_padding) = sm.span_to_margin(self.token.span) {\n-                        for (brace, brace_span) in &self.open_braces {\n-                            if let Some(padding) = sm.span_to_margin(*brace_span) {\n-                                // high likelihood of these two corresponding\n-                                if current_padding == padding && brace == &close_delim {\n-                                    candidate = Some(*brace_span);\n-                                }\n-                            }\n+                    for (brace, brace_span) in &self.diag_info.open_braces {\n+                        if same_identation_level(&sm, self.token.span, *brace_span)\n+                            && brace == &close_delim\n+                        {\n+                            // high likelihood of these two corresponding\n+                            candidate = Some(*brace_span);\n                         }\n                     }\n-                    let (tok, _) = self.open_braces.pop().unwrap();\n-                    self.unmatched_braces.push(UnmatchedBrace {\n+                    let (tok, _) = self.diag_info.open_braces.pop().unwrap();\n+                    self.diag_info.unmatched_braces.push(UnmatchedBrace {\n                         expected_delim: tok,\n                         found_delim: Some(close_delim),\n                         found_span: self.token.span,\n                         unclosed_span: unclosed_delimiter,\n                         candidate_span: candidate,\n                     });\n                 } else {\n-                    self.open_braces.pop();\n+                    self.diag_info.open_braces.pop();\n                 }\n \n                 // If the incorrect delimiter matches an earlier opening\n@@ -213,7 +178,7 @@ impl<'a> TokenTreesReader<'a> {\n                 // fn foo() {\n                 //     bar(baz(\n                 // }  // Incorrect delimiter but matches the earlier `{`\n-                if !self.open_braces.iter().any(|&(b, _)| b == close_delim) {\n+                if !self.diag_info.open_braces.iter().any(|&(b, _)| b == close_delim) {\n                     self.token = self.string_reader.next_token().0;\n                 }\n             }\n@@ -236,22 +201,12 @@ impl<'a> TokenTreesReader<'a> {\n         let mut err =\n             self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);\n \n-        // Braces are added at the end, so the last element is the biggest block\n-        if let Some(parent) = self.matching_block_spans.last() {\n-            if let Some(span) = self.last_delim_empty_block_spans.remove(&delim) {\n-                // Check if the (empty block) is in the last properly closed block\n-                if (parent.0.to(parent.1)).contains(span) {\n-                    err.span_label(span, \"block is empty, you might have not meant to close it\");\n-                } else {\n-                    err.span_label(parent.0, \"this opening brace...\");\n-                    err.span_label(parent.1, \"...matches this closing brace\");\n-                }\n-            } else {\n-                err.span_label(parent.0, \"this opening brace...\");\n-                err.span_label(parent.1, \"...matches this closing brace\");\n-            }\n-        }\n-\n+        report_suspicious_mismatch_block(\n+            &mut err,\n+            &self.diag_info,\n+            &self.string_reader.sess.source_map(),\n+            delim,\n+        );\n         err.span_label(self.token.span, \"unexpected closing delimiter\");\n         err\n     }"}, {"sha": "54485262a0cc89aabda246fb37d2170b51516d26", "filename": "tests/ui/parser/deli-ident-issue-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,24 @@\n+#![feature(let_chains)]\n+trait Demo {}\n+\n+impl dyn Demo {\n+    pub fn report(&self) -> u32 {\n+        let sum = |a: u32,\n+                   b: u32,\n+                   c: u32| {\n+            a + b + c\n+        };\n+        sum(1, 2, 3)\n+    }\n+\n+    fn check(&self, val: Option<u32>, num: Option<u32>) {\n+        if let Some(b) = val\n+        && let Some(c) = num {\n+        && b == c {\n+            //~^ ERROR expected struct\n+            //~| ERROR mismatched types\n+        }\n+    }\n+}\n+\n+fn main() { } //~ ERROR this file contains an unclosed delimiter"}, {"sha": "1119edb199f05e8435047d9133f85060c73e03c1", "filename": "tests/ui/parser/deli-ident-issue-1.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,37 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/deli-ident-issue-1.rs:24:66\n+   |\n+LL | impl dyn Demo {\n+   |               - unclosed delimiter\n+...\n+LL |         && let Some(c) = num {\n+   |                              - this delimiter might not be properly closed...\n+...\n+LL |     }\n+   |     - ...as it matches this but it has different indentation\n+...\n+LL | fn main() { }\n+   |                                                                  ^\n+\n+error[E0574]: expected struct, variant or union type, found local variable `c`\n+  --> $DIR/deli-ident-issue-1.rs:17:17\n+   |\n+LL |         && b == c {\n+   |                 ^ not a struct, variant or union type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/deli-ident-issue-1.rs:17:9\n+   |\n+LL |       fn check(&self, val: Option<u32>, num: Option<u32>) {\n+   |                                                           - expected `()` because of default return type\n+...\n+LL | /         && b == c {\n+LL | |\n+LL | |\n+LL | |         }\n+   | |_________^ expected `()`, found `bool`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0574.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "5394760df702642db0ce23baa89db0badbaa3560", "filename": "tests/ui/parser/deli-ident-issue-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    if 1 < 2 {\n+        let _a = vec!]; //~ ERROR mismatched closing delimiter\n+    }\n+} //~ ERROR unexpected closing delimiter\n+\n+fn main() {}"}, {"sha": "c8f59c9d32b5f1b98fb17a553e050398943a92e1", "filename": "tests/ui/parser/deli-ident-issue-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/deli-ident-issue-2.rs:5:1\n+   |\n+LL |         let _a = vec!];\n+   |                      - missing open `[` for this delimiter\n+LL |     }\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/deli-ident-issue-2.rs:2:14\n+   |\n+LL |     if 1 < 2 {\n+   |              ^ unclosed delimiter\n+LL |         let _a = vec!];\n+   |                      ^ mismatched closing delimiter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "30e7ef467368a0b5b6398a613535b100959845e5", "filename": "tests/ui/parser/issue-68987-unmatch-issue-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,12 @@\n+// This file has unexpected closing delimiter,\n+\n+fn func(o: Option<u32>) {\n+    match o {\n+        Some(_x) => {}   // Extra '}'\n+            let _ = if true {};\n+        }\n+        None => {}\n+    }\n+} //~ ERROR unexpected closing delimiter\n+\n+fn main() {}"}, {"sha": "2d873b46193ce2a1c1ede2c265fe711f10f2a513", "filename": "tests/ui/parser/issue-68987-unmatch-issue-1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,16 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue-1.rs:10:1\n+   |\n+LL |     match o {\n+   |             - this delimiter might not be properly closed...\n+LL |         Some(_x) => {}   // Extra '}'\n+   |                     -- block is empty, you might have not meant to close it\n+LL |             let _ = if true {};\n+LL |         }\n+   |         - ...as it matches this but it has different indentation\n+...\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "89aaa68ba40955e55b0ad4be22b36919a030d0bc", "filename": "tests/ui/parser/issue-68987-unmatch-issue-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,14 @@\n+// FIXME: this case need more work to fix\n+// currently the TokenTree matching ')' with '{', which is not user friendly for diagnostics\n+async fn obstest() -> Result<> {\n+    let obs_connect = || -> Result<(), MyError) { //~ ERROR mismatched closing delimiter\n+        async {\n+        }\n+    }\n+\n+    if let Ok(version, scene_list) = obs_connect() {\n+\n+    } else {\n+\n+    }\n+} //~ ERROR unexpected closing delimiter"}, {"sha": "2c08d41a15f1bfe7218561f3db9a0c8913e4f478", "filename": "tests/ui/parser/issue-68987-unmatch-issue-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue-2.rs:14:1\n+   |\n+LL |     let obs_connect = || -> Result<(), MyError) {\n+   |                                               - missing open `(` for this delimiter\n+...\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-68987-unmatch-issue-2.rs:3:32\n+   |\n+LL | async fn obstest() -> Result<> {\n+   |                                ^ unclosed delimiter\n+LL |     let obs_connect = || -> Result<(), MyError) {\n+   |                                               ^ mismatched closing delimiter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e98df8d7c3c4ee534f2865559c4cf72ea1b23eea", "filename": "tests/ui/parser/issue-68987-unmatch-issue-3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,8 @@\n+// the `{` is closed with `)`, there is a missing `(`\n+fn f(i: u32, j: u32) {\n+    let res = String::new();\n+    let mut cnt = i;\n+    while cnt < j {\n+        write!&mut res, \" \"); //~ ERROR mismatched closing delimiter\n+    }\n+} //~ ERROR unexpected closing delimiter"}, {"sha": "a3fc46a1e883ccdc362a1e549f656f5903f98924", "filename": "tests/ui/parser/issue-68987-unmatch-issue-3.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue-3.rs:8:1\n+   |\n+LL |         write!&mut res, \" \");\n+   |                            - missing open `(` for this delimiter\n+LL |     }\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-68987-unmatch-issue-3.rs:5:19\n+   |\n+LL |     while cnt < j {\n+   |                   ^ unclosed delimiter\n+LL |         write!&mut res, \" \");\n+   |                            ^ mismatched closing delimiter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5a3620bf24bd4bbf23eb734793a45ed26e1c8014", "filename": "tests/ui/parser/issue-68987-unmatch-issue.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,12 @@\n+// This file has unexpected closing delimiter,\n+\n+fn func(o: Option<u32>) {\n+    match o {\n+        Some(_x) =>   // Missing '{'\n+            let _ = if true {};\n+        }\n+        None => {}\n+    }\n+} //~ ERROR unexpected closing delimiter\n+\n+fn main() {}"}, {"sha": "cabd133242f609c0d98aac91e8d34dae0ba799b0", "filename": "tests/ui/parser/issue-68987-unmatch-issue.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,16 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue.rs:10:1\n+   |\n+LL |     match o {\n+   |             - this delimiter might not be properly closed...\n+LL |         Some(_x) =>   // Missing '{'\n+LL |             let _ = if true {};\n+   |                             -- block is empty, you might have not meant to close it\n+LL |         }\n+   |         - ...as it matches this but it has different indentation\n+...\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "867244b72e8493a0c59974d331c2500ed2e74c17", "filename": "tests/ui/parser/issue-81827.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-81827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissue-81827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-81827.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -2,17 +2,19 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-81827.rs:11:27\n    |\n LL | fn r()->i{0|{#[cfg(r(0{]0\n-   |          -  -             ^\n-   |          |  |\n+   |          -  -          -  ^\n+   |          |  |          |\n+   |          |  |          missing open `[` for this delimiter\n    |          |  unclosed delimiter\n    |          unclosed delimiter\n \n error: this file contains an unclosed delimiter\n   --> $DIR/issue-81827.rs:11:27\n    |\n LL | fn r()->i{0|{#[cfg(r(0{]0\n-   |          -  -             ^\n-   |          |  |\n+   |          -  -          -  ^\n+   |          |  |          |\n+   |          |  |          missing open `[` for this delimiter\n    |          |  unclosed delimiter\n    |          unclosed delimiter\n "}, {"sha": "3cb6d75a6754b343c3be2e2ff72e7469038cb7a0", "filename": "tests/ui/parser/issues/issue-62973.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -2,8 +2,10 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-62973.rs:8:2\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |        -         - unclosed delimiter\n-   |        |\n+   |        -         -         -  - missing open `(` for this delimiter\n+   |        |         |         |\n+   |        |         |         missing open `(` for this delimiter\n+   |        |         unclosed delimiter\n    |        unclosed delimiter\n LL |\n LL |\n@@ -13,8 +15,10 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-62973.rs:8:2\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |        -         - unclosed delimiter\n-   |        |\n+   |        -         -         -  - missing open `(` for this delimiter\n+   |        |         |         |\n+   |        |         |         missing open `(` for this delimiter\n+   |        |         unclosed delimiter\n    |        unclosed delimiter\n LL |\n LL |"}, {"sha": "a1f8a77ffa7c6cec978d163dbe15b1489b8341ed", "filename": "tests/ui/parser/issues/issue-63116.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-63116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-63116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-63116.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -2,8 +2,9 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-63116.rs:3:18\n    |\n LL | impl W <s(f;Y(;]\n-   |          -       ^\n-   |          |\n+   |          -     - ^\n+   |          |     |\n+   |          |     missing open `[` for this delimiter\n    |          unclosed delimiter\n \n error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `;`"}, {"sha": "01fc2c08546479907e03a08b9a8d3751ce7ec444", "filename": "tests/ui/parser/issues/issue-69259.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.rs?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,3 @@\n+fn main() {}\n+\n+fn f) {} //~ ERROR unexpected closing delimiter"}, {"sha": "604b7de33194669552e8991e95014e1f5357e5c4", "filename": "tests/ui/parser/issues/issue-69259.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected closing delimiter: `)`\n+  --> $DIR/issue-69259.rs:3:5\n+   |\n+LL | fn f) {}\n+   |     ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "46cbb056d1d880d798604ed18783d0e59da96856", "filename": "tests/ui/parser/issues/issue-70583-block-is-empty-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-1.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -2,10 +2,10 @@ error: unexpected closing delimiter: `}`\n   --> $DIR/issue-70583-block-is-empty-1.rs:20:1\n    |\n LL | fn struct_generic(x: Vec<i32>) {\n-   |                                - this opening brace...\n+   |                                - this delimiter might not be properly closed...\n ...\n LL |     }\n-   |     - ...matches this closing brace\n+   |     - ...as it matches this but it has different indentation\n LL | }\n    | ^ unexpected closing delimiter\n "}, {"sha": "9ae94c701869b8c0effb6031d24b6ce51a6dba2d", "filename": "tests/ui/parser/issues/issue-70583-block-is-empty-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-2.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -1,8 +1,12 @@\n error: unexpected closing delimiter: `}`\n   --> $DIR/issue-70583-block-is-empty-2.rs:14:1\n    |\n+LL |         match self {\n+   |                    - this delimiter might not be properly closed...\n LL |             ErrorHandled::Reported => {}}\n-   |                                       -- block is empty, you might have not meant to close it\n+   |                                       --- ...as it matches this but it has different indentation\n+   |                                       |\n+   |                                       block is empty, you might have not meant to close it\n ...\n LL | }\n    | ^ unexpected closing delimiter"}, {"sha": "689ce1eb6b70462c7f0f0c988efc73c3c2f0b1d5", "filename": "tests/ui/parser/macro-mismatched-delim-paren-brace.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -2,10 +2,10 @@ error: unexpected closing delimiter: `}`\n   --> $DIR/macro-mismatched-delim-paren-brace.rs:5:1\n    |\n LL | fn main() {\n-   |           - this opening brace...\n+   |           - this delimiter might not be properly closed...\n ...\n LL |     }\n-   |     - ...matches this closing brace\n+   |     - ...as it matches this but it has different indentation\n LL | }\n    | ^ unexpected closing delimiter\n "}, {"sha": "78f392c9a8acc87913e01acb5c4dcbdf067391f6", "filename": "tests/ui/typeck/issue-91334.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Ftypeck%2Fissue-91334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3048c78384d1cd7b70a0bb122d385cb67eeb06f/tests%2Fui%2Ftypeck%2Fissue-91334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-91334.stderr?ref=e3048c78384d1cd7b70a0bb122d385cb67eeb06f", "patch": "@@ -2,17 +2,19 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-91334.rs:10:23\n    |\n LL | fn f(){||yield(((){),\n-   |       -       -       ^\n-   |       |       |\n+   |       -       -    -  ^\n+   |       |       |    |\n+   |       |       |    missing open `(` for this delimiter\n    |       |       unclosed delimiter\n    |       unclosed delimiter\n \n error: this file contains an unclosed delimiter\n   --> $DIR/issue-91334.rs:10:23\n    |\n LL | fn f(){||yield(((){),\n-   |       -       -       ^\n-   |       |       |\n+   |       -       -    -  ^\n+   |       |       |    |\n+   |       |       |    missing open `(` for this delimiter\n    |       |       unclosed delimiter\n    |       unclosed delimiter\n "}]}