{"sha": "0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkN2M4MmU3ZjI3NzM4NmNlOTJmNGNhY2NiNmZkMGM0OGQwYTk1NTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-16T12:16:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-16T12:16:40Z"}, "message": "Rollup merge of #69738 - mark-i-m:assoc-fn-2, r=eddyb\n\nMore Method -> AssocFn renaming\n\nr? @Centril @eddyb\n\ncc #60163\n\nBlocked on #69674", "tree": {"sha": "9487b290b3c55f44c9494685f1ec2fea6094964b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9487b290b3c55f44c9494685f1ec2fea6094964b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeb24oCRBK7hj4Ov3rIwAAdHIIABakAdW7SH6qXmCgAHUYjX8s\nlPgi/wBFXUoPDRS/Me9B8qf+Cti1Q3rRydcf4Erlvoc7AgmKu7NBBCqcNwOuMZAS\ncbaKSOcij5AVV/2fKo7jT7OeCMJn+bV/Qk+lBnYRjotypD5jhsUEvug8xOd3bsLl\nIWJJfRuZTlwOvLHV8tO/9FJiYQJzODKmGuihWDpIfyd3UiT3rYaOw47duydDuVtV\nyxCRoaWvexpRRtaY6FjeXkRpExZlRVQHlkzKbxxDypuJp1ObDxdOtIjuLrMsKA6C\n+CMDpgCdez0VIpssB8Jc989Qnee/N3YjE/R8dVcUHMzduRzELgSgCEAjuqTc2As=\n=dzka\n-----END PGP SIGNATURE-----\n", "payload": "tree 9487b290b3c55f44c9494685f1ec2fea6094964b\nparent 1685264f129602a8fba598c9de1d614c5f6f83a3\nparent 1b92e86a1c70533d76b5ea3937bdaabba9653f2c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584361000 +0100\ncommitter GitHub <noreply@github.com> 1584361000 +0100\n\nRollup merge of #69738 - mark-i-m:assoc-fn-2, r=eddyb\n\nMore Method -> AssocFn renaming\n\nr? @Centril @eddyb\n\ncc #60163\n\nBlocked on #69674\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "html_url": "https://github.com/rust-lang/rust/commit/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1685264f129602a8fba598c9de1d614c5f6f83a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1685264f129602a8fba598c9de1d614c5f6f83a3", "html_url": "https://github.com/rust-lang/rust/commit/1685264f129602a8fba598c9de1d614c5f6f83a3"}, {"sha": "1b92e86a1c70533d76b5ea3937bdaabba9653f2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b92e86a1c70533d76b5ea3937bdaabba9653f2c", "html_url": "https://github.com/rust-lang/rust/commit/1b92e86a1c70533d76b5ea3937bdaabba9653f2c"}], "stats": {"total": 218, "additions": 107, "deletions": 111}, "files": [{"sha": "7024e86f95d06a169dabcd2675c3cad5d6b7cb03", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -51,7 +51,7 @@ impl MaybeFnLike for hir::Item<'_> {\n impl MaybeFnLike for hir::ImplItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            hir::ImplItemKind::Method(..) => true,\n+            hir::ImplItemKind::Fn(..) => true,\n             _ => false,\n         }\n     }\n@@ -60,7 +60,7 @@ impl MaybeFnLike for hir::ImplItem<'_> {\n impl MaybeFnLike for hir::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n+            hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)) => true,\n             _ => false,\n         }\n     }\n@@ -239,13 +239,13 @@ impl<'a> FnLikeNode<'a> {\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n             Node::TraitItem(ti) => match ti.kind {\n-                hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n+                hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                     method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n             Node::ImplItem(ii) => match ii.kind {\n-                hir::ImplItemKind::Method(ref sig, body) => {\n+                hir::ImplItemKind::Fn(ref sig, body) => {\n                     method(ii.hir_id, ii.ident, sig, Some(&ii.vis), body, ii.span, &ii.attrs)\n                 }\n                 _ => bug!(\"impl method FnLikeNode that is not fn-like\"),"}, {"sha": "55ed07a97d168e232ed08ebca9ee70792ed2e7bd", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -56,7 +56,7 @@ fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n         },\n \n         Node::ImplItem(ref item) => match item.kind {\n-            ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n+            ImplItemKind::Fn(ref sig, _) => Some(&sig.decl),\n             _ => None,\n         },\n \n@@ -82,7 +82,7 @@ fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n         },\n \n         Node::ImplItem(item) => match &item.kind {\n-            ImplItemKind::Method(sig, _) => Some(sig),\n+            ImplItemKind::Fn(sig, _) => Some(sig),\n             _ => None,\n         },\n \n@@ -100,13 +100,14 @@ fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n         },\n \n         Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Const(_, Some(body))\n-            | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n+            TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)) => {\n+                Some(body)\n+            }\n             _ => None,\n         },\n \n         Node::ImplItem(item) => match item.kind {\n-            ImplItemKind::Const(_, body) | ImplItemKind::Method(_, body) => Some(body),\n+            ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body) => Some(body),\n             _ => None,\n         },\n \n@@ -299,7 +300,7 @@ impl<'hir> Map<'hir> {\n             },\n             Node::ImplItem(item) => match item.kind {\n                 ImplItemKind::Const(..) => DefKind::AssocConst,\n-                ImplItemKind::Method(..) => DefKind::AssocFn,\n+                ImplItemKind::Fn(..) => DefKind::AssocFn,\n                 ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n                 ImplItemKind::OpaqueTy(..) => DefKind::AssocOpaqueTy,\n             },\n@@ -443,7 +444,7 @@ impl<'hir> Map<'hir> {\n             Node::Ctor(..)\n             | Node::Item(&Item { kind: ItemKind::Fn(..), .. })\n             | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })\n-            | Node::ImplItem(&ImplItem { kind: ImplItemKind::Method(..), .. }) => BodyOwnerKind::Fn,\n+            | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,\n             Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),\n             Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,\n             node => bug!(\"{:#?} is not a body node\", node),\n@@ -749,7 +750,7 @@ impl<'hir> Map<'hir> {\n                     _ => false,\n                 },\n                 Node::ImplItem(ii) => match ii.kind {\n-                    ImplItemKind::Method(..) => true,\n+                    ImplItemKind::Fn(..) => true,\n                     _ => false,\n                 },\n                 Node::Block(_) => true,\n@@ -1110,7 +1111,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n             ImplItemKind::Const(..) => {\n                 format!(\"assoc const {} in {}{}\", ii.ident, path_str(), id_str)\n             }\n-            ImplItemKind::Method(..) => format!(\"method {} in {}{}\", ii.ident, path_str(), id_str),\n+            ImplItemKind::Fn(..) => format!(\"method {} in {}{}\", ii.ident, path_str(), id_str),\n             ImplItemKind::TyAlias(_) => {\n                 format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n             }"}, {"sha": "22d876ae14ec22bb20860eade68fb537b3071bb3", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -761,13 +761,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Required(names)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n             AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Provided(body_id)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n@@ -838,7 +838,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     asyncness.opt_return_id(),\n                 );\n \n-                (generics, hir::ImplItemKind::Method(sig, body_id))\n+                (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n             AssocItemKind::TyAlias(_, generics, _, ty) => {\n                 let generics = self.lower_generics(generics, ImplTraitContext::disallowed());"}, {"sha": "178a74c791b4c3e51981ffe26469b95237454a13", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -88,7 +88,7 @@ fn reachable_non_generics_provider(\n                 // Only consider nodes that actually have exported symbols.\n                 Node::Item(&hir::Item { kind: hir::ItemKind::Static(..), .. })\n                 | Node::Item(&hir::Item { kind: hir::ItemKind::Fn(..), .. })\n-                | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Method(..), .. }) => {\n+                | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) => {\n                     let def_id = tcx.hir().local_def_id(hir_id);\n                     let generics = tcx.generics_of(def_id);\n                     if !generics.requires_monomorphization(tcx) &&"}, {"sha": "5fee6920ddfe03acfd94b27499691c47ca13337f", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -1854,7 +1854,7 @@ pub struct TraitItem<'hir> {\n \n /// Represents a trait method's body (or just argument names).\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n-pub enum TraitMethod<'hir> {\n+pub enum TraitFn<'hir> {\n     /// No default body in the trait, just a signature.\n     Required(&'hir [Ident]),\n \n@@ -1868,7 +1868,7 @@ pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(&'hir Ty<'hir>, Option<BodyId>),\n     /// An associated function with an optional body.\n-    Fn(FnSig<'hir>, TraitMethod<'hir>),\n+    Fn(FnSig<'hir>, TraitFn<'hir>),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds<'hir>, Option<&'hir Ty<'hir>>),\n@@ -1901,8 +1901,8 @@ pub enum ImplItemKind<'hir> {\n     /// An associated constant of the given type, set to the constant result\n     /// of the expression.\n     Const(&'hir Ty<'hir>, BodyId),\n-    /// A method implementation with the given signature and body.\n-    Method(FnSig<'hir>, BodyId),\n+    /// An associated function implementation with the given signature and body.\n+    Fn(FnSig<'hir>, BodyId),\n     /// An associated type.\n     TyAlias(&'hir Ty<'hir>),\n     /// An associated `type = impl Trait`.\n@@ -1913,7 +1913,7 @@ impl ImplItemKind<'_> {\n     pub fn namespace(&self) -> Namespace {\n         match self {\n             ImplItemKind::OpaqueTy(..) | ImplItemKind::TyAlias(..) => Namespace::TypeNS,\n-            ImplItemKind::Const(..) | ImplItemKind::Method(..) => Namespace::ValueNS,\n+            ImplItemKind::Const(..) | ImplItemKind::Fn(..) => Namespace::ValueNS,\n         }\n     }\n }\n@@ -2704,7 +2704,7 @@ impl Node<'_> {\n     pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n         match self {\n             Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n-            | Node::ImplItem(ImplItem { kind: ImplItemKind::Method(fn_sig, _), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n             | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n             Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {\n                 Some(fn_decl)"}, {"sha": "b13f1a91b03179a99f20244e8acd681ae427d4db", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -911,14 +911,14 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_nested_body, default);\n         }\n-        TraitItemKind::Fn(ref sig, TraitMethod::Required(param_names)) => {\n+        TraitItemKind::Fn(ref sig, TraitFn::Required(param_names)) => {\n             visitor.visit_id(trait_item.hir_id);\n             visitor.visit_fn_decl(&sig.decl);\n             for &param_name in param_names {\n                 visitor.visit_ident(param_name);\n             }\n         }\n-        TraitItemKind::Fn(ref sig, TraitMethod::Provided(body_id)) => {\n+        TraitItemKind::Fn(ref sig, TraitFn::Provided(body_id)) => {\n             visitor.visit_fn(\n                 FnKind::Method(trait_item.ident, sig, None, &trait_item.attrs),\n                 &sig.decl,\n@@ -968,7 +968,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_ty(ty);\n             visitor.visit_nested_body(body);\n         }\n-        ImplItemKind::Method(ref sig, body_id) => {\n+        ImplItemKind::Fn(ref sig, body_id) => {\n             visitor.visit_fn(\n                 FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis), &impl_item.attrs),\n                 &sig.decl,"}, {"sha": "4e9618b7676e8dcdb03a1cdacf97c62ee999af02", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -886,13 +886,13 @@ impl<'a> State<'a> {\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_associated_const(ti.ident, &ty, default, &vis);\n             }\n-            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(ref arg_names)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, arg_names, None);\n                 self.s.word(\";\");\n             }\n-            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.head(\"\");\n@@ -925,7 +925,7 @@ impl<'a> State<'a> {\n             hir::ImplItemKind::Const(ref ty, expr) => {\n                 self.print_associated_const(ii.ident, &ty, Some(expr), &ii.vis);\n             }\n-            hir::ImplItemKind::Method(ref sig, body) => {\n+            hir::ImplItemKind::Fn(ref sig, body) => {\n                 self.head(\"\");\n                 self.print_method_sig(ii.ident, sig, &ii.generics, &ii.vis, &[], Some(body));\n                 self.nbsp();"}, {"sha": "3a4485a1b17fd38ed43b7f431b9d1da7d72377a6", "filename": "src/librustc_hir/target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_hir%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Ftarget.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -105,10 +105,10 @@ impl Target {\n     pub fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n         match trait_item.kind {\n             TraitItemKind::Const(..) => Target::AssocConst,\n-            TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitFn::Required(_)) => {\n                 Target::Method(MethodKind::Trait { body: false })\n             }\n-            TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitFn::Provided(_)) => {\n                 Target::Method(MethodKind::Trait { body: true })\n             }\n             TraitItemKind::Type(..) => Target::AssocTy,"}, {"sha": "df5fd110db9b691a83ca3d4b0cc8e047bbc8159a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -333,7 +333,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_IN_TRAIT),\n             },\n             HirNode::ImplItem(item) => match item.kind {\n-                ImplItemKind::Method(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n+                ImplItemKind::Fn(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n                 ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n                 ImplItemKind::TyAlias(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n                 ImplItemKind::OpaqueTy(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),"}, {"sha": "a544381f33da1a74b5941ac82b720fd7737c644d", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -275,7 +275,7 @@ fn trait_item_scope_tag(item: &hir::TraitItem<'_>) -> &'static str {\n \n fn impl_item_scope_tag(item: &hir::ImplItem<'_>) -> &'static str {\n     match item.kind {\n-        hir::ImplItemKind::Method(..) => \"method body\",\n+        hir::ImplItemKind::Fn(..) => \"method body\",\n         hir::ImplItemKind::Const(..)\n         | hir::ImplItemKind::OpaqueTy(..)\n         | hir::ImplItemKind::TyAlias(..) => \"associated item\","}, {"sha": "15acf632b2c9829efab5382a4c753f74d6877966", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {\n-                        kind: hir::ImplItemKind::Method(ref m, ..),\n+                        kind: hir::ImplItemKind::Fn(ref m, ..),\n                         ..\n                     }) => &m.decl,\n                     _ => return None,"}, {"sha": "54b8fad3930799de579abba9a1374ab771cc9441", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -486,7 +486,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n         let desc = match impl_item.kind {\n             hir::ImplItemKind::Const(..) => \"an associated constant\",\n-            hir::ImplItemKind::Method(..) => \"a method\",\n+            hir::ImplItemKind::Fn(..) => \"a method\",\n             hir::ImplItemKind::TyAlias(_) => \"an associated type\",\n             hir::ImplItemKind::OpaqueTy(_) => \"an associated `impl Trait` type\",\n         };"}, {"sha": "afab55358d93889c33c7dd2639a95b63ea860a1d", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(pnames)) = item.kind {\n+        if let hir::TraitItemKind::Fn(_, hir::TraitFn::Required(pnames)) = item.kind {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n                 self.check_snake_case(cx, \"variable\", param_name);"}, {"sha": "b37e339bab3fc10d999db0bc83267711b12a4043", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -505,7 +505,7 @@ impl EntryKind {\n             EntryKind::Struct(_, _) => DefKind::Struct,\n             EntryKind::Union(_, _) => DefKind::Union,\n             EntryKind::Fn(_) | EntryKind::ForeignFn(_) => DefKind::Fn,\n-            EntryKind::Method(_) => DefKind::AssocFn,\n+            EntryKind::AssocFn(_) => DefKind::AssocFn,\n             EntryKind::Type => DefKind::TyAlias,\n             EntryKind::TypeParam => DefKind::TyParam,\n             EntryKind::ConstParam => DefKind::ConstParam,\n@@ -1067,7 +1067,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         let (kind, container, has_self) = match self.kind(id) {\n             EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),\n-            EntryKind::Method(data) => {\n+            EntryKind::AssocFn(data) => {\n                 let data = data.decode(self);\n                 (ty::AssocKind::Method, data.container, data.has_self)\n             }\n@@ -1249,7 +1249,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn get_fn_param_names(&self, id: DefIndex) -> Vec<ast::Name> {\n         let param_names = match self.kind(id) {\n             EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,\n-            EntryKind::Method(data) => data.decode(self).fn_data.param_names,\n+            EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,\n             _ => Lazy::empty(),\n         };\n         param_names.decode(self).collect()\n@@ -1286,7 +1286,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     // don't serialize constness for tuple variant and tuple struct constructors.\n     fn is_const_fn_raw(&self, id: DefIndex) -> bool {\n         let constness = match self.kind(id) {\n-            EntryKind::Method(data) => data.decode(self).fn_data.constness,\n+            EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,\n             EntryKind::Fn(data) => data.decode(self).constness,\n             // Some intrinsics can be const fn. While we could recompute this (at least until we\n             // stop having hardcoded whitelists and move to stability attributes), it seems cleaner\n@@ -1301,7 +1301,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn asyncness(&self, id: DefIndex) -> hir::IsAsync {\n         match self.kind(id) {\n             EntryKind::Fn(data) => data.decode(self).asyncness,\n-            EntryKind::Method(data) => data.decode(self).fn_data.asyncness,\n+            EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,\n             EntryKind::ForeignFn(data) => data.decode(self).asyncness,\n             _ => bug!(\"asyncness: expected function kind\"),\n         }"}, {"sha": "005bebbe1e2462eda8f5359cec4a3098fa6883bb", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -807,10 +807,10 @@ impl EncodeContext<'tcx> {\n             ty::AssocKind::Method => {\n                 let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n                     let param_names = match *m {\n-                        hir::TraitMethod::Required(ref names) => {\n+                        hir::TraitFn::Required(ref names) => {\n                             self.encode_fn_param_names(names)\n                         }\n-                        hir::TraitMethod::Provided(body) => {\n+                        hir::TraitFn::Provided(body) => {\n                             self.encode_fn_param_names_for_body(body)\n                         }\n                     };\n@@ -822,7 +822,7 @@ impl EncodeContext<'tcx> {\n                 } else {\n                     bug!()\n                 };\n-                EntryKind::Method(self.lazy(MethodData {\n+                EntryKind::AssocFn(self.lazy(AssocFnData {\n                     fn_data,\n                     container,\n                     has_self: trait_item.method_has_self_argument,\n@@ -894,7 +894,7 @@ impl EncodeContext<'tcx> {\n                 }\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.kind {\n+                let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {\n                     FnData {\n                         asyncness: sig.header.asyncness,\n                         constness: sig.header.constness,\n@@ -903,7 +903,7 @@ impl EncodeContext<'tcx> {\n                 } else {\n                     bug!()\n                 };\n-                EntryKind::Method(self.lazy(MethodData {\n+                EntryKind::AssocFn(self.lazy(AssocFnData {\n                     fn_data,\n                     container,\n                     has_self: impl_item.method_has_self_argument,\n@@ -928,7 +928,7 @@ impl EncodeContext<'tcx> {\n         self.encode_inferred_outlives(def_id);\n         let mir = match ast_item.kind {\n             hir::ImplItemKind::Const(..) => true,\n-            hir::ImplItemKind::Method(ref sig, _) => {\n+            hir::ImplItemKind::Fn(ref sig, _) => {\n                 let generics = self.tcx.generics_of(def_id);\n                 let needs_inline = (generics.requires_monomorphization(self.tcx)\n                     || tcx.codegen_fn_attrs(def_id).requests_inline())"}, {"sha": "43a1515da32cee0f75b67d4d51acd459604a2967", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -305,7 +305,7 @@ enum EntryKind {\n     Generator(hir::GeneratorKind),\n     Trait(Lazy<TraitData>),\n     Impl(Lazy<ImplData>),\n-    Method(Lazy<MethodData>),\n+    AssocFn(Lazy<AssocFnData>),\n     AssocType(AssocContainer),\n     AssocOpaqueTy(AssocContainer),\n     AssocConst(AssocContainer, mir::ConstQualifs, Lazy<RenderedConst>),\n@@ -392,7 +392,7 @@ impl AssocContainer {\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-struct MethodData {\n+struct AssocFnData {\n     fn_data: FnData,\n     container: AssocContainer,\n     has_self: bool,"}, {"sha": "c462f93414874150d7adc17b628d9759afcbeaf6", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -485,7 +485,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         }))\n                         | Some(hir::Node::ImplItem(hir::ImplItem {\n                             ident,\n-                            kind: hir::ImplItemKind::Method(sig, _),\n+                            kind: hir::ImplItemKind::Fn(sig, _),\n                             ..\n                         })) => Some(\n                             arg_pos\n@@ -527,7 +527,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {\n                     ident,\n-                    kind: hir::ImplItemKind::Method(sig, _),\n+                    kind: hir::ImplItemKind::Fn(sig, _),\n                     ..\n                 }) => {\n                     err.span_label(ident.span, \"\");"}, {"sha": "7103fc596c92269c4bda1121550c1a41f8e87353", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -651,7 +651,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 if gen_move.is_some() { \" of generator\" } else { \" of closure\" },\n             ),\n             hir::Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::Method(method_sig, _),\n+                kind: hir::ImplItemKind::Fn(method_sig, _),\n                 ..\n             }) => (method_sig.decl.output.span(), \"\"),\n             _ => (self.body.span, \"\"),"}, {"sha": "8892794ffa9d90c17e8e725d0bb007ea71508e06", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -983,7 +983,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n         match ii.kind {\n-            hir::ImplItemKind::Method(hir::FnSig { .. }, _) => {\n+            hir::ImplItemKind::Fn(hir::FnSig { .. }, _) => {\n                 let def_id = self.tcx.hir().local_def_id(ii.hir_id);\n                 self.push_if_root(def_id);\n             }"}, {"sha": "821c4d68c7e8aaa93fa7acfdd5dbf5fbb5970214", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -39,12 +39,12 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             ..\n         })\n         | Node::ImplItem(hir::ImplItem {\n-            kind: hir::ImplItemKind::Method(hir::FnSig { decl, .. }, body_id),\n+            kind: hir::ImplItemKind::Fn(hir::FnSig { decl, .. }, body_id),\n             ..\n         })\n         | Node::TraitItem(hir::TraitItem {\n             kind:\n-                hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitMethod::Provided(body_id)),\n+                hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitFn::Provided(body_id)),\n             ..\n         }) => (*body_id, decl.output.span()),\n         Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })"}, {"sha": "373b7c56d3802e119d650083e52ad9bda576d1b0", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -25,7 +25,7 @@ use rustc_span::Span;\n fn target_from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n     match impl_item.kind {\n         hir::ImplItemKind::Const(..) => Target::AssocConst,\n-        hir::ImplItemKind::Method(..) => {\n+        hir::ImplItemKind::Fn(..) => {\n             let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n             let containing_item = tcx.hir().expect_item(parent_hir_id);\n             let containing_impl_is_for_trait = match &containing_item.kind {"}, {"sha": "587b57eb3225cb02385bb686e70b017d40f8603c", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -391,7 +391,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     let trait_item = self.krate.trait_item(trait_item_ref.id);\n                     match trait_item.kind {\n                         hir::TraitItemKind::Const(_, Some(_))\n-                        | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n+                        | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)) => {\n                             if has_allow_dead_code_or_lang_attr(\n                                 self.tcx,\n                                 trait_item.hir_id,\n@@ -661,7 +661,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 }\n                 self.visit_nested_body(body_id)\n             }\n-            hir::ImplItemKind::Method(_, body_id) => {\n+            hir::ImplItemKind::Fn(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.hir_id) {\n                     let span = self.tcx.sess.source_map().def_span(impl_item.span);\n                     self.warn_dead_code(\n@@ -682,11 +682,11 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         match trait_item.kind {\n             hir::TraitItemKind::Const(_, Some(body_id))\n-            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n+            | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body_id)) => {\n                 self.visit_nested_body(body_id)\n             }\n             hir::TraitItemKind::Const(_, None)\n-            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n+            | hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_))\n             | hir::TraitItemKind::Type(..) => {}\n         }\n     }"}, {"sha": "4643add5ac3fdfc638a9fa0d946ea07a4449654b", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -53,7 +53,7 @@ fn method_might_be_inlined(\n     if codegen_fn_attrs.requests_inline() || generics.requires_monomorphization(tcx) {\n         return true;\n     }\n-    if let hir::ImplItemKind::Method(method_sig, _) = &impl_item.kind {\n+    if let hir::ImplItemKind::Fn(method_sig, _) = &impl_item.kind {\n         if method_sig.header.is_const() {\n             return true;\n         }\n@@ -162,14 +162,14 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             },\n             Some(Node::TraitItem(trait_method)) => match trait_method.kind {\n                 hir::TraitItemKind::Const(_, ref default) => default.is_some(),\n-                hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n-                hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n+                hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)) => true,\n+                hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_))\n                 | hir::TraitItemKind::Type(..) => false,\n             },\n             Some(Node::ImplItem(impl_item)) => {\n                 match impl_item.kind {\n                     hir::ImplItemKind::Const(..) => true,\n-                    hir::ImplItemKind::Method(..) => {\n+                    hir::ImplItemKind::Fn(..) => {\n                         let attrs = self.tcx.codegen_fn_attrs(def_id);\n                         let generics = self.tcx.generics_of(def_id);\n                         if generics.requires_monomorphization(self.tcx) || attrs.requests_inline() {\n@@ -278,11 +278,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Node::TraitItem(trait_method) => {\n                 match trait_method.kind {\n                     hir::TraitItemKind::Const(_, None)\n-                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_)) => {\n                         // Keep going, nothing to get exported\n                     }\n                     hir::TraitItemKind::Const(_, Some(body_id))\n-                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body_id)) => {\n                         self.visit_nested_body(body_id);\n                     }\n                     hir::TraitItemKind::Type(..) => {}\n@@ -292,7 +292,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 hir::ImplItemKind::Const(_, body) => {\n                     self.visit_nested_body(body);\n                 }\n-                hir::ImplItemKind::Method(_, body) => {\n+                hir::ImplItemKind::Fn(_, body) => {\n                     let did = self.tcx.hir().get_parent_did(search_item);\n                     if method_might_be_inlined(self.tcx, impl_item, did) {\n                         self.visit_nested_body(body)"}, {"sha": "bf407b82cbe21f66e6029038eb05ab2c3800e0af", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -1556,7 +1556,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     || items.iter().any(|impl_item_ref| {\n                         let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                         match impl_item.kind {\n-                            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Method(..) => {\n+                            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {\n                                 self.access_levels.is_reachable(impl_item_ref.id.hir_id)\n                             }\n                             hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(_) => {\n@@ -1578,8 +1578,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 // types in private items.\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                                 match impl_item.kind {\n-                                    hir::ImplItemKind::Const(..)\n-                                    | hir::ImplItemKind::Method(..)\n+                                    hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)\n                                         if self\n                                             .item_is_public(&impl_item.hir_id, &impl_item.vis) =>\n                                     {"}, {"sha": "767ca5f887b54aefc72f3da78440fbf18a133611", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -771,7 +771,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         use self::hir::ImplItemKind::*;\n         self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n         match impl_item.kind {\n-            Method(ref sig, _) => {\n+            Fn(ref sig, _) => {\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n                     Some(tcx.hir().get_parent_item(impl_item.hir_id)),\n@@ -1466,7 +1466,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         }\n                     }\n                     Node::ImplItem(impl_item) => {\n-                        if let hir::ImplItemKind::Method(sig, _) = &impl_item.kind {\n+                        if let hir::ImplItemKind::Fn(sig, _) = &impl_item.kind {\n                             find_arg_use_span(sig.decl.inputs);\n                         }\n                     }\n@@ -1818,9 +1818,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     | Node::TraitItem(&hir::TraitItem {\n                         kind: hir::TraitItemKind::Fn(..), ..\n                     })\n-                    | Node::ImplItem(&hir::ImplItem {\n-                        kind: hir::ImplItemKind::Method(..), ..\n-                    }) => {\n+                    | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) => {\n                         let scope = self.tcx.hir().local_def_id(fn_id);\n                         def = Region::Free(scope, def.id().unwrap());\n                     }\n@@ -2100,12 +2098,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         trait_items.iter().find(|ti| ti.id.hir_id == parent).map(|ti| ti.kind);\n                 }\n                 match *m {\n-                    hir::TraitMethod::Required(_) => None,\n-                    hir::TraitMethod::Provided(body) => Some(body),\n+                    hir::TraitFn::Required(_) => None,\n+                    hir::TraitFn::Provided(body) => Some(body),\n                 }\n             }\n \n-            Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Method(_, body), .. }) => {\n+            Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(_, body), .. }) => {\n                 if let hir::ItemKind::Impl { ref self_ty, ref items, .. } =\n                     self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {"}, {"sha": "46654a4e8b4aee3dad073e5b46fac4e220676f70", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -715,7 +715,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Node::Item(&hir::Item { span, kind: hir::ItemKind::Fn(ref sig, ..), .. })\n             | Node::ImplItem(&hir::ImplItem {\n                 span,\n-                kind: hir::ImplItemKind::Method(ref sig, _),\n+                kind: hir::ImplItemKind::Fn(ref sig, _),\n                 ..\n             })\n             | Node::TraitItem(&hir::TraitItem {"}, {"sha": "3d0dd73f03c184be9bc7bbabf05fecd2449cd85a", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -90,11 +90,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 })\n             }\n             hir::Node::TraitItem(hir::TraitItem {\n-                kind: hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)),\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body_id)),\n                 ..\n             }) => self.describe_generator(*body_id).or_else(|| Some(\"a trait method\")),\n             hir::Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::Method(sig, body_id),\n+                kind: hir::ImplItemKind::Fn(sig, body_id),\n                 ..\n             }) => self.describe_generator(*body_id).or_else(|| {\n                 Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {"}, {"sha": "6fe6d7aab2832bdb492f8a48d2876cfbedf15929", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {\n                     generics,\n-                    kind: hir::ImplItemKind::Method(..),\n+                    kind: hir::ImplItemKind::Fn(..),\n                     ..\n                 })\n                 | hir::Node::Item(hir::Item {"}, {"sha": "69d0bd09296877743026aa2868f3b6051cf3410d", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -190,7 +190,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n         },\n \n         Node::ImplItem(item) => match item.kind {\n-            ImplItemKind::Method(..) => NodeKind::Fn,\n+            ImplItemKind::Fn(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         },\n "}, {"sha": "779b87f6623750191db3c980927169598f442d1d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -403,7 +403,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n     let tcx = infcx.tcx;\n     let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id).unwrap();\n     let (impl_m_output, impl_m_iter) = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n-        ImplItemKind::Method(ref impl_m_sig, _) => {\n+        ImplItemKind::Fn(ref impl_m_sig, _) => {\n             (&impl_m_sig.decl.output, impl_m_sig.decl.inputs.iter())\n         }\n         _ => bug!(\"{:?} is not a method\", impl_m),\n@@ -732,7 +732,7 @@ fn compare_number_of_method_arguments<'tcx>(\n         };\n         let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id).unwrap();\n         let impl_span = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n-            ImplItemKind::Method(ref impl_m_sig, _) => {\n+            ImplItemKind::Fn(ref impl_m_sig, _) => {\n                 let pos = if impl_number_args > 0 { impl_number_args - 1 } else { 0 };\n                 if let Some(arg) = impl_m_sig.decl.inputs.get(pos) {\n                     if pos == 0 {\n@@ -873,7 +873,7 @@ fn compare_synthetic_generics<'tcx>(\n                         let impl_m = tcx.hir().as_local_hir_id(impl_m.def_id)?;\n                         let impl_m = tcx.hir().impl_item(hir::ImplItemId { hir_id: impl_m });\n                         let input_tys = match impl_m.kind {\n-                            hir::ImplItemKind::Method(ref sig, _) => sig.decl.inputs,\n+                            hir::ImplItemKind::Fn(ref sig, _) => sig.decl.inputs,\n                             _ => unreachable!(),\n                         };\n                         struct Visitor(Option<Span>, hir::def_id::DefId);"}, {"sha": "3eb3624a296658f8386cb4cbb74d6865164d1ac1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -939,10 +939,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 })) = id.map(|id| self.tcx.hir().get(id))\n                                 {\n                                     let self_first_arg = match method {\n-                                        hir::TraitMethod::Required([ident, ..]) => {\n+                                        hir::TraitFn::Required([ident, ..]) => {\n                                             ident.name == kw::SelfLower\n                                         }\n-                                        hir::TraitMethod::Provided(body_id) => {\n+                                        hir::TraitFn::Provided(body_id) => {\n                                             match &self.tcx.hir().body(*body_id).params[..] {\n                                                 [hir::Param {\n                                                     pat:"}, {"sha": "55e395afad911a526b8787d3626b1f57cea0b245", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -816,14 +816,14 @@ fn primary_body_of(\n         },\n         Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None, None)),\n-            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                 Some((body, None, Some(&sig.header), Some(&sig.decl)))\n             }\n             _ => None,\n         },\n         Node::ImplItem(item) => match item.kind {\n             hir::ImplItemKind::Const(ref ty, body) => Some((body, Some(ty), None, None)),\n-            hir::ImplItemKind::Method(ref sig, body) => {\n+            hir::ImplItemKind::Fn(ref sig, body) => {\n                 Some((body, None, Some(&sig.header), Some(&sig.decl)))\n             }\n             _ => None,\n@@ -1896,7 +1896,7 @@ fn check_specialization_validity<'tcx>(\n ) {\n     let kind = match impl_item.kind {\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n-        hir::ImplItemKind::Method(..) => ty::AssocKind::Method,\n+        hir::ImplItemKind::Fn(..) => ty::AssocKind::Method,\n         hir::ImplItemKind::OpaqueTy(..) => ty::AssocKind::OpaqueTy,\n         hir::ImplItemKind::TyAlias(_) => ty::AssocKind::Type,\n     };\n@@ -2019,7 +2019,7 @@ fn check_impl_items_against_trait<'tcx>(\n                         err.emit()\n                     }\n                 }\n-                hir::ImplItemKind::Method(..) => {\n+                hir::ImplItemKind::Fn(..) => {\n                     let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                     if ty_trait_item.kind == ty::AssocKind::Method {\n                         compare_impl_method(\n@@ -4738,9 +4738,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let node = self.tcx.hir().get(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item { kind: hir::ItemKind::Fn(_, _, body_id), .. })\n-            | Node::ImplItem(&hir::ImplItem {\n-                kind: hir::ImplItemKind::Method(_, body_id), ..\n-            }) => {\n+            | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(_, body_id), .. }) => {\n                 let body = self.tcx.hir().body(body_id);\n                 if let ExprKind::Block(block, _) = &body.value.kind {\n                     return Some(block.span);\n@@ -4779,7 +4777,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }) => Some((&sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n                 ident,\n-                kind: hir::ImplItemKind::Method(ref sig, ..),\n+                kind: hir::ImplItemKind::Fn(ref sig, ..),\n                 ..\n             }) => Some((&sig.decl, ident, false)),\n             _ => None,\n@@ -4864,11 +4862,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             match hir.get_if_local(def_id) {\n                 Some(Node::Item(hir::Item { kind: ItemKind::Fn(.., body_id), .. }))\n                 | Some(Node::ImplItem(hir::ImplItem {\n-                    kind: hir::ImplItemKind::Method(_, body_id),\n+                    kind: hir::ImplItemKind::Fn(_, body_id),\n                     ..\n                 }))\n                 | Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Provided(body_id)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitFn::Provided(body_id)),\n                     ..\n                 })) => {\n                     let body = hir.body(*body_id);\n@@ -4939,7 +4937,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .join(\", \")\n                 }\n                 Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Required(idents)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitFn::Required(idents)),\n                     ..\n                 })) => {\n                     sugg_call = idents"}, {"sha": "23826c845091ff6a24f5f43ebab59d4f28cd783a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -248,7 +248,7 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n     let method_sig = match impl_item.kind {\n-        hir::ImplItemKind::Method(ref sig, _) => Some(sig),\n+        hir::ImplItemKind::Fn(ref sig, _) => Some(sig),\n         _ => None,\n     };\n "}, {"sha": "7594ad5c43a8dde2f77f5dda995c285c394e168a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -745,7 +745,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n     tcx.predicates_of(def_id);\n     let impl_item = tcx.hir().expect_impl_item(impl_item_id);\n     match impl_item.kind {\n-        hir::ImplItemKind::Method(..) => {\n+        hir::ImplItemKind::Fn(..) => {\n             tcx.fn_sig(def_id);\n         }\n         hir::ImplItemKind::TyAlias(_) | hir::ImplItemKind::OpaqueTy(_) => {\n@@ -1127,7 +1127,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             _ => None,\n         },\n         Node::ImplItem(item) => match item.kind {\n-            hir::ImplItemKind::Method(ref sig, _) => {\n+            hir::ImplItemKind::Fn(ref sig, _) => {\n                 has_late_bound_regions(tcx, &item.generics, &sig.decl)\n             }\n             _ => None,\n@@ -1437,12 +1437,12 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Fn(sig, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Fn(sig, TraitFn::Provided(_)),\n             ident,\n             generics,\n             ..\n         })\n-        | ImplItem(hir::ImplItem { kind: ImplItemKind::Method(sig, _), ident, generics, .. })\n+        | ImplItem(hir::ImplItem { kind: ImplItemKind::Fn(sig, _), ident, generics, .. })\n         | Item(hir::Item { kind: ItemKind::Fn(sig, generics, _), ident, .. }) => {\n             match get_infer_ret_ty(&sig.decl.output) {\n                 Some(ty) => {"}, {"sha": "c5d3d276721ffff5f8a4588cb01d2c901408b2e1", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -47,7 +47,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         },\n \n         Node::ImplItem(item) => match item.kind {\n-            ImplItemKind::Method(..) => {\n+            ImplItemKind::Fn(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }"}, {"sha": "54f84272ae8e03830e5b496f7403ea5c24339611", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        if let hir::ImplItemKind::Method(..) = impl_item.kind {\n+        if let hir::ImplItemKind::Fn(..) = impl_item.kind {\n             self.visit_node_helper(impl_item.hir_id);\n         }\n     }"}, {"sha": "3cbb42bb5f30984a2904d05a9f061b62c4434ef5", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -60,7 +60,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n         },\n \n         Node::ImplItem(item) => match item.kind {\n-            hir::ImplItemKind::Method(..) => {}\n+            hir::ImplItemKind::Fn(..) => {}\n \n             _ => unsupported(),\n         },"}, {"sha": "7e6ec96b379d8924249bac47ab6c36f05ed7ebb4", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        if let hir::ImplItemKind::Method(..) = impl_item.kind {\n+        if let hir::ImplItemKind::Fn(..) = impl_item.kind {\n             self.add_inferreds_for_item(impl_item.hir_id);\n         }\n     }"}, {"sha": "c4ad4554a00488cd174a5c7b44bccb7721a9a493", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d7c82e7f277386ce92f4caccb6fd0c48d0a9551/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0d7c82e7f277386ce92f4caccb6fd0c48d0a9551", "patch": "@@ -1084,10 +1084,10 @@ impl Clean<Item> for hir::TraitItem<'_> {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n             }\n-            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                 MethodItem((sig, &self.generics, body, None).clean(cx))\n             }\n-            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });\n@@ -1118,7 +1118,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n             hir::ImplItemKind::Const(ref ty, expr) => {\n                 AssocConstItem(ty.clean(cx), Some(print_const_expr(cx, expr)))\n             }\n-            hir::ImplItemKind::Method(ref sig, body) => {\n+            hir::ImplItemKind::Fn(ref sig, body) => {\n                 MethodItem((sig, &self.generics, body, Some(self.defaultness)).clean(cx))\n             }\n             hir::ImplItemKind::TyAlias(ref ty) => {"}]}