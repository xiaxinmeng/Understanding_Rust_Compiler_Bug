{"sha": "d2e802b827d5020c89e1d3290fe13602386a4b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZTgwMmI4MjdkNTAyMGM4OWUxZDMyOTBmZTEzNjAyMzg2YTRiMzM=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-26T16:29:42Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-26T16:29:42Z"}, "message": "tweak usize::MAX", "tree": {"sha": "77101190ed2525beb544d88cd038192e26419088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77101190ed2525beb544d88cd038192e26419088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e802b827d5020c89e1d3290fe13602386a4b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e802b827d5020c89e1d3290fe13602386a4b33", "html_url": "https://github.com/rust-lang/rust/commit/d2e802b827d5020c89e1d3290fe13602386a4b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e802b827d5020c89e1d3290fe13602386a4b33/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758895718c8883376f9faff883247b8abe937bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/758895718c8883376f9faff883247b8abe937bca", "html_url": "https://github.com/rust-lang/rust/commit/758895718c8883376f9faff883247b8abe937bca"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2b4e35e7653f8ed09bd9c7d9a100a5114ebd57e6", "filename": "vec.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2e802b827d5020c89e1d3290fe13602386a4b33/vec.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2e802b827d5020c89e1d3290fe13602386a4b33/vec.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/vec.md?ref=d2e802b827d5020c89e1d3290fe13602386a4b33", "patch": "@@ -863,8 +863,8 @@ method of RawVec.\n impl<T> RawVec<T> {\n     fn new() -> Self {\n         unsafe {\n-            // -1 is usize::MAX. This branch should be stripped at compile time.\n-            let cap = if mem::size_of::<T>() == 0 { -1 } else { 0 };\n+            // !0 is usize::MAX. This branch should be stripped at compile time.\n+            let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n             // heap::EMPTY doubles as \"unallocated\" and \"zero-sized allocation\"\n             RawVec { ptr: Unique::new(heap::EMPTY as *mut T), cap: cap }\n@@ -1036,8 +1036,8 @@ struct RawVec<T> {\n impl<T> RawVec<T> {\n     fn new() -> Self {\n         unsafe {\n-            // -1 is usize::MAX. This branch should be stripped at compile time.\n-            let cap = if mem::size_of::<T>() == 0 { -1 } else { 0 };\n+            // !0 is usize::MAX. This branch should be stripped at compile time.\n+            let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n             // heap::EMPTY doubles as \"unallocated\" and \"zero-sized allocation\"\n             RawVec { ptr: Unique::new(heap::EMPTY as *mut T), cap: cap }"}]}