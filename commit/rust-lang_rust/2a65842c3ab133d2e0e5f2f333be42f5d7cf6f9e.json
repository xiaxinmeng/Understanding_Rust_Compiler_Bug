{"sha": "2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjU4NDJjM2FiMTMzZDJlMGU1ZjJmMzMzYmU0MmY1ZDdjZjZmOWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-30T22:30:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-30T23:08:45Z"}, "message": "test: De-export aux, bench, compile-fail, and run-fail. rs=deexporting", "tree": {"sha": "630db0baa05c767e1b2280b5ea9d9d25fc5bd9e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630db0baa05c767e1b2280b5ea9d9d25fc5bd9e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "html_url": "https://github.com/rust-lang/rust/commit/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f2aac38936d711dadd0b54ce96b44990c21fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f2aac38936d711dadd0b54ce96b44990c21fd6", "html_url": "https://github.com/rust-lang/rust/commit/77f2aac38936d711dadd0b54ce96b44990c21fd6"}], "stats": {"total": 627, "additions": 218, "deletions": 409}, "files": [{"sha": "96af3203066c7e6c79ae55d9ef7d155d74488886", "filename": "src/test/auxiliary/cci_borrow_lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_borrow_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_borrow_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_borrow_lib.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n-\n-fn foo(x: &uint) -> uint {\n+pub fn foo(x: &uint) -> uint {\n     *x\n }"}, {"sha": "3d39aeffa0a07588af0ea5493fa17701529c4608", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,22 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n-mod kitties {\n-    #[legacy_exports];\n+pub mod kitties {\n+    pub struct cat {\n+      priv mut meows : uint,\n \n-struct cat {\n-  priv mut meows : uint,\n-\n-  how_hungry : int,\n-\n-}\n+      how_hungry : int,\n+    }\n \n-    fn cat(in_x : uint, in_y : int) -> cat  {\n+    pub fn cat(in_x : uint, in_y : int) -> cat  {\n         cat {\n             meows: in_x,\n             how_hungry: in_y\n         }\n     }\n-\n }"}, {"sha": "47cbed741cdd4cc595163a41366b8e5443b2f8d9", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,26 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n+pub mod kitties {\n+    pub struct cat {\n+      priv mut meows : uint,\n \n-mod kitties {\n-    #[legacy_exports];\n+      how_hungry : int,\n \n-struct cat {\n-  priv mut meows : uint,\n-\n-  how_hungry : int,\n-\n-}\n+    }\n \n-    impl cat {\n+    pub impl cat {\n         fn speak() {}\n     }\n-    fn cat(in_x : uint, in_y : int) -> cat {\n+\n+    pub fn cat(in_x : uint, in_y : int) -> cat {\n         cat {\n             meows: in_x,\n             how_hungry: in_y\n         }\n     }\n-\n }\n+"}, {"sha": "ae224684c84543dc6bbd6d6e72a2198fa57c1e2a", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,28 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n+pub mod kitties {\n+    pub struct cat {\n+        priv mut meows : uint,\n \n-mod kitties {\n-    #[legacy_exports];\n-\n-struct cat {\n-  priv mut meows : uint,\n-\n-  how_hungry : int,\n-}\n+        how_hungry : int,\n+    }\n \n-    impl cat {\n+    pub impl cat {\n         fn speak() { self.meows += 1u; }\n         fn meow_count() -> uint { self.meows }\n     }\n \n-    fn cat(in_x : uint, in_y : int) -> cat {\n+    pub fn cat(in_x : uint, in_y : int) -> cat {\n         cat {\n             meows: in_x,\n             how_hungry: in_y\n         }\n     }\n-\n-\n }"}, {"sha": "127562309ce8c76be51b526420398aa010890574", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,35 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n-mod kitties {\n-    #[legacy_exports];\n+pub mod kitties {\n+    pub struct cat {\n+        priv mut meows : uint,\n \n-struct cat {\n-  priv mut meows : uint,\n-\n-  mut how_hungry : int,\n-  name : ~str,\n-}\n-\n-impl cat {\n+        mut how_hungry : int,\n+        name : ~str,\n+    }\n \n-  fn speak() { self.meow(); }\n+    pub impl cat {\n+      fn speak() { self.meow(); }\n \n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n+      fn eat() -> bool {\n+        if self.how_hungry > 0 {\n+            error!(\"OM NOM NOM\");\n+            self.how_hungry -= 2;\n+            return true;\n+        }\n+        else {\n+            error!(\"Not hungry!\");\n+            return false;\n+        }\n+      }\n     }\n-  }\n-}\n \n-    priv impl cat {\n+    pub impl cat {\n         fn meow() {\n             error!(\"Meow\");\n             self.meows += 1u;\n@@ -46,12 +42,11 @@ impl cat {\n         }\n     }\n \n-    fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+    pub fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n         cat {\n             meows: in_x,\n             how_hungry: in_y,\n             name: in_name\n         }\n     }\n-\n }"}, {"sha": "e2564a552790c2fecd4de9c857cccf1594bc02ad", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod kitties {\n-\n+pub mod kitties {\n     pub struct cat {\n         priv mut meows : uint,\n         how_hungry : int,\n     }\n \n-    impl cat {\n+    pub impl cat {\n       priv fn nap() { for uint::range(1, 10000u) |_i|{}}\n     }\n \n@@ -26,4 +25,4 @@ mod kitties {\n         }\n     }\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "f4b27e04c1304c792fded807098ceb5d89422a1f", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,32 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n+pub mod kitties {\n+    pub struct cat<U> {\n+        priv mut info : ~[U],\n+        priv mut meows : uint,\n \n-mod kitties {\n-    #[legacy_exports];\n-\n-struct cat<U> {\n-  priv mut info : ~[U],\n-  priv mut meows : uint,\n-\n-  how_hungry : int,\n-}\n+        how_hungry : int,\n+    }\n \n-    impl<U> cat<U> {\n+    pub impl<U> cat<U> {\n         fn speak<T>(stuff: ~[T]) {\n             self.meows += stuff.len();\n         }\n         fn meow_count() -> uint { self.meows }\n     }\n \n-fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n-    cat {\n-        meows: in_x,\n-        how_hungry: in_y,\n-        info: move in_info\n+    pub fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y,\n+            info: move in_info\n+        }\n     }\n }\n \n-\n-}"}, {"sha": "0363e1afd6086c68ec96fa1f21fb1e524bd98e34", "filename": "src/test/auxiliary/cci_class_trait.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod animals {\n-    #[legacy_exports];\n-\n-trait noisy {\n-  fn speak();\n-}\n-\n+pub mod animals {\n+    pub trait noisy {\n+        fn speak();\n+    }\n }"}, {"sha": "7d126a78dc23c0efc8e5bb34053a7f56a41eb804", "filename": "src/test/auxiliary/cci_intrinsic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_intrinsic.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n #[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    #[legacy_exports];\n+pub extern mod rusti {\n     fn atomic_cxchg(dst: &mut int, old: int, src: int) -> int;\n     fn atomic_cxchg_acq(dst: &mut int, old: int, src: int) -> int;\n     fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n@@ -30,7 +28,7 @@ extern mod rusti {\n }\n \n #[inline(always)]\n-fn atomic_xchg(dst: &mut int, src: int) -> int {\n+pub fn atomic_xchg(dst: &mut int, src: int) -> int {\n     unsafe {\n         rusti::atomic_xchg(dst, src)\n     }"}, {"sha": "6e2c36578ff1cd9fb54a31d7ee44711dd4dc5a70", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,10 +10,9 @@\n \n #[link(name=\"cci_iter_lib\", vers=\"0.0\")];\n #[legacy_modes];\n-#[legacy_exports];\n \n #[inline]\n-fn iter<T>(v: ~[T], f: fn(T)) {\n+pub fn iter<T>(v: ~[T], f: fn(T)) {\n     let mut i = 0u;\n     let n = vec::len(v);\n     while i < n {"}, {"sha": "b3557801b32fd2075d3532768c10ea38a35bd67b", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,19 +9,18 @@\n // except according to those terms.\n \n #[legacy_modes];\n-#[legacy_exports];\n \n use dvec::DVec;\n \n-struct Entry<A,B> {key: A, value: B}\n+pub struct Entry<A,B> {key: A, value: B}\n \n-struct alist<A,B> { eq_fn: fn@(A,A) -> bool, data: DVec<Entry<A,B>> }\n+pub struct alist<A,B> { eq_fn: fn@(A,A) -> bool, data: DVec<Entry<A,B>> }\n \n-fn alist_add<A: Copy, B: Copy>(lst: alist<A,B>, k: A, v: B) {\n+pub fn alist_add<A: Copy, B: Copy>(lst: alist<A,B>, k: A, v: B) {\n     lst.data.push(Entry{key:k, value:v});\n }\n \n-fn alist_get<A: Copy, B: Copy>(lst: alist<A,B>, k: A) -> B {\n+pub fn alist_get<A: Copy, B: Copy>(lst: alist<A,B>, k: A) -> B {\n     let eq_fn = lst.eq_fn;\n     for lst.data.each |entry| {\n         if eq_fn(entry.key, k) { return entry.value; }\n@@ -30,13 +29,13 @@ fn alist_get<A: Copy, B: Copy>(lst: alist<A,B>, k: A) -> B {\n }\n \n #[inline]\n-fn new_int_alist<B: Copy>() -> alist<int, B> {\n+pub fn new_int_alist<B: Copy>() -> alist<int, B> {\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n     return alist {eq_fn: eq_int, data: DVec()};\n }\n \n #[inline]\n-fn new_int_alist_2<B: Copy>() -> alist<int, B> {\n+pub fn new_int_alist_2<B: Copy>() -> alist<int, B> {\n     #[inline]\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n     return alist {eq_fn: eq_int, data: DVec()};"}, {"sha": "0b0492f13b8c5554bbd0aa36dd84be7e108c736e", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n #[link(name=\"cci_no_inline_lib\", vers=\"0.0\")];\n-#[legacy_exports];\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n-fn iter(v: ~[uint], f: fn(uint)) {\n+pub fn iter(v: ~[uint], f: fn(uint)) {\n     let mut i = 0u;\n     let n = vec::len(v);\n     while i < n {\n         f(v[i]);\n         i += 1u;\n     }\n }\n+"}, {"sha": "1a27bce1e02e68f24ca9512ea2a55a5116dfde0c", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,40 +10,31 @@\n \n #[link(name = \"crate_method_reexport_grrrrrrr2\")];\n \n-export rust;\n-\n use name_pool::add;\n \n mod name_pool {\n-    #[legacy_exports];\n-\n-    type name_pool = ();\n+    pub type name_pool = ();\n \n-    trait add {\n+    pub trait add {\n         fn add(s: ~str);\n     }\n \n-    impl name_pool: add {\n+    pub impl name_pool: add {\n         fn add(s: ~str) {\n         }\n     }\n }\n \n-mod rust {\n-    #[legacy_exports];\n-\n+pub mod rust {\n     use name_pool::add;\n-    export add;\n-    export rt;\n-    export cx;\n \n-    type rt = @();\n+    pub type rt = @();\n \n-    trait cx {\n+    pub trait cx {\n         fn cx();\n     }\n \n-    impl rt: cx {\n+    pub impl rt: cx {\n         fn cx() {\n         }\n     }"}, {"sha": "818d4da52ed089587df626474060a47063d8602d", "filename": "src/test/auxiliary/crateresolve1-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 10 }\n+pub fn f() -> int { 10 }"}, {"sha": "6edbcbfdb857e72b7722e24db28aa5a82c2e315c", "filename": "src/test/auxiliary/crateresolve1-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 20 }\n+pub fn f() -> int { 20 }"}, {"sha": "ce23867c2c7ef54de4ae39abe06cdeead47e0f9a", "filename": "src/test/auxiliary/crateresolve1-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.3\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 30 }\n+pub fn f() -> int { 30 }"}, {"sha": "4d0694f473bfccaad43f6a2c1d9b90c4b7f2a5a4", "filename": "src/test/auxiliary/crateresolve2-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 10 }\n+pub fn f() -> int { 10 }"}, {"sha": "4ae0ce0109fc7d8f839f6c984c75c1f651e72322", "filename": "src/test/auxiliary/crateresolve2-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 20 }\n+pub fn f() -> int { 20 }"}, {"sha": "6d401b50f8ca9aace8e6f18af502799ad4cda727", "filename": "src/test/auxiliary/crateresolve2-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-3.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.3\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 30 }\n+pub fn f() -> int { 30 }"}, {"sha": "b890508f74458db83c3eb8bd53d74e78525a45e7", "filename": "src/test/auxiliary/crateresolve3-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 10 }\n+pub fn f() -> int { 10 }"}, {"sha": "f11dc8eb3a01fc4c8552f9cf0a5b2b6e8b17f152", "filename": "src/test/auxiliary/crateresolve3-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve3-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,6 +12,5 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn g() -> int { 20 }\n+pub fn g() -> int { 20 }"}, {"sha": "fcb167de4538bf8c251e78919e9c54b03ecb0209", "filename": "src/test/auxiliary/crateresolve4a-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,6 +10,5 @@\n \n #[link(name = \"crateresolve4a\", vers = \"0.1\")];\n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 10 }\n+pub fn f() -> int { 10 }"}, {"sha": "6b933631c19154130450dca3db37d9b606c691da", "filename": "src/test/auxiliary/crateresolve4a-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4a-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,6 +10,5 @@\n \n #[link(name = \"crateresolve4a\", vers= \"0.2\")];\n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn g() -> int { 20 }\n+pub fn g() -> int { 20 }"}, {"sha": "50de9c89625485e47273c10e462c66a805ec86bf", "filename": "src/test/auxiliary/crateresolve4b-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,8 +12,7 @@\n // aux-build:crateresolve4a-2.rs\n #[link(name = \"crateresolve4b\", vers = \"0.1\")];\n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n extern mod crateresolve4a(vers=\"0.2\");\n \n-fn f() -> int { crateresolve4a::g() }\n+pub fn f() -> int { crateresolve4a::g() }"}, {"sha": "af02498ae7ce377dbb695b36e9da268a678d0645", "filename": "src/test/auxiliary/crateresolve4b-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,8 +12,7 @@\n // aux-build:crateresolve4a-2.rs\n #[link(name = \"crateresolve4b\", vers = \"0.2\")];\n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n extern mod crateresolve4a(vers=\"0.1\");\n \n-fn g() -> int { crateresolve4a::f() }\n+pub fn g() -> int { crateresolve4a::f() }"}, {"sha": "c11e39706f59535a1fb5b58301a8e344f67f46a0", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,18 +12,17 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-struct NameVal { name: ~str, val: int }\n+pub struct NameVal { name: ~str, val: int }\n \n-fn struct_nameval() -> NameVal {\n+pub fn struct_nameval() -> NameVal {\n     NameVal { name: ~\"crateresolve5\", val: 10 }\n }\n \n-enum e {\n+pub enum e {\n     e_val\n }\n \n-fn nominal() -> e { e_val }\n+pub fn nominal() -> e { e_val }\n \n-fn f() -> int { 10 }\n+pub fn f() -> int { 10 }"}, {"sha": "bc57328ac806688e2c4f6d2166ee38991e2b1fb2", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,17 +12,16 @@\n        vers = \"0.2\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-struct NameVal { name: ~str, val: int }\n-fn struct_nameval() -> NameVal {\n+pub struct NameVal { name: ~str, val: int }\n+pub fn struct_nameval() -> NameVal {\n     NameVal { name: ~\"crateresolve5\", val: 10 }\n }\n \n-enum e {\n+pub enum e {\n     e_val\n }\n \n-fn nominal() -> e { e_val }\n+pub fn nominal() -> e { e_val }\n \n-fn f() -> int { 20 }\n+pub fn f() -> int { 20 }"}, {"sha": "3e773622b99a5e24a2b328bd8d933b691f7fe864", "filename": "src/test/auxiliary/crateresolve7x.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,15 +13,12 @@\n // aux-build:crateresolve_calories-2.rs\n \n // These both have the same version but differ in other metadata\n-#[legacy_exports];\n-mod a {\n-    #[legacy_exports];\n+pub mod a {\n     extern mod cr_1 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"100\");\n-    fn f() -> int { cr_1::f() }\n+    pub fn f() -> int { cr_1::f() }\n }\n \n-mod b {\n-    #[legacy_exports];\n+pub mod b {\n     extern mod cr_2 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"200\");\n-    fn f() -> int { cr_2::f() }\n+    pub fn f() -> int { cr_2::f() }\n }"}, {"sha": "827517bf2768ced573c06a09f483e37f6b22f196", "filename": "src/test/auxiliary/crateresolve_calories-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,6 +13,5 @@\n        calories = \"100\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 100 }\n+pub fn f() -> int { 100 }"}, {"sha": "8dc5182c9847fadd145907267f6c0311c15f807e", "filename": "src/test/auxiliary/crateresolve_calories-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,6 +13,5 @@\n        calories = \"200\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-fn f() -> int { 200 }\n+pub fn f() -> int { 200 }"}, {"sha": "7a99b3906363cd33f59f09f814f04305726226bb", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,22 +12,20 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+pub extern mod rustrt {\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-fn fact(n: uint) -> uint {\n+pub fn fact(n: uint) -> uint {\n     unsafe {\n         debug!(\"n = %?\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+pub extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {"}, {"sha": "eb3397a8a5f4626c8dd996b3eae936e0931529aa", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n #[link(name=\"foreign_lib\", vers=\"0.0\")];\n-#[legacy_exports];\n \n-extern mod rustrt {\n-    #[legacy_exports];\n-    fn last_os_error() -> ~str;\n-}\n\\ No newline at end of file\n+pub extern mod rustrt {\n+    pub fn last_os_error() -> ~str;\n+}"}, {"sha": "c0b824618a47cf1d4d4e90a44badb3b523e6c1a4", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,11 +10,10 @@\n \n #[link(name = \"a\", vers = \"0.0\")];\n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-trait i<T> { }\n+pub trait i<T> { }\n \n-fn f<T>() -> i<T> {\n+pub fn f<T>() -> i<T> {\n     impl<T> (): i<T> { }\n \n     () as i::<T>"}, {"sha": "618b9391ba14aecbe1c88d41d65bd8189cf85fb6", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,27 +10,21 @@\n \n #[link(name=\"socketlib\", vers=\"0.0\")];\n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n-mod socket {\n-    #[legacy_exports];\n-\n-export socket_handle;\n-\n-struct socket_handle {\n-    sockfd: libc::c_int,\n-}\n+pub mod socket {\n+    pub struct socket_handle {\n+        sockfd: libc::c_int,\n+    }\n \n-impl socket_handle : Drop {\n-    fn finalize(&self) {\n-        /* c::close(self.sockfd); */\n+    pub impl socket_handle : Drop {\n+        fn finalize(&self) {\n+            /* c::close(self.sockfd); */\n+        }\n     }\n-}\n \n-    fn socket_handle(x: libc::c_int) -> socket_handle {\n+    pub fn socket_handle(x: libc::c_int) -> socket_handle {\n         socket_handle {\n             sockfd: x\n         }\n     }\n-\n }"}, {"sha": "ed8e69cb4da04ae935362212d1372971f2031c66", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,18 +10,12 @@\n \n extern mod issue_2316_a;\n \n-mod cloth {\n-    #[legacy_exports];\n-\n-use issue_2316_a::*;\n-\n-export calico, gingham, flannel;\n-export fabric;\n-\n-enum fabric {\n-  gingham, flannel, calico\n-}\n+pub mod cloth {\n+    use issue_2316_a::*;\n \n+    pub enum fabric {\n+        gingham, flannel, calico\n+    }\n }\n \n "}, {"sha": "5afb2161b413cbba893a0d260977d27eeadacd50", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n-unsafe fn f(xs: ~[int]) {\n-  xs.map(|_x| { unsafe fn q() { fail; } });\n-}\n\\ No newline at end of file\n+pub unsafe fn f(xs: ~[int]) {\n+    xs.map(|_x| { unsafe fn q() { fail; } });\n+}"}, {"sha": "67d3391ed133620d66d6602521b918a71534c02d", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -22,8 +22,7 @@ use core::os;\n // an llvm intrinsic.\n #[nolink]\n extern mod libc {\n-    #[legacy_exports];\n-    fn sqrt(n: float) -> float;\n+    pub fn sqrt(n: float) -> float;\n }\n \n fn main() {"}, {"sha": "dbf2929afe4f87bd0783ebe88e75646de80bd58e", "filename": "src/test/compile-fail/attr-bad-meta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-bad-meta.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,5 +12,4 @@\n \n // asterisk is bogus\n #[attr*]\n-mod m {\n-    #[legacy_exports]; }\n+mod m {}"}, {"sha": "576f9ef677ec3f594a825cfea56c046eb5e3dc45", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern: unresolved name: m1::a\n \n-mod m1 {\n-    #[legacy_exports]; }\n+mod m1 {}\n \n fn main(args: ~[str]) { log(debug, m1::a); }"}, {"sha": "5545bbf68f045a79aedb209a2267ab3e7d4049b9", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,9 +11,7 @@\n // error-pattern: unresolved name: m1::a\n \n mod m1 {\n-    #[legacy_exports];\n-    mod a {\n-        #[legacy_exports]; }\n+    pub mod a {}\n }\n \n fn main(args: ~[str]) { log(debug, m1::a); }"}, {"sha": "130954d3a665501892967e27078040c1a478517d", "filename": "src/test/compile-fail/crateresolve2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -16,8 +16,7 @@\n extern mod crateresolve2(vers = \"0.1\");\n \n mod m {\n-    #[legacy_exports];\n-    extern mod crateresolve2(vers = \"0.2\");\n+    pub extern mod crateresolve2(vers = \"0.2\");\n }\n \n fn main() {"}, {"sha": "7a36decf15136cbce1fb801693d12c7433374d79", "filename": "src/test/compile-fail/empty-linkname.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,5 +12,4 @@\n \n #[link_name = \"\"]\n extern mod foo {\n-    #[legacy_exports];\n }"}, {"sha": "f5f89bd02981c3cc930b0c427cca113027a3d6bd", "filename": "src/test/compile-fail/empty-linkname2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -14,5 +14,4 @@\n #[link_name = \"\"]\n #[nolink]\n extern mod foo {\n-    #[legacy_exports];\n }"}, {"sha": "2ba2ef1c05a044b36c9cb55d4830fab90ea8efc8", "filename": "src/test/compile-fail/export-fully-qualified.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-fully-qualified.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -15,11 +15,7 @@\n // want to change eventually.\n \n mod foo {\n-    #[legacy_exports];\n-\n-    export bar;\n-\n-    fn bar() { foo::baz(); }\n+    pub fn bar() { foo::baz(); }\n \n     fn baz() { }\n }"}, {"sha": "a7578f6104f3516fc41cdc40106148821d58a367", "filename": "src/test/compile-fail/export-import.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-import.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,10 +13,7 @@\n use m::unexported;\n \n mod m {\n-    #[legacy_exports];\n-    export exported;\n-\n-    fn exported() { }\n+    pub fn exported() { }\n \n     fn unexported() { }\n }"}, {"sha": "629699ca6a490c583ce81d560769ae987dcea2dd", "filename": "src/test/compile-fail/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,10 +11,7 @@\n // error-pattern: unresolved name\n \n mod foo {\n-    #[legacy_exports];\n-    export x;\n-\n-    fn x() { }\n+    pub fn x() { }\n \n     enum y { y1, }\n }"}, {"sha": "dec65d4b4f87e79135ab15c3d55355a91b90fb36", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,9 +10,7 @@\n \n // error-pattern: unresolved name\n mod foo {\n-    #[legacy_exports];\n-    export x;\n-    fn x(y: int) { log(debug, y); }\n+    pub fn x(y: int) { log(debug, y); }\n     fn z(y: int) { log(debug, y); }\n }\n "}, {"sha": "61d623cf99a8c89b68c79ed747d48ecf03e9c156", "filename": "src/test/compile-fail/export2.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,19 +11,13 @@\n // error-pattern: unresolved name\n \n mod foo {\n-    #[legacy_exports];\n-    export x;\n-\n-    fn x() { bar::x(); }\n+    pub fn x() { bar::x(); }\n }\n \n mod bar {\n-    #[legacy_exports];\n-    export y;\n-\n     fn x() { debug!(\"x\"); }\n \n-    fn y() { }\n+    pub fn y() { }\n }\n \n fn main() { foo::x(); }"}, {"sha": "7132881ccf6cdaab52740ab053bd99c70dee504d", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,8 +12,7 @@\n \n #[abi = \"cdecl\"]\n extern mod test {\n-    #[legacy_exports];\n-    unsafe fn free();\n+    pub unsafe fn free();\n }\n \n fn main() {"}, {"sha": "ce293d588f36975846d210ad5b52193b2167ea31", "filename": "src/test/compile-fail/foreign-unsafe-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,8 +12,7 @@\n \n #[abi = \"cdecl\"]\n extern mod test {\n-    #[legacy_exports];\n-    unsafe fn free();\n+    pub unsafe fn free();\n }\n \n fn main() {"}, {"sha": "986d19669b91ea917b8a51b4f834278b3b2bdb58", "filename": "src/test/compile-fail/fully-qualified-type-name2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,13 +11,11 @@\n // Test that we use fully-qualified type names in error messages.\n \n mod x {\n-    #[legacy_exports];\n-    enum foo { }\n+    pub enum foo { }\n }\n \n mod y {\n-    #[legacy_exports];\n-    enum foo { }\n+    pub enum foo { }\n }\n \n fn bar(x: x::foo) -> y::foo {"}, {"sha": "ecfec6c27d9a47882d087d32e09dea6bb2c96c7f", "filename": "src/test/compile-fail/import-from-missing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-missing.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,8 +12,7 @@\n use spam::{ham, eggs};\n \n mod spam {\n-    #[legacy_exports];\n-    fn ham() { }\n+    pub fn ham() { }\n }\n \n fn main() { ham(); eggs(); }"}, {"sha": "f7212779263117e0cfd6e6ba900a6a161d93ff76", "filename": "src/test/compile-fail/import-from-rename.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-from-rename.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,9 +13,8 @@\n use baz = foo::{bar};\n \n mod foo {\n-    #[legacy_exports];\n-    fn bar() {}\n+    pub fn bar() {}\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "250f99897407054b1b55a287b03f403b92ff89e2", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,15 +13,10 @@\n use module_of_many_things::*;\n \n mod module_of_many_things {\n-    #[legacy_exports];\n-    export f1;\n-    export f2;\n-    export f4;\n-\n-    fn f1() { debug!(\"f1\"); }\n-    fn f2() { debug!(\"f2\"); }\n+    pub fn f1() { debug!(\"f1\"); }\n+    pub fn f2() { debug!(\"f2\"); }\n     fn f3() { debug!(\"f3\"); }\n-    fn f4() { debug!(\"f4\"); }\n+    pub fn f4() { debug!(\"f4\"); }\n }\n \n "}, {"sha": "a6a173422451c82bc325f2aebfab41bb04785ccb", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,27 +11,18 @@\n // error-pattern: unresolved\n \n mod circ1 {\n-    #[legacy_exports];\n-    use circ1::*;\n-    export f1;\n-    export f2;\n-    export common;\n-    fn f1() { debug!(\"f1\"); }\n-    fn common() -> uint { return 0u; }\n+    pub use circ2::f2;\n+    pub fn f1() { debug!(\"f1\"); }\n+    pub fn common() -> uint { return 0u; }\n }\n \n mod circ2 {\n-    #[legacy_exports];\n-    use circ2::*;\n-    export f1;\n-    export f2;\n-    export common;\n-    fn f2() { debug!(\"f2\"); }\n-    fn common() -> uint { return 1u; }\n+    pub use circ1::f1;\n+    pub fn f2() { debug!(\"f2\"); }\n+    pub fn common() -> uint { return 1u; }\n }\n \n mod test {\n-    #[legacy_exports];\n     use circ1::*;\n \n     fn test() { f1066(); }"}, {"sha": "56ea50a5509d2e8512b10fe98c97f26d79651e97", "filename": "src/test/compile-fail/import-glob-export.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/77f2aac38936d711dadd0b54ce96b44990c21fd6/src%2Ftest%2Fcompile-fail%2Fimport-glob-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f2aac38936d711dadd0b54ce96b44990c21fd6/src%2Ftest%2Fcompile-fail%2Fimport-glob-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-export.rs?ref=77f2aac38936d711dadd0b54ce96b44990c21fd6", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// error-pattern:unresolved name\n-\n-use m1::*;\n-\n-mod m1 {\n-    #[legacy_exports];\n-    export f1;\n-    fn f1() { }\n-    fn f2() { }\n-}\n-\n-fn main() { f2(); }"}, {"sha": "5016cab77233c8f1318c0294e582311f4342b3f9", "filename": "src/test/compile-fail/import-glob-rename.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-rename.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,9 +13,8 @@\n use baz = foo::*;\n \n mod foo {\n-    #[legacy_exports];\n-    fn bar() {}\n+    pub fn bar() {}\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b7bbe11a4dc96b01e5b274d64ef036aa0c75f781", "filename": "src/test/compile-fail/import-loop-2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,15 +11,11 @@\n // error-pattern:import\n \n mod a {\n-    #[legacy_exports];\n-    import b::x;\n-    export x;\n+    pub use b::x;\n }\n \n mod b {\n-    #[legacy_exports];\n-    import a::x;\n-    export x;\n+    pub use a::x;\n \n     fn main() { let y = x; }\n }"}, {"sha": "f9b57f007766e1ea619885f99c82930c38cb387b", "filename": "src/test/compile-fail/import-loop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,9 +13,7 @@\n use y::x;\n \n mod y {\n-    #[legacy_exports];\n-    import x;\n-    export x;\n+    pub use y::x;\n }\n \n fn main() { }"}, {"sha": "7a332868051d22c6eae131e4d9a42636d8f0cd77", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,7 +12,6 @@\n use zed::bar;\n use zed::baz;\n mod zed {\n-    #[legacy_exports];\n-    fn bar() { debug!(\"bar\"); }\n+    pub fn bar() { debug!(\"bar\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "c04bce49d4ade1fe78469f890de6d8dc3ac3e756", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,10 +10,8 @@\n \n // error-pattern: unresolved\n use baz::zed::bar;\n-mod baz {\n-    #[legacy_exports]; }\n+mod baz {}\n mod zed {\n-    #[legacy_exports];\n-    fn bar() { debug!(\"bar3\"); }\n+    pub fn bar() { debug!(\"bar3\"); }\n }\n fn main(args: ~[str]) { bar(); }"}, {"sha": "3029d24af8a610a68f9a18ad0e32ea587558bbe2", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,9 +10,7 @@\n \n // error-pattern: import\n \n-mod a {\n-    #[legacy_exports]; import foo = b::foo; export foo; }\n-mod b {\n-    #[legacy_exports]; import foo = a::foo; export foo; }\n+mod a { pub use b::foo; }\n+mod b { pub use a::foo; }\n \n fn main(args: ~[str]) { debug!(\"loop\"); }"}, {"sha": "37cfc642405dd7642caf9c1c492c4d35b4bf6655", "filename": "src/test/compile-fail/issue-1655.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:expected item\n mod blade_runner {\n-    #[legacy_exports];\n     #~[doc(\n         brief = \"Blade Runner is probably the best movie ever\",\n         desc = \"I like that in the world of Blade Runner it is always"}, {"sha": "56f0c5e3dd06610957d60eba1d4d9bb6abf0a652", "filename": "src/test/compile-fail/issue-2123.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-2123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-2123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2123.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,7 +11,6 @@\n use x = m::f; //~ ERROR failed to resolve import\n \n mod m {\n-    #[legacy_exports];\n }\n \n fn main() {"}, {"sha": "572ceb48fcd5732121494a497167b0325358bc16", "filename": "src/test/compile-fail/issue-2848.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n mod bar {\n-    #[legacy_exports];\n-    enum foo {\n+    pub enum foo {\n         alpha,\n         beta,\n         charlie"}, {"sha": "ba4e25ea952a9b832e53854497468fb934b05547", "filename": "src/test/compile-fail/issue-2937.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2937.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,7 +12,6 @@\n use x = m::f;\n \n mod m {\n-    #[legacy_exports];\n }\n \n fn main() {"}, {"sha": "1acfb753a4f033cc42abee01fa1e915aebe722cf", "filename": "src/test/compile-fail/issue-3099-b.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports]\n-mod a {}\n+pub mod a {}\n \n-#[legacy_exports]\n-mod a {} //~ ERROR duplicate definition of type a\n+pub mod a {} //~ ERROR duplicate definition of type a\n \n fn main() {}"}, {"sha": "2df56a0ab7c22fbc946099ece67a48a5609913ce", "filename": "src/test/compile-fail/keyword.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkeyword.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports]\n-mod break {\n+pub mod break {\n     //~^ ERROR found `break` in ident position\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3dccbe7a1120cf9a20117ae3ff7869c1b9a642f5", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -16,7 +16,6 @@ the compiler output. */\n \n #[link_args = \"aFdEfSeVEEE\"]\n #[nolink]\n-extern mod m1 {\n-    #[legacy_exports]; }\n+extern mod m1 {}\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "1ab8d25bb307d88162a791ab889a089efe4d9763", "filename": "src/test/compile-fail/private-impl-method.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n mod a {\n-    #[legacy_exports];\n-    struct Foo {\n+    pub struct Foo {\n         x: int\n     }\n \n-    impl Foo {\n+    pub impl Foo {\n         priv fn foo() {}\n     }\n }"}, {"sha": "e8038df188b7c471f126cf049f2dedb6c5a3f9ed", "filename": "src/test/compile-fail/private-item-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-item-simple.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n mod a {\n-    #[legacy_exports];\n     priv fn f() {}\n }\n "}, {"sha": "363a5fd0d2b671517038bdde3cc3c8666f691a56", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,25 +11,23 @@\n // error-pattern:method `nap` is private\n \n mod kitties {\n-    #[legacy_exports];\n-struct cat {\n-  priv mut meows : uint,\n+    pub struct cat {\n+        priv mut meows : uint,\n \n-  how_hungry : int,\n-\n-}\n+        how_hungry : int,\n+    }\n \n-impl cat {\n-    priv fn nap() { uint::range(1u, 10000u, |_i| false)}\n-}\n+    pub impl cat {\n+        priv fn nap() { uint::range(1u, 10000u, |_i| false)}\n+    }\n \n-fn cat(in_x : uint, in_y : int) -> cat {\n-    cat {\n-        meows: in_x,\n-        how_hungry: in_y\n+    pub fn cat(in_x : uint, in_y : int) -> cat {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y\n+        }\n     }\n }\n-}\n \n fn main() {\n   let nyan : kitties::cat = kitties::cat(52u, 99);"}, {"sha": "43e7427dd740f66a79a34d1b556505575f99bf33", "filename": "src/test/compile-fail/private-struct-field-ctor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n mod a {\n-    #[legacy_exports];\n-    struct Foo {\n+    pub struct Foo {\n         priv x: int\n     }\n }"}, {"sha": "864c9bd98d7b322ad7e877ec8a3f9d771d09fc8c", "filename": "src/test/compile-fail/private-struct-field-pattern.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -11,12 +11,11 @@\n use a::Foo;\n \n mod a {\n-    #[legacy_exports];\n-    struct Foo {\n+    pub struct Foo {\n         priv x: int\n     }\n \n-    fn make() -> Foo {\n+    pub fn make() -> Foo {\n         Foo { x: 3 }\n     }\n }"}, {"sha": "48e0d85d2a7b3f03a40b1ad5e9bedb0ab89c38b7", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n mod cat {\n-    #[legacy_exports];\n-    struct Cat {\n+    pub struct Cat {\n         priv meows: uint\n     }\n \n-    fn new_cat() -> Cat {\n+    pub fn new_cat() -> Cat {\n         Cat { meows: 52 }\n     }\n }"}, {"sha": "3285997523a710ff038d2962b4c0d41bfea3e42b", "filename": "src/test/compile-fail/private-variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n mod a {\n-    #[legacy_exports];\n-    enum Waffle {\n+    pub enum Waffle {\n         Belgian,\n         Brussels,\n         priv Liege"}, {"sha": "1dc6a93a73f2f53cfad43bc3d6a4776590974de9", "filename": "src/test/compile-fail/redundant-link-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -19,11 +19,9 @@\n #[link_name= \"m\"]\n #[link_args=\"-foo\"]             // this could have been elided.\n extern mod m1 {\n-    #[legacy_exports];\n }\n \n #[link_name= \"m\"]\n #[link_args=\"-bar\"]             // this is the actual error trigger.\n extern mod m2 {\n-    #[legacy_exports];\n }"}, {"sha": "a8bbc24ffd47587f624a9d99b9e8b4a1bc6c4982", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -9,23 +9,22 @@\n // except according to those terms.\n \n mod argparse {\n-    #[legacy_exports];\n     extern mod std;\n \n     use either::{Either, Left, Right};\n \n-    struct Flag {\n+    pub struct Flag {\n         name: &str,\n         desc: &str,\n         max_count: uint,\n         mut value: uint\n     }\n \n-    fn flag(name: &r/str, desc: &r/str) -> Flag/&r {\n+    pub fn flag(name: &r/str, desc: &r/str) -> Flag/&r {\n         Flag { name: name, desc: desc, max_count: 1, value: 0 }\n     }\n \n-    impl Flag {\n+    pub impl Flag {\n         fn set_desc(self, s: &str) -> Flag {\n             Flag { //~ ERROR cannot infer an appropriate lifetime\n                 name: self.name,"}, {"sha": "61503159a2fca20284abc4880b33fd473987a278", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,18 +13,15 @@\n use cal = bar::c::cc;\n \n mod foo {\n-    #[legacy_exports];\n-    type point = {x: int, y: int};\n-    type square = {p: point, h: uint, w: uint};\n+    pub type point = {x: int, y: int};\n+    pub type square = {p: point, h: uint, w: uint};\n }\n \n mod bar {\n-    #[legacy_exports];\n-    mod c {\n-        #[legacy_exports];\n+    pub mod c {\n         use foo::point;\n         use foo::square;\n-        fn cc(p: point) -> str { return 2 * (p.x + p.y); }\n+        pub fn cc(p: point) -> str { return 2 * (p.x + p.y); }\n     }\n }\n "}, {"sha": "4f4d13a2675aa56c3853aac1c3436a8932775270", "filename": "src/test/compile-fail/warn-ctypes-err-attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,9 +13,8 @@\n \n #[nolink]\n extern mod libc {\n-    #[legacy_exports];\n-    fn malloc(size: int) -> *u8;\n+    pub fn malloc(size: int) -> *u8;\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f3d43e1fa3de62acdb9a4a6098e06a165ecc0acd", "filename": "src/test/compile-fail/warn-ctypes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -12,9 +12,8 @@\n // error-pattern:found rust type\n #[nolink]\n extern mod libc {\n-    #[legacy_exports];\n-    fn malloc(size: int) -> *u8;\n+    pub fn malloc(size: int) -> *u8;\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1c312de7726551c38c6fbccd4b8f2aa099ce140c", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -10,9 +10,8 @@\n \n //error-pattern:libc::c_int or libc::c_long should be used\n extern mod xx {\n-    #[legacy_exports];\n-  fn strlen(str: *u8) -> uint;\n-  fn foo(x: int, y: uint);\n+    pub fn strlen(str: *u8) -> uint;\n+    pub fn foo(x: int, y: uint);\n }\n \n fn main() {"}, {"sha": "f84f428bd4e683d6feb6553a83ea8976ab32829a", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -13,9 +13,8 @@\n // Instead the failure will be delivered after the callbacks return.\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn rust_dbg_call(cb: *u8,\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8,\n+                         data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "2b8a8b13eac657b226e55d566c83ad30a28e18f8", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -18,8 +18,7 @@\n extern mod std;\n \n extern mod rustrt {\n-    #[legacy_exports];\n-    fn last_os_error() -> ~str;\n+    pub fn last_os_error() -> ~str;\n }\n \n fn getbig_call_c_and_fail(i: int) {"}, {"sha": "8d229a191b7206ab21a6c1bfd76b6502a84f07f7", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=2a65842c3ab133d2e0e5f2f333be42f5d7cf6f9e", "patch": "@@ -14,10 +14,7 @@\n extern mod std;\n \n mod m {\n-    #[legacy_exports];\n-    export exported;\n-\n-    fn exported() { }\n+    pub fn exported() { }\n \n     #[test]\n     fn unexported() { fail ~\"runned an unexported test\"; }"}]}