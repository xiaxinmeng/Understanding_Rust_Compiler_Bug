{"sha": "794814945674d27a4fb68aedcea86c39dd5ccd4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDgxNDk0NTY3NGQyN2E0ZmI2OGFlZGNlYTg2YzM5ZGQ1Y2NkNGU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-24T20:55:51Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-24T20:58:52Z"}, "message": "treemap: add a find_mut method", "tree": {"sha": "597c35ccc88b4e65b6e407b2a11fd0b8f0a4438b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/597c35ccc88b4e65b6e407b2a11fd0b8f0a4438b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/794814945674d27a4fb68aedcea86c39dd5ccd4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/794814945674d27a4fb68aedcea86c39dd5ccd4e", "html_url": "https://github.com/rust-lang/rust/commit/794814945674d27a4fb68aedcea86c39dd5ccd4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/794814945674d27a4fb68aedcea86c39dd5ccd4e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a56ec8c1342453a88be79e192a11501844375d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/a56ec8c1342453a88be79e192a11501844375d40", "html_url": "https://github.com/rust-lang/rust/commit/a56ec8c1342453a88be79e192a11501844375d40"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "9eba2c7105c1c1cfc9c4351d9a0dadb94ff49ce0", "filename": "src/libcore/container.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/794814945674d27a4fb68aedcea86c39dd5ccd4e/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794814945674d27a4fb68aedcea86c39dd5ccd4e/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=794814945674d27a4fb68aedcea86c39dd5ccd4e", "patch": "@@ -38,9 +38,12 @@ pub trait Map<K, V>: Mutable {\n     /// Iterate over the map and mutate the contained values\n     fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool);\n \n-    /// Return the value corresponding to the key in the map\n+    /// Return a reference to the value corresponding to the key\n     fn find(&self, key: &K) -> Option<&'self V>;\n \n+    /// Return a mutable reference to the value corresponding to the key\n+    //fn find_mut(&mut self, key: &K) -> Option<&'self mut V>;\n+\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map."}, {"sha": "b77037ba3adef6460ad33bd35d7e528caad567c9", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/794814945674d27a4fb68aedcea86c39dd5ccd4e/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794814945674d27a4fb68aedcea86c39dd5ccd4e/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=794814945674d27a4fb68aedcea86c39dd5ccd4e", "patch": "@@ -135,7 +135,7 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n         mutate_values(&mut self.root, f);\n     }\n \n-    /// Return the value corresponding to the key in the map\n+    /// Return a reference to the value corresponding to the key\n     fn find(&self, key: &K) -> Option<&'self V> {\n         let mut current: &'self Option<~TreeNode<K, V>> = &self.root;\n         loop {\n@@ -189,6 +189,12 @@ pub impl<K: TotalOrd, V> TreeMap<K, V> {\n     fn iter(&self) -> TreeMapIterator<'self, K, V> {\n         TreeMapIterator{stack: ~[], node: &self.root}\n     }\n+\n+    /// Return a mutable reference to the value corresponding to the key\n+    #[inline(always)]\n+    fn find_mut(&mut self, key: &K) -> Option<&'self mut V> {\n+        find_mut(&mut self.root, key)\n+    }\n }\n \n /// Lazy forward iterator over a map\n@@ -584,8 +590,20 @@ fn split<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>) {\n     }\n }\n \n-fn insert<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>, key: K,\n-                          value: V) -> bool {\n+fn find_mut<K: TotalOrd, V>(node: &'r mut Option<~TreeNode<K, V>>, key: &K) -> Option<&'r mut V> {\n+    match *node {\n+      Some(ref mut x) => {\n+        match key.cmp(&x.key) {\n+          Less => find_mut(&mut x.left, key),\n+          Greater => find_mut(&mut x.right, key),\n+          Equal => Some(&mut x.value),\n+        }\n+      }\n+      None => None\n+    }\n+}\n+\n+fn insert<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>, key: K, value: V) -> bool {\n     match *node {\n       Some(ref mut save) => {\n         match key.cmp(&save.key) {\n@@ -716,6 +734,19 @@ mod test_treemap {\n         fail_unless!(m.find(&2) == None);\n     }\n \n+    #[test]\n+    fn test_find_mut() {\n+        let mut m = TreeMap::new();\n+        fail_unless!(m.insert(1, 12));\n+        fail_unless!(m.insert(2, 8));\n+        fail_unless!(m.insert(5, 14));\n+        let new = 100;\n+        match m.find_mut(&5) {\n+          None => fail!(), Some(x) => *x = new\n+        }\n+        assert_eq!(m.find(&5), Some(&new));\n+    }\n+\n     #[test]\n     fn insert_replace() {\n         let mut m = TreeMap::new();"}]}