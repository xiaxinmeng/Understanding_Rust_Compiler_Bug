{"sha": "05baf9b10c762dd65407ad13e8b1c72e614fd75e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YmFmOWIxMGM3NjJkZDY1NDA3YWQxM2U4YjFjNzJlNjE0ZmQ3NWU=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-04T20:08:16Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-15T17:55:18Z"}, "message": "Deprecate `str::from_char`\n\nUse `String::from_char` or `.to_str` instead\n\n[breaking-change]", "tree": {"sha": "16c7d1fc1847cf521f28df94d6173e22f0874eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c7d1fc1847cf521f28df94d6173e22f0874eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05baf9b10c762dd65407ad13e8b1c72e614fd75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05baf9b10c762dd65407ad13e8b1c72e614fd75e", "html_url": "https://github.com/rust-lang/rust/commit/05baf9b10c762dd65407ad13e8b1c72e614fd75e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05baf9b10c762dd65407ad13e8b1c72e614fd75e/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20a689483009dd4310a8650e6f0a4acf0134611f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20a689483009dd4310a8650e6f0a4acf0134611f", "html_url": "https://github.com/rust-lang/rust/commit/20a689483009dd4310a8650e6f0a4acf0134611f"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "2d01d138271b58d9ecf3245f58d81466521120a0", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=05baf9b10c762dd65407ad13e8b1c72e614fd75e", "patch": "@@ -125,6 +125,7 @@ pub fn from_utf8_owned(vv: Vec<u8>) -> Result<String, Vec<u8>> {\n /// let string = str::from_byte(104);\n /// assert_eq!(string.as_slice(), \"h\");\n /// ```\n+#[deprecated = \"Replaced by String::from_byte\"]\n pub fn from_byte(b: u8) -> String {\n     assert!(b < 128u8);\n     String::from_char(1, b as char)\n@@ -139,8 +140,9 @@ pub fn from_byte(b: u8) -> String {\n /// let string = str::from_char('b');\n /// assert_eq!(string.as_slice(), \"b\");\n /// ```\n+#[deprecated = \"use String::from_char or char.to_string()\"]\n pub fn from_char(ch: char) -> String {\n-    String::from_char(ch)\n+    String::from_char(1, ch)\n }\n \n /// Convert a vector of chars to a string"}, {"sha": "85b5270e51bae76d83c4e3a4a52021a3d441e91d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=05baf9b10c762dd65407ad13e8b1c72e614fd75e", "patch": "@@ -619,7 +619,7 @@ fn encode_visibility(ebml_w: &mut Encoder, visibility: Visibility) {\n         Public => 'y',\n         Inherited => 'i',\n     };\n-    ebml_w.wr_str(str::from_char(ch).as_slice());\n+    ebml_w.wr_str(ch.to_str().as_slice());\n     ebml_w.end_tag();\n }\n "}, {"sha": "23a7d45e9281167f16c44b5eb7ce58647c90433f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=05baf9b10c762dd65407ad13e8b1c72e614fd75e", "patch": "@@ -525,7 +525,6 @@ static ASCII_UPPER_MAP: &'static [u8] = &[\n mod tests {\n     use prelude::*;\n     use super::*;\n-    use str::from_char;\n     use char::from_u32;\n     use vec::Vec;\n     use str::StrSlice;\n@@ -677,8 +676,8 @@ mod tests {\n         while i <= 500 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n-            assert_eq!(from_char(from_u32(i).unwrap()).as_slice().to_ascii_upper(),\n-                       from_char(from_u32(upper).unwrap()).to_string())\n+            assert_eq!((from_u32(i).unwrap()).to_str().as_slice().to_ascii_upper(),\n+                       (from_u32(upper).unwrap()).to_str())\n             i += 1;\n         }\n     }\n@@ -693,8 +692,8 @@ mod tests {\n         while i <= 500 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n-            assert_eq!(from_char(from_u32(i).unwrap()).as_slice().to_ascii_lower(),\n-                       from_char(from_u32(lower).unwrap()).to_string())\n+            assert_eq!((from_u32(i).unwrap()).to_str().as_slice().to_ascii_lower(),\n+                       (from_u32(lower).unwrap()).to_str())\n             i += 1;\n         }\n     }\n@@ -709,8 +708,8 @@ mod tests {\n         while i <= 500 {\n             let upper = if 'a' as u32 <= i && i <= 'z' as u32 { i + 'A' as u32 - 'a' as u32 }\n                         else { i };\n-            assert_eq!(from_char(from_u32(i).unwrap()).to_string().into_ascii_upper(),\n-                       from_char(from_u32(upper).unwrap()).to_string())\n+            assert_eq!((from_u32(i).unwrap()).to_str().into_ascii_upper(),\n+                       (from_u32(upper).unwrap()).to_str())\n             i += 1;\n         }\n     }\n@@ -726,8 +725,8 @@ mod tests {\n         while i <= 500 {\n             let lower = if 'A' as u32 <= i && i <= 'Z' as u32 { i + 'a' as u32 - 'A' as u32 }\n                         else { i };\n-            assert_eq!(from_char(from_u32(i).unwrap()).to_string().into_ascii_lower(),\n-                       from_char(from_u32(lower).unwrap()).to_string())\n+            assert_eq!((from_u32(i).unwrap()).to_str().into_ascii_lower(),\n+                       (from_u32(lower).unwrap()).to_str())\n             i += 1;\n         }\n     }\n@@ -747,11 +746,8 @@ mod tests {\n             let c = i;\n             let lower = if 'A' as u32 <= c && c <= 'Z' as u32 { c + 'a' as u32 - 'A' as u32 }\n                         else { c };\n-            assert!(from_char(from_u32(i).unwrap()).as_slice()\n-                                                   .eq_ignore_ascii_case(\n-                                                       from_char(\n-                                                           from_u32(lower)\n-                                                            .unwrap()).as_slice()));\n+            assert!((from_u32(i).unwrap()).to_str().as_slice().eq_ignore_ascii_case(\n+                    (from_u32(lower).unwrap()).to_str().as_slice()));\n             i += 1;\n         }\n     }"}, {"sha": "dff67fc32db7b66e81efc6824c08369a6126b552", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=05baf9b10c762dd65407ad13e8b1c72e614fd75e", "patch": "@@ -59,7 +59,7 @@ pub fn get_dbpath_for_term(term: &str) -> Option<Box<Path>> {\n     // Look for the terminal in all of the search directories\n     for p in dirs_to_search.iter() {\n         if p.exists() {\n-            let f = str::from_char(first_char);\n+            let f = first_char.to_str();\n             let newp = p.join_many([f.as_slice(), term]);\n             if newp.exists() {\n                 return Some(box newp);"}, {"sha": "0690b561c44da7741b76e217ec41459b0f9138aa", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05baf9b10c762dd65407ad13e8b1c72e614fd75e/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=05baf9b10c762dd65407ad13e8b1c72e614fd75e", "patch": "@@ -486,9 +486,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n         if c == range.ch {\n             Ok(range.next)\n         } else {\n-            Err(format!(\"Expected {}, found {}\",\n-                str::from_char(c),\n-                str::from_char(range.ch)))\n+            Err(format!(\"Expected {}, found {}\", c, range.ch))\n         }\n     }\n \n@@ -789,7 +787,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n           }\n           '%' => parse_char(s, pos, '%'),\n           ch => {\n-            Err(format!(\"unknown formatting type: {}\", str::from_char(ch)))\n+            Err(format!(\"unknown formatting type: {}\", ch))\n           }\n         }\n     }"}]}