{"sha": "70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwODM5YjdlZjgyMTdmZDAxOWNlNWJkM2E2NDNhOGExNmY1ZmE4Mjk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-13T19:31:27Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-13T19:31:47Z"}, "message": "Make edition handling a bit nicer and allow specifying edition in crate_graph macro", "tree": {"sha": "d6888643048c0cf5738f4ddf756047ad138e500c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6888643048c0cf5738f4ddf756047ad138e500c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "html_url": "https://github.com/rust-lang/rust/commit/70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ad38cbb87103d8713855e0ec705fd957249afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ad38cbb87103d8713855e0ec705fd957249afd", "html_url": "https://github.com/rust-lang/rust/commit/d5ad38cbb87103d8713855e0ec705fd957249afd"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "e45a510b34e8cb0bb88d61ec92ba6adc54961f45", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "patch": "@@ -62,6 +62,15 @@ pub enum Edition {\n     Edition2015,\n }\n \n+impl Edition {\n+    pub fn from_string(s: &str) -> Edition {\n+        match s {\n+            \"2015\" => Edition::Edition2015,\n+            \"2018\" | _ => Edition::Edition2018,\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n struct CrateData {\n     file_id: FileId,"}, {"sha": "f1cad77c5a59c3b609e8c528ac09649f917e9de9", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "patch": "@@ -59,12 +59,12 @@ impl MockDatabase {\n     pub fn set_crate_graph_from_fixture(&mut self, graph: CrateGraphFixture) {\n         let mut ids = FxHashMap::default();\n         let mut crate_graph = CrateGraph::default();\n-        for (crate_name, (crate_root, _)) in graph.0.iter() {\n+        for (crate_name, (crate_root, edition, _)) in graph.0.iter() {\n             let crate_root = self.file_id_of(&crate_root);\n-            let crate_id = crate_graph.add_crate_root(crate_root, Edition::Edition2018);\n+            let crate_id = crate_graph.add_crate_root(crate_root, *edition);\n             ids.insert(crate_name, crate_id);\n         }\n-        for (crate_name, (_, deps)) in graph.0.iter() {\n+        for (crate_name, (_, _, deps)) in graph.0.iter() {\n             let from = ids[crate_name];\n             for dep in deps {\n                 let to = ids[dep];\n@@ -233,16 +233,19 @@ impl MockDatabase {\n }\n \n #[derive(Default)]\n-pub struct CrateGraphFixture(pub FxHashMap<String, (String, Vec<String>)>);\n+pub struct CrateGraphFixture(pub FxHashMap<String, (String, Edition, Vec<String>)>);\n \n #[macro_export]\n macro_rules! crate_graph {\n-    ($($crate_name:literal: ($crate_path:literal, [$($dep:literal),*]),)*) => {{\n+    ($($crate_name:literal: ($crate_path:literal, $($edition:literal,)? [$($dep:literal),*]),)*) => {{\n         let mut res = $crate::mock::CrateGraphFixture::default();\n         $(\n+            #[allow(unused_mut, unused_assignments)]\n+            let mut edition = ra_db::Edition::Edition2018;\n+            $(edition = ra_db::Edition::from_string($edition);)?\n             res.0.insert(\n                 $crate_name.to_string(),\n-                ($crate_path.to_string(), vec![$($dep.to_string()),*])\n+                ($crate_path.to_string(), edition, vec![$($dep.to_string()),*])\n             );\n         )*\n         res"}, {"sha": "e764e0855de5aef2ad1c22cb2a8a81e8ccd935e0", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "patch": "@@ -267,7 +267,6 @@ fn glob_across_crates() {\n \n #[test]\n fn edition_2015_imports() {\n-    use ra_db::{CrateGraph, Edition};\n     let mut db = MockDatabase::with_files(\n         \"\n         //- /main.rs\n@@ -285,17 +284,12 @@ fn edition_2015_imports() {\n         struct FromLib;\n     \",\n     );\n-    let main_id = db.file_id_of(\"/main.rs\");\n-    let lib_id = db.file_id_of(\"/lib.rs\");\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", \"2015\", [\"other_crate\"]),\n+        \"other_crate\": (\"/lib.rs\", \"2018\", []),\n+    });\n     let foo_id = db.file_id_of(\"/foo.rs\");\n \n-    let mut crate_graph = CrateGraph::default();\n-    let main_crate = crate_graph.add_crate_root(main_id, Edition::Edition2015);\n-    let lib_crate = crate_graph.add_crate_root(lib_id, Edition::Edition2018);\n-    crate_graph.add_dep(main_crate, \"other_crate\".into(), lib_crate).unwrap();\n-\n-    db.set_crate_graph(Arc::new(crate_graph));\n-\n     let module = crate::source_binder::module_from_file_id(&db, foo_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n     let item_map = db.item_map(krate);"}, {"sha": "81cb506b73a7a219fb6a406e7a38f3f662fd9c76", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "patch": "@@ -4,6 +4,7 @@ use cargo_metadata::{MetadataCommand, CargoOpt};\n use ra_arena::{Arena, RawId, impl_arena_id};\n use rustc_hash::FxHashMap;\n use failure::format_err;\n+use ra_db::Edition;\n \n use crate::Result;\n \n@@ -35,7 +36,7 @@ struct PackageData {\n     targets: Vec<Target>,\n     is_member: bool,\n     dependencies: Vec<PackageDependency>,\n-    edition: String,\n+    edition: Edition,\n }\n \n #[derive(Debug, Clone)]\n@@ -85,8 +86,8 @@ impl Package {\n     pub fn root(self, ws: &CargoWorkspace) -> &Path {\n         ws.packages[self].manifest.parent().unwrap()\n     }\n-    pub fn edition(self, ws: &CargoWorkspace) -> &str {\n-        &ws.packages[self].edition\n+    pub fn edition(self, ws: &CargoWorkspace) -> Edition {\n+        ws.packages[self].edition\n     }\n     pub fn targets<'a>(self, ws: &'a CargoWorkspace) -> impl Iterator<Item = Target> + 'a {\n         ws.packages[self].targets.iter().cloned()\n@@ -139,7 +140,7 @@ impl CargoWorkspace {\n                 manifest: meta_pkg.manifest_path.clone(),\n                 targets: Vec::new(),\n                 is_member,\n-                edition: meta_pkg.edition,\n+                edition: Edition::from_string(&meta_pkg.edition),\n                 dependencies: Vec::new(),\n             });\n             let pkg_data = &mut packages[pkg];"}, {"sha": "1b18ac8361e03c6024f6dfad2a226c21e9b4b93e", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70839b7ef8217fd019ce5bd3a643a8a16f5fa829/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=70839b7ef8217fd019ce5bd3a643a8a16f5fa829", "patch": "@@ -63,11 +63,7 @@ impl ProjectWorkspace {\n             for tgt in pkg.targets(&self.cargo) {\n                 let root = tgt.root(&self.cargo);\n                 if let Some(file_id) = load(root) {\n-                    let edition = if pkg.edition(&self.cargo) == \"2015\" {\n-                        Edition::Edition2015\n-                    } else {\n-                        Edition::Edition2018\n-                    };\n+                    let edition = pkg.edition(&self.cargo);\n                     let crate_id = crate_graph.add_crate_root(file_id, edition);\n                     if tgt.kind(&self.cargo) == TargetKind::Lib {\n                         lib_tgt = Some(crate_id);"}]}