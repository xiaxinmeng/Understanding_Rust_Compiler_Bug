{"sha": "54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MzM3ZmFiMzlmNGM2MTBiZDVlNWM1MWNlYTZhOTY1ZTdiZDdjZGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-12T20:54:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-24T05:58:37Z"}, "message": "compiletest: support '--pass check' and '// ignore-pass'.", "tree": {"sha": "e0b04c259c1103c8e47849e2726eaa50bef46906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b04c259c1103c8e47849e2726eaa50bef46906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "html_url": "https://github.com/rust-lang/rust/commit/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a56a6d7525464b4fd7779927b57e67b750f1a831", "url": "https://api.github.com/repos/rust-lang/rust/commits/a56a6d7525464b4fd7779927b57e67b750f1a831", "html_url": "https://github.com/rust-lang/rust/commit/a56a6d7525464b4fd7779927b57e67b750f1a831"}], "stats": {"total": 111, "additions": 89, "deletions": 22}, "files": [{"sha": "a75d9f0b0bb9bba12f4e75d05b7a6d9d874816f7", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "patch": "@@ -99,6 +99,36 @@ impl fmt::Display for Mode {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Debug, Hash)]\n+pub enum PassMode {\n+    Check,\n+    Build,\n+    Run,\n+}\n+\n+impl FromStr for PassMode {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        match s {\n+            \"check\" => Ok(PassMode::Check),\n+            \"build\" => Ok(PassMode::Build),\n+            \"run\" => Ok(PassMode::Run),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for PassMode {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let s = match *self {\n+            PassMode::Check => \"check\",\n+            PassMode::Build => \"build\",\n+            PassMode::Run => \"run\",\n+        };\n+        fmt::Display::fmt(s, f)\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq)]\n pub enum CompareMode {\n     Nll,\n@@ -184,6 +214,9 @@ pub struct Config {\n     /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,\n \n+    /// Force the pass mode of a check/build/run-pass test to this mode.\n+    pub force_pass_mode: Option<PassMode>,\n+\n     /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n "}, {"sha": "8202218f7d1cc612e84902f5e063573ad7c7a3b4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "patch": "@@ -6,7 +6,7 @@ use std::path::{Path, PathBuf};\n \n use log::*;\n \n-use crate::common::{self, CompareMode, Config, Mode};\n+use crate::common::{self, CompareMode, Config, Mode, PassMode};\n use crate::util;\n \n use crate::extract_gdb_version;\n@@ -290,13 +290,6 @@ impl EarlyProps {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n-pub enum PassMode {\n-    Check,\n-    Build,\n-    Run,\n-}\n-\n #[derive(Clone, Debug)]\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n@@ -358,6 +351,8 @@ pub struct TestProps {\n     pub incremental_dir: Option<PathBuf>,\n     // How far should the test proceed while still passing.\n     pub pass_mode: Option<PassMode>,\n+    // Ignore `--pass` overrides from the command line for this test.\n+    pub ignore_pass: bool,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n     // Do not pass `-Z ui-testing` to UI tests\n@@ -400,6 +395,7 @@ impl TestProps {\n             forbid_output: vec![],\n             incremental_dir: None,\n             pass_mode: None,\n+            ignore_pass: false,\n             check_test_line_numbers_match: false,\n             disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n@@ -528,6 +524,10 @@ impl TestProps {\n \n             self.update_pass_mode(ln, cfg, config);\n \n+            if !self.ignore_pass {\n+                self.ignore_pass = config.parse_ignore_pass(ln);\n+            }\n+\n             if !self.disable_ui_testing_normalization {\n                 self.disable_ui_testing_normalization =\n                     config.parse_disable_ui_testing_normalization(ln);\n@@ -743,6 +743,10 @@ impl Config {\n         self.parse_name_directive(line, \"check-test-line-numbers-match\")\n     }\n \n+    fn parse_ignore_pass(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"ignore-pass\")\n+    }\n+\n     fn parse_assembly_output(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"assembly-output\")\n             .map(|r| r.trim().to_string())"}, {"sha": "288853d5e18665caa00726b8079e33f353f390f6", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "patch": "@@ -5,7 +5,7 @@\n \n extern crate test;\n \n-use crate::common::CompareMode;\n+use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, output_base_dir, output_relative_path, UI_EXTENSIONS};\n use crate::common::{Config, TestPaths};\n use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n@@ -128,6 +128,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"(compile-fail|run-fail|run-pass|\\\n              run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\",\n         )\n+        .optopt(\n+            \"\",\n+            \"pass\",\n+            \"force {check,build,run}-pass tests to this mode.\",\n+            \"check | build | run\"\n+        )\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n         .optflag(\"\", \"exact\", \"filters match exactly\")\n         .optopt(\n@@ -320,6 +326,10 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         run_ignored,\n         filter: matches.free.first().cloned(),\n         filter_exact: matches.opt_present(\"exact\"),\n+        force_pass_mode: matches.opt_str(\"pass\").map(|mode|\n+            mode.parse::<PassMode>()\n+                .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given.\", mode))\n+        ),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n@@ -382,6 +392,10 @@ pub fn log_config(config: &Config) {\n         ),\n     );\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n+    logv(c, format!(\n+        \"force_pass_mode: {}\",\n+        opt_str(&config.force_pass_mode.map(|m| format!(\"{}\", m))),\n+    ));\n     logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n     logv(\n         c,"}, {"sha": "270420991e9f505e70e12db8103fd01ceaf34d00", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54337fab39f4c610bd5e5c51cea6a965e7bd7cdb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=54337fab39f4c610bd5e5c51cea6a965e7bd7cdb", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-filelength\n \n-use crate::common::CompareMode;\n+use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, Rustdoc};\n@@ -10,7 +10,7 @@ use crate::common::{Config, TestPaths};\n use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest, Assembly};\n use diff;\n use crate::errors::{self, Error, ErrorKind};\n-use crate::header::{TestProps, PassMode};\n+use crate::header::TestProps;\n use crate::json;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n@@ -211,6 +211,7 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n         props: &props,\n         testpaths,\n         revision: revision,\n+        is_aux: false,\n     };\n     create_dir_all(&cx.output_base_dir()).unwrap();\n \n@@ -229,6 +230,7 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n                 props: &revision_props,\n                 testpaths,\n                 revision: Some(revision),\n+                is_aux: false,\n             };\n             rev_cx.run_revision();\n         }\n@@ -260,6 +262,10 @@ pub fn compute_stamp_hash(config: &Config) -> String {\n         env::var_os(\"PYTHONPATH\").hash(&mut hash);\n     }\n \n+    if let Ui | RunPass = config.mode {\n+        config.force_pass_mode.hash(&mut hash);\n+    }\n+\n     format!(\"{:x}\", hash.finish())\n }\n \n@@ -268,6 +274,7 @@ struct TestCx<'test> {\n     props: &'test TestProps,\n     testpaths: &'test TestPaths,\n     revision: Option<&'test str>,\n+    is_aux: bool,\n }\n \n struct DebuggerCommands {\n@@ -309,10 +316,18 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn effective_pass_mode(&self) -> Option<PassMode> {\n+        if !self.props.ignore_pass {\n+            if let (mode @ Some(_), Some(_)) = (self.config.force_pass_mode, self.props.pass_mode) {\n+                return mode;\n+            }\n+        }\n+        self.props.pass_mode\n+    }\n+\n     fn should_run_successfully(&self) -> bool {\n         match self.config.mode {\n-            RunPass => true,\n-            Ui => self.props.pass_mode == Some(PassMode::Run),\n+            RunPass | Ui => self.effective_pass_mode() == Some(PassMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n@@ -1563,6 +1578,7 @@ impl<'test> TestCx<'test> {\n                     props: &aux_props,\n                     testpaths: &aux_testpaths,\n                     revision: self.revision,\n+                    is_aux: true,\n                 };\n                 // Create the directory for the stdout/stderr files.\n                 create_dir_all(aux_cx.output_base_dir()).unwrap();\n@@ -1732,6 +1748,7 @@ impl<'test> TestCx<'test> {\n                 props: &aux_props,\n                 testpaths: &aux_testpaths,\n                 revision: self.revision,\n+                is_aux: true,\n             };\n             // Create the directory for the stdout/stderr files.\n             create_dir_all(aux_cx.output_base_dir()).unwrap();\n@@ -1871,7 +1888,11 @@ impl<'test> TestCx<'test> {\n         result\n     }\n \n-    fn make_compile_args(&self, input_file: &Path, output_file: TargetLocation) -> Command {\n+    fn make_compile_args(\n+        &self,\n+        input_file: &Path,\n+        output_file: TargetLocation,\n+    ) -> Command {\n         let is_rustdoc = self.config.src_base.ends_with(\"rustdoc-ui\") ||\n                          self.config.src_base.ends_with(\"rustdoc-js\");\n         let mut rustc = if !is_rustdoc {\n@@ -1968,14 +1989,8 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        if self.props.pass_mode == Some(PassMode::Check) {\n-            assert!(\n-                !self\n-                    .props\n-                    .compile_flags\n-                    .iter()\n-                    .any(|s| s.starts_with(\"--emit\"))\n-            );\n+        let pass_mode = if self.is_aux { self.props.pass_mode } else { self.effective_pass_mode() };\n+        if let Some(PassMode::Check) = pass_mode {\n             rustc.args(&[\"--emit\", \"metadata\"]);\n         }\n \n@@ -2713,6 +2728,7 @@ impl<'test> TestCx<'test> {\n             props: &revision_props,\n             testpaths: self.testpaths,\n             revision: self.revision,\n+            is_aux: false,\n         };\n \n         if self.config.verbose {"}]}