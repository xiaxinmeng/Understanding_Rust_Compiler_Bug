{"sha": "ef20dfc78d2092f8b99db6716dde1928b15133a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMjBkZmM3OGQyMDkyZjhiOTlkYjY3MTZkZGUxOTI4YjE1MTMzYTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-11T10:22:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-11T10:22:57Z"}, "message": "Merge #5707\n\n5707: Address some FIXMEs for ra_assists r=jonas-schievink a=JmPotato\n\nSigned-off-by: JmPotato <ghzpotato@gmail.com>\n\nCo-authored-by: JmPotato <ghzpotato@gmail.com>", "tree": {"sha": "bcbead004c66dd50ee8b8a1628097a58872168bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcbead004c66dd50ee8b8a1628097a58872168bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef20dfc78d2092f8b99db6716dde1928b15133a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMnGBCRBK7hj4Ov3rIwAAdHIIAEb6h2MzIZ3oiXbUqPXaG6+4\nKIju4iM5vYIFDU7LnmKlpz8jKA5A0kk3kc3StrbzSkfIcG0+H9C5v99dUbtyvwlc\nCtV0TgZIdBYjKx8hScuNFTEKsEh2U6/tV0sOPvqrg6pSfqoHis+7RBihCGEs5ePR\n6gz0k5V1XxOU7I3M8q2e8R4rl5BWjYdZxBvE5p3/w/KNcugXNw5s5M7Q2KhqCKjS\nPSpqwJvrFKT1Hn3obERN3iiajQC9nOIECXKez2iMmje3NshEsiy4jxWavXXV34Vu\nESTqg+eRkCbkE3LtY4V8OMnQmqQuYXPJcHQV3LHw/xEIwoIVfQzT2QsJTp0KyMM=\n=83VZ\n-----END PGP SIGNATURE-----\n", "payload": "tree bcbead004c66dd50ee8b8a1628097a58872168bc\nparent 61ee051455fdfd64ceca21960c5480be3b97fbf0\nparent 6ef019bd4601b9dc36325e096d066a4ddbda1bdf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597141377 +0000\ncommitter GitHub <noreply@github.com> 1597141377 +0000\n\nMerge #5707\n\n5707: Address some FIXMEs for ra_assists r=jonas-schievink a=JmPotato\n\nSigned-off-by: JmPotato <ghzpotato@gmail.com>\n\nCo-authored-by: JmPotato <ghzpotato@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef20dfc78d2092f8b99db6716dde1928b15133a0", "html_url": "https://github.com/rust-lang/rust/commit/ef20dfc78d2092f8b99db6716dde1928b15133a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef20dfc78d2092f8b99db6716dde1928b15133a0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61ee051455fdfd64ceca21960c5480be3b97fbf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ee051455fdfd64ceca21960c5480be3b97fbf0", "html_url": "https://github.com/rust-lang/rust/commit/61ee051455fdfd64ceca21960c5480be3b97fbf0"}, {"sha": "6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef019bd4601b9dc36325e096d066a4ddbda1bdf", "html_url": "https://github.com/rust-lang/rust/commit/6ef019bd4601b9dc36325e096d066a4ddbda1bdf"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "07c978378a6900d887155f0cd01d38325da28d2f", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=ef20dfc78d2092f8b99db6716dde1928b15133a0", "patch": "@@ -51,7 +51,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             // this is a trait impl, so we need to skip the first type parameter -- this is a bit hacky\n             .skip(1)\n             // The actual list of trait type parameters may be longer than the one\n-            // used in the `impl` block due to trailing default type parametrs.\n+            // used in the `impl` block due to trailing default type parameters.\n             // For that case we extend the `substs` with an empty iterator so we\n             // can still hit those trailing values and check if they actually have\n             // a default type. If they do, go for that type from `hir` to `ast` so"}, {"sha": "890996a68d9bd347f2da0c092c287c1d418b13e5", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=ef20dfc78d2092f8b99db6716dde1928b15133a0", "patch": "@@ -66,13 +66,13 @@ pub struct GroupLabel(pub String);\n \n #[derive(Debug, Clone)]\n pub struct Assist {\n-    pub id: AssistId,\n+    id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n-    pub label: String,\n-    pub group: Option<GroupLabel>,\n+    label: String,\n+    group: Option<GroupLabel>,\n     /// Target ranges are used to sort assists: the smaller the target range,\n     /// the more specific assist is, and so it should be sorted first.\n-    pub target: TextRange,\n+    target: TextRange,\n }\n \n #[derive(Debug, Clone)]\n@@ -120,10 +120,25 @@ impl Assist {\n         group: Option<GroupLabel>,\n         target: TextRange,\n     ) -> Assist {\n-        // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n         Assist { id, label, group, target }\n     }\n+\n+    pub fn id(&self) -> AssistId {\n+        self.id\n+    }\n+\n+    pub fn label(&self) -> String {\n+        self.label.clone()\n+    }\n+\n+    pub fn group(&self) -> Option<GroupLabel> {\n+        self.group.clone()\n+    }\n+\n+    pub fn target(&self) -> TextRange {\n+        self.target\n+    }\n }\n \n mod handlers {"}, {"sha": "e738364220d6dc8160c669b26fcafd9756105892", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=ef20dfc78d2092f8b99db6716dde1928b15133a0", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_\n \n // FIXME: instead of having a separate function here, maybe use\n // `extract_ranges` and mark the target as `<target> </target>` in the\n-// fixuture?\n+// fixture?\n pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n     check(assist, ra_fixture, ExpectedResult::Target(target));\n }"}, {"sha": "aefe47bd32acc819d310bd05e910dac0fc54f9c5", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=ef20dfc78d2092f8b99db6716dde1928b15133a0", "patch": "@@ -17,7 +17,7 @@ pub struct Hygiene {\n     // This is what `$crate` expands to\n     def_crate: Option<CrateId>,\n \n-    // Indiciate this is a local inner macro\n+    // Indicate this is a local inner macro\n     local_inner: bool,\n }\n "}, {"sha": "8bb735fc62544452ff37dc1f604b7b364a4003eb", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=ef20dfc78d2092f8b99db6716dde1928b15133a0", "patch": "@@ -44,7 +44,8 @@ mod test_db;\n /// containing the call plus the offset of the macro call in the file. Note that\n /// this is a recursive definition! However, the size_of of `HirFileId` is\n /// finite (because everything bottoms out at the real `FileId`) and small\n-/// (`MacroCallId` uses the location interner).\n+/// (`MacroCallId` uses the location interning. You can check details here:\n+/// https://en.wikipedia.org/wiki/String_interning).\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct HirFileId(HirFileIdRepr);\n "}, {"sha": "c2afcf192dedbc0c3040b0d41fc6700e70f27435", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=ef20dfc78d2092f8b99db6716dde1928b15133a0", "patch": "@@ -864,7 +864,7 @@ pub(crate) fn handle_resolve_code_action(\n     let (id_string, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n-    assert!(assist.assist.id.0 == id_string);\n+    assert!(assist.assist.id().0 == id_string);\n     Ok(to_proto::resolved_code_action(&snap, assist.clone())?.edit)\n }\n "}, {"sha": "62fda8a1f20cffd0e23a65726d2bcc36cc2f2dcb", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef20dfc78d2092f8b99db6716dde1928b15133a0/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=ef20dfc78d2092f8b99db6716dde1928b15133a0", "patch": "@@ -704,10 +704,10 @@ pub(crate) fn unresolved_code_action(\n     index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n-        title: assist.label,\n-        id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n-        group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n-        kind: Some(code_action_kind(assist.id.1)),\n+        title: assist.label(),\n+        id: Some(format!(\"{}:{}\", assist.id().0.to_owned(), index.to_string())),\n+        group: assist.group().filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n+        kind: Some(code_action_kind(assist.id().1)),\n         edit: None,\n         is_preferred: None,\n     };"}]}