{"sha": "20ccabc01de7306f44e0b2a460152f0c97f19d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwY2NhYmMwMWRlNzMwNmY0NGUwYjJhNDYwMTUyZjBjOTdmMTlkNzY=", "commit": {"author": {"name": "Gabriel Luo", "email": "luogm@umich.edu", "date": "2019-12-11T03:18:05Z"}, "committer": {"name": "Gabriel Luo", "email": "luogm@umich.edu", "date": "2019-12-11T03:18:05Z"}, "message": "Fixed #2250\n\nTuple in type annotation expands correctly;\nExpansion will prefer the following delimiter when possible. \nNew regression tests added to verify the consistency between tuple expansion in type annotation and tuple expansion in rvalue.", "tree": {"sha": "b5a6ae0efb25d4f9a4cb69e626d0600838ccd842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a6ae0efb25d4f9a4cb69e626d0600838ccd842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ccabc01de7306f44e0b2a460152f0c97f19d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ccabc01de7306f44e0b2a460152f0c97f19d76", "html_url": "https://github.com/rust-lang/rust/commit/20ccabc01de7306f44e0b2a460152f0c97f19d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ccabc01de7306f44e0b2a460152f0c97f19d76/comments", "author": {"login": "gab-umich", "id": 24768277, "node_id": "MDQ6VXNlcjI0NzY4Mjc3", "avatar_url": "https://avatars.githubusercontent.com/u/24768277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gab-umich", "html_url": "https://github.com/gab-umich", "followers_url": "https://api.github.com/users/gab-umich/followers", "following_url": "https://api.github.com/users/gab-umich/following{/other_user}", "gists_url": "https://api.github.com/users/gab-umich/gists{/gist_id}", "starred_url": "https://api.github.com/users/gab-umich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gab-umich/subscriptions", "organizations_url": "https://api.github.com/users/gab-umich/orgs", "repos_url": "https://api.github.com/users/gab-umich/repos", "events_url": "https://api.github.com/users/gab-umich/events{/privacy}", "received_events_url": "https://api.github.com/users/gab-umich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gab-umich", "id": 24768277, "node_id": "MDQ6VXNlcjI0NzY4Mjc3", "avatar_url": "https://avatars.githubusercontent.com/u/24768277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gab-umich", "html_url": "https://github.com/gab-umich", "followers_url": "https://api.github.com/users/gab-umich/followers", "following_url": "https://api.github.com/users/gab-umich/following{/other_user}", "gists_url": "https://api.github.com/users/gab-umich/gists{/gist_id}", "starred_url": "https://api.github.com/users/gab-umich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gab-umich/subscriptions", "organizations_url": "https://api.github.com/users/gab-umich/orgs", "repos_url": "https://api.github.com/users/gab-umich/repos", "events_url": "https://api.github.com/users/gab-umich/events{/privacy}", "received_events_url": "https://api.github.com/users/gab-umich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee904594af174866cfa10474fd8fd3f23580b6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee904594af174866cfa10474fd8fd3f23580b6af", "html_url": "https://github.com/rust-lang/rust/commit/ee904594af174866cfa10474fd8fd3f23580b6af"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "c096ca6ae44949033e7d58b410285bf3ca1550a9", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 66, "deletions": 12, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/20ccabc01de7306f44e0b2a460152f0c97f19d76/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ccabc01de7306f44e0b2a460152f0c97f19d76/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=20ccabc01de7306f44e0b2a460152f0c97f19d76", "patch": "@@ -34,6 +34,7 @@ fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n         ARG_LIST,\n         ARRAY_EXPR,\n         TUPLE_EXPR,\n+        TUPLE_TYPE,\n         WHERE_CLAUSE,\n     ];\n \n@@ -174,12 +175,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n         TYPE_BOUND => T![+],\n         _ => T![,],\n     };\n-    if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Prev) {\n-        return Some(TextRange::from_to(\n-            delimiter_node.text_range().start(),\n-            node.text_range().end(),\n-        ));\n-    }\n+\n     if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Next) {\n         // Include any following whitespace when delimiter is after list item.\n         let final_node = delimiter_node\n@@ -190,6 +186,12 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n \n         return Some(TextRange::from_to(node.text_range().start(), final_node.text_range().end()));\n     }\n+    if let Some(delimiter_node) = nearby_delimiter(delimiter, node, Direction::Prev) {\n+        return Some(TextRange::from_to(\n+            delimiter_node.text_range().start(),\n+            node.text_range().end(),\n+        ));\n+    }\n \n     None\n }\n@@ -250,14 +252,14 @@ mod tests {\n     fn test_extend_selection_list() {\n         do_check(r#\"fn foo(<|>x: i32) {}\"#, &[\"x\", \"x: i32\"]);\n         do_check(r#\"fn foo(<|>x: i32, y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32, \"]);\n-        do_check(r#\"fn foo(<|>x: i32,y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32,\"]);\n+        do_check(r#\"fn foo(<|>x: i32,y: i32) {}\"#, &[\"x\", \"x: i32\", \"x: i32,\", \"(x: i32,y: i32)\"]);\n         do_check(r#\"fn foo(x: i32, <|>y: i32) {}\"#, &[\"y\", \"y: i32\", \", y: i32\"]);\n-        do_check(r#\"fn foo(x: i32, <|>y: i32, ) {}\"#, &[\"y\", \"y: i32\", \", y: i32\"]);\n+        do_check(r#\"fn foo(x: i32, <|>y: i32, ) {}\"#, &[\"y\", \"y: i32\", \"y: i32, \"]);\n         do_check(r#\"fn foo(x: i32,<|>y: i32) {}\"#, &[\"y\", \"y: i32\", \",y: i32\"]);\n \n         do_check(r#\"const FOO: [usize; 2] = [ 22<|> , 33];\"#, &[\"22\", \"22 , \"]);\n         do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|>];\"#, &[\"33\", \", 33\"]);\n-        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|> ,];\"#, &[\"33\", \", 33\"]);\n+        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|> ,];\"#, &[\"33\", \"33 ,\", \"[ 22 , 33 ,]\"]);\n \n         do_check(r#\"fn main() { (1, 2<|>) }\"#, &[\"2\", \", 2\", \"(1, 2)\"]);\n \n@@ -276,7 +278,7 @@ const FOO: [usize; 2] = [\n     22\n     , 33<|>,\n ]\"#,\n-            &[\"33\", \", 33\"],\n+            &[\"33\", \"33,\"],\n         );\n     }\n \n@@ -424,7 +426,7 @@ fn foo<R>()\n         do_check(r#\"fn foo<T>() where T: <|>Copy +Display\"#, &[\"Copy\", \"Copy +\"]);\n         do_check(r#\"fn foo<T>() where T: <|>Copy+Display\"#, &[\"Copy\", \"Copy+\"]);\n         do_check(r#\"fn foo<T>() where T: Copy + <|>Display\"#, &[\"Display\", \"+ Display\"]);\n-        do_check(r#\"fn foo<T>() where T: Copy + <|>Display + Sync\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T>() where T: Copy + <|>Display + Sync\"#, &[\"Display\", \"Display + \"]);\n         do_check(r#\"fn foo<T>() where T: Copy +<|>Display\"#, &[\"Display\", \"+Display\"]);\n     }\n \n@@ -435,7 +437,7 @@ fn foo<R>()\n         do_check(r#\"fn foo<T: <|>Copy +Display>() {}\"#, &[\"Copy\", \"Copy +\"]);\n         do_check(r#\"fn foo<T: <|>Copy+Display>() {}\"#, &[\"Copy\", \"Copy+\"]);\n         do_check(r#\"fn foo<T: Copy + <|>Display>() {}\"#, &[\"Display\", \"+ Display\"]);\n-        do_check(r#\"fn foo<T: Copy + <|>Display + Sync>() {}\"#, &[\"Display\", \"+ Display\"]);\n+        do_check(r#\"fn foo<T: Copy + <|>Display + Sync>() {}\"#, &[\"Display\", \"Display + \"]);\n         do_check(r#\"fn foo<T: Copy +<|>Display>() {}\"#, &[\"Display\", \"+Display\"]);\n         do_check(\n             r#\"fn foo<T: Copy<|> + Display, U: Copy>() {}\"#,\n@@ -449,4 +451,56 @@ fn foo<R>()\n             ],\n         );\n     }\n+\n+    #[test]\n+    fn test_extend_selection_on_tuple_in_type() {\n+        do_check(\n+            r#\"fn main() { let _: (krate, <|>_crate_def_map, module_id) = (); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map, \", \"(krate, _crate_def_map, module_id)\"],\n+        );\n+        // white space variations\n+        do_check(\n+            r#\"fn main() { let _: (krate,<|>_crate_def_map,module_id) = (); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map,\", \"(krate,_crate_def_map,module_id)\"],\n+        );\n+        do_check(\n+            r#\"\n+fn main() { let _: (\n+    krate,\n+    _crate<|>_def_map,\n+    module_id\n+) = (); }\"#,\n+            &[\n+                \"_crate_def_map\",\n+                \"_crate_def_map,\",\n+                \"(\\n    krate,\\n    _crate_def_map,\\n    module_id\\n)\",\n+            ],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extend_selection_on_tuple_in_rvalue() {\n+        do_check(\n+            r#\"fn main() { let var = (krate, _crate_def_map<|>, module_id); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map, \", \"(krate, _crate_def_map, module_id)\"],\n+        );\n+        // white space variations\n+        do_check(\n+            r#\"fn main() { let var = (krate,_crate<|>_def_map,module_id); }\"#,\n+            &[\"_crate_def_map\", \"_crate_def_map,\", \"(krate,_crate_def_map,module_id)\"],\n+        );\n+        do_check(\n+            r#\"\n+fn main() { let var = (\n+    krate,\n+    _crate_def_map<|>,\n+    module_id\n+); }\"#,\n+            &[\n+                \"_crate_def_map\",\n+                \"_crate_def_map,\",\n+                \"(\\n    krate,\\n    _crate_def_map,\\n    module_id\\n)\",\n+            ],\n+        );\n+    }\n }"}]}