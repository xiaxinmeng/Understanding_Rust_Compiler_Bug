{"sha": "66fec39aa04ea59ac39d52f0872c0a6c52a27e35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZmVjMzlhYTA0ZWE1OWFjMzlkNTJmMDg3MmMwYTZjNTJhMjdlMzU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T19:56:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "More TyBuilder use", "tree": {"sha": "f7885e8305b64d99fc8a0816f37cddd726b8231c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7885e8305b64d99fc8a0816f37cddd726b8231c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66fec39aa04ea59ac39d52f0872c0a6c52a27e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66fec39aa04ea59ac39d52f0872c0a6c52a27e35", "html_url": "https://github.com/rust-lang/rust/commit/66fec39aa04ea59ac39d52f0872c0a6c52a27e35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66fec39aa04ea59ac39d52f0872c0a6c52a27e35/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f", "html_url": "https://github.com/rust-lang/rust/commit/cd227f581e0c20d6b9ee81a3982509a9f6b2f67f"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "70c56cc459f4a3c091b26dc475ec02d1d58e0d56", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/66fec39aa04ea59ac39d52f0872c0a6c52a27e35/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66fec39aa04ea59ac39d52f0872c0a6c52a27e35/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=66fec39aa04ea59ac39d52f0872c0a6c52a27e35", "patch": "@@ -13,11 +13,9 @@ use log::{info, warn};\n \n use crate::{\n     db::HirDatabase,\n-    to_assoc_type_id, to_chalk_trait_id,\n     traits::{InEnvironment, Solution},\n-    utils::generics,\n-    AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, Interner,\n-    ProjectionTy, Substitution, TraitRef, Ty, TyKind,\n+    AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, Interner, Ty,\n+    TyBuilder, TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n@@ -57,21 +55,20 @@ fn deref_by_trait(\n     };\n     let target = db.trait_data(deref_trait).associated_type_by_name(&name![Target])?;\n \n-    let generic_params = generics(db.upcast(), target.into());\n-    if generic_params.len() != 1 {\n-        // the Target type + Deref trait should only have one generic parameter,\n-        // namely Deref's Self type\n-        return None;\n-    }\n+    let projection = {\n+        let b = TyBuilder::assoc_type_projection(db, target);\n+        if b.remaining() != 1 {\n+            // the Target type + Deref trait should only have one generic parameter,\n+            // namely Deref's Self type\n+            return None;\n+        }\n+        b.push(ty.goal.value.clone()).build()\n+    };\n \n     // FIXME make the Canonical / bound var handling nicer\n \n-    let parameters =\n-        Substitution::build_for_generics(&generic_params).push(ty.goal.value.clone()).build();\n-\n     // Check that the type implements Deref at all\n-    let trait_ref =\n-        TraitRef { trait_id: to_chalk_trait_id(deref_trait), substitution: parameters.clone() };\n+    let trait_ref = projection.trait_ref(db);\n     let implements_goal = Canonical {\n         binders: ty.goal.binders.clone(),\n         value: InEnvironment {\n@@ -84,21 +81,16 @@ fn deref_by_trait(\n     }\n \n     // Now do the assoc type projection\n-    let projection = AliasEq {\n-        alias: AliasTy::Projection(ProjectionTy {\n-            associated_ty_id: to_assoc_type_id(target),\n-            substitution: parameters,\n-        }),\n+    let alias_eq = AliasEq {\n+        alias: AliasTy::Projection(projection),\n         ty: TyKind::BoundVar(BoundVar::new(\n             DebruijnIndex::INNERMOST,\n             ty.goal.binders.len(&Interner),\n         ))\n         .intern(&Interner),\n     };\n \n-    let obligation = projection.cast(&Interner);\n-\n-    let in_env = InEnvironment { goal: obligation, environment: ty.environment };\n+    let in_env = InEnvironment { goal: alias_eq.cast(&Interner), environment: ty.environment };\n \n     let canonical = Canonical {\n         value: in_env,"}]}