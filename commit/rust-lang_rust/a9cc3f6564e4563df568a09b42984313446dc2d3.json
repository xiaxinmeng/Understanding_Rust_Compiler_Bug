{"sha": "a9cc3f6564e4563df568a09b42984313446dc2d3", "node_id": "C_kwDOAAsO6NoAKGE5Y2MzZjY1NjRlNDU2M2RmNTY4YTA5YjQyOTg0MzEzNDQ2ZGMyZDM", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-03-30T05:42:10Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-03-30T05:42:10Z"}, "message": "Spellchecking compiler code\n\nAddress some spelling mistakes in strings, private function names, and function params.", "tree": {"sha": "81c87146a135a4b970ec40db4a08f24a4ecc6f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c87146a135a4b970ec40db4a08f24a4ecc6f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cc3f6564e4563df568a09b42984313446dc2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cc3f6564e4563df568a09b42984313446dc2d3", "html_url": "https://github.com/rust-lang/rust/commit/a9cc3f6564e4563df568a09b42984313446dc2d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cc3f6564e4563df568a09b42984313446dc2d3/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600ec284838c52d1f6657c2cf0097b58970b133b", "url": "https://api.github.com/repos/rust-lang/rust/commits/600ec284838c52d1f6657c2cf0097b58970b133b", "html_url": "https://github.com/rust-lang/rust/commit/600ec284838c52d1f6657c2cf0097b58970b133b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "3107dd448f40e83bf4bcd5690376c8000a3bf02b", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -624,7 +624,7 @@ impl<'a> AstValidator<'a> {\n \n     /// Reject C-varadic type unless the function is foreign,\n     /// or free and `unsafe extern \"C\"` semantically.\n-    fn check_c_varadic_type(&self, fk: FnKind<'a>) {\n+    fn check_c_variadic_type(&self, fk: FnKind<'a>) {\n         match (fk.ctxt(), fk.header()) {\n             (Some(FnCtxt::Foreign), _) => return,\n             (Some(FnCtxt::Free), Some(header)) => match header.ext {\n@@ -1504,7 +1504,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         };\n         self.check_fn_decl(fk.decl(), self_semantic);\n \n-        self.check_c_varadic_type(fk);\n+        self.check_c_variadic_type(fk);\n \n         // Functions cannot both be `const async`\n         if let Some(FnHeader {"}, {"sha": "684eba82667fa4897471fbe3ce0f86098a9cb347", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -407,10 +407,10 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     fn terminator_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n-        teminator: &mir::Terminator<'tcx>,\n+        terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n-        if let mir::TerminatorKind::InlineAsm { operands, .. } = &teminator.kind {\n+        if let mir::TerminatorKind::InlineAsm { operands, .. } = &terminator.kind {\n             for op in operands {\n                 if let mir::InlineAsmOperand::Out { place: Some(place), .. }\n                 | mir::InlineAsmOperand::InOut { out_place: Some(place), .. } = *op"}, {"sha": "bc4c06ed7d2988e6d28810d11ead10c7c8d05022", "filename": "compiler/rustc_codegen_cranelift/scripts/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -11,7 +11,7 @@ case $1 in\n         sed -i \"s/\\\"nightly-.*\\\"/\\\"nightly-${TOOLCHAIN}\\\"/\" rust-toolchain\n         rustup component add rustfmt || true\n \n-        echo \"=> Uninstalling all old nighlies\"\n+        echo \"=> Uninstalling all old nightlies\"\n         for nightly in $(rustup toolchain list | grep nightly | grep -v \"$TOOLCHAIN\" | grep -v nightly-x86_64); do\n             rustup toolchain uninstall \"$nightly\"\n         done"}, {"sha": "11d39a122f559fbf7575f4dcd5fc1ca16ecf130d", "filename": "compiler/rustc_codegen_gcc/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_codegen_gcc%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_codegen_gcc%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Frustup.sh?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -10,7 +10,7 @@ case $1 in\n         rustup toolchain install --profile minimal nightly-${TOOLCHAIN} # Sanity check to see if the nightly exists\n         echo nightly-${TOOLCHAIN} > rust-toolchain\n \n-        echo \"=> Uninstalling all old nighlies\"\n+        echo \"=> Uninstalling all old nightlies\"\n         for nightly in $(rustup toolchain list | grep nightly | grep -v $TOOLCHAIN | grep -v nightly-x86_64); do\n             rustup toolchain uninstall $nightly\n         done"}, {"sha": "31bb9ed318589441885a41f3d265bccb06e8895b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -356,7 +356,7 @@ fn build_union_fields_for_direct_tag_generator<'ll, 'tcx>(\n     generator_type_di_node: &'ll DIType,\n ) -> SmallVec<&'ll DIType> {\n     let Variants::Multiple { tag_encoding: TagEncoding::Direct, tag_field, .. } = generator_type_and_layout.variants else {\n-        bug!(\"This function only supports layouts with direcly encoded tags.\")\n+        bug!(\"This function only supports layouts with directly encoded tags.\")\n     };\n \n     let (generator_def_id, generator_substs) = match generator_type_and_layout.ty.kind() {"}, {"sha": "1ff9395c5892b719b3c4604a73402a9de848779e", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -56,7 +56,7 @@ impl DefPathTable {\n             //\n             // See the documentation for DefPathHash for more information.\n             panic!(\n-                \"found DefPathHash collsion between {:?} and {:?}. \\\n+                \"found DefPathHash collision between {:?} and {:?}. \\\n                     Compilation cannot continue.\",\n                 def_path1, def_path2\n             );"}, {"sha": "ec27ce5ea9a642386092f22d7f2c8ffaf18cc99a", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -171,7 +171,7 @@ impl<Tag> Allocation<Tag> {\n                 panic!(\"Allocation::uninit called with panic_on_fail had allocation failure\")\n             }\n             ty::tls::with(|tcx| {\n-                tcx.sess.delay_span_bug(DUMMY_SP, \"exhausted memory during interpreation\")\n+                tcx.sess.delay_span_bug(DUMMY_SP, \"exhausted memory during interpretation\")\n             });\n             InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)\n         })?;"}, {"sha": "32516af922332237e0bd17db31f0b7ba44850ca5", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc3f6564e4563df568a09b42984313446dc2d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=a9cc3f6564e4563df568a09b42984313446dc2d3", "patch": "@@ -683,7 +683,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         && is_new_pred\n                     {\n                         debug!(\n-                            \"evaluate_nested_obligations: adding projection predicate\\\n+                            \"evaluate_nested_obligations: adding projection predicate \\\n                             to computed_preds: {:?}\",\n                             predicate\n                         );"}]}