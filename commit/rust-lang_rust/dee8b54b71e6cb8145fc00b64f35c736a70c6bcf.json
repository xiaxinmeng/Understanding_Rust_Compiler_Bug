{"sha": "dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZThiNTRiNzFlNmNiODE0NWZjMDBiNjRmMzVjNzM2YTcwYzZiY2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T17:23:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:57Z"}, "message": "Fallout in tests --- misc error message changes, WF fixes", "tree": {"sha": "b20a15ef0e8b755f886b5ce68eb9660636b025b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20a15ef0e8b755f886b5ce68eb9660636b025b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "html_url": "https://github.com/rust-lang/rust/commit/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4aaedb51e47022cdd6c8857976e209e9d135e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4aaedb51e47022cdd6c8857976e209e9d135e3f", "html_url": "https://github.com/rust-lang/rust/commit/f4aaedb51e47022cdd6c8857976e209e9d135e3f"}], "stats": {"total": 98, "additions": 64, "deletions": 34}, "files": [{"sha": "16ed73e9095e4381d9f38acf362c7798aff8180e", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -12,7 +12,9 @@ fn bar<F>(blk: F) where F: FnOnce() + 'static {\n }\n \n fn foo(x: &()) {\n-    bar(|| { //~ ERROR cannot infer an appropriate lifetime\n+    bar(|| {\n+        //~^ ERROR cannot infer\n+        //~| ERROR does not fulfill\n         let _ = x;\n     })\n }"}, {"sha": "7d95082079f9f13bb2450dfa69024265ef6c44d3", "filename": "src/test/compile-fail/issue-18389.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -11,10 +11,7 @@\n use std::any::Any;\n use std::any::TypeId;\n \n-pub trait Pt {}\n-pub trait Rt {}\n-\n-trait Private<P: Pt, R: Rt> {\n+trait Private<P, R> {\n     fn call(&self, p: P, r: R);\n }\n pub trait Public: Private< //~ ERROR private trait in exported type parameter bound"}, {"sha": "041289c2ccdbdb4af3393b0e526e89c61cf3e6f4", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -19,6 +19,7 @@ trait To {\n         self //~ error: the trait `core::marker::Sized` is not implemented\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n         From::from( //~ error: the trait `core::marker::Sized` is not implemented\n+            //~^ ERROR E0277\n             self\n         )\n     }"}, {"sha": "c08cdd72b38258e74645ed96d7fc4a9b1ce3f941", "filename": "src/test/compile-fail/issue-23041.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -13,6 +13,5 @@ fn main()\n {\n     fn bar(x:i32) ->i32 { 3*x };\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n-    b.downcast_ref::<fn(_)->_>();\n-    //~^ ERROR cannot determine a type for this expression: unconstrained type\n+    b.downcast_ref::<fn(_)->_>(); //~ ERROR E0101\n }"}, {"sha": "df857a2e6eb1f9766a2cefabd0234aedf1b275dc", "filename": "src/test/compile-fail/issue-24013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let a = 1;\n     let b = 2;\n     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-    //~^ ERROR cannot determine a type for this expression: unconstrained type\n+    //~^ ERROR unable to infer enough type information about `_`\n }"}, {"sha": "ee8bc7d6e290103ccfd30543c9db1f45e59a389e", "filename": "src/test/compile-fail/issue-3907-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -17,6 +17,7 @@ struct S {\n     name: isize\n }\n \n-fn bar(_x: Foo) {} //~ ERROR the trait `core::marker::Sized` is not implemented\n+fn bar(_x: Foo) {}\n+//~^ ERROR E0277\n \n fn main() {}"}, {"sha": "0731fbaf01c4306152b16a556ffdc07ae2effb16", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -31,7 +31,9 @@ fn a() {\n fn b() {\n     let x: Box<_> = box 3;\n     let y = &x;\n-    let z = &x as &Foo; //~ ERROR E0038\n+    let z = &x as &Foo;\n+    //~^ ERROR E0038\n+    //~| ERROR E0038\n }\n \n fn main() { }"}, {"sha": "f2ff877cd8236dc3f1cd6078c79ca6b4c0d3f8a1", "filename": "src/test/compile-fail/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -47,7 +47,7 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR cannot infer\n+    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n }\n \n fn main() {"}, {"sha": "5d9818d624b7e273e729db38af14ee17bd586a4b", "filename": "src/test/compile-fail/regions-close-object-into-object-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -12,7 +12,7 @@\n #![allow(warnings)]\n \n trait A<T> { }\n-struct B<'a, T>(&'a (A<T>+'a));\n+struct B<'a, T:'a>(&'a (A<T>+'a));\n \n trait X { }\n "}, {"sha": "6cef9956655175019e34e9537d972b17d2eb4951", "filename": "src/test/compile-fail/regions-close-object-into-object-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n trait A<T> { }\n-struct B<'a, T>(&'a (A<T>+'a));\n+struct B<'a, T:'a>(&'a (A<T>+'a));\n \n trait X { }\n impl<'a, T> X for B<'a, T> {}"}, {"sha": "3004245b15a24438397847458251434a5ce00a2d", "filename": "src/test/compile-fail/regions-close-object-into-object-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -12,7 +12,7 @@\n #![allow(warnings)]\n \n trait A<T> { }\n-struct B<'a, T>(&'a (A<T>+'a));\n+struct B<'a, T:'a>(&'a (A<T>+'a));\n \n trait X { }\n impl<'a, T> X for B<'a, T> {}"}, {"sha": "bc5b7b7cf7874325fdce0825a4e45a9638708e1f", "filename": "src/test/compile-fail/regions-close-object-into-object-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n trait A<T> { }\n-struct B<'a, T>(&'a (A<T>+'a));\n+struct B<'a, T:'a>(&'a (A<T>+'a));\n \n trait X { }\n impl<'a, T> X for B<'a, T> {}"}, {"sha": "ac269a4d896f2566bbe0600366e7590d602a5d62", "filename": "src/test/compile-fail/regions-close-object-into-object-5.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-5.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -16,15 +16,22 @@ trait A<T>\n     fn get(&self) -> T { panic!() }\n }\n \n-struct B<'a, T>(&'a (A<T>+'a));\n+struct B<'a, T:'a>(&'a (A<T>+'a));\n \n trait X { fn foo(&self) {} }\n \n impl<'a, T> X for B<'a, T> {}\n \n fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-    box B(&*v) as Box<X> //~ ERROR the parameter type `T` may not live long enough\n+    // oh dear!\n+    box B(&*v) as Box<X>\n         //~^ ERROR the parameter type `T` may not live long enough\n+        //~| WARNING the parameter type `T` may not live long enough\n+        //~| WARNING the parameter type `T` may not live long enough\n+        //~| ERROR the parameter type `T` may not live long enough\n+        //~| WARNING the parameter type `T` may not live long enough\n+        //~| ERROR the parameter type `T` may not live long enough\n+        //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "3be998178722166c5c934b28b61b666226df7fd4", "filename": "src/test/compile-fail/regions-enum-not-wf.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-enum-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-enum-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-enum-not-wf.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -25,11 +25,13 @@ enum RefOk<'a, T:'a> {\n     RefOkVariant1(&'a T)\n }\n \n-enum RefIndirect<'a, T> { //~ ERROR the parameter type `T` may not live long enough\n+enum RefIndirect<'a, T> {\n+        //~^ ERROR the parameter type `T` may not live long enough\n     RefIndirectVariant1(isize, RefOk<'a,T>)\n }\n \n-enum RefDouble<'a, 'b, T> { //~ ERROR reference has a longer lifetime than the data\n+enum RefDouble<'a, 'b, T> {\n+        //~^ ERROR reference has a longer lifetime than the data\n     RefDoubleVariant1(&'a &'b T)\n }\n "}, {"sha": "71606ba812fac10b6bfeff57b08cc92220f1cd0c", "filename": "src/test/compile-fail/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-wc.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -41,7 +41,8 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR cannot infer\n+    let _: &'a WithAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn main() {"}, {"sha": "957e56fe5109fed65344c54614d0b9b869c14cd2", "filename": "src/test/compile-fail/regions-outlives-projection-container.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -45,7 +45,7 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR cannot infer\n+    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n }\n \n fn with_assoc1<'a,'b>() where 'b : 'a {"}, {"sha": "17831266f7e134595fe28cd069685f8aa483c287", "filename": "src/test/compile-fail/regions-struct-not-wf.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -12,19 +12,22 @@\n \n #![allow(dead_code)]\n \n-struct Ref<'a, T> { //~ ERROR the parameter type `T` may not live long enough\n+struct Ref<'a, T> {\n+        //~^ ERROR the parameter type `T` may not live long enough\n     field: &'a T\n }\n \n struct RefOk<'a, T:'a> {\n     field: &'a T\n }\n \n-struct RefIndirect<'a, T> { //~ ERROR the parameter type `T` may not live long enough\n+struct RefIndirect<'a, T> {\n+        //~^ ERROR the parameter type `T` may not live long enough\n     field: RefOk<'a, T>\n }\n \n-struct DoubleRef<'a, 'b, T> { //~ ERROR reference has a longer lifetime than the data it references\n+struct DoubleRef<'a, 'b, T> {\n+        //~^ ERROR reference has a longer lifetime than the data it references\n     field: &'a &'b T\n }\n "}, {"sha": "baf239f5956d645b924686b0903e290d9c6b05de", "filename": "src/test/compile-fail/trait-object-safety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -22,5 +22,6 @@ impl Tr for St {\n }\n \n fn main() {\n-    let _: &Tr = &St; //~ ERROR cannot convert to a trait object because trait `Tr` is not\n+    let _: &Tr = &St; //~ ERROR E0038\n+    //~^ ERROR E0038\n }"}, {"sha": "b11cbde292969018ae9ec870d9b2be0895ad83e9", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -17,6 +17,8 @@ impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n fn main() {\n     10.dup::<i32>(); //~ ERROR does not take type parameters\n     10.blah::<i32, i32>(); //~ ERROR incorrect number of type parameters\n-    (box 10 as Box<bar>).dup(); //~ ERROR cannot convert to a trait object\n-    //~^ ERROR the trait `bar` is not implemented for the type `bar`\n+    (box 10 as Box<bar>).dup();\n+    //~^ ERROR E0038\n+    //~| ERROR E0038\n+    //~| ERROR E0277\n }"}, {"sha": "c37f45dcf50bb8911f9c3f6a140162942ebe9c15", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -32,12 +32,23 @@ fn dummy() {\n \n     Outer(TestType);\n     //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n+    //~| ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n+}\n+\n+fn dummy1b() {\n+    struct TestType;\n+    impl !Send for TestType {}\n \n     is_send(TestType);\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy1b::TestType`\n+}\n+\n+fn dummy1c() {\n+    struct TestType;\n+    impl !Send for TestType {}\n \n     is_send((8, TestType));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy1c::TestType`\n }\n \n fn dummy2() {"}, {"sha": "09687724656fa8febe373f1f01ed750e45efed27", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self-ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -22,5 +22,6 @@ impl MyAdd for i32 {\n fn main() {\n     let x: i32 = 5;\n     let y = x as MyAdd<i32>;\n-    //~^ ERROR as `MyAdd<i32>`\n+    //~^ ERROR E0038\n+    //~| ERROR cast to unsized type: `i32` as `MyAdd<i32>`\n }"}, {"sha": "319b81bde36ed02bb556fca7367e5ca80a6e49d8", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -42,7 +42,7 @@ struct Test4<'a, 'b:'a> { //~ ERROR regions=[[-, o];[];[]]\n // contravariant context:\n \n #[rustc_variance]\n-struct Test5<'a, 'b> { //~ ERROR regions=[[+, o];[];[]]\n+struct Test5<'a, 'b:'a> { //~ ERROR regions=[[+, o];[];[]]\n     x: extern \"Rust\" fn(&'a mut &'b isize),\n }\n \n@@ -52,7 +52,7 @@ struct Test5<'a, 'b> { //~ ERROR regions=[[+, o];[];[]]\n // argument list occurs in an invariant context.\n \n #[rustc_variance]\n-struct Test6<'a, 'b> { //~ ERROR regions=[[-, o];[];[]]\n+struct Test6<'a, 'b:'a> { //~ ERROR regions=[[-, o];[];[]]\n     x: &'a mut extern \"Rust\" fn(&'b isize),\n }\n "}, {"sha": "9049ae0548fa92dac36125bbf0f48b1352adb6b4", "filename": "src/test/run-pass/issue-14254.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Frun-pass%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Frun-pass%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14254.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-trait Foo {\n+trait Foo: Sized {\n     fn bar(&self);\n     fn baz(&self) { }\n     fn bah(_: Option<Self>) { }"}, {"sha": "6ab339510991510e54c2e61feb1fc564cab9d970", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee8b54b71e6cb8145fc00b64f35c736a70c6bcf/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=dee8b54b71e6cb8145fc00b64f35c736a70c6bcf", "patch": "@@ -52,7 +52,7 @@ pub trait MyTrait<T> {\n     fn dummy(&self, t: T) -> T { panic!() }\n }\n \n-pub struct MyContainer<'a, T> {\n+pub struct MyContainer<'a, T:'a> {\n     foos: Vec<&'a (MyTrait<T>+'a)> ,\n }\n "}]}