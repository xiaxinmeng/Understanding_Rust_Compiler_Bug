{"sha": "4d6cb096effc19d970d8111e8ba8d87b80017d72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNmNiMDk2ZWZmYzE5ZDk3MGQ4MTExZThiYThkODdiODAwMTdkNzI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-05-31T18:01:07Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-06-04T23:14:36Z"}, "message": "Fix spelling\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>", "tree": {"sha": "b7b7e68e51ad56dd7611db596352ac93d75caeb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b7e68e51ad56dd7611db596352ac93d75caeb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6cb096effc19d970d8111e8ba8d87b80017d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6cb096effc19d970d8111e8ba8d87b80017d72", "html_url": "https://github.com/rust-lang/rust/commit/4d6cb096effc19d970d8111e8ba8d87b80017d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6cb096effc19d970d8111e8ba8d87b80017d72/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e244f625bebb86dbbf5f80da3a5fbcc0eca32dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e244f625bebb86dbbf5f80da3a5fbcc0eca32dd1", "html_url": "https://github.com/rust-lang/rust/commit/e244f625bebb86dbbf5f80da3a5fbcc0eca32dd1"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "b697b9884367cbf9ef75b81a6792c7b2245e3b33", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d6cb096effc19d970d8111e8ba8d87b80017d72/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6cb096effc19d970d8111e8ba8d87b80017d72/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=4d6cb096effc19d970d8111e8ba8d87b80017d72", "patch": "@@ -726,7 +726,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // Note that this code iterates scopes from the inner-most to the outer-most,\n             // invalidating caches of each scope visited. This way bare minimum of the\n             // caches gets invalidated. i.e., if a new drop is added into the middle scope, the\n-            // cache of outer scpoe stays intact.\n+            // cache of outer scope stays intact.\n             scope.invalidate_cache(!needs_drop, self.is_generator, this_scope);\n             if this_scope {\n                 if let DropKind::Value = drop_kind {"}]}