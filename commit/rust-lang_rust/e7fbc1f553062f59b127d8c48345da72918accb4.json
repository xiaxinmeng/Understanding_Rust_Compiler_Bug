{"sha": "e7fbc1f553062f59b127d8c48345da72918accb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZmJjMWY1NTMwNjJmNTliMTI3ZDhjNDgzNDVkYTcyOTE4YWNjYjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-11T22:54:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-17T06:38:02Z"}, "message": "libstd: Implement the new `Cell`.", "tree": {"sha": "07382d0dfb328e7949e6c8e1032570ecb47b33c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07382d0dfb328e7949e6c8e1032570ecb47b33c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7fbc1f553062f59b127d8c48345da72918accb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fbc1f553062f59b127d8c48345da72918accb4", "html_url": "https://github.com/rust-lang/rust/commit/e7fbc1f553062f59b127d8c48345da72918accb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7fbc1f553062f59b127d8c48345da72918accb4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf34b41c3b81d946410e16c20f05a8183b1d0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf34b41c3b81d946410e16c20f05a8183b1d0ed", "html_url": "https://github.com/rust-lang/rust/commit/caf34b41c3b81d946410e16c20f05a8183b1d0ed"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "b33106a7f66ad06e39b127c54aea2cfd77bf6ca0", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e7fbc1f553062f59b127d8c48345da72918accb4/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fbc1f553062f59b127d8c48345da72918accb4/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=e7fbc1f553062f59b127d8c48345da72918accb4", "patch": "@@ -14,6 +14,71 @@ use prelude::*;\n use cast;\n use util::NonCopyable;\n \n+#[cfg(stage0)]\n+use unstable::intrinsics;\n+\n+/// A mutable memory location that admits only `Pod` data.\n+#[no_freeze]\n+#[deriving(Clone)]\n+pub struct Cell<T> {\n+    priv value: T,\n+}\n+\n+// NB: For `stage0`, we omit the `Pod` bound. This is unsound but will help\n+// us get started on removing `@mut` from `rustc`.\n+\n+#[cfg(stage0)]\n+impl<T> Cell<T> {\n+    /// Creates a new `Cell` containing the given value.\n+    pub fn new(value: T) -> Cell<T> {\n+        Cell {\n+            value: value,\n+        }\n+    }\n+\n+    /// Returns a copy of the contained value.\n+    #[inline]\n+    pub fn get(&self) -> T {\n+        unsafe {\n+            let mut result = intrinsics::uninit();\n+            intrinsics::copy_nonoverlapping_memory(&mut result, &self.value, 1);\n+            result\n+        }\n+    }\n+\n+    /// Sets the contained value.\n+    #[inline]\n+    pub fn set(&self, value: T) {\n+        unsafe {\n+            intrinsics::copy_nonoverlapping_memory(cast::transmute_mut(&self.value), &value, 1)\n+        }\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl<T: ::kinds::Pod> Cell<T> {\n+    /// Creates a new `Cell` containing the given value.\n+    pub fn new(value: T) -> Cell<T> {\n+        Cell {\n+            value: value,\n+        }\n+    }\n+\n+    /// Returns a copy of the contained value.\n+    #[inline]\n+    pub fn get(&self) -> T {\n+        self.value\n+    }\n+\n+    /// Sets the contained value.\n+    #[inline]\n+    pub fn set(&self, value: T) {\n+        unsafe {\n+            *cast::transmute_mut(&self.value) = value\n+        }\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n #[no_freeze]\n pub struct RefCell<T> {\n@@ -132,6 +197,30 @@ impl<T> RefCell<T> {\n         let mut ptr = self.borrow_mut();\n         blk(ptr.get())\n     }\n+\n+    /// Sets the value, replacing what was there.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the value is currently borrowed.\n+    #[inline]\n+    pub fn set(&self, value: T) {\n+        let mut reference = self.borrow_mut();\n+        *reference.get() = value\n+    }\n+}\n+\n+impl<T:Clone> RefCell<T> {\n+    /// Returns a copy of the contained value.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the value is currently mutably borrowed.\n+    #[inline]\n+    pub fn get(&self) -> T {\n+        let reference = self.borrow();\n+        (*reference.get()).clone()\n+    }\n }\n \n impl<T: Clone> Clone for RefCell<T> {\n@@ -202,6 +291,17 @@ impl<'b, T> RefMut<'b, T> {\n mod test {\n     use super::*;\n \n+    #[test]\n+    fn smoketest_cell() {\n+        let x = Cell::new(10);\n+        assert_eq!(x.get(), 10);\n+        x.set(20);\n+        assert_eq!(x.get(), 20);\n+\n+        let y = Cell::new((30, 40));\n+        assert_eq!(y.get(), (30, 40));\n+    }\n+\n     #[test]\n     fn double_imm_borrow() {\n         let x = RefCell::new(0);"}]}