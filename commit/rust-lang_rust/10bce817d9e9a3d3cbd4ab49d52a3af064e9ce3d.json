{"sha": "10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYmNlODE3ZDllOWEzZDNjYmQ0YWI0OWQ1MmEzYWYwNjRlOWNlM2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-13T02:13:23Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-13T02:13:23Z"}, "message": "Some basic refactoring", "tree": {"sha": "077b881c3499f8cd2ff36543072cadd423af0cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077b881c3499f8cd2ff36543072cadd423af0cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d", "html_url": "https://github.com/rust-lang/rust/commit/10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6d1177193a608d7af7f8bf0579de8e573bc947", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d1177193a608d7af7f8bf0579de8e573bc947", "html_url": "https://github.com/rust-lang/rust/commit/1a6d1177193a608d7af7f8bf0579de8e573bc947"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "d264f56860773c6f59cf3564e564d34cdd75c61f", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=10bce817d9e9a3d3cbd4ab49d52a3af064e9ce3d", "patch": "@@ -616,6 +616,8 @@ fn rewrite_closure(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n+    debug!(\"rewrite_closure {:?}\", body);\n+\n     let (prefix, extra_offset) =\n         rewrite_closure_fn_decl(capture, fn_decl, body, span, context, shape)?;\n     // 1 = space between `|...|` and body.\n@@ -627,25 +629,26 @@ fn rewrite_closure(\n             return Some(format!(\"{} {{}}\", prefix));\n         }\n \n+        let no_return_type = match fn_decl.output {\n+            ast::FunctionRetTy::Default(_) => true,\n+            _ => false,\n+        };\n+\n         // Figure out if the block is necessary.\n         let needs_block = is_unsafe_block(block) || block.stmts.len() > 1 || context.inside_macro\n             || block_contains_comment(block, context.codemap)\n             || prefix.contains('\\n');\n \n-        let no_return_type = if let ast::FunctionRetTy::Default(_) = fn_decl.output {\n-            true\n-        } else {\n-            false\n-        };\n         if no_return_type && !needs_block {\n             // block.stmts.len() == 1\n             if let Some(expr) = stmt_expr(&block.stmts[0]) {\n-                if let Some(rw) = if is_block_closure_forced(expr) {\n-                    rewrite_closure_with_block(context, shape, &prefix, expr)\n+                let result = if is_block_closure_forced(expr) {\n+                    rewrite_closure_with_block(expr, &prefix, context, shape)\n                 } else {\n                     rewrite_closure_expr(expr, &prefix, context, body_shape)\n-                } {\n-                    return Some(rw);\n+                };\n+                if result.is_some() {\n+                    return result;\n                 }\n             }\n         }\n@@ -656,17 +659,17 @@ fn rewrite_closure(\n         rewrite_closure_expr(body, &prefix, context, body_shape).or_else(|| {\n             // The closure originally had a non-block expression, but we can't fit on\n             // one line, so we'll insert a block.\n-            rewrite_closure_with_block(context, body_shape, &prefix, body)\n+            rewrite_closure_with_block(body, &prefix, context, body_shape)\n         })\n     }\n }\n \n // Rewrite closure with a single expression wrapping its body with block.\n fn rewrite_closure_with_block(\n+    body: &ast::Expr,\n+    prefix: &str,\n     context: &RewriteContext,\n     shape: Shape,\n-    prefix: &str,\n-    body: &ast::Expr,\n ) -> Option<String> {\n     let block = ast::Block {\n         stmts: vec![\n@@ -2254,7 +2257,7 @@ fn rewrite_last_closure(\n \n         // We force to use block for the body of the closure for certain kinds of expressions.\n         if is_block_closure_forced(body) {\n-            return rewrite_closure_with_block(context, body_shape, &prefix, body).and_then(\n+            return rewrite_closure_with_block(body, &prefix, context, body_shape).and_then(\n                 |body_str| {\n                     // If the expression can fit in a single line, we need not force block closure.\n                     if body_str.lines().count() <= 7 {\n@@ -2279,7 +2282,7 @@ fn rewrite_last_closure(\n             .map(|cond| cond.contains('\\n') || cond.len() > body_shape.width)\n             .unwrap_or(false);\n         if is_multi_lined_cond {\n-            return rewrite_closure_with_block(context, body_shape, &prefix, body);\n+            return rewrite_closure_with_block(body, &prefix, context, body_shape);\n         }\n \n         // Seems fine, just format the closure in usual manner."}]}