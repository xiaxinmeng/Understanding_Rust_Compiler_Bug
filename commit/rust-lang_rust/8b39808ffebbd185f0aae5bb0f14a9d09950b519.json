{"sha": "8b39808ffebbd185f0aae5bb0f14a9d09950b519", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMzk4MDhmZmViYmQxODVmMGFhZTViYjBmMTRhOWQwOTk1MGI1MTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-25T20:53:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-01T15:00:18Z"}, "message": "merge UNNECESSARY_EXTERN_CRATE and UNUSED_EXTERN_CRATES", "tree": {"sha": "68a96e119cae43c2d04c5a87d9bc4a63b4f1822e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68a96e119cae43c2d04c5a87d9bc4a63b4f1822e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b39808ffebbd185f0aae5bb0f14a9d09950b519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b39808ffebbd185f0aae5bb0f14a9d09950b519", "html_url": "https://github.com/rust-lang/rust/commit/8b39808ffebbd185f0aae5bb0f14a9d09950b519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b39808ffebbd185f0aae5bb0f14a9d09950b519/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5010ecf4465f587a50f7572f0ea8204ac5e6378", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5010ecf4465f587a50f7572f0ea8204ac5e6378", "html_url": "https://github.com/rust-lang/rust/commit/d5010ecf4465f587a50f7572f0ea8204ac5e6378"}], "stats": {"total": 591, "additions": 365, "deletions": 226}, "files": [{"sha": "1e48a54e018d6b1e70aba0ba8924d33ec4a911e2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -2433,7 +2433,7 @@ impl<'a> LoweringContext<'a> {\n                     self.with_hir_id_owner(new_id, |this| {\n                         let vis = match vis {\n                             hir::Visibility::Public => hir::Visibility::Public,\n-                            hir::Visibility::Crate => hir::Visibility::Crate,\n+                            hir::Visibility::Crate(sugar) => hir::Visibility::Crate(sugar),\n                             hir::Visibility::Inherited => hir::Visibility::Inherited,\n                             hir::Visibility::Restricted { ref path, id: _ } => {\n                                 hir::Visibility::Restricted {\n@@ -3704,7 +3704,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::Visibility {\n         match v.node {\n             VisibilityKind::Public => hir::Public,\n-            VisibilityKind::Crate(..) => hir::Visibility::Crate,\n+            VisibilityKind::Crate(sugar) => hir::Visibility::Crate(sugar),\n             VisibilityKind::Restricted { ref path, id, .. } => hir::Visibility::Restricted {\n                 path: P(self.lower_path(id, path, ParamMode::Explicit)),\n                 id: if let Some(owner) = explicit_owner {"}, {"sha": "7835d4e782c430e86ad8231f98007a3833b53804", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -463,7 +463,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_vis(&mut self, visibility: &'hir Visibility) {\n         match *visibility {\n             Visibility::Public |\n-            Visibility::Crate |\n+            Visibility::Crate(_) |\n             Visibility::Inherited => {}\n             Visibility::Restricted { id, .. } => {\n                 self.insert(id, NodeVisibility(visibility));"}, {"sha": "b7c66398f8500e3119d129f3aa30c358dc59612d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -35,7 +35,7 @@ use mir::mono::Linkage;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::codemap::{self, Spanned};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n+use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};\n use syntax::attr::InlineAttr;\n use syntax::ext::hygiene::SyntaxContext;\n@@ -1953,7 +1953,7 @@ pub struct PolyTraitRef {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Visibility {\n     Public,\n-    Crate,\n+    Crate(CrateSugar),\n     Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }\n@@ -1964,7 +1964,7 @@ impl Visibility {\n         match self {\n             &Public |\n             &Inherited => false,\n-            &Crate |\n+            &Crate(_) |\n             &Restricted { .. } => true,\n         }\n     }"}, {"sha": "2cf627fdc162f556e409b4b6e2110829780aa3fa", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -801,15 +801,25 @@ impl<'a> State<'a> {\n \n     pub fn print_visibility(&mut self, vis: &hir::Visibility) -> io::Result<()> {\n         match *vis {\n-            hir::Public => self.word_nbsp(\"pub\"),\n-            hir::Visibility::Crate => self.word_nbsp(\"pub(crate)\"),\n+            hir::Public => self.word_nbsp(\"pub\")?,\n+            hir::Visibility::Crate(ast::CrateSugar::JustCrate) => self.word_nbsp(\"crate\")?,\n+            hir::Visibility::Crate(ast::CrateSugar::PubCrate) => self.word_nbsp(\"pub(crate)\")?,\n             hir::Visibility::Restricted { ref path, .. } => {\n                 self.s.word(\"pub(\")?;\n-                self.print_path(path, false)?;\n-                self.word_nbsp(\")\")\n+                if path.segments.len() == 1 && path.segments[0].name == keywords::Super.name() {\n+                    // Special case: `super` can print like `pub(super)`.\n+                    self.s.word(\"super\")?;\n+                } else {\n+                    // Everything else requires `in` at present.\n+                    self.word_nbsp(\"in\")?;\n+                    self.print_path(path, false)?;\n+                }\n+                self.word_nbsp(\")\")?;\n             }\n-            hir::Inherited => Ok(()),\n+            hir::Inherited => ()\n         }\n+\n+        Ok(())\n     }\n \n     pub fn print_defaultness(&mut self, defaultness: hir::Defaultness) -> io::Result<()> {"}, {"sha": "397638fc55d4b6739c7dc1e30ac0979b65ee39e3", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -751,17 +751,24 @@ impl_stable_hash_for!(enum hir::ImplItemKind {\n     Type(t)\n });\n \n+impl_stable_hash_for!(enum ::syntax::ast::CrateSugar {\n+    JustCrate,\n+    PubCrate,\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Visibility {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n             hir::Visibility::Public |\n-            hir::Visibility::Crate |\n             hir::Visibility::Inherited => {\n                 // No fields to hash.\n             }\n+            hir::Visibility::Crate(sugar) => {\n+                sugar.hash_stable(hcx, hasher);\n+            }\n             hir::Visibility::Restricted { ref path, id } => {\n                 hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n                     id.hash_stable(hcx, hasher);"}, {"sha": "419bffcae0643c59e18d13c888c36156be1bf6f5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -270,7 +270,7 @@ impl Visibility {\n     pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: TyCtxt) -> Self {\n         match *visibility {\n             hir::Public => Visibility::Public,\n-            hir::Visibility::Crate => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n+            hir::Visibility::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n             hir::Visibility::Restricted { ref path, .. } => match path.def {\n                 // If there is no resolution, `resolve` will have already reported an error, so\n                 // assume that the visibility is public to avoid reporting more privacy errors."}, {"sha": "79c7a79114761785fc8e1cb9e8ce99ae88b01055", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -1548,72 +1548,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n     }\n }\n \n-declare_lint! {\n-    pub UNNECESSARY_EXTERN_CRATES,\n-    Allow,\n-    \"suggest removing `extern crate` for the 2018 edition\"\n-}\n-\n-pub struct ExternCrate(/* depth */ u32);\n-\n-impl ExternCrate {\n-    pub fn new() -> Self {\n-        ExternCrate(0)\n-    }\n-}\n-\n-impl LintPass for ExternCrate {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNECESSARY_EXTERN_CRATES)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExternCrate {\n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        if !cx.tcx.features().extern_absolute_paths {\n-            return\n-        }\n-        if let hir::ItemExternCrate(ref orig) =  it.node {\n-            if it.attrs.iter().any(|a| a.check_name(\"macro_use\")) {\n-                return\n-            }\n-            let mut err = cx.struct_span_lint(UNNECESSARY_EXTERN_CRATES,\n-                it.span, \"`extern crate` is unnecessary in the new edition\");\n-            if it.vis == hir::Visibility::Public || self.0 > 1 || orig.is_some() {\n-                let pub_ = if it.vis == hir::Visibility::Public {\n-                    \"pub \"\n-                } else {\n-                    \"\"\n-                };\n-\n-                let help = format!(\"use `{}use`\", pub_);\n-\n-                if let Some(orig) = orig {\n-                    err.span_suggestion(it.span, &help,\n-                        format!(\"{}use {} as {};\", pub_, orig, it.name));\n-                } else {\n-                    err.span_suggestion(it.span, &help,\n-                        format!(\"{}use {};\", pub_, it.name));\n-                }\n-            } else {\n-                err.span_suggestion(it.span, \"remove it\", \"\".into());\n-            }\n-\n-            err.emit();\n-        }\n-    }\n-\n-    fn check_mod(&mut self, _: &LateContext, _: &hir::Mod,\n-                 _: Span, _: ast::NodeId) {\n-        self.0 += 1;\n-    }\n-\n-    fn check_mod_post(&mut self, _: &LateContext, _: &hir::Mod,\n-                      _: Span, _: ast::NodeId) {\n-        self.0 += 1;\n-    }\n-}\n-\n /// Lint for trait and lifetime bounds that don't depend on type parameters\n /// which either do nothing, or stop the item from being used.\n pub struct TrivialConstraints;"}, {"sha": "d6ce5b2ea57fe2228b2f0c6acf3aafda399b3098", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -145,7 +145,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                           TypeLimits,\n                           MissingDoc,\n                           MissingDebugImplementations,\n-                          ExternCrate,\n                           );\n \n     add_lint_group!(sess,\n@@ -185,7 +184,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     \"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n                     UNREACHABLE_PUB,\n-                    UNNECESSARY_EXTERN_CRATES);\n+                    UNUSED_EXTERN_CRATES);\n \n     // Guidelines for creating a future incompatibility lint:\n     //"}, {"sha": "66dc76b1d94a081475e69b5a317d28f622188098", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 166, "deletions": 57, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -14,11 +14,46 @@ use rustc::ty::TyCtxt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir::print::visibility_qualified;\n use rustc::hir;\n use rustc::util::nodemap::DefIdSet;\n \n+use rustc_data_structures::fx::FxHashMap;\n+\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    let mut used_trait_imports = DefIdSet();\n+    for &body_id in tcx.hir.krate().bodies.keys() {\n+        let item_def_id = tcx.hir.body_owner_def_id(body_id);\n+        let imports = tcx.used_trait_imports(item_def_id);\n+        debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n+        used_trait_imports.extend(imports.iter());\n+    }\n+\n+    let mut visitor = CheckVisitor { tcx, used_trait_imports };\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+\n+    unused_crates_lint(tcx);\n+}\n+\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        if item.vis == hir::Public || item.span == DUMMY_SP {\n+            return;\n+        }\n+        if let hir::ItemUse(ref path, _) = item.node {\n+            self.check_import(item.id, path.span);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    }\n+}\n+\n struct CheckVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     used_trait_imports: DefIdSet,\n@@ -45,72 +80,146 @@ impl<'a, 'tcx> CheckVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n-        if item.vis == hir::Public || item.span == DUMMY_SP {\n-            return;\n-        }\n-        if let hir::ItemUse(ref path, _) = item.node {\n-            self.check_import(item.id, path.span);\n-        }\n+fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n+    let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n+\n+    // Collect first the crates that are completely unused.  These we\n+    // can always suggest removing (no matter which edition we are\n+    // in).\n+    let unused_extern_crates: FxHashMap<DefId, Span> =\n+        tcx.maybe_unused_extern_crates(LOCAL_CRATE)\n+        .iter()\n+        .filter(|&&(def_id, _)| {\n+            // The `def_id` here actually was calculated during resolution (at least\n+            // at the time of this writing) and is being shipped to us via a side\n+            // channel of the tcx. There may have been extra expansion phases,\n+            // however, which ended up removing the `def_id` *after* expansion such\n+            // as the `ReplaceBodyWithLoop` pass (which is a bit of a hack, but hey)\n+            //\n+            // As a result we need to verify that `def_id` is indeed still valid for\n+            // our AST and actually present in the HIR map. If it's not there then\n+            // there's safely nothing to warn about, and otherwise we carry on with\n+            // our execution.\n+            //\n+            // Note that if we carry through to the `extern_mod_stmt_cnum` query\n+            // below it'll cause a panic because `def_id` is actually bogus at this\n+            // point in time otherwise.\n+            if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+                if tcx.hir.find(id).is_none() {\n+                    return false;\n+                }\n+            }\n+            true\n+        })\n+        .filter(|&&(def_id, _)| {\n+            let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n+            !tcx.is_compiler_builtins(cnum)\n+                && !tcx.is_panic_runtime(cnum)\n+                && !tcx.has_global_allocator(cnum)\n+        })\n+        .cloned()\n+        .collect();\n+\n+    // Issue lints for fully unused crates that suggest removing them.\n+    for (&def_id, &span) in &unused_extern_crates {\n+        assert_eq!(def_id.krate, LOCAL_CRATE);\n+        let hir_id = tcx.hir.definitions().def_index_to_hir_id(def_id.index);\n+        let id = tcx.hir.hir_to_node_id(hir_id);\n+        let msg = \"unused extern crate\";\n+        tcx.struct_span_lint_node(lint, id, span, msg)\n+            .span_suggestion_short(span, \"remove it\", \"\".to_string())\n+            .emit();\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    // If we are not in Rust 2018 edition, we are done.\n+    if !tcx.sess.rust_2018() {\n+        return;\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    // Otherwise, we can *also* suggest rewriting `extern crate`\n+    // into `use` etc.\n+    let mut crates_to_convert_to_use = vec![];\n+    tcx.hir.krate().visit_all_item_likes(&mut CollectExternCrateVisitor {\n+        tcx,\n+        unused_extern_crates: &unused_extern_crates,\n+        crates_to_convert_to_use: &mut crates_to_convert_to_use,\n+    });\n+\n+    for to_convert in &crates_to_convert_to_use {\n+        assert_eq!(to_convert.def_id.krate, LOCAL_CRATE);\n+        let hir_id = tcx.hir.definitions().def_index_to_hir_id(to_convert.def_id.index);\n+        let id = tcx.hir.hir_to_node_id(hir_id);\n+        let item = tcx.hir.expect_item(id);\n+        let msg = \"`extern crate` is not idiomatic in the new edition\";\n+\n+        let help = format!(\n+            \"convert it to a `{}`\",\n+            visibility_qualified(&item.vis, \"use\")\n+        );\n+\n+        let base_replacement = match to_convert.orig_name {\n+            Some(orig_name) => format!(\"use {} as {};\", orig_name, item.name),\n+            None => format!(\"use {};\", item.name),\n+        };\n+        let replacement = visibility_qualified(&item.vis, &base_replacement);\n+\n+        tcx.struct_span_lint_node(lint, id, to_convert.span, msg)\n+            .span_suggestion_short(to_convert.span, &help, replacement)\n+            .emit();\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut used_trait_imports = DefIdSet();\n-    for &body_id in tcx.hir.krate().bodies.keys() {\n-        let item_def_id = tcx.hir.body_owner_def_id(body_id);\n-        let imports = tcx.used_trait_imports(item_def_id);\n-        debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n-        used_trait_imports.extend(imports.iter());\n-    }\n+struct CollectExternCrateVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    unused_extern_crates: &'a FxHashMap<DefId, Span>,\n+    crates_to_convert_to_use: &'a mut Vec<ExternCrateToConvertToUse>,\n+}\n \n-    let mut visitor = CheckVisitor { tcx, used_trait_imports };\n-    tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+struct ExternCrateToConvertToUse {\n+    /// def-id of the extern crate\n+    def_id: DefId,\n+\n+    /// span from the item\n+    span: Span,\n \n-    for &(def_id, span) in tcx.maybe_unused_extern_crates(LOCAL_CRATE).iter() {\n-        // The `def_id` here actually was calculated during resolution (at least\n-        // at the time of this writing) and is being shipped to us via a side\n-        // channel of the tcx. There may have been extra expansion phases,\n-        // however, which ended up removing the `def_id` *after* expansion such\n-        // as the `ReplaceBodyWithLoop` pass (which is a bit of a hack, but hey)\n-        //\n-        // As a result we need to verify that `def_id` is indeed still valid for\n-        // our AST and actually present in the HIR map. If it's not there then\n-        // there's safely nothing to warn about, and otherwise we carry on with\n-        // our execution.\n-        //\n-        // Note that if we carry through to the `extern_mod_stmt_cnum` query\n-        // below it'll cause a panic because `def_id` is actually bogus at this\n-        // point in time otherwise.\n-        if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n-            if tcx.hir.find(id).is_none() {\n-                continue\n+    /// if `Some`, then this is renamed (`extern crate orig_name as\n+    /// crate_name`), and -- perhaps surprisingly -- this stores the\n+    /// *original* name (`item.name` will contain the new name)\n+    orig_name: Option<ast::Name>,\n+}\n+\n+impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        if let hir::ItemExternCrate(orig_name) = item.node {\n+            let extern_crate_def_id = self.tcx.hir.local_def_id(item.id);\n+\n+            // If the crate is fully unused, we are going to suggest\n+            // removing it anyway, so ignore it.\n+            if self.unused_extern_crates.contains_key(&extern_crate_def_id) {\n+                return;\n             }\n+\n+            // If the extern crate has any attributes, they may have funky\n+            // semantics we can't entirely understand. Ignore it.\n+            if !self.tcx.get_attrs(extern_crate_def_id).is_empty() {\n+                return;\n+            }\n+\n+            // Otherwise, we can convert it into a `use` of some kind.\n+            self.crates_to_convert_to_use.push(\n+                ExternCrateToConvertToUse {\n+                    def_id: extern_crate_def_id,\n+                    span: item.span,\n+                    orig_name,\n+                }\n+            );\n         }\n-        let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n-        if tcx.is_compiler_builtins(cnum) {\n-            continue\n-        }\n-        if tcx.is_panic_runtime(cnum) {\n-            continue\n-        }\n-        if tcx.has_global_allocator(cnum) {\n-            continue\n-        }\n-        assert_eq!(def_id.krate, LOCAL_CRATE);\n-        let hir_id = tcx.hir.definitions().def_index_to_hir_id(def_id.index);\n-        let id = tcx.hir.hir_to_node_id(hir_id);\n-        let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n-        let msg = \"unused extern crate\";\n-        tcx.struct_span_lint_node(lint, id, span, msg)\n-            .span_suggestion_short(span, \"remove it\", \"\".to_string())\n-            .emit();\n+    }\n+\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    }\n+\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n     }\n }\n+"}, {"sha": "a57f3a42939ee049838e3eccf2311b328a1426ae", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -3030,7 +3030,7 @@ impl Clean<Option<Visibility>> for hir::Visibility {\n         Some(match *self {\n             hir::Visibility::Public => Visibility::Public,\n             hir::Visibility::Inherited => Visibility::Inherited,\n-            hir::Visibility::Crate => Visibility::Crate,\n+            hir::Visibility::Crate(_) => Visibility::Crate,\n             hir::Visibility::Restricted { ref path, .. } => {\n                 let path = path.clean(cx);\n                 let did = register_def(cx, path.def);"}, {"sha": "7368564e250d1b7a7e9a8c487f417e6ca125196f", "filename": "src/test/compile-fail/edition-extern-crate-allowed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -12,8 +12,9 @@\n // compile-flags: --edition 2015\n // compile-pass\n \n-#![deny(rust_2018_idioms)]\n+#![warn(rust_2018_idioms)]\n \n extern crate edition_extern_crate_allowed;\n+//~^ WARNING unused extern crate\n \n fn main() {}"}, {"sha": "0811c79b0a4b9d5d50a4abd343c8756934c855d5", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs", "status": "modified", "additions": 63, "deletions": 21, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -10,48 +10,90 @@\n \n // compile-flags: --edition 2018\n \n-#![deny(unnecessary_extern_crates)]\n+#![deny(unused_extern_crates)]\n #![feature(alloc, test, libc)]\n \n extern crate alloc;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n+//~^ ERROR unused extern crate\n //~| HELP remove\n extern crate alloc as x;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n-//~| HELP use `use`\n+//~^ ERROR unused extern crate\n+//~| HELP remove\n \n #[macro_use]\n extern crate test;\n+\n pub extern crate test as y;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n-//~| HELP use `pub use`\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `pub use`\n+\n pub extern crate libc;\n-//~^ ERROR `extern crate` is unnecessary in the new edition\n-//~| HELP use `pub use`\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `pub use`\n+\n+pub(crate) extern crate libc as a;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `pub(crate) use`\n \n+crate extern crate libc as b;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n+//~| HELP convert it to a `crate use`\n \n mod foo {\n+    pub(in crate::foo) extern crate libc as c;\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it to a `pub(in crate::foo) use`\n+\n+    pub(super) extern crate libc as d;\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it to a `pub(super) use`\n+\n     extern crate alloc;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `use`\n+    //~^ ERROR unused extern crate\n+    //~| HELP remove\n+\n     extern crate alloc as x;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `use`\n+    //~^ ERROR unused extern crate\n+    //~| HELP remove\n+\n     pub extern crate test;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `pub use`\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it\n+\n     pub extern crate test as y;\n-    //~^ ERROR `extern crate` is unnecessary in the new edition\n-    //~| HELP use `pub use`\n+    //~^ ERROR `extern crate` is not idiomatic in the new edition\n+    //~| HELP convert it\n+\n     mod bar {\n         extern crate alloc;\n-        //~^ ERROR `extern crate` is unnecessary in the new edition\n-        //~| HELP use `use`\n+        //~^ ERROR unused extern crate\n+        //~| HELP remove\n+\n         extern crate alloc as x;\n-        //~^ ERROR `extern crate` is unnecessary in the new edition\n-        //~| HELP use `use`\n+        //~^ ERROR unused extern crate\n+        //~| HELP remove\n+\n+        pub(in crate::foo::bar) extern crate libc as e;\n+        //~^ ERROR `extern crate` is not idiomatic in the new edition\n+        //~| HELP convert it to a `pub(in crate::foo::bar) use`\n+\n+        fn dummy() {\n+            unsafe {\n+                e::getpid();\n+            }\n+        }\n+    }\n+\n+    fn dummy() {\n+        unsafe {\n+            c::getpid();\n+            d::getpid();\n+        }\n     }\n }\n \n \n-fn main() {}\n+fn main() {\n+    unsafe { a::getpid(); }\n+    unsafe { b::getpid(); }\n+}"}, {"sha": "a64125c794379cb34c31517618c8ed8897e3336d", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.stderr", "status": "modified", "additions": 69, "deletions": 39, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -1,68 +1,98 @@\n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:16:1\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:51:5\n    |\n-LL | extern crate alloc;\n-   | ^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL |     extern crate alloc;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/unnecessary-extern-crate.rs:13:9\n    |\n-LL | #![deny(unnecessary_extern_crates)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(unused_extern_crates)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: `extern crate` is unnecessary in the new edition\n+error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:19:1\n    |\n LL | extern crate alloc as x;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x;`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:55:5\n+   |\n+LL |     extern crate alloc as x;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:68:9\n+   |\n+LL |         extern crate alloc;\n+   |         ^^^^^^^^^^^^^^^^^^^ help: remove it\n+\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:16:1\n+   |\n+LL | extern crate alloc;\n+   | ^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:25:1\n+error: unused extern crate\n+  --> $DIR/unnecessary-extern-crate.rs:72:9\n+   |\n+LL |         extern crate alloc as x;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:26:1\n    |\n LL | pub extern crate test as y;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y;`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:28:1\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:30:1\n    |\n LL | pub extern crate libc;\n-   | ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use libc;`\n+   | ^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:34:5\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:34:1\n    |\n-LL |     extern crate alloc;\n-   |     ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc;`\n+LL | pub(crate) extern crate libc as a;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(crate) use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:37:5\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:38:1\n    |\n-LL |     extern crate alloc as x;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x;`\n+LL | crate extern crate libc as b;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `crate use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:40:5\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:43:5\n    |\n-LL |     pub extern crate test;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test;`\n+LL |     pub(in crate::foo) extern crate libc as c;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(in crate::foo) use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:43:5\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:47:5\n    |\n-LL |     pub extern crate test as y;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y;`\n+LL |     pub(super) extern crate libc as d;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(super) use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:47:9\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:59:5\n    |\n-LL |         extern crate alloc;\n-   |         ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc;`\n+LL |     pub extern crate test;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n \n-error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:50:9\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:63:5\n    |\n-LL |         extern crate alloc as x;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x;`\n+LL |     pub extern crate test as y;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub use`\n+\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:76:9\n+   |\n+LL |         pub(in crate::foo::bar) extern crate libc as e;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `pub(in crate::foo::bar) use`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "c12c74b50e26402bbb54b2e5042dd19337073160", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -20,7 +20,7 @@ warning: unused extern crate\n   --> $DIR/basic.rs:33:5\n    |\n LL |     extern crate core as _; //~ WARN unused extern crate\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/basic.rs:14:25"}, {"sha": "4f99c1240f8f49a65baf52352a6e6ee8e91ca146", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.fixed?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -16,14 +16,14 @@\n // but we don't.\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n-#![deny(unused_extern_crates)]\n+#![deny(rust_2018_idioms)]\n #![allow(dead_code)]\n \n \n //~^ ERROR unused extern crate\n \n-extern crate edition_lint_paths as bar;\n+use edition_lint_paths as bar;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n \n fn main() {\n     // This is not considered to *use* the `extern crate` in Rust 2018:"}, {"sha": "9c1235a296799cdd238f5a55705e3c7e18cd28fe", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.rs?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -16,14 +16,14 @@\n // but we don't.\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n-#![deny(unused_extern_crates)]\n+#![deny(rust_2018_idioms)]\n #![allow(dead_code)]\n \n extern crate edition_lint_paths;\n //~^ ERROR unused extern crate\n \n extern crate edition_lint_paths as bar;\n+//~^ ERROR `extern crate` is not idiomatic in the new edition\n \n fn main() {\n     // This is not considered to *use* the `extern crate` in Rust 2018:"}, {"sha": "b3afa2bd1d59289bb9c7ffd23a23829793436a7b", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -1,14 +1,21 @@\n error: unused extern crate\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:23:1\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:22:1\n    |\n LL | extern crate edition_lint_paths;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n-  --> $DIR/extern-crate-idiomatic-in-2018.rs:20:9\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:19:9\n    |\n-LL | #![deny(unused_extern_crates)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2018_idioms)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: #[deny(unused_extern_crates)] implied by #[deny(rust_2018_idioms)]\n \n-error: aborting due to previous error\n+error: `extern crate` is not idiomatic in the new edition\n+  --> $DIR/extern-crate-idiomatic-in-2018.rs:25:1\n+   |\n+LL | extern crate edition_lint_paths as bar;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: convert it to a `use`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "83b35cec80956847ff2141afc27d63697b8b209f", "filename": "src/test/ui/suggestions/removing-extern-crate.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.fixed?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -16,12 +16,12 @@\n #![warn(rust_2018_idioms)]\n #![allow(unused_imports)]\n \n-use std as foo;\n+\n \n \n mod another {\n-    use std as foo;\n-    use std;\n+    \n+    \n }\n \n fn main() {}"}, {"sha": "e7caab5ec54594c257aae4fbf7cee0ba4dafdeb2", "filename": "src/test/ui/suggestions/removing-extern-crate.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b39808ffebbd185f0aae5bb0f14a9d09950b519/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr?ref=8b39808ffebbd185f0aae5bb0f14a9d09950b519", "patch": "@@ -1,31 +1,31 @@\n-warning: `extern crate` is unnecessary in the new edition\n-  --> $DIR/removing-extern-crate.rs:19:1\n+warning: unused extern crate\n+  --> $DIR/removing-extern-crate.rs:24:5\n    |\n-LL | extern crate std as foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use std as foo;`\n+LL |     extern crate std;\n+   |     ^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/removing-extern-crate.rs:16:9\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[warn(unnecessary_extern_crates)] implied by #[warn(rust_2018_idioms)]\n+   = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n \n-warning: `extern crate` is unnecessary in the new edition\n+warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:20:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n \n-warning: `extern crate` is unnecessary in the new edition\n+warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:23:5\n    |\n LL |     extern crate std as foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use std as foo;`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n-warning: `extern crate` is unnecessary in the new edition\n-  --> $DIR/removing-extern-crate.rs:24:5\n+warning: unused extern crate\n+  --> $DIR/removing-extern-crate.rs:19:1\n    |\n-LL |     extern crate std;\n-   |     ^^^^^^^^^^^^^^^^^ help: use `use`: `use std;`\n+LL | extern crate std as foo;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n "}]}