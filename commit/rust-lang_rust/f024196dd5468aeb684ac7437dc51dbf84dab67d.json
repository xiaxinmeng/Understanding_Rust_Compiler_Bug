{"sha": "f024196dd5468aeb684ac7437dc51dbf84dab67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMjQxOTZkZDU0NjhhZWI2ODRhYzc0MzdkYzUxZGJmODRkYWI2N2Q=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T19:16:11Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T19:16:11Z"}, "message": "Fix indexing issue for const parameter invariance", "tree": {"sha": "c6dcf6cd71373662f4cf07d074f60c9e9b30ccd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6dcf6cd71373662f4cf07d074f60c9e9b30ccd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f024196dd5468aeb684ac7437dc51dbf84dab67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f024196dd5468aeb684ac7437dc51dbf84dab67d", "html_url": "https://github.com/rust-lang/rust/commit/f024196dd5468aeb684ac7437dc51dbf84dab67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f024196dd5468aeb684ac7437dc51dbf84dab67d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd31c392f286d61caac0babee68c900cdaa8b504", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd31c392f286d61caac0babee68c900cdaa8b504", "html_url": "https://github.com/rust-lang/rust/commit/bd31c392f286d61caac0babee68c900cdaa8b504"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "51a1d088ddccb586aa7d053e6f048f0e915f1186", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f024196dd5468aeb684ac7437dc51dbf84dab67d/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f024196dd5468aeb684ac7437dc51dbf84dab67d/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=f024196dd5468aeb684ac7437dc51dbf84dab67d", "patch": "@@ -78,6 +78,22 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n         }\n     }\n \n+    fn enforce_const_invariance(&self, generics: &ty::Generics, variances: &mut Vec<ty::Variance>) {\n+        let tcx = self.terms_cx.tcx;\n+\n+        // Make all const parameters invariant.\n+        for param in generics.params.iter() {\n+            if let ty::GenericParamDefKind::Const = param.kind {\n+                variances[param.index as usize] = ty::Invariant;\n+            }\n+        }\n+\n+        // Make all the const parameters in the parent invariant (recursively).\n+        if let Some(def_id) = generics.parent {\n+            self.enforce_const_invariance(tcx.generics_of(def_id), variances);\n+        }\n+    }\n+\n     fn create_map(&self) -> FxHashMap<DefId, Lrc<Vec<ty::Variance>>> {\n         let tcx = self.terms_cx.tcx;\n \n@@ -91,11 +107,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n             debug!(\"id={} variances={:?}\", id, variances);\n \n             // Const parameters are always invariant.\n-            for (idx, param) in generics.params.iter().enumerate() {\n-                if let ty::GenericParamDefKind::Const = param.kind {\n-                    variances[idx] = ty::Invariant;\n-                }\n-            }\n+            self.enforce_const_invariance(generics, &mut variances);\n \n             // Functions are permitted to have unused generic parameters: make those invariant.\n             if let ty::FnDef(..) = tcx.type_of(def_id).sty {"}]}