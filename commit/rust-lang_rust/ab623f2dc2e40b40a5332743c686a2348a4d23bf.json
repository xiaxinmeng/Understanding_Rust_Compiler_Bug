{"sha": "ab623f2dc2e40b40a5332743c686a2348a4d23bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNjIzZjJkYzJlNDBiNDBhNTMzMjc0M2M2ODZhMjM0OGE0ZDIzYmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T18:50:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T21:50:25Z"}, "message": "Merge branch 'cache-ty-collect' of https://github.com/michaelwoerister/rust into rollup", "tree": {"sha": "50a11392acabdfeba771a5b6aa617417f62a1f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a11392acabdfeba771a5b6aa617417f62a1f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab623f2dc2e40b40a5332743c686a2348a4d23bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab623f2dc2e40b40a5332743c686a2348a4d23bf", "html_url": "https://github.com/rust-lang/rust/commit/ab623f2dc2e40b40a5332743c686a2348a4d23bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab623f2dc2e40b40a5332743c686a2348a4d23bf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8b3135e104294f04c7862bbb489136af5d8cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8b3135e104294f04c7862bbb489136af5d8cf6", "html_url": "https://github.com/rust-lang/rust/commit/ad8b3135e104294f04c7862bbb489136af5d8cf6"}, {"sha": "0a4f3473959411b5488b35cf4cc4379cae69a686", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4f3473959411b5488b35cf4cc4379cae69a686", "html_url": "https://github.com/rust-lang/rust/commit/0a4f3473959411b5488b35cf4cc4379cae69a686"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "eb07876b05f26cb408e9cc86ae7329b42d128401", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=ab623f2dc2e40b40a5332743c686a2348a4d23bf", "patch": "@@ -617,8 +617,8 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n     }\n \n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          id: SerializedDepNodeIndex)\n-                          -> Option<Self::Value> {\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n         let mir: Option<::mir::Mir<'tcx>> = tcx.on_disk_query_result_cache\n                                                .try_load_query_result(tcx, id);\n         mir.map(|x| tcx.alloc_mir(x))\n@@ -643,6 +643,21 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n+    #[inline]\n+    fn cache_on_disk(def_id: Self::Key) -> bool {\n+        def_id.is_local()\n+    }\n+\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        let generics: Option<ty::Generics> = tcx.on_disk_query_result_cache\n+                                                .try_load_query_result(tcx, id);\n+        generics.map(|x| tcx.alloc_generics(x))\n+    }\n+}\n+\n macro_rules! impl_disk_cacheable_query(\n     ($query_name:ident, |$key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {\n@@ -668,3 +683,6 @@ impl_disk_cacheable_query!(mir_const_qualif, |def_id| def_id.is_local());\n impl_disk_cacheable_query!(check_match, |def_id| def_id.is_local());\n impl_disk_cacheable_query!(contains_extern_indicator, |_| true);\n impl_disk_cacheable_query!(def_symbol_name, |_| true);\n+impl_disk_cacheable_query!(type_of, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(predicates_of, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(used_trait_imports, |def_id| def_id.is_local());"}, {"sha": "56ed0f9106f30d689f08e07eb9e94847f74c3490", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=ab623f2dc2e40b40a5332743c686a2348a4d23bf", "patch": "@@ -204,8 +204,12 @@ impl<'sess> OnDiskCache<'sess> {\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n \n-                // Encode TypeckTables\n+                encode_query_results::<type_of, _>(tcx, enc, qri)?;\n+                encode_query_results::<generics_of, _>(tcx, enc, qri)?;\n+                encode_query_results::<predicates_of, _>(tcx, enc, qri)?;\n+                encode_query_results::<used_trait_imports, _>(tcx, enc, qri)?;\n                 encode_query_results::<typeck_tables_of, _>(tcx, enc, qri)?;\n+                encode_query_results::<trans_fulfill_obligation, _>(tcx, enc, qri)?;\n                 encode_query_results::<optimized_mir, _>(tcx, enc, qri)?;\n                 encode_query_results::<unsafety_check_result, _>(tcx, enc, qri)?;\n                 encode_query_results::<borrowck, _>(tcx, enc, qri)?;\n@@ -215,7 +219,6 @@ impl<'sess> OnDiskCache<'sess> {\n                 encode_query_results::<const_is_rvalue_promotable_to_static, _>(tcx, enc, qri)?;\n                 encode_query_results::<contains_extern_indicator, _>(tcx, enc, qri)?;\n                 encode_query_results::<symbol_name, _>(tcx, enc, qri)?;\n-                encode_query_results::<trans_fulfill_obligation, _>(tcx, enc, qri)?;\n                 encode_query_results::<check_match, _>(tcx, enc, qri)?;\n             }\n "}, {"sha": "c9eebc3d2a0a723e9f486ced5063d4d54699ae9b", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=ab623f2dc2e40b40a5332743c686a2348a4d23bf", "patch": "@@ -983,4 +983,8 @@ impl_load_from_cache!(\n     ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n     ContainsExternIndicator => contains_extern_indicator,\n     CheckMatch => check_match,\n+    TypeOfItem => type_of,\n+    GenericsOfItem => generics_of,\n+    PredicatesOfItem => predicates_of,\n+    UsedTraitImports => used_trait_imports,\n );"}, {"sha": "63df1179af22828e7eeb26b1f29f5f8e5a9972b2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ab623f2dc2e40b40a5332743c686a2348a4d23bf", "patch": "@@ -17,7 +17,7 @@ pub use self::fold::TypeFoldable;\n \n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n-use hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n use hir::svh::Svh;\n use ich::Fingerprint;\n@@ -39,7 +39,6 @@ use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n-use std::collections::BTreeMap;\n use std::cmp;\n use std::cmp::Ordering;\n use std::fmt;\n@@ -786,9 +785,8 @@ pub struct Generics {\n     pub regions: Vec<RegionParameterDef>,\n     pub types: Vec<TypeParameterDef>,\n \n-    /// Reverse map to each `TypeParameterDef`'s `index` field, from\n-    /// `def_id.index` (`def_id.krate` is the same as the item's).\n-    pub type_param_to_index: BTreeMap<DefIndex, u32>,\n+    /// Reverse map to each `TypeParameterDef`'s `index` field\n+    pub type_param_to_index: FxHashMap<DefId, u32>,\n \n     pub has_self: bool,\n     pub has_late_bound_regions: Option<Span>,"}, {"sha": "1139ea5fbd364074c33abdf2c47d2fe2b12388e8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ab623f2dc2e40b40a5332743c686a2348a4d23bf", "patch": "@@ -979,7 +979,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let item_id = tcx.hir.get_parent_node(node_id);\n                 let item_def_id = tcx.hir.local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n-                let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id).index];\n+                let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id)];\n                 tcx.mk_param(index, tcx.hir.name(node_id))\n             }\n             Def::SelfTy(_, Some(def_id)) => {"}, {"sha": "b7021f9dfd8365b3f85e62f59649b4980e928a83", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ab623f2dc2e40b40a5332743c686a2348a4d23bf", "patch": "@@ -1636,7 +1636,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n         let item_id = tcx.hir.ty_param_owner(node_id);\n         let item_def_id = tcx.hir.local_def_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n-        let index = generics.type_param_to_index[&def_id.index];\n+        let index = generics.type_param_to_index[&def_id];\n         ty::GenericPredicates {\n             parent: None,\n             predicates: self.param_env.caller_bounds.iter().filter(|predicate| {"}, {"sha": "7a91827faef83666e6699eda73951e75df94b3cf", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab623f2dc2e40b40a5332743c686a2348a4d23bf/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ab623f2dc2e40b40a5332743c686a2348a4d23bf", "patch": "@@ -40,8 +40,6 @@ use util::nodemap::FxHashMap;\n \n use rustc_const_math::ConstInt;\n \n-use std::collections::BTreeMap;\n-\n use syntax::{abi, ast};\n use syntax::codemap::Spanned;\n use syntax::symbol::{Symbol, keywords};\n@@ -240,7 +238,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_owner = tcx.hir.ty_param_owner(param_id);\n     let param_owner_def_id = tcx.hir.local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n-    let index = generics.type_param_to_index[&def_id.index];\n+    let index = generics.type_param_to_index[&def_id];\n     let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id));\n \n     // Don't look for bounds where the type parameter isn't in scope.\n@@ -1024,10 +1022,9 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         });\n     }\n \n-    let mut type_param_to_index = BTreeMap::new();\n-    for param in &types {\n-        type_param_to_index.insert(param.def_id.index, param.index);\n-    }\n+    let type_param_to_index = types.iter()\n+                                   .map(|param| (param.def_id, param.index))\n+                                   .collect();\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,"}]}