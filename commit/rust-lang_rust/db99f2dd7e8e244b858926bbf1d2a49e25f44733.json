{"sha": "db99f2dd7e8e244b858926bbf1d2a49e25f44733", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOTlmMmRkN2U4ZTI0NGI4NTg5MjZiYmYxZDJhNDllMjVmNDQ3MzM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-12T17:08:51Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2020-07-04T17:49:44Z"}, "message": "Add optional target to crates in json project, lookup default cfgs per target when generating cfg list", "tree": {"sha": "8c57a0a494e1a6e6250b5081276f57e8467a92cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c57a0a494e1a6e6250b5081276f57e8467a92cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db99f2dd7e8e244b858926bbf1d2a49e25f44733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db99f2dd7e8e244b858926bbf1d2a49e25f44733", "html_url": "https://github.com/rust-lang/rust/commit/db99f2dd7e8e244b858926bbf1d2a49e25f44733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db99f2dd7e8e244b858926bbf1d2a49e25f44733/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c815d5b49660e9b93c6a70039abef5fa02ae8013", "url": "https://api.github.com/repos/rust-lang/rust/commits/c815d5b49660e9b93c6a70039abef5fa02ae8013", "html_url": "https://github.com/rust-lang/rust/commit/c815d5b49660e9b93c6a70039abef5fa02ae8013"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "f9c73ece145ec0a4d3db8d1a16be374a6f37c27c", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db99f2dd7e8e244b858926bbf1d2a49e25f44733/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db99f2dd7e8e244b858926bbf1d2a49e25f44733/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=db99f2dd7e8e244b858926bbf1d2a49e25f44733", "patch": "@@ -46,4 +46,14 @@ impl CfgOptions {\n     pub fn insert_key_value(&mut self, key: SmolStr, value: SmolStr) {\n         self.key_values.insert((key, value));\n     }\n+\n+    pub fn append(&mut self, other: &CfgOptions) {\n+        for atom in &other.atoms {\n+            self.atoms.insert(atom.clone());\n+        }\n+\n+        for (key, value) in &other.key_values {\n+            self.key_values.insert((key.clone(), value.clone()));\n+        }\n+    }\n }"}, {"sha": "4b50b9b697c896dcdd3b377389943106851bdec0", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db99f2dd7e8e244b858926bbf1d2a49e25f44733/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db99f2dd7e8e244b858926bbf1d2a49e25f44733/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=db99f2dd7e8e244b858926bbf1d2a49e25f44733", "patch": "@@ -246,6 +246,7 @@ impl ProjectWorkspace {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n             ProjectWorkspace::Json { project } => {\n+                let mut target_cfg_map = FxHashMap::<Option<&str>, CfgOptions>::default();\n                 let crates: FxHashMap<_, _> = project\n                     .crates\n                     .iter()\n@@ -265,6 +266,14 @@ impl ProjectWorkspace {\n                             .proc_macro_dylib_path\n                             .clone()\n                             .map(|it| proc_macro_client.by_dylib_path(&it));\n+\n+                        let target = krate.target.as_deref();\n+                        let target_cfgs = target_cfg_map\n+                            .entry(target.clone())\n+                            .or_insert_with(|| get_rustc_cfg_options(target.as_deref()));\n+                        let mut cfg_options = krate.cfg.clone();\n+                        cfg_options.append(target_cfgs);\n+\n                         // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         Some((\n                             CrateId(seq_index as u32),\n@@ -273,7 +282,7 @@ impl ProjectWorkspace {\n                                 krate.edition,\n                                 // FIXME json definitions can store the crate name\n                                 None,\n-                                krate.cfg.clone(),\n+                                cfg_options,\n                                 env,\n                                 proc_macro.unwrap_or_default(),\n                             ),"}, {"sha": "b962279496a743eeacabdf5629e530f27698eb54", "filename": "crates/ra_project_model/src/project_json.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db99f2dd7e8e244b858926bbf1d2a49e25f44733/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db99f2dd7e8e244b858926bbf1d2a49e25f44733/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=db99f2dd7e8e244b858926bbf1d2a49e25f44733", "patch": "@@ -31,6 +31,7 @@ pub struct Crate {\n     pub(crate) edition: Edition,\n     pub(crate) deps: Vec<Dependency>,\n     pub(crate) cfg: CfgOptions,\n+    pub(crate) target: Option<String>,\n     pub(crate) out_dir: Option<AbsPathBuf>,\n     pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n }\n@@ -65,6 +66,7 @@ impl ProjectJson {\n                         }\n                         cfg\n                     },\n+                    target: crate_data.target,\n                     out_dir: crate_data.out_dir.map(|it| base.join(it)),\n                     proc_macro_dylib_path: crate_data.proc_macro_dylib_path.map(|it| base.join(it)),\n                 })\n@@ -86,6 +88,7 @@ struct CrateData {\n     deps: Vec<DepData>,\n     #[serde(default)]\n     cfg: FxHashSet<String>,\n+    target: Option<String>,\n     out_dir: Option<PathBuf>,\n     proc_macro_dylib_path: Option<PathBuf>,\n }"}]}