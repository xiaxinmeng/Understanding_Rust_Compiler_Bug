{"sha": "14f32f64c8d4700b40ce4e49596b460869b15fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZjMyZjY0YzhkNDcwMGI0MGNlNGU0OTU5NmI0NjA4NjliMTVmZTc=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-05-03T13:24:50Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-05-03T13:34:10Z"}, "message": "rustdoc: Resolve nested `impl Trait`s", "tree": {"sha": "fc438ef48bd0ba8327a2749af7a8253c288a754f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc438ef48bd0ba8327a2749af7a8253c288a754f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f32f64c8d4700b40ce4e49596b460869b15fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f32f64c8d4700b40ce4e49596b460869b15fe7", "html_url": "https://github.com/rust-lang/rust/commit/14f32f64c8d4700b40ce4e49596b460869b15fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f32f64c8d4700b40ce4e49596b460869b15fe7/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427c5487493fbd5e96e81b7d3ba54784e0805df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/427c5487493fbd5e96e81b7d3ba54784e0805df7", "html_url": "https://github.com/rust-lang/rust/commit/427c5487493fbd5e96e81b7d3ba54784e0805df7"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "ffba91c924830fbfb3ee0f2f65d505a8ce2bc531", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/14f32f64c8d4700b40ce4e49596b460869b15fe7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f32f64c8d4700b40ce4e49596b460869b15fe7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=14f32f64c8d4700b40ce4e49596b460869b15fe7", "patch": "@@ -1755,8 +1755,18 @@ pub struct Generics {\n \n impl Clean<Generics> for hir::Generics {\n     fn clean(&self, cx: &DocContext) -> Generics {\n+        let mut params = Vec::with_capacity(self.params.len());\n+        for p in &self.params {\n+            let p = p.clean(cx);\n+            if let GenericParam::Type(ref tp) = p {\n+                if tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n+                    cx.impl_trait_bounds.borrow_mut().insert(tp.did, tp.bounds.clone());\n+                }\n+            }\n+            params.push(p);\n+        }\n         let mut g = Generics {\n-            params: self.params.clean(cx),\n+            params,\n             where_predicates: self.where_clause.predicates.clean(cx)\n         };\n \n@@ -1869,9 +1879,11 @@ pub struct Method {\n \n impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId) {\n     fn clean(&self, cx: &DocContext) -> Method {\n-        let generics = self.1.clean(cx);\n+        let (generics, decl) = enter_impl_trait(cx, || {\n+            (self.1.clean(cx), (&*self.0.decl, self.2).clean(cx))\n+        });\n         Method {\n-            decl: enter_impl_trait(cx, &generics.params, || (&*self.0.decl, self.2).clean(cx)),\n+            decl,\n             generics,\n             unsafety: self.0.unsafety,\n             constness: self.0.constness,\n@@ -1899,8 +1911,9 @@ pub struct Function {\n \n impl Clean<Item> for doctree::Function {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        let generics = self.generics.clean(cx);\n-        let decl = enter_impl_trait(cx, &generics.params, || (&self.decl, self.body).clean(cx));\n+        let (generics, decl) = enter_impl_trait(cx, || {\n+            (self.generics.clean(cx), (&self.decl, self.body).clean(cx))\n+        });\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n@@ -2139,12 +2152,12 @@ impl Clean<Item> for hir::TraitItem {\n                 MethodItem((sig, &self.generics, body).clean(cx))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n-                let generics = self.generics.clean(cx);\n+                let (generics, decl) = enter_impl_trait(cx, || {\n+                    (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n+                });\n                 TyMethodItem(TyMethod {\n                     unsafety: sig.unsafety.clone(),\n-                    decl: enter_impl_trait(cx, &generics.params, || {\n-                        (&*sig.decl, &names[..]).clean(cx)\n-                    }),\n+                    decl,\n                     generics,\n                     abi: sig.abi\n                 })\n@@ -3415,12 +3428,12 @@ pub struct BareFunctionDecl {\n \n impl Clean<BareFunctionDecl> for hir::BareFnTy {\n     fn clean(&self, cx: &DocContext) -> BareFunctionDecl {\n-        let generic_params = self.generic_params.clean(cx);\n+        let (generic_params, decl) = enter_impl_trait(cx, || {\n+            (self.generic_params.clean(cx), (&*self.decl, &self.arg_names[..]).clean(cx))\n+        });\n         BareFunctionDecl {\n             unsafety: self.unsafety,\n-            decl: enter_impl_trait(cx, &generic_params, || {\n-                (&*self.decl, &self.arg_names[..]).clean(cx)\n-            }),\n+            decl,\n             generic_params,\n             abi: self.abi,\n         }\n@@ -3722,11 +3735,11 @@ impl Clean<Item> for hir::ForeignItem {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let inner = match self.node {\n             hir::ForeignItemFn(ref decl, ref names, ref generics) => {\n-                let generics = generics.clean(cx);\n+                let (generics, decl) = enter_impl_trait(cx, || {\n+                    (generics.clean(cx), (&**decl, &names[..]).clean(cx))\n+                });\n                 ForeignFunctionItem(Function {\n-                    decl: enter_impl_trait(cx, &generics.params, || {\n-                        (&**decl, &names[..]).clean(cx)\n-                    }),\n+                    decl,\n                     generics,\n                     unsafety: hir::Unsafety::Unsafe,\n                     abi: Abi::Rust,\n@@ -4030,23 +4043,11 @@ pub fn def_id_to_path(cx: &DocContext, did: DefId, name: Option<String>) -> Vec<\n     once(crate_name).chain(relative).collect()\n }\n \n-pub fn enter_impl_trait<F, R>(cx: &DocContext, gps: &[GenericParam], f: F) -> R\n+pub fn enter_impl_trait<F, R>(cx: &DocContext, f: F) -> R\n where\n     F: FnOnce() -> R,\n {\n-    let bounds = gps.iter()\n-        .filter_map(|p| {\n-            if let GenericParam::Type(ref tp) = *p {\n-                if tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n-                    return Some((tp.did, tp.bounds.clone()));\n-                }\n-            }\n-\n-            None\n-        })\n-        .collect::<FxHashMap<DefId, Vec<TyParamBound>>>();\n-\n-    let old_bounds = mem::replace(&mut *cx.impl_trait_bounds.borrow_mut(), bounds);\n+    let old_bounds = mem::replace(&mut *cx.impl_trait_bounds.borrow_mut(), Default::default());\n     let r = f();\n     assert!(cx.impl_trait_bounds.borrow().is_empty());\n     *cx.impl_trait_bounds.borrow_mut() = old_bounds;"}, {"sha": "af51ff3d9419e909e2d37b320e3e026d29264427", "filename": "src/test/rustdoc/universal-impl-trait.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14f32f64c8d4700b40ce4e49596b460869b15fe7/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f32f64c8d4700b40ce4e49596b460869b15fe7/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs?ref=14f32f64c8d4700b40ce4e49596b460869b15fe7", "patch": "@@ -11,6 +11,8 @@\n #![feature(universal_impl_trait)]\n #![crate_name = \"foo\"]\n \n+use std::io::Read;\n+\n // @has foo/fn.foo.html\n // @has - //pre 'foo('\n // @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Clone\\.html\"'\n@@ -39,6 +41,11 @@ impl<T> S<T> {\n     // @matches - '_baz:.+struct\\.S\\.html.+impl .+trait\\.Clone\\.html'\n     pub fn baz(_baz: S<impl Clone>) {\n     }\n+\n+    // @has - 'qux</a>('\n+    // @matches - 'trait\\.Read\\.html'\n+    pub fn qux(_qux: impl IntoIterator<Item = S<impl Read>>) {\n+    }\n }\n \n // @has - 'method</a>('"}]}