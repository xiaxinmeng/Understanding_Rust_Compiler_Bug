{"sha": "04e957578c77c95a0505f5818d0068b459f673e3", "node_id": "C_kwDOAAsO6NoAKDA0ZTk1NzU3OGM3N2M5NWEwNTA1ZjU4MThkMDA2OGI0NTlmNjczZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T13:46:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T13:46:04Z"}, "message": "Auto merge of #108771 - matthiaskrgr:rollup-whlvo2g, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106440 (Ignore files in .gitignore in tidy)\n - #108613 (Remove `llvm.skip-rebuild` option)\n - #108616 (Sync codegen defaults with compiler defaults and add a ping message so they stay in sync)\n - #108618 (Rename `src/etc/vscode_settings.json` to `rust_analyzer_settings.json`)\n - #108626 (rustdoc-json: switch from HashMap to FxHashMap to fix non-determinism)\n - #108744 (Don't ICE when encountering bound var in builtin copy/clone bounds)\n - #108749 (Clean up rustdoc-js tester.js file)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8174baf83834823508359f8f1a75cdfbcd339ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8174baf83834823508359f8f1a75cdfbcd339ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04e957578c77c95a0505f5818d0068b459f673e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04e957578c77c95a0505f5818d0068b459f673e3", "html_url": "https://github.com/rust-lang/rust/commit/04e957578c77c95a0505f5818d0068b459f673e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04e957578c77c95a0505f5818d0068b459f673e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d439f81815b7b2a13b6a30b9263f9a60d46a4d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d439f81815b7b2a13b6a30b9263f9a60d46a4d4", "html_url": "https://github.com/rust-lang/rust/commit/0d439f81815b7b2a13b6a30b9263f9a60d46a4d4"}, {"sha": "52196169fed915c9fac8fbaab5234ee65d5a1c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/52196169fed915c9fac8fbaab5234ee65d5a1c21", "html_url": "https://github.com/rust-lang/rust/commit/52196169fed915c9fac8fbaab5234ee65d5a1c21"}], "stats": {"total": 481, "additions": 231, "deletions": 250}, "files": [{"sha": "ce797a7a8371dcb2be3b2666459864e9b16f3b9e", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -41,7 +41,7 @@ no_llvm_build\n /inst/\n /llvm/\n /mingw-build/\n-/build/\n+build/\n /build-rust-analyzer/\n /dist/\n /unicode-downloads"}, {"sha": "74bb3c8e6c2850760ad52b8299664c423858c62b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -2287,6 +2287,7 @@ dependencies = [\n  \"anyhow\",\n  \"clap 4.1.4\",\n  \"fs-err\",\n+ \"rustc-hash\",\n  \"rustdoc-json-types\",\n  \"serde\",\n  \"serde_json\",\n@@ -4850,6 +4851,7 @@ dependencies = [\n name = \"rustdoc-json-types\"\n version = \"0.1.0\"\n dependencies = [\n+ \"rustc-hash\",\n  \"serde\",\n  \"serde_json\",\n ]"}, {"sha": "cd3f3c114ba1e5742c13769928e479b8c4bd3487", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -2149,7 +2149,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n-            // We can make this an ICE if/once we actually instantiate the trait obligation.\n+            // We can make this an ICE if/once we actually instantiate the trait obligation eagerly.\n             ty::Bound(..) => None,\n \n             ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n@@ -2257,7 +2257,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::Adt(..) | ty::Alias(..) | ty::Param(..) => {\n+            ty::Adt(..) | ty::Alias(..) | ty::Param(..) | ty::Placeholder(..) => {\n                 // Fallback to whatever user-defined impls exist in this case.\n                 None\n             }\n@@ -2269,9 +2269,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ambiguous\n             }\n \n-            ty::Placeholder(..)\n-            | ty::Bound(..)\n-            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            // We can make this an ICE if/once we actually instantiate the trait obligation eagerly.\n+            ty::Bound(..) => None,\n+\n+            ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n             }\n         }"}, {"sha": "267aa8cb548386c5d291c2f587cfdb8ac9be9520", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -46,12 +46,6 @@ changelog-seen = 2\n # Defaults to \"if-available\" when `channel = \"dev\"` and \"false\" otherwise.\n #download-ci-llvm = \"if-available\"\n \n-# Indicates whether LLVM rebuild should be skipped when running bootstrap. If\n-# this is `false` then the compiler's LLVM will be rebuilt whenever the built\n-# version doesn't have the correct hash. If it is `true` then LLVM will never\n-# be rebuilt. The default value is `false`.\n-#skip-rebuild = false\n-\n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n "}, {"sha": "bf1aff7b72f47c4dab395c717d955ce9ed2e57fb", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -112,7 +112,6 @@ pub struct Config {\n     pub backtrace_on_ice: bool,\n \n     // llvm codegen options\n-    pub llvm_skip_rebuild: bool,\n     pub llvm_assertions: bool,\n     pub llvm_tests: bool,\n     pub llvm_plugins: bool,\n@@ -666,7 +665,6 @@ define_config! {\n define_config! {\n     /// TOML representation of how the LLVM build is configured.\n     struct Llvm {\n-        skip_rebuild: Option<bool> = \"skip-rebuild\",\n         optimize: Option<bool> = \"optimize\",\n         thin_lto: Option<bool> = \"thin-lto\",\n         release_debuginfo: Option<bool> = \"release-debuginfo\",\n@@ -1060,11 +1058,6 @@ impl Config {\n             config.mandir = install.mandir.map(PathBuf::from);\n         }\n \n-        // We want the llvm-skip-rebuild flag to take precedence over the\n-        // skip-rebuild config.toml option so we store it separately\n-        // so that we can infer the right value\n-        let mut llvm_skip_rebuild = flags.llvm_skip_rebuild;\n-\n         // Store off these values as options because if they're not provided\n         // we'll infer default values for them later\n         let mut llvm_assertions = None;\n@@ -1170,7 +1163,6 @@ impl Config {\n             llvm_assertions = llvm.assertions;\n             llvm_tests = llvm.tests;\n             llvm_plugins = llvm.plugins;\n-            llvm_skip_rebuild = llvm_skip_rebuild.or(llvm.skip_rebuild);\n             set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_thin_lto, llvm.thin_lto);\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);\n@@ -1324,7 +1316,6 @@ impl Config {\n         // Now that we've reached the end of our configuration, infer the\n         // default values for all options that we haven't otherwise stored yet.\n \n-        config.llvm_skip_rebuild = llvm_skip_rebuild.unwrap_or(false);\n         config.llvm_assertions = llvm_assertions.unwrap_or(false);\n         config.llvm_tests = llvm_tests.unwrap_or(false);\n         config.llvm_plugins = llvm_plugins.unwrap_or(false);"}, {"sha": "eb2afa555f18312b3fd95245f3462abcf985fb20", "filename": "src/bootstrap/defaults/config.codegen.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -17,3 +17,5 @@ debug-logging = true\n incremental = true\n # Print backtrace on internal compiler errors during bootstrap\n backtrace-on-ice = true\n+# Make the compiler and standard library faster to build, at the expense of a ~20% runtime slowdown.\n+lto = \"off\""}, {"sha": "2b0b772a61817bd5504ca220e19dbca1b4158f99", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -67,8 +67,6 @@ pub struct Flags {\n     // true => deny, false => warn\n     pub deny_warnings: Option<bool>,\n \n-    pub llvm_skip_rebuild: Option<bool>,\n-\n     pub rust_profile_use: Option<String>,\n     pub rust_profile_generate: Option<String>,\n \n@@ -249,14 +247,6 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         opts.optopt(\"\", \"error-format\", \"rustc error format\", \"FORMAT\");\n         opts.optflag(\"\", \"json-output\", \"use message-format=json\");\n         opts.optopt(\"\", \"color\", \"whether to use color in cargo and rustc output\", \"STYLE\");\n-        opts.optopt(\n-            \"\",\n-            \"llvm-skip-rebuild\",\n-            \"whether rebuilding llvm should be skipped \\\n-             a VALUE of TRUE indicates that llvm will not be rebuilt \\\n-             VALUE overrides the skip-rebuild option in config.toml.\",\n-            \"VALUE\",\n-        );\n         opts.optopt(\n             \"\",\n             \"rust-profile-generate\",\n@@ -714,9 +704,6 @@ Arguments:\n                 .collect::<Vec<_>>(),\n             include_default_paths: matches.opt_present(\"include-default-paths\"),\n             deny_warnings: parse_deny_warnings(&matches),\n-            llvm_skip_rebuild: matches.opt_str(\"llvm-skip-rebuild\").map(|s| s.to_lowercase()).map(\n-                |s| s.parse::<bool>().expect(\"`llvm-skip-rebuild` should be either true or false\"),\n-            ),\n             color: matches\n                 .opt_get_default(\"color\", Color::Auto)\n                 .expect(\"`color` should be `always`, `never`, or `auto`\"),"}, {"sha": "8453a25f38a56dc1cf992f159c183330e7b85402", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -108,15 +108,6 @@ pub fn prebuilt_llvm_config(\n     let stamp = out_dir.join(\"llvm-finished-building\");\n     let stamp = HashStamp::new(stamp, builder.in_tree_llvm_info.sha());\n \n-    if builder.config.llvm_skip_rebuild && stamp.path.exists() {\n-        builder.info(\n-            \"Warning: \\\n-                Using a potentially stale build of LLVM; \\\n-                This may not behave well.\",\n-        );\n-        return Ok(res);\n-    }\n-\n     if stamp.is_done() {\n         if stamp.hash.is_none() {\n             builder.info("}, {"sha": "09f26862b4ab29520bfb43168a9f754b2f6b62b8", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -24,15 +24,15 @@ pub enum Profile {\n     None,\n }\n \n-/// A list of historical hashes of `src/etc/vscode_settings.json`.\n+/// A list of historical hashes of `src/etc/rust_analyzer_settings.json`.\n /// New entries should be appended whenever this is updated so we can detect\n /// outdated vs. user-modified settings files.\n static SETTINGS_HASHES: &[&str] = &[\n     \"ea67e259dedf60d4429b6c349a564ffcd1563cf41c920a856d1f5b16b4701ac8\",\n     \"56e7bf011c71c5d81e0bf42e84938111847a810eee69d906bba494ea90b51922\",\n     \"af1b5efe196aed007577899db9dae15d6dbc923d6fa42fa0934e68617ba9bbe0\",\n ];\n-static VSCODE_SETTINGS: &str = include_str!(\"../etc/vscode_settings.json\");\n+static RUST_ANALYZER_SETTINGS: &str = include_str!(\"../etc/rust_analyzer_settings.json\");\n \n impl Profile {\n     fn include_path(&self, src_path: &Path) -> PathBuf {\n@@ -489,7 +489,7 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n     Ok(())\n }\n \n-/// Sets up or displays `src/etc/vscode_settings.json`\n+/// Sets up or displays `src/etc/rust_analyzer_settings.json`\n #[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n pub struct Vscode;\n \n@@ -580,10 +580,10 @@ fn create_vscode_settings_maybe(config: &Config) -> io::Result<()> {\n             }\n             _ => \"Created\",\n         };\n-        fs::write(&vscode_settings, &VSCODE_SETTINGS)?;\n+        fs::write(&vscode_settings, &RUST_ANALYZER_SETTINGS)?;\n         println!(\"{verb} `.vscode/settings.json`\");\n     } else {\n-        println!(\"\\n{VSCODE_SETTINGS}\");\n+        println!(\"\\n{RUST_ANALYZER_SETTINGS}\");\n     }\n     Ok(())\n }"}, {"sha": "0fe6e4a464463e121c5c527a96da7887843e7c2a", "filename": "src/bootstrap/setup/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fsetup%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fbootstrap%2Fsetup%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup%2Ftests.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -1,14 +1,14 @@\n-use super::{SETTINGS_HASHES, VSCODE_SETTINGS};\n+use super::{RUST_ANALYZER_SETTINGS, SETTINGS_HASHES};\n use sha2::Digest;\n \n #[test]\n fn check_matching_settings_hash() {\n     let mut hasher = sha2::Sha256::new();\n-    hasher.update(&VSCODE_SETTINGS);\n+    hasher.update(&RUST_ANALYZER_SETTINGS);\n     let hash = hex::encode(hasher.finalize().as_slice());\n     assert_eq!(\n         &hash,\n         SETTINGS_HASHES.last().unwrap(),\n-        \"Update `SETTINGS_HASHES` with the new hash of `src/etc/vscode_settings.json`\"\n+        \"Update `SETTINGS_HASHES` with the new hash of `src/etc/rust_analyzer_settings.json`\"\n     );\n }"}, {"sha": "32d3440f1dc989f8bde6ad5a895a2c38f26c91da", "filename": "src/doc/rustc/src/platform-support/armeb-unknown-linux-gnueabi.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-unknown-linux-gnueabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-unknown-linux-gnueabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmeb-unknown-linux-gnueabi.md?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -26,7 +26,6 @@ Therefore, you can build Rust with support for the target by adding it to the ta\n ```toml\n [llvm]\n download-ci-llvm = false\n-skip-rebuild = true\n optimize = true\n ninja = true\n targets = \"ARM;X86\""}, {"sha": "dd01bfaa7252d77022b423ce858ea1951147accf", "filename": "src/etc/rust_analyzer_settings.json", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fetc%2Frust_analyzer_settings.json", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Fetc%2Frust_analyzer_settings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust_analyzer_settings.json?ref=04e957578c77c95a0505f5818d0068b459f673e3", "previous_filename": "src/etc/vscode_settings.json"}, {"sha": "d63caa7ad70109b9c74acdaf19264f2d709ef44b", "filename": "src/rustdoc-json-types/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Frustdoc-json-types%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Frustdoc-json-types%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2FCargo.toml?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -8,6 +8,7 @@ path = \"lib.rs\"\n \n [dependencies]\n serde = { version = \"1.0\", features = [\"derive\"] }\n+rustc-hash = \"1.1.0\"\n \n [dev-dependencies]\n serde_json = \"1.0\""}, {"sha": "4c210291b113b1bd2cde6c4a5d4d91882b190032", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -3,10 +3,9 @@\n //! These types are the public API exposed through the `--output-format json` flag. The [`Crate`]\n //! struct is the root of the JSON blob and all other items are contained within.\n \n-use std::collections::HashMap;\n-use std::path::PathBuf;\n-\n+use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n+use std::path::PathBuf;\n \n /// rustdoc format-version.\n pub const FORMAT_VERSION: u32 = 24;\n@@ -24,11 +23,11 @@ pub struct Crate {\n     pub includes_private: bool,\n     /// A collection of all items in the local crate as well as some external traits and their\n     /// items that are referenced locally.\n-    pub index: HashMap<Id, Item>,\n+    pub index: FxHashMap<Id, Item>,\n     /// Maps IDs to fully qualified paths and other info helpful for generating links.\n-    pub paths: HashMap<Id, ItemSummary>,\n+    pub paths: FxHashMap<Id, ItemSummary>,\n     /// Maps `crate_id` of items to a crate name and html_root_url if it exists.\n-    pub external_crates: HashMap<u32, ExternalCrate>,\n+    pub external_crates: FxHashMap<u32, ExternalCrate>,\n     /// A single version number to be used in the future when making backwards incompatible changes\n     /// to the JSON output.\n     pub format_version: u32,\n@@ -54,8 +53,8 @@ pub struct ItemSummary {\n     ///\n     /// Note that items can appear in multiple paths, and the one chosen is implementation\n     /// defined. Currently, this is the full path to where the item was defined. Eg\n-    /// [`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`HashMap`] is\n-    /// `[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.\n+    /// [`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`HashMap`][`std::collections::HashMap`]\n+    /// is `[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.\n     pub path: Vec<String>,\n     /// Whether this item is a struct, trait, macro, etc.\n     pub kind: ItemKind,\n@@ -80,7 +79,7 @@ pub struct Item {\n     /// Some(\"\") if there is some documentation but it is empty (EG `#[doc = \"\"]`).\n     pub docs: Option<String>,\n     /// This mapping resolves [intra-doc links](https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md) from the docstring to their IDs\n-    pub links: HashMap<String, Id>,\n+    pub links: FxHashMap<String, Id>,\n     /// Stringified versions of the attributes on this item (e.g. `\"#[inline]\"`)\n     pub attrs: Vec<String>,\n     pub deprecation: Option<Deprecation>,"}, {"sha": "1318a1f447620b17e9ab1901cb68a6291c376dac", "filename": "src/tools/jsondoclint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Fjsondoclint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Fjsondoclint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2FCargo.toml?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -9,6 +9,7 @@ edition = \"2021\"\n anyhow = \"1.0.62\"\n clap = { version = \"4.0.15\", features = [\"derive\"] }\n fs-err = \"2.8.1\"\n+rustc-hash = \"1.1.0\"\n rustdoc-json-types = { version = \"0.1.0\", path = \"../../rustdoc-json-types\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.85\""}, {"sha": "95a56a9dfac457a0ed78bfe162cfe670c20ee086", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -1,5 +1,4 @@\n-use std::collections::HashMap;\n-\n+use rustc_hash::FxHashMap;\n use rustdoc_json_types::{Crate, Item, ItemKind, ItemSummary, Visibility, FORMAT_VERSION};\n \n use crate::json_find::SelectorPart;\n@@ -27,7 +26,7 @@ fn errors_on_missing_links() {\n         root: id(\"0\"),\n         crate_version: None,\n         includes_private: false,\n-        index: HashMap::from_iter([(\n+        index: FxHashMap::from_iter([(\n             id(\"0\"),\n             Item {\n                 name: Some(\"root\".to_owned()),\n@@ -36,7 +35,7 @@ fn errors_on_missing_links() {\n                 span: None,\n                 visibility: Visibility::Public,\n                 docs: None,\n-                links: HashMap::from_iter([(\"Not Found\".to_owned(), id(\"1\"))]),\n+                links: FxHashMap::from_iter([(\"Not Found\".to_owned(), id(\"1\"))]),\n                 attrs: vec![],\n                 deprecation: None,\n                 inner: ItemEnum::Module(Module {\n@@ -46,8 +45,8 @@ fn errors_on_missing_links() {\n                 }),\n             },\n         )]),\n-        paths: HashMap::new(),\n-        external_crates: HashMap::new(),\n+        paths: FxHashMap::default(),\n+        external_crates: FxHashMap::default(),\n         format_version: rustdoc_json_types::FORMAT_VERSION,\n     };\n \n@@ -73,7 +72,7 @@ fn errors_on_local_in_paths_and_not_index() {\n         root: id(\"0:0:1572\"),\n         crate_version: None,\n         includes_private: false,\n-        index: HashMap::from_iter([\n+        index: FxHashMap::from_iter([\n             (\n                 id(\"0:0:1572\"),\n                 Item {\n@@ -83,7 +82,7 @@ fn errors_on_local_in_paths_and_not_index() {\n                     span: None,\n                     visibility: Visibility::Public,\n                     docs: None,\n-                    links: HashMap::from_iter([((\"prim@i32\".to_owned(), id(\"0:1:1571\")))]),\n+                    links: FxHashMap::from_iter([((\"prim@i32\".to_owned(), id(\"0:1:1571\")))]),\n                     attrs: Vec::new(),\n                     deprecation: None,\n                     inner: ItemEnum::Module(Module {\n@@ -102,22 +101,22 @@ fn errors_on_local_in_paths_and_not_index() {\n                     span: None,\n                     visibility: Visibility::Public,\n                     docs: None,\n-                    links: HashMap::default(),\n+                    links: FxHashMap::default(),\n                     attrs: Vec::new(),\n                     deprecation: None,\n                     inner: ItemEnum::Primitive(Primitive { name: \"i32\".to_owned(), impls: vec![] }),\n                 },\n             ),\n         ]),\n-        paths: HashMap::from_iter([(\n+        paths: FxHashMap::from_iter([(\n             id(\"0:1:1571\"),\n             ItemSummary {\n                 crate_id: 0,\n                 path: vec![\"microcore\".to_owned(), \"i32\".to_owned()],\n                 kind: ItemKind::Primitive,\n             },\n         )]),\n-        external_crates: HashMap::default(),\n+        external_crates: FxHashMap::default(),\n         format_version: rustdoc_json_types::FORMAT_VERSION,\n     };\n \n@@ -137,7 +136,7 @@ fn checks_local_crate_id_is_correct() {\n         root: id(\"root\"),\n         crate_version: None,\n         includes_private: false,\n-        index: HashMap::from_iter([(\n+        index: FxHashMap::from_iter([(\n             id(\"root\"),\n             Item {\n                 id: id(\"root\"),\n@@ -146,7 +145,7 @@ fn checks_local_crate_id_is_correct() {\n                 span: None,\n                 visibility: Visibility::Public,\n                 docs: None,\n-                links: HashMap::default(),\n+                links: FxHashMap::default(),\n                 attrs: Vec::new(),\n                 deprecation: None,\n                 inner: ItemEnum::Module(Module {\n@@ -156,8 +155,8 @@ fn checks_local_crate_id_is_correct() {\n                 }),\n             },\n         )]),\n-        paths: HashMap::default(),\n-        external_crates: HashMap::default(),\n+        paths: FxHashMap::default(),\n+        external_crates: FxHashMap::default(),\n         format_version: FORMAT_VERSION,\n     };\n     check(&krate, &[]);"}, {"sha": "864e68de55dedbd7fb68815edcf250d247e72840", "filename": "src/tools/replace-version-placeholder/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let version_str = version_str.trim();\n     walk::walk(\n         &root_path,\n-        &mut |path| {\n+        |path| {\n             walk::filter_dirs(path)\n                 // We exempt these as they require the placeholder\n                 // for their operation"}, {"sha": "e617ceba3b951f7c005d3640837eb002e39fd263", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 55, "deletions": 58, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -2,8 +2,8 @@ const fs = require('fs');\n const path = require('path');\n \n function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n+    const Module = module.constructor;\n+    const m = new Module();\n     m._compile(content, \"tmp.js\");\n     m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n         content.startsWith(\"// ignore-order\\n\");\n@@ -26,16 +26,16 @@ function contentToDiffLine(key, value) {\n // the diff between the two items.\n function betterLookingDiff(entry, data) {\n     let output = ' {\\n';\n-    let spaces = '     ';\n-    for (let key in entry) {\n+    const spaces = '     ';\n+    for (const key in entry) {\n         if (!entry.hasOwnProperty(key)) {\n             continue;\n         }\n         if (!data || !data.hasOwnProperty(key)) {\n             output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n             continue;\n         }\n-        let value = data[key];\n+        const value = data[key];\n         if (value !== entry[key]) {\n             output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n             output += '+' + spaces + contentToDiffLine(key, value) + '\\n';\n@@ -47,31 +47,28 @@ function betterLookingDiff(entry, data) {\n }\n \n function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n+    return data.findIndex(data_entry => {\n+        let allGood = true;\n+        for (const key in entry) {\n             if (!entry.hasOwnProperty(key)) {\n                 continue;\n             }\n-            var value = data[i][key];\n+            let value = data_entry[key];\n             // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n+            if (key === 'path' && data_entry['parent'] !== undefined) {\n                 if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n+                    value += '::' + data_entry['parent']['name'];\n                 } else {\n-                    value = data[i]['parent']['name'];\n+                    value = data_entry['parent']['name'];\n                 }\n             }\n             if (value !== entry[key]) {\n                 allGood = false;\n                 break;\n             }\n         }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n+        return allGood === true;\n+    });\n }\n \n // This function checks if `expected` has all the required fields needed for the checks.\n@@ -97,13 +94,12 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n     } else {\n         fieldsToCheck = [];\n     }\n-    for (var i = 0; i < fieldsToCheck.length; ++i) {\n-        const field = fieldsToCheck[i];\n+    for (const field of fieldsToCheck) {\n         if (!expected.hasOwnProperty(field)) {\n             let text = `${queryName}==> Mandatory key \\`${field}\\` is not present`;\n             if (fullPath.length > 0) {\n                 text += ` in field \\`${fullPath}\\``;\n-                if (position != null) {\n+                if (position !== null) {\n                     text += ` (position ${position})`;\n                 }\n             }\n@@ -114,7 +110,8 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n \n function valueCheck(fullPath, expected, result, error_text, queryName) {\n     if (Array.isArray(expected)) {\n-        for (var i = 0; i < expected.length; ++i) {\n+        let i;\n+        for (i = 0; i < expected.length; ++i) {\n             checkNeededFields(fullPath, expected[i], error_text, queryName, i);\n             if (i >= result.length) {\n                 error_text.push(`${queryName}==> EXPECTED has extra value in array from field ` +\n@@ -154,8 +151,8 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n             valueCheck(obj_path, expected[key], result_v, error_text, queryName);\n         }\n     } else {\n-        expectedValue = JSON.stringify(expected);\n-        resultValue = JSON.stringify(result);\n+        const expectedValue = JSON.stringify(expected);\n+        const resultValue = JSON.stringify(result);\n         if (expectedValue != resultValue) {\n             error_text.push(`${queryName}==> Different values for field \\`${fullPath}\\`:\\n` +\n                 `EXPECTED: \\`${expectedValue}\\`\\nRESULT:   \\`${resultValue}\\``);\n@@ -164,7 +161,7 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n }\n \n function runParser(query, expected, parseQuery, queryName) {\n-    var error_text = [];\n+    const error_text = [];\n     checkNeededFields(\"\", expected, error_text, queryName, null);\n     if (error_text.length === 0) {\n         valueCheck('', expected, parseQuery(query), error_text, queryName);\n@@ -176,48 +173,48 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     const ignore_order = loadedFile.ignore_order;\n     const exact_check = loadedFile.exact_check;\n \n-    var results = doSearch(query, loadedFile.FILTER_CRATE);\n-    var error_text = [];\n+    const results = doSearch(query, loadedFile.FILTER_CRATE);\n+    const error_text = [];\n \n-    for (var key in expected) {\n+    for (const key in expected) {\n         if (!expected.hasOwnProperty(key)) {\n             continue;\n         }\n         if (!results.hasOwnProperty(key)) {\n             error_text.push('==> Unknown key \"' + key + '\"');\n             break;\n         }\n-        var entry = expected[key];\n+        const entry = expected[key];\n \n         if (exact_check == true && entry.length !== results[key].length) {\n             error_text.push(queryName + \"==> Expected exactly \" + entry.length +\n                             \" results but found \" + results[key].length + \" in '\" + key + \"'\");\n         }\n \n-        var prev_pos = -1;\n-        for (var i = 0; i < entry.length; ++i) {\n-            var entry_pos = lookForEntry(entry[i], results[key]);\n-            if (entry_pos === null) {\n+        let prev_pos = -1;\n+        entry.forEach((elem, index) => {\n+            const entry_pos = lookForEntry(elem, results[key]);\n+            if (entry_pos === -1) {\n                 error_text.push(queryName + \"==> Result not found in '\" + key + \"': '\" +\n-                                JSON.stringify(entry[i]) + \"'\");\n+                                JSON.stringify(elem) + \"'\");\n                 // By default, we just compare the two first items.\n                 let item_to_diff = 0;\n-                if ((ignore_order === false || exact_check === true) && i < results[key].length) {\n-                    item_to_diff = i;\n+                if ((!ignore_order || exact_check) && index < results[key].length) {\n+                    item_to_diff = index;\n                 }\n                 error_text.push(\"Diff of first error:\\n\" +\n-                    betterLookingDiff(entry[i], results[key][item_to_diff]));\n+                    betterLookingDiff(elem, results[key][item_to_diff]));\n             } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n                 error_text.push(queryName + \"==> Exact check failed at position \" + (prev_pos + 1) +\n-                                \": expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                JSON.stringify(results[key][i]) + \"'\");\n+                                \": expected '\" + JSON.stringify(elem) + \"' but found '\" +\n+                                JSON.stringify(results[key][index]) + \"'\");\n             } else if (ignore_order === false && entry_pos < prev_pos) {\n-                error_text.push(queryName + \"==> '\" + JSON.stringify(entry[i]) + \"' was supposed \" +\n+                error_text.push(queryName + \"==> '\" + JSON.stringify(elem) + \"' was supposed \" +\n                                 \"to be before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n             } else {\n                 prev_pos = entry_pos;\n             }\n-        }\n+        });\n     }\n     return error_text;\n }\n@@ -252,15 +249,15 @@ function runCheck(loadedFile, key, callback) {\n             console.log(`==> QUERY variable should have the same length as ${key}`);\n             return 1;\n         }\n-        for (var i = 0; i < query.length; ++i) {\n-            var error_text = callback(query[i], expected[i], \"[ query `\" + query[i] + \"`]\");\n+        for (let i = 0; i < query.length; ++i) {\n+            const error_text = callback(query[i], expected[i], \"[ query `\" + query[i] + \"`]\");\n             if (checkResult(error_text, loadedFile, false) !== 0) {\n                 return 1;\n             }\n         }\n         console.log(\"OK\");\n     } else {\n-        var error_text = callback(query, expected, \"\");\n+        const error_text = callback(query, expected, \"\");\n         if (checkResult(error_text, loadedFile, true) !== 0) {\n             return 1;\n         }\n@@ -269,9 +266,9 @@ function runCheck(loadedFile, key, callback) {\n }\n \n function runChecks(testFile, doSearch, parseQuery) {\n-    var checkExpected = false;\n-    var checkParsed = false;\n-    var testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n+    let checkExpected = false;\n+    let checkParsed = false;\n+    let testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n@@ -294,7 +291,7 @@ function runChecks(testFile, doSearch, parseQuery) {\n     }\n \n     const loadedFile = loadContent(testFileContent);\n-    var res = 0;\n+    let res = 0;\n \n     if (checkExpected) {\n         res += runCheck(loadedFile, \"EXPECTED\", (query, expected, text) => {\n@@ -323,8 +320,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n     const searchIndex = require(searchIndexJs);\n \n     const staticFiles = path.join(doc_folder, \"static.files\");\n-    const searchJs = fs.readdirSync(staticFiles).find(\n-        f => f.match(/search.*\\.js$/));\n+    const searchJs = fs.readdirSync(staticFiles).find(f => f.match(/search.*\\.js$/));\n     const searchModule = require(path.join(staticFiles, searchJs));\n     const searchWords = searchModule.initSearch(searchIndex.searchIndex);\n \n@@ -334,7 +330,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n                 filterCrate, currentCrate);\n         },\n         parseQuery: searchModule.parseQuery,\n-    }\n+    };\n }\n \n function showHelp() {\n@@ -349,22 +345,22 @@ function showHelp() {\n }\n \n function parseOptions(args) {\n-    var opts = {\n+    const opts = {\n         \"crate_name\": \"\",\n         \"resource_suffix\": \"\",\n         \"doc_folder\": \"\",\n         \"test_folder\": \"\",\n         \"test_file\": [],\n     };\n-    var correspondences = {\n+    const correspondences = {\n         \"--resource-suffix\": \"resource_suffix\",\n         \"--doc-folder\": \"doc_folder\",\n         \"--test-folder\": \"test_folder\",\n         \"--test-file\": \"test_file\",\n         \"--crate-name\": \"crate_name\",\n     };\n \n-    for (var i = 0; i < args.length; ++i) {\n+    for (let i = 0; i < args.length; ++i) {\n         if (correspondences.hasOwnProperty(args[i])) {\n             i += 1;\n             if (i >= args.length) {\n@@ -398,17 +394,18 @@ function parseOptions(args) {\n }\n \n function main(argv) {\n-    var opts = parseOptions(argv.slice(2));\n+    const opts = parseOptions(argv.slice(2));\n     if (opts === null) {\n         return 1;\n     }\n \n-    let parseAndSearch = loadSearchJS(\n+    const parseAndSearch = loadSearchJS(\n         opts[\"doc_folder\"],\n-        opts[\"resource_suffix\"]);\n-    var errors = 0;\n+        opts[\"resource_suffix\"]\n+    );\n+    let errors = 0;\n \n-    let doSearch = function (queryStr, filterCrate) {\n+    const doSearch = function (queryStr, filterCrate) {\n         return parseAndSearch.doSearch(queryStr, filterCrate, opts[\"crate_name\"]);\n     };\n "}, {"sha": "9bfee1efc0b2e03daad02a5090bbd725a479e1b0", "filename": "src/tools/tidy/src/alphabetical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Falphabetical.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -95,7 +95,7 @@ fn check_section<'a>(\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    walk(path, &mut filter_dirs, &mut |entry, contents| {\n+    walk(path, filter_dirs, &mut |entry, contents| {\n         let file = &entry.path().display();\n \n         let mut lines = contents.lines().enumerate().peekable();"}, {"sha": "2d6abe59343f2f031b9a1762fb2234efcc998f6a", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -101,54 +101,38 @@ mod os_impl {\n \n         const ALLOWED: &[&str] = &[\"configure\", \"x\"];\n \n-        walk_no_read(\n-            path,\n-            &mut |path| {\n-                filter_dirs(path)\n-                    || path.ends_with(\"src/etc\")\n-                    // This is a list of directories that we almost certainly\n-                    // don't need to walk. A future PR will likely want to\n-                    // remove these in favor of crate::walk_no_read using git\n-                    // ls-files to discover the paths we should check, which\n-                    // would naturally ignore all of these directories. It's\n-                    // also likely faster than walking the directory tree\n-                    // directly (since git is just reading from a couple files\n-                    // to produce the results).\n-                    || path.ends_with(\"target\")\n-                    || path.ends_with(\"build\")\n-                    || path.ends_with(\".git\")\n-            },\n-            &mut |entry| {\n-                let file = entry.path();\n-                let extension = file.extension();\n-                let scripts = [\"py\", \"sh\", \"ps1\"];\n-                if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n-                    return;\n-                }\n+        // FIXME: we don't need to look at all binaries, only files that have been modified in this branch\n+        // (e.g. using `git ls-files`).\n+        walk_no_read(path, |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n+            let file = entry.path();\n+            let extension = file.extension();\n+            let scripts = [\"py\", \"sh\", \"ps1\"];\n+            if scripts.into_iter().any(|e| extension == Some(OsStr::new(e))) {\n+                return;\n+            }\n \n-                if t!(is_executable(&file), file) {\n-                    let rel_path = file.strip_prefix(path).unwrap();\n-                    let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n+            if t!(is_executable(&file), file) {\n+                let rel_path = file.strip_prefix(path).unwrap();\n+                let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n \n-                    if ALLOWED.contains(&git_friendly_path.as_str()) {\n-                        return;\n-                    }\n+                if ALLOWED.contains(&git_friendly_path.as_str()) {\n+                    return;\n+                }\n \n-                    let output = Command::new(\"git\")\n-                        .arg(\"ls-files\")\n-                        .arg(&git_friendly_path)\n-                        .current_dir(path)\n-                        .stderr(Stdio::null())\n-                        .output()\n-                        .unwrap_or_else(|e| {\n-                            panic!(\"could not run git ls-files: {e}\");\n-                        });\n-                    let path_bytes = rel_path.as_os_str().as_bytes();\n-                    if output.status.success() && output.stdout.starts_with(path_bytes) {\n-                        tidy_error!(bad, \"binary checked into source: {}\", file.display());\n-                    }\n+                let output = Command::new(\"git\")\n+                    .arg(\"ls-files\")\n+                    .arg(&git_friendly_path)\n+                    .current_dir(path)\n+                    .stderr(Stdio::null())\n+                    .output()\n+                    .unwrap_or_else(|e| {\n+                        panic!(\"could not run git ls-files: {e}\");\n+                    });\n+                let path_bytes = rel_path.as_os_str().as_bytes();\n+                if output.status.success() && output.stdout.starts_with(path_bytes) {\n+                    tidy_error!(bad, \"binary checked into source: {}\", file.display());\n                 }\n-            },\n-        )\n+            }\n+        })\n     }\n }"}, {"sha": "2241375eaae11f14ed89f15e12d37a433238cf4f", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -6,7 +6,7 @@ use std::path::Path;\n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(test_dir: &Path, bad: &mut bool) {\n-    walk(test_dir, &mut filter_dirs, &mut |entry, contents| {\n+    walk(test_dir, filter_dirs, &mut |entry, contents| {\n         let filename = entry.path();\n         let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n         if !is_rust {"}, {"sha": "67d9c30a04ff2500e9a3e4eaea7f81ec1ff045ab", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -9,27 +9,20 @@ fn is_edition_2021(mut line: &str) -> bool {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    walk(\n-        path,\n-        &mut |path| {\n-            filter_dirs(path)\n-                || (path.ends_with(\"tests\") && path.join(\"COMPILER_TESTS.md\").exists())\n-        },\n-        &mut |entry, contents| {\n-            let file = entry.path();\n-            let filename = file.file_name().unwrap();\n-            if filename != \"Cargo.toml\" {\n-                return;\n-            }\n+    walk(path, |path| filter_dirs(path), &mut |entry, contents| {\n+        let file = entry.path();\n+        let filename = file.file_name().unwrap();\n+        if filename != \"Cargo.toml\" {\n+            return;\n+        }\n \n-            let is_2021 = contents.lines().any(is_edition_2021);\n-            if !is_2021 {\n-                tidy_error!(\n-                    bad,\n-                    \"{} doesn't have `edition = \\\"2021\\\"` on a separate line\",\n-                    file.display()\n-                );\n-            }\n-        },\n-    );\n+        let is_2021 = contents.lines().any(is_edition_2021);\n+        if !is_2021 {\n+            tidy_error!(\n+                bad,\n+                \"{} doesn't have `edition = \\\"2021\\\"` on a separate line\",\n+                file.display()\n+            );\n+        }\n+    });\n }"}, {"sha": "d90ad5abbf999cd536253891da14334034cdbf78", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -127,7 +127,7 @@ fn check_error_codes_docs(\n \n     let mut no_longer_emitted_codes = Vec::new();\n \n-    walk(&docs_path, &mut |_| false, &mut |entry, contents| {\n+    walk(&docs_path, |_| false, &mut |entry, contents| {\n         let path = entry.path();\n \n         // Error if the file isn't markdown.\n@@ -319,7 +319,7 @@ fn check_error_codes_used(\n \n     let mut found_codes = Vec::new();\n \n-    walk_many(search_paths, &mut filter_dirs, &mut |entry, contents| {\n+    walk_many(search_paths, filter_dirs, &mut |entry, contents| {\n         let path = entry.path();\n \n         // Return early if we aren't looking at a source file."}, {"sha": "f0f13628dc796742cd5f8fa82c269cfa8bcb4d5a", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -101,7 +101,7 @@ pub fn check(\n             &tests_path.join(\"rustdoc-ui\"),\n             &tests_path.join(\"rustdoc\"),\n         ],\n-        &mut filter_dirs,\n+        filter_dirs,\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n@@ -477,11 +477,11 @@ fn get_and_check_lib_features(\n \n fn map_lib_features(\n     base_src_path: &Path,\n-    mf: &mut dyn FnMut(Result<(&str, Feature), &str>, &Path, usize),\n+    mf: &mut (dyn Send + Sync + FnMut(Result<(&str, Feature), &str>, &Path, usize)),\n ) {\n     walk(\n         base_src_path,\n-        &mut |path| filter_dirs(path) || path.ends_with(\"tests\"),\n+        |path| filter_dirs(path) || path.ends_with(\"tests\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();"}, {"sha": "d98758ace4fc85aeada07809d66244cb197e88dd", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -91,7 +91,6 @@ fn main() {\n \n         // Checks that need to be done for both the compiler and std libraries.\n         check!(unit_tests, &src_path);\n-        check!(unit_tests, &tests_path);\n         check!(unit_tests, &compiler_path);\n         check!(unit_tests, &library_path);\n \n@@ -107,7 +106,6 @@ fn main() {\n         check!(edition, &src_path);\n         check!(edition, &compiler_path);\n         check!(edition, &library_path);\n-        check!(edition, &tests_path);\n \n         check!(alphabetical, &src_path);\n         check!(alphabetical, &tests_path);"}, {"sha": "33938ac9a0a5f7776e30119c867c12a1e6c10022", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -68,7 +68,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     // Sanity check that the complex parsing here works.\n     let mut saw_target_arch = false;\n     let mut saw_cfg_bang = false;\n-    walk(path, &mut filter_dirs, &mut |entry, contents| {\n+    walk(path, filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n         if !filestr.ends_with(\".rs\") {"}, {"sha": "d7db5c02297868674a13e0ab3efc6d644e7be38c", "filename": "src/tools/tidy/src/rustdoc_gui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -5,7 +5,7 @@ use std::path::Path;\n pub fn check(path: &Path, bad: &mut bool) {\n     crate::walk::walk(\n         &path.join(\"rustdoc-gui\"),\n-        &mut |p| {\n+        |p| {\n             // If there is no extension, it's very likely a folder and we want to go into it.\n             p.extension().map(|e| e != \"goml\").unwrap_or(false)\n         },"}, {"sha": "9ecb30529cc920d10da8a7198b9af51c4a7cf1a7", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -235,7 +235,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n     let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n-    walk(path, &mut skip, &mut |entry, contents| {\n+    walk(path, skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         let extensions ="}, {"sha": "f41fa4fcce1b519651573e968e24d523d138eab0", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -37,7 +37,7 @@ struct RevisionInfo<'a> {\n pub fn check(path: &Path, bad: &mut bool) {\n     crate::walk::walk(\n         path,\n-        &mut |path| path.extension().map(|p| p == \"rs\") == Some(false),\n+        |path| path.extension().map(|p| p == \"rs\") == Some(false),\n         &mut |entry, content| {\n             let file = entry.path().display();\n             let mut header_map = BTreeMap::new();"}, {"sha": "15c36923e885fee6299c22622b516e1ef88f7cce", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -54,7 +54,7 @@ fn check_entries(path: &Path, bad: &mut bool) {\n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n     for path in &[&path.join(\"ui\"), &path.join(\"ui-fulldeps\")] {\n-        crate::walk::walk_no_read(path, &mut |_| false, &mut |entry| {\n+        crate::walk::walk_no_read(path, |_| false, &mut |entry| {\n             let file_path = entry.path();\n             if let Some(ext) = file_path.extension() {\n                 if ext == \"stderr\" || ext == \"stdout\" {"}, {"sha": "3da200a8a931a97811785c4fffaa3757fb9e65e3", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -11,18 +11,19 @@ use crate::walk::{filter_dirs, walk};\n use std::path::Path;\n \n pub fn check(root_path: &Path, bad: &mut bool) {\n-    let core = &root_path.join(\"core\");\n-    let core_tests = &core.join(\"tests\");\n-    let core_benches = &core.join(\"benches\");\n-    let is_core = |path: &Path| {\n-        path.starts_with(core) && !(path.starts_with(core_tests) || path.starts_with(core_benches))\n+    let core = root_path.join(\"core\");\n+    let core_copy = core.clone();\n+    let core_tests = core.join(\"tests\");\n+    let core_benches = core.join(\"benches\");\n+    let is_core = move |path: &Path| {\n+        path.starts_with(&core)\n+            && !(path.starts_with(&core_tests) || path.starts_with(&core_benches))\n     };\n \n-    let mut skip = |path: &Path| {\n+    let skip = move |path: &Path| {\n         let file_name = path.file_name().unwrap_or_default();\n         if path.is_dir() {\n             filter_dirs(path)\n-                || path.ends_with(\"tests\")\n                 || path.ends_with(\"src/doc\")\n                 || (file_name == \"tests\" || file_name == \"benches\") && !is_core(path)\n         } else {\n@@ -35,9 +36,9 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         }\n     };\n \n-    walk(root_path, &mut skip, &mut |entry, contents| {\n+    walk(root_path, skip, &mut |entry, contents| {\n         let path = entry.path();\n-        let is_core = path.starts_with(core);\n+        let is_core = path.starts_with(&core_copy);\n         for (i, line) in contents.lines().enumerate() {\n             let line = line.trim();\n             let is_test = || line.contains(\"#[test]\") && !line.contains(\"`#[test]\");"}, {"sha": "94152e75168f9944b40efdfe27c4a786990aceb0", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -1,9 +1,8 @@\n-use std::fs::File;\n-use std::io::Read;\n-use walkdir::{DirEntry, WalkDir};\n+use ignore::DirEntry;\n \n-use std::path::Path;\n+use std::{fs::File, io::Read, path::Path};\n \n+/// The default directory filter.\n pub fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n         \"tidy-test-file\",\n@@ -36,34 +35,42 @@ pub fn filter_dirs(path: &Path) -> bool {\n \n pub fn walk_many(\n     paths: &[&Path],\n-    skip: &mut dyn FnMut(&Path) -> bool,\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     for path in paths {\n-        walk(path, skip, f);\n+        walk(path, skip.clone(), f);\n     }\n }\n \n-pub fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)) {\n-    let mut contents = String::new();\n+pub fn walk(\n+    path: &Path,\n+    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n+    f: &mut dyn FnMut(&DirEntry, &str),\n+) {\n+    let mut contents = Vec::new();\n     walk_no_read(path, skip, &mut |entry| {\n         contents.clear();\n-        if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n-            contents.clear();\n-        }\n-        f(&entry, &contents);\n+        let mut file = t!(File::open(entry.path()), entry.path());\n+        t!(file.read_to_end(&mut contents), entry.path());\n+        let contents_str = match std::str::from_utf8(&contents) {\n+            Ok(s) => s,\n+            Err(_) => return, // skip this file\n+        };\n+        f(&entry, &contents_str);\n     });\n }\n \n pub(crate) fn walk_no_read(\n     path: &Path,\n-    skip: &mut dyn FnMut(&Path) -> bool,\n+    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry),\n ) {\n-    let walker = WalkDir::new(path).into_iter().filter_entry(|e| !skip(e.path()));\n-    for entry in walker {\n+    let mut walker = ignore::WalkBuilder::new(path);\n+    let walker = walker.filter_entry(move |e| !skip(e.path()));\n+    for entry in walker.build() {\n         if let Ok(entry) = entry {\n-            if entry.file_type().is_dir() {\n+            if entry.file_type().map_or(true, |kind| kind.is_dir() || kind.is_symlink()) {\n                 continue;\n             }\n             f(&entry);"}, {"sha": "0666122e8abc62d91f817b08fdb02744b0d9d382", "filename": "tests/run-make/rustdoc-verify-output-files/Makefile", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/tests%2Frun-make%2Frustdoc-verify-output-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/tests%2Frun-make%2Frustdoc-verify-output-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frustdoc-verify-output-files%2FMakefile?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -22,15 +22,11 @@ all:\n \t# Check if expected json file is generated\n \t[ -e $(OUTPUT_DIR)/foobar.json ]\n \n-\t# TODO\n-\t# We should re-generate json doc once again and compare the diff with previously\n-\t# generated one. Because layout of json docs changes in each compilation, we can't\n-\t# do that currently.\n-\t#\n-\t# See https://github.com/rust-lang/rust/issues/103785#issuecomment-1307425590 for details.\n+\t# Copy first json output to check if it's exactly same after second compilation\n+\tcp -R $(OUTPUT_DIR)/foobar.json $(TMP_OUTPUT_DIR)/foobar.json\n \n-\t# remove generated json doc\n-\trm $(OUTPUT_DIR)/foobar.json\n+\t# Generate json doc on the same output\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --out-dir $(OUTPUT_DIR) -Z unstable-options --output-format json\n \n-\t# Check if json doc compilation broke any of the html files generated previously\n+\t# Check if all docs(including both json and html formats) are still the same after multiple compilations\n \t$(DIFF) -r -q $(OUTPUT_DIR) $(TMP_OUTPUT_DIR)"}, {"sha": "506cad25f630ceb6408a7c3a5f6c42052d4d2074", "filename": "tests/ui/traits/non_lifetime_binders/bad-copy-cond.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.rs?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -0,0 +1,9 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+fn foo() where for<T> T: Copy {}\n+\n+fn main() {\n+    foo();\n+    //~^ ERROR the trait bound `T: Copy` is not satisfied\n+}"}, {"sha": "07e02d47f27f6b1dcbd30c6379c45d8fa4777369", "filename": "tests/ui/traits/non_lifetime_binders/bad-copy-cond.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-copy-cond.stderr?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -0,0 +1,24 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-copy-cond.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/bad-copy-cond.rs:7:5\n+   |\n+LL |     foo();\n+   |     ^^^ the trait `Copy` is not implemented for `T`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/bad-copy-cond.rs:4:26\n+   |\n+LL | fn foo() where for<T> T: Copy {}\n+   |                          ^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "403a7087ee17d8a167fc493b663d6e364d8ee58e", "filename": "triagebot.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04e957578c77c95a0505f5818d0068b459f673e3/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04e957578c77c95a0505f5818d0068b459f673e3/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=04e957578c77c95a0505f5818d0068b459f673e3", "patch": "@@ -471,6 +471,11 @@ If this was intentional then you can ignore this comment.\n [mentions.\"src/tools/x\"]\n message = \"`src/tools/x` was changed. Bump version of Cargo.toml in `src/tools/x` so tidy will suggest installing the new version.\"\n \n+[mentions.\"src/bootstrap/defaults/config.compiler.toml\"]\n+message = \"This PR changes src/bootstrap/defaults/config.compiler.toml. If appropriate, please also update `config.codegen.toml` so the defaults are in sync.\"\n+[mentions.\"src/bootstrap/defaults/config.codegen.toml\"]\n+message = \"This PR changes src/bootstrap/defaults/config.codegen.toml. If appropriate, please also update `config.compiler.toml` so the defaults are in sync.\"\n+\n [assign]\n warn_non_default_branch = true\n contributing_url = \"https://rustc-dev-guide.rust-lang.org/contributing.html\""}]}