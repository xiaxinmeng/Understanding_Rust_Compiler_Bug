{"sha": "1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "node_id": "C_kwDOAAsO6NoAKDFiMzQxZmU4YTFjZTNjNDkyMmI1ZTM5YWVlNmM0Mzc1ZTA1YjY3NTA", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-27T01:44:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-27T02:21:45Z"}, "message": "Suggest `impl Iterator` when possible for `_` return type\n\nAddress #106096.", "tree": {"sha": "6d1c5394974f67e1f4bdb314b3a492917678c506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1c5394974f67e1f4bdb314b3a492917678c506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "html_url": "https://github.com/rust-lang/rust/commit/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa64e5b5e7605a1c1428b2a402021bef83f3e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa64e5b5e7605a1c1428b2a402021bef83f3e1e", "html_url": "https://github.com/rust-lang/rust/commit/caa64e5b5e7605a1c1428b2a402021bef83f3e1e"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "0a7a3038d00d6db4c65057312f73b22a51863836", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "patch": "@@ -24,14 +24,20 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericParamKind, Node};\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, AdtKind, Const, IsSuggestable, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, AdtKind, Const, IsSuggestable, ToPredicate, Ty, TyCtxt, TypeVisitable,\n+};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n+use rustc_trait_selection::traits::ObligationCtxt;\n use std::iter;\n \n mod generics_of;\n@@ -1224,7 +1230,17 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                 // to prevent the user from getting a papercut while trying to use the unique closure\n                 // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n                 diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n-                diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n+                diag.note(\n+                    \"for more information on `Fn` traits and closure types, see \\\n+                     https://doc.rust-lang.org/book/ch13-01-closures.html\",\n+                );\n+            } else if let Some(i_ty) = suggest_impl_iterator(tcx, ret_ty, ty.span, hir_id, def_id) {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"replace with an appropriate return type\",\n+                    format!(\"impl Iterator<Item = {}>\", i_ty),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n             diag.emit();\n \n@@ -1242,6 +1258,52 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n     }\n }\n \n+fn suggest_impl_iterator<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ret_ty: Ty<'tcx>,\n+    span: Span,\n+    hir_id: hir::HirId,\n+    def_id: LocalDefId,\n+) -> Option<Ty<'tcx>> {\n+    let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) else { return None; };\n+    let Some(iterator_item) = tcx.get_diagnostic_item(sym::IteratorItem) else { return None; };\n+    if !tcx\n+        .infer_ctxt()\n+        .build()\n+        .type_implements_trait(iter_trait, [ret_ty], tcx.param_env(iter_trait))\n+        .must_apply_modulo_regions()\n+    {\n+        return None;\n+    }\n+    let infcx = tcx.infer_ctxt().build();\n+    let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n+    // Find the type of `Iterator::Item`.\n+    let origin = TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span };\n+    let ty_var = infcx.next_ty_var(origin);\n+    let projection = ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::Projection(\n+        ty::ProjectionPredicate {\n+            projection_ty: tcx.mk_alias_ty(iterator_item, tcx.mk_substs([ret_ty.into()].iter())),\n+            term: ty_var.into(),\n+        },\n+    )));\n+    // Add `<ret_ty as Iterator>::Item = _` obligation.\n+    ocx.register_obligation(crate::traits::Obligation::misc(\n+        tcx,\n+        span,\n+        hir_id,\n+        tcx.param_env(def_id),\n+        projection,\n+    ));\n+    if ocx.select_where_possible().is_empty()\n+        && let item_ty = infcx.resolve_vars_if_possible(ty_var)\n+        && !item_ty.references_error()\n+        && !item_ty.has_placeholders()\n+    {\n+        return Some(item_ty);\n+    }\n+    None\n+}\n+\n fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n     let item = tcx.hir().expect_item(def_id.expect_local());"}, {"sha": "85510fa2c660c53c700764823d1150eb3721927e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "patch": "@@ -213,6 +213,7 @@ symbols! {\n         Is,\n         ItemContext,\n         Iterator,\n+        IteratorItem,\n         Layout,\n         Left,\n         LinkedList,"}, {"sha": "dcbed4e963ff9fcd8219ebdc8ef98b5de08ec1be", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "patch": "@@ -66,6 +66,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n+    #[rustc_diagnostic_item = \"IteratorItem\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n "}, {"sha": "b96c5271339598331be6f2479780a645b9f9a32c", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "patch": "@@ -220,3 +220,11 @@ fn value() -> Option<&'static _> {\n \n const _: Option<_> = map(value);\n //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+\n+fn evens_squared(n: usize) -> _ {\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    (1..n).filter(|x| x % 2 == 0).map(|x| x * x)\n+}\n+\n+const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants"}, {"sha": "034bdae5f2e61755df304645b3b993640c6748d1", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b341fe8a1ce3c4922b5e39aee6c4375e05b6750/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=1b341fe8a1ce3c4922b5e39aee6c4375e05b6750", "patch": "@@ -428,6 +428,27 @@ LL | const _: Option<_> = map(value);\n    |          not allowed in type signatures\n    |          help: replace with the correct type: `Option<u8>`\n \n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:224:31\n+   |\n+LL | fn evens_squared(n: usize) -> _ {\n+   |                               ^\n+   |                               |\n+   |                               not allowed in type signatures\n+   |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:229:10\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |          ^ not allowed in type signatures\n+   |\n+note: however, the inferred type `Map<Filter<std::ops::Range<i32>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>, [closure@$DIR/typeck_type_placeholder_item.rs:229:49: 229:52]>` cannot be named\n+  --> $DIR/typeck_type_placeholder_item.rs:229:14\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n    |\n@@ -636,7 +657,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 69 previous errors\n+error: aborting due to 71 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}