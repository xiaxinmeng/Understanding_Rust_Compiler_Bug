{"sha": "0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMjkwMDJkM2FmYTJlZGIyZGFkNGYyYjRmNjE1ZTczYzYwYzY4Y2M=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T20:16:36Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T20:22:34Z"}, "message": "Add gating for rustc_* attrs", "tree": {"sha": "102b93f70242a0e7f15e6d75f072b54ea6f23f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/102b93f70242a0e7f15e6d75f072b54ea6f23f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "html_url": "https://github.com/rust-lang/rust/commit/0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0129002d3afa2edb2dad4f2b4f615e73c60c68cc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fffdafe41a98df58521cccf81f952bde4f08092", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fffdafe41a98df58521cccf81f952bde4f08092", "html_url": "https://github.com/rust-lang/rust/commit/1fffdafe41a98df58521cccf81f952bde4f08092"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "f1808bc1fb503116a11df360dbb52c069a612bd4", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0129002d3afa2edb2dad4f2b4f615e73c60c68cc/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129002d3afa2edb2dad4f2b4f615e73c60c68cc/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "patch": "@@ -67,6 +67,7 @@\n #![feature(simd, unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n+#![feature(rustc_attrs)]\n \n #[macro_use]\n mod macros;"}, {"sha": "f6424167bde045f3c3e58ad180b646eff3743817", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0129002d3afa2edb2dad4f2b4f615e73c60c68cc/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0129002d3afa2edb2dad4f2b4f615e73c60c68cc/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "patch": "@@ -135,7 +135,10 @@ static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"unsafe_no_drop_flag\", \"1.0.0\", Active),\n \n     // Allows the use of custom attributes; RFC 572\n-    (\"custom_attribute\", \"1.0.0\", Active)\n+    (\"custom_attribute\", \"1.0.0\", Active),\n+\n+    // Allows the use of rustc_* attributes; RFC 572\n+    (\"rustc_attrs\", \"1.0.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -178,8 +181,6 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"repr\", Normal),\n     (\"path\", Normal),\n     (\"abi\", Normal),\n-    (\"rustc_move_fragments\", Normal),\n-    (\"rustc_variance\", Normal),\n     (\"unsafe_destructor\", Normal),\n     (\"automatically_derived\", Normal),\n     (\"no_mangle\", Normal),\n@@ -202,9 +203,6 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n                      \"no_std is experimental\")),\n     (\"lang\", Gated(\"lang_items\",\n                      \"language items are subject to change\")),\n-    (\"rustc_on_unimplemented\", Gated(\"on_unimplemented\",\n-                                     \"the `#[rustc_on_unimplemented]` attribute \\\n-                                      is an experimental feature\")),\n     (\"linkage\", Gated(\"linkage\",\n                       \"the `linkage` attribute is experimental \\\n                        and not portable across platforms\")),\n@@ -213,6 +211,19 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n                              currently handle destructors. There is no corresponding \\\n                              `#[task_local]` mapping to the task model\")),\n \n+    (\"rustc_on_unimplemented\", Gated(\"on_unimplemented\",\n+                                     \"the `#[rustc_on_unimplemented]` attribute \\\n+                                      is an experimental feature\")),\n+    (\"rustc_variance\", Gated(\"rustc_attrs\",\n+                             \"the `#[rustc_variance]` attribute \\\n+                              is an experimental feature\")),\n+    (\"rustc_error\", Gated(\"rustc_attrs\",\n+                          \"the `#[rustc_error]` attribute \\\n+                           is an experimental feature\")),\n+    (\"rustc_move_fragments\", Gated(\"rustc_attrs\",\n+                                   \"the `#[rustc_move_fragments]` attribute \\\n+                                    is an experimental feature\")),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\"doc\", Whitelisted),\n \n@@ -243,7 +254,6 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"must_use\", Whitelisted),\n     (\"stable\", Whitelisted),\n     (\"unstable\", Whitelisted),\n-    (\"rustc_error\", Whitelisted),\n \n     // FIXME: #19470 this shouldn't be needed forever\n     (\"old_orphan_check\", Whitelisted),\n@@ -584,12 +594,19 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 return;\n             }\n         }\n-        self.gate_feature(\"custom_attribute\", attr.span,\n-                   format!(\"The attribute `{}` is currently \\\n-                            unknown to the the compiler and \\\n-                            may have meaning \\\n-                            added to it in the future\",\n-                            name).as_slice());\n+        if name.starts_with(\"rustc_\") {\n+            self.gate_feature(\"rustc_attrs\", attr.span,\n+                              \"unless otherwise specified, attributes \\\n+                               with the prefix `rustc_` \\\n+                               are reserved for internal compiler diagnostics\");\n+        } else {\n+            self.gate_feature(\"custom_attribute\", attr.span,\n+                       format!(\"The attribute `{}` is currently \\\n+                                unknown to the the compiler and \\\n+                                may have meaning \\\n+                                added to it in the future\",\n+                                name).as_slice());\n+        }\n     }\n \n     fn visit_pat(&mut self, pattern: &ast::Pat) {"}]}