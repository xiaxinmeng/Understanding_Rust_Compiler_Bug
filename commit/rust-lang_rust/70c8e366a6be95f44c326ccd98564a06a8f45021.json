{"sha": "70c8e366a6be95f44c326ccd98564a06a8f45021", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzhlMzY2YTZiZTk1ZjQ0YzMyNmNjZDk4NTY0YTA2YThmNDUwMjE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-30T15:07:18Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-30T15:07:18Z"}, "message": "Format a paren expr with double slash comment", "tree": {"sha": "dd3a5413960e5fa22ee0ec75e7fc7787a6519377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3a5413960e5fa22ee0ec75e7fc7787a6519377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c8e366a6be95f44c326ccd98564a06a8f45021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c8e366a6be95f44c326ccd98564a06a8f45021", "html_url": "https://github.com/rust-lang/rust/commit/70c8e366a6be95f44c326ccd98564a06a8f45021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c8e366a6be95f44c326ccd98564a06a8f45021/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe24bd7e7d5718cf572efe7062affaa76f6508f", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe24bd7e7d5718cf572efe7062affaa76f6508f", "html_url": "https://github.com/rust-lang/rust/commit/efe24bd7e7d5718cf572efe7062affaa76f6508f"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "3fbb0af10fb5974d108e41be16a7b4c9fc2b415e", "filename": "src/expr.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/70c8e366a6be95f44c326ccd98564a06a8f45021/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8e366a6be95f44c326ccd98564a06a8f45021/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=70c8e366a6be95f44c326ccd98564a06a8f45021", "patch": "@@ -39,9 +39,9 @@ use spanned::Spanned;\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{\n-    colon_spaces, contains_skip, count_newlines, first_line_ends_with, first_line_width,\n-    inner_attributes, last_line_extendable, last_line_width, mk_sp, outer_attributes,\n-    ptr_vec_to_ref_vec, semicolon_for_stmt, wrap_str,\n+    colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n+    last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n+    semicolon_for_stmt, wrap_str,\n };\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -1438,13 +1438,15 @@ fn rewrite_paren(\n     debug!(\"rewrite_paren, shape: {:?}\", shape);\n \n     // Extract comments within parens.\n+    let mut pre_span;\n+    let mut post_span;\n     let mut pre_comment;\n     let mut post_comment;\n     let remove_nested_parens = context.config.remove_nested_parens();\n     loop {\n         // 1 = \"(\" or \")\"\n-        let pre_span = mk_sp(span.lo() + BytePos(1), subexpr.span.lo());\n-        let post_span = mk_sp(subexpr.span.hi(), span.hi() - BytePos(1));\n+        pre_span = mk_sp(span.lo() + BytePos(1), subexpr.span.lo());\n+        post_span = mk_sp(subexpr.span.hi(), span.hi() - BytePos(1));\n         pre_comment = rewrite_missing_comment(pre_span, shape, context)?;\n         post_comment = rewrite_missing_comment(post_span, shape, context)?;\n \n@@ -1460,20 +1462,48 @@ fn rewrite_paren(\n         break;\n     }\n \n-    // 1 `(`\n-    let sub_shape = shape.offset_left(1).and_then(|s| s.sub_width(1))?;\n-\n+    // 1 = `(` and `)`\n+    let sub_shape = shape.offset_left(1)?.sub_width(1)?;\n     let subexpr_str = subexpr.rewrite(context, sub_shape)?;\n-    debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n-\n-    // 2 = `()`\n-    if subexpr_str.contains('\\n') || first_line_width(&subexpr_str) + 2 <= shape.width {\n+    let fits_single_line = !pre_comment.contains(\"//\") && !post_comment.contains(\"//\");\n+    if fits_single_line {\n         Some(format!(\"({}{}{})\", pre_comment, &subexpr_str, post_comment))\n     } else {\n-        None\n+        rewrite_paren_in_multi_line(context, subexpr, shape, pre_span, post_span)\n     }\n }\n \n+fn rewrite_paren_in_multi_line(\n+    context: &RewriteContext,\n+    subexpr: &ast::Expr,\n+    shape: Shape,\n+    pre_span: Span,\n+    post_span: Span,\n+) -> Option<String> {\n+    let nested_indent = shape.indent.block_indent(context.config);\n+    let nested_shape = Shape::indented(nested_indent, context.config);\n+    let pre_comment = rewrite_missing_comment(pre_span, nested_shape, context)?;\n+    let post_comment = rewrite_missing_comment(post_span, nested_shape, context)?;\n+    let subexpr_str = subexpr.rewrite(context, nested_shape)?;\n+\n+    let mut result = String::with_capacity(subexpr_str.len() * 2);\n+    result.push('(');\n+    if !pre_comment.is_empty() {\n+        result.push_str(&nested_indent.to_string_with_newline(context.config));\n+        result.push_str(&pre_comment);\n+    }\n+    result.push_str(&nested_indent.to_string_with_newline(context.config));\n+    result.push_str(&subexpr_str);\n+    if !post_comment.is_empty() {\n+        result.push_str(&nested_indent.to_string_with_newline(context.config));\n+        result.push_str(&post_comment);\n+    }\n+    result.push_str(&shape.indent.to_string_with_newline(context.config));\n+    result.push(')');\n+\n+    Some(result)\n+}\n+\n fn rewrite_index(\n     expr: &ast::Expr,\n     index: &ast::Expr,"}]}