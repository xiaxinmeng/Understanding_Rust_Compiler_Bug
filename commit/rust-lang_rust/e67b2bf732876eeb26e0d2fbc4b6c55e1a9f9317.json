{"sha": "e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "node_id": "C_kwDOAAsO6NoAKGU2N2IyYmY3MzI4NzZlZWIyNmUwZDJmYmM0YjZjNTVlMWE5ZjkzMTc", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-23T17:42:59Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-09-23T17:42:59Z"}, "message": "Apply uninlined_format-args to clippy_lints\n\nThis change is needed for the uninlined_format-args lint to be merged.\nSee https://github.com/rust-lang/rust-clippy/pull/9233", "tree": {"sha": "31ace4c422c55a2e52e4c9daaa8df276a341dfd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ace4c422c55a2e52e4c9daaa8df276a341dfd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "html_url": "https://github.com/rust-lang/rust/commit/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff65eec80194143a52b3433ff3b98437e130b75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff65eec80194143a52b3433ff3b98437e130b75d", "html_url": "https://github.com/rust-lang/rust/commit/ff65eec80194143a52b3433ff3b98437e130b75d"}], "stats": {"total": 1399, "additions": 557, "deletions": 842}, "files": [{"sha": "724490fb49592f64c5b770de45124e741dcb08c0", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -92,7 +92,7 @@ impl ApproxConstant {\n                         cx,\n                         APPROX_CONSTANT,\n                         e.span,\n-                        &format!(\"approximate value of `{}::consts::{}` found\", module, &name),\n+                        &format!(\"approximate value of `{module}::consts::{}` found\", &name),\n                         None,\n                         \"consider using the constant directly\",\n                     );\n@@ -126,7 +126,7 @@ fn is_approx_const(constant: f64, value: &str, min_digits: usize) -> bool {\n         // The value is a truncated constant\n         true\n     } else {\n-        let round_const = format!(\"{:.*}\", value.len() - 2, constant);\n+        let round_const = format!(\"{constant:.*}\", value.len() - 2);\n         value == round_const\n     }\n }"}, {"sha": "ad31d708f64d5cf18411222d4ecc9fdf4a85e6f8", "filename": "clippy_lints/src/asm_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasm_syntax.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -44,7 +44,7 @@ fn check_expr_asm_syntax(lint: &'static Lint, cx: &EarlyContext<'_>, expr: &Expr\n                 cx,\n                 lint,\n                 expr.span,\n-                &format!(\"{} x86 assembly syntax used\", style),\n+                &format!(\"{style} x86 assembly syntax used\"),\n                 None,\n                 &format!(\"use {} x86 assembly syntax\", !style),\n             );"}, {"sha": "a36df55d0bdafe5891baf90b8ece12041b5edc21", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -60,9 +60,9 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnConstants {\n                 cx,\n                 ASSERTIONS_ON_CONSTANTS,\n                 macro_call.span,\n-                &format!(\"`assert!(false{})` should probably be replaced\", assert_arg),\n+                &format!(\"`assert!(false{assert_arg})` should probably be replaced\"),\n                 None,\n-                &format!(\"use `panic!({})` or `unreachable!({0})`\", panic_arg),\n+                &format!(\"use `panic!({panic_arg})` or `unreachable!({panic_arg})`\"),\n             );\n         }\n     }"}, {"sha": "f6d6c23bb6ed2a29803c4dad4313f906225cfd67", "filename": "clippy_lints/src/assertions_on_result_states.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -69,9 +69,8 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                         \"called `assert!` with `Result::is_ok`\",\n                         \"replace with\",\n                         format!(\n-                            \"{}.unwrap(){}\",\n-                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0,\n-                            semicolon\n+                            \"{}.unwrap(){semicolon}\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n                         ),\n                         app,\n                     );\n@@ -84,9 +83,8 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                         \"called `assert!` with `Result::is_err`\",\n                         \"replace with\",\n                         format!(\n-                            \"{}.unwrap_err(){}\",\n-                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0,\n-                            semicolon\n+                            \"{}.unwrap_err(){semicolon}\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n                         ),\n                         app,\n                     );"}, {"sha": "5f45c69d7f98d1aa11a474688aa655c8e1904d02", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -541,10 +541,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Symbol, attrs: &[Attribut\n                     cx,\n                     INLINE_ALWAYS,\n                     attr.span,\n-                    &format!(\n-                        \"you have declared `#[inline(always)]` on `{}`. This is usually a bad idea\",\n-                        name\n-                    ),\n+                    &format!(\"you have declared `#[inline(always)]` on `{name}`. This is usually a bad idea\"),\n                 );\n             }\n         }\n@@ -720,7 +717,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                 let mut unix_suggested = false;\n \n                 for (os, span) in mismatched {\n-                    let sugg = format!(\"target_os = \\\"{}\\\"\", os);\n+                    let sugg = format!(\"target_os = \\\"{os}\\\"\");\n                     diag.span_suggestion(span, \"try\", sugg, Applicability::MaybeIncorrect);\n \n                     if !unix_suggested && is_unix(os) {"}, {"sha": "4bd55c1429c3b452dfe6aada32088ed771abdfb9", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -98,9 +98,9 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n             cx,\n             BOOL_ASSERT_COMPARISON,\n             macro_call.span,\n-            &format!(\"used `{}!` with a literal bool\", macro_name),\n+            &format!(\"used `{macro_name}!` with a literal bool\"),\n             \"replace it with\",\n-            format!(\"{}!(..)\", non_eq_mac),\n+            format!(\"{non_eq_mac}!(..)\"),\n             Applicability::MaybeIncorrect,\n         );\n     }"}, {"sha": "2a15cbc7a3c3b0a981eb29511b505bd36f063000", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -263,9 +263,8 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n             }\n             .and_then(|op| {\n                 Some(format!(\n-                    \"{}{}{}\",\n+                    \"{}{op}{}\",\n                     snippet_opt(cx, lhs.span)?,\n-                    op,\n                     snippet_opt(cx, rhs.span)?\n                 ))\n             })\n@@ -285,7 +284,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n                     let path: &str = path.ident.name.as_str();\n                     a == path\n                 })\n-                .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snippet_opt(cx, receiver.span)?, neg_method)))\n+                .and_then(|(_, neg_method)| Some(format!(\"{}.{neg_method}()\", snippet_opt(cx, receiver.span)?)))\n         },\n         _ => None,\n     }"}, {"sha": "805121bcced3b562393279e500a4b3823b50b94e", "filename": "clippy_lints/src/cargo/common_metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -40,7 +40,7 @@ pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata, ignore_publish: b\n }\n \n fn missing_warning(cx: &LateContext<'_>, package: &cargo_metadata::Package, field: &str) {\n-    let message = format!(\"package `{}` is missing `{}` metadata\", package.name, field);\n+    let message = format!(\"package `{}` is missing `{field}` metadata\", package.name);\n     span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, &message);\n }\n "}, {"sha": "37c169dbd95e3807599248b01c6366a6854303b7", "filename": "clippy_lints/src/cargo/feature_name.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -57,10 +57,8 @@ fn lint(cx: &LateContext<'_>, feature: &str, substring: &str, is_prefix: bool) {\n         },\n         DUMMY_SP,\n         &format!(\n-            \"the \\\"{}\\\" {} in the feature name \\\"{}\\\" is {}\",\n-            substring,\n+            \"the \\\"{substring}\\\" {} in the feature name \\\"{feature}\\\" is {}\",\n             if is_prefix { \"prefix\" } else { \"suffix\" },\n-            feature,\n             if is_negative { \"negative\" } else { \"redundant\" }\n         ),\n         None,"}, {"sha": "3a872e54c9a2b2134dc6861e66823c716792c93d", "filename": "clippy_lints/src/cargo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -196,7 +196,7 @@ impl LateLintPass<'_> for Cargo {\n                 },\n                 Err(e) => {\n                     for lint in NO_DEPS_LINTS {\n-                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {}\", e));\n+                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {e}\"));\n                     }\n                 },\n             }\n@@ -212,7 +212,7 @@ impl LateLintPass<'_> for Cargo {\n                 },\n                 Err(e) => {\n                     for lint in WITH_DEPS_LINTS {\n-                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {}\", e));\n+                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {e}\"));\n                     }\n                 },\n             }"}, {"sha": "f9b17d45e9fbab74a837fad8048cfe2358fbb246", "filename": "clippy_lints/src/cargo/multiple_crate_versions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -37,7 +37,7 @@ pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata) {\n                         cx,\n                         MULTIPLE_CRATE_VERSIONS,\n                         DUMMY_SP,\n-                        &format!(\"multiple versions for dependency `{}`: {}\", name, versions),\n+                        &format!(\"multiple versions for dependency `{name}`: {versions}\"),\n                     );\n                 }\n             }"}, {"sha": "294d22d34de953994576fd8beca4b6c52f691934", "filename": "clippy_lints/src/casts/borrow_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n             expr.span,\n             \"borrow as raw pointer\",\n             \"try\",\n-            format!(\"{}::ptr::{}!({})\", core_or_std, macro_name, snip),\n+            format!(\"{core_or_std}::ptr::{macro_name}!({snip})\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "13c403234dad5e8b44a41dfe87b99a5f24d25b4b", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -41,15 +41,9 @@ pub(super) fn check(\n     );\n \n     let message = if cast_from.is_bool() {\n-        format!(\n-            \"casting `{0:}` to `{1:}` is more cleanly stated with `{1:}::from(_)`\",\n-            cast_from, cast_to\n-        )\n+        format!(\"casting `{cast_from:}` to `{cast_to:}` is more cleanly stated with `{cast_to:}::from(_)`\")\n     } else {\n-        format!(\n-            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n-            cast_from, cast_to\n-        )\n+        format!(\"casting `{cast_from}` to `{cast_to}` may become silently lossy if you later change the type\")\n     };\n \n     span_lint_and_sugg(\n@@ -58,7 +52,7 @@ pub(super) fn check(\n         expr.span,\n         &message,\n         \"try\",\n-        format!(\"{}::from({})\", cast_to, sugg),\n+        format!(\"{cast_to}::from({sugg})\"),\n         applicability,\n     );\n }"}, {"sha": "88deb4565eb216cb801b49e659418ffd42b74131", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -103,10 +103,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 return;\n             }\n \n-            format!(\n-                \"casting `{}` to `{}` may truncate the value{}\",\n-                cast_from, cast_to, suffix,\n-            )\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\",)\n         },\n \n         (ty::Adt(def, _), true) if def.is_enum() => {\n@@ -142,20 +139,17 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                     CAST_ENUM_TRUNCATION,\n                     expr.span,\n                     &format!(\n-                        \"casting `{}::{}` to `{}` will truncate the value{}\",\n-                        cast_from, variant.name, cast_to, suffix,\n+                        \"casting `{cast_from}::{}` to `{cast_to}` will truncate the value{suffix}\",\n+                        variant.name,\n                     ),\n                 );\n                 return;\n             }\n-            format!(\n-                \"casting `{}` to `{}` may truncate the value{}\",\n-                cast_from, cast_to, suffix,\n-            )\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\",)\n         },\n \n         (ty::Float(_), true) => {\n-            format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to)\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value\")\n         },\n \n         (ty::Float(FloatTy::F64), false) if matches!(cast_to.kind(), &ty::Float(FloatTy::F32)) => {"}, {"sha": "28ecdea7ea06c3d4e238adf9f54c2342e4d06f30", "filename": "clippy_lints/src/casts/cast_possible_wrap.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -35,10 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, ca\n             cx,\n             CAST_POSSIBLE_WRAP,\n             expr.span,\n-            &format!(\n-                \"casting `{}` to `{}` may wrap around the value{}\",\n-                cast_from, cast_to, suffix,\n-            ),\n+            &format!(\"casting `{cast_from}` to `{cast_to}` may wrap around the value{suffix}\",),\n         );\n     }\n }"}, {"sha": "97054a0d10154682178d0fd28023502ca00528e6", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -49,9 +49,7 @@ fn lint_cast_ptr_alignment<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, cast_f\n             CAST_PTR_ALIGNMENT,\n             expr.span,\n             &format!(\n-                \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n-                cast_from,\n-                cast_to,\n+                \"casting from `{cast_from}` to a more-strictly-aligned pointer (`{cast_to}`) ({} < {} bytes)\",\n                 from_layout.align.abi.bytes(),\n                 to_layout.align.abi.bytes(),\n             ),"}, {"sha": "a20a97d4e56daccaaf0d739537c240216d2fd545", "filename": "clippy_lints/src/casts/cast_sign_loss.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -14,10 +14,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_op: &Expr<'_>, c\n             cx,\n             CAST_SIGN_LOSS,\n             expr.span,\n-            &format!(\n-                \"casting `{}` to `{}` may lose the sign of the value\",\n-                cast_from, cast_to\n-            ),\n+            &format!(\"casting `{cast_from}` to `{cast_to}` may lose the sign of the value\"),\n         );\n     }\n }"}, {"sha": "d31d10d22b92b8997a77631d71d86ddc21dcdd38", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -35,8 +35,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: Optio\n                     CAST_SLICE_DIFFERENT_SIZES,\n                     expr.span,\n                     &format!(\n-                        \"casting between raw pointers to `[{}]` (element size {}) and `[{}]` (element size {}) does not adjust the count\",\n-                        start_ty.ty, from_size, end_ty.ty, to_size,\n+                        \"casting between raw pointers to `[{}]` (element size {from_size}) and `[{}]` (element size {to_size}) does not adjust the count\",\n+                        start_ty.ty, end_ty.ty,\n                     ),\n                     |diag| {\n                         let ptr_snippet = source::snippet(cx, left_cast.span, \"..\");"}, {"sha": "82e07c98a7e0179da0a9b721ae2f540b3eec7f03", "filename": "clippy_lints/src/casts/char_lit_as_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                         diag.span_suggestion(\n                             expr.span,\n                             \"use a byte literal instead\",\n-                            format!(\"b{}\", snippet),\n+                            format!(\"b{snippet}\"),\n                             applicability,\n                         );\n                     }"}, {"sha": "a26bfab4e7c1568d22b62eae3780169dd0bf79e5", "filename": "clippy_lints/src/casts/fn_to_numeric_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -25,9 +25,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                     cx,\n                     FN_TO_NUMERIC_CAST,\n                     expr.span,\n-                    &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n+                    &format!(\"casting function pointer `{from_snippet}` to `{cast_to}`\"),\n                     \"try\",\n-                    format!(\"{} as usize\", from_snippet),\n+                    format!(\"{from_snippet} as usize\"),\n                     applicability,\n                 );\n             }"}, {"sha": "75654129408e68ef0ccbd3b3b300f91185874313", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -23,9 +23,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 cx,\n                 FN_TO_NUMERIC_CAST_ANY,\n                 expr.span,\n-                &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n+                &format!(\"casting function pointer `{from_snippet}` to `{cast_to}`\"),\n                 \"did you mean to invoke the function?\",\n-                format!(\"{}() as {}\", from_snippet, cast_to),\n+                format!(\"{from_snippet}() as {cast_to}\"),\n                 applicability,\n             );\n         },"}, {"sha": "556be1d1506657a4f8d80bd6ce563f770c508155", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_with_truncation.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -24,12 +24,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                     cx,\n                     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n                     expr.span,\n-                    &format!(\n-                        \"casting function pointer `{}` to `{}`, which truncates the value\",\n-                        from_snippet, cast_to\n-                    ),\n+                    &format!(\"casting function pointer `{from_snippet}` to `{cast_to}`, which truncates the value\"),\n                     \"try\",\n-                    format!(\"{} as usize\", from_snippet),\n+                    format!(\"{from_snippet} as usize\"),\n                     applicability,\n                 );\n             }"}, {"sha": "c2b9253ec35dc8bccd9efc5ce3269b7965338ea5", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -33,15 +33,15 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: Option<RustcVer\n             let turbofish = match &cast_to_hir_ty.kind {\n                     TyKind::Infer => Cow::Borrowed(\"\"),\n                     TyKind::Ptr(mut_ty) if matches!(mut_ty.ty.kind, TyKind::Infer) => Cow::Borrowed(\"\"),\n-                    _ => Cow::Owned(format!(\"::<{}>\", to_pointee_ty)),\n+                    _ => Cow::Owned(format!(\"::<{to_pointee_ty}>\")),\n                 };\n             span_lint_and_sugg(\n                 cx,\n                 PTR_AS_PTR,\n                 expr.span,\n                 \"`as` casting between raw pointers without changing its mutability\",\n                 \"try `pointer::cast`, a safer alternative\",\n-                format!(\"{}.cast{}()\", cast_expr_sugg.maybe_par(), turbofish),\n+                format!(\"{}.cast{turbofish}()\", cast_expr_sugg.maybe_par()),\n                 applicability,\n             );\n         }"}, {"sha": "ea29f5d12c677da1b664b0a5fc9f18b4acb489a6", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -71,10 +71,7 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         UNNECESSARY_CAST,\n                         expr.span,\n-                        &format!(\n-                            \"casting to the same type is unnecessary (`{}` -> `{}`)\",\n-                            cast_from, cast_to\n-                        ),\n+                        &format!(\"casting to the same type is unnecessary (`{cast_from}` -> `{cast_to}`)\"),\n                         \"try\",\n                         literal_str,\n                         Applicability::MachineApplicable,\n@@ -101,9 +98,9 @@ fn lint_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &st\n         cx,\n         UNNECESSARY_CAST,\n         expr.span,\n-        &format!(\"casting {} literal to `{}` is unnecessary\", literal_kind_name, cast_to),\n+        &format!(\"casting {literal_kind_name} literal to `{cast_to}` is unnecessary\"),\n         \"try\",\n-        format!(\"{}_{}\", matchless.trim_end_matches('.'), cast_to),\n+        format!(\"{}_{cast_to}\", matchless.trim_end_matches('.')),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "1d113c7cbee6ccb3a78b591373df92e5adf8ee66", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n                     item.span,\n                     \"checked cast can be simplified\",\n                     \"try\",\n-                    format!(\"{}::try_from({}).is_ok()\", to_type, snippet),\n+                    format!(\"{to_type}::try_from({snippet}).is_ok()\"),\n                     applicability,\n                 );\n             }"}, {"sha": "fed04ae7f3d59ad9e175e0776ac27637062d8730", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -107,8 +107,7 @@ impl CognitiveComplexity {\n                 COGNITIVE_COMPLEXITY,\n                 fn_span,\n                 &format!(\n-                    \"the function has a cognitive complexity of ({}/{})\",\n-                    rust_cc,\n+                    \"the function has a cognitive complexity of ({rust_cc}/{})\",\n                     self.limit.limit()\n                 ),\n                 None,"}, {"sha": "cb6800c8ba2a23ceb49428cdcd155cb01f5d9ec3", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     cx,\n                     DEFAULT_TRAIT_ACCESS,\n                     expr.span,\n-                    &format!(\"calling `{}` is more clear than this expression\", replacement),\n+                    &format!(\"calling `{replacement}` is more clear than this expression\"),\n                     \"try\",\n                     replacement,\n                     Applicability::Unspecified, // First resolve the TODO above\n@@ -210,7 +210,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     .map(|(field, rhs)| {\n                         // extract and store the assigned value for help message\n                         let value_snippet = snippet_with_macro_callsite(cx, rhs.span, \"..\");\n-                        format!(\"{}: {}\", field, value_snippet)\n+                        format!(\"{field}: {value_snippet}\")\n                     })\n                     .collect::<Vec<String>>()\n                     .join(\", \");\n@@ -227,20 +227,20 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                             .map(ToString::to_string)\n                             .collect::<Vec<_>>()\n                             .join(\", \");\n-                        format!(\"{}::<{}>\", adt_def_ty_name, &tys_str)\n+                        format!(\"{adt_def_ty_name}::<{}>\", &tys_str)\n                     } else {\n                         binding_type.to_string()\n                     }\n                 };\n \n                 let sugg = if ext_with_default {\n                     if field_list.is_empty() {\n-                        format!(\"{}::default()\", binding_type)\n+                        format!(\"{binding_type}::default()\")\n                     } else {\n-                        format!(\"{} {{ {}, ..Default::default() }}\", binding_type, field_list)\n+                        format!(\"{binding_type} {{ {field_list}, ..Default::default() }}\")\n                     }\n                 } else {\n-                    format!(\"{} {{ {} }}\", binding_type, field_list)\n+                    format!(\"{binding_type} {{ {field_list} }}\")\n                 };\n \n                 // span lint once per statement that binds default\n@@ -250,10 +250,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     first_assign.unwrap().span,\n                     \"field assignment outside of initializer for an instance created with Default::default()\",\n                     Some(local.span),\n-                    &format!(\n-                        \"consider initializing the variable with `{}` and removing relevant reassignments\",\n-                        sugg\n-                    ),\n+                    &format!(\"consider initializing the variable with `{sugg}` and removing relevant reassignments\"),\n                 );\n                 self.reassigned_linted.insert(span);\n             }"}, {"sha": "3ed9cd36a2292a171e0ff63e7e2574ef5c8e7aea", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -95,8 +95,8 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n                         src\n                     } else {\n                         match lit.node {\n-                            LitKind::Int(src, _) => format!(\"{}\", src),\n-                            LitKind::Float(src, _) => format!(\"{}\", src),\n+                            LitKind::Int(src, _) => format!(\"{src}\"),\n+                            LitKind::Float(src, _) => format!(\"{src}\"),\n                             _ => return,\n                         }\n                     };"}, {"sha": "e272283152d8e308550e1d4d18a4ac3e7c9a2489", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -1308,7 +1308,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n             };\n \n             let expr_str = if !expr_is_macro_call && is_final_ufcs && expr.precedence().order() < PREC_PREFIX {\n-                format!(\"({})\", expr_str)\n+                format!(\"({expr_str})\")\n             } else {\n                 expr_str.into_owned()\n             };\n@@ -1322,7 +1322,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                     Mutability::Mut => \"explicit `deref_mut` method call\",\n                 },\n                 \"try this\",\n-                format!(\"{}{}{}\", addr_of_str, deref_str, expr_str),\n+                format!(\"{addr_of_str}{deref_str}{expr_str}\"),\n                 app,\n             );\n         },\n@@ -1336,7 +1336,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                     && !has_enclosing_paren(&snip)\n                     && (expr.precedence().order() < data.position.precedence() || calls_field)\n                 {\n-                    format!(\"({})\", snip)\n+                    format!(\"({snip})\")\n                 } else {\n                     snip.into()\n                 };\n@@ -1379,9 +1379,9 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                     let (snip, snip_is_macro) = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app);\n                     let sugg =\n                         if !snip_is_macro && expr.precedence().order() < precedence && !has_enclosing_paren(&snip) {\n-                            format!(\"{}({})\", prefix, snip)\n+                            format!(\"{prefix}({snip})\")\n                         } else {\n-                            format!(\"{}{}\", prefix, snip)\n+                            format!(\"{prefix}{snip}\")\n                         };\n                     diag.span_suggestion(data.span, \"try this\", sugg, app);\n                 },\n@@ -1460,14 +1460,14 @@ impl Dereferencing {\n                             } else {\n                                 pat.always_deref = false;\n                                 let snip = snippet_with_context(cx, e.span, parent.span.ctxt(), \"..\", &mut pat.app).0;\n-                                pat.replacements.push((e.span, format!(\"&{}\", snip)));\n+                                pat.replacements.push((e.span, format!(\"&{snip}\")));\n                             }\n                         },\n                         _ if !e.span.from_expansion() => {\n                             // Double reference might be needed at this point.\n                             pat.always_deref = false;\n                             let snip = snippet_with_applicability(cx, e.span, \"..\", &mut pat.app);\n-                            pat.replacements.push((e.span, format!(\"&{}\", snip)));\n+                            pat.replacements.push((e.span, format!(\"&{snip}\")));\n                         },\n                         // Edge case for macros. The span of the identifier will usually match the context of the\n                         // binding, but not if the identifier was created in a macro. e.g. `concat_idents` and proc"}, {"sha": "b02f87c07db73b0805a1e03dcd2433bd2f2a7dff", "filename": "clippy_lints/src/disallowed_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_methods.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n                 reason: Some(reason), ..\n             } = conf\n             {\n-                diag.note(&format!(\"{} (from clippy.toml)\", reason));\n+                diag.note(&format!(\"{reason} (from clippy.toml)\"));\n             }\n         });\n     }"}, {"sha": "084190f00132ce04e9b0ffb600165cc320b8ff16", "filename": "clippy_lints/src/disallowed_script_idents.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -99,8 +99,7 @@ impl EarlyLintPass for DisallowedScriptIdents {\n                         DISALLOWED_SCRIPT_IDENTS,\n                         span,\n                         &format!(\n-                            \"identifier `{}` has a Unicode script that is not allowed by configuration: {}\",\n-                            symbol_str,\n+                            \"identifier `{symbol_str}` has a Unicode script that is not allowed by configuration: {}\",\n                             script.full_name()\n                         ),\n                     );"}, {"sha": "53451238d9acb54820e3abcefc7b6ef745f485ee", "filename": "clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n                 conf::DisallowedType::Simple(path) => (path, None),\n                 conf::DisallowedType::WithReason { path, reason } => (\n                     path,\n-                    reason.as_ref().map(|reason| format!(\"{} (from clippy.toml)\", reason)),\n+                    reason.as_ref().map(|reason| format!(\"{reason} (from clippy.toml)\")),\n                 ),\n             };\n             let segs: Vec<_> = path.split(\"::\").collect();\n@@ -130,7 +130,7 @@ fn emit(cx: &LateContext<'_>, name: &str, span: Span, reason: Option<&str>) {\n         cx,\n         DISALLOWED_TYPES,\n         span,\n-        &format!(\"`{}` is not allowed according to config\", name),\n+        &format!(\"`{name}` is not allowed according to config\"),\n         |diag| {\n             if let Some(reason) = reason {\n                 diag.note(reason);"}, {"sha": "fa50a2d1a2c6e7218664c2895c442abf7800f449", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -790,7 +790,7 @@ fn check_word(cx: &LateContext<'_>, word: &str, span: Span) {\n                 diag.span_suggestion_with_style(\n                     span,\n                     \"try\",\n-                    format!(\"`{}`\", snippet),\n+                    format!(\"`{snippet}`\"),\n                     applicability,\n                     // always show the suggestion in a separate line, since the\n                     // inline presentation adds another pair of backticks"}, {"sha": "0ee07fbcc754ac0d24a26dd4a17155e8859e99e5", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -236,7 +236,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n                 expr.span,\n                 msg,\n                 Some(arg.span),\n-                &format!(\"argument has type `{}`\", arg_ty),\n+                &format!(\"argument has type `{arg_ty}`\"),\n             );\n         }\n     }"}, {"sha": "9c834cf014485e824ee47e27593a91a19381ea49", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -113,13 +113,8 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n                     ),\n                 };\n                 format!(\n-                    \"if let {}::{} = {}.entry({}) {} else {}\",\n+                    \"if let {}::{entry_kind} = {map_str}.entry({key_str}) {then_str} else {else_str}\",\n                     map_ty.entry_path(),\n-                    entry_kind,\n-                    map_str,\n-                    key_str,\n-                    then_str,\n-                    else_str,\n                 )\n             } else {\n                 // if .. { insert } else { insert }\n@@ -137,16 +132,11 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n                 let indent_str = snippet_indent(cx, expr.span);\n                 let indent_str = indent_str.as_deref().unwrap_or(\"\");\n                 format!(\n-                    \"match {}.entry({}) {{\\n{indent}    {entry}::{} => {}\\n\\\n-                        {indent}    {entry}::{} => {}\\n{indent}}}\",\n-                    map_str,\n-                    key_str,\n-                    then_entry,\n+                    \"match {map_str}.entry({key_str}) {{\\n{indent_str}    {entry}::{then_entry} => {}\\n\\\n+                        {indent_str}    {entry}::{else_entry} => {}\\n{indent_str}}}\",\n                     reindent_multiline(then_str.into(), true, Some(4 + indent_str.len())),\n-                    else_entry,\n                     reindent_multiline(else_str.into(), true, Some(4 + indent_str.len())),\n                     entry = map_ty.entry_path(),\n-                    indent = indent_str,\n                 )\n             }\n         } else {\n@@ -163,20 +153,16 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n                     then_search.snippet_occupied(cx, then_expr.span, &mut app)\n                 };\n                 format!(\n-                    \"if let {}::{} = {}.entry({}) {}\",\n+                    \"if let {}::{entry_kind} = {map_str}.entry({key_str}) {body_str}\",\n                     map_ty.entry_path(),\n-                    entry_kind,\n-                    map_str,\n-                    key_str,\n-                    body_str,\n                 )\n             } else if let Some(insertion) = then_search.as_single_insertion() {\n                 let value_str = snippet_with_context(cx, insertion.value.span, then_expr.span.ctxt(), \"..\", &mut app).0;\n                 if contains_expr.negated {\n                     if insertion.value.can_have_side_effects() {\n-                        format!(\"{}.entry({}).or_insert_with(|| {});\", map_str, key_str, value_str)\n+                        format!(\"{map_str}.entry({key_str}).or_insert_with(|| {value_str});\")\n                     } else {\n-                        format!(\"{}.entry({}).or_insert({});\", map_str, key_str, value_str)\n+                        format!(\"{map_str}.entry({key_str}).or_insert({value_str});\")\n                     }\n                 } else {\n                     // TODO: suggest using `if let Some(v) = map.get_mut(k) { .. }` here.\n@@ -186,7 +172,7 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n             } else {\n                 let block_str = then_search.snippet_closure(cx, then_expr.span, &mut app);\n                 if contains_expr.negated {\n-                    format!(\"{}.entry({}).or_insert_with(|| {});\", map_str, key_str, block_str)\n+                    format!(\"{map_str}.entry({key_str}).or_insert_with(|| {block_str});\")\n                 } else {\n                     // TODO: suggest using `if let Some(v) = map.get_mut(k) { .. }` here.\n                     // This would need to be a different lint."}, {"sha": "d8c6b4e39aef9d0bcdb23039848d7ab4bae48c85", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -202,12 +202,11 @@ fn check_variant(cx: &LateContext<'_>, threshold: u64, def: &EnumDef<'_>, item_n\n         cx,\n         ENUM_VARIANT_NAMES,\n         span,\n-        &format!(\"all variants have the same {}fix: `{}`\", what, value),\n+        &format!(\"all variants have the same {what}fix: `{value}`\"),\n         None,\n         &format!(\n-            \"remove the {}fixes and use full paths to \\\n-             the variants instead of glob imports\",\n-            what\n+            \"remove the {what}fixes and use full paths to \\\n+             the variants instead of glob imports\"\n         ),\n     );\n }"}, {"sha": "7917d83c0b9e8a332d2438e6371d53019ff9c653", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -91,9 +91,8 @@ impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n                     \"this pattern matching can be expressed using equality\",\n                     \"try\",\n                     format!(\n-                        \"{} == {}\",\n+                        \"{} == {pat_str}\",\n                         snippet_with_context(cx, let_expr.init.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n-                        pat_str,\n                     ),\n                     applicability,\n                 );"}, {"sha": "0f9f94a6b546011a74ae6dc7794fbb1e60fbd099", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n \n                             then {\n                                 // Mutable closure is used after current expr; we cannot consume it.\n-                                snippet = format!(\"&mut {}\", snippet);\n+                                snippet = format!(\"&mut {snippet}\");\n                             }\n                         }\n                         diag.span_suggestion(\n@@ -158,7 +158,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n                     diag.span_suggestion(\n                         expr.span,\n                         \"replace the closure with the method itself\",\n-                        format!(\"{}::{}\", name, path.ident.name),\n+                        format!(\"{name}::{}\", path.ident.name),\n                         Applicability::MachineApplicable,\n                     );\n                 })"}, {"sha": "218e40f2b5ffbc644ef2053c151572de6c953e1b", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -97,7 +97,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n                     item.span,\n                     msg,\n                     |diag| {\n-                        let sugg = format!(\"#[non_exhaustive]\\n{}\", indent);\n+                        let sugg = format!(\"#[non_exhaustive]\\n{indent}\");\n                         diag.span_suggestion(suggestion_span,\n                                              \"try adding #[non_exhaustive]\",\n                                              sugg,"}, {"sha": "c0ea6f338a230b51d9864dc2dcc8e89a56558ed3", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -80,12 +80,12 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n                 // used.\n                 let (used, sugg_mac) = if let Some(macro_name) = calling_macro {\n                     (\n-                        format!(\"{}!({}(), ...)\", macro_name, dest_name),\n+                        format!(\"{macro_name}!({dest_name}(), ...)\"),\n                         macro_name.replace(\"write\", \"print\"),\n                     )\n                 } else {\n                     (\n-                        format!(\"{}().write_fmt(...)\", dest_name),\n+                        format!(\"{dest_name}().write_fmt(...)\"),\n                         \"print\".into(),\n                     )\n                 };\n@@ -100,9 +100,9 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n                     cx,\n                     EXPLICIT_WRITE,\n                     expr.span,\n-                    &format!(\"use of `{}.unwrap()`\", used),\n+                    &format!(\"use of `{used}.unwrap()`\"),\n                     \"try this\",\n-                    format!(\"{}{}!({})\", prefix, sugg_mac, inputs_snippet),\n+                    format!(\"{prefix}{sugg_mac}!({inputs_snippet})\"),\n                     applicability,\n                 )\n             }"}, {"sha": "6fee7fb308ce7f9905a8d505dbffa5f7f4f758ad", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -173,9 +173,9 @@ impl FloatFormat {\n         T: fmt::UpperExp + fmt::LowerExp + fmt::Display,\n     {\n         match self {\n-            Self::LowerExp => format!(\"{:e}\", f),\n-            Self::UpperExp => format!(\"{:E}\", f),\n-            Self::Normal => format!(\"{}\", f),\n+            Self::LowerExp => format!(\"{f:e}\"),\n+            Self::UpperExp => format!(\"{f:E}\"),\n+            Self::Normal => format!(\"{f}\"),\n         }\n     }\n }"}, {"sha": "e71afec12a77c5abb3523383d1c5d92786fcfa1d", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -142,8 +142,7 @@ fn prepare_receiver_sugg<'a>(cx: &LateContext<'_>, mut expr: &'a Expr<'a>) -> Su\n         if let ast::LitKind::Float(sym, ast::LitFloatType::Unsuffixed) = lit.node;\n         then {\n             let op = format!(\n-                \"{}{}{}\",\n-                suggestion,\n+                \"{suggestion}{}{}\",\n                 // Check for float literals without numbers following the decimal\n                 // separator such as `2.` and adds a trailing zero\n                 if sym.as_str().ends_with('.') {\n@@ -172,7 +171,7 @@ fn check_log_base(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, ar\n             expr.span,\n             \"logarithm for bases 2, 10 and e can be computed more accurately\",\n             \"consider using\",\n-            format!(\"{}.{}()\", Sugg::hir(cx, receiver, \"..\").maybe_par(), method),\n+            format!(\"{}.{method}()\", Sugg::hir(cx, receiver, \"..\").maybe_par()),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -251,7 +250,7 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args:\n                 expr.span,\n                 \"exponent for bases 2 and e can be computed more accurately\",\n                 \"consider using\",\n-                format!(\"{}.{}()\", prepare_receiver_sugg(cx, &args[0]), method),\n+                format!(\"{}.{method}()\", prepare_receiver_sugg(cx, &args[0])),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "bc0c68f535a96f23e1cfd0d9b75ef55665b7d875", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                 [_] => {\n                     // Simulate macro expansion, converting {{ and }} to { and }.\n                     let s_expand = format_args.format_string.snippet.replace(\"{{\", \"{\").replace(\"}}\", \"}\");\n-                    let sugg = format!(\"{}.to_string()\", s_expand);\n+                    let sugg = format!(\"{s_expand}.to_string()\");\n                     span_useless_format(cx, call_site, sugg, applicability);\n                 },\n                 [..] => {},"}, {"sha": "192f6258aa59c66dd65e74ac382b234a488c019b", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -112,11 +112,10 @@ fn check_format_in_format_args(cx: &LateContext<'_>, call_site: Span, name: Symb\n         cx,\n         FORMAT_IN_FORMAT_ARGS,\n         call_site,\n-        &format!(\"`format!` in `{}!` args\", name),\n+        &format!(\"`format!` in `{name}!` args\"),\n         |diag| {\n             diag.help(&format!(\n-                \"combine the `format!(..)` arguments with the outer `{}!(..)` call\",\n-                name\n+                \"combine the `format!(..)` arguments with the outer `{name}!(..)` call\"\n             ));\n             diag.help(\"or consider changing `format!` to `format_args!`\");\n         },\n@@ -144,8 +143,7 @@ fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Ex\n                     TO_STRING_IN_FORMAT_ARGS,\n                     value.span.with_lo(receiver.span.hi()),\n                     &format!(\n-                        \"`to_string` applied to a type that implements `Display` in `{}!` args\",\n-                        name\n+                        \"`to_string` applied to a type that implements `Display` in `{name}!` args\"\n                     ),\n                     \"remove this\",\n                     String::new(),\n@@ -157,16 +155,13 @@ fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Ex\n                     TO_STRING_IN_FORMAT_ARGS,\n                     value.span,\n                     &format!(\n-                        \"`to_string` applied to a type that implements `Display` in `{}!` args\",\n-                        name\n+                        \"`to_string` applied to a type that implements `Display` in `{name}!` args\"\n                     ),\n                     \"use this\",\n                     format!(\n-                        \"{}{:*>width$}{}\",\n+                        \"{}{:*>n_needed_derefs$}{receiver_snippet}\",\n                         if needs_ref { \"&\" } else { \"\" },\n-                        \"\",\n-                        receiver_snippet,\n-                        width = n_needed_derefs\n+                        \"\"\n                     ),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "ed1342a54654301fe24541e0f9dc25b5d7b4a989", "filename": "clippy_lints/src/format_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformat_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformat_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_impl.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -214,12 +214,12 @@ fn check_print_in_format_impl(cx: &LateContext<'_>, expr: &Expr<'_>, impl_trait:\n                 cx,\n                 PRINT_IN_FORMAT_IMPL,\n                 macro_call.span,\n-                &format!(\"use of `{}!` in `{}` impl\", name, impl_trait.name),\n+                &format!(\"use of `{name}!` in `{}` impl\", impl_trait.name),\n                 \"replace with\",\n                 if let Some(formatter_name) = impl_trait.formatter_name {\n-                    format!(\"{}!({}, ..)\", replacement, formatter_name)\n+                    format!(\"{replacement}!({formatter_name}, ..)\")\n                 } else {\n-                    format!(\"{}!(..)\", replacement)\n+                    format!(\"{replacement}!(..)\")\n                 },\n                 Applicability::HasPlaceholders,\n             );"}, {"sha": "a866a68987d02c04d8f5c44f8d7ee83210d59295", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -154,11 +154,10 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n                             eqop_span,\n                             &format!(\n                                 \"this looks like you are trying to use `.. {op}= ..`, but you \\\n-                                 really are doing `.. = ({op} ..)`\",\n-                                op = op\n+                                 really are doing `.. = ({op} ..)`\"\n                             ),\n                             None,\n-                            &format!(\"to remove this lint, use either `{op}=` or `= {op}`\", op = op),\n+                            &format!(\"to remove this lint, use either `{op}=` or `= {op}`\"),\n                         );\n                     }\n                 }\n@@ -191,16 +190,12 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n                 SUSPICIOUS_UNARY_OP_FORMATTING,\n                 eqop_span,\n                 &format!(\n-                    \"by not having a space between `{binop}` and `{unop}` it looks like \\\n-                     `{binop}{unop}` is a single operator\",\n-                    binop = binop_str,\n-                    unop = unop_str\n+                    \"by not having a space between `{binop_str}` and `{unop_str}` it looks like \\\n+                     `{binop_str}{unop_str}` is a single operator\"\n                 ),\n                 None,\n                 &format!(\n-                    \"put a space between `{binop}` and `{unop}` and remove the space after `{unop}`\",\n-                    binop = binop_str,\n-                    unop = unop_str\n+                    \"put a space between `{binop_str}` and `{unop_str}` and remove the space after `{unop_str}`\"\n                 ),\n             );\n         }\n@@ -246,12 +241,11 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n                 cx,\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n-                &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n+                &format!(\"this is an `else {else_desc}` but the formatting might hide it\"),\n                 None,\n                 &format!(\n                     \"to remove this lint, remove the `else` or remove the new line between \\\n-                     `else` and `{}`\",\n-                    else_desc,\n+                     `else` and `{else_desc}`\",\n                 ),\n             );\n         }\n@@ -320,11 +314,10 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n                 cx,\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n-                &format!(\"this looks like {} but the `else` is missing\", looks_like),\n+                &format!(\"this looks like {looks_like} but the `else` is missing\"),\n                 None,\n                 &format!(\n-                    \"to remove this lint, add the missing `else` or add a new line before {}\",\n-                    next_thing,\n+                    \"to remove this lint, add the missing `else` or add a new line before {next_thing}\",\n                 ),\n             );\n         }"}, {"sha": "2a82473be8c5e6e9d3527adbd614caac5f02d43e", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n                     exp.span,\n                     \"this call to `from_str_radix` can be replaced with a call to `str::parse`\",\n                     \"try\",\n-                    format!(\"{}.parse::<{}>()\", sugg, prim_ty.name_str()),\n+                    format!(\"{sugg}.parse::<{}>()\", prim_ty.name_str()),\n                     Applicability::MaybeIncorrect\n                 );\n             }"}, {"sha": "09b97bacd6520ead0e8cf0f04ad38f5af0264d7e", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -143,7 +143,7 @@ fn check_must_use_candidate<'tcx>(\n             diag.span_suggestion(\n                 fn_span,\n                 \"add the attribute\",\n-                format!(\"#[must_use] {}\", snippet),\n+                format!(\"#[must_use] {snippet}\"),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "1e08922a616645395f649004a7cf121daf0ff793", "filename": "clippy_lints/src/functions/too_many_arguments.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -59,10 +59,7 @@ fn check_arg_number(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, fn_span: Span,\n             cx,\n             TOO_MANY_ARGUMENTS,\n             fn_span,\n-            &format!(\n-                \"this function has too many arguments ({}/{})\",\n-                args, too_many_arguments_threshold\n-            ),\n+            &format!(\"this function has too many arguments ({args}/{too_many_arguments_threshold})\"),\n         );\n     }\n }"}, {"sha": "f83f8b40f94b75eff950f62fa8e3f25936a97c42", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -78,10 +78,7 @@ pub(super) fn check_fn(\n             cx,\n             TOO_MANY_LINES,\n             span,\n-            &format!(\n-                \"this function has too many lines ({}/{})\",\n-                line_count, too_many_lines_threshold\n-            ),\n+            &format!(\"this function has too many lines ({line_count}/{too_many_lines_threshold})\"),\n         );\n     }\n }"}, {"sha": "0800e0644f7f31cee5a76a1d79d04467bba33cf1", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -84,15 +84,15 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n         {\n             let cond_snip = snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n             let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n-                format!(\"({})\", cond_snip)\n+                format!(\"({cond_snip})\")\n             } else {\n                 cond_snip.into_owned()\n             };\n             let arg_snip = snippet_with_macro_callsite(cx, then_arg.span, \"\");\n             let mut method_body = if then_block.stmts.is_empty() {\n                 arg_snip.into_owned()\n             } else {\n-                format!(\"{{ /* snippet */ {} }}\", arg_snip)\n+                format!(\"{{ /* snippet */ {arg_snip} }}\")\n             };\n             let method_name = if switch_to_eager_eval(cx, expr) && meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n                 \"then_some\"\n@@ -102,14 +102,13 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n             };\n \n             let help = format!(\n-                \"consider using `bool::{}` like: `{}.{}({})`\",\n-                method_name, cond_snip, method_name, method_body,\n+                \"consider using `bool::{method_name}` like: `{cond_snip}.{method_name}({method_body})`\",\n             );\n             span_lint_and_help(\n                 cx,\n                 IF_THEN_SOME_ELSE_NONE,\n                 expr.span,\n-                &format!(\"this could be simplified with `bool::{}`\", method_name),\n+                &format!(\"this could be simplified with `bool::{method_name}`\"),\n                 None,\n                 &help,\n             );"}, {"sha": "067af79152fd210b151a3059538869f2c0518c30", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -89,8 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                     (\n                         generics_suggestion_span,\n                         format!(\n-                            \"<{}{}S: ::std::hash::BuildHasher{}>\",\n-                            generics_snip,\n+                            \"<{generics_snip}{}S: ::std::hash::BuildHasher{}>\",\n                             if generics_snip.is_empty() { \"\" } else { \", \" },\n                             if vis.suggestions.is_empty() {\n                                 \"\"\n@@ -263,8 +262,8 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n \n     fn type_arguments(&self) -> String {\n         match *self {\n-            ImplicitHasherType::HashMap(.., ref k, ref v) => format!(\"{}, {}\", k, v),\n-            ImplicitHasherType::HashSet(.., ref t) => format!(\"{}\", t),\n+            ImplicitHasherType::HashMap(.., ref k, ref v) => format!(\"{k}, {v}\"),\n+            ImplicitHasherType::HashSet(.., ref t) => format!(\"{t}\"),\n         }\n     }\n "}, {"sha": "cfc988da2335d3afb46303e376be2e79086e469a", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -53,7 +53,7 @@ fn lint_return(cx: &LateContext<'_>, emission_place: HirId, span: Span) {\n         span,\n         \"missing `return` statement\",\n         |diag| {\n-            diag.span_suggestion(span, \"add `return` as shown\", format!(\"return {}\", snip), app);\n+            diag.span_suggestion(span, \"add `return` as shown\", format!(\"return {snip}\"), app);\n         },\n     );\n }\n@@ -71,7 +71,7 @@ fn lint_break(cx: &LateContext<'_>, emission_place: HirId, break_span: Span, exp\n             diag.span_suggestion(\n                 break_span,\n                 \"change `break` to `return` as shown\",\n-                format!(\"return {}\", snip),\n+                format!(\"return {snip}\"),\n                 app,\n             );\n         },"}, {"sha": "f0dbe17d83a5c0a75689336febc47b4e77385ef3", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -170,7 +170,7 @@ fn print_lint_and_sugg(cx: &LateContext<'_>, var_name: &str, expr: &Expr<'_>) {\n         expr.span,\n         \"implicitly performing saturating subtraction\",\n         \"try\",\n-        format!(\"{} = {}.saturating_sub({});\", var_name, var_name, '1'),\n+        format!(\"{var_name} = {var_name}.saturating_sub({});\", '1'),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "e2f2d3d42e6953bef10b31fbd370d661444ece5a", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                 let mut fields_snippet = String::new();\n                 let (last_ident, idents) = ordered_fields.split_last().unwrap();\n                 for ident in idents {\n-                    let _ = write!(fields_snippet, \"{}, \", ident);\n+                    let _ = write!(fields_snippet, \"{ident}, \");\n                 }\n                 fields_snippet.push_str(&last_ident.to_string());\n \n@@ -100,10 +100,8 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                         String::new()\n                     };\n \n-                let sugg = format!(\"{} {{ {}{} }}\",\n+                let sugg = format!(\"{} {{ {fields_snippet}{base_snippet} }}\",\n                     snippet(cx, qpath.span(), \"..\"),\n-                    fields_snippet,\n-                    base_snippet,\n                     );\n \n                 span_lint_and_sugg("}, {"sha": "c7b5badaae51b0c21a392cc9762a65be80c63016", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -139,14 +139,14 @@ fn lint_slice(cx: &LateContext<'_>, slice: &SliceLintInformation) {\n         .map(|(index, _)| *index)\n         .collect::<FxHashSet<_>>();\n \n-    let value_name = |index| format!(\"{}_{}\", slice.ident.name, index);\n+    let value_name = |index| format!(\"{}_{index}\", slice.ident.name);\n \n     if let Some(max_index) = used_indices.iter().max() {\n         let opt_ref = if slice.needs_ref { \"ref \" } else { \"\" };\n         let pat_sugg_idents = (0..=*max_index)\n             .map(|index| {\n                 if used_indices.contains(&index) {\n-                    format!(\"{}{}\", opt_ref, value_name(index))\n+                    format!(\"{opt_ref}{}\", value_name(index))\n                 } else {\n                     \"_\".to_string()\n                 }"}, {"sha": "f171ae2649d4fc1b8c4cf5af2ccd3b3bca930048", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -131,23 +131,19 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n             INHERENT_TO_STRING_SHADOW_DISPLAY,\n             item.span,\n             &format!(\n-                \"type `{}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\",\n-                self_type\n+                \"type `{self_type}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\"\n             ),\n             None,\n-            &format!(\"remove the inherent method from type `{}`\", self_type),\n+            &format!(\"remove the inherent method from type `{self_type}`\"),\n         );\n     } else {\n         span_lint_and_help(\n             cx,\n             INHERENT_TO_STRING,\n             item.span,\n-            &format!(\n-                \"implementation of inherent method `to_string(&self) -> String` for type `{}`\",\n-                self_type\n-            ),\n+            &format!(\"implementation of inherent method `to_string(&self) -> String` for type `{self_type}`\"),\n             None,\n-            &format!(\"implement trait `Display` for type `{}` instead\", self_type),\n+            &format!(\"implement trait `Display` for type `{self_type}` instead\"),\n         );\n     }\n }"}, {"sha": "d609a5ca4d4653fcadcdd476ec1a181cbd349235", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -51,7 +51,7 @@ fn check_attrs(cx: &LateContext<'_>, name: Symbol, attrs: &[Attribute]) {\n             cx,\n             INLINE_FN_WITHOUT_BODY,\n             attr.span,\n-            &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n+            &format!(\"use of `#[inline]` on trait method `{name}` which has no body\"),\n             |diag| {\n                 diag.suggest_remove_item(cx, attr.span, \"remove\", Applicability::MachineApplicable);\n             },"}, {"sha": "33491da3fc5aff094bc504c462bbd8281a5596a0", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -138,8 +138,8 @@ impl IntPlusOne {\n         if let Some(snippet) = snippet_opt(cx, node.span) {\n             if let Some(other_side_snippet) = snippet_opt(cx, other_side.span) {\n                 let rec = match side {\n-                    Side::Lhs => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n-                    Side::Rhs => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n+                    Side::Lhs => Some(format!(\"{snippet} {binop_string} {other_side_snippet}\")),\n+                    Side::Rhs => Some(format!(\"{other_side_snippet} {binop_string} {snippet}\")),\n                 };\n                 return rec;\n             }"}, {"sha": "78815ea5a0a0f9ed9cd7eb0b727311479e695845", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -80,10 +80,7 @@ fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefI\n                 cx,\n                 ITER_NOT_RETURNING_ITERATOR,\n                 sig.span,\n-                &format!(\n-                    \"this method is named `{}` but its return type does not implement `Iterator`\",\n-                    name\n-                ),\n+                &format!(\"this method is named `{name}` but its return type does not implement `Iterator`\"),\n             );\n         }\n     }"}, {"sha": "e94292b9fac03a5abaac2cc0f62bfbf82ec6e216", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -278,15 +278,13 @@ impl<'tcx> LenOutput<'tcx> {\n             _ => \"\",\n         };\n         match self {\n-            Self::Integral => format!(\"expected signature: `({}self) -> bool`\", self_ref),\n-            Self::Option(_) => format!(\n-                \"expected signature: `({}self) -> bool` or `({}self) -> Option<bool>\",\n-                self_ref, self_ref\n-            ),\n-            Self::Result(..) => format!(\n-                \"expected signature: `({}self) -> bool` or `({}self) -> Result<bool>\",\n-                self_ref, self_ref\n-            ),\n+            Self::Integral => format!(\"expected signature: `({self_ref}self) -> bool`\"),\n+            Self::Option(_) => {\n+                format!(\"expected signature: `({self_ref}self) -> bool` or `({self_ref}self) -> Option<bool>\")\n+            },\n+            Self::Result(..) => {\n+                format!(\"expected signature: `({self_ref}self) -> bool` or `({self_ref}self) -> Result<bool>\")\n+            },\n         }\n     }\n }\n@@ -326,17 +324,15 @@ fn check_for_is_empty<'tcx>(\n     let (msg, is_empty_span, self_kind) = match is_empty {\n         None => (\n             format!(\n-                \"{} `{}` has a public `len` method, but no `is_empty` method\",\n-                item_kind,\n+                \"{item_kind} `{}` has a public `len` method, but no `is_empty` method\",\n                 item_name.as_str(),\n             ),\n             None,\n             None,\n         ),\n         Some(is_empty) if !cx.access_levels.is_exported(is_empty.def_id.expect_local()) => (\n             format!(\n-                \"{} `{}` has a public `len` method, but a private `is_empty` method\",\n-                item_kind,\n+                \"{item_kind} `{}` has a public `len` method, but a private `is_empty` method\",\n                 item_name.as_str(),\n             ),\n             Some(cx.tcx.def_span(is_empty.def_id)),\n@@ -348,8 +344,7 @@ fn check_for_is_empty<'tcx>(\n         {\n             (\n                 format!(\n-                    \"{} `{}` has a public `len` method, but the `is_empty` method has an unexpected signature\",\n-                    item_kind,\n+                    \"{item_kind} `{}` has a public `len` method, but the `is_empty` method has an unexpected signature\",\n                     item_name.as_str(),\n                 ),\n                 Some(cx.tcx.def_span(is_empty.def_id)),\n@@ -419,10 +414,9 @@ fn check_len(\n                 LEN_ZERO,\n                 span,\n                 &format!(\"length comparison to {}\", if compare_to == 0 { \"zero\" } else { \"one\" }),\n-                &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n+                &format!(\"using `{op}is_empty` is clearer and more explicit\"),\n                 format!(\n-                    \"{}{}.is_empty()\",\n-                    op,\n+                    \"{op}{}.is_empty()\",\n                     snippet_with_applicability(cx, receiver.span, \"_\", &mut applicability)\n                 ),\n                 applicability,\n@@ -439,10 +433,9 @@ fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Ex\n             COMPARISON_TO_EMPTY,\n             span,\n             \"comparison to empty slice\",\n-            &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n+            &format!(\"using `{op}is_empty` is clearer and more explicit\"),\n             format!(\n-                \"{}{}.is_empty()\",\n-                op,\n+                \"{op}{}.is_empty()\",\n                 snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability)\n             ),\n             applicability,"}, {"sha": "13071d64441a081d416fdc5782db70f195e32e51", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -106,8 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                     // use mutably after the `if`\n \n                     let sug = format!(\n-                        \"let {mut}{name} = if {cond} {{{then} {value} }} else {{{else} {default} }};\",\n-                        mut=mutability,\n+                        \"let {mutability}{name} = if {cond} {{{then} {value} }} else {{{else} {default} }};\",\n                         name=ident.name,\n                         cond=snippet(cx, cond.span, \"_\"),\n                         then=if then.stmts.len() > 1 { \" ..;\" } else { \"\" },"}, {"sha": "8a2a1682eca266e448b312e02a3370fb4438c2a2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -417,8 +417,7 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n             sess.err(&format!(\n-                \"error reading Clippy's configuration file. `{}` is not a valid Rust version\",\n-                s\n+                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n             ));\n             None\n         })\n@@ -434,8 +433,7 @@ fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n     let clippy_msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n             sess.err(&format!(\n-                \"error reading Clippy's configuration file. `{}` is not a valid Rust version\",\n-                s\n+                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n             ));\n             None\n         })\n@@ -446,8 +444,7 @@ fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n             // if both files have an msrv, let's compare them and emit a warning if they differ\n             if clippy_msrv != cargo_msrv {\n                 sess.warn(&format!(\n-                    \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{}` from `clippy.toml`\",\n-                    clippy_msrv\n+                    \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{clippy_msrv}` from `clippy.toml`\"\n                 ));\n             }\n \n@@ -466,7 +463,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n         Ok(Some(path)) => path,\n         Ok(None) => return Conf::default(),\n         Err(error) => {\n-            sess.struct_err(&format!(\"error finding Clippy's configuration file: {}\", error))\n+            sess.struct_err(&format!(\"error finding Clippy's configuration file: {error}\"))\n                 .emit();\n             return Conf::default();\n         },"}, {"sha": "25f19b9c6e6c771281a212748b21487ed9b8cf50", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -478,7 +478,7 @@ impl DecimalLiteralRepresentation {\n             if num_lit.radix == Radix::Decimal;\n             if val >= u128::from(self.threshold);\n             then {\n-                let hex = format!(\"{:#X}\", val);\n+                let hex = format!(\"{val:#X}\");\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n                 let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n                     warning_type.display(num_lit.format(), cx, lit.span);"}, {"sha": "14f2234813277c7c5ae4226278798c26548aa012", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -44,11 +44,10 @@ pub(super) fn check<'tcx>(\n                                 cx,\n                                 EXPLICIT_COUNTER_LOOP,\n                                 span,\n-                                &format!(\"the variable `{}` is used as a loop counter\", name),\n+                                &format!(\"the variable `{name}` is used as a loop counter\"),\n                                 \"consider using\",\n                                 format!(\n-                                    \"for ({}, {}) in {}.enumerate()\",\n-                                    name,\n+                                    \"for ({name}, {}) in {}.enumerate()\",\n                                     snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n                                     make_iterator_snippet(cx, arg, &mut applicability),\n                                 ),\n@@ -65,24 +64,21 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n                         span,\n-                        &format!(\"the variable `{}` is used as a loop counter\", name),\n+                        &format!(\"the variable `{name}` is used as a loop counter\"),\n                         |diag| {\n                             diag.span_suggestion(\n                                 span,\n                                 \"consider using\",\n                                 format!(\n-                                    \"for ({}, {}) in (0_{}..).zip({})\",\n-                                    name,\n+                                    \"for ({name}, {}) in (0_{int_name}..).zip({})\",\n                                     snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                                    int_name,\n                                     make_iterator_snippet(cx, arg, &mut applicability),\n                                 ),\n                                 applicability,\n                             );\n \n                             diag.note(&format!(\n-                                \"`{}` is of type `{}`, making it ineligible for `Iterator::enumerate`\",\n-                                name, int_name\n+                                \"`{name}` is of type `{int_name}`, making it ineligible for `Iterator::enumerate`\"\n                             ));\n                         },\n                     );"}, {"sha": "b1f2941622abbc0af06154094d30a18aeca34a7c", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -41,7 +41,7 @@ pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, m\n         \"it is more concise to loop over references to containers instead of using explicit \\\n          iteration methods\",\n         \"to write this more concisely, try\",\n-        format!(\"&{}{}\", muta, object),\n+        format!(\"&{muta}{object}\"),\n         applicability,\n     );\n }"}, {"sha": "ed620460dbe660f95fc1cb5fcd46a17cc2f16365", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -38,15 +38,15 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, arg: &'tcx\n                     cx,\n                     FOR_KV_MAP,\n                     arg_span,\n-                    &format!(\"you seem to want to iterate on a map's {}s\", kind),\n+                    &format!(\"you seem to want to iterate on a map's {kind}s\"),\n                     |diag| {\n                         let map = sugg::Sugg::hir(cx, arg, \"map\");\n                         multispan_sugg(\n                             diag,\n                             \"use the corresponding method\",\n                             vec![\n                                 (pat_span, snippet(cx, new_pat_span, kind).into_owned()),\n-                                (arg_span, format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl)),\n+                                (arg_span, format!(\"{}.{kind}s{mutbl}()\", map.maybe_par())),\n                             ],\n                         );\n                     },"}, {"sha": "1b36d452647ed3d200c06fdbbf64043b4f8ef5d2", "filename": "clippy_lints/src/loops/manual_flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(\n         then {\n             let if_let_type = if some_ctor { \"Some\" } else { \"Ok\" };\n             // Prepare the error message\n-            let msg = format!(\"unnecessary `if let` since only the `{}` variant of the iterator element is used\", if_let_type);\n+            let msg = format!(\"unnecessary `if let` since only the `{if_let_type}` variant of the iterator element is used\");\n \n             // Prepare the help message\n             let mut applicability = Applicability::MaybeIncorrect;"}, {"sha": "c87fc4f90e21659fcfd9b8e4a22cb9db6e8d7be9", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -177,13 +177,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     let dst = if dst_offset == sugg::EMPTY && dst_limit == sugg::EMPTY {\n         dst_base_str\n     } else {\n-        format!(\n-            \"{}[{}..{}]\",\n-            dst_base_str,\n-            dst_offset.maybe_par(),\n-            dst_limit.maybe_par()\n-        )\n-        .into()\n+        format!(\"{dst_base_str}[{}..{}]\", dst_offset.maybe_par(), dst_limit.maybe_par()).into()\n     };\n \n     let method_str = if is_copy(cx, elem_ty) {\n@@ -193,10 +187,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     };\n \n     format!(\n-        \"{}.{}(&{}[{}..{}]);\",\n-        dst,\n-        method_str,\n-        src_base_str,\n+        \"{dst}.{method_str}(&{src_base_str}[{}..{}]);\",\n         src_offset.maybe_par(),\n         src_limit.maybe_par()\n     )"}, {"sha": "66f9e28596e87cedda9ae44c8508a19523be8341", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -45,7 +45,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n                         let (arg, pred) = contains_arg\n                             .strip_prefix('&')\n                             .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n-                        format!(\"any(|{}| x == {})\", arg, pred)\n+                        format!(\"any(|{arg}| x == {pred})\")\n                     }\n                     _ => return,\n                 }\n@@ -141,9 +141,9 @@ impl IterFunction {\n             IterFunctionKind::Contains(span) => {\n                 let s = snippet(cx, *span, \"..\");\n                 if let Some(stripped) = s.strip_prefix('&') {\n-                    format!(\".any(|x| x == {})\", stripped)\n+                    format!(\".any(|x| x == {stripped})\")\n                 } else {\n-                    format!(\".any(|x| x == *{})\", s)\n+                    format!(\".any(|x| x == *{s})\")\n                 }\n             },\n         }"}, {"sha": "00cfc6d49f19a7f3043a70ff8d1f7760471466cd", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -145,7 +145,7 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n                         arg.span,\n-                        &format!(\"the loop variable `{}` is used to index `{}`\", ident.name, indexed),\n+                        &format!(\"the loop variable `{}` is used to index `{indexed}`\", ident.name),\n                         |diag| {\n                             multispan_sugg(\n                                 diag,\n@@ -154,24 +154,24 @@ pub(super) fn check<'tcx>(\n                                     (pat.span, format!(\"({}, <item>)\", ident.name)),\n                                     (\n                                         arg.span,\n-                                        format!(\"{}.{}().enumerate(){}{}\", indexed, method, method_1, method_2),\n+                                        format!(\"{indexed}.{method}().enumerate(){method_1}{method_2}\"),\n                                     ),\n                                 ],\n                             );\n                         },\n                     );\n                 } else {\n                     let repl = if starts_at_zero && take_is_empty {\n-                        format!(\"&{}{}\", ref_mut, indexed)\n+                        format!(\"&{ref_mut}{indexed}\")\n                     } else {\n-                        format!(\"{}.{}(){}{}\", indexed, method, method_1, method_2)\n+                        format!(\"{indexed}.{method}(){method_1}{method_2}\")\n                     };\n \n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n                         arg.span,\n-                        &format!(\"the loop variable `{}` is only used to index `{}`\", ident.name, indexed),\n+                        &format!(\"the loop variable `{}` is only used to index `{indexed}`\", ident.name),\n                         |diag| {\n                             multispan_sugg(\n                                 diag,"}, {"sha": "16b00ad663787cd4c495d5acc9b48917b41be5a9", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -222,9 +222,5 @@ fn for_to_if_let_sugg(cx: &LateContext<'_>, iterator: &Expr<'_>, pat: &Pat<'_>)\n     let pat_snippet = snippet(cx, pat.span, \"_\");\n     let iter_snippet = make_iterator_snippet(cx, iterator, &mut Applicability::Unspecified);\n \n-    format!(\n-        \"if let Some({pat}) = {iter}.next()\",\n-        pat = pat_snippet,\n-        iter = iter_snippet\n-    )\n+    format!(\"if let Some({pat_snippet}) = {iter_snippet}.next()\")\n }"}, {"sha": "07edee46fa657639fb29f0ddada7e638ff34cf1d", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -30,10 +30,7 @@ pub(super) fn check<'tcx>(\n             vec.span,\n             \"it looks like the same item is being pushed into this Vec\",\n             None,\n-            &format!(\n-                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                item_str, vec_str, item_str\n-            ),\n+            &format!(\"try using vec![{item_str};SIZE] or {vec_str}.resize(NEW_SIZE, {item_str})\"),\n         );\n     }\n "}, {"sha": "b332e8a923ba7b647e89f8d323a79111ed1f0746", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -344,9 +344,8 @@ pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic\n                     _ => arg,\n                 };\n                 format!(\n-                    \"{}.{}()\",\n+                    \"{}.{method_name}()\",\n                     sugg::Sugg::hir_with_applicability(cx, caller, \"_\", applic_ref).maybe_par(),\n-                    method_name,\n                 )\n             },\n             _ => format!("}, {"sha": "1c6f0264cb543390654ed08a617c5d7faa35bc55", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -67,7 +67,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         expr.span.with_hi(scrutinee_expr.span.hi()),\n         \"this loop could be written as a `for` loop\",\n         \"try\",\n-        format!(\"for {} in {}{}\", loop_var, iterator, by_ref),\n+        format!(\"for {loop_var} in {iterator}{by_ref}\"),\n         applicability,\n     );\n }"}, {"sha": "f5617a905ff872992c96cfc9ad9c16b380dbce92", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -190,17 +190,17 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         let mut suggestions = vec![];\n         for ((root, span, hir_id), path) in used {\n             if path.len() == 1 {\n-                suggestions.push((span, format!(\"{}::{}\", root, path[0]), hir_id));\n+                suggestions.push((span, format!(\"{root}::{}\", path[0]), hir_id));\n             } else {\n-                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \")), hir_id));\n+                suggestions.push((span, format!(\"{root}::{{{}}}\", path.join(\", \")), hir_id));\n             }\n         }\n \n         // If mac_refs is not empty we have encountered an import we could not handle\n         // such as `std::prelude::v1::foo` or some other macro that expands to an import.\n         if self.mac_refs.is_empty() {\n             for (span, import, hir_id) in suggestions {\n-                let help = format!(\"use {};\", import);\n+                let help = format!(\"use {import};\");\n                 span_lint_hir_and_then(\n                     cx,\n                     MACRO_USE_IMPORTS,"}, {"sha": "ddd9f34cbc457d7bd7f5f582590c4d5701b32a92", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -74,11 +74,11 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                             if let Some(ret_pos) = position_before_rarrow(&header_snip);\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n-                                let help = format!(\"make the function `async` and {}\", ret_sugg);\n+                                let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,\n                                     &help,\n-                                    format!(\"async {}{}\", &header_snip[..ret_pos], ret_snip),\n+                                    format!(\"async {}{ret_snip}\", &header_snip[..ret_pos]),\n                                     Applicability::MachineApplicable\n                                 );\n \n@@ -196,7 +196,7 @@ fn suggested_ret(cx: &LateContext<'_>, output: &Ty<'_>) -> Option<(&'static str,\n         },\n         _ => {\n             let sugg = \"return the output of the future directly\";\n-            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\" -> {}\", snip)))\n+            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\" -> {snip}\")))\n         },\n     }\n }"}, {"sha": "7d4f0b021120547c820533448ec80d0346d7f328", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -133,7 +133,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n                             diag.span_suggestion(\n                                 header_span,\n                                 \"add the attribute\",\n-                                format!(\"#[non_exhaustive] {}\", snippet),\n+                                format!(\"#[non_exhaustive] {snippet}\"),\n                                 Applicability::Unspecified,\n                             );\n                         }\n@@ -207,7 +207,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n                             diag.span_suggestion(\n                                 header_span,\n                                 \"add the attribute\",\n-                                format!(\"#[non_exhaustive] {}\", snippet),\n+                                format!(\"#[non_exhaustive] {snippet}\"),\n                                 Applicability::Unspecified,\n                             );\n                     }"}, {"sha": "570fe73681830f3b7d12bf5844e761a3759fa91b", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -153,15 +153,15 @@ fn suggest(cx: &LateContext<'_>, parent_expr: &hir::Expr<'_>, left_expr: &hir::E\n         && let [filter_params] = filter_body.params\n         && let Some(sugg) = match filter_params.pat.kind {\n             hir::PatKind::Binding(_, _, filter_param_ident, None) => {\n-                Some(format!(\"{}.retain(|{}| {})\", snippet(cx, left_expr.span, \"..\"), filter_param_ident, snippet(cx, filter_body.value.span, \"..\")))\n+                Some(format!(\"{}.retain(|{filter_param_ident}| {})\", snippet(cx, left_expr.span, \"..\"), snippet(cx, filter_body.value.span, \"..\")))\n             },\n             hir::PatKind::Tuple([key_pat, value_pat], _) => {\n                 make_sugg(cx, key_pat, value_pat, left_expr, filter_body)\n             },\n             hir::PatKind::Ref(pat, _) => {\n                 match pat.kind {\n                     hir::PatKind::Binding(_, _, filter_param_ident, None) => {\n-                        Some(format!(\"{}.retain(|{}| {})\", snippet(cx, left_expr.span, \"..\"), filter_param_ident, snippet(cx, filter_body.value.span, \"..\")))\n+                        Some(format!(\"{}.retain(|{filter_param_ident}| {})\", snippet(cx, left_expr.span, \"..\"), snippet(cx, filter_body.value.span, \"..\")))\n                     },\n                     _ => None\n                 }\n@@ -190,23 +190,19 @@ fn make_sugg(\n     match (&key_pat.kind, &value_pat.kind) {\n         (hir::PatKind::Binding(_, _, key_param_ident, None), hir::PatKind::Binding(_, _, value_param_ident, None)) => {\n             Some(format!(\n-                \"{}.retain(|{}, &mut {}| {})\",\n+                \"{}.retain(|{key_param_ident}, &mut {value_param_ident}| {})\",\n                 snippet(cx, left_expr.span, \"..\"),\n-                key_param_ident,\n-                value_param_ident,\n                 snippet(cx, filter_body.value.span, \"..\")\n             ))\n         },\n         (hir::PatKind::Binding(_, _, key_param_ident, None), hir::PatKind::Wild) => Some(format!(\n-            \"{}.retain(|{}, _| {})\",\n+            \"{}.retain(|{key_param_ident}, _| {})\",\n             snippet(cx, left_expr.span, \"..\"),\n-            key_param_ident,\n             snippet(cx, filter_body.value.span, \"..\")\n         )),\n         (hir::PatKind::Wild, hir::PatKind::Binding(_, _, value_param_ident, None)) => Some(format!(\n-            \"{}.retain(|_, &mut {}| {})\",\n+            \"{}.retain(|_, &mut {value_param_ident}| {})\",\n             snippet(cx, left_expr.span, \"..\"),\n-            value_param_ident,\n             snippet(cx, filter_body.value.span, \"..\")\n         )),\n         _ => None,"}, {"sha": "0976940afac355fcc9f9b02f9796cf4262023018", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -108,15 +108,14 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n                     };\n \n                     let test_span = expr.span.until(then.span);\n-                    span_lint_and_then(cx, MANUAL_STRIP, strippings[0], &format!(\"stripping a {} manually\", kind_word), |diag| {\n-                        diag.span_note(test_span, &format!(\"the {} was tested here\", kind_word));\n+                    span_lint_and_then(cx, MANUAL_STRIP, strippings[0], &format!(\"stripping a {kind_word} manually\"), |diag| {\n+                        diag.span_note(test_span, &format!(\"the {kind_word} was tested here\"));\n                         multispan_sugg(\n                             diag,\n-                            &format!(\"try using the `strip_{}` method\", kind_word),\n+                            &format!(\"try using the `strip_{kind_word}` method\"),\n                             vec![(test_span,\n-                                  format!(\"if let Some(<stripped>) = {}.strip_{}({}) \",\n+                                  format!(\"if let Some(<stripped>) = {}.strip_{kind_word}({}) \",\n                                           snippet(cx, target_arg.span, \"..\"),\n-                                          kind_word,\n                                           snippet(cx, pattern.span, \"..\")))]\n                             .into_iter().chain(strippings.into_iter().map(|span| (span, \"<stripped>\".into()))),\n                         );"}, {"sha": "df5684541e9074b01b8dd183801d47d51ccf6dfa", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -194,10 +194,7 @@ fn let_binding_name(cx: &LateContext<'_>, var_arg: &hir::Expr<'_>) -> String {\n \n #[must_use]\n fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n-    format!(\n-        \"called `map(f)` on an `{0}` value where `f` is a {1} that returns the unit type `()`\",\n-        map_type, function_type\n-    )\n+    format!(\"called `map(f)` on an `{map_type}` value where `f` is a {function_type} that returns the unit type `()`\")\n }\n \n fn lint_map_unit_fn("}, {"sha": "a020282d234f9bba5625d435b574314d4055e6ba", "filename": "clippy_lints/src/match_result_ok.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -70,17 +70,15 @@ impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n                 let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n                 let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_path.ident.span), \"\", &mut applicability);\n                 let sugg = format!(\n-                    \"{} let Ok({}) = {}\",\n-                    ifwhile,\n-                    some_expr_string,\n+                    \"{ifwhile} let Ok({some_expr_string}) = {}\",\n                     trimmed_ok.trim().trim_end_matches('.'),\n                 );\n                 span_lint_and_sugg(\n                     cx,\n                     MATCH_RESULT_OK,\n                     expr.span.with_hi(let_expr.span.hi()),\n                     \"matching on `Some` with `ok()` is redundant\",\n-                    &format!(\"consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                    &format!(\"consider matching on `Ok({some_expr_string})` and removing the call to `ok` instead\"),\n                     sugg,\n                     applicability,\n                 );"}, {"sha": "96b8339550cee967e59833fd6688a265a5df6347", "filename": "clippy_lints/src/matches/manual_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -144,7 +144,7 @@ fn check<'tcx>(\n     let scrutinee = peel_hir_expr_refs(scrutinee).0;\n     let (scrutinee_str, _) = snippet_with_context(cx, scrutinee.span, expr_ctxt, \"..\", &mut app);\n     let scrutinee_str = if scrutinee.span.ctxt() == expr.span.ctxt() && scrutinee.precedence().order() < PREC_POSTFIX {\n-        format!(\"({})\", scrutinee_str)\n+        format!(\"({scrutinee_str})\")\n     } else {\n         scrutinee_str.into()\n     };\n@@ -172,9 +172,9 @@ fn check<'tcx>(\n                 };\n                 let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n                 if some_expr.needs_unsafe_block {\n-                    format!(\"|{}{}| unsafe {{ {} }}\", annotation, some_binding, expr_snip)\n+                    format!(\"|{annotation}{some_binding}| unsafe {{ {expr_snip} }}\")\n                 } else {\n-                    format!(\"|{}{}| {}\", annotation, some_binding, expr_snip)\n+                    format!(\"|{annotation}{some_binding}| {expr_snip}\")\n                 }\n             }\n         }\n@@ -183,9 +183,9 @@ fn check<'tcx>(\n         let pat_snip = snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0;\n         let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n         if some_expr.needs_unsafe_block {\n-            format!(\"|{}| unsafe {{ {} }}\", pat_snip, expr_snip)\n+            format!(\"|{pat_snip}| unsafe {{ {expr_snip} }}\")\n         } else {\n-            format!(\"|{}| {}\", pat_snip, expr_snip)\n+            format!(\"|{pat_snip}| {expr_snip}\")\n         }\n     } else {\n         // Refutable bindings and mixed reference annotations can't be handled by `map`.\n@@ -199,9 +199,9 @@ fn check<'tcx>(\n         \"manual implementation of `Option::map`\",\n         \"try this\",\n         if else_pat.is_none() && is_else_clause(cx.tcx, expr) {\n-            format!(\"{{ {}{}.map({}) }}\", scrutinee_str, as_ref_str, body_str)\n+            format!(\"{{ {scrutinee_str}{as_ref_str}.map({body_str}) }}\")\n         } else {\n-            format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str)\n+            format!(\"{scrutinee_str}{as_ref_str}.map({body_str})\")\n         },\n         app,\n     );"}, {"sha": "2fe7fe98a2e8f51ab3d8ee937626c03f158a43e1", "filename": "clippy_lints/src/matches/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -42,12 +42,10 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, scrutinee:\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n-                &format!(\"this pattern reimplements `{}::unwrap_or`\", ty_name),\n+                &format!(\"this pattern reimplements `{ty_name}::unwrap_or`\"),\n                 \"replace with\",\n                 format!(\n-                    \"{}.unwrap_or({})\",\n-                    suggestion,\n-                    reindented_or_body,\n+                    \"{suggestion}.unwrap_or({reindented_or_body})\",\n                 ),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "39d30212f36a3f2a95d46b0df87af46b6595f5f6", "filename": "clippy_lints/src/matches/match_as_ref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -45,13 +45,11 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr:\n                 cx,\n                 MATCH_AS_REF,\n                 expr.span,\n-                &format!(\"use `{}()` instead\", suggestion),\n+                &format!(\"use `{suggestion}()` instead\"),\n                 \"try this\",\n                 format!(\n-                    \"{}.{}(){}\",\n+                    \"{}.{suggestion}(){cast}\",\n                     snippet_with_applicability(cx, ex.span, \"_\", &mut applicability),\n-                    suggestion,\n-                    cast,\n                 ),\n                 applicability,\n             );"}, {"sha": "107fad32393cff30de3f84055901358f70685798", "filename": "clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -112,7 +112,7 @@ where\n                     .join(\" | \")\n             };\n             let pat_and_guard = if let Some(Guard::If(g)) = first_guard {\n-                format!(\"{} if {}\", pat, snippet_with_applicability(cx, g.span, \"..\", &mut applicability))\n+                format!(\"{pat} if {}\", snippet_with_applicability(cx, g.span, \"..\", &mut applicability))\n             } else {\n                 pat\n             };\n@@ -131,10 +131,9 @@ where\n                 &format!(\"{} expression looks like `matches!` macro\", if is_if_let { \"if let .. else\" } else { \"match\" }),\n                 \"try this\",\n                 format!(\n-                    \"{}matches!({}, {})\",\n+                    \"{}matches!({}, {pat_and_guard})\",\n                     if b0 { \"\" } else { \"!\" },\n                     snippet_with_applicability(cx, ex_new.span, \"..\", &mut applicability),\n-                    pat_and_guard,\n                 ),\n                 applicability,\n             );"}, {"sha": "3e11016602b8c7a472177dbb11aef98ccc2dc682", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -135,7 +135,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                     diag.span_suggestion(\n                         keep_arm.pat.span,\n                         \"try merging the arm patterns\",\n-                        format!(\"{} | {}\", keep_pat_snip, move_pat_snip),\n+                        format!(\"{keep_pat_snip} | {move_pat_snip}\"),\n                         Applicability::MaybeIncorrect,\n                     )\n                     .help(\"or try changing either arm body\")"}, {"sha": "68682cedf1de434bcce702c5c5abb13e4f97a53f", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -75,12 +75,11 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                 Some(AssignmentExpr::Local { span, pat_span }) => (\n                     span,\n                     format!(\n-                        \"let {} = {};\\n{}let {} = {};\",\n+                        \"let {} = {};\\n{}let {} = {snippet_body};\",\n                         snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n                         snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n                         \" \".repeat(indent_of(cx, expr.span).unwrap_or(0)),\n-                        snippet_with_applicability(cx, pat_span, \"..\", &mut applicability),\n-                        snippet_body\n+                        snippet_with_applicability(cx, pat_span, \"..\", &mut applicability)\n                     ),\n                 ),\n                 None => {\n@@ -110,10 +109,8 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n             if ex.can_have_side_effects() {\n                 let indent = \" \".repeat(indent_of(cx, expr.span).unwrap_or(0));\n                 let sugg = format!(\n-                    \"{};\\n{}{}\",\n-                    snippet_with_applicability(cx, ex.span, \"..\", &mut applicability),\n-                    indent,\n-                    snippet_body\n+                    \"{};\\n{indent}{snippet_body}\",\n+                    snippet_with_applicability(cx, ex.span, \"..\", &mut applicability)\n                 );\n \n                 span_lint_and_sugg(\n@@ -178,10 +175,10 @@ fn sugg_with_curlies<'a>(\n     let (mut cbrace_start, mut cbrace_end) = (String::new(), String::new());\n     if let Some(parent_expr) = get_parent_expr(cx, match_expr) {\n         if let ExprKind::Closure { .. } = parent_expr.kind {\n-            cbrace_end = format!(\"\\n{}}}\", indent);\n+            cbrace_end = format!(\"\\n{indent}}}\");\n             // Fix body indent due to the closure\n             indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n-            cbrace_start = format!(\"{{\\n{}\", indent);\n+            cbrace_start = format!(\"{{\\n{indent}\");\n         }\n     }\n \n@@ -190,10 +187,10 @@ fn sugg_with_curlies<'a>(\n     let parent_node_id = cx.tcx.hir().get_parent_node(match_expr.hir_id);\n     if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n         if let ExprKind::Match(..) = arm.body.kind {\n-            cbrace_end = format!(\"\\n{}}}\", indent);\n+            cbrace_end = format!(\"\\n{indent}}}\");\n             // Fix body indent due to the match\n             indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n-            cbrace_start = format!(\"{{\\n{}\", indent);\n+            cbrace_start = format!(\"{{\\n{indent}\");\n         }\n     }\n \n@@ -204,13 +201,8 @@ fn sugg_with_curlies<'a>(\n     });\n \n     format!(\n-        \"{}let {} = {};\\n{}{}{}{}\",\n-        cbrace_start,\n+        \"{cbrace_start}let {} = {};\\n{indent}{assignment_str}{snippet_body}{cbrace_end}\",\n         snippet_with_applicability(cx, bind_names, \"..\", applicability),\n-        snippet_with_applicability(cx, matched_vars, \"..\", applicability),\n-        indent,\n-        assignment_str,\n-        snippet_body,\n-        cbrace_end\n+        snippet_with_applicability(cx, matched_vars, \"..\", applicability)\n     )\n }"}, {"sha": "6647322caa37a846520edfc81251261d9e312c6c", "filename": "clippy_lints/src/matches/match_str_case_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -118,8 +118,8 @@ fn lint(cx: &LateContext<'_>, case_method: &CaseMethod, bad_case_span: Span, bad\n         MATCH_STR_CASE_MISMATCH,\n         bad_case_span,\n         \"this `match` arm has a differing case than its expression\",\n-        &format!(\"consider changing the case of this arm to respect `{}`\", method_str),\n-        format!(\"\\\"{}\\\"\", suggestion),\n+        &format!(\"consider changing the case of this arm to respect `{method_str}`\"),\n+        format!(\"\\\"{suggestion}\\\"\"),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "42f1e2629d41a79ee766973a2e32635afffc6942", "filename": "clippy_lints/src/matches/match_wild_err_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm<'\n                             span_lint_and_note(cx,\n                                 MATCH_WILD_ERR_ARM,\n                                 arm.pat.span,\n-                                &format!(\"`Err({})` matches all errors\", ident_bind_name),\n+                                &format!(\"`Err({ident_bind_name})` matches all errors\"),\n                                 None,\n                                 \"match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\",\n                             );"}, {"sha": "343b1d058b44eca72578d9d1e09e11eeb860d70c", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -138,7 +138,7 @@ fn find_sugg_for_if_let<'tcx>(\n         cx,\n         REDUNDANT_PATTERN_MATCHING,\n         let_pat.span,\n-        &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n+        &format!(\"redundant pattern matching, consider using `{good_method}`\"),\n         |diag| {\n             // if/while let ... = ... { ... }\n             // ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -162,7 +162,7 @@ fn find_sugg_for_if_let<'tcx>(\n                 .maybe_par()\n                 .to_string();\n \n-            diag.span_suggestion(span, \"try this\", format!(\"{} {}.{}\", keyword, sugg, good_method), app);\n+            diag.span_suggestion(span, \"try this\", format!(\"{keyword} {sugg}.{good_method}\"), app);\n \n             if needs_drop {\n                 diag.note(\"this will change drop order of the result, as well as all temporaries\");\n@@ -252,12 +252,12 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                 cx,\n                 REDUNDANT_PATTERN_MATCHING,\n                 expr.span,\n-                &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n+                &format!(\"redundant pattern matching, consider using `{good_method}`\"),\n                 |diag| {\n                     diag.span_suggestion(\n                         span,\n                         \"try this\",\n-                        format!(\"{}.{}\", snippet(cx, result_expr.span, \"_\"), good_method),\n+                        format!(\"{}.{good_method}\", snippet(cx, result_expr.span, \"_\")),\n                         Applicability::MaybeIncorrect, // snippet\n                     );\n                 },"}, {"sha": "85269e533a066861ad3454d82d0a67185ee3277c", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -50,13 +50,13 @@ fn set_diagnostic<'tcx>(diag: &mut Diagnostic, cx: &LateContext<'tcx>, expr: &'t\n     let trailing_indent = \" \".repeat(indent_of(cx, found.found_span).unwrap_or(0));\n \n     let replacement = if found.lint_suggestion == LintSuggestion::MoveAndDerefToCopy {\n-        format!(\"let value = *{};\\n{}\", original, trailing_indent)\n+        format!(\"let value = *{original};\\n{trailing_indent}\")\n     } else if found.is_unit_return_val {\n         // If the return value of the expression to be moved is unit, then we don't need to\n         // capture the result in a temporary -- we can just replace it completely with `()`.\n-        format!(\"{};\\n{}\", original, trailing_indent)\n+        format!(\"{original};\\n{trailing_indent}\")\n     } else {\n-        format!(\"let value = {};\\n{}\", original, trailing_indent)\n+        format!(\"let value = {original};\\n{trailing_indent}\")\n     };\n \n     let suggestion_message = if found.lint_suggestion == LintSuggestion::MoveOnly {"}, {"sha": "6314959f818eae141d99010cda787011e8fc0325", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -99,23 +99,21 @@ fn report_single_pattern(\n \n             let msg = \"you seem to be trying to use `match` for an equality check. Consider using `if`\";\n             let sugg = format!(\n-                \"if {} == {}{} {}{}\",\n+                \"if {} == {}{} {}{els_str}\",\n                 snippet(cx, ex.span, \"..\"),\n                 // PartialEq for different reference counts may not exist.\n                 \"&\".repeat(ref_count_diff),\n                 snippet(cx, arms[0].pat.span, \"..\"),\n                 expr_block(cx, arms[0].body, None, \"..\", Some(expr.span)),\n-                els_str,\n             );\n             (msg, sugg)\n         } else {\n             let msg = \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\";\n             let sugg = format!(\n-                \"if let {} = {} {}{}\",\n+                \"if let {} = {} {}{els_str}\",\n                 snippet(cx, arms[0].pat.span, \"..\"),\n                 snippet(cx, ex.span, \"..\"),\n                 expr_block(cx, arms[0].body, None, \"..\", Some(expr.span)),\n-                els_str,\n             );\n             (msg, sugg)\n         }"}, {"sha": "a3ec1ff24820c616128f7d293a69a336ed233a90", "filename": "clippy_lints/src/matches/try_err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -61,9 +61,9 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, scrutine\n                 \"return \"\n             };\n             let suggestion = if err_ty == expr_err_ty {\n-                format!(\"{}{}{}{}\", ret_prefix, prefix, origin_snippet, suffix)\n+                format!(\"{ret_prefix}{prefix}{origin_snippet}{suffix}\")\n             } else {\n-                format!(\"{}{}{}.into(){}\", ret_prefix, prefix, origin_snippet, suffix)\n+                format!(\"{ret_prefix}{prefix}{origin_snippet}.into(){suffix}\")\n             };\n \n             span_lint_and_sugg("}, {"sha": "cc26b0f7fa82d38a5b2af682db29f3265a77d0c2", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -85,7 +85,7 @@ pub(crate) trait BindInsteadOfMap {\n \n                 let closure_args_snip = snippet(cx, closure_args_span, \"..\");\n                 let option_snip = snippet(cx, recv.span, \"..\");\n-                let note = format!(\"{}.{}({} {})\", option_snip, Self::GOOD_METHOD_NAME, closure_args_snip, some_inner_snip);\n+                let note = format!(\"{option_snip}.{}({closure_args_snip} {some_inner_snip})\", Self::GOOD_METHOD_NAME);\n                 span_lint_and_sugg(\n                     cx,\n                     BIND_INSTEAD_OF_MAP,"}, {"sha": "2e96346be977e839716708929bfeede60207d612", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         cx,\n         BYTES_NTH,\n         expr.span,\n-        &format!(\"called `.bytes().nth()` on a `{}`\", caller_type),\n+        &format!(\"called `.bytes().nth()` on a `{caller_type}`\"),\n         \"try\",\n         format!(\n             \"{}.as_bytes().get({})\","}, {"sha": "56b7fbb9d4bc88243d597b975cbde2159885a8aa", "filename": "clippy_lints/src/methods/chars_cmp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -33,12 +33,11 @@ pub(super) fn check(\n                 cx,\n                 lint,\n                 info.expr.span,\n-                &format!(\"you should use the `{}` method\", suggest),\n+                &format!(\"you should use the `{suggest}` method\"),\n                 \"like this\",\n-                format!(\"{}{}.{}({})\",\n+                format!(\"{}{}.{suggest}({})\",\n                         if info.eq { \"\" } else { \"!\" },\n                         snippet_with_applicability(cx, args[0].0.span, \"..\", &mut applicability),\n-                        suggest,\n                         snippet_with_applicability(cx, arg_char.span, \"..\", &mut applicability)),\n                 applicability,\n             );"}, {"sha": "7e808760663a1a4b370bd33daeebedca134fc1f9", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -26,12 +26,11 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 lint,\n                 info.expr.span,\n-                &format!(\"you should use the `{}` method\", suggest),\n+                &format!(\"you should use the `{suggest}` method\"),\n                 \"like this\",\n-                format!(\"{}{}.{}('{}')\",\n+                format!(\"{}{}.{suggest}('{}')\",\n                         if info.eq { \"\" } else { \"!\" },\n                         snippet_with_applicability(cx, args[0].0.span, \"..\", &mut applicability),\n-                        suggest,\n                         c.escape_default()),\n                 applicability,\n             );"}, {"sha": "7c7938dd2e8b04f5e76fc1f10c4eb654bbcf2f93", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -49,8 +49,7 @@ pub(super) fn check(\n                 expr.span,\n                 &format!(\n                     \"using `clone` on a double-reference; \\\n-                    this will copy the reference of type `{}` instead of cloning the inner type\",\n-                    ty\n+                    this will copy the reference of type `{ty}` instead of cloning the inner type\"\n                 ),\n                 |diag| {\n                     if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n@@ -62,11 +61,11 @@ pub(super) fn check(\n                         }\n                         let refs = \"&\".repeat(n + 1);\n                         let derefs = \"*\".repeat(n);\n-                        let explicit = format!(\"<{}{}>::clone({})\", refs, ty, snip);\n+                        let explicit = format!(\"<{refs}{ty}>::clone({snip})\");\n                         diag.span_suggestion(\n                             expr.span,\n                             \"try dereferencing it\",\n-                            format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n+                            format!(\"{refs}({derefs}{}).clone()\", snip.deref()),\n                             Applicability::MaybeIncorrect,\n                         );\n                         diag.span_suggestion(\n@@ -121,16 +120,16 @@ pub(super) fn check(\n         let (help, sugg) = if deref_count == 0 {\n             (\"try removing the `clone` call\", snip.into())\n         } else if parent_is_suffix_expr {\n-            (\"try dereferencing it\", format!(\"({}{})\", \"*\".repeat(deref_count), snip))\n+            (\"try dereferencing it\", format!(\"({}{snip})\", \"*\".repeat(deref_count)))\n         } else {\n-            (\"try dereferencing it\", format!(\"{}{}\", \"*\".repeat(deref_count), snip))\n+            (\"try dereferencing it\", format!(\"{}{snip}\", \"*\".repeat(deref_count)))\n         };\n \n         span_lint_and_sugg(\n             cx,\n             CLONE_ON_COPY,\n             expr.span,\n-            &format!(\"using `clone` on type `{}` which implements the `Copy` trait\", ty),\n+            &format!(\"using `clone` on type `{ty}` which implements the `Copy` trait\"),\n             help,\n             sugg,\n             app,"}, {"sha": "355f53532e2689beeda54d174fcaa50d82aab670", "filename": "clippy_lints/src/methods/clone_on_ref_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -41,7 +41,7 @@ pub(super) fn check(\n             expr.span,\n             \"using `.clone()` on a ref-counted pointer\",\n             \"try this\",\n-            format!(\"{}::<{}>::clone(&{})\", caller_type, subst.type_at(0), snippet),\n+            format!(\"{caller_type}::<{}>::clone(&{snippet})\", subst.type_at(0)),\n             Applicability::Unspecified, // Sometimes unnecessary ::<_> after Rc/Arc/Weak\n         );\n     }"}, {"sha": "d0cf411dfd34caca494b9675d518fe742a1c4653", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -143,9 +143,9 @@ pub(super) fn check<'tcx>(\n             cx,\n             EXPECT_FUN_CALL,\n             span_replace_word,\n-            &format!(\"use of `{}` followed by a function call\", name),\n+            &format!(\"use of `{name}` followed by a function call\"),\n             \"try this\",\n-            format!(\"unwrap_or_else({} panic!({}))\", closure_args, sugg),\n+            format!(\"unwrap_or_else({closure_args} panic!({sugg}))\"),\n             applicability,\n         );\n         return;\n@@ -160,12 +160,9 @@ pub(super) fn check<'tcx>(\n         cx,\n         EXPECT_FUN_CALL,\n         span_replace_word,\n-        &format!(\"use of `{}` followed by a function call\", name),\n+        &format!(\"use of `{name}` followed by a function call\"),\n         \"try this\",\n-        format!(\n-            \"unwrap_or_else({} {{ panic!(\\\"{{}}\\\", {}) }})\",\n-            closure_args, arg_root_snippet\n-        ),\n+        format!(\"unwrap_or_else({closure_args} {{ panic!(\\\"{{}}\\\", {arg_root_snippet}) }})\"),\n         applicability,\n     );\n }"}, {"sha": "60f8283c3e09d21a5ed913fb33fb153ed40ff1b4", "filename": "clippy_lints/src/methods/filetype_is_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             span = expr.span;\n         }\n     }\n-    let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n-    let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n+    let lint_msg = format!(\"`{lint_unary}FileType::is_file()` only {verb} regular files\");\n+    let help_msg = format!(\"use `{help_unary}FileType::is_dir()` instead\");\n     span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n }"}, {"sha": "ddf8a1f09b87d4b21b21704bc4bd1209a10600ad", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -32,7 +32,7 @@ pub(super) fn check<'tcx>(\n                 expr.span,\n                 msg,\n                 \"try this\",\n-                format!(\"{}.find_map({})\", iter_snippet, filter_snippet),\n+                format!(\"{iter_snippet}.find_map({filter_snippet})\"),\n                 Applicability::MachineApplicable,\n             );\n         } else {"}, {"sha": "edcec0fc1015ea7c52cb358ac30c8dabb2fe67fa", "filename": "clippy_lints/src/methods/filter_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -32,7 +32,7 @@ pub(super) fn check<'tcx>(\n                 expr.span,\n                 msg,\n                 \"try this\",\n-                format!(\"{}.find({})\", iter_snippet, filter_snippet),\n+                format!(\"{iter_snippet}.find({filter_snippet})\"),\n                 Applicability::MachineApplicable,\n             );\n         } else {"}, {"sha": "66dfce3682b59b59d885427234be5741db401e99", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Exp\n             // `expr` implements `FromIterator` trait\n             let iter_expr = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n             let turbofish = extract_turbofish(cx, expr, ty);\n-            let sugg = format!(\"{}.collect::<{}>()\", iter_expr, turbofish);\n+            let sugg = format!(\"{iter_expr}.collect::<{turbofish}>()\");\n             span_lint_and_sugg(\n                 cx,\n                 FROM_ITER_INSTEAD_OF_COLLECT,\n@@ -63,7 +63,7 @@ fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'_>) ->\n                             if e == type_specifier { None } else { Some((*e).to_string()) }\n                         }).collect::<Vec<_>>();\n                         // join and add the type specifier at the end (i.e.: `collections::BTreeSet<u32>`)\n-                        format!(\"{}{}\", without_ts.join(\"::\"), type_specifier)\n+                        format!(\"{}{type_specifier}\", without_ts.join(\"::\"))\n                     } else {\n                         // type is not explicitly specified so wildcards are needed\n                         // i.e.: 2 wildcards in `std::collections::BTreeMap<&i32, &char>`\n@@ -72,7 +72,7 @@ fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'_>) ->\n                         let end = ty_str.find('>').unwrap_or(ty_str.len());\n                         let nb_wildcard = ty_str[start..end].split(',').count();\n                         let wildcards = format!(\"_{}\", \", _\".repeat(nb_wildcard - 1));\n-                        format!(\"{}<{}>\", elements.join(\"::\"), wildcards)\n+                        format!(\"{}<{wildcards}>\", elements.join(\"::\"))\n                     }\n                 }\n             }"}, {"sha": "cb17af608a3f06f74505ab5769a0108412470810", "filename": "clippy_lints/src/methods/get_first.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -29,9 +29,9 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 GET_FIRST,\n                 expr.span,\n-                &format!(\"accessing first element with `{0}.get(0)`\", slice_name),\n+                &format!(\"accessing first element with `{slice_name}.get(0)`\"),\n                 \"try\",\n-                format!(\"{}.first()\", slice_name),\n+                format!(\"{slice_name}.first()\"),\n                 app,\n             );\n         }"}, {"sha": "ffc3a4d780e5d324be025959b3a2d90dd0b6c6ab", "filename": "clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -71,16 +71,11 @@ pub(super) fn check<'tcx>(\n         cx,\n         GET_UNWRAP,\n         span,\n-        &format!(\n-            \"called `.get{0}().unwrap()` on a {1}. Using `[]` is more clear and more concise\",\n-            mut_str, caller_type\n-        ),\n+        &format!(\"called `.get{mut_str}().unwrap()` on a {caller_type}. Using `[]` is more clear and more concise\"),\n         \"try this\",\n         format!(\n-            \"{}{}[{}]\",\n-            borrow_str,\n-            snippet_with_applicability(cx, recv.span, \"..\", &mut applicability),\n-            get_args_str\n+            \"{borrow_str}{}[{get_args_str}]\",\n+            snippet_with_applicability(cx, recv.span, \"..\", &mut applicability)\n         ),\n         applicability,\n     );"}, {"sha": "429cdc1918d79d7c03d1d5b24fe1bff04c8e7afb", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -26,12 +26,12 @@ pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv\n                 cx,\n                 IMPLICIT_CLONE,\n                 expr.span,\n-                &format!(\"implicitly cloning a `{}` by calling `{}` on its dereferenced type\", ty_name, method_name),\n+                &format!(\"implicitly cloning a `{ty_name}` by calling `{method_name}` on its dereferenced type\"),\n                 \"consider using\",\n                 if ref_count > 1 {\n-                    format!(\"({}{}).clone()\", \"*\".repeat(ref_count - 1), recv_snip)\n+                    format!(\"({}{recv_snip}).clone()\", \"*\".repeat(ref_count - 1))\n                 } else {\n-                    format!(\"{}.clone()\", recv_snip)\n+                    format!(\"{recv_snip}.clone()\")\n                 },\n                 app,\n             );"}, {"sha": "e5dc3711b0b47d7f73a3fd572ccf6d5edd295bd4", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -34,18 +34,17 @@ pub fn check<'tcx>(\n                 cx,\n                 INEFFICIENT_TO_STRING,\n                 expr.span,\n-                &format!(\"calling `to_string` on `{}`\", arg_ty),\n+                &format!(\"calling `to_string` on `{arg_ty}`\"),\n                 |diag| {\n                     diag.help(&format!(\n-                        \"`{}` implements `ToString` through a slower blanket impl, but `{}` has a fast specialization of `ToString`\",\n-                        self_ty, deref_self_ty\n+                        \"`{self_ty}` implements `ToString` through a slower blanket impl, but `{deref_self_ty}` has a fast specialization of `ToString`\"\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;\n                     let arg_snippet = snippet_with_applicability(cx, receiver.span, \"..\", &mut applicability);\n                     diag.span_suggestion(\n                         expr.span,\n                         \"try dereferencing the receiver\",\n-                        format!(\"({}{}).to_string()\", \"*\".repeat(deref_count), arg_snippet),\n+                        format!(\"({}{arg_snippet}).to_string()\", \"*\".repeat(deref_count)),\n                         applicability,\n                     );\n                 },"}, {"sha": "be56b63506a4be475be73426c827852b1241c455", "filename": "clippy_lints/src/methods/into_iter_on_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -30,8 +30,7 @@ pub(super) fn check(\n                 INTO_ITER_ON_REF,\n                 method_span,\n                 &format!(\n-                    \"this `.into_iter()` call is equivalent to `.{}()` and will not consume the `{}`\",\n-                    method_name, kind,\n+                    \"this `.into_iter()` call is equivalent to `.{method_name}()` and will not consume the `{kind}`\",\n                 ),\n                 \"call directly\",\n                 method_name.to_string(),"}, {"sha": "304024e80666f882e7eaff6bce448c734e1d3348", "filename": "clippy_lints/src/methods/is_digit_ascii_radix.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -37,12 +37,11 @@ pub(super) fn check<'tcx>(\n             cx,\n             IS_DIGIT_ASCII_RADIX,\n             expr.span,\n-            &format!(\"use of `char::is_digit` with literal radix of {}\", num),\n+            &format!(\"use of `char::is_digit` with literal radix of {num}\"),\n             \"try\",\n             format!(\n-                \"{}.{}()\",\n-                snippet_with_applicability(cx, self_arg.span, \"..\", &mut applicability),\n-                replacement\n+                \"{}.{replacement}()\",\n+                snippet_with_applicability(cx, self_arg.span, \"..\", &mut applicability)\n             ),\n             applicability,\n         );"}, {"sha": "bde6f92b076ebae374c76d47eab0820c34fd86e4", "filename": "clippy_lints/src/methods/iter_cloned_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -20,8 +20,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, method_name: &str, expr: &hir:\n                 cx,\n                 ITER_CLONED_COLLECT,\n                 to_replace,\n-                &format!(\"called `iter().{}().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n-                more readable\", method_name),\n+                &format!(\"called `iter().{method_name}().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n+                more readable\"),\n                 \"try\",\n                 \".to_vec()\".to_string(),\n                 Applicability::MachineApplicable,"}, {"sha": "bcddc7c786a50d3750163531d0ba6bc15b6802a5", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         cx,\n         ITER_COUNT,\n         expr.span,\n-        &format!(\"called `.{}().count()` on a `{}`\", iter_method, caller_type),\n+        &format!(\"called `.{iter_method}().count()` on a `{caller_type}`\"),\n         \"try\",\n         format!(\n             \"{}.len()\","}, {"sha": "2244ebfb129277036c95e95013d0a39d8f213a60", "filename": "clippy_lints/src/methods/iter_kv_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -54,19 +54,19 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         ITER_KV_MAP,\n                         expr.span,\n-                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        &format!(\"iterating on a map's {replacement_kind}s\"),\n                         \"try\",\n-                        format!(\"{}.{}{}s()\", recv_snippet, into_prefix, replacement_kind),\n+                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s()\"),\n                         applicability,\n                     );\n                 } else {\n                     span_lint_and_sugg(\n                         cx,\n                         ITER_KV_MAP,\n                         expr.span,\n-                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        &format!(\"iterating on a map's {replacement_kind}s\"),\n                         \"try\",\n-                        format!(\"{}.{}{}s().map(|{}| {})\", recv_snippet, into_prefix, replacement_kind, binded_ident,\n+                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{binded_ident}| {})\",\n                             snippet_with_applicability(cx, body_expr.span, \"/* body */\", &mut applicability)),\n                         applicability,\n                     );"}, {"sha": "83c1bf203467a447aca66f9e0f2692d555dd246a", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -37,7 +37,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n                 let suggest = if start_idx == 0 {\n                     format!(\"{}.first()\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability))\n                 } else {\n-                    format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx)\n+                    format!(\"{}.get({start_idx})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability))\n                 };\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "ceee12784cbb789e46785d44a51569c892654229", "filename": "clippy_lints/src/methods/iter_nth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -32,8 +32,8 @@ pub(super) fn check<'tcx>(\n         cx,\n         ITER_NTH,\n         expr.span,\n-        &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n+        &format!(\"called `.iter{mut_str}().nth()` on a {caller_type}\"),\n         None,\n-        &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n+        &format!(\"calling `.get{mut_str}()` is both faster and more readable\"),\n     );\n }"}, {"sha": "3da230e12d7fe017867fe9dee9abaa6c56842811", "filename": "clippy_lints/src/methods/iter_with_drain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span\n             cx,\n             ITER_WITH_DRAIN,\n             span.with_hi(expr.span.hi()),\n-            &format!(\"`drain(..)` used on a `{}`\", ty_name),\n+            &format!(\"`drain(..)` used on a `{ty_name}`\"),\n             \"try this\",\n             \"into_iter()\".to_string(),\n             Applicability::MaybeIncorrect,"}, {"sha": "c5c0ace7729c4bf99f8481e14906ca6680839075", "filename": "clippy_lints/src/methods/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -37,9 +37,7 @@ pub(super) fn check<'tcx>(\n                 \"this pattern reimplements `Option::ok_or`\",\n                 \"replace with\",\n                 format!(\n-                    \"{}.ok_or({})\",\n-                    recv_snippet,\n-                    reindented_err_arg_snippet\n+                    \"{recv_snippet}.ok_or({reindented_err_arg_snippet})\"\n                 ),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "ec694cf6882e5c28a5ad490dee73401fccdb5da7", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -57,11 +57,10 @@ pub fn check(\n         super::MANUAL_SATURATING_ARITHMETIC,\n         expr.span,\n         \"manual saturating arithmetic\",\n-        &format!(\"try using `saturating_{}`\", arith),\n+        &format!(\"try using `saturating_{arith}`\"),\n         format!(\n-            \"{}.saturating_{}({})\",\n+            \"{}.saturating_{arith}({})\",\n             snippet_with_applicability(cx, arith_lhs.span, \"..\", &mut applicability),\n-            arith,\n             snippet_with_applicability(cx, arith_rhs.span, \"..\", &mut applicability),\n         ),\n         applicability,"}, {"sha": "67e504af161cd02fa1f76e55cccad2756dee3537", "filename": "clippy_lints/src/methods/manual_str_repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -91,7 +91,7 @@ pub(super) fn check(\n                 collect_expr.span,\n                 \"manual implementation of `str::repeat` using iterators\",\n                 \"try this\",\n-                format!(\"{}.repeat({})\", val_str, count_snip),\n+                format!(\"{val_str}.repeat({count_snip})\"),\n                 app\n             )\n         }"}, {"sha": "7ce14ec080b15fa42177d583cb2802526a414adf", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -111,11 +111,10 @@ fn lint_explicit_closure(cx: &LateContext<'_>, replace: Span, root: Span, is_cop\n         MAP_CLONE,\n         replace,\n         message,\n-        &format!(\"consider calling the dedicated `{}` method\", sugg_method),\n+        &format!(\"consider calling the dedicated `{sugg_method}` method\"),\n         format!(\n-            \"{}.{}()\",\n+            \"{}.{sugg_method}()\",\n             snippet_with_applicability(cx, root, \"..\", &mut applicability),\n-            sugg_method,\n         ),\n         applicability,\n     );"}, {"sha": "361ffcb5ef3fb2e9f93af8110ad60be7298b4d1c", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -20,12 +20,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, map_\n             cx,\n             MAP_FLATTEN,\n             expr.span.with_lo(map_span.lo()),\n-            &format!(\"called `map(..).flatten()` on `{}`\", caller_ty_name),\n-            &format!(\n-                \"try replacing `map` with `{}` and remove the `.flatten()`\",\n-                method_to_use\n-            ),\n-            format!(\"{}({})\", method_to_use, closure_snippet),\n+            &format!(\"called `map(..).flatten()` on `{caller_ty_name}`\"),\n+            &format!(\"try replacing `map` with `{method_to_use}` and remove the `.flatten()`\"),\n+            format!(\"{method_to_use}({closure_snippet})\"),\n             applicability,\n         );\n     }"}, {"sha": "0f25ef82ed42a642d424f51260e3f49d3db74399", "filename": "clippy_lints/src/methods/map_identity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check(\n                 MAP_IDENTITY,\n                 sugg_span,\n                 \"unnecessary map of the identity function\",\n-                &format!(\"remove the call to `{}`\", name),\n+                &format!(\"remove the call to `{name}`\"),\n                 String::new(),\n                 Applicability::MachineApplicable,\n             )"}, {"sha": "74fdead216b0a5f7c3df156b51c21cf83a1a59ac", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -65,7 +65,7 @@ pub(super) fn check<'tcx>(\n                 expr.span,\n                 msg,\n                 \"try this\",\n-                format!(\"{}.map_or_else({}, {})\", var_snippet, unwrap_snippet, map_snippet),\n+                format!(\"{var_snippet}.map_or_else({unwrap_snippet}, {map_snippet})\"),\n                 Applicability::MachineApplicable,\n             );\n             return true;"}, {"sha": "6fb92d1c663cf6de9ee7a7421656186fad5d7908", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -98,13 +98,12 @@ pub(super) fn check<'tcx>(\n             format!(\".as_ref().map({})\", snippet(cx, map_arg.span, \"..\"))\n         };\n         let method_hint = if is_mut { \"as_deref_mut\" } else { \"as_deref\" };\n-        let hint = format!(\"{}.{}()\", snippet(cx, as_ref_recv.span, \"..\"), method_hint);\n-        let suggestion = format!(\"try using {} instead\", method_hint);\n+        let hint = format!(\"{}.{method_hint}()\", snippet(cx, as_ref_recv.span, \"..\"));\n+        let suggestion = format!(\"try using {method_hint} instead\");\n \n         let msg = format!(\n-            \"called `{0}` on an Option value. This can be done more directly \\\n-            by calling `{1}` instead\",\n-            current_method, hint\n+            \"called `{current_method}` on an Option value. This can be done more directly \\\n+            by calling `{hint}` instead\"\n         );\n         span_lint_and_sugg(\n             cx,"}, {"sha": "76572425346b0f02385da3b0254e393a86813f8d", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -87,7 +87,7 @@ pub(super) fn check<'tcx>(\n                     expr.span,\n                     msg,\n                     \"try using `map` instead\",\n-                    format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n+                    format!(\"{self_snippet}.map({arg_snippet} {func_snippet})\"),\n                     Applicability::MachineApplicable,\n                 );\n             }\n@@ -102,7 +102,7 @@ pub(super) fn check<'tcx>(\n             expr.span,\n             msg,\n             \"try using `and_then` instead\",\n-            format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+            format!(\"{self_snippet}.and_then({func_snippet})\"),\n             Applicability::MachineApplicable,\n         );\n     } else if f_arg_is_some {\n@@ -115,7 +115,7 @@ pub(super) fn check<'tcx>(\n             expr.span,\n             msg,\n             \"try using `ok` instead\",\n-            format!(\"{0}.ok()\", self_snippet),\n+            format!(\"{self_snippet}.ok()\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "30421a6dd5afb458261b436cfc4d23dcce6ba57c", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -65,9 +65,8 @@ pub(super) fn check<'tcx>(\n             \"map_or(<a>, <f>)\"\n         };\n         let msg = &format!(\n-            \"called `map(<f>).unwrap_or({})` on an `Option` value. \\\n-            This can be done more directly by calling `{}` instead\",\n-            arg, suggest\n+            \"called `map(<f>).unwrap_or({arg})` on an `Option` value. \\\n+            This can be done more directly by calling `{suggest}` instead\"\n         );\n \n         span_lint_and_then(cx, MAP_UNWRAP_OR, expr.span, msg, |diag| {\n@@ -82,10 +81,10 @@ pub(super) fn check<'tcx>(\n             ];\n \n             if !unwrap_snippet_none {\n-                suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{}, \", unwrap_snippet)));\n+                suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{unwrap_snippet}, \")));\n             }\n \n-            diag.multipart_suggestion(&format!(\"use `{}` instead\", suggest), suggestion, applicability);\n+            diag.multipart_suggestion(&format!(\"use `{suggest}` instead\"), suggestion, applicability);\n         });\n     }\n }"}, {"sha": "6a35024d0361240596283a3e116b9e5b39eceb8d", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -62,9 +62,9 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     OR_FUN_CALL,\n                     method_span.with_hi(span.hi()),\n-                    &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n+                    &format!(\"use of `{name}` followed by a call to `{path}`\"),\n                     \"try this\",\n-                    format!(\"{}()\", sugg),\n+                    format!(\"{sugg}()\"),\n                     Applicability::MachineApplicable,\n                 );\n \n@@ -131,7 +131,7 @@ pub(super) fn check<'tcx>(\n \n                     if use_lambda {\n                         let l_arg = if fn_has_arguments { \"_\" } else { \"\" };\n-                        format!(\"|{}| {}\", l_arg, snippet).into()\n+                        format!(\"|{l_arg}| {snippet}\").into()\n                     } else {\n                         snippet\n                     }\n@@ -141,9 +141,9 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     OR_FUN_CALL,\n                     span_replace_word,\n-                    &format!(\"use of `{}` followed by a function call\", name),\n+                    &format!(\"use of `{name}` followed by a function call\"),\n                     \"try this\",\n-                    format!(\"{}_{}({})\", name, suffix, sugg),\n+                    format!(\"{name}_{suffix}({sugg})\"),\n                     Applicability::HasPlaceholders,\n                 );\n             }"}, {"sha": "324c9c17b5a9a36a7ad6a8fdf82fc16e18fca695", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -30,10 +30,7 @@ pub(super) fn check<'tcx>(\n     let option_check_method = if is_some { \"is_some\" } else { \"is_none\" };\n     // lint if caller of search is an Iterator\n     if is_trait_method(cx, is_some_recv, sym::Iterator) {\n-        let msg = format!(\n-            \"called `{}()` after searching an `Iterator` with `{}`\",\n-            option_check_method, search_method\n-        );\n+        let msg = format!(\"called `{option_check_method}()` after searching an `Iterator` with `{search_method}`\");\n         let search_snippet = snippet(cx, search_arg.span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n@@ -86,8 +83,7 @@ pub(super) fn check<'tcx>(\n                     &msg,\n                     \"use `!_.any()` instead\",\n                     format!(\n-                        \"!{}.any({})\",\n-                        iter,\n+                        \"!{iter}.any({})\",\n                         any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                     ),\n                     applicability,\n@@ -119,7 +115,7 @@ pub(super) fn check<'tcx>(\n             if is_string_or_str_slice(search_recv);\n             if is_string_or_str_slice(search_arg);\n             then {\n-                let msg = format!(\"called `{}()` after calling `find()` on a string\", option_check_method);\n+                let msg = format!(\"called `{option_check_method}()` after calling `find()` on a string\");\n                 match option_check_method {\n                     \"is_some\" => {\n                         let mut applicability = Applicability::MachineApplicable;\n@@ -130,7 +126,7 @@ pub(super) fn check<'tcx>(\n                             method_span.with_hi(expr.span.hi()),\n                             &msg,\n                             \"use `contains()` instead\",\n-                            format!(\"contains({})\", find_arg),\n+                            format!(\"contains({find_arg})\"),\n                             applicability,\n                         );\n                     },\n@@ -144,7 +140,7 @@ pub(super) fn check<'tcx>(\n                             expr.span,\n                             &msg,\n                             \"use `!_.contains()` instead\",\n-                            format!(\"!{}.contains({})\", string, find_arg),\n+                            format!(\"!{string}.contains({find_arg})\"),\n                             applicability,\n                         );\n                     },"}, {"sha": "44a7ad394fa0c45b4e7b1ad4b96a1f2e5b5206b2", "filename": "clippy_lints/src/methods/single_char_insert_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, receiver: &hir::\n         let base_string_snippet =\n             snippet_with_applicability(cx, receiver.span.source_callsite(), \"_\", &mut applicability);\n         let pos_arg = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n-        let sugg = format!(\"{}.insert({}, {})\", base_string_snippet, pos_arg, extension_string);\n+        let sugg = format!(\"{base_string_snippet}.insert({pos_arg}, {extension_string})\");\n         span_lint_and_sugg(\n             cx,\n             SINGLE_CHAR_ADD_STR,"}, {"sha": "0698bd6a0c5237b0942877943b57803eeb98885c", "filename": "clippy_lints/src/methods/single_char_push_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, receiver: &hir::\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[0], &mut applicability) {\n         let base_string_snippet =\n             snippet_with_applicability(cx, receiver.span.source_callsite(), \"..\", &mut applicability);\n-        let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n+        let sugg = format!(\"{base_string_snippet}.push({extension_string})\");\n         span_lint_and_sugg(\n             cx,\n             SINGLE_CHAR_ADD_STR,"}, {"sha": "09c8ca4cbe44ccfd7358540ee07a50a7cd602998", "filename": "clippy_lints/src/methods/stable_sort_primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -17,11 +17,11 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx\n             cx,\n             STABLE_SORT_PRIMITIVE,\n             e.span,\n-            &format!(\"used `sort` on primitive type `{}`\", slice_type),\n+            &format!(\"used `sort` on primitive type `{slice_type}`\"),\n             |diag| {\n                 let mut app = Applicability::MachineApplicable;\n                 let recv_snip = snippet_with_context(cx, recv.span, e.span.ctxt(), \"..\", &mut app).0;\n-                diag.span_suggestion(e.span, \"try\", format!(\"{}.sort_unstable()\", recv_snip), app);\n+                diag.span_suggestion(e.span, \"try\", format!(\"{recv_snip}.sort_unstable()\"), app);\n                 diag.note(\n                     \"an unstable sort typically performs faster without any observable difference for this data type\",\n                 );"}, {"sha": "6974260f70dbd4f4da082253a3ed0e16fbaeb1e0", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -34,9 +34,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             \"calling `.extend(_.chars())`\",\n             \"try this\",\n             format!(\n-                \"{}.push_str({}{})\",\n+                \"{}.push_str({ref_str}{})\",\n                 snippet_with_applicability(cx, recv.span, \"..\", &mut applicability),\n-                ref_str,\n                 snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n             ),\n             applicability,"}, {"sha": "219a9edd65768eeb3124f3c174375e5fce335058", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -24,10 +24,10 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n             }\n \n             let (msg, note_msg) = if count == 0 {\n-                (format!(\"`{}` called with `0` splits\", method_name),\n+                (format!(\"`{method_name}` called with `0` splits\"),\n                 \"the resulting iterator will always return `None`\")\n             } else {\n-                (format!(\"`{}` called with `1` split\", method_name),\n+                (format!(\"`{method_name}` called with `1` split\"),\n                 if self_ty.is_slice() {\n                     \"the resulting iterator will always return the entire slice followed by `None`\"\n                 } else {"}, {"sha": "15c1c618c5137e76069e3b0e3b02008b1e5bb8fa", "filename": "clippy_lints/src/methods/suspicious_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -24,9 +24,9 @@ pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) -\n                 cx,\n                 SUSPICIOUS_TO_OWNED,\n                 expr.span,\n-                &format!(\"this `to_owned` call clones the {0} itself and does not cause the {0} contents to become owned\", input_type),\n+                &format!(\"this `to_owned` call clones the {input_type} itself and does not cause the {input_type} contents to become owned\"),\n                 \"consider using, depending on intent\",\n-                format!(\"{0}.clone()` or `{0}.into_owned()\", recv_snip),\n+                format!(\"{recv_snip}.clone()` or `{recv_snip}.into_owned()\"),\n                 app,\n             );\n             return true;"}, {"sha": "ee16982d52487577f7b5a2f9ac20e9151ab791f3", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -54,7 +54,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n                 UNNECESSARY_FIND_MAP\n             },\n             expr.span,\n-            &format!(\"this `.{}` can be written more simply using `.{}`\", name, sugg),\n+            &format!(\"this `.{name}` can be written more simply using `.{sugg}`\"),\n         );\n     }\n }"}, {"sha": "aa87dead38f01ce4a4f97732c507fee973d18917", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -49,15 +49,12 @@ pub(super) fn check(\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if replacement_has_args {\n                     format!(\n-                        \"{replacement}(|{s}| {r})\",\n-                        replacement = replacement_method_name,\n-                        s = second_arg_ident,\n+                        \"{replacement_method_name}(|{second_arg_ident}| {r})\",\n                         r = snippet_with_applicability(cx, right_expr.span, \"EXPR\", &mut applicability),\n                     )\n                 } else {\n                     format!(\n-                        \"{replacement}()\",\n-                        replacement = replacement_method_name,\n+                        \"{replacement_method_name}()\",\n                     )\n                 };\n "}, {"sha": "1966a85f7a7356de70229800e36e5eed18905b2b", "filename": "clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -68,7 +68,7 @@ pub fn check_for_loop_iter(\n                 cx,\n                 UNNECESSARY_TO_OWNED,\n                 expr.span,\n-                &format!(\"unnecessary use of `{}`\", method_name),\n+                &format!(\"unnecessary use of `{method_name}`\"),\n                 |diag| {\n                     // If `check_into_iter_call_arg` called `check_for_loop_iter` because a call to\n                     // a `to_owned`-like function was removed, then the next suggestion may be"}, {"sha": "ec9859fa298b68df058afab72b7e7786fc5c8ab5", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -58,8 +58,8 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(cx, UNNECESSARY_LAZY_EVALUATIONS, expr.span, msg, |diag| {\n                         diag.span_suggestion(\n                             span,\n-                            &format!(\"use `{}(..)` instead\", simplify_using),\n-                            format!(\"{}({})\", simplify_using, snippet(cx, body_expr.span, \"..\")),\n+                            &format!(\"use `{simplify_using}(..)` instead\"),\n+                            format!(\"{simplify_using}({})\", snippet(cx, body_expr.span, \"..\")),\n                             applicability,\n                         );\n                     });"}, {"sha": "d27831327acf84cd4504a870e2deae2d81647001", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -133,12 +133,11 @@ fn check_addr_of_expr(\n                     cx,\n                     UNNECESSARY_TO_OWNED,\n                     parent.span,\n-                    &format!(\"unnecessary use of `{}`\", method_name),\n+                    &format!(\"unnecessary use of `{method_name}`\"),\n                     \"use\",\n                     format!(\n-                        \"{:&>width$}{}\",\n+                        \"{:&>width$}{receiver_snippet}\",\n                         \"\",\n-                        receiver_snippet,\n                         width = n_target_refs - n_receiver_refs\n                     ),\n                     Applicability::MachineApplicable,\n@@ -155,7 +154,7 @@ fn check_addr_of_expr(\n                             cx,\n                             UNNECESSARY_TO_OWNED,\n                             parent.span,\n-                            &format!(\"unnecessary use of `{}`\", method_name),\n+                            &format!(\"unnecessary use of `{method_name}`\"),\n                             \"use\",\n                             receiver_snippet,\n                             Applicability::MachineApplicable,\n@@ -165,7 +164,7 @@ fn check_addr_of_expr(\n                             cx,\n                             UNNECESSARY_TO_OWNED,\n                             expr.span.with_lo(receiver.span.hi()),\n-                            &format!(\"unnecessary use of `{}`\", method_name),\n+                            &format!(\"unnecessary use of `{method_name}`\"),\n                             \"remove this\",\n                             String::new(),\n                             Applicability::MachineApplicable,\n@@ -182,9 +181,9 @@ fn check_addr_of_expr(\n                         cx,\n                         UNNECESSARY_TO_OWNED,\n                         parent.span,\n-                        &format!(\"unnecessary use of `{}`\", method_name),\n+                        &format!(\"unnecessary use of `{method_name}`\"),\n                         \"use\",\n-                        format!(\"{}.as_ref()\", receiver_snippet),\n+                        format!(\"{receiver_snippet}.as_ref()\"),\n                         Applicability::MachineApplicable,\n                     );\n                     return true;\n@@ -229,9 +228,9 @@ fn check_into_iter_call_arg(\n                 cx,\n                 UNNECESSARY_TO_OWNED,\n                 parent.span,\n-                &format!(\"unnecessary use of `{}`\", method_name),\n+                &format!(\"unnecessary use of `{method_name}`\"),\n                 \"use\",\n-                format!(\"{}.iter().{}()\", receiver_snippet, cloned_or_copied),\n+                format!(\"{receiver_snippet}.iter().{cloned_or_copied}()\"),\n                 Applicability::MaybeIncorrect,\n             );\n             return true;\n@@ -276,9 +275,9 @@ fn check_other_call_arg<'tcx>(\n                 cx,\n                 UNNECESSARY_TO_OWNED,\n                 maybe_arg.span,\n-                &format!(\"unnecessary use of `{}`\", method_name),\n+                &format!(\"unnecessary use of `{method_name}`\"),\n                 \"use\",\n-                format!(\"{:&>width$}{}\", \"\", receiver_snippet, width = n_refs),\n+                format!(\"{:&>n_refs$}{receiver_snippet}\", \"\"),\n                 Applicability::MachineApplicable,\n             );\n             return true;"}, {"sha": "0380a82411ae102826ec31e2f9a609ef5889260c", "filename": "clippy_lints/src/methods/useless_asref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str,\n                 cx,\n                 USELESS_ASREF,\n                 expr.span,\n-                &format!(\"this call to `{}` does nothing\", call_name),\n+                &format!(\"this call to `{call_name}` does nothing\"),\n                 \"try this\",\n                 snippet_with_applicability(cx, recvr.span, \"..\", &mut applicability).to_string(),\n                 applicability,"}, {"sha": "1fbf783b8860e1d701f1801cf9ddf272bad3b288", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -61,20 +61,20 @@ impl Convention {\n impl fmt::Display for Convention {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         match *self {\n-            Self::Eq(this) => format!(\"`{}`\", this).fmt(f),\n-            Self::StartsWith(this) => format!(\"`{}*`\", this).fmt(f),\n-            Self::EndsWith(this) => format!(\"`*{}`\", this).fmt(f),\n-            Self::NotEndsWith(this) => format!(\"`~{}`\", this).fmt(f),\n+            Self::Eq(this) => format!(\"`{this}`\").fmt(f),\n+            Self::StartsWith(this) => format!(\"`{this}*`\").fmt(f),\n+            Self::EndsWith(this) => format!(\"`*{this}`\").fmt(f),\n+            Self::NotEndsWith(this) => format!(\"`~{this}`\").fmt(f),\n             Self::IsSelfTypeCopy(is_true) => {\n                 format!(\"`self` type is{} `Copy`\", if is_true { \"\" } else { \" not\" }).fmt(f)\n             },\n             Self::ImplementsTrait(is_true) => {\n                 let (negation, s_suffix) = if is_true { (\"\", \"s\") } else { (\" does not\", \"\") };\n-                format!(\"method{} implement{} a trait\", negation, s_suffix).fmt(f)\n+                format!(\"method{negation} implement{s_suffix} a trait\").fmt(f)\n             },\n             Self::IsTraitItem(is_true) => {\n                 let suffix = if is_true { \" is\" } else { \" is not\" };\n-                format!(\"method{} a trait item\", suffix).fmt(f)\n+                format!(\"method{suffix} a trait item\").fmt(f)\n             },\n         }\n     }\n@@ -138,8 +138,7 @@ pub(super) fn check<'tcx>(\n                 WRONG_SELF_CONVENTION,\n                 first_arg_span,\n                 &format!(\n-                    \"{} usually take {}\",\n-                    suggestion,\n+                    \"{suggestion} usually take {}\",\n                     &self_kinds\n                         .iter()\n                         .map(|k| k.description())"}, {"sha": "381458b91e679e54a8009262b7f677985ee54775", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                     (\"\", sugg_init.addr())\n                 };\n                 let tyopt = if let Some(ty) = local.ty {\n-                    format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"..\"))\n+                    format!(\": &{mutopt}{ty}\", ty=snippet(cx, ty.span, \"..\"))\n                 } else {\n                     String::new()\n                 };\n@@ -195,8 +195,6 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                             format!(\n                                 \"let {name}{tyopt} = {initref};\",\n                                 name=snippet(cx, name.span, \"..\"),\n-                                tyopt=tyopt,\n-                                initref=initref,\n                             ),\n                             Applicability::MachineApplicable,\n                         );\n@@ -222,8 +220,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                             stmt.span,\n                             \"replace it with\",\n                             format!(\n-                                \"if {} {{ {}; }}\",\n-                                sugg,\n+                                \"if {sugg} {{ {}; }}\",\n                                 &snippet(cx, b.span, \"..\"),\n                             ),\n                             Applicability::MachineApplicable, // snippet\n@@ -275,9 +272,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 USED_UNDERSCORE_BINDING,\n                 expr.span,\n                 &format!(\n-                    \"used binding `{}` which is prefixed with an underscore. A leading \\\n-                     underscore signals that a binding will not be used\",\n-                    binding\n+                    \"used binding `{binding}` which is prefixed with an underscore. A leading \\\n+                     underscore signals that a binding will not be used\"\n                 ),\n             );\n         }\n@@ -328,12 +324,12 @@ fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>)\n             };\n \n             let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {\n-                (format!(\"{}()\", sugg_fn), Applicability::MachineApplicable)\n+                (format!(\"{sugg_fn}()\"), Applicability::MachineApplicable)\n             } else if let Some(mut_ty_snip) = snippet_opt(cx, mut_ty.ty.span) {\n-                (format!(\"{}::<{}>()\", sugg_fn, mut_ty_snip), Applicability::MachineApplicable)\n+                (format!(\"{sugg_fn}::<{mut_ty_snip}>()\"), Applicability::MachineApplicable)\n             } else {\n                 // `MaybeIncorrect` as type inference may not work with the suggested code\n-                (format!(\"{}()\", sugg_fn), Applicability::MaybeIncorrect)\n+                (format!(\"{sugg_fn}()\"), Applicability::MaybeIncorrect)\n             };\n             span_lint_and_sugg(cx, ZERO_PTR, span, msg, \"try\", sugg, appl);\n         }"}, {"sha": "62c6ca32d31a9da1012cb2fc51a73d976273050e", "filename": "clippy_lints/src/misc_early/literal_suffix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -18,19 +18,19 @@ pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &s\n                 cx,\n                 SEPARATED_LITERAL_SUFFIX,\n                 lit.span,\n-                &format!(\"{} type suffix should not be separated by an underscore\", sugg_type),\n+                &format!(\"{sugg_type} type suffix should not be separated by an underscore\"),\n                 \"remove the underscore\",\n-                format!(\"{}{}\", &lit_snip[..maybe_last_sep_idx], suffix),\n+                format!(\"{}{suffix}\", &lit_snip[..maybe_last_sep_idx]),\n                 Applicability::MachineApplicable,\n             );\n         } else {\n             span_lint_and_sugg(\n                 cx,\n                 UNSEPARATED_LITERAL_SUFFIX,\n                 lit.span,\n-                &format!(\"{} type suffix should be separated by an underscore\", sugg_type),\n+                &format!(\"{sugg_type} type suffix should be separated by an underscore\"),\n                 \"add an underscore\",\n-                format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n+                format!(\"{}_{suffix}\", &lit_snip[..=maybe_last_sep_idx]),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "c8227ca44505723ea05d174266c2321734d68b3f", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -357,9 +357,8 @@ impl EarlyLintPass for MiscEarlyLints {\n                             DUPLICATE_UNDERSCORE_ARGUMENT,\n                             *correspondence,\n                             &format!(\n-                                \"`{}` already exists, having another argument having almost the same \\\n-                                 name makes code comprehension and documentation more difficult\",\n-                                arg_name\n+                                \"`{arg_name}` already exists, having another argument having almost the same \\\n+                                 name makes code comprehension and documentation more difficult\"\n                             ),\n                         );\n                     }"}, {"sha": "676e5d40bb776c4723a34b5aaecdbba77422f709", "filename": "clippy_lints/src/misc_early/unneeded_field_pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n                 pat.span,\n                 \"all the struct fields are matched to a wildcard pattern, consider using `..`\",\n                 None,\n-                &format!(\"try with `{} {{ .. }}` instead\", type_name),\n+                &format!(\"try with `{type_name} {{ .. }}` instead\"),\n             );\n             return;\n         }\n@@ -63,7 +63,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n                             \"you matched a field with a wildcard pattern, consider using `..` \\\n                              instead\",\n                             None,\n-                            &format!(\"try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n+                            &format!(\"try with `{type_name} {{ {}, .. }}`\", normal[..].join(\", \")),\n                         );\n                     }\n                 }"}, {"sha": "6dd76a6531e496e497cff2f30bf6e0457bfed11c", "filename": "clippy_lints/src/mismatching_type_param_order.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -91,10 +91,9 @@ impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n                 let type_name = segment.ident;\n                 for (i, (impl_param_name, impl_param_span)) in impl_params.iter().enumerate() {\n                     if mismatch_param_name(i, impl_param_name, &type_param_names_hashmap) {\n-                        let msg = format!(\"`{}` has a similarly named generic type parameter `{}` in its declaration, but in a different order\",\n-                                          type_name, impl_param_name);\n-                        let help = format!(\"try `{}`, or a name that does not conflict with `{}`'s generic params\",\n-                                           type_param_names[i], type_name);\n+                        let msg = format!(\"`{type_name}` has a similarly named generic type parameter `{impl_param_name}` in its declaration, but in a different order\");\n+                        let help = format!(\"try `{}`, or a name that does not conflict with `{type_name}`'s generic params\",\n+                                           type_param_names[i]);\n                         span_lint_and_help(\n                             cx,\n                             MISMATCHING_TYPE_PARAM_ORDER,"}, {"sha": "97c8fb17638caaec10b3f09bee502ddb8e84d981", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -104,7 +104,7 @@ impl MissingDoc {\n                 cx,\n                 MISSING_DOCS_IN_PRIVATE_ITEMS,\n                 sp,\n-                &format!(\"missing documentation for {} {}\", article, desc),\n+                &format!(\"missing documentation for {article} {desc}\"),\n             );\n         }\n     }"}, {"sha": "697e6fd24dd11577603ffc750bb20215e8a18d57", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -90,9 +90,7 @@ impl LateLintPass<'_> for ImportRename {\n                     \"this import should be renamed\",\n                     \"try\",\n                     format!(\n-                        \"{} as {}\",\n-                        import,\n-                        name,\n+                        \"{import} as {name}\",\n                     ),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "18c45120091041af56da8d0b222d347dbb705700", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -65,7 +65,7 @@ fn check_missing_inline_attrs(cx: &LateContext<'_>, attrs: &[ast::Attribute], sp\n             cx,\n             MISSING_INLINE_IN_PUBLIC_ITEMS,\n             sp,\n-            &format!(\"missing `#[inline]` for {}\", desc),\n+            &format!(\"missing `#[inline]` for {desc}\"),\n         );\n     }\n }"}, {"sha": "463da11774a042e41f27166b165a805f4efe1c63", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -88,7 +88,7 @@ fn check_arguments<'tcx>(\n                                 cx,\n                                 UNNECESSARY_MUT_PASSED,\n                                 argument.span,\n-                                &format!(\"the {} `{}` doesn't need a mutable reference\", fn_kind, name),\n+                                &format!(\"the {fn_kind} `{name}` doesn't need a mutable reference\"),\n                             );\n                         }\n                     },"}, {"sha": "3ef0c6634598474189ba0b5415d733304b2d2671", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -56,10 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for DebugAssertWithMutCall {\n                     cx,\n                     DEBUG_ASSERT_WITH_MUT_CALL,\n                     span,\n-                    &format!(\n-                        \"do not call a function with mutable arguments inside of `{}!`\",\n-                        macro_name\n-                    ),\n+                    &format!(\"do not call a function with mutable arguments inside of `{macro_name}!`\"),\n                 );\n             }\n         }"}, {"sha": "09cb53331763d04f5188d36089dee85f1e360b77", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -84,9 +84,8 @@ impl<'tcx> LateLintPass<'tcx> for Mutex {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\n-                        \"consider using an `{}` instead of a `Mutex` here; if you just want the locking \\\n-                         behavior and not the internal type, consider using `Mutex<()>`\",\n-                        atomic_name\n+                        \"consider using an `{atomic_name}` instead of a `Mutex` here; if you just want the locking \\\n+                         behavior and not the internal type, consider using `Mutex<()>`\"\n                     );\n                     match *mutex_param.kind() {\n                         ty::Uint(t) if t != ty::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),"}, {"sha": "6f0e755466e5a4524099df8f37f6954fddbd8ab3", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -309,7 +309,7 @@ fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str,\n         expr.span,\n         message,\n         None,\n-        &format!(\"{}\\n{}\", header, snip),\n+        &format!(\"{header}\\n{snip}\"),\n     );\n }\n \n@@ -322,10 +322,7 @@ fn suggestion_snippet_for_continue_inside_if<'a>(cx: &EarlyContext<'_>, data: &'\n \n     let indent_if = indent_of(cx, data.if_expr.span).unwrap_or(0);\n     format!(\n-        \"{indent}if {} {}\\n{indent}{}\",\n-        cond_code,\n-        continue_code,\n-        else_code,\n+        \"{indent}if {cond_code} {continue_code}\\n{indent}{else_code}\",\n         indent = \" \".repeat(indent_if),\n     )\n }\n@@ -349,7 +346,7 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n             let span = cx.sess().source_map().stmt_span(stmt.span, data.loop_block.span);\n             let snip = snippet_block(cx, span, \"..\", None).into_owned();\n             snip.lines()\n-                .map(|line| format!(\"{}{}\", \" \".repeat(indent), line))\n+                .map(|line| format!(\"{}{line}\", \" \".repeat(indent)))\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\")\n         })\n@@ -358,10 +355,7 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n \n     let indent_if = indent_of(cx, data.if_expr.span).unwrap_or(0);\n     format!(\n-        \"{indent_if}if {} {}\\n{indent}// merged code follows:\\n{}\\n{indent_if}}}\",\n-        cond_code,\n-        block_code,\n-        to_annex,\n+        \"{indent_if}if {cond_code} {block_code}\\n{indent}// merged code follows:\\n{to_annex}\\n{indent_if}}}\",\n         indent = \" \".repeat(indent),\n         indent_if = \" \".repeat(indent_if),\n     )"}, {"sha": "cbad53f4450b2ad4737f967e04baef489103287c", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -287,7 +287,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion(\n                         assign.lhs_span,\n-                        &format!(\"declare `{}` here\", binding_name),\n+                        &format!(\"declare `{binding_name}` here\"),\n                         let_snippet,\n                         Applicability::MachineApplicable,\n                     );\n@@ -307,8 +307,8 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{}` here\", binding_name),\n-                        format!(\"{} = \", let_snippet),\n+                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"{let_snippet} = \"),\n                         applicability,\n                     );\n \n@@ -338,8 +338,8 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{}` here\", binding_name),\n-                        format!(\"{} = \", let_snippet),\n+                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"{let_snippet} = \"),\n                         applicability,\n                     );\n "}, {"sha": "d7e6e7de2cc109c211f5afa102b10271ec81d617", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -236,7 +236,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{}` to\", x)),\n+                                                |x| Cow::from(format!(\"change `{x}` to\")),\n                                             )\n                                             .as_ref(),\n                                         suggestion,\n@@ -266,7 +266,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{}` to\", x))\n+                                                |x| Cow::from(format!(\"change `{x}` to\"))\n                                             )\n                                             .as_ref(),\n                                         suggestion,"}, {"sha": "59b6492e112c05453c4dc24cdbf50d2c070d2ef7", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -134,7 +134,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 NEEDLESS_QUESTION_MARK,\n                 expr.span,\n                 \"question mark operator is useless here\",\n-                &format!(\"try removing question mark and `{}`\", sugg_remove),\n+                &format!(\"try removing question mark and `{sugg_remove}`\"),\n                 format!(\"{}\", snippet(cx, inner_expr.span, r#\"\"...\"\"#)),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "fb9a4abd0b4b03e4128c08107a57333b9949c044", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -62,9 +62,9 @@ fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n             let mut applicability = Applicability::MachineApplicable;\n             let snip = snippet_with_applicability(cx, exp.span, \"..\", &mut applicability);\n             let suggestion = if exp.precedence().order() < PREC_PREFIX && !has_enclosing_paren(&snip) {\n-                format!(\"-({})\", snip)\n+                format!(\"-({snip})\")\n             } else {\n-                format!(\"-{}\", snip)\n+                format!(\"-{snip}\")\n             };\n             span_lint_and_sugg(\n                     cx,"}, {"sha": "cfd24e9b2d385a16e5d941b73d28c3126a3c613f", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -136,8 +136,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                     id,\n                                     impl_item.span,\n                                     &format!(\n-                                        \"you should consider adding a `Default` implementation for `{}`\",\n-                                        self_type_snip\n+                                        \"you should consider adding a `Default` implementation for `{self_type_snip}`\"\n                                     ),\n                                     |diag| {\n                                         diag.suggest_prepend_item(\n@@ -161,9 +160,9 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n fn create_new_without_default_suggest_msg(self_type_snip: &str, generics_sugg: &str) -> String {\n     #[rustfmt::skip]\n     format!(\n-\"impl{} Default for {} {{\n+\"impl{generics_sugg} Default for {self_type_snip} {{\n     fn default() -> Self {{\n         Self::new()\n     }}\n-}}\", generics_sugg, self_type_snip)\n+}}\")\n }"}, {"sha": "03fddd207ecb99cbbdb2c5ef159d85eecc2865ca", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -108,10 +108,7 @@ impl<'a, 'tcx> SimilarNamesLocalVisitor<'a, 'tcx> {\n                 self.cx,\n                 MANY_SINGLE_CHAR_NAMES,\n                 span,\n-                &format!(\n-                    \"{} bindings with single-character names in scope\",\n-                    num_single_char_names\n-                ),\n+                &format!(\"{num_single_char_names} bindings with single-character names in scope\"),\n             );\n         }\n     }"}, {"sha": "0ca0befc13515e92f16c59e871215ce4c815ff90", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -107,11 +107,11 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n         if let Some(snip) = snippet_opt(cx, span_call_site);\n         // we must check only invocation sites\n         // https://github.com/rust-lang/rust-clippy/issues/7422\n-        if snip.starts_with(&format!(\"{}!\", name));\n+        if snip.starts_with(&format!(\"{name}!\"));\n         if unnested_or_local();\n         // make formatting consistent\n         let c = snip.replace(' ', \"\");\n-        if !c.starts_with(&format!(\"{}!{}\", name, braces.0));\n+        if !c.starts_with(&format!(\"{name}!{}\", braces.0));\n         if !mac_braces.done.contains(&span_call_site);\n         then {\n             Some((span_call_site, braces, snip))\n@@ -131,9 +131,9 @@ fn emit_help(cx: &EarlyContext<'_>, snip: &str, braces: &(String, String), span:\n             cx,\n             NONSTANDARD_MACRO_BRACES,\n             span,\n-            &format!(\"use of irregular braces for `{}!` macro\", macro_name),\n+            &format!(\"use of irregular braces for `{macro_name}!` macro\"),\n             \"consider writing\",\n-            format!(\"{}!{}{}{}\", macro_name, braces.0, macro_args, braces.1),\n+            format!(\"{macro_name}!{}{macro_args}{}\", braces.0, braces.1),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -266,9 +266,7 @@ impl<'de> Deserialize<'de> for MacroMatcher {\n                         .iter()\n                         .find(|b| b.0 == brace)\n                         .map(|(o, c)| ((*o).to_owned(), (*c).to_owned()))\n-                        .ok_or_else(|| {\n-                            de::Error::custom(&format!(\"expected one of `(`, `{{`, `[` found `{}`\", brace))\n-                        })?,\n+                        .ok_or_else(|| de::Error::custom(&format!(\"expected one of `(`, `{{`, `[` found `{brace}`\")))?,\n                 })\n             }\n         }"}, {"sha": "f380a5065827d04e2730f62b6398cef13c756d09", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -102,7 +102,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n         // construct a replacement escape\n         // the maximum value is \\077, or \\x3f, so u8 is sufficient here\n         if let Ok(n) = u8::from_str_radix(&contents[from + 1..to], 8) {\n-            write!(suggest_1, \"\\\\x{:02x}\", n).unwrap();\n+            write!(suggest_1, \"\\\\x{n:02x}\").unwrap();\n         }\n \n         // append the null byte as \\x00 and the following digits literally"}, {"sha": "d29ca37eaeb809a2c27ec9aadfd9714966d96cba", "filename": "clippy_lints/src/operators/absurd_extreme_comparisons.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -34,13 +34,12 @@ pub(super) fn check<'tcx>(\n         };\n \n         let help = format!(\n-            \"because `{}` is the {} value for this type, {}\",\n+            \"because `{}` is the {} value for this type, {conclusion}\",\n             snippet(cx, culprit.expr.span, \"x\"),\n             match culprit.which {\n                 ExtremeType::Minimum => \"minimum\",\n                 ExtremeType::Maximum => \"maximum\",\n-            },\n-            conclusion\n+            }\n         );\n \n         span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, None, &help);"}, {"sha": "cb5abfb809e2353fb48522d8537d17fee333b76a", "filename": "clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -55,7 +55,7 @@ pub(super) fn check<'tcx>(\n                                 diag.span_suggestion(\n                                     expr.span,\n                                     \"replace it with\",\n-                                    format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                    format!(\"{snip_a} {}= {snip_r}\", op.node.as_str()),\n                                     Applicability::MachineApplicable,\n                                 );\n                             }"}, {"sha": "1369b3e74625cacdb849ad510ff2e930f0de943a", "filename": "clippy_lints/src/operators/bit_mask.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -64,10 +64,7 @@ fn check_bit_mask(\n                             cx,\n                             BAD_BIT_MASK,\n                             span,\n-                            &format!(\n-                                \"incompatible bit mask: `_ & {}` can never be equal to `{}`\",\n-                                mask_value, cmp_value\n-                            ),\n+                            &format!(\"incompatible bit mask: `_ & {mask_value}` can never be equal to `{cmp_value}`\"),\n                         );\n                     }\n                 } else if mask_value == 0 {\n@@ -80,10 +77,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ | {}` can never be equal to `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ | {mask_value}` can never be equal to `{cmp_value}`\"),\n                     );\n                 }\n             },\n@@ -96,10 +90,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ & {}` will always be lower than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ & {mask_value}` will always be lower than `{cmp_value}`\"),\n                     );\n                 } else if mask_value == 0 {\n                     span_lint(cx, BAD_BIT_MASK, span, \"&-masking with zero\");\n@@ -111,10 +102,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ | {}` will never be lower than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ | {mask_value}` will never be lower than `{cmp_value}`\"),\n                     );\n                 } else {\n                     check_ineffective_lt(cx, span, mask_value, cmp_value, \"|\");\n@@ -130,10 +118,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ & {}` will never be higher than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ & {mask_value}` will never be higher than `{cmp_value}`\"),\n                     );\n                 } else if mask_value == 0 {\n                     span_lint(cx, BAD_BIT_MASK, span, \"&-masking with zero\");\n@@ -145,10 +130,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ | {}` will always be higher than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ | {mask_value}` will always be higher than `{cmp_value}`\"),\n                     );\n                 } else {\n                     check_ineffective_gt(cx, span, mask_value, cmp_value, \"|\");\n@@ -167,10 +149,7 @@ fn check_ineffective_lt(cx: &LateContext<'_>, span: Span, m: u128, c: u128, op:\n             cx,\n             INEFFECTIVE_BIT_MASK,\n             span,\n-            &format!(\n-                \"ineffective bit mask: `x {} {}` compared to `{}`, is the same as x compared directly\",\n-                op, m, c\n-            ),\n+            &format!(\"ineffective bit mask: `x {op} {m}` compared to `{c}`, is the same as x compared directly\"),\n         );\n     }\n }\n@@ -181,10 +160,7 @@ fn check_ineffective_gt(cx: &LateContext<'_>, span: Span, m: u128, c: u128, op:\n             cx,\n             INEFFECTIVE_BIT_MASK,\n             span,\n-            &format!(\n-                \"ineffective bit mask: `x {} {}` compared to `{}`, is the same as x compared directly\",\n-                op, m, c\n-            ),\n+            &format!(\"ineffective bit mask: `x {op} {m}` compared to `{c}`, is the same as x compared directly\"),\n         );\n     }\n }"}, {"sha": "c9c777f1bd8d8854e66e19f4c0fa77b17a3bc059", "filename": "clippy_lints/src/operators/cmp_owned.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -99,7 +99,7 @@ fn check_op(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool)\n             let expr_snip;\n             let eq_impl;\n             if with_deref.is_implemented() {\n-                expr_snip = format!(\"*{}\", arg_snip);\n+                expr_snip = format!(\"*{arg_snip}\");\n                 eq_impl = with_deref;\n             } else {\n                 expr_snip = arg_snip.to_string();\n@@ -121,17 +121,15 @@ fn check_op(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool)\n                 };\n                 if eq_impl.ty_eq_other {\n                     hint = format!(\n-                        \"{}{}{}\",\n-                        expr_snip,\n+                        \"{expr_snip}{}{}\",\n                         snippet(cx, cmp_span, \"..\"),\n                         snippet(cx, other.span, \"..\")\n                     );\n                 } else {\n                     hint = format!(\n-                        \"{}{}{}\",\n+                        \"{}{}{expr_snip}\",\n                         snippet(cx, other.span, \"..\"),\n-                        snippet(cx, cmp_span, \"..\"),\n-                        expr_snip\n+                        snippet(cx, cmp_span, \"..\")\n                     );\n                 }\n             }"}, {"sha": "49e662cacb0c374720d1a8d404f5856b48852acf", "filename": "clippy_lints/src/operators/duration_subsec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -31,12 +31,11 @@ pub(crate) fn check<'tcx>(\n             cx,\n             DURATION_SUBSEC,\n             expr.span,\n-            &format!(\"calling `{}()` is more concise than this calculation\", suggested_fn),\n+            &format!(\"calling `{suggested_fn}()` is more concise than this calculation\"),\n             \"try\",\n             format!(\n-                \"{}.{}()\",\n-                snippet_with_applicability(cx, self_arg.span, \"_\", &mut applicability),\n-                suggested_fn\n+                \"{}.{suggested_fn}()\",\n+                snippet_with_applicability(cx, self_arg.span, \"_\", &mut applicability)\n             ),\n             applicability,\n         );"}, {"sha": "67913f7392c0490d05a26213809d04051ed9d5ac", "filename": "clippy_lints/src/operators/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Feq_op.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn check_assert<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n             cx,\n             EQ_OP,\n             lhs.span.to(rhs.span),\n-            &format!(\"identical args used in this `{}!` macro call\", macro_name),\n+            &format!(\"identical args used in this `{macro_name}!` macro call\"),\n         );\n     }\n }"}, {"sha": "ae805147f07a20155444857085a60eb120f604fe", "filename": "clippy_lints/src/operators/misrefactored_assign_op.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -47,18 +47,14 @@ fn lint_misrefactored_assign_op(\n             if let (Some(snip_a), Some(snip_r)) = (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs_other.span)) {\n                 let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n                 let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n-                let long = format!(\"{} = {}\", snip_a, sugg::make_binop(op.into(), a, r));\n+                let long = format!(\"{snip_a} = {}\", sugg::make_binop(op.into(), a, r));\n                 diag.span_suggestion(\n                     expr.span,\n                     &format!(\n-                        \"did you mean `{} = {} {} {}` or `{}`? Consider replacing it with\",\n-                        snip_a,\n-                        snip_a,\n-                        op.as_str(),\n-                        snip_r,\n-                        long\n+                        \"did you mean `{snip_a} = {snip_a} {} {snip_r}` or `{long}`? Consider replacing it with\",\n+                        op.as_str()\n                     ),\n-                    format!(\"{} {}= {}\", snip_a, op.as_str(), snip_r),\n+                    format!(\"{snip_a} {}= {snip_r}\", op.as_str()),\n                     Applicability::MaybeIncorrect,\n                 );\n                 diag.span_suggestion("}, {"sha": "ab5fb1787004e79f8ef198802f90705b608e7ec9", "filename": "clippy_lints/src/operators/needless_bitwise_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, op: BinOpKind, lhs: &Exp\n                 if let Some(lhs_snip) = snippet_opt(cx, lhs.span)\n                     && let Some(rhs_snip) = snippet_opt(cx, rhs.span)\n                 {\n-                    let sugg = format!(\"{} {} {}\", lhs_snip, op_str, rhs_snip);\n+                    let sugg = format!(\"{lhs_snip} {op_str} {rhs_snip}\");\n                     diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n                 }\n             },"}, {"sha": "1229c202f5a0993dbecf0a9e76eff8d25936ea63", "filename": "clippy_lints/src/operators/ptr_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -34,7 +34,7 @@ pub(super) fn check<'tcx>(\n                     expr.span,\n                     LINT_MSG,\n                     \"try\",\n-                    format!(\"std::ptr::eq({}, {})\", left_snip, right_snip),\n+                    format!(\"std::ptr::eq({left_snip}, {right_snip})\"),\n                     Applicability::MachineApplicable,\n                     );\n             }"}, {"sha": "7c9d5320a3a8b0e30f5706fd39447d33c026e40a", "filename": "clippy_lints/src/operators/self_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, lhs: &'tcx\n             cx,\n             SELF_ASSIGNMENT,\n             e.span,\n-            &format!(\"self-assignment of `{}` to `{}`\", rhs, lhs),\n+            &format!(\"self-assignment of `{rhs}` to `{lhs}`\"),\n         );\n     }\n }"}, {"sha": "fbf65e92b322a7c8e92cbe67614d69a1ebe5c2f0", "filename": "clippy_lints/src/operators/verbose_bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check<'tcx>(\n                 diag.span_suggestion(\n                     e.span,\n                     \"try\",\n-                    format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n+                    format!(\"{sugg}.trailing_zeros() >= {}\", n.count_ones()),\n                     Applicability::MaybeIncorrect,\n                 );\n             },"}, {"sha": "256d24500011ff485dff99839fb3a5b38c936b77", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -163,7 +163,7 @@ fn try_get_option_occurence<'tcx>(\n             return Some(OptionOccurence {\n                 option: format_option_in_sugg(cx, cond_expr, as_ref, as_mut),\n                 method_sugg: method_sugg.to_string(),\n-                some_expr: format!(\"|{}{}| {}\", capture_mut, capture_name, Sugg::hir_with_macro_callsite(cx, some_body, \"..\")),\n+                some_expr: format!(\"|{capture_mut}{capture_name}| {}\", Sugg::hir_with_macro_callsite(cx, some_body, \"..\")),\n                 none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir_with_macro_callsite(cx, none_body, \"..\")),\n             });\n         }"}, {"sha": "152e0c5ec9aa48e12a9b3e953a2696025b904a5b", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -209,7 +209,7 @@ impl<'tcx> PassByRefOrValue {\n                             cx,\n                             TRIVIALLY_COPY_PASS_BY_REF,\n                             input.span,\n-                            &format!(\"this argument ({} byte) is passed by reference, but would be more efficient if passed by value (limit: {} byte)\", size, self.ref_min_size),\n+                            &format!(\"this argument ({size} byte) is passed by reference, but would be more efficient if passed by value (limit: {} byte)\", self.ref_min_size),\n                             \"consider passing by value instead\",\n                             value_type,\n                             Applicability::Unspecified,\n@@ -237,7 +237,7 @@ impl<'tcx> PassByRefOrValue {\n                                 cx,\n                                 LARGE_TYPES_PASSED_BY_VALUE,\n                                 input.span,\n-                                &format!(\"this argument ({} byte) is passed by value, but might be more efficient if passed by reference (limit: {} byte)\", size, self.value_max_size),\n+                                &format!(\"this argument ({size} byte) is passed by value, but might be more efficient if passed by reference (limit: {} byte)\", self.value_max_size),\n                                 \"consider passing by reference instead\",\n                                 format!(\"&{}\", snippet(cx, input.span, \"_\")),\n                                 Applicability::MaybeIncorrect,"}, {"sha": "85e0710eb50d897117cb90c023370bde3fab5907", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -463,7 +463,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                                     diag.span_suggestion(\n                                         hir_ty.span,\n                                         \"change this to\",\n-                                        format!(\"&{}{}\", mutability.prefix_str(), ty_name),\n+                                        format!(\"&{}{ty_name}\", mutability.prefix_str()),\n                                         Applicability::Unspecified,\n                                     );\n                                 }"}, {"sha": "b0a5d1a6758285d268071ffbc1e2a586dfa2da45", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for PtrOffsetWithCast {\n             None => return,\n         };\n \n-        let msg = format!(\"use of `{}` with a `usize` casted to an `isize`\", method);\n+        let msg = format!(\"use of `{method}` with a `usize` casted to an `isize`\");\n         if let Some(sugg) = build_suggestion(cx, method, receiver_expr, cast_lhs_expr) {\n             span_lint_and_sugg(\n                 cx,\n@@ -124,7 +124,7 @@ fn build_suggestion<'tcx>(\n ) -> Option<String> {\n     let receiver = snippet_opt(cx, receiver_expr.span)?;\n     let cast_lhs = snippet_opt(cx, cast_lhs_expr.span)?;\n-    Some(format!(\"{}.{}({})\", receiver, method.suggestion(), cast_lhs))\n+    Some(format!(\"{receiver}.{}({cast_lhs})\", method.suggestion()))\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "d53614722aa1b1512bb7a92751cb136ebf9e8330", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -97,12 +97,12 @@ fn check_is_none_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr: &Ex\n                 !matches!(caller.kind, ExprKind::Call(..) | ExprKind::MethodCall(..));\n             let sugg = if let Some(else_inner) = r#else {\n                 if eq_expr_value(cx, caller, peel_blocks(else_inner)) {\n-                    format!(\"Some({}?)\", receiver_str)\n+                    format!(\"Some({receiver_str}?)\")\n                 } else {\n                     return;\n                 }\n             } else {\n-                format!(\"{}{}?;\", receiver_str, if by_ref { \".as_ref()\" } else { \"\" })\n+                format!(\"{receiver_str}{}?;\", if by_ref { \".as_ref()\" } else { \"\" })\n             };\n \n             span_lint_and_sugg(\n@@ -134,8 +134,7 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n             let receiver_str = snippet_with_applicability(cx, let_expr.span, \"..\", &mut applicability);\n             let requires_semi = matches!(get_parent_node(cx.tcx, expr.hir_id), Some(Node::Stmt(_)));\n             let sugg = format!(\n-                \"{}{}?{}\",\n-                receiver_str,\n+                \"{receiver_str}{}?{}\",\n                 if by_ref == ByRef::Yes { \".as_ref()\" } else { \"\" },\n                 if requires_semi { \";\" } else { \"\" }\n             );"}, {"sha": "c6fbb5e805ab2812a6da2d7db80b5ca4ec7d834d", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -243,9 +243,9 @@ fn check_possible_range_contains(\n                 cx,\n                 MANUAL_RANGE_CONTAINS,\n                 span,\n-                &format!(\"manual `{}::contains` implementation\", range_type),\n+                &format!(\"manual `{range_type}::contains` implementation\"),\n                 \"use\",\n-                format!(\"({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n+                format!(\"({lo}{space}{range_op}{hi}).contains(&{name})\"),\n                 applicability,\n             );\n         } else if !combine_and && ord == Some(l.ord) {\n@@ -273,9 +273,9 @@ fn check_possible_range_contains(\n                 cx,\n                 MANUAL_RANGE_CONTAINS,\n                 span,\n-                &format!(\"manual `!{}::contains` implementation\", range_type),\n+                &format!(\"manual `!{range_type}::contains` implementation\"),\n                 \"use\",\n-                format!(\"!({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n+                format!(\"!({lo}{space}{range_op}{hi}).contains(&{name})\"),\n                 applicability,\n             );\n         }\n@@ -372,14 +372,14 @@ fn check_exclusive_range_plus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                             diag.span_suggestion(\n                                 span,\n                                 \"use\",\n-                                format!(\"({}..={})\", start, end),\n+                                format!(\"({start}..={end})\"),\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n                             diag.span_suggestion(\n                                 span,\n                                 \"use\",\n-                                format!(\"{}..={}\", start, end),\n+                                format!(\"{start}..={end}\"),\n                                 Applicability::MachineApplicable, // snippet\n                             );\n                         }\n@@ -408,7 +408,7 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                     diag.span_suggestion(\n                         expr.span,\n                         \"use\",\n-                        format!(\"{}..{}\", start, end),\n+                        format!(\"{start}..{end}\"),\n                         Applicability::MachineApplicable, // snippet\n                     );\n                 },\n@@ -486,7 +486,7 @@ fn check_reversed_empty_range(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                                 expr.span,\n                                 \"consider using the following if you are attempting to iterate over this \\\n                                  range in reverse\",\n-                                format!(\"({}{}{}).rev()\", end_snippet, dots, start_snippet),\n+                                format!(\"({end_snippet}{dots}{start_snippet}).rev()\"),\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }"}, {"sha": "ae80b6f126916b7b5539c4885bfbd3ffa046698c", "filename": "clippy_lints/src/read_zero_byte_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -101,9 +101,8 @@ impl<'tcx> LateLintPass<'tcx> for ReadZeroByteVec {\n                                 next_stmt_span,\n                                 \"reading zero byte data to `Vec`\",\n                                 \"try\",\n-                                format!(\"{}.resize({}, 0); {}\",\n+                                format!(\"{}.resize({len}, 0); {}\",\n                                     ident.as_str(),\n-                                    len,\n                                     snippet(cx, next_stmt_span, \"..\")\n                                 ),\n                                 applicability,"}, {"sha": "9c71a3daeeee831279d201879c348c200a28445b", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n                     cx,\n                     REDUNDANT_PUB_CRATE,\n                     span,\n-                    &format!(\"pub(crate) {} inside private module\", descr),\n+                    &format!(\"pub(crate) {descr} inside private module\"),\n                     |diag| {\n                         diag.span_suggestion(\n                             item.vis_span,"}, {"sha": "245a02ea26e61d35d2fa3842c436fc002556f2a7", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -127,9 +127,9 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n \n                     let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n                     let sugg = if (deref_count != 0 || !reborrow_str.is_empty()) && needs_parens_for_prefix {\n-                        format!(\"({}{}{})\", reborrow_str, \"*\".repeat(deref_count), snip)\n+                        format!(\"({reborrow_str}{}{snip})\", \"*\".repeat(deref_count))\n                     } else {\n-                        format!(\"{}{}{}\", reborrow_str, \"*\".repeat(deref_count), snip)\n+                        format!(\"{reborrow_str}{}{snip}\", \"*\".repeat(deref_count))\n                     };\n \n                     (lint, help_str, sugg)\n@@ -141,9 +141,9 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n                             let sugg = if needs_parens_for_prefix {\n-                                format!(\"(&{}{}*{})\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip)\n+                                format!(\"(&{}{}*{snip})\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count))\n                             } else {\n-                                format!(\"&{}{}*{}\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip)\n+                                format!(\"&{}{}*{snip}\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count))\n                             };\n                             (DEREF_BY_SLICING_LINT, \"dereference the original value instead\", sugg)\n                         } else {"}, {"sha": "60ba62c4a4332532f2b42d46732005c7b3a10174", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -67,7 +67,7 @@ impl RedundantStaticLifetimes {\n                         TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) | TyKind::Tup(..) => {\n                             if lifetime.ident.name == rustc_span::symbol::kw::StaticLifetime {\n                                 let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n-                                let sugg = format!(\"&{}\", snip);\n+                                let sugg = format!(\"&{snip}\");\n                                 span_lint_and_then(\n                                     cx,\n                                     REDUNDANT_STATIC_LIFETIMES,"}, {"sha": "1fda58fa54de1e4ee233794abcec3578fb0edcce", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -172,7 +172,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n                     );\n                 },\n                 Err(e) => {\n-                    span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {}\", e));\n+                    span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {e}\"));\n                 },\n             }\n         }\n@@ -200,7 +200,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n                 );\n             },\n             Err(e) => {\n-                span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {}\", e));\n+                span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {e}\"));\n             },\n         }\n     }"}, {"sha": "dead36e3bea8f124d00e128cebc06372a0ee9bcc", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     |diag| {\n                                         diag.span_note(\n                                             trait_method_span,\n-                                            &format!(\"existing `{}` defined here\", method_name),\n+                                            &format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );\n@@ -151,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                         // iterate on trait_spans?\n                                         diag.span_note(\n                                             trait_spans[0],\n-                                            &format!(\"existing `{}` defined here\", method_name),\n+                                            &format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );"}, {"sha": "66638eed998371394176d11b826b5a9a5c74bcc4", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for SemicolonIfNothingReturned {\n                 }\n \n                 let sugg = sugg::Sugg::hir_with_macro_callsite(cx, expr, \"..\");\n-                let suggestion = format!(\"{0};\", sugg);\n+                let suggestion = format!(\"{sugg};\");\n                 span_lint_and_sugg(\n                     cx,\n                     SEMICOLON_IF_NOTHING_RETURNED,"}, {"sha": "e57ab8cd7a3ac3d22ee0a71dd81fe22f31e00e45", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -174,7 +174,7 @@ impl SlowVectorInit {\n             diag.span_suggestion(\n                 vec_alloc.allocation_expr.span,\n                 \"consider replace allocation with\",\n-                format!(\"vec![0; {}]\", len_expr),\n+                format!(\"vec![0; {len_expr}]\"),\n                 Applicability::Unspecified,\n             );\n         });"}, {"sha": "d356c99c8fc470c1cdd6371e3589acdbc3a8b8c4", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -284,7 +284,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n                     e.span,\n                     \"calling a slice of `as_bytes()` with `from_utf8` should be not necessary\",\n                     \"try\",\n-                    format!(\"Some(&{}[{}])\", snippet_app, snippet(cx, right.span, \"..\")),\n+                    format!(\"Some(&{snippet_app}[{}])\", snippet(cx, right.span, \"..\")),\n                     applicability\n                 )\n             }\n@@ -500,8 +500,8 @@ impl<'tcx> LateLintPass<'tcx> for TrimSplitWhitespace {\n                     cx,\n                     TRIM_SPLIT_WHITESPACE,\n                     trim_span.with_hi(split_ws_span.lo()),\n-                    &format!(\"found call to `str::{}` before `str::split_whitespace`\", trim_fn_name),\n-                    &format!(\"remove `{}()`\", trim_fn_name),\n+                    &format!(\"found call to `str::{trim_fn_name}` before `str::split_whitespace`\"),\n+                    &format!(\"remove `{trim_fn_name}()`\"),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "03324c66e8efcf9796fc9314c6f1ab961ad878c8", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> LateLintPass<'tcx> for StrlenOnCStrings {\n                     span,\n                     \"using `libc::strlen` on a `CString` or `CStr` value\",\n                     \"try this\",\n-                    format!(\"{}.{}().len()\", val_name, method_name),\n+                    format!(\"{val_name}.{method_name}().len()\"),\n                     app,\n                 );\n             }"}, {"sha": "eef9bdc78494002515ec1e615bc726062eaaf1bd", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -326,8 +326,7 @@ fn replace_left_sugg(\n     applicability: &mut Applicability,\n ) -> String {\n     format!(\n-        \"{} {} {}\",\n-        left_suggestion,\n+        \"{left_suggestion} {} {}\",\n         binop.op.to_string(),\n         snippet_with_applicability(cx, binop.right.span, \"..\", applicability),\n     )\n@@ -340,10 +339,9 @@ fn replace_right_sugg(\n     applicability: &mut Applicability,\n ) -> String {\n     format!(\n-        \"{} {} {}\",\n+        \"{} {} {right_suggestion}\",\n         snippet_with_applicability(cx, binop.left.span, \"..\", applicability),\n         binop.op.to_string(),\n-        right_suggestion,\n     )\n }\n \n@@ -676,9 +674,8 @@ fn suggestion_with_swapped_ident(\n         }\n \n         Some(format!(\n-            \"{}{}{}\",\n+            \"{}{new_ident}{}\",\n             snippet_with_applicability(cx, expr.span.with_hi(current_ident.span.lo()), \"..\", applicability),\n-            new_ident,\n             snippet_with_applicability(cx, expr.span.with_lo(current_ident.span.hi()), \"..\", applicability),\n         ))\n     })"}, {"sha": "f46c21e126552f1681438ac10ae6399a2776a963", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -96,7 +96,7 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n                             cx,\n                             MANUAL_SWAP,\n                             span,\n-                            &format!(\"this looks like you are swapping elements of `{}` manually\", slice),\n+                            &format!(\"this looks like you are swapping elements of `{slice}` manually\"),\n                             \"try\",\n                             format!(\n                                 \"{}.swap({}, {})\",\n@@ -121,16 +121,16 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n         cx,\n         MANUAL_SWAP,\n         span,\n-        &format!(\"this looks like you are swapping `{}` and `{}` manually\", first, second),\n+        &format!(\"this looks like you are swapping `{first}` and `{second}` manually\"),\n         |diag| {\n             diag.span_suggestion(\n                 span,\n                 \"try\",\n-                format!(\"{}::mem::swap({}, {})\", sugg, first.mut_addr(), second.mut_addr()),\n+                format!(\"{sugg}::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()),\n                 applicability,\n             );\n             if !is_xor_based {\n-                diag.note(&format!(\"or maybe you should use `{}::mem::replace`?\", sugg));\n+                diag.note(&format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n             }\n         },\n     );\n@@ -182,7 +182,7 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                 let rhs0 = Sugg::hir_opt(cx, rhs0);\n                 let (what, lhs, rhs) = if let (Some(first), Some(second)) = (lhs0, rhs0) {\n                     (\n-                        format!(\" `{}` and `{}`\", first, second),\n+                        format!(\" `{first}` and `{second}`\"),\n                         first.mut_addr().to_string(),\n                         second.mut_addr().to_string(),\n                     )\n@@ -196,22 +196,19 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                 span_lint_and_then(cx,\n                     ALMOST_SWAPPED,\n                     span,\n-                    &format!(\"this looks like you are trying to swap{}\", what),\n+                    &format!(\"this looks like you are trying to swap{what}\"),\n                     |diag| {\n                         if !what.is_empty() {\n                             diag.span_suggestion(\n                                 span,\n                                 \"try\",\n                                 format!(\n-                                    \"{}::mem::swap({}, {})\",\n-                                    sugg,\n-                                    lhs,\n-                                    rhs,\n+                                    \"{sugg}::mem::swap({lhs}, {rhs})\",\n                                 ),\n                                 Applicability::MaybeIncorrect,\n                             );\n                             diag.note(\n-                                &format!(\"or maybe you should use `{}::mem::replace`?\", sugg)\n+                                &format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n                             );\n                         }\n                     });"}, {"sha": "d085dda3582bee65c259b7827294b0a582e818e5", "filename": "clippy_lints/src/swap_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -58,7 +58,7 @@ impl LateLintPass<'_> for SwapPtrToRef {\n                         let mut app = Applicability::MachineApplicable;\n                         let snip1 = snippet_with_context(cx, arg1_span.unwrap_or(arg1.span), ctxt, \"..\", &mut app).0;\n                         let snip2 = snippet_with_context(cx, arg2_span.unwrap_or(arg2.span), ctxt, \"..\", &mut app).0;\n-                        diag.span_suggestion(e.span, \"use ptr::swap\", format!(\"core::ptr::swap({}, {})\", snip1, snip2), app);\n+                        diag.span_suggestion(e.span, \"use ptr::swap\", format!(\"core::ptr::swap({snip1}, {snip2})\"), app);\n                     }\n                 }\n             );"}, {"sha": "2512500a6be73d1db226109368e558bcd553f9df", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -84,9 +84,9 @@ impl<'tcx> LateLintPass<'tcx> for ToDigitIsSome {\n                         \"use of `.to_digit(..).is_some()`\",\n                         \"try this\",\n                         if is_method_call {\n-                            format!(\"{}.is_digit({})\", char_arg_snip, radix_snip)\n+                            format!(\"{char_arg_snip}.is_digit({radix_snip})\")\n                         } else {\n-                            format!(\"char::is_digit({}, {})\", char_arg_snip, radix_snip)\n+                            format!(\"char::is_digit({char_arg_snip}, {radix_snip})\")\n                         },\n                         applicability,\n                     );"}, {"sha": "bb146441f87f93c0369776571d5691ac50308fcc", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -215,9 +215,8 @@ impl TraitBounds {\n                         .map(|(_, _, span)| snippet_with_applicability(cx, span, \"..\", &mut applicability))\n                         .join(\" + \");\n                     let hint_string = format!(\n-                        \"consider combining the bounds: `{}: {}`\",\n+                        \"consider combining the bounds: `{}: {trait_bounds}`\",\n                         snippet(cx, p.bounded_ty.span, \"_\"),\n-                        trait_bounds,\n                     );\n                     span_lint_and_help(\n                         cx,"}, {"sha": "c4b9d82fc735bb05cbacea7481aee9f8c31bebd6", "filename": "clippy_lints/src/transmute/crosspointer_transmute.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -13,10 +13,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                 cx,\n                 CROSSPOINTER_TRANSMUTE,\n                 e.span,\n-                &format!(\n-                    \"transmute from a type (`{}`) to the type that it points to (`{}`)\",\n-                    from_ty, to_ty\n-                ),\n+                &format!(\"transmute from a type (`{from_ty}`) to the type that it points to (`{to_ty}`)\"),\n             );\n             true\n         },\n@@ -25,10 +22,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                 cx,\n                 CROSSPOINTER_TRANSMUTE,\n                 e.span,\n-                &format!(\n-                    \"transmute from a type (`{}`) to a pointer to that type (`{}`)\",\n-                    from_ty, to_ty\n-                ),\n+                &format!(\"transmute from a type (`{from_ty}`) to a pointer to that type (`{to_ty}`)\"),\n             );\n             true\n         },"}, {"sha": "5ecba512b0fd64e9b0414f6dab5216031c37a989", "filename": "clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_FLOAT_TO_INT,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                 |diag| {\n                     let mut sugg = sugg::Sugg::hir(cx, arg, \"..\");\n \n@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(\n                         if let ExprKind::Lit(lit) = &arg.kind;\n                         if let ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) = lit.node;\n                         then {\n-                            let op = format!(\"{}{}\", sugg, float_ty.name_str()).into();\n+                            let op = format!(\"{sugg}{}\", float_ty.name_str()).into();\n                             match sugg {\n                                 sugg::Sugg::MaybeParen(_) => sugg = sugg::Sugg::MaybeParen(op),\n                                 _ => sugg = sugg::Sugg::NonParen(op)"}, {"sha": "58227c53de2f1c13c1015b3b6d4d5a8707079cee", "filename": "clippy_lints/src/transmute/transmute_int_to_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_INT_TO_BOOL,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `bool`\", from_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `bool`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));"}, {"sha": "7d31c375f8cf2607c9ea00f45800138d07daaf62", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_INT_TO_CHAR,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `char`\", from_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `char`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let arg = if let ty::Int(_) = from_ty.kind() {\n@@ -34,7 +34,7 @@ pub(super) fn check<'tcx>(\n                     diag.span_suggestion(\n                         e.span,\n                         \"consider using\",\n-                        format!(\"std::char::from_u32({}).unwrap()\", arg),\n+                        format!(\"std::char::from_u32({arg}).unwrap()\"),\n                         Applicability::Unspecified,\n                     );\n                 },"}, {"sha": "cc3422edbbf13333c6987f0611064e3d9ee6abb3", "filename": "clippy_lints/src/transmute/transmute_int_to_float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_INT_TO_FLOAT,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let arg = if let ty::Int(int_ty) = from_ty.kind() {\n@@ -36,7 +36,7 @@ pub(super) fn check<'tcx>(\n                     diag.span_suggestion(\n                         e.span,\n                         \"consider using\",\n-                        format!(\"{}::from_bits({})\", to_ty, arg),\n+                        format!(\"{to_ty}::from_bits({arg})\"),\n                         Applicability::Unspecified,\n                     );\n                 },"}, {"sha": "009d5a7c8ae182a7f0559cde03f2262ed62dfeaa", "filename": "clippy_lints/src/transmute/transmute_num_to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -31,13 +31,13 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_NUM_TO_BYTES,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     diag.span_suggestion(\n                         e.span,\n                         \"consider using `to_ne_bytes()`\",\n-                        format!(\"{}.to_ne_bytes()\", arg),\n+                        format!(\"{arg}.to_ne_bytes()\"),\n                         Applicability::Unspecified,\n                     );\n                 },"}, {"sha": "12d0b866e1c9bbcada978b4d065557fea93080d8", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -25,10 +25,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_PTR_TO_REF,\n                 e.span,\n-                &format!(\n-                    \"transmute from a pointer type (`{}`) to a reference type (`{}`)\",\n-                    from_ty, to_ty\n-                ),\n+                &format!(\"transmute from a pointer type (`{from_ty}`) to a reference type (`{to_ty}`)\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let (deref, cast) = if *mutbl == Mutability::Mut {\n@@ -41,26 +38,25 @@ pub(super) fn check<'tcx>(\n                     let sugg = if let Some(ty) = get_explicit_type(path) {\n                         let ty_snip = snippet_with_applicability(cx, ty.span, \"..\", &mut app);\n                         if meets_msrv(msrv, msrvs::POINTER_CAST) {\n-                            format!(\"{}{}.cast::<{}>()\", deref, arg.maybe_par(), ty_snip)\n+                            format!(\"{deref}{}.cast::<{ty_snip}>()\", arg.maybe_par())\n                         } else if from_ptr_ty.has_erased_regions() {\n-                            sugg::make_unop(deref, arg.as_ty(format!(\"{} () as {} {}\", cast, cast, ty_snip)))\n-                                .to_string()\n+                            sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {ty_snip}\"))).to_string()\n                         } else {\n-                            sugg::make_unop(deref, arg.as_ty(format!(\"{} {}\", cast, ty_snip))).to_string()\n+                            sugg::make_unop(deref, arg.as_ty(format!(\"{cast} {ty_snip}\"))).to_string()\n                         }\n                     } else if from_ptr_ty.ty == *to_ref_ty {\n                         if from_ptr_ty.has_erased_regions() {\n                             if meets_msrv(msrv, msrvs::POINTER_CAST) {\n-                                format!(\"{}{}.cast::<{}>()\", deref, arg.maybe_par(), to_ref_ty)\n+                                format!(\"{deref}{}.cast::<{to_ref_ty}>()\", arg.maybe_par())\n                             } else {\n-                                sugg::make_unop(deref, arg.as_ty(format!(\"{} () as {} {}\", cast, cast, to_ref_ty)))\n+                                sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {to_ref_ty}\")))\n                                     .to_string()\n                             }\n                         } else {\n                             sugg::make_unop(deref, arg).to_string()\n                         }\n                     } else {\n-                        sugg::make_unop(deref, arg.as_ty(format!(\"{} {}\", cast, to_ref_ty))).to_string()\n+                        sugg::make_unop(deref, arg.as_ty(format!(\"{cast} {to_ref_ty}\"))).to_string()\n                     };\n \n                     diag.span_suggestion(e.span, \"try\", sugg, app);"}, {"sha": "afb7f2e13269648a14178a7a03253a7b3817732a", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_BYTES_TO_STR,\n                     e.span,\n-                    &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                    &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                     \"consider using\",\n                     if const_context {\n                         format!(\"std::str::from_utf8_unchecked{postfix}({snippet})\")"}, {"sha": "cac620cf8e8cb1ec39a4a8fcefd46ea64afaf268", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -75,10 +75,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n+                    &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n+                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -89,10 +89,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute to `{}` which has an undefined layout\", to_ty_orig),\n+                    &format!(\"transmute to `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n+                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -116,8 +116,7 @@ pub(super) fn check<'tcx>(\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n                     &format!(\n-                        \"transmute from `{}` to `{}`, both of which have an undefined layout\",\n-                        from_ty_orig, to_ty_orig\n+                        \"transmute from `{from_ty_orig}` to `{to_ty_orig}`, both of which have an undefined layout\"\n                     ),\n                     |diag| {\n                         if let Some(same_adt_did) = same_adt_did {\n@@ -127,10 +126,10 @@ pub(super) fn check<'tcx>(\n                             ));\n                         } else {\n                             if from_ty_orig.peel_refs() != from_ty {\n-                                diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n+                                diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                             }\n                             if to_ty_orig.peel_refs() != to_ty {\n-                                diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n+                                diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                             }\n                         }\n                     },\n@@ -145,10 +144,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n+                    &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n+                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -162,10 +161,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute into `{}` which has an undefined layout\", to_ty_orig),\n+                    &format!(\"transmute into `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n+                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );"}, {"sha": "6b444922a7cc755b7907a28a12617dc6eacb2ede", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -21,10 +21,7 @@ pub(super) fn check<'tcx>(\n             cx,\n             TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n             e.span,\n-            &format!(\n-                \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n-                from_ty, to_ty\n-            ),\n+            &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n             |diag| {\n                 if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                     let sugg = arg.as_ty(&to_ty.to_string()).to_string();"}, {"sha": "b1445311b711215f4c50ff0909d64a2c2578006d", "filename": "clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -37,10 +37,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                     cx,\n                     UNSOUND_COLLECTION_TRANSMUTE,\n                     e.span,\n-                    &format!(\n-                        \"transmute from `{}` to `{}` with mismatched layout is unsound\",\n-                        from_ty, to_ty\n-                    ),\n+                    &format!(\"transmute from `{from_ty}` to `{to_ty}` with mismatched layout is unsound\"),\n                 );\n                 true\n             } else {"}, {"sha": "f919bbd5afca3f823c9458c815ae7f8fab5e9fbe", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 USELESS_TRANSMUTE,\n                 e.span,\n-                &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n+                &format!(\"transmute from a type (`{from_ty}`) to itself\"),\n             );\n             true\n         },"}, {"sha": "d1965565b9261a3462a1734d905a56afdd7dc038", "filename": "clippy_lints/src/transmute/wrong_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                 cx,\n                 WRONG_TRANSMUTE,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a pointer\", from_ty),\n+                &format!(\"transmute from a `{from_ty}` to a pointer\"),\n             );\n             true\n         },"}, {"sha": "0a779b378603575fbe1e97b602ea956c743afd3f", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -49,15 +49,15 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                     let inner_snippet = snippet(cx, inner.span, \"..\");\n                     let suggestion = match &inner.kind {\n                         TyKind::TraitObject(bounds, lt_bound, _) if bounds.len() > 1 || !lt_bound.is_elided() => {\n-                            format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            format!(\"&{ltopt}({})\", &inner_snippet)\n                         },\n                         TyKind::Path(qpath)\n                             if get_bounds_if_impl_trait(cx, qpath, inner.hir_id)\n                                 .map_or(false, |bounds| bounds.len() > 1) =>\n                         {\n-                            format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            format!(\"&{ltopt}({})\", &inner_snippet)\n                         },\n-                        _ => format!(\"&{}{}\", ltopt, &inner_snippet),\n+                        _ => format!(\"&{ltopt}{}\", &inner_snippet),\n                     };\n                     span_lint_and_sugg(\n                         cx,"}, {"sha": "08020ce663817e1f2b8a60871d206068740d7474", "filename": "clippy_lints/src/types/box_collection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -16,7 +16,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 _ => \"<..>\",\n             };\n \n-            let box_content = format!(\"{outer}{generic}\", outer = item_type);\n+            let box_content = format!(\"{item_type}{generic}\");\n             span_lint_and_help(\n                 cx,\n                 BOX_COLLECTION,"}, {"sha": "6b9de64e24c93875b41de0b5fdd09de632acdcf1", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 hir_ty.span,\n                 \"usage of `Rc<T>` when T is a buffer type\",\n                 \"try\",\n-                format!(\"Rc<{}>\", alternate),\n+                format!(\"Rc<{alternate}>\"),\n                 Applicability::MachineApplicable,\n             );\n         } else {\n@@ -57,7 +57,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 hir_ty.span,\n                 \"usage of `Arc<T>` when T is a buffer type\",\n                 \"try\",\n-                format!(\"Arc<{}>\", alternate),\n+                format!(\"Arc<{alternate}>\"),\n                 Applicability::MachineApplicable,\n             );\n         } else if let Some(ty) = qpath_generic_tys(qpath).next() {"}, {"sha": "b95f0213e0cdb65ae661b78da976149be6f3bad6", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -27,13 +27,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             cx,\n             REDUNDANT_ALLOCATION,\n             hir_ty.span,\n-            &format!(\"usage of `{}<{}>`\", outer_sym, generic_snippet),\n+            &format!(\"usage of `{outer_sym}<{generic_snippet}>`\"),\n             |diag| {\n-                diag.span_suggestion(hir_ty.span, \"try\", format!(\"{}\", generic_snippet), applicability);\n+                diag.span_suggestion(hir_ty.span, \"try\", format!(\"{generic_snippet}\"), applicability);\n                 diag.note(&format!(\n-                    \"`{generic}` is already a pointer, `{outer}<{generic}>` allocates a pointer on the heap\",\n-                    outer = outer_sym,\n-                    generic = generic_snippet\n+                    \"`{generic_snippet}` is already a pointer, `{outer_sym}<{generic_snippet}>` allocates a pointer on the heap\"\n                 ));\n             },\n         );\n@@ -72,19 +70,16 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             cx,\n             REDUNDANT_ALLOCATION,\n             hir_ty.span,\n-            &format!(\"usage of `{}<{}<{}>>`\", outer_sym, inner_sym, generic_snippet),\n+            &format!(\"usage of `{outer_sym}<{inner_sym}<{generic_snippet}>>`\"),\n             |diag| {\n                 diag.span_suggestion(\n                     hir_ty.span,\n                     \"try\",\n-                    format!(\"{}<{}>\", outer_sym, generic_snippet),\n+                    format!(\"{outer_sym}<{generic_snippet}>\"),\n                     applicability,\n                 );\n                 diag.note(&format!(\n-                    \"`{inner}<{generic}>` is already on the heap, `{outer}<{inner}<{generic}>>` makes an extra allocation\",\n-                    outer = outer_sym,\n-                    inner = inner_sym,\n-                    generic = generic_snippet\n+                    \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n             },\n         );\n@@ -94,19 +89,13 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             cx,\n             REDUNDANT_ALLOCATION,\n             hir_ty.span,\n-            &format!(\"usage of `{}<{}<{}>>`\", outer_sym, inner_sym, generic_snippet),\n+            &format!(\"usage of `{outer_sym}<{inner_sym}<{generic_snippet}>>`\"),\n             |diag| {\n                 diag.note(&format!(\n-                    \"`{inner}<{generic}>` is already on the heap, `{outer}<{inner}<{generic}>>` makes an extra allocation\",\n-                    outer = outer_sym,\n-                    inner = inner_sym,\n-                    generic = generic_snippet\n+                    \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n                 diag.help(&format!(\n-                    \"consider using just `{outer}<{generic}>` or `{inner}<{generic}>`\",\n-                    outer = outer_sym,\n-                    inner = inner_sym,\n-                    generic = generic_snippet\n+                    \"consider using just `{outer_sym}<{generic_snippet}>` or `{inner_sym}<{generic_snippet}>`\"\n                 ));\n             },\n         );"}, {"sha": "57aff5367dd155af70592424eaf95cc1355093d3", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -157,8 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n                                 span,\n                                 &format!(\n                                     \"this closure returns \\\n-                                   the unit type which also implements {}\",\n-                                    trait_name\n+                                   the unit type which also implements {trait_name}\"\n                                 ),\n                             );\n                         },\n@@ -169,8 +168,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n                                 span,\n                                 &format!(\n                                     \"this closure returns \\\n-                                   the unit type which also implements {}\",\n-                                    trait_name\n+                                   the unit type which also implements {trait_name}\"\n                                 ),\n                                 Some(last_semi),\n                                 \"probably caused by this trailing semicolon\","}, {"sha": "f6d3fb00f4ee5220926e4ffe3c261fc1d9a4a42f", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -74,7 +74,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n         cx,\n         UNIT_ARG,\n         expr.span,\n-        &format!(\"passing {}unit value{} to a function\", singular, plural),\n+        &format!(\"passing {singular}unit value{plural} to a function\"),\n         |db| {\n             let mut or = \"\";\n             args_to_recover\n@@ -129,7 +129,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n \n                 if arg_snippets_without_empty_blocks.is_empty() {\n                     db.multipart_suggestion(\n-                        &format!(\"use {}unit literal{} instead\", singular, plural),\n+                        &format!(\"use {singular}unit literal{plural} instead\"),\n                         args_to_recover\n                             .iter()\n                             .map(|arg| (arg.span, \"()\".to_string()))\n@@ -143,8 +143,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                     db.span_suggestion(\n                         expr.span,\n                         &format!(\n-                            \"{}move the expression{} in front of the call and replace {} with the unit literal `()`\",\n-                            or, empty_or_s, it_or_them\n+                            \"{or}move the expression{empty_or_s} in front of the call and replace {it_or_them} with the unit literal `()`\"\n                         ),\n                         sugg,\n                         applicability,"}, {"sha": "226495dcbda34ea2098281eb3ec1bd5a4711e290", "filename": "clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 cx,\n                 UNIT_CMP,\n                 macro_call.span,\n-                &format!(\"`{}` of unit values detected. This will always {}\", macro_name, result),\n+                &format!(\"`{macro_name}` of unit values detected. This will always {result}\"),\n             );\n         }\n         return;\n@@ -40,9 +40,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 UNIT_CMP,\n                 expr.span,\n                 &format!(\n-                    \"{}-comparison of unit values detected. This will always be {}\",\n-                    op.as_str(),\n-                    result\n+                    \"{}-comparison of unit values detected. This will always be {result}\",\n+                    op.as_str()\n                 ),\n             );\n         }"}, {"sha": "bc0dd263d88ab2fdf0234097a2c6894609de7630", "filename": "clippy_lints/src/unnecessary_self_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -57,7 +57,7 @@ impl EarlyLintPass for UnnecessarySelfImports {\n                             format!(\n                                 \"{}{};\",\n                                 last_segment.ident,\n-                                if let UseTreeKind::Simple(Some(alias), ..) = self_tree.kind { format!(\" as {}\", alias) } else { String::new() },\n+                                if let UseTreeKind::Simple(Some(alias), ..) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n                             ),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "83ef3b0fac8741fb6f46cf8f1c2724f15ddba649", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -153,11 +153,8 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                 )\n             } else {\n                 (\n-                    format!(\n-                        \"this function's return value is unnecessarily wrapped by `{}`\",\n-                        return_type_label\n-                    ),\n-                    format!(\"remove `{}` from the return type...\", return_type_label),\n+                    format!(\"this function's return value is unnecessarily wrapped by `{return_type_label}`\"),\n+                    format!(\"remove `{return_type_label}` from the return type...\"),\n                     inner_type.to_string(),\n                     \"...and then change returning expressions\",\n                 )"}, {"sha": "32cd468120141ec5a4c79a5b1dc1c0f946ab906c", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -65,10 +65,7 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>,\n             cx,\n             UNSAFE_REMOVED_FROM_NAME,\n             span,\n-            &format!(\n-                \"removed `unsafe` from the name of `{}` in use as `{}`\",\n-                old_str, new_str\n-            ),\n+            &format!(\"removed `unsafe` from the name of `{old_str}` in use as `{new_str}`\"),\n         );\n     }\n }"}, {"sha": "3164937293b6893e7e1ecaca177505494b3623d1", "filename": "clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_rounding.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -58,8 +58,8 @@ impl EarlyLintPass for UnusedRounding {\n                 cx,\n                 UNUSED_ROUNDING,\n                 expr.span,\n-                &format!(\"used the `{}` method with a whole number float\", method_name),\n-                &format!(\"remove the `{}` method call\", method_name),\n+                &format!(\"used the `{method_name}` method with a whole number float\"),\n+                &format!(\"remove the `{method_name}` method call\"),\n                 float,\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "45e2f55023603fd694b1672f1d712c75a60d01c8", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -257,9 +257,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             expr.hir_id,\n                             expr.span,\n                             &format!(\n-                                \"called `{}` on `{}` after checking its variant with `{}`\",\n+                                \"called `{}` on `{unwrappable_variable_name}` after checking its variant with `{}`\",\n                                 method_name.ident.name,\n-                                unwrappable_variable_name,\n                                 unwrappable.check_name.ident.as_str(),\n                             ),\n                             |diag| {\n@@ -268,9 +267,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                                         unwrappable.check.span.with_lo(unwrappable.if_expr.span.lo()),\n                                         \"try\",\n                                         format!(\n-                                            \"if let {} = {}\",\n-                                            suggested_pattern,\n-                                            unwrappable_variable_name,\n+                                            \"if let {suggested_pattern} = {unwrappable_variable_name}\",\n                                         ),\n                                         // We don't track how the unwrapped value is used inside the\n                                         // block or suggest deleting the unwrap, so we can't offer a"}, {"sha": "378cc427f5a01430dcacf9e05dfa4ffebf80135b", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -93,7 +93,7 @@ fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n             cx,\n             UPPER_CASE_ACRONYMS,\n             span,\n-            &format!(\"name `{}` contains a capitalized acronym\", ident),\n+            &format!(\"name `{ident}` contains a capitalized acronym\"),\n             \"consider making the acronym lowercase, except the initial letter\",\n             corrected,\n             Applicability::MaybeIncorrect,"}, {"sha": "50c5a832430af1fb424a184fd01539ec83be2f75", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            &format!(\"useless conversion to the same type: `{}`\", b),\n+                            &format!(\"useless conversion to the same type: `{b}`\"),\n                             \"consider removing `.into()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -97,7 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            &format!(\"useless conversion to the same type: `{}`\", b),\n+                            &format!(\"useless conversion to the same type: `{b}`\"),\n                             \"consider removing `.into_iter()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -118,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            &format!(\"useless conversion to the same type: `{}`\", b),\n+                            &format!(\"useless conversion to the same type: `{b}`\"),\n                             None,\n                             \"consider removing `.try_into()`\",\n                         );\n@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    &format!(\"useless conversion to the same type: `{}`\", b),\n+                                    &format!(\"useless conversion to the same type: `{b}`\"),\n                                     None,\n                                     &hint,\n                                 );\n@@ -165,7 +165,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    &format!(\"useless conversion to the same type: `{}`\", b),\n+                                    &format!(\"useless conversion to the same type: `{b}`\"),\n                                     &sugg_msg,\n                                     sugg.to_string(),\n                                     Applicability::MachineApplicable, // snippet"}, {"sha": "65576b7203fdc29638b32ee30c50d36a103418e6", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -739,7 +739,7 @@ fn path_to_string(path: &QPath<'_>) -> String {\n                     *s += \", \";\n                     write!(s, \"{:?}\", segment.ident.as_str()).unwrap();\n                 },\n-                other => write!(s, \"/* unimplemented: {:?}*/\", other).unwrap(),\n+                other => write!(s, \"/* unimplemented: {other:?}*/\").unwrap(),\n             },\n             QPath::LangItem(..) => panic!(\"path_to_string: called for lang item qpath\"),\n         }"}, {"sha": "6f5a638be12b9d6b6bbc035f6e98850fce8f4a1b", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -482,16 +482,13 @@ pub fn format_error(error: Box<dyn Error>) -> String {\n                     let field = fields.get(index).copied().unwrap_or_default();\n                     write!(\n                         msg,\n-                        \"{:separator_width$}{:field_width$}\",\n-                        \" \",\n-                        field,\n-                        separator_width = SEPARATOR_WIDTH,\n-                        field_width = column_width\n+                        \"{:SEPARATOR_WIDTH$}{field:column_width$}\",\n+                        \" \"\n                     )\n                     .unwrap();\n                 }\n             }\n-            write!(msg, \"\\n{}\", suffix).unwrap();\n+            write!(msg, \"\\n{suffix}\").unwrap();\n             msg\n         } else {\n             s"}, {"sha": "33138551011cc2de157dfd34eb1c044eb558897b", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -173,7 +173,7 @@ impl LateLintPass<'_> for WildcardImports {\n                 let sugg = if braced_glob {\n                     imports_string\n                 } else {\n-                    format!(\"{}::{}\", import_source_snippet, imports_string)\n+                    format!(\"{import_source_snippet}::{imports_string}\")\n                 };\n \n                 let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res {"}, {"sha": "9b3de35dbd3cded6bc3e2073f7b6d3aedff2cd56", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=e67b2bf732876eeb26e0d2fbc4b6c55e1a9f9317", "patch": "@@ -57,8 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for ZeroDiv {\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     None,\n                     &format!(\n-                        \"consider using `{}::NAN` if you would like a constant representing NaN\",\n-                        float_type,\n+                        \"consider using `{float_type}::NAN` if you would like a constant representing NaN\",\n                     ),\n                 );\n             }"}]}