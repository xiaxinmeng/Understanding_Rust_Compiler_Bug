{"sha": "794561c3917de0f050eae5c9f708e1c295a1e326", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDU2MWMzOTE3ZGUwZjA1MGVhZTVjOWY3MDhlMWMyOTVhMWUzMjY=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-15T13:17:03Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-23T10:39:03Z"}, "message": "BTree: no longer define impossible casts", "tree": {"sha": "c4f8537d5ff154b993e8c93c87791eaccf8766f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4f8537d5ff154b993e8c93c87791eaccf8766f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/794561c3917de0f050eae5c9f708e1c295a1e326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/794561c3917de0f050eae5c9f708e1c295a1e326", "html_url": "https://github.com/rust-lang/rust/commit/794561c3917de0f050eae5c9f708e1c295a1e326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/794561c3917de0f050eae5c9f708e1c295a1e326/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e595db8f12f9ee926256745d757004b850703f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e595db8f12f9ee926256745d757004b850703f", "html_url": "https://github.com/rust-lang/rust/commit/a4e595db8f12f9ee926256745d757004b850703f"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "dc99f33da19aabb2c79c35437e00fbed2bca4068", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/794561c3917de0f050eae5c9f708e1c295a1e326/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794561c3917de0f050eae5c9f708e1c295a1e326/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=794561c3917de0f050eae5c9f708e1c295a1e326", "patch": "@@ -461,7 +461,7 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n     }\n }\n \n-impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n+impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n     /// Unsafely asserts to the compiler the static information that this node is a `Leaf`.\n     unsafe fn cast_to_leaf_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n         debug_assert!(self.height == 0);\n@@ -473,7 +473,9 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(self.height > 0);\n         NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n     }\n+}\n \n+impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Temporarily takes out another, mutable reference to the same node. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n@@ -761,15 +763,17 @@ impl<BorrowType, K, V, NodeType, HandleType>\n     }\n }\n \n-impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n+impl<'a, K, V, Type> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, Type> {\n     /// Unsafely asserts to the compiler the static information that the handle's node is a `Leaf`.\n     pub unsafe fn cast_to_leaf_unchecked(\n         self,\n-    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, HandleType> {\n+    ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, Type> {\n         let node = unsafe { self.node.cast_to_leaf_unchecked() };\n         Handle { node, idx: self.idx, _marker: PhantomData }\n     }\n+}\n \n+impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n     /// Temporarily takes out another, mutable handle on the same location. Beware, as\n     /// this method is very dangerous, doubly so since it may not immediately appear\n     /// dangerous.\n@@ -1519,15 +1523,13 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marke\n     }\n }\n \n-impl<BorrowType, K, V, HandleType>\n-    Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, HandleType>\n-{\n+impl<BorrowType, K, V, Type> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, Type> {\n     /// Checks whether the underlying node is an `Internal` node or a `Leaf` node.\n     pub fn force(\n         self,\n     ) -> ForceResult<\n-        Handle<NodeRef<BorrowType, K, V, marker::Leaf>, HandleType>,\n-        Handle<NodeRef<BorrowType, K, V, marker::Internal>, HandleType>,\n+        Handle<NodeRef<BorrowType, K, V, marker::Leaf>, Type>,\n+        Handle<NodeRef<BorrowType, K, V, marker::Internal>, Type>,\n     > {\n         match self.node.force() {\n             ForceResult::Leaf(node) => {"}]}