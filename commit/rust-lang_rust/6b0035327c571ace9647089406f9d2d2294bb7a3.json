{"sha": "6b0035327c571ace9647089406f9d2d2294bb7a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMDAzNTMyN2M1NzFhY2U5NjQ3MDg5NDA2ZjlkMmQyMjk0YmI3YTM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-07-05T20:16:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-05T20:16:10Z"}, "message": "Merge pull request #1746 from topecongiro/struct-tuple\n\nRFC: Use block indent style for struct tuple", "tree": {"sha": "28e992b99c70dcc0f2d7e8508c72633d782b05cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e992b99c70dcc0f2d7e8508c72633d782b05cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b0035327c571ace9647089406f9d2d2294bb7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0035327c571ace9647089406f9d2d2294bb7a3", "html_url": "https://github.com/rust-lang/rust/commit/6b0035327c571ace9647089406f9d2d2294bb7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b0035327c571ace9647089406f9d2d2294bb7a3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818ff7a60241c6cbc808eb7c12a5742df03583c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/818ff7a60241c6cbc808eb7c12a5742df03583c9", "html_url": "https://github.com/rust-lang/rust/commit/818ff7a60241c6cbc808eb7c12a5742df03583c9"}, {"sha": "6a7f866cfececbdb1aeea9d654e42aecfc8e4bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7f866cfececbdb1aeea9d654e42aecfc8e4bca", "html_url": "https://github.com/rust-lang/rust/commit/6a7f866cfececbdb1aeea9d654e42aecfc8e4bca"}], "stats": {"total": 370, "additions": 195, "deletions": 175}, "files": [{"sha": "1696577f023a13872a721ba4e6238379f8677f23", "filename": "src/expr.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -16,12 +16,12 @@ use {Indent, Shape, Spanned};\n use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n-            DefinitiveListTactic, definitive_tactic, ListItem, format_item_list, struct_lit_shape,\n+            DefinitiveListTactic, definitive_tactic, ListItem, struct_lit_shape,\n             struct_lit_tactic, shape_for_tactic, struct_lit_formatting};\n use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr,\n-            colon_spaces, contains_skip, mk_sp, last_line_extendable};\n+            colon_spaces, contains_skip, mk_sp, last_line_extendable, paren_overhead};\n use visitor::FmtVisitor;\n use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle, Style};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n@@ -2217,7 +2217,7 @@ where\n             context.config.trailing_comma()\n         },\n         shape: shape,\n-        ends_with_newline: false,\n+        ends_with_newline: context.use_block_indent() && tactic == DefinitiveListTactic::Vertical,\n         config: context.config,\n     };\n \n@@ -2436,14 +2436,6 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n     }\n }\n \n-fn paren_overhead(context: &RewriteContext) -> usize {\n-    if context.config.spaces_within_parens() {\n-        4\n-    } else {\n-        2\n-    }\n-}\n-\n pub fn wrap_args_with_parens(\n     context: &RewriteContext,\n     args_str: &str,\n@@ -2813,7 +2805,21 @@ where\n         list_lo,\n         span.hi - BytePos(1),\n     );\n-    let list_str = try_opt!(format_item_list(items, nested_shape, context.config));\n+    let item_vec: Vec<_> = items.collect();\n+    let tactic = definitive_tactic(\n+        &item_vec,\n+        ListTactic::HorizontalVertical,\n+        nested_shape.width,\n+    );\n+    let fmt = ListFormatting {\n+        tactic: tactic,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        shape: shape,\n+        ends_with_newline: false,\n+        config: context.config,\n+    };\n+    let list_str = try_opt!(write_list(&item_vec, &fmt));\n \n     if context.config.spaces_within_parens() && list_str.len() > 0 {\n         Some(format!(\"( {} )\", list_str))\n@@ -3023,3 +3029,13 @@ impl<'a> ToExpr for TuplePatField<'a> {\n         can_be_overflowed_pat(context, self, len)\n     }\n }\n+\n+impl<'a> ToExpr for ast::StructField {\n+    fn to_expr(&self) -> Option<&ast::Expr> {\n+        None\n+    }\n+\n+    fn can_be_overflowed(&self, _: &RewriteContext, _: usize) -> bool {\n+        false\n+    }\n+}"}, {"sha": "7df4dbb739943b41c9747b10f2056c7a25214d0a", "filename": "src/file_lines.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -167,7 +167,9 @@ impl FileLines {\n }\n \n /// FileLines files iterator.\n-pub struct Files<'a>(Option<::std::collections::hash_map::Keys<'a, String, Vec<Range>>>);\n+pub struct Files<'a>(\n+    Option<::std::collections::hash_map::Keys<'a, String, Vec<Range>>>,\n+);\n \n impl<'a> iter::Iterator for Files<'a> {\n     type Item = &'a String;"}, {"sha": "a70d72e7b2666dae66a415ecf5e522ea6aa441fb", "filename": "src/items.rs", "status": "modified", "additions": 67, "deletions": 91, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -15,9 +15,10 @@ use codemap::SpanUtils;\n use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n             last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n             trimmed_last_line_width, colon_spaces, mk_sp};\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, list_helper,\n+use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, ListTactic, definitive_tactic};\n-use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, ExprType};\n+use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n+           rewrite_call_inner, ExprType};\n use comment::{FindUncommented, contains_comment, rewrite_comment, recover_comment_removed};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n@@ -392,7 +393,8 @@ impl<'a> FmtVisitor<'a> {\n         generics: &ast::Generics,\n         span: Span,\n     ) {\n-        self.buffer.push_str(&format_header(\"enum \", ident, vis));\n+        let enum_header = format_header(\"enum \", ident, vis);\n+        self.buffer.push_str(&enum_header);\n \n         let enum_snippet = self.snippet(span);\n         let brace_pos = enum_snippet.find_uncommented(\"{\").unwrap();\n@@ -406,6 +408,7 @@ impl<'a> FmtVisitor<'a> {\n             enum_def.variants.is_empty(),\n             self.block_indent,\n             mk_sp(span.lo, body_start),\n+            last_line_width(&enum_header),\n         ).unwrap();\n         self.buffer.push_str(&generics_str);\n \n@@ -1071,19 +1074,38 @@ fn format_struct_struct(\n                 fields.is_empty(),\n                 offset,\n                 mk_sp(span.lo, body_lo),\n+                last_line_width(&result),\n             ))\n         }\n         None => {\n-            if context.config.item_brace_style() == BraceStyle::AlwaysNextLine &&\n-                !fields.is_empty()\n+            // 3 = ` {}`, 2 = ` {`.\n+            let overhead = if fields.is_empty() { 3 } else { 2 };\n+            if (context.config.item_brace_style() == BraceStyle::AlwaysNextLine &&\n+                    !fields.is_empty()) ||\n+                context\n+                    .config\n+                    .max_width()\n+                    .checked_sub(result.len())\n+                    .unwrap_or(0) < overhead\n             {\n                 format!(\"\\n{}{{\", offset.block_only().to_string(context.config))\n             } else {\n                 \" {\".to_owned()\n             }\n         }\n     };\n-    result.push_str(&generics_str);\n+    // 1 = `}`\n+    let overhead = if fields.is_empty() { 1 } else { 0 };\n+    let max_len = context.config.max_width() - offset.width();\n+    if !generics_str.contains('\\n') && result.len() + generics_str.len() + overhead > max_len {\n+        result.push('\\n');\n+        result.push_str(&offset\n+            .block_indent(context.config)\n+            .to_string(context.config));\n+        result.push_str(&generics_str.trim_left());\n+    } else {\n+        result.push_str(&generics_str);\n+    }\n \n     if fields.is_empty() {\n         let snippet = context.snippet(mk_sp(body_lo, span.hi - BytePos(1)));\n@@ -1147,17 +1169,13 @@ fn format_tuple_struct(\n \n     let where_clause_str = match generics {\n         Some(generics) => {\n-            let shape = Shape::indented(offset + last_line_width(&header_str), context.config);\n+            let budget = context.budget(last_line_width(&header_str));\n+            let shape = Shape::legacy(budget, offset);\n             let g_span = mk_sp(span.lo, body_lo);\n             let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n             result.push_str(&generics_str);\n \n-            let where_budget = try_opt!(\n-                context\n-                    .config\n-                    .max_width()\n-                    .checked_sub(last_line_width(&result))\n-            );\n+            let where_budget = context.budget(last_line_width(&result));\n             try_opt!(rewrite_where_clause(\n                 context,\n                 &generics.where_clause,\n@@ -1174,6 +1192,18 @@ fn format_tuple_struct(\n     };\n \n     if fields.is_empty() {\n+        // 3 = `();`\n+        let used_width = if result.contains('\\n') {\n+            last_line_width(&result) + 3\n+        } else {\n+            offset.width() + result.len() + 3\n+        };\n+        if used_width > context.config.max_width() {\n+            result.push('\\n');\n+            result.push_str(&offset\n+                .block_indent(context.config)\n+                .to_string(context.config))\n+        }\n         result.push('(');\n         let snippet = context.snippet(mk_sp(body_lo, context.codemap.span_before(span, \")\")));\n         if snippet.is_empty() {\n@@ -1187,82 +1217,19 @@ fn format_tuple_struct(\n         }\n         result.push(')');\n     } else {\n-        let (tactic, item_indent) = match context.config.fn_args_layout() {\n-            IndentStyle::Visual => {\n-                // 1 = `(`\n-                (\n-                    ListTactic::HorizontalVertical,\n-                    offset.block_only() + result.len() + 1,\n-                )\n-            }\n-            IndentStyle::Block => {\n-                (\n-                    ListTactic::HorizontalVertical,\n-                    offset.block_only().block_indent(&context.config),\n-                )\n-            }\n-        };\n         // 3 = `();`\n-        let item_budget = try_opt!(\n-            context\n-                .config\n-                .max_width()\n-                .checked_sub(item_indent.width() + 3)\n-        );\n-\n-        let items = itemize_list(\n-            context.codemap,\n-            fields.iter(),\n-            \")\",\n-            |field| {\n-                // Include attributes and doc comments, if present\n-                if !field.attrs.is_empty() {\n-                    field.attrs[0].span.lo\n-                } else {\n-                    field.span.lo\n-                }\n-            },\n-            |field| field.ty.span.hi,\n-            |field| {\n-                rewrite_struct_field(context, field, Shape::legacy(item_budget, item_indent), 0)\n-            },\n-            context.codemap.span_after(span, \"(\"),\n-            span.hi,\n-        );\n-        let body_budget = try_opt!(\n-            context\n-                .config\n-                .max_width()\n-                .checked_sub(offset.block_only().width() + result.len() + 3)\n+        let body = try_opt!(\n+            rewrite_call_inner(\n+                context,\n+                \"\",\n+                &fields.iter().map(|field| field).collect::<Vec<_>>()[..],\n+                span,\n+                Shape::legacy(context.budget(last_line_width(&result) + 3), offset),\n+                context.config.fn_call_width(),\n+                false,\n+            ).ok()\n         );\n-        let body = try_opt!(list_helper(\n-            items,\n-            // TODO budget is wrong in block case\n-            Shape::legacy(body_budget, item_indent),\n-            context.config,\n-            tactic,\n-        ));\n-\n-        if context.config.fn_args_layout() == IndentStyle::Visual || !body.contains('\\n') {\n-            result.push('(');\n-            if context.config.spaces_within_parens() && body.len() > 0 {\n-                result.push(' ');\n-            }\n-\n-            result.push_str(&body);\n-\n-            if context.config.spaces_within_parens() && body.len() > 0 {\n-                result.push(' ');\n-            }\n-            result.push(')');\n-        } else {\n-            result.push_str(\"(\\n\");\n-            result.push_str(&item_indent.to_string(&context.config));\n-            result.push_str(&body);\n-            result.push('\\n');\n-            result.push_str(&offset.block_only().to_string(&context.config));\n-            result.push(')');\n-        }\n+        result.push_str(&body);\n     }\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n@@ -1452,6 +1419,11 @@ fn rewrite_struct_field_type(\n         .map(|ty| format!(\"{}{}\", spacing, ty))\n }\n \n+impl Rewrite for ast::StructField {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        rewrite_struct_field(context, self, shape, 0)\n+    }\n+}\n \n pub fn rewrite_struct_field(\n     context: &RewriteContext,\n@@ -2384,7 +2356,7 @@ fn rewrite_generics(\n     span: Span,\n ) -> Option<String> {\n     let g_shape = try_opt!(generics_shape_from_config(context.config, shape, 0));\n-    let one_line_width = try_opt!(shape.width.checked_sub(2));\n+    let one_line_width = shape.width.checked_sub(2).unwrap_or(0);\n     rewrite_generics_inner(context, generics, g_shape, one_line_width, span).or_else(|| {\n         rewrite_generics_inner(context, generics, g_shape, 0, span)\n     })\n@@ -2459,16 +2431,19 @@ where\n {\n     let item_vec = items.collect::<Vec<_>>();\n \n+    let tactic = definitive_tactic(&item_vec, ListTactic::HorizontalVertical, one_line_budget);\n+    let ends_with_newline = context.config.generics_indent() == IndentStyle::Block &&\n+        tactic == DefinitiveListTactic::Vertical;\n     let fmt = ListFormatting {\n-        tactic: definitive_tactic(&item_vec, ListTactic::HorizontalVertical, one_line_budget),\n+        tactic: tactic,\n         separator: \",\",\n         trailing_separator: if context.config.generics_indent() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             context.config.trailing_comma()\n         },\n         shape: shape,\n-        ends_with_newline: false,\n+        ends_with_newline: ends_with_newline,\n         config: context.config,\n     };\n \n@@ -2697,8 +2672,9 @@ fn format_generics(\n     force_same_line_brace: bool,\n     offset: Indent,\n     span: Span,\n+    used_width: usize,\n ) -> Option<String> {\n-    let shape = Shape::indented(offset, context.config);\n+    let shape = Shape::legacy(context.budget(used_width + offset.width()), offset);\n     let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {"}, {"sha": "5e3d00076f7900f0e39a205eb9aa94afe0e447df", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -14,7 +14,7 @@ use std::iter::Peekable;\n use syntax::codemap::{CodeMap, BytePos};\n \n use {Indent, Shape};\n-use comment::{FindUncommented, rewrite_comment, find_comment_end};\n+use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n use utils::mk_sp;\n@@ -68,31 +68,6 @@ pub struct ListFormatting<'a> {\n     pub config: &'a Config,\n }\n \n-pub fn format_item_list<I>(items: I, shape: Shape, config: &Config) -> Option<String>\n-where\n-    I: Iterator<Item = ListItem>,\n-{\n-    list_helper(items, shape, config, ListTactic::HorizontalVertical)\n-}\n-\n-pub fn list_helper<I>(items: I, shape: Shape, config: &Config, tactic: ListTactic) -> Option<String>\n-where\n-    I: Iterator<Item = ListItem>,\n-{\n-    let item_vec: Vec<_> = items.collect();\n-    let tactic = definitive_tactic(&item_vec, tactic, shape.width);\n-    let fmt = ListFormatting {\n-        tactic: tactic,\n-        separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        shape: shape,\n-        ends_with_newline: false,\n-        config: config,\n-    };\n-\n-    write_list(&item_vec, &fmt)\n-}\n-\n impl AsRef<ListItem> for ListItem {\n     fn as_ref(&self) -> &ListItem {\n         self\n@@ -118,10 +93,13 @@ impl ListItem {\n                 .map_or(false, |s| s.contains('\\n'))\n     }\n \n-    pub fn has_line_pre_comment(&self) -> bool {\n+    pub fn has_comment(&self) -> bool {\n         self.pre_comment\n             .as_ref()\n-            .map_or(false, |comment| comment.starts_with(\"//\"))\n+            .map_or(false, |comment| comment.starts_with(\"//\")) ||\n+            self.post_comment\n+                .as_ref()\n+                .map_or(false, |comment| comment.starts_with(\"//\"))\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n@@ -150,7 +128,7 @@ where\n     let pre_line_comments = items\n         .clone()\n         .into_iter()\n-        .any(|item| item.as_ref().has_line_pre_comment());\n+        .any(|item| item.as_ref().has_comment());\n \n     let limit = match tactic {\n         _ if pre_line_comments => return DefinitiveListTactic::Vertical,"}, {"sha": "6a7167537c97893fb98b0e50af68856270d011d2", "filename": "src/rewrite.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -45,4 +45,8 @@ impl<'a> RewriteContext<'a> {\n     pub fn use_block_indent(&self) -> bool {\n         self.config.fn_call_style() == IndentStyle::Block || self.use_block\n     }\n+\n+    pub fn budget(&self, used_width: usize) -> usize {\n+        self.config.max_width().checked_sub(used_width).unwrap_or(0)\n+    }\n }"}, {"sha": "bc46316d39b8d364436d0e0a66036f5e5328cdf7", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -393,6 +393,15 @@ pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n     }\n }\n \n+#[inline]\n+pub fn paren_overhead(context: &RewriteContext) -> usize {\n+    if context.config.spaces_within_parens() {\n+        4\n+    } else {\n+        2\n+    }\n+}\n+\n #[test]\n fn bin_search_test() {\n     let closure = |i| match i {"}, {"sha": "509bcbf6d64e1280228480d784977b33fe8d9d57", "filename": "tests/target/configs-struct_field_align_threshold-20.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-struct_field_align_threshold-20.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -73,14 +73,19 @@ struct Bar;\n \n struct NewType(Type, OtherType);\n \n-struct NewInt<T: Copy>(pub i32, SomeType /* inline comment */, T /* sup */);\n-\n-struct Qux<'a,\n-           N: Clone + 'a,\n-           E: Clone + 'a,\n-           G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n-           W: Write + Copy>\n-(\n+struct NewInt<T: Copy>(\n+    pub i32,\n+    SomeType, // inline comment\n+    T, // sup\n+);\n+\n+struct Qux<\n+    'a,\n+    N: Clone + 'a,\n+    E: Clone + 'a,\n+    G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n+    W: Write + Copy,\n+>(\n     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Comment\n     BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n     #[AnAttr]\n@@ -94,7 +99,7 @@ struct Tuple(\n     // Comment 1\n     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n     // Comment 2\n-    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n+    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n );\n \n // With a where clause and generics.\n@@ -139,7 +144,10 @@ struct Baz {\n }\n \n // Will this be a one-liner?\n-struct Tuple(A /* Comment */, B);\n+struct Tuple(\n+    A, // Comment\n+    B,\n+);\n \n pub struct State<F: FnMut() -> time::Timespec> {\n     now: F,\n@@ -186,19 +194,27 @@ struct Foo<T>(\n     TTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUUUU,\n     TTTTTTTTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n-struct Foo<T>(TTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT)\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTT,\n+)\n where\n     T: PartialEq;\n-struct Foo<T>(TTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTTTT)\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTTTT,\n+)\n where\n     T: PartialEq;\n struct Foo<T>(\n     TTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUUUU,\n     TTTTTTTTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n )\n where\n     T: PartialEq;\n@@ -208,7 +224,7 @@ struct Foo<T>(\n     // Baz\n     TTTTTTTTTTTTTTTTTTT,\n     // Qux (FIXME #572 - doc comment)\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n \n mod m {\n@@ -223,7 +239,7 @@ mod m {\n struct Foo<T>(\n     TTTTTTTTTTTTTTTTTTT,\n     /// Qux\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n \n struct Issue677 {"}, {"sha": "14b9910687d00c670a8a383540f6f5a94f5081ac", "filename": "tests/target/enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -32,7 +32,7 @@ enum Bar {\n enum LongVariants {\n     First(\n         LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONG, // comment\n-        VARIANT\n+        VARIANT,\n     ),\n     // This is the second variant\n     Second,\n@@ -53,7 +53,7 @@ enum X {\n     CreateWebGLPaintTask(\n         Size2D<i32>,\n         GLContextAttributes,\n-        IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>\n+        IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>,\n     ), // This is a post comment\n }\n \n@@ -120,7 +120,7 @@ fn nested_enum_test() {\n                 usize,\n                 usize,\n                 usize,\n-                usize\n+                usize,\n             ), /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA\n                 * AAAAAAAAAAAAAAAAAAAAAA */\n             Two, /* AAAAAAAAAAAAAAAAAA  AAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n@@ -155,6 +155,6 @@ pub enum CoreResourceMsg {\n         #[serde(deserialize_with = \"::hyper_serde::deserialize\",\n                 serialize_with = \"::hyper_serde::serialize\")]\n         Cookie,\n-        CookieSource\n+        CookieSource,\n     ),\n }"}, {"sha": "1f482075df476087a7adc94b90654aeda97926ba", "filename": "tests/target/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     kaas!(\n         // comments\n         a, // post macro\n-        b /* another */\n+        b // another\n     );\n \n     trailingcomma!(a, b, c,);"}, {"sha": "d8dea8896f2b67eb4924e5edfa428e686f46bfab", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -40,7 +40,7 @@ where\n \n fn baz<\n     'a: 'b, // comment on 'a\n-    T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType, /* comment on T */\n+    T: SomsssssssssssssssssssssssssssssssssssssssssssssssssssssseType, // comment on T\n >(\n     a: A,\n     b: B, // comment on b"}, {"sha": "0d2ba797eb793fc12d79229ce7bf884a0b5d6f98", "filename": "tests/target/paths.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpaths.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -14,7 +14,10 @@ fn main() {\n             supports_clipboard,\n         );\n \n-    Quux::<ParamOne /* Comment 1 */, ParamTwo /* Comment 2 */>::some_func();\n+    Quux::<\n+        ParamOne, // Comment 1\n+        ParamTwo, // Comment 2\n+    >::some_func();\n \n     <*mut JSObject>::relocate(entry);\n "}, {"sha": "e63bc2c47c2b45f31d8d33962001d1b86ac13440", "filename": "tests/target/struct_tuple_visual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fstruct_tuple_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fstruct_tuple_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_tuple_visual.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -10,7 +10,7 @@ fn foo() {\n         // Comment\n         foo(), // Comment\n         // Comment\n-        bar(), /* Comment */\n+        bar(), // Comment\n     );\n \n     Foo(Bar, f());\n@@ -24,7 +24,7 @@ fn foo() {\n \n     Baz(\n         xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n-        zzzzz, /* test */\n+        zzzzz, // test\n     );\n \n     A("}, {"sha": "dcb21bb195b50a8729c7f93c7a3ea4c371dadffc", "filename": "tests/target/structs.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -41,14 +41,19 @@ struct Bar;\n \n struct NewType(Type, OtherType);\n \n-struct NewInt<T: Copy>(pub i32, SomeType /* inline comment */, T /* sup */);\n-\n-struct Qux<'a,\n-           N: Clone + 'a,\n-           E: Clone + 'a,\n-           G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n-           W: Write + Copy>\n-(\n+struct NewInt<T: Copy>(\n+    pub i32,\n+    SomeType, // inline comment\n+    T, // sup\n+);\n+\n+struct Qux<\n+    'a,\n+    N: Clone + 'a,\n+    E: Clone + 'a,\n+    G: Labeller<'a, N, E> + GraphWalk<'a, N, E>,\n+    W: Write + Copy,\n+>(\n     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Comment\n     BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n     #[AnAttr]\n@@ -62,7 +67,7 @@ struct Tuple(\n     // Comment 1\n     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n     // Comment 2\n-    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n+    BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n );\n \n // With a where clause and generics.\n@@ -107,7 +112,10 @@ struct Baz {\n }\n \n // Will this be a one-liner?\n-struct Tuple(A /* Comment */, B);\n+struct Tuple(\n+    A, // Comment\n+    B,\n+);\n \n pub struct State<F: FnMut() -> time::Timespec> {\n     now: F,\n@@ -154,19 +162,27 @@ struct Foo<T>(\n     TTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUUUU,\n     TTTTTTTTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n-struct Foo<T>(TTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTT)\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTT,\n+)\n where\n     T: PartialEq;\n-struct Foo<T>(TTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUUUU, TTTTTTTTTTTTTTTTTTTTT)\n+struct Foo<T>(\n+    TTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUUUU,\n+    TTTTTTTTTTTTTTTTTTTTT,\n+)\n where\n     T: PartialEq;\n struct Foo<T>(\n     TTTTTTTTTTTTTTTTT,\n     UUUUUUUUUUUUUUUUUUUUUUUU,\n     TTTTTTTTTTTTTTTTTTT,\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n )\n where\n     T: PartialEq;\n@@ -176,7 +192,7 @@ struct Foo<T>(\n     // Baz\n     TTTTTTTTTTTTTTTTTTT,\n     // Qux (FIXME #572 - doc comment)\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n \n mod m {\n@@ -191,7 +207,7 @@ mod m {\n struct Foo<T>(\n     TTTTTTTTTTTTTTTTTTT,\n     /// Qux\n-    UUUUUUUUUUUUUUUUUUU\n+    UUUUUUUUUUUUUUUUUUU,\n );\n \n struct Issue677 {"}, {"sha": "93fcc0f2cb1712870e34610ce3d1110a7cee75c4", "filename": "tests/target/trailing_commas.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Ftrailing_commas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0035327c571ace9647089406f9d2d2294bb7a3/tests%2Ftarget%2Ftrailing_commas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrailing_commas.rs?ref=6b0035327c571ace9647089406f9d2d2294bb7a3", "patch": "@@ -48,7 +48,7 @@ struct Pair<\n \n struct TupPair<\n     S, T,\n->(S, T)\n+>(S, T,)\n where\n     T: P,\n     S: P + Q;"}]}