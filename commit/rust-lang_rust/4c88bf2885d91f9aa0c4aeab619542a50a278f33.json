{"sha": "4c88bf2885d91f9aa0c4aeab619542a50a278f33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjODhiZjI4ODVkOTFmOWFhMGM0YWVhYjYxOTU0MmE1MGEyNzhmMzM=", "commit": {"author": {"name": "John Hodge", "email": "tpg@mutabah.net", "date": "2015-10-03T15:42:22Z"}, "committer": {"name": "John Hodge", "email": "tpg@mutabah.net", "date": "2015-10-03T15:42:22Z"}, "message": "Implement original version of RFC#1245", "tree": {"sha": "caf992685a58b865a5b188faf3a5a47942d7fc17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf992685a58b865a5b188faf3a5a47942d7fc17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c88bf2885d91f9aa0c4aeab619542a50a278f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c88bf2885d91f9aa0c4aeab619542a50a278f33", "html_url": "https://github.com/rust-lang/rust/commit/4c88bf2885d91f9aa0c4aeab619542a50a278f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c88bf2885d91f9aa0c4aeab619542a50a278f33/comments", "author": {"login": "thepowersgang", "id": 955596, "node_id": "MDQ6VXNlcjk1NTU5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/955596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thepowersgang", "html_url": "https://github.com/thepowersgang", "followers_url": "https://api.github.com/users/thepowersgang/followers", "following_url": "https://api.github.com/users/thepowersgang/following{/other_user}", "gists_url": "https://api.github.com/users/thepowersgang/gists{/gist_id}", "starred_url": "https://api.github.com/users/thepowersgang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thepowersgang/subscriptions", "organizations_url": "https://api.github.com/users/thepowersgang/orgs", "repos_url": "https://api.github.com/users/thepowersgang/repos", "events_url": "https://api.github.com/users/thepowersgang/events{/privacy}", "received_events_url": "https://api.github.com/users/thepowersgang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thepowersgang", "id": 955596, "node_id": "MDQ6VXNlcjk1NTU5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/955596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thepowersgang", "html_url": "https://github.com/thepowersgang", "followers_url": "https://api.github.com/users/thepowersgang/followers", "following_url": "https://api.github.com/users/thepowersgang/following{/other_user}", "gists_url": "https://api.github.com/users/thepowersgang/gists{/gist_id}", "starred_url": "https://api.github.com/users/thepowersgang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thepowersgang/subscriptions", "organizations_url": "https://api.github.com/users/thepowersgang/orgs", "repos_url": "https://api.github.com/users/thepowersgang/repos", "events_url": "https://api.github.com/users/thepowersgang/events{/privacy}", "received_events_url": "https://api.github.com/users/thepowersgang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0369304feb732f0bc89e19e9f09cb3ec9d94fe9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0369304feb732f0bc89e19e9f09cb3ec9d94fe9a", "html_url": "https://github.com/rust-lang/rust/commit/0369304feb732f0bc89e19e9f09cb3ec9d94fe9a"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "20c0e79f1d8c6a6c6cca1d58a1e2f307d3801a29", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c88bf2885d91f9aa0c4aeab619542a50a278f33/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c88bf2885d91f9aa0c4aeab619542a50a278f33/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4c88bf2885d91f9aa0c4aeab619542a50a278f33", "patch": "@@ -4380,11 +4380,11 @@ impl<'a> Parser<'a> {\n     /// - `extern fn`\n     /// - etc\n     pub fn parse_fn_front_matter(&mut self) -> PResult<(ast::Constness, ast::Unsafety, abi::Abi)> {\n+        let unsafety = try!(self.parse_unsafety());\n         let is_const_fn = try!(self.eat_keyword(keywords::Const));\n         let (constness, unsafety, abi) = if is_const_fn {\n-            (Constness::Const, Unsafety::Normal, abi::Rust)\n+            (Constness::Const, unsafety, abi::Rust)\n         } else {\n-            let unsafety = try!(self.parse_unsafety());\n             let abi = if try!(self.eat_keyword(keywords::Extern)) {\n                 try!(self.parse_opt_abi()).unwrap_or(abi::C)\n             } else {\n@@ -5399,9 +5399,14 @@ impl<'a> Parser<'a> {\n             } else {\n                 abi::Rust\n             };\n+            let constness = if abi == abi::Rust && try!(self.eat_keyword(keywords::Const) ){\n+                Constness::Const\n+            } else {\n+                Constness::NotConst\n+            };\n             try!(self.expect_keyword(keywords::Fn));\n             let (ident, item_, extra_attrs) =\n-                try!(self.parse_item_fn(Unsafety::Unsafe, Constness::NotConst, abi));\n+                try!(self.parse_item_fn(Unsafety::Unsafe, constness, abi));\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "0bbfe4c720a5d302d11fc82273c72fee1868fd6a", "filename": "src/test/compile-fail/unsafe-const-fn.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c88bf2885d91f9aa0c4aeab619542a50a278f33/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c88bf2885d91f9aa0c4aeab619542a50a278f33/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs?ref=4c88bf2885d91f9aa0c4aeab619542a50a278f33", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A quick test of 'unsafe const fn' functionality\n+\n+#![feature(const_fn)]\n+\n+unsafe const fn dummy(v: u32) -> u32 {\n+    !v\n+}\n+\n+const VAL: u32 = dummy(0xFFFF); //~ ERROR E0133\n+\n+fn main() {\n+    assert_eq!(VAL, 0xFFFF0000);\n+}\n+"}, {"sha": "2ba113127b985d912481a0d8987459a8b503c45d", "filename": "src/test/run-pass/unsafe-const-fn.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4c88bf2885d91f9aa0c4aeab619542a50a278f33/src%2Ftest%2Frun-pass%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c88bf2885d91f9aa0c4aeab619542a50a278f33/src%2Ftest%2Frun-pass%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsafe-const-fn.rs?ref=4c88bf2885d91f9aa0c4aeab619542a50a278f33", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A quick test of 'unsafe const fn' functionality\n+\n+#![feature(const_fn)]\n+\n+unsafe const fn dummy(v: u32) -> u32 {\n+    !v\n+}\n+\n+struct Type;\n+impl Type {\n+    unsafe const fn new() -> Type {\n+        Type\n+    }\n+}\n+\n+const VAL: u32 = unsafe { dummy(0xFFFF) };\n+const TYPE_INST: Type = unsafe { Type::new() };\n+\n+fn main() {\n+    assert_eq!(VAL, 0xFFFF0000);\n+}"}]}