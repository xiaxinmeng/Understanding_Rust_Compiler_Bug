{"sha": "77dff93a4baa4164311e14763cfcbb05e410359b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZGZmOTNhNGJhYTQxNjQzMTFlMTQ3NjNjZmNiYjA1ZTQxMDM1OWI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-09T16:32:35Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-10T03:50:06Z"}, "message": "std::vec: Update module doc text\n\nUpdate for a lot of changes (not many free functions left), add examples\nof the important methods `slice` and `push`, and write a short bit about\niteration.", "tree": {"sha": "5c925a1a4237dd08ec04fea77b0f7508d5a21399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c925a1a4237dd08ec04fea77b0f7508d5a21399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77dff93a4baa4164311e14763cfcbb05e410359b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77dff93a4baa4164311e14763cfcbb05e410359b", "html_url": "https://github.com/rust-lang/rust/commit/77dff93a4baa4164311e14763cfcbb05e410359b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77dff93a4baa4164311e14763cfcbb05e410359b/comments", "author": null, "committer": null, "parents": [{"sha": "de9546a3f8c3153983a7b6069a9f2aee28f2e296", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9546a3f8c3153983a7b6069a9f2aee28f2e296", "html_url": "https://github.com/rust-lang/rust/commit/de9546a3f8c3153983a7b6069a9f2aee28f2e296"}], "stats": {"total": 79, "additions": 60, "deletions": 19}, "files": [{"sha": "b55a236566bf41f0a61220c7780e732907670769", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 60, "deletions": 19, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/77dff93a4baa4164311e14763cfcbb05e410359b/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dff93a4baa4164311e14763cfcbb05e410359b/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=77dff93a4baa4164311e14763cfcbb05e410359b", "patch": "@@ -10,8 +10,9 @@\n \n /*!\n \n-The `vec` module contains useful code to help work with vector values. Vectors are Rust's list\n-type. Vectors contain zero or more values of homogeneous types:\n+The `vec` module contains useful code to help work with vector values.\n+Vectors are Rust's list type. Vectors contain zero or more values of\n+homogeneous types:\n \n ~~~ {.rust}\n let int_vector = [1,2,3];\n@@ -27,32 +28,72 @@ represents iteration over a vector.\n \n ## Traits\n \n-A number of traits that allow you to accomplish tasks with vectors, like the\n-`MutableVector` and `ImmutableVector` traits.\n+A number of traits add methods that allow you to accomplish tasks with vectors.\n+\n+Traits defined for the `&[T]` type (a vector slice), have methods that can be\n+called on either owned vectors, denoted `~[T]`, or on vector slices themselves.\n+These traits include `ImmutableVector`, and `MutableVector` for the `&mut [T]`\n+case.\n+\n+An example is the method `.slice(a, b)` that returns an immutable \"view\" into\n+a vector or a vector slice from the index interval `[a, b)`:\n+\n+~~~ {.rust}\n+let numbers = [0, 1, 2];\n+let last_numbers = numbers.slice(1, 3);\n+// last_numbers is now &[1, 2]\n+~~~\n+\n+Traits defined for the `~[T]` type, like `OwnedVector`, can only be called\n+on such vectors. These methods deal with adding elements or otherwise changing\n+the allocation of the vector.\n+\n+An example is the method `.push(element)` that will add an element at the end\n+of the vector:\n+\n+~~~ {.rust}\n+let mut numbers = ~[0, 1, 2];\n+numbers.push(7);\n+// numbers is now ~[0, 1, 2, 7];\n+~~~\n \n ## Implementations of other traits\n \n-Vectors are a very useful type, and so there's tons of implementations of\n-traits found elsewhere. Some notable examples:\n+Vectors are a very useful type, and so there's several implementations of\n+traits from other modules. Some notable examples:\n \n * `Clone`\n-* `Iterator`\n-* `Zero`\n+* `Eq`, `Ord`, `TotalEq`, `TotalOrd` -- vectors can be compared,\n+  if the element type defines the corresponding trait.\n \n-## Function definitions\n+## Iteration\n+\n+The method `iter()` returns an iteration value for a vector or a vector slice.\n+The iterator yields borrowed pointers to the vector's elements, so if the element\n+type of the vector is `int`, the element type of the iterator is `&int`.\n \n-There are a number of different functions that take vectors, here are some\n-broad categories:\n+~~~ {.rust}\n+let numbers = [0, 1, 2];\n+for &x in numbers.iter() {\n+    println!(\"{} is a number!\", x);\n+}\n+~~~\n+\n+* `.rev_iter()` returns an iterator with the same values as `.iter()`,\n+  but going in the reverse order, starting with the back element.\n+* `.mut_iter()` returns an iterator that allows modifying each value.\n+* `.move_iter()` converts an owned vector into an iterator that\n+  moves out a value from the vector each iteration.\n+* Further iterators exist that split, chunk or permute the vector.\n+\n+## Function definitions\n \n-* Modifying a vector, like `append` and `grow`.\n-* Searching in a vector, like `bsearch`.\n-* Iterating over vectors, like `each_permutation`.\n-* Functional transformations on vectors, like `map` and `partition`.\n-* Stack/queue operations, like `push`/`pop` and `shift`/`unshift`.\n-* Cons-y operations, like `head` and `tail`.\n-* Zipper operations, like `zip` and `unzip`.\n+There are a number of free functions that create or take vectors, for example:\n \n-And much, much more.\n+* Creating a vector, like `from_elem` and `from_fn`\n+* Creating a vector with a given size: `with_capacity`\n+* Modifying a vector and returning it, like `append`\n+* Operations on paired elements, like `unzip`.\n \n */\n "}]}