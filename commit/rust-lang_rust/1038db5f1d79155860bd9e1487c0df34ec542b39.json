{"sha": "1038db5f1d79155860bd9e1487c0df34ec542b39", "node_id": "C_kwDOAAsO6NoAKDEwMzhkYjVmMWQ3OTE1NTg2MGJkOWUxNDg3YzBkZjM0ZWM1NDJiMzk", "commit": {"author": {"name": "Waffle Maybe", "email": "waffle.lapkin@gmail.com", "date": "2022-12-21T22:52:52Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-21T23:00:12Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e402f3a8a7f8f9ad79924f6dbb8be3b61652181e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e402f3a8a7f8f9ad79924f6dbb8be3b61652181e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1038db5f1d79155860bd9e1487c0df34ec542b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1038db5f1d79155860bd9e1487c0df34ec542b39", "html_url": "https://github.com/rust-lang/rust/commit/1038db5f1d79155860bd9e1487c0df34ec542b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1038db5f1d79155860bd9e1487c0df34ec542b39/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608dc492ea9adaed2ae0cfee03fd5a6e398032c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/608dc492ea9adaed2ae0cfee03fd5a6e398032c5", "html_url": "https://github.com/rust-lang/rust/commit/608dc492ea9adaed2ae0cfee03fd5a6e398032c5"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "569c2bfb9e6a6e4cf84148049b02ef4ca3f64d0d", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1038db5f1d79155860bd9e1487c0df34ec542b39/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1038db5f1d79155860bd9e1487c0df34ec542b39/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=1038db5f1d79155860bd9e1487c0df34ec542b39", "patch": "@@ -485,8 +485,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     }\n \n     /// Returns `true` if the `node` is inside an `unsafe` context.\n-    pub fn is_inside_unsafe(&self, node: &SyntaxNode) -> bool {\n-        self.imp.is_inside_unsafe(node)\n+    pub fn is_inside_unsafe(&self, expr: &ast::Expr) -> bool {\n+        self.imp.is_inside_unsafe(expr)\n     }\n }\n \n@@ -1471,17 +1471,18 @@ impl<'db> SemanticsImpl<'db> {\n             .unwrap_or(false)\n     }\n \n-    fn is_inside_unsafe(&self, node: &SyntaxNode) -> bool {\n+    fn is_inside_unsafe(&self, expr: &ast::Expr) -> bool {\n         let item_or_variant = |ancestor: SyntaxNode| {\n             if ast::Item::can_cast(ancestor.kind()) {\n                 ast::Item::cast(ancestor).map(Either::Left)\n             } else {\n                 ast::Variant::cast(ancestor).map(Either::Right)\n             }\n         };\n-        let Some(enclosing_item) = node.ancestors().find_map(item_or_variant) else { return false };\n+        let Some(enclosing_item) = expr.syntax().ancestors().find_map(item_or_variant) else { return false };\n \n         let def = match &enclosing_item {\n+            Either::Left(ast::Item::Fn(it)) if it.unsafe_token().is_some() => return true,\n             Either::Left(ast::Item::Fn(it)) => {\n                 self.to_def(it).map(<_>::into).map(DefWithBodyId::FunctionId)\n             }\n@@ -1497,15 +1498,11 @@ impl<'db> SemanticsImpl<'db> {\n         let Some(def) = def else { return false };\n         let enclosing_node = enclosing_item.as_ref().either(|i| i.syntax(), |v| v.syntax());\n \n-        if ast::Fn::cast(enclosing_node.clone()).and_then(|f| f.unsafe_token()).is_some() {\n-            return true;\n-        }\n-\n         let (body, source_map) = self.db.body_with_source_map(def);\n \n-        let file_id = self.find_file(node).file_id;\n+        let file_id = self.find_file(expr.syntax()).file_id;\n \n-        let Some(mut parent) = node.parent() else { return false };\n+        let Some(mut parent) = expr.syntax().parent() else { return false };\n         loop {\n             if &parent == enclosing_node {\n                 break false;"}, {"sha": "1c13f31cf24f41294379eef41f348aa760a94669", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1038db5f1d79155860bd9e1487c0df34ec542b39/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1038db5f1d79155860bd9e1487c0df34ec542b39/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=1038db5f1d79155860bd9e1487c0df34ec542b39", "patch": "@@ -15,7 +15,7 @@ pub(super) fn hints(\n     config: &InlayHintsConfig,\n     expr: &ast::Expr,\n ) -> Option<()> {\n-    if config.adjustment_hints_hide_outside_unsafe && !sema.is_inside_unsafe(expr.syntax()) {\n+    if config.adjustment_hints_hide_outside_unsafe && !sema.is_inside_unsafe(expr) {\n         return None;\n     }\n "}]}