{"sha": "303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwM2ZkYzE3ZjZiYjg0MjY2OGUwZmRkMWUxYTJjMTY4NDFhZTczNzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-06T09:02:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-18T14:11:36Z"}, "message": "cleanup dep-graph debugging code\n\nCreate some re-usable filtering subroutines.", "tree": {"sha": "123d2fe3d1725397f9f02cb2a39fec8d8dfd2fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123d2fe3d1725397f9f02cb2a39fec8d8dfd2fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "html_url": "https://github.com/rust-lang/rust/commit/303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/303fdc17f6bb842668e0fdd1e1a2c16841ae7373/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1", "html_url": "https://github.com/rust-lang/rust/commit/0082fc0ad4d9f8c1cbac7326be2db01f866bfef1"}], "stats": {"total": 98, "additions": 79, "deletions": 19}, "files": [{"sha": "15b0380374c6946208672e9049927a46557610ce", "filename": "src/librustc/dep_graph/debug.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/303fdc17f6bb842668e0fdd1e1a2c16841ae7373/src%2Flibrustc%2Fdep_graph%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303fdc17f6bb842668e0fdd1e1a2c16841ae7373/src%2Flibrustc%2Fdep_graph%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdebug.rs?ref=303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Code for debugging the dep-graph.\n+\n+use super::dep_node::DepNode;\n+use std::error::Error;\n+use std::fmt::Debug;\n+\n+/// A dep-node filter goes from a user-defined string to a query over\n+/// nodes. Right now the format is like this:\n+///\n+///     x & y & z\n+///\n+/// where the format-string of the dep-node must contain `x`, `y`, and\n+/// `z`.\n+#[derive(Debug)]\n+pub struct DepNodeFilter {\n+    text: String\n+}\n+\n+impl DepNodeFilter {\n+    pub fn new(text: &str) -> Self {\n+        DepNodeFilter {\n+            text: text.trim().to_string()\n+        }\n+    }\n+\n+    /// True if all nodes always pass the filter.\n+    pub fn accepts_all(&self) -> bool {\n+        self.text.is_empty()\n+    }\n+\n+    /// Tests whether `node` meets the filter, returning true if so.\n+    pub fn test<D: Clone + Debug>(&self, node: &DepNode<D>) -> bool {\n+        let debug_str = format!(\"{:?}\", node);\n+        self.text.split(\"&\")\n+                 .map(|s| s.trim())\n+                 .all(|f| debug_str.contains(f))\n+    }\n+}\n+\n+/// A filter like `F -> G` where `F` and `G` are valid dep-node\n+/// filters. This can be used to test the source/target independently.\n+pub struct EdgeFilter {\n+    pub source: DepNodeFilter,\n+    pub target: DepNodeFilter,\n+}\n+\n+impl EdgeFilter {\n+    pub fn new(test: &str) -> Result<EdgeFilter, Box<Error>> {\n+        let parts: Vec<_> = test.split(\"->\").collect();\n+        if parts.len() != 2 {\n+            Err(format!(\"expected a filter like `a&b -> c&d`, not `{}`\", test).into())\n+        } else {\n+            Ok(EdgeFilter {\n+                source: DepNodeFilter::new(parts[0]),\n+                target: DepNodeFilter::new(parts[1]),\n+            })\n+        }\n+    }\n+}"}, {"sha": "e65f6bbcf7aab672acdf3028b794582cf6180450", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/303fdc17f6bb842668e0fdd1e1a2c16841ae7373/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303fdc17f6bb842668e0fdd1e1a2c16841ae7373/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub mod debug;\n mod dep_node;\n mod dep_tracking_map;\n mod edges;"}, {"sha": "9dc50a6306406d8684afcab039c98331e75f4417", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/303fdc17f6bb842668e0fdd1e1a2c16841ae7373/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/303fdc17f6bb842668e0fdd1e1a2c16841ae7373/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "patch": "@@ -44,6 +44,7 @@\n \n use graphviz as dot;\n use rustc::dep_graph::{DepGraphQuery, DepNode};\n+use rustc::dep_graph::debug::{DepNodeFilter, EdgeFilter};\n use rustc::hir::def_id::DefId;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fnv::{FnvHashMap, FnvHashSet};\n@@ -220,12 +221,11 @@ fn dump_graph(tcx: TyCtxt) {\n     let nodes = match env::var(\"RUST_DEP_GRAPH_FILTER\") {\n         Ok(string) => {\n             // Expect one of: \"-> target\", \"source -> target\", or \"source ->\".\n-            let parts: Vec<_> = string.split(\"->\").collect();\n-            if parts.len() > 2 {\n-                bug!(\"Invalid RUST_DEP_GRAPH_FILTER: expected '[source] -> [target]'\");\n-            }\n-            let sources = node_set(&query, &parts[0]);\n-            let targets = node_set(&query, &parts[1]);\n+            let edge_filter = EdgeFilter::new(&string).unwrap_or_else(|e| {\n+                bug!(\"invalid filter: {}\", e)\n+            });\n+            let sources = node_set(&query, &edge_filter.source);\n+            let targets = node_set(&query, &edge_filter.target);\n             filter_nodes(&query, &sources, &targets)\n         }\n         Err(_) => {\n@@ -295,26 +295,16 @@ impl<'a, 'tcx> dot::Labeller<'a> for GraphvizDepGraph {\n // Given an optional filter like `\"x,y,z\"`, returns either `None` (no\n // filter) or the set of nodes whose labels contain all of those\n // substrings.\n-fn node_set(query: &DepGraphQuery<DefId>, filter: &str)\n+fn node_set(query: &DepGraphQuery<DefId>, filter: &DepNodeFilter)\n             -> Option<FnvHashSet<DepNode<DefId>>>\n {\n     debug!(\"node_set(filter={:?})\", filter);\n \n-    if filter.trim().is_empty() {\n+    if filter.accepts_all() {\n         return None;\n     }\n \n-    let filters: Vec<&str> = filter.split(\"&\").map(|s| s.trim()).collect();\n-\n-    debug!(\"node_set: filters={:?}\", filters);\n-\n-    Some(query.nodes()\n-         .into_iter()\n-         .filter(|n| {\n-             let s = format!(\"{:?}\", n);\n-             filters.iter().all(|f| s.contains(f))\n-         })\n-        .collect())\n+    Some(query.nodes().into_iter().filter(|n| filter.test(n)).collect())\n }\n \n fn filter_nodes(query: &DepGraphQuery<DefId>,"}]}