{"sha": "2bec7eafb1443873504f1702d72b749ae2c90cc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZWM3ZWFmYjE0NDM4NzM1MDRmMTcwMmQ3MmI3NDlhZTJjOTBjYzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T01:57:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T01:57:30Z"}, "message": "core: Rework some rand functions to be more consistent\n\nChanged the gen_x_from functions to gen_x_range and made them use the range\n[start, end) like other core functions.", "tree": {"sha": "f9ebab80a88a8cc5feab38a6e2ab3d0f2ef3239b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ebab80a88a8cc5feab38a6e2ab3d0f2ef3239b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bec7eafb1443873504f1702d72b749ae2c90cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bec7eafb1443873504f1702d72b749ae2c90cc0", "html_url": "https://github.com/rust-lang/rust/commit/2bec7eafb1443873504f1702d72b749ae2c90cc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bec7eafb1443873504f1702d72b749ae2c90cc0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18da37c9c8f9e91219f34861aa21c1d31f42954", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18da37c9c8f9e91219f34861aa21c1d31f42954", "html_url": "https://github.com/rust-lang/rust/commit/d18da37c9c8f9e91219f34861aa21c1d31f42954"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "a75a7d05614539fc0d5c070a1c09a5871fc71fe1", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2bec7eafb1443873504f1702d72b749ae2c90cc0/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bec7eafb1443873504f1702d72b749ae2c90cc0/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=2bec7eafb1443873504f1702d72b749ae2c90cc0", "patch": "@@ -30,11 +30,11 @@ impl extensions for rng {\n         self.gen_i64() as int\n     }\n \n-    #[doc = \"Return an int randomly chosen from the range [start, end], \\\n-             failing if start > end\"]\n-    fn gen_int_from(start: int, end: int) -> int {\n-        assert start <= end;\n-        start + int::abs(self.gen_int() % (end - start + 1))\n+    #[doc = \"Return an int randomly chosen from the range [start, end), \\\n+             failing if start >= end\"]\n+    fn gen_int_range(start: int, end: int) -> int {\n+        assert start < end;\n+        start + int::abs(self.gen_int() % (end - start))\n     }\n \n     #[doc = \"Return a random i8\"]\n@@ -62,11 +62,11 @@ impl extensions for rng {\n         self.gen_u64() as uint\n     }\n \n-    #[doc = \"Return a uint randomly chosen from the range [start, end], \\\n-             failing if start > end\"]\n-    fn gen_uint_from(start: uint, end: uint) -> uint {\n-        assert start <= end;\n-        start + (self.gen_uint() % (end - start + 1u))\n+    #[doc = \"Return a uint randomly chosen from the range [start, end), \\\n+             failing if start >= end\"]\n+    fn gen_uint_range(start: uint, end: uint) -> uint {\n+        assert start < end;\n+        start + (self.gen_uint() % (end - start))\n     }\n \n     #[doc = \"Return a random u8\"]\n@@ -130,7 +130,7 @@ impl extensions for rng {\n         if n == 0u {\n             true\n         } else {\n-            self.gen_uint_from(1u, n) == 1u\n+            self.gen_uint_range(1u, n + 1u) == 1u\n         }\n     }\n \n@@ -166,7 +166,7 @@ impl extensions for rng {\n         if values.is_empty() {\n             none\n         } else {\n-            some(values[self.gen_uint_from(0u, values.len() - 1u)])\n+            some(values[self.gen_uint_range(0u, values.len())])\n         }\n     }\n \n@@ -186,7 +186,7 @@ impl extensions for rng {\n         if total == 0u {\n             ret none;\n         }\n-        let chosen = self.gen_uint_from(0u, total - 1u);\n+        let chosen = self.gen_uint_range(0u, total);\n         let mut so_far = 0u;\n         for v.each {|item|\n             so_far += item.weight;\n@@ -223,7 +223,7 @@ impl extensions for rng {\n             // invariant: elements with index >= i have been locked in place.\n             i -= 1u;\n             // lock element i in place.\n-            vec::swap(values, i, self.gen_uint_from(0u, i));\n+            vec::swap(values, i, self.gen_uint_range(0u, i + 1u));\n         }\n     }\n \n@@ -274,35 +274,35 @@ mod tests {\n     }\n \n     #[test]\n-    fn gen_int_from() {\n+    fn gen_int_range() {\n         let r = rand::rng();\n-        let a = r.gen_int_from(-3, 42);\n-        assert a >= -3 && a <= 42;\n-        assert r.gen_int_from(0, 0) == 0;\n-        assert r.gen_int_from(-12, -12) == -12;\n+        let a = r.gen_int_range(-3, 42);\n+        assert a >= -3 && a < 42;\n+        assert r.gen_int_range(0, 1) == 0;\n+        assert r.gen_int_range(-12, -11) == -12;\n     }\n \n     #[test]\n     #[should_fail]\n     #[ignore(cfg(target_os = \"win3\"))]\n     fn gen_int_from_fail() {\n-        rand::rng().gen_int_from(5, -2);\n+        rand::rng().gen_int_range(5, -2);\n     }\n \n     #[test]\n-    fn gen_uint_from() {\n+    fn gen_uint_range() {\n         let r = rand::rng();\n-        let a = r.gen_uint_from(3u, 42u);\n-        assert a >= 3u && a <= 42u;\n-        assert r.gen_uint_from(0u, 0u) == 0u;\n-        assert r.gen_uint_from(12u, 12u) == 12u;\n+        let a = r.gen_uint_range(3u, 42u);\n+        assert a >= 3u && a < 42u;\n+        assert r.gen_uint_range(0u, 1u) == 0u;\n+        assert r.gen_uint_range(12u, 13u) == 12u;\n     }\n \n     #[test]\n     #[should_fail]\n     #[ignore(cfg(target_os = \"win3\"))]\n-    fn gen_uint_from_fail() {\n-        rand::rng().gen_uint_from(5u, 2u);\n+    fn gen_uint_range_fail() {\n+        rand::rng().gen_uint_range(5u, 2u);\n     }\n \n     #[test]"}]}