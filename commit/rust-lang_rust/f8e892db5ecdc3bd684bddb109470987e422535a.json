{"sha": "f8e892db5ecdc3bd684bddb109470987e422535a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZTg5MmRiNWVjZGMzYmQ2ODRiZGRiMTA5NDcwOTg3ZTQyMjUzNWE=", "commit": {"author": {"name": "Jacek Pospychala", "email": "jacek.pospychala@gmail.com", "date": "2020-03-12T20:41:13Z"}, "committer": {"name": "Jacek Pospychala", "email": "jacek.pospychala@gmail.com", "date": "2020-04-01T22:02:25Z"}, "message": "useless Rc<Rc<T>>, Rc<Box<T>>, Rc<&T>, Box<&T>", "tree": {"sha": "4a9fabed5d21a6a92d3615ebfe68632841a756e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a9fabed5d21a6a92d3615ebfe68632841a756e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e892db5ecdc3bd684bddb109470987e422535a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e892db5ecdc3bd684bddb109470987e422535a", "html_url": "https://github.com/rust-lang/rust/commit/f8e892db5ecdc3bd684bddb109470987e422535a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e892db5ecdc3bd684bddb109470987e422535a/comments", "author": {"login": "jpospychala", "id": 601783, "node_id": "MDQ6VXNlcjYwMTc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/601783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpospychala", "html_url": "https://github.com/jpospychala", "followers_url": "https://api.github.com/users/jpospychala/followers", "following_url": "https://api.github.com/users/jpospychala/following{/other_user}", "gists_url": "https://api.github.com/users/jpospychala/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpospychala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpospychala/subscriptions", "organizations_url": "https://api.github.com/users/jpospychala/orgs", "repos_url": "https://api.github.com/users/jpospychala/repos", "events_url": "https://api.github.com/users/jpospychala/events{/privacy}", "received_events_url": "https://api.github.com/users/jpospychala/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jpospychala", "id": 601783, "node_id": "MDQ6VXNlcjYwMTc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/601783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpospychala", "html_url": "https://github.com/jpospychala", "followers_url": "https://api.github.com/users/jpospychala/followers", "following_url": "https://api.github.com/users/jpospychala/following{/other_user}", "gists_url": "https://api.github.com/users/jpospychala/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpospychala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpospychala/subscriptions", "organizations_url": "https://api.github.com/users/jpospychala/orgs", "repos_url": "https://api.github.com/users/jpospychala/repos", "events_url": "https://api.github.com/users/jpospychala/events{/privacy}", "received_events_url": "https://api.github.com/users/jpospychala/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42796e11c5187be4e2ad962db17f333a52c3a88a", "url": "https://api.github.com/repos/rust-lang/rust/commits/42796e11c5187be4e2ad962db17f333a52c3a88a", "html_url": "https://github.com/rust-lang/rust/commit/42796e11c5187be4e2ad962db17f333a52c3a88a"}], "stats": {"total": 267, "additions": 259, "deletions": 8}, "files": [{"sha": "894aab21fb377054fa5750a3e921888981dce243", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -1433,6 +1433,7 @@ Released 2018-09-13\n [`range_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n+[`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n [`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call"}, {"sha": "dfc2a26b06b2cae413352283397d0ef33bdfacee", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -811,6 +811,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::LET_UNIT_VALUE,\n         &types::LINKEDLIST,\n         &types::OPTION_OPTION,\n+        &types::REDUNDANT_ALLOCATION,\n         &types::TYPE_COMPLEXITY,\n         &types::UNIT_ARG,\n         &types::UNIT_CMP,\n@@ -1376,6 +1377,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&types::LET_UNIT_VALUE),\n+        LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n         LintId::of(&types::UNIT_CMP),\n@@ -1660,6 +1662,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::BOX_VEC),\n+        LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&vec::USELESS_VEC),\n     ]);\n "}, {"sha": "b21c3739265916db969671a4dae99769bfb33e59", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 97, "deletions": 6, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -171,11 +171,35 @@ declare_clippy_lint! {\n     \"a borrow of a boxed type\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for use of redundant allocations anywhere in the code.\n+    ///\n+    /// **Why is this bad?** Expressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Box<T>>`, `Box<&T>`\n+    /// add an unnecessary level of indirection.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # use std::rc::Rc;\n+    /// fn foo(bar: Rc<&usize>) {}\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust\n+    /// fn foo(bar: &usize) {}\n+    /// ```\n+    pub REDUNDANT_ALLOCATION,\n+    perf,\n+    \"redundant allocation\"\n+}\n+\n pub struct Types {\n     vec_box_size_threshold: u64,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX]);\n+impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n     fn check_fn(\n@@ -217,7 +241,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n }\n \n /// Checks if `qpath` has last segment with type parameter matching `path`\n-fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, path: &[&str]) -> bool {\n+fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, path: &[&str]) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(ref params) = last.args;\n@@ -230,10 +254,27 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, path: &[&st\n         if let Some(did) = qpath_res(cx, qpath, ty.hir_id).opt_def_id();\n         if match_def_path(cx, did, path);\n         then {\n-            return true;\n+            return Some(ty.span);\n         }\n     }\n-    false\n+    None\n+}\n+\n+fn match_borrows_parameter(_cx: &LateContext<'_, '_>, qpath: &QPath<'_>) -> Option<Span> {\n+    let last = last_path_segment(qpath);\n+    if_chain! {\n+        if let Some(ref params) = last.args;\n+        if !params.parenthesized;\n+        if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            _ => None,\n+        });\n+        if let TyKind::Rptr(..) = ty.kind;\n+        then {\n+            return Some(ty.span);\n+        }\n+    }\n+    None\n }\n \n impl Types {\n@@ -257,6 +298,7 @@ impl Types {\n     /// The parameter `is_local` distinguishes the context of the type; types from\n     /// local bindings should only be checked for the `BORROWED_BOX` lint.\n     #[allow(clippy::too_many_lines)]\n+    #[allow(clippy::cognitive_complexity)]\n     fn check_ty(&mut self, cx: &LateContext<'_, '_>, hir_ty: &hir::Ty<'_>, is_local: bool) {\n         if hir_ty.span.from_expansion() {\n             return;\n@@ -267,7 +309,19 @@ impl Types {\n                 let res = qpath_res(cx, qpath, hir_id);\n                 if let Some(def_id) = res.opt_def_id() {\n                     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n-                        if match_type_parameter(cx, qpath, &paths::VEC) {\n+                        if let Some(span) = match_borrows_parameter(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Box<&T>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if match_type_parameter(cx, qpath, &paths::VEC).is_some() {\n                             span_lint_and_help(\n                                 cx,\n                                 BOX_VEC,\n@@ -277,6 +331,43 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n+                    } else if Some(def_id) == cx.tcx.lang_items().rc() {\n+                        if let Some(span) = match_type_parameter(cx, qpath, &paths::RC) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Rc<Rc<T>>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if let Some(span) = match_type_parameter(cx, qpath, &paths::BOX) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Rc<Box<T>>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if let Some(span) = match_borrows_parameter(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                REDUNDANT_ALLOCATION,\n+                                hir_ty.span,\n+                                \"usage of `Rc<&T>`\",\n+                                \"try\",\n+                                snippet(cx, span, \"..\").to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n                     } else if cx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id) {\n                         if_chain! {\n                             // Get the _ part of Vec<_>\n@@ -314,7 +405,7 @@ impl Types {\n                             }\n                         }\n                     } else if match_def_path(cx, def_id, &paths::OPTION) {\n-                        if match_type_parameter(cx, qpath, &paths::OPTION) {\n+                        if match_type_parameter(cx, qpath, &paths::OPTION).is_some() {\n                             span_lint(\n                                 cx,\n                                 OPTION_OPTION,"}, {"sha": "b79ba345df4f82c80c184e72ec267efc115528e1", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -10,6 +10,7 @@ pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n+pub const BOX: [&str; 3] = [\"alloc\", \"boxed\", \"Box\"];\n pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_ENTRY: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];"}, {"sha": "8a6d0af5f8a704b20399187fe138ca0579b8cdea", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -1725,6 +1725,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"ranges\",\n     },\n+    Lint {\n+        name: \"redundant_allocation\",\n+        group: \"perf\",\n+        desc: \"redundant allocation\",\n+        deprecation: None,\n+        module: \"types\",\n+    },\n     Lint {\n         name: \"redundant_clone\",\n         group: \"perf\","}, {"sha": "9556f6f82cc6313d39125487819635ce0b0eed7f", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut)]\n+#![allow(unused_mut, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "3732422017104ccaf788e747de9c07ac99eb758a", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![feature(never_type)]\n-#![allow(unused_mut)]\n+#![allow(unused_mut, clippy::redundant_allocation)]\n #![warn(clippy::must_use_candidate)]\n use std::rc::Rc;\n use std::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "266358334587d0a6edb4a94e328e77d1a6515c93", "filename": "tests/ui/redundant_allocation.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fredundant_allocation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fredundant_allocation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.fixed?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+\n+use std::boxed::Box;\n+use std::rc::Rc;\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+// Rc<&T>\n+\n+pub fn test1<T>(foo: &T) {}\n+\n+pub fn test2(foo: &MyStruct) {}\n+\n+pub fn test3(foo: &MyEnum) {}\n+\n+pub fn test4_neg(foo: Rc<SubT<&usize>>) {}\n+\n+// Rc<Rc<T>>\n+\n+pub fn test5(a: Rc<bool>) {}\n+\n+// Rc<Box<T>>\n+\n+pub fn test6(a: Box<bool>) {}\n+\n+// Box<&T>\n+\n+pub fn test7<T>(foo: &T) {}\n+\n+pub fn test8(foo: &MyStruct) {}\n+\n+pub fn test9(foo: &MyEnum) {}\n+\n+pub fn test10_neg(foo: Box<SubT<&usize>>) {}\n+\n+fn main() {}"}, {"sha": "677b3e56d4dcebe5ea58a9996b5cac7c5332cddc", "filename": "tests/ui/redundant_allocation.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.rs?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+\n+use std::boxed::Box;\n+use std::rc::Rc;\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+// Rc<&T>\n+\n+pub fn test1<T>(foo: Rc<&T>) {}\n+\n+pub fn test2(foo: Rc<&MyStruct>) {}\n+\n+pub fn test3(foo: Rc<&MyEnum>) {}\n+\n+pub fn test4_neg(foo: Rc<SubT<&usize>>) {}\n+\n+// Rc<Rc<T>>\n+\n+pub fn test5(a: Rc<Rc<bool>>) {}\n+\n+// Rc<Box<T>>\n+\n+pub fn test6(a: Rc<Box<bool>>) {}\n+\n+// Box<&T>\n+\n+pub fn test7<T>(foo: Box<&T>) {}\n+\n+pub fn test8(foo: Box<&MyStruct>) {}\n+\n+pub fn test9(foo: Box<&MyEnum>) {}\n+\n+pub fn test10_neg(foo: Box<SubT<&usize>>) {}\n+\n+fn main() {}"}, {"sha": "eaa57ce3024b604243166b7e78bcf1d58dc6f536", "filename": "tests/ui/redundant_allocation.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e892db5ecdc3bd684bddb109470987e422535a/tests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.stderr?ref=f8e892db5ecdc3bd684bddb109470987e422535a", "patch": "@@ -0,0 +1,52 @@\n+error: usage of `Rc<&T>`\n+  --> $DIR/redundant_allocation.rs:22:22\n+   |\n+LL | pub fn test1<T>(foo: Rc<&T>) {}\n+   |                      ^^^^^^ help: try: `&T`\n+   |\n+   = note: `-D clippy::redundant-allocation` implied by `-D warnings`\n+\n+error: usage of `Rc<&T>`\n+  --> $DIR/redundant_allocation.rs:24:19\n+   |\n+LL | pub fn test2(foo: Rc<&MyStruct>) {}\n+   |                   ^^^^^^^^^^^^^ help: try: `&MyStruct`\n+\n+error: usage of `Rc<&T>`\n+  --> $DIR/redundant_allocation.rs:26:19\n+   |\n+LL | pub fn test3(foo: Rc<&MyEnum>) {}\n+   |                   ^^^^^^^^^^^ help: try: `&MyEnum`\n+\n+error: usage of `Rc<Rc<T>>`\n+  --> $DIR/redundant_allocation.rs:32:17\n+   |\n+LL | pub fn test5(a: Rc<Rc<bool>>) {}\n+   |                 ^^^^^^^^^^^^ help: try: `Rc<bool>`\n+\n+error: usage of `Rc<Box<T>>`\n+  --> $DIR/redundant_allocation.rs:36:17\n+   |\n+LL | pub fn test6(a: Rc<Box<bool>>) {}\n+   |                 ^^^^^^^^^^^^^ help: try: `Box<bool>`\n+\n+error: usage of `Box<&T>`\n+  --> $DIR/redundant_allocation.rs:40:22\n+   |\n+LL | pub fn test7<T>(foo: Box<&T>) {}\n+   |                      ^^^^^^^ help: try: `&T`\n+\n+error: usage of `Box<&T>`\n+  --> $DIR/redundant_allocation.rs:42:19\n+   |\n+LL | pub fn test8(foo: Box<&MyStruct>) {}\n+   |                   ^^^^^^^^^^^^^^ help: try: `&MyStruct`\n+\n+error: usage of `Box<&T>`\n+  --> $DIR/redundant_allocation.rs:44:19\n+   |\n+LL | pub fn test9(foo: Box<&MyEnum>) {}\n+   |                   ^^^^^^^^^^^^ help: try: `&MyEnum`\n+\n+error: aborting due to 8 previous errors\n+"}]}