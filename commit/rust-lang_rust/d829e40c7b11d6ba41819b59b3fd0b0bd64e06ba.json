{"sha": "d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjllNDBjN2IxMWQ2YmE0MTgxOWI1OWIzZmQwYjBiZDY0ZTA2YmE=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-15T17:05:11Z"}, "committer": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-18T11:05:07Z"}, "message": "Improve unknown external crate error", "tree": {"sha": "aa6ac2f67a118fb9e4991f252a37e03fe1895033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa6ac2f67a118fb9e4991f252a37e03fe1895033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "html_url": "https://github.com/rust-lang/rust/commit/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "html_url": "https://github.com/rust-lang/rust/commit/4e208f6a3afb42528878b0f3464e337c4bf3bbc8"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "cf8c19a57349a3ff305951b49585d62c689a4630", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "patch": "@@ -244,6 +244,13 @@ impl<'a> PathSource<'a> {\n                 // \"function\" here means \"anything callable\" rather than `DefKind::Fn`,\n                 // this is not precise but usually more helpful than just \"value\".\n                 Some(ExprKind::Call(call_expr, _)) => match &call_expr.kind {\n+                    // the case of `::some_crate()`\n+                    ExprKind::Path(_, path)\n+                        if path.segments.len() == 2\n+                            && path.segments[0].ident.name == kw::PathRoot =>\n+                    {\n+                        \"external crate\"\n+                    }\n                     ExprKind::Path(_, path) => {\n                         let mut msg = \"function\";\n                         if let Some(segment) = path.segments.iter().last() {"}, {"sha": "f405c2d727db11745e1926052891331621e5e72e", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "patch": "@@ -2458,20 +2458,26 @@ impl<'a> Resolver<'a> {\n                             (format!(\"use of undeclared crate or module `{}`\", ident), None)\n                         }\n                     } else {\n-                        let mut msg =\n-                            format!(\"could not find `{}` in `{}`\", ident, path[i - 1].ident);\n+                        let parent = path[i - 1].ident.name;\n+                        let parent = if parent == kw::PathRoot {\n+                            \"crate root\".to_owned()\n+                        } else {\n+                            format!(\"`{}`\", parent)\n+                        };\n+\n+                        let mut msg = format!(\"could not find `{}` in {}\", ident, parent);\n                         if ns == TypeNS || ns == ValueNS {\n                             let ns_to_try = if ns == TypeNS { ValueNS } else { TypeNS };\n                             if let FindBindingResult::Binding(Ok(binding)) =\n                                 find_binding_in_ns(self, ns_to_try)\n                             {\n                                 let mut found = |what| {\n                                     msg = format!(\n-                                        \"expected {}, found {} `{}` in `{}`\",\n+                                        \"expected {}, found {} `{}` in {}\",\n                                         ns.descr(),\n                                         what,\n                                         ident,\n-                                        path[i - 1].ident\n+                                        parent\n                                     )\n                                 };\n                                 if binding.module().is_some() {"}, {"sha": "06605c6f2082e4964552a8530cbec1184ecaed62", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `E`\n   --> $DIR/edition-imports-virtual-2015-gated.rs:8:5\n    |\n LL |     gen_gated!();\n-   |     ^^^^^^^^^^^^^ could not find `E` in `{{root}}`\n+   |     ^^^^^^^^^^^^^ could not find `E` in crate root\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "61212f299bec791ca0d81e79ae6d72ea2f36bf35", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let s = ::xcrate::S;\n-    //~^ ERROR failed to resolve: could not find `xcrate` in `{{root}}`\n+    //~^ ERROR failed to resolve: could not find `xcrate` in crate root\n }"}, {"sha": "8b2a6933f37bf6528f5497c7eef2d53c9e2ac935", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr?ref=d829e40c7b11d6ba41819b59b3fd0b0bd64e06ba", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: could not find `xcrate` in `{{root}}`\n+error[E0433]: failed to resolve: could not find `xcrate` in crate root\n   --> $DIR/non-existent-2.rs:4:15\n    |\n LL |     let s = ::xcrate::S;\n-   |               ^^^^^^ could not find `xcrate` in `{{root}}`\n+   |               ^^^^^^ could not find `xcrate` in crate root\n \n error: aborting due to previous error\n "}]}