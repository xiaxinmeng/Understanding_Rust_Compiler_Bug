{"sha": "d116859ad78efa743726acd91d05d5a0bc64c0fe", "node_id": "C_kwDOAAsO6NoAKGQxMTY4NTlhZDc4ZWZhNzQzNzI2YWNkOTFkMDVkNWEwYmM2NGMwZmU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-28T20:18:32Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-25T13:25:52Z"}, "message": "--bless", "tree": {"sha": "911f1cef278f4898a00d806a764f59b2f91e4a0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911f1cef278f4898a00d806a764f59b2f91e4a0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d116859ad78efa743726acd91d05d5a0bc64c0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d116859ad78efa743726acd91d05d5a0bc64c0fe", "html_url": "https://github.com/rust-lang/rust/commit/d116859ad78efa743726acd91d05d5a0bc64c0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d116859ad78efa743726acd91d05d5a0bc64c0fe/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc752f56650c123d702d027aeb154eafbe3fdd50", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc752f56650c123d702d027aeb154eafbe3fdd50", "html_url": "https://github.com/rust-lang/rust/commit/cc752f56650c123d702d027aeb154eafbe3fdd50"}], "stats": {"total": 195, "additions": 106, "deletions": 89}, "files": [{"sha": "b0aeded0ef75a0855bfe9c2382c668caf00863e3", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.rs?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,7 +1,8 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn a() -> impl Fn(&u8) -> impl Debug {\n-    |x| x //~ ERROR lifetime may not live long enough\n+    |x| x //~ ERROR hidden type for `impl Debug` captures lifetime that does not appear in bounds\n }\n \n fn main() {}"}, {"sha": "433b76b7afaa26fb50b015c9749ecd8891f22b2b", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,11 +1,11 @@\n-error: lifetime may not live long enough\n-  --> $DIR/impl-fn-hrtb-bounds-2.rs:4:9\n+error[E0700]: hidden type for `impl Debug` captures lifetime that does not appear in bounds\n+  --> $DIR/impl-fn-hrtb-bounds-2.rs:5:9\n    |\n LL |     |x| x\n-   |      -- ^ returning this value requires that `'1` must outlive `'2`\n-   |      ||\n-   |      |return type of closure is &'2 u8\n-   |      has type `&'1 u8`\n+   |     --- ^\n+   |     |\n+   |     hidden type `&u8` captures the anonymous lifetime #1 defined here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "527a4586fd7e0b7cd8c02e97812418b0c68381b4", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.rs?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,3 +1,4 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn a() -> impl Fn(&u8) -> (impl Debug + '_) {"}, {"sha": "443ffeb55cdee1cad06c715a0f02e7646f043a55", "filename": "src/test/ui/impl-trait/impl-fn-hrtb-bounds.stderr", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds.stderr?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,56 +1,51 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-fn-hrtb-bounds.rs:19:38\n+   |\n+LL | fn d() -> impl Fn() -> (impl Debug + '_) {\n+   |                                      ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn d() -> impl Fn() -> (impl Debug + 'static) {\n+   |                                      ~~~~~~~\n+\n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-hrtb-bounds.rs:3:41\n+  --> $DIR/impl-fn-hrtb-bounds.rs:4:41\n    |\n LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n    |                                         ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-hrtb-bounds.rs:3:19\n+  --> $DIR/impl-fn-hrtb-bounds.rs:4:19\n    |\n LL | fn a() -> impl Fn(&u8) -> (impl Debug + '_) {\n    |                   ^\n \n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-hrtb-bounds.rs:8:52\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:52\n    |\n LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n    |                                                    ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-hrtb-bounds.rs:8:20\n+  --> $DIR/impl-fn-hrtb-bounds.rs:9:20\n    |\n LL | fn b() -> impl for<'a> Fn(&'a u8) -> (impl Debug + 'a) {\n    |                    ^^\n \n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-hrtb-bounds.rs:13:52\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:52\n    |\n LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n    |                                                    ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-hrtb-bounds.rs:13:20\n+  --> $DIR/impl-fn-hrtb-bounds.rs:14:20\n    |\n LL | fn c() -> impl for<'a> Fn(&'a u8) -> (impl Debug + '_) {\n    |                    ^^\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-fn-hrtb-bounds.rs:18:38\n-   |\n-LL | fn d() -> impl Fn() -> (impl Debug + '_) {\n-   |                                      ^^ expected named lifetime parameter\n-   |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-help: consider making the bound lifetime-generic with a new `'a` lifetime\n-   |\n-LL | fn d() -> impl for<'a> Fn() -> (impl Debug + 'a) {\n-   |                +++++++                       ~~\n-help: consider using the `'static` lifetime\n-   |\n-LL | fn d() -> impl Fn() -> (impl Debug + 'static) {\n-   |                                      ~~~~~~~\n-\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0106`."}, {"sha": "3e760710797eb032902b40bec831e53772db518d", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.rs?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,3 +1,4 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn a() -> impl Fn(&u8) -> impl Debug + '_ {"}, {"sha": "cf6e5ef7bacebb626699df9b444eb0b4553f00da", "filename": "src/test/ui/impl-trait/impl-fn-parsing-ambiguities.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-parsing-ambiguities.stderr?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,23 +1,23 @@\n error: ambiguous `+` in a type\n-  --> $DIR/impl-fn-parsing-ambiguities.rs:3:27\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:27\n    |\n LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n    |                           ^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + '_)`\n \n error: ambiguous `+` in a type\n-  --> $DIR/impl-fn-parsing-ambiguities.rs:9:24\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:10:24\n    |\n LL | fn b() -> impl Fn() -> impl Debug + Send {\n    |                        ^^^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(impl Debug + Send)`\n \n error: higher kinded lifetime bounds on nested opaque types are not supported yet\n-  --> $DIR/impl-fn-parsing-ambiguities.rs:3:40\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:40\n    |\n LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n    |                                        ^^\n    |\n note: lifetime declared here\n-  --> $DIR/impl-fn-parsing-ambiguities.rs:3:19\n+  --> $DIR/impl-fn-parsing-ambiguities.rs:4:19\n    |\n LL | fn a() -> impl Fn(&u8) -> impl Debug + '_ {\n    |                   ^"}, {"sha": "5e2379b2f9af6768c62bb555be16f08c0afe350e", "filename": "src/test/ui/impl-trait/impl-fn-predefined-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.rs?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,7 +1,8 @@\n-// check-pass\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n+    //~^ ERROR hidden type for `impl Debug` captures lifetime that does not appear in bounds\n     |x| x\n }\n "}, {"sha": "1247ffad7c324499ccc6735e1fdc84833e14b850", "filename": "src/test/ui/impl-trait/impl-fn-predefined-lifetimes.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-fn-predefined-lifetimes.stderr?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -0,0 +1,15 @@\n+error[E0700]: hidden type for `impl Debug` captures lifetime that does not appear in bounds\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:4:35\n+   |\n+LL | fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n+   |                                   ^^^^^^^^^^^^^^^\n+   |\n+note: hidden type `&'<empty> u8` captures lifetime smaller than the function body\n+  --> $DIR/impl-fn-predefined-lifetimes.rs:4:35\n+   |\n+LL | fn a<'a>() -> impl Fn(&'a u8) -> (impl Debug + '_) {\n+   |                                   ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "71a8f9c77960d1562f221d7c20d6e7bc5775d014", "filename": "src/test/ui/impl-trait/impl_fn_associativity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl_fn_associativity.rs?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn f_debug() -> impl Fn() -> impl Debug {"}, {"sha": "e95fab3b6505780275a9537eb8adec29bf3684c1", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,3 +1,4 @@\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n fn fine(x: impl Into<u32>) -> impl Into<u32> { x }"}, {"sha": "9a8f5a3406813368670b17c76c7827f61fae7ca7", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:5:56\n+  --> $DIR/nested_impl_trait.rs:6:56\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ----------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:9:42\n+  --> $DIR/nested_impl_trait.rs:10:42\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ----------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:13:37\n+  --> $DIR/nested_impl_trait.rs:14:37\n    |\n LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           ----------^^^^^^^^^^-\n@@ -26,7 +26,7 @@ LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:18:44\n+  --> $DIR/nested_impl_trait.rs:19:44\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ----------^^^^^^^^^^-\n@@ -35,13 +35,13 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  outer `impl Trait`\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/nested_impl_trait.rs:9:32\n+  --> $DIR/nested_impl_trait.rs:10:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:5:46\n+  --> $DIR/nested_impl_trait.rs:6:46\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n@@ -50,7 +50,7 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n-  --> $DIR/nested_impl_trait.rs:18:34\n+  --> $DIR/nested_impl_trait.rs:19:34\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`"}, {"sha": "ff63b04c2680df36779f65eec709dfbdd3a9f726", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,5 +1,6 @@\n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n+#![feature(impl_trait_in_fn_trait_return)]\n use std::fmt::Debug;\n \n // Allowed"}, {"sha": "3ad0a9f9d5c8b7a3274ce30a4ba7f4edcb648f07", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d116859ad78efa743726acd91d05d5a0bc64c0fe/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=d116859ad78efa743726acd91d05d5a0bc64c0fe", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:46:51\n+  --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           --------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:55:57\n+  --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                 --------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:117:16\n+  --> $DIR/where-allowed.rs:118:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:152:23\n+  --> $DIR/where-allowed.rs:153:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:155:39\n+  --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -44,109 +44,109 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n-  --> $DIR/where-allowed.rs:15:40\n+  --> $DIR/where-allowed.rs:16:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:19:42\n+  --> $DIR/where-allowed.rs:20:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n-  --> $DIR/where-allowed.rs:23:38\n+  --> $DIR/where-allowed.rs:24:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:27:40\n+  --> $DIR/where-allowed.rs:28:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:31:49\n+  --> $DIR/where-allowed.rs:32:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:35:51\n+  --> $DIR/where-allowed.rs:36:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:39:55\n+  --> $DIR/where-allowed.rs:40:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:46:51\n+  --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:51:53\n+  --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:55:57\n+  --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:63:38\n+  --> $DIR/where-allowed.rs:64:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:67:40\n+  --> $DIR/where-allowed.rs:68:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:80:32\n+  --> $DIR/where-allowed.rs:81:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in path\n-  --> $DIR/where-allowed.rs:84:41\n+  --> $DIR/where-allowed.rs:85:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:88:27\n+  --> $DIR/where-allowed.rs:89:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:93:25\n+  --> $DIR/where-allowed.rs:94:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:95:20\n+  --> $DIR/where-allowed.rs:96:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n-  --> $DIR/where-allowed.rs:106:23\n+  --> $DIR/where-allowed.rs:107:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n@@ -155,7 +155,7 @@ LL |     fn in_return() -> impl Debug;\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n-  --> $DIR/where-allowed.rs:123:34\n+  --> $DIR/where-allowed.rs:124:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n@@ -164,127 +164,127 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n-  --> $DIR/where-allowed.rs:136:33\n+  --> $DIR/where-allowed.rs:137:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n-  --> $DIR/where-allowed.rs:139:31\n+  --> $DIR/where-allowed.rs:140:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n-  --> $DIR/where-allowed.rs:155:39\n+  --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n-  --> $DIR/where-allowed.rs:160:16\n+  --> $DIR/where-allowed.rs:161:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:165:24\n+  --> $DIR/where-allowed.rs:166:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:170:6\n+  --> $DIR/where-allowed.rs:171:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:176:24\n+  --> $DIR/where-allowed.rs:177:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:182:11\n+  --> $DIR/where-allowed.rs:183:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:189:15\n+  --> $DIR/where-allowed.rs:190:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n-  --> $DIR/where-allowed.rs:196:24\n+  --> $DIR/where-allowed.rs:197:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n-  --> $DIR/where-allowed.rs:203:17\n+  --> $DIR/where-allowed.rs:204:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n-  --> $DIR/where-allowed.rs:210:22\n+  --> $DIR/where-allowed.rs:211:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:216:40\n+  --> $DIR/where-allowed.rs:217:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:220:36\n+  --> $DIR/where-allowed.rs:221:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:224:38\n+  --> $DIR/where-allowed.rs:225:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:228:41\n+  --> $DIR/where-allowed.rs:229:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:232:11\n+  --> $DIR/where-allowed.rs:233:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n-  --> $DIR/where-allowed.rs:239:40\n+  --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n-  --> $DIR/where-allowed.rs:245:29\n+  --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n-  --> $DIR/where-allowed.rs:247:46\n+  --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:232:7\n+  --> $DIR/where-allowed.rs:233:7\n    |\n LL | impl <T = impl Debug> T {}\n    |       ^^^^^^^^^^^^^^\n@@ -294,7 +294,7 @@ LL | impl <T = impl Debug> T {}\n    = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:239:36\n+  --> $DIR/where-allowed.rs:240:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                    ^^^^^^^^^^^^^^\n@@ -303,7 +303,7 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:232:23\n+  --> $DIR/where-allowed.rs:233:23\n    |\n LL | impl <T = impl Debug> T {}\n    |                       ^ impl requires a nominal type"}]}