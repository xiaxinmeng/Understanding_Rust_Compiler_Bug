{"sha": "64df759418a83fd05fab850b8351fcddbdd3ef63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZGY3NTk0MThhODNmZDA1ZmFiODUwYjgzNTFmY2RkYmRkM2VmNjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T14:33:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T14:42:56Z"}, "message": "Make ImplData's fields public", "tree": {"sha": "2b1d06598328b9d1922e83c791f181b5789eb789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b1d06598328b9d1922e83c791f181b5789eb789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64df759418a83fd05fab850b8351fcddbdd3ef63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64df759418a83fd05fab850b8351fcddbdd3ef63", "html_url": "https://github.com/rust-lang/rust/commit/64df759418a83fd05fab850b8351fcddbdd3ef63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64df759418a83fd05fab850b8351fcddbdd3ef63/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b315f05cf160a11b9012fcde2a9aefc240e39135", "url": "https://api.github.com/repos/rust-lang/rust/commits/b315f05cf160a11b9012fcde2a9aefc240e39135", "html_url": "https://github.com/rust-lang/rust/commit/b315f05cf160a11b9012fcde2a9aefc240e39135"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "3daf7488ed413011b7f187c9da55631a873305f5", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=64df759418a83fd05fab850b8351fcddbdd3ef63", "patch": "@@ -10,9 +10,9 @@ use hir_def::{\n     adt::VariantData,\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n+    data::TraitData,\n     nameres::per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n-    traits::TraitData,\n     type_ref::TypeRef,\n     ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n     ModuleId, UnionId,"}, {"sha": "334eeebacd9a9f2428bbb4e670e2d8ae1f3473de", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=64df759418a83fd05fab850b8351fcddbdd3ef63", "patch": "@@ -18,11 +18,11 @@ impl HasSource for ImplBlock {\n \n impl ImplBlock {\n     pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n-        db.impl_data(self.id).target_trait().cloned()\n+        db.impl_data(self.id).target_trait.clone()\n     }\n \n     pub fn target_type(&self, db: &impl DefDatabase) -> TypeRef {\n-        db.impl_data(self.id).target_type().clone()\n+        db.impl_data(self.id).target_type.clone()\n     }\n \n     pub fn target_ty(&self, db: &impl HirDatabase) -> Ty {\n@@ -35,11 +35,11 @@ impl ImplBlock {\n     }\n \n     pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {\n-        db.impl_data(self.id).items().iter().map(|it| (*it).into()).collect()\n+        db.impl_data(self.id).items.iter().map(|it| (*it).into()).collect()\n     }\n \n     pub fn is_negative(&self, db: &impl DefDatabase) -> bool {\n-        db.impl_data(self.id).is_negative()\n+        db.impl_data(self.id).is_negative\n     }\n \n     pub fn module(&self, db: &impl DefDatabase) -> Module {"}, {"sha": "6e07ab86e89c868eb60e92b2782762890bf27a4c", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=64df759418a83fd05fab850b8351fcddbdd3ef63", "patch": "@@ -22,7 +22,7 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n use hir_def::{\n-    function::FunctionData,\n+    data::FunctionData,\n     path::known,\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},"}, {"sha": "ba47629db33bd2151144c7995be6578e9ccc36a9", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64df759418a83fd05fab850b8351fcddbdd3ef63/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=64df759418a83fd05fab850b8351fcddbdd3ef63", "patch": "@@ -1,3 +1,5 @@\n+//! Contains basic data about various HIR declarations.\n+\n use std::sync::Arc;\n \n use hir_expand::{\n@@ -135,10 +137,10 @@ impl TraitData {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImplData {\n-    target_trait: Option<TypeRef>,\n-    target_type: TypeRef,\n-    items: Vec<AssocItemId>,\n-    negative: bool,\n+    pub target_trait: Option<TypeRef>,\n+    pub target_type: TypeRef,\n+    pub items: Vec<AssocItemId>,\n+    pub is_negative: bool,\n }\n \n impl ImplData {\n@@ -148,7 +150,7 @@ impl ImplData {\n \n         let target_trait = src.value.target_trait().map(TypeRef::from_ast);\n         let target_type = TypeRef::from_ast_opt(src.value.target_type());\n-        let negative = src.value.is_negative();\n+        let is_negative = src.value.is_negative();\n \n         let items = if let Some(item_list) = src.value.item_list() {\n             item_list\n@@ -184,23 +186,7 @@ impl ImplData {\n             Vec::new()\n         };\n \n-        let res = ImplData { target_trait, target_type, items, negative };\n+        let res = ImplData { target_trait, target_type, items, is_negative };\n         Arc::new(res)\n     }\n-\n-    pub fn target_trait(&self) -> Option<&TypeRef> {\n-        self.target_trait.as_ref()\n-    }\n-\n-    pub fn target_type(&self) -> &TypeRef {\n-        &self.target_type\n-    }\n-\n-    pub fn items(&self) -> &[AssocItemId] {\n-        &self.items\n-    }\n-\n-    pub fn is_negative(&self) -> bool {\n-        self.negative\n-    }\n }"}]}