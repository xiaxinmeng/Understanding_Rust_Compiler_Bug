{"sha": "4b176b2ce21f23d751202533cd55e7e104778e62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTc2YjJjZTIxZjIzZDc1MTIwMjUzM2NkNTVlN2UxMDQ3NzhlNjI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-06-08T23:21:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-08T23:21:00Z"}, "message": "Rollup merge of #51360 - estebank:braces-around-literal-structs, r=nikomatsakis\n\nSuggest parentheses when a struct literal needs them\n\nWhen writing a struct literal in an expression that expects a block to\nbe started afterwards (like an `if` statement), do not suggest using the\nsame struct literal:\n\n```\ndid you mean `S { /* fields * /}`?\n```\n\nInstead, suggest surrounding the expression with parentheses:\n\n```\ndid you mean `(S { /* fields * /})`?\n```\n\nFix #47360, #50090. Leaving #42982 open to come back to this problem with a better solution.", "tree": {"sha": "b2ce9f52bcdb4c1d3d3874209f012b8501ee5eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2ce9f52bcdb4c1d3d3874209f012b8501ee5eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b176b2ce21f23d751202533cd55e7e104778e62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbGw9cCRBK7hj4Ov3rIwAAdHIIAKaL3xoztc5DEobFx1oFdXQv\nUvDEs4lg9f4tdCiXjhUXa/WSa6xcAl42+vPUqSirIhhrE7WzBEsA+6K6DArY+gu/\nyIVmMwW3g0CH4MozapNBewDcRuMpWkgd1w/8z3TEb+JhVqrkSMYYfTzvM+QXM+FK\nNIoW3VH+aBFVZAz4A8gzRCuRy3bGcakAS4k2zECZLCyrny0EsbeJBty4THODUakC\nFBfin9cZlCTj2n/673vPJkC78rqbZRAll88VX+LdUtyzNE0q5X8sEFAfDyUpcKUD\n+WtssfHCuY7ss14tZQu/0XZb9G34yMRc0zCGXCMkvcNRbi5GBNNLL5DdbyfsDw0=\n=IoRx\n-----END PGP SIGNATURE-----\n", "payload": "tree b2ce9f52bcdb4c1d3d3874209f012b8501ee5eaf\nparent d68098a43ef31f9b2880ad660879da17b417f869\nparent 377cf44b4e52f5bf0f50b0c344bda71d810f0b8a\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1528500060 -0600\ncommitter GitHub <noreply@github.com> 1528500060 -0600\n\nRollup merge of #51360 - estebank:braces-around-literal-structs, r=nikomatsakis\n\nSuggest parentheses when a struct literal needs them\n\nWhen writing a struct literal in an expression that expects a block to\nbe started afterwards (like an `if` statement), do not suggest using the\nsame struct literal:\n\n```\ndid you mean `S { /* fields * /}`?\n```\n\nInstead, suggest surrounding the expression with parentheses:\n\n```\ndid you mean `(S { /* fields * /})`?\n```\n\nFix #47360, #50090. Leaving #42982 open to come back to this problem with a better solution.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b176b2ce21f23d751202533cd55e7e104778e62", "html_url": "https://github.com/rust-lang/rust/commit/4b176b2ce21f23d751202533cd55e7e104778e62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b176b2ce21f23d751202533cd55e7e104778e62/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68098a43ef31f9b2880ad660879da17b417f869", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68098a43ef31f9b2880ad660879da17b417f869", "html_url": "https://github.com/rust-lang/rust/commit/d68098a43ef31f9b2880ad660879da17b417f869"}, {"sha": "377cf44b4e52f5bf0f50b0c344bda71d810f0b8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/377cf44b4e52f5bf0f50b0c344bda71d810f0b8a", "html_url": "https://github.com/rust-lang/rust/commit/377cf44b4e52f5bf0f50b0c344bda71d810f0b8a"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "7bb7f2fffbc694e165c47364243619d7b5a2d038", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4b176b2ce21f23d751202533cd55e7e104778e62/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b176b2ce21f23d751202533cd55e7e104778e62/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4b176b2ce21f23d751202533cd55e7e104778e62", "patch": "@@ -2934,8 +2934,38 @@ impl<'a> Resolver<'a> {\n                                                               here due to private fields\"));\n                             }\n                         } else {\n-                            err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n-                                                         path_str));\n+                            // HACK(estebank): find a better way to figure out that this was a\n+                            // parser issue where a struct literal is being used on an expression\n+                            // where a brace being opened means a block is being started. Look\n+                            // ahead for the next text to see if `span` is followed by a `{`.\n+                            let cm = this.session.codemap();\n+                            let mut sp = span;\n+                            loop {\n+                                sp = cm.next_point(sp);\n+                                match cm.span_to_snippet(sp) {\n+                                    Ok(ref snippet) => {\n+                                        if snippet.chars().any(|c| { !c.is_whitespace() }) {\n+                                            break;\n+                                        }\n+                                    }\n+                                    _ => break,\n+                                }\n+                            }\n+                            let followed_by_brace = match cm.span_to_snippet(sp) {\n+                                Ok(ref snippet) if snippet == \"{\" => true,\n+                                _ => false,\n+                            };\n+                            if let (PathSource::Expr(None), true) = (source, followed_by_brace) {\n+                                err.span_label(\n+                                    span,\n+                                    format!(\"did you mean `({} {{ /* fields */ }})`?\", path_str),\n+                                );\n+                            } else {\n+                                err.span_label(\n+                                    span,\n+                                    format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str),\n+                                );\n+                            }\n                         }\n                         return (err, candidates);\n                     }"}, {"sha": "7d71499d3186b2839158eb63b3b01cf9971236e2", "filename": "src/test/ui/error-codes/E0423.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4b176b2ce21f23d751202533cd55e7e104778e62/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b176b2ce21f23d751202533cd55e7e104778e62/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs?ref=4b176b2ce21f23d751202533cd55e7e104778e62", "patch": "@@ -13,3 +13,22 @@ fn main () {\n \n     let f = Foo(); //~ ERROR E0423\n }\n+\n+fn bar() {\n+    struct S { x: i32, y: i32 }\n+    #[derive(PartialEq)]\n+    struct T {}\n+\n+    if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+    //~^ ERROR E0423\n+    //~|  expected type, found `1`\n+    if T {} == T {} { println!(\"Ok\"); }\n+    //~^ ERROR E0423\n+    //~| ERROR expected expression, found `==`\n+}\n+\n+fn foo() {\n+    for _ in std::ops::Range { start: 0, end: 10 } {}\n+    //~^ ERROR E0423\n+    //~| ERROR expected type, found `0`\n+}"}, {"sha": "477c698ac9af1be647489fab6eac8f67d8fae0ad", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4b176b2ce21f23d751202533cd55e7e104778e62/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b176b2ce21f23d751202533cd55e7e104778e62/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=4b176b2ce21f23d751202533cd55e7e104778e62", "patch": "@@ -1,9 +1,48 @@\n+error: expected type, found `1`\n+  --> $DIR/E0423.rs:22:39\n+   |\n+LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+   |                                       ^ expecting a type here because of type ascription\n+\n+error: expected expression, found `==`\n+  --> $DIR/E0423.rs:25:13\n+   |\n+LL |     if T {} == T {} { println!(\"Ok\"); }\n+   |             ^^ expected expression\n+\n+error: expected type, found `0`\n+  --> $DIR/E0423.rs:31:39\n+   |\n+LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n+   |                                       ^ expecting a type here because of type ascription\n+\n error[E0423]: expected function, found struct `Foo`\n   --> $DIR/E0423.rs:14:13\n    |\n LL |     let f = Foo(); //~ ERROR E0423\n-   |             ^^^ did you mean `Foo { /* fields */ }`?\n+   |             ^^^\n+   |             |\n+   |             did you mean `foo`?\n+   |             did you mean `Foo { /* fields */ }`?\n+\n+error[E0423]: expected value, found struct `S`\n+  --> $DIR/E0423.rs:22:32\n+   |\n+LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+   |                                ^ did you mean `(S { /* fields */ })`?\n+\n+error[E0423]: expected value, found struct `T`\n+  --> $DIR/E0423.rs:25:8\n+   |\n+LL |     if T {} == T {} { println!(\"Ok\"); }\n+   |        ^ did you mean `(T { /* fields */ })`?\n+\n+error[E0423]: expected value, found struct `std::ops::Range`\n+  --> $DIR/E0423.rs:31:14\n+   |\n+LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n+   |              ^^^^^^^^^^^^^^^ did you mean `(std::ops::Range { /* fields */ })`?\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}]}