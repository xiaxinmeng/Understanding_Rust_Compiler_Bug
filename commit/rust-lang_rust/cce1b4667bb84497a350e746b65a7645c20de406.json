{"sha": "cce1b4667bb84497a350e746b65a7645c20de406", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZTFiNDY2N2JiODQ0OTdhMzUwZTc0NmI2NWE3NjQ1YzIwZGU0MDY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T15:02:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T15:16:41Z"}, "message": "Add look-ahead to parser object", "tree": {"sha": "0a90ff28e0146b7aae22ce7c5bc0ea30c75d956b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a90ff28e0146b7aae22ce7c5bc0ea30c75d956b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cce1b4667bb84497a350e746b65a7645c20de406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cce1b4667bb84497a350e746b65a7645c20de406", "html_url": "https://github.com/rust-lang/rust/commit/cce1b4667bb84497a350e746b65a7645c20de406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cce1b4667bb84497a350e746b65a7645c20de406/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca67f95cb98fa54192ba6a136c32d4fab51807b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca67f95cb98fa54192ba6a136c32d4fab51807b", "html_url": "https://github.com/rust-lang/rust/commit/dca67f95cb98fa54192ba6a136c32d4fab51807b"}], "stats": {"total": 82, "additions": 48, "deletions": 34}, "files": [{"sha": "8156dfbda4153f04535854586c85fdaad6774d99", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/cce1b4667bb84497a350e746b65a7645c20de406/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce1b4667bb84497a350e746b65a7645c20de406/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=cce1b4667bb84497a350e746b65a7645c20de406", "patch": "@@ -34,26 +34,28 @@ fn next_node_id(&parse_sess sess) -> node_id {\n \n type parser =\n     obj {\n-        fn peek() -> token::token ;\n-        fn bump() ;\n-        fn fatal(str) -> !  ;\n+        fn peek() -> token::token;\n+        fn bump();\n+        fn look_ahead(uint) -> token::token;\n+        fn fatal(str) -> !;\n         fn warn(str);\n-        fn restrict(restriction) ;\n-        fn get_restriction() -> restriction ;\n-        fn get_file_type() -> file_type ;\n+        fn restrict(restriction);\n+        fn get_restriction() -> restriction;\n+        fn get_file_type() -> file_type;\n         fn get_cfg() -> ast::crate_cfg;\n-        fn get_span() -> span ;\n-        fn get_lo_pos() -> uint ;\n-        fn get_hi_pos() -> uint ;\n-        fn get_last_lo_pos() -> uint ;\n-        fn get_prec_table() -> @op_spec[] ;\n-        fn get_str(token::str_num) -> str ;\n-        fn get_reader() -> lexer::reader ;\n-        fn get_filemap() -> codemap::filemap ;\n-        fn get_bad_expr_words() -> hashmap[str, ()] ;\n-        fn get_chpos() -> uint ;\n-        fn get_byte_pos() -> uint ;\n-        fn get_id() -> node_id ;\n+        fn get_span() -> span;\n+        fn get_lo_pos() -> uint;\n+        fn get_hi_pos() -> uint;\n+        fn get_last_lo_pos() -> uint;\n+        fn get_last_hi_pos() -> uint;\n+        fn get_prec_table() -> @op_spec[];\n+        fn get_str(token::str_num) -> str;\n+        fn get_reader() -> lexer::reader;\n+        fn get_filemap() -> codemap::filemap;\n+        fn get_bad_expr_words() -> hashmap[str, ()];\n+        fn get_chpos() -> uint;\n+        fn get_byte_pos() -> uint;\n+        fn get_id() -> node_id;\n         fn get_sess() -> parse_sess;\n     };\n \n@@ -77,23 +79,33 @@ fn new_parser(parse_sess sess, ast::crate_cfg cfg, lexer::reader rdr,\n                      ast::crate_cfg cfg,\n                      file_type ftype,\n                      mutable token::token tok,\n-                     mutable uint lo,\n-                     mutable uint hi,\n-                     mutable uint last_lo,\n+                     mutable span tok_span,\n+                     mutable span last_tok_span,\n+                     mutable tup(token::token, span)[] buffer,\n                      mutable restriction restr,\n                      lexer::reader rdr,\n                      @op_spec[] precs,\n                      hashmap[str, ()] bad_words) {\n         fn peek() -> token::token { ret tok; }\n         fn bump() {\n-            // log rdr.get_filename()\n-            //   + \":\" + common::istr(lo.line as int);\n-\n-            last_lo = lo;\n-            auto next = lexer::next_token(rdr);\n-            tok = next._0;\n-            lo = next._1;\n-            hi = rdr.get_chpos();\n+            last_tok_span = tok_span;\n+            if ivec::len(buffer) == 0u {\n+                auto next = lexer::next_token(rdr);\n+                tok = next._0;\n+                tok_span = rec(lo=next._1, hi=rdr.get_chpos());\n+            } else {\n+                auto next = ivec::pop(buffer);\n+                tok = next._0;\n+                tok_span = next._1;\n+            }\n+        }\n+        fn look_ahead(uint distance) -> token::token {\n+            while ivec::len(buffer) < distance {\n+                auto next = lexer::next_token(rdr);\n+                buffer =\n+                    ~[tup(next._0, rec(lo=next._1, hi=rdr.get_chpos()))] + buffer;\n+            }\n+            ret buffer.(distance-1u)._0;\n         }\n         fn fatal(str m) -> ! {\n             codemap::emit_error(some(self.get_span()), m, sess.cm);\n@@ -104,10 +116,11 @@ fn new_parser(parse_sess sess, ast::crate_cfg cfg, lexer::reader rdr,\n         }\n         fn restrict(restriction r) { restr = r; }\n         fn get_restriction() -> restriction { ret restr; }\n-        fn get_span() -> span { ret rec(lo=lo, hi=hi); }\n-        fn get_lo_pos() -> uint { ret lo; }\n-        fn get_hi_pos() -> uint { ret hi; }\n-        fn get_last_lo_pos() -> uint { ret last_lo; }\n+        fn get_span() -> span { ret tok_span; }\n+        fn get_lo_pos() -> uint { ret tok_span.lo; }\n+        fn get_hi_pos() -> uint { ret tok_span.hi; }\n+        fn get_last_lo_pos() -> uint { ret last_tok_span.lo; }\n+        fn get_last_hi_pos() -> uint { ret last_tok_span.hi; }\n         fn get_file_type() -> file_type { ret ftype; }\n         fn get_cfg() -> ast::crate_cfg { ret cfg; }\n         fn get_prec_table() -> @op_spec[] { ret precs; }\n@@ -124,8 +137,9 @@ fn new_parser(parse_sess sess, ast::crate_cfg cfg, lexer::reader rdr,\n     }\n \n     auto tok0 = lexer::next_token(rdr);\n+    auto span0 = rec(lo=tok0._1, hi=rdr.get_chpos());\n     ret stdio_parser(sess, cfg, ftype, tok0._0,\n-                     tok0._1, tok0._1, tok0._1, UNRESTRICTED, rdr,\n+                     span0, span0, ~[], UNRESTRICTED, rdr,\n                      prec_table(), bad_expr_word_table());\n }\n "}]}