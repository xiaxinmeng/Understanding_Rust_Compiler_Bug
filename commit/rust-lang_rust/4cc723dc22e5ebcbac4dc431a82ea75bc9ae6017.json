{"sha": "4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYzcyM2RjMjJlNWViY2JhYzRkYzQzMWE4MmVhNzViYzlhZTYwMTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-21T12:22:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-23T14:15:39Z"}, "message": "native: be more const correct with the FFI calls.\n\nThese calls are mutating their argument and so it's bad behaviour to be\npretending that the values are immutable to rustc.", "tree": {"sha": "3e80843e9e8656afe2b13a8aaa984ed2b396d76a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e80843e9e8656afe2b13a8aaa984ed2b396d76a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "html_url": "https://github.com/rust-lang/rust/commit/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b246fda78858e55295ab72bde7ced9af4cbdaf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b246fda78858e55295ab72bde7ced9af4cbdaf6", "html_url": "https://github.com/rust-lang/rust/commit/8b246fda78858e55295ab72bde7ced9af4cbdaf6"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "ff617e5a230ed53c3b8d309962e2ebd0a059ee99", "filename": "src/libnative/io/addrinfo.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017/src%2Flibnative%2Fio%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017/src%2Flibnative%2Fio%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Faddrinfo.rs?ref=4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "patch": "@@ -14,7 +14,7 @@ use std::cast;\n use std::io::IoError;\n use std::libc;\n use std::libc::{c_char, c_int};\n-use std::ptr::null;\n+use std::ptr::{null, mut_null};\n \n use super::net::sockaddr_to_addr;\n \n@@ -42,13 +42,13 @@ impl GetAddrInfoRequest {\n         });\n \n         let hint_ptr = hint.as_ref().map_or(null(), |x| x as *libc::addrinfo);\n-        let res = null();\n+        let mut res = mut_null();\n \n         // Make the call\n         let s = unsafe {\n             let ch = if c_host.is_null() { null() } else { c_host.with_ref(|x| x) };\n             let cs = if c_serv.is_null() { null() } else { c_serv.with_ref(|x| x) };\n-            getaddrinfo(ch, cs, hint_ptr, &res)\n+            getaddrinfo(ch, cs, hint_ptr, &mut res)\n         };\n \n         // Error?\n@@ -74,7 +74,7 @@ impl GetAddrInfoRequest {\n                     flags: (*rp).ai_flags as uint\n                 });\n \n-                rp = (*rp).ai_next;\n+                rp = (*rp).ai_next as *mut libc::addrinfo;\n             }\n         }\n \n@@ -86,8 +86,8 @@ impl GetAddrInfoRequest {\n \n extern \"system\" {\n     fn getaddrinfo(node: *c_char, service: *c_char,\n-                   hints: *libc::addrinfo, res: **libc::addrinfo) -> c_int;\n-    fn freeaddrinfo(res: *libc::addrinfo);\n+                   hints: *libc::addrinfo, res: *mut *mut libc::addrinfo) -> c_int;\n+    fn freeaddrinfo(res: *mut libc::addrinfo);\n     #[cfg(not(windows))]\n     fn gai_strerror(errcode: c_int) -> *c_char;\n     #[cfg(windows)]"}, {"sha": "27430ddee97eb7b3e8102dd108e88594b4c6ef20", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "patch": "@@ -91,7 +91,7 @@ impl FileDesc {\n         #[cfg(not(windows))] type rlen = libc::size_t;\n         let ret = retry(|| unsafe {\n             libc::read(self.fd(),\n-                       buf.as_ptr() as *mut libc::c_void,\n+                       buf.as_mut_ptr() as *mut libc::c_void,\n                        buf.len() as rlen) as libc::c_int\n         });\n         if ret == 0 {"}, {"sha": "d71f7544225c6c7cb0b4505fcf725e399e2baac9", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=4cc723dc22e5ebcbac4dc431a82ea75bc9ae6017", "patch": "@@ -309,7 +309,7 @@ impl rtio::RtioTcpStream for TcpStream {\n         let ret = retry(|| {\n             unsafe {\n                 libc::recv(self.fd(),\n-                           buf.as_ptr() as *mut libc::c_void,\n+                           buf.as_mut_ptr() as *mut libc::c_void,\n                            buf.len() as wrlen,\n                            0) as libc::c_int\n             }"}]}