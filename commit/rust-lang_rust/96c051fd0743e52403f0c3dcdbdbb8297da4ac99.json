{"sha": "96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "node_id": "C_kwDOAAsO6NoAKDk2YzA1MWZkMDc0M2U1MjQwM2YwYzNkY2RiZGJiODI5N2RhNGFjOTk", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-21T21:14:12Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-29T17:30:25Z"}, "message": "Box TypedefItem, ImplItem, AssocTypeItem variants of ItemKind\n\nThis reduces ItemKind size from 224 bytes to 160 bytes.", "tree": {"sha": "a54c70f13981f2161bdc336035227c166d121302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a54c70f13981f2161bdc336035227c166d121302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "html_url": "https://github.com/rust-lang/rust/commit/96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bf65c7c9275e99084359bc4ace82f21d5d89bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf65c7c9275e99084359bc4ace82f21d5d89bff", "html_url": "https://github.com/rust-lang/rust/commit/0bf65c7c9275e99084359bc4ace82f21d5d89bff"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "5fe2c9ab4e37b3bd607a46cce346d437f7f9e569", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -117,15 +117,15 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             attrs: Default::default(),\n             visibility: Inherited,\n             item_id: ItemId::Auto { trait_: trait_def_id, for_: item_def_id },\n-            kind: Box::new(ImplItem(Impl {\n+            kind: Box::new(ImplItem(Box::new(Impl {\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n                 trait_: Some(trait_ref.clean(self.cx)),\n                 for_: clean_middle_ty(ty, self.cx, None),\n                 items: Vec::new(),\n                 polarity,\n                 kind: ImplKind::Auto,\n-            })),\n+            }))),\n             cfg: None,\n         })\n     }"}, {"sha": "8aecd9b15e842e2c95253f3da4dc71e917458bf2", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         attrs: Default::default(),\n                         visibility: Inherited,\n                         item_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n-                        kind: Box::new(ImplItem(Impl {\n+                        kind: Box::new(ImplItem(Box::new(Impl {\n                             unsafety: hir::Unsafety::Normal,\n                             generics: clean_ty_generics(\n                                 cx,\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                                 .collect::<Vec<_>>(),\n                             polarity: ty::ImplPolarity::Positive,\n                             kind: ImplKind::Blanket(Box::new(clean_middle_ty(trait_ref.0.self_ty(), cx, None))),\n-                        })),\n+                        }))),\n                         cfg: None,\n                     });\n                 }"}, {"sha": "6547c89440795e22d01e953c83a1819a594b8dab", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -260,15 +260,15 @@ fn build_union(cx: &mut DocContext<'_>, did: DefId) -> clean::Union {\n     clean::Union { generics, fields }\n }\n \n-fn build_type_alias(cx: &mut DocContext<'_>, did: DefId) -> clean::Typedef {\n+fn build_type_alias(cx: &mut DocContext<'_>, did: DefId) -> Box<clean::Typedef> {\n     let predicates = cx.tcx.explicit_predicates_of(did);\n     let type_ = clean_middle_ty(cx.tcx.type_of(did), cx, Some(did));\n \n-    clean::Typedef {\n+    Box::new(clean::Typedef {\n         type_,\n         generics: clean_ty_generics(cx, cx.tcx.generics_of(did), predicates),\n         item_type: None,\n-    }\n+    })\n }\n \n /// Builds all inherent implementations of an ADT (struct/union/enum) or Trait item/path/reexport.\n@@ -493,7 +493,7 @@ pub(crate) fn build_impl(\n     ret.push(clean::Item::from_def_id_and_attrs_and_parts(\n         did,\n         None,\n-        clean::ImplItem(clean::Impl {\n+        clean::ImplItem(Box::new(clean::Impl {\n             unsafety: hir::Unsafety::Normal,\n             generics,\n             trait_,\n@@ -505,7 +505,7 @@ pub(crate) fn build_impl(\n             } else {\n                 ImplKind::Normal\n             },\n-        }),\n+        })),\n         Box::new(merged_attrs),\n         cx,\n         cfg,"}, {"sha": "a216849083c8ea9664f18b441d4e95f73bfb19c3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -1068,11 +1068,11 @@ impl<'tcx> Clean<'tcx, Item> for hir::TraitItem<'tcx> {\n                     let bounds = bounds.iter().filter_map(|x| x.clean(cx)).collect();\n                     let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, default), cx, None);\n                     AssocTypeItem(\n-                        Typedef {\n+                        Box::new(Typedef {\n                             type_: clean_ty(default, cx),\n                             generics,\n                             item_type: Some(item_type),\n-                        },\n+                        }),\n                         bounds,\n                     )\n                 }\n@@ -1109,7 +1109,7 @@ impl<'tcx> Clean<'tcx, Item> for hir::ImplItem<'tcx> {\n                     let generics = self.generics.clean(cx);\n                     let item_type = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);\n                     AssocTypeItem(\n-                        Typedef { type_, generics, item_type: Some(item_type) },\n+                        Box::new(Typedef { type_, generics, item_type: Some(item_type) }),\n                         Vec::new(),\n                     )\n                 }\n@@ -1282,7 +1282,7 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n \n                     if self.defaultness.has_value() {\n                         AssocTypeItem(\n-                            Typedef {\n+                            Box::new(Typedef {\n                                 type_: clean_middle_ty(\n                                     tcx.type_of(self.def_id),\n                                     cx,\n@@ -1291,7 +1291,7 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                                 generics,\n                                 // FIXME: should we obtain the Type from HIR and pass it on here?\n                                 item_type: None,\n-                            },\n+                            }),\n                             bounds,\n                         )\n                     } else {\n@@ -1300,11 +1300,11 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                 } else {\n                     // FIXME: when could this happen? Associated items in inherent impls?\n                     AssocTypeItem(\n-                        Typedef {\n+                        Box::new(Typedef {\n                             type_: clean_middle_ty(tcx.type_of(self.def_id), cx, Some(self.def_id)),\n                             generics: Generics { params: Vec::new(), where_predicates: Vec::new() },\n                             item_type: None,\n-                        },\n+                        }),\n                         Vec::new(),\n                     )\n                 }\n@@ -1949,11 +1949,11 @@ fn clean_maybe_renamed_item<'tcx>(\n             ItemKind::TyAlias(hir_ty, generics) => {\n                 let rustdoc_ty = clean_ty(hir_ty, cx);\n                 let ty = clean_middle_ty(hir_ty_to_ty(cx.tcx, hir_ty), cx, None);\n-                TypedefItem(Typedef {\n+                TypedefItem(Box::new(Typedef {\n                     type_: rustdoc_ty,\n                     generics: generics.clean(cx),\n                     item_type: Some(ty),\n-                })\n+                }))\n             }\n             ItemKind::Enum(ref def, generics) => EnumItem(Enum {\n                 variants: def.variants.iter().map(|v| v.clean(cx)).collect(),\n@@ -2041,7 +2041,7 @@ fn clean_impl<'tcx>(\n         _ => None,\n     });\n     let mut make_item = |trait_: Option<Path>, for_: Type, items: Vec<Item>| {\n-        let kind = ImplItem(Impl {\n+        let kind = ImplItem(Box::new(Impl {\n             unsafety: impl_.unsafety,\n             generics: impl_.generics.clean(cx),\n             trait_,\n@@ -2053,7 +2053,7 @@ fn clean_impl<'tcx>(\n             } else {\n                 ImplKind::Normal\n             },\n-        });\n+        }));\n         Item::from_hir_id_and_parts(hir_id, None, kind, cx)\n     };\n     if let Some(type_alias) = type_alias {"}, {"sha": "ced570c7f932637659a3b546f6dcc062f7486977", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -430,8 +430,8 @@ impl Item {\n         };\n         match kind {\n             ItemKind::ModuleItem(Module { span, .. }) => *span,\n-            ItemKind::ImplItem(Impl { kind: ImplKind::Auto, .. }) => Span::dummy(),\n-            ItemKind::ImplItem(Impl { kind: ImplKind::Blanket(_), .. }) => {\n+            ItemKind::ImplItem(box Impl { kind: ImplKind::Auto, .. }) => Span::dummy(),\n+            ItemKind::ImplItem(box Impl { kind: ImplKind::Blanket(_), .. }) => {\n                 if let ItemId::Blanket { impl_id, .. } = self.item_id {\n                     rustc_span(impl_id, tcx)\n                 } else {\n@@ -732,13 +732,13 @@ pub(crate) enum ItemKind {\n     EnumItem(Enum),\n     FunctionItem(Function),\n     ModuleItem(Module),\n-    TypedefItem(Typedef),\n+    TypedefItem(Box<Typedef>),\n     OpaqueTyItem(OpaqueTy),\n     StaticItem(Static),\n     ConstantItem(Constant),\n     TraitItem(Trait),\n     TraitAliasItem(TraitAlias),\n-    ImplItem(Impl),\n+    ImplItem(Box<Impl>),\n     /// A required method in a trait declaration meaning it's only a function signature.\n     TyMethodItem(Function),\n     /// A method in a trait impl or a provided method in a trait declaration.\n@@ -765,7 +765,7 @@ pub(crate) enum ItemKind {\n     /// The bounds may be non-empty if there is a `where` clause.\n     TyAssocTypeItem(Box<Generics>, Vec<GenericBound>),\n     /// An associated type in a trait impl or a provided one in a trait declaration.\n-    AssocTypeItem(Typedef, Vec<GenericBound>),\n+    AssocTypeItem(Box<Typedef>, Vec<GenericBound>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemKind>),\n     KeywordItem,"}, {"sha": "2b2691e53bbcc900a01f2297a2f44dc82992f5cc", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -536,7 +536,7 @@ enum ParentStackItem {\n impl ParentStackItem {\n     fn new(item: &clean::Item) -> Self {\n         match &*item.kind {\n-            clean::ItemKind::ImplItem(clean::Impl { for_, trait_, generics, kind, .. }) => {\n+            clean::ItemKind::ImplItem(box clean::Impl { for_, trait_, generics, kind, .. }) => {\n                 ParentStackItem::Impl {\n                     for_: for_.clone(),\n                     trait_: trait_.clone(),"}, {"sha": "a262c8f7d1948657041bbbba1d392a042a182ace", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -1160,7 +1160,7 @@ fn render_deref_methods(\n         .items\n         .iter()\n         .find_map(|item| match *item.kind {\n-            clean::AssocTypeItem(ref t, _) => Some(match *t {\n+            clean::AssocTypeItem(box ref t, _) => Some(match *t {\n                 clean::Typedef { item_type: Some(ref type_), .. } => (type_, &t.type_),\n                 _ => (&t.type_, &t.type_),\n             }),\n@@ -2054,7 +2054,7 @@ fn sidebar_deref_methods(\n     debug!(\"found Deref: {:?}\", impl_);\n     if let Some((target, real_target)) =\n         impl_.inner_impl().items.iter().find_map(|item| match *item.kind {\n-            clean::AssocTypeItem(ref t, _) => Some(match *t {\n+            clean::AssocTypeItem(box ref t, _) => Some(match *t {\n                 clean::Typedef { item_type: Some(ref type_), .. } => (type_, &t.type_),\n                 _ => (&t.type_, &t.type_),\n             }),"}, {"sha": "b6ee385a833cbe0b5ed9e38673cb9e359113e0c0", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -568,10 +568,10 @@ impl FromWithTcx<clean::Trait> for Trait {\n     }\n }\n \n-impl FromWithTcx<clean::Impl> for Impl {\n-    fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n+impl FromWithTcx<Box<clean::Impl>> for Impl {\n+    fn from_tcx(impl_: Box<clean::Impl>, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n-        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n+        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = *impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n@@ -721,9 +721,9 @@ pub(crate) fn from_macro_kind(kind: rustc_span::hygiene::MacroKind) -> MacroKind\n     }\n }\n \n-impl FromWithTcx<clean::Typedef> for Typedef {\n-    fn from_tcx(typedef: clean::Typedef, tcx: TyCtxt<'_>) -> Self {\n-        let clean::Typedef { type_, generics, item_type: _ } = typedef;\n+impl FromWithTcx<Box<clean::Typedef>> for Typedef {\n+    fn from_tcx(typedef: Box<clean::Typedef>, tcx: TyCtxt<'_>) -> Self {\n+        let clean::Typedef { type_, generics, item_type: _ } = *typedef;\n         Typedef { type_: type_.into_tcx(tcx), generics: generics.into_tcx(tcx) }\n     }\n }"}, {"sha": "e86f9083394cf55a4857e4cea93621803428043b", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -71,7 +71,7 @@ pub(crate) fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -\n                 | clean::PrimitiveItem(_)\n                 | clean::KeywordItem\n                 // check for trait impl\n-                | clean::ImplItem(clean::Impl { trait_: Some(_), .. })\n+                | clean::ImplItem(box clean::Impl { trait_: Some(_), .. })\n         )\n     {\n         return false;"}, {"sha": "6b699c7901434c8afe5a2bf37e2a4c2cc6977bf2", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c051fd0743e52403f0c3dcdbdbb8297da4ac99/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "patch": "@@ -146,7 +146,7 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n \n     // scan through included items ahead of time to splice in Deref targets to the \"valid\" sets\n     for it in new_items_external.iter().chain(new_items_local.iter()) {\n-        if let ImplItem(Impl { ref for_, ref trait_, ref items, .. }) = *it.kind {\n+        if let ImplItem(box Impl { ref for_, ref trait_, ref items, .. }) = *it.kind {\n             if trait_.as_ref().map(|t| t.def_id()) == cx.tcx.lang_items().deref_trait()\n                 && cleaner.keep_impl(for_, true)\n             {\n@@ -187,7 +187,7 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n \n     // Filter out external items that are not needed\n     new_items_external.retain(|it| {\n-        if let ImplItem(Impl { ref for_, ref trait_, ref kind, .. }) = *it.kind {\n+        if let ImplItem(box Impl { ref for_, ref trait_, ref kind, .. }) = *it.kind {\n             cleaner.keep_impl(\n                 for_,\n                 trait_.as_ref().map(|t| t.def_id()) == cx.tcx.lang_items().deref_trait(),"}]}