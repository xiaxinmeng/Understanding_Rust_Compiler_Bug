{"sha": "c4a451e5af8ed1153a5a7a127c594265bd44e624", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YTQ1MWU1YWY4ZWQxMTUzYTVhN2ExMjdjNTk0MjY1YmQ0NGU2MjQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-11T21:02:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:22:44Z"}, "message": "Make QueryCache generic on the context.", "tree": {"sha": "9dca2e135e5dcd79b346ef99b6b757bb85c20717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dca2e135e5dcd79b346ef99b6b757bb85c20717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a451e5af8ed1153a5a7a127c594265bd44e624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a451e5af8ed1153a5a7a127c594265bd44e624", "html_url": "https://github.com/rust-lang/rust/commit/c4a451e5af8ed1153a5a7a127c594265bd44e624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a451e5af8ed1153a5a7a127c594265bd44e624/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c3177b31ab56fa00ca919ad3154a7c12348b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c3177b31ab56fa00ca919ad3154a7c12348b94", "html_url": "https://github.com/rust-lang/rust/commit/57c3177b31ab56fa00ca919ad3154a7c12348b94"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "f740fada1e529d222cb016104537292ce01ac935", "filename": "src/librustc/ty/query/caches.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs?ref=c4a451e5af8ed1153a5a7a127c594265bd44e624", "patch": "@@ -1,18 +1,18 @@\n use crate::dep_graph::DepNodeIndex;\n+use crate::ty::query::config::QueryContext;\n use crate::ty::query::plumbing::{QueryLookup, QueryState, QueryStateShard};\n-use crate::ty::TyCtxt;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sharded::Sharded;\n use std::default::Default;\n use std::hash::Hash;\n use std::marker::PhantomData;\n \n-pub(crate) trait CacheSelector<K, V> {\n-    type Cache: QueryCache<Key = K, Value = V>;\n+pub(crate) trait CacheSelector<CTX: QueryContext, K, V> {\n+    type Cache: QueryCache<CTX, Key = K, Value = V>;\n }\n \n-pub(crate) trait QueryCache: Default {\n+pub(crate) trait QueryCache<CTX: QueryContext>: Default {\n     type Key;\n     type Value;\n     type Sharded: Default;\n@@ -21,9 +21,9 @@ pub(crate) trait QueryCache: Default {\n     /// It returns the shard index and a lock guard to the shard,\n     /// which will be used if the query is not in the cache and we need\n     /// to compute it.\n-    fn lookup<'tcx, R, GetCache, OnHit, OnMiss>(\n+    fn lookup<R, GetCache, OnHit, OnMiss>(\n         &self,\n-        state: &'tcx QueryState<TyCtxt<'tcx>, Self>,\n+        state: &QueryState<CTX, Self>,\n         get_cache: GetCache,\n         key: Self::Key,\n         // `on_hit` can be called while holding a lock to the query state shard.\n@@ -32,14 +32,14 @@ pub(crate) trait QueryCache: Default {\n     ) -> R\n     where\n         GetCache: for<'a> Fn(\n-            &'a mut QueryStateShard<TyCtxt<'tcx>, Self::Key, Self::Sharded>,\n+            &'a mut QueryStateShard<CTX, Self::Key, Self::Sharded>,\n         ) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&Self::Value, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(Self::Key, QueryLookup<'tcx, TyCtxt<'tcx>, Self::Key, Self::Sharded>) -> R;\n+        OnMiss: FnOnce(Self::Key, QueryLookup<'_, CTX, Self::Key, Self::Sharded>) -> R;\n \n     fn complete(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: Self::Key,\n         value: Self::Value,\n@@ -58,7 +58,7 @@ pub(crate) trait QueryCache: Default {\n \n pub struct DefaultCacheSelector;\n \n-impl<K: Eq + Hash, V: Clone> CacheSelector<K, V> for DefaultCacheSelector {\n+impl<CTX: QueryContext, K: Eq + Hash, V: Clone> CacheSelector<CTX, K, V> for DefaultCacheSelector {\n     type Cache = DefaultCache<K, V>;\n }\n \n@@ -70,26 +70,25 @@ impl<K, V> Default for DefaultCache<K, V> {\n     }\n }\n \n-impl<K: Eq + Hash, V: Clone> QueryCache for DefaultCache<K, V> {\n+impl<CTX: QueryContext, K: Eq + Hash, V: Clone> QueryCache<CTX> for DefaultCache<K, V> {\n     type Key = K;\n     type Value = V;\n     type Sharded = FxHashMap<K, (V, DepNodeIndex)>;\n \n     #[inline(always)]\n-    fn lookup<'tcx, R, GetCache, OnHit, OnMiss>(\n+    fn lookup<R, GetCache, OnHit, OnMiss>(\n         &self,\n-        state: &'tcx QueryState<TyCtxt<'tcx>, Self>,\n+        state: &QueryState<CTX, Self>,\n         get_cache: GetCache,\n         key: K,\n         on_hit: OnHit,\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        GetCache: for<'a> Fn(\n-            &'a mut QueryStateShard<TyCtxt<'tcx>, K, Self::Sharded>,\n-        ) -> &'a mut Self::Sharded,\n+        GetCache:\n+            for<'a> Fn(&'a mut QueryStateShard<CTX, K, Self::Sharded>) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(K, QueryLookup<'tcx, TyCtxt<'tcx>, K, Self::Sharded>) -> R,\n+        OnMiss: FnOnce(K, QueryLookup<'_, CTX, K, Self::Sharded>) -> R,\n     {\n         let mut lookup = state.get_lookup(&key);\n         let lock = &mut *lookup.lock;\n@@ -102,7 +101,7 @@ impl<K: Eq + Hash, V: Clone> QueryCache for DefaultCache<K, V> {\n     #[inline]\n     fn complete(\n         &self,\n-        _: TyCtxt<'tcx>,\n+        _: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: K,\n         value: V,"}, {"sha": "fd2f855d5b1379a6f26621595dcf153c70f9409d", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=c4a451e5af8ed1153a5a7a127c594265bd44e624", "patch": "@@ -38,7 +38,7 @@ pub(crate) trait QueryAccessors<CTX: QueryContext>: QueryConfig<CTX> {\n     const EVAL_ALWAYS: bool;\n     const DEP_KIND: DepKind;\n \n-    type Cache: QueryCache<Key = Self::Key, Value = Self::Value>;\n+    type Cache: QueryCache<CTX, Key = Self::Key, Value = Self::Value>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_state<'a>(tcx: CTX) -> &'a QueryState<CTX, Self::Cache>;"}, {"sha": "8462610a6b6fc22c9987713d51d8341e4a268f5e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=c4a451e5af8ed1153a5a7a127c594265bd44e624", "patch": "@@ -51,14 +51,14 @@ impl<CTX: QueryContext, K, C: Default> Default for QueryStateShard<CTX, K, C> {\n     }\n }\n \n-pub(crate) struct QueryState<CTX: QueryContext, C: QueryCache> {\n+pub(crate) struct QueryState<CTX: QueryContext, C: QueryCache<CTX>> {\n     cache: C,\n     shards: Sharded<QueryStateShard<CTX, C::Key, C::Sharded>>,\n     #[cfg(debug_assertions)]\n     pub(super) cache_hits: AtomicUsize,\n }\n \n-impl<CTX: QueryContext, C: QueryCache> QueryState<CTX, C> {\n+impl<CTX: QueryContext, C: QueryCache<CTX>> QueryState<CTX, C> {\n     pub(super) fn get_lookup<K2: Hash>(\n         &'tcx self,\n         key: &K2,\n@@ -86,7 +86,7 @@ enum QueryResult<CTX: QueryContext> {\n     Poisoned,\n }\n \n-impl<CTX: QueryContext, C: QueryCache> QueryState<CTX, C> {\n+impl<CTX: QueryContext, C: QueryCache<CTX>> QueryState<CTX, C> {\n     pub(super) fn iter_results<R>(\n         &self,\n         f: impl for<'a> FnOnce(\n@@ -130,7 +130,7 @@ impl<CTX: QueryContext, C: QueryCache> QueryState<CTX, C> {\n     }\n }\n \n-impl<CTX: QueryContext, C: QueryCache> Default for QueryState<CTX, C> {\n+impl<CTX: QueryContext, C: QueryCache<CTX>> Default for QueryState<CTX, C> {\n     fn default() -> QueryState<CTX, C> {\n         QueryState {\n             cache: C::default(),\n@@ -152,7 +152,7 @@ pub(crate) struct QueryLookup<'tcx, CTX: QueryContext, K, C> {\n /// This will poison the relevant query if dropped.\n struct JobOwner<'tcx, CTX: QueryContext, C>\n where\n-    C: QueryCache,\n+    C: QueryCache<CTX>,\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n@@ -161,9 +161,9 @@ where\n     id: QueryJobId,\n }\n \n-impl<'tcx, C: QueryCache> JobOwner<'tcx, TyCtxt<'tcx>, C>\n+impl<'tcx, C> JobOwner<'tcx, TyCtxt<'tcx>, C>\n where\n-    C: QueryCache,\n+    C: QueryCache<TyCtxt<'tcx>> + 'tcx,\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n@@ -176,12 +176,12 @@ where\n     /// This function is inlined because that results in a noticeable speed-up\n     /// for some compile-time benchmarks.\n     #[inline(always)]\n-    fn try_start<Q>(\n+    fn try_start<'a, 'b, Q>(\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n         key: &C::Key,\n-        mut lookup: QueryLookup<'tcx, TyCtxt<'tcx>, C::Key, C::Sharded>,\n-    ) -> TryGetJob<'tcx, C>\n+        mut lookup: QueryLookup<'a, TyCtxt<'tcx>, C::Key, C::Sharded>,\n+    ) -> TryGetJob<'b, TyCtxt<'tcx>, C>\n     where\n         Q: QueryDescription<TyCtxt<'tcx>, Key = C::Key, Value = C::Value, Cache = C>,\n     {\n@@ -262,16 +262,16 @@ where\n     }\n }\n \n-impl<'tcx, CTX: QueryContext, C: QueryCache> JobOwner<'tcx, CTX, C>\n+impl<'tcx, CTX: QueryContext, C> JobOwner<'tcx, CTX, C>\n where\n-    C: QueryCache,\n+    C: QueryCache<CTX>,\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n     #[inline(always)]\n-    fn complete(self, tcx: TyCtxt<'tcx>, result: &C::Value, dep_node_index: DepNodeIndex) {\n+    fn complete(self, tcx: CTX, result: &C::Value, dep_node_index: DepNodeIndex) {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n         let state = self.state;\n@@ -304,7 +304,7 @@ where\n     (result, diagnostics.into_inner())\n }\n \n-impl<'tcx, CTX: QueryContext, C: QueryCache> Drop for JobOwner<'tcx, CTX, C>\n+impl<'tcx, CTX: QueryContext, C: QueryCache<CTX>> Drop for JobOwner<'tcx, CTX, C>\n where\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n@@ -338,13 +338,13 @@ pub(crate) struct CycleError<CTX: QueryContext> {\n }\n \n /// The result of `try_start`.\n-enum TryGetJob<'tcx, C: QueryCache>\n+enum TryGetJob<'tcx, CTX: QueryContext, C: QueryCache<CTX>>\n where\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n     /// The query is not yet started. Contains a guard to the cache eventually used to start it.\n-    NotYetStarted(JobOwner<'tcx, TyCtxt<'tcx>, C>),\n+    NotYetStarted(JobOwner<'tcx, CTX, C>),\n \n     /// The query was already completed.\n     /// Returns the result of the query and its dep-node index\n@@ -504,9 +504,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        C: QueryCache,\n+        C: QueryCache<TyCtxt<'tcx>>,\n         OnHit: FnOnce(&C::Value, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(C::Key, QueryLookup<'tcx, TyCtxt<'tcx>, C::Key, C::Sharded>) -> R,\n+        OnMiss: FnOnce(C::Key, QueryLookup<'_, TyCtxt<'tcx>, C::Key, C::Sharded>) -> R,\n     {\n         state.cache.lookup(\n             state,\n@@ -550,7 +550,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         span: Span,\n         key: Q::Key,\n-        lookup: QueryLookup<'tcx, TyCtxt<'tcx>, Q::Key, <Q::Cache as QueryCache>::Sharded>,\n+        lookup: QueryLookup<\n+            '_,\n+            TyCtxt<'tcx>,\n+            Q::Key,\n+            <Q::Cache as QueryCache<TyCtxt<'tcx>>>::Sharded,\n+        >,\n     ) -> Q::Value {\n         let job = match JobOwner::try_start::<Q>(self, span, &key, lookup) {\n             TryGetJob::NotYetStarted(job) => job,\n@@ -866,14 +871,14 @@ macro_rules! is_eval_always {\n }\n \n macro_rules! query_storage {\n-    ([][$K:ty, $V:ty]) => {\n-        <<$K as Key>::CacheSelector as CacheSelector<$K, $V>>::Cache\n+    (<$tcx:tt>[][$K:ty, $V:ty]) => {\n+        <<$K as Key>::CacheSelector as CacheSelector<TyCtxt<$tcx>, $K, $V>>::Cache\n     };\n-    ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n+    (<$tcx:tt>[storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n         $ty\n     };\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        query_storage!([$($($modifiers)*)*][$($args)*])\n+    (<$tcx:tt>[$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n+        query_storage!(<$tcx>[$($($modifiers)*)*][$($args)*])\n     };\n }\n \n@@ -989,7 +994,7 @@ macro_rules! define_queries_inner {\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n             const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$node;\n \n-            type Cache = query_storage!([$($modifiers)*][$K, $V]);\n+            type Cache = query_storage!(<$tcx>[$($modifiers)*][$K, $V]);\n \n             #[inline(always)]\n             fn query_state<'a>(tcx: TyCtxt<$tcx>) -> &'a QueryState<TyCtxt<$tcx>, Self::Cache> {"}, {"sha": "616fbaafab96286dc16ba610a4e09e7cb0e929c5", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=c4a451e5af8ed1153a5a7a127c594265bd44e624", "patch": "@@ -163,7 +163,7 @@ pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n     query_state: &QueryState<TyCtxt<'tcx>, C>,\n     string_cache: &mut QueryKeyStringCache,\n ) where\n-    C: QueryCache,\n+    C: QueryCache<TyCtxt<'tcx>>,\n     C::Key: Debug + Clone,\n {\n     tcx.prof.with_profiler(|profiler| {"}, {"sha": "a13f00dc6d4eeb18b8a552aaa5e357a78c8de6cc", "filename": "src/librustc/ty/query/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a451e5af8ed1153a5a7a127c594265bd44e624/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs?ref=c4a451e5af8ed1153a5a7a127c594265bd44e624", "patch": "@@ -38,7 +38,7 @@ struct QueryStats {\n     local_def_id_keys: Option<usize>,\n }\n \n-fn stats<CTX: QueryContext, C: QueryCache>(\n+fn stats<CTX: QueryContext, C: QueryCache<CTX>>(\n     name: &'static str,\n     map: &QueryState<CTX, C>,\n ) -> QueryStats {"}]}