{"sha": "8a011b5da2cc289fb7d970492ea4111980676412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMDExYjVkYTJjYzI4OWZiN2Q5NzA0OTJlYTQxMTE5ODA2NzY0MTI=", "commit": {"author": {"name": "sharnoff", "email": "github@max.sharnoff.org", "date": "2020-09-22T18:34:05Z"}, "committer": {"name": "sharnoff", "email": "github@max.sharnoff.org", "date": "2020-09-22T18:34:05Z"}, "message": "minor doc changes, attribute orderings", "tree": {"sha": "a1b35c89c9b0019d965375c5cf7e43c8d691df00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b35c89c9b0019d965375c5cf7e43c8d691df00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a011b5da2cc289fb7d970492ea4111980676412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a011b5da2cc289fb7d970492ea4111980676412", "html_url": "https://github.com/rust-lang/rust/commit/8a011b5da2cc289fb7d970492ea4111980676412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a011b5da2cc289fb7d970492ea4111980676412/comments", "author": {"login": "sharnoff", "id": 29154784, "node_id": "MDQ6VXNlcjI5MTU0Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/29154784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharnoff", "html_url": "https://github.com/sharnoff", "followers_url": "https://api.github.com/users/sharnoff/followers", "following_url": "https://api.github.com/users/sharnoff/following{/other_user}", "gists_url": "https://api.github.com/users/sharnoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharnoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharnoff/subscriptions", "organizations_url": "https://api.github.com/users/sharnoff/orgs", "repos_url": "https://api.github.com/users/sharnoff/repos", "events_url": "https://api.github.com/users/sharnoff/events{/privacy}", "received_events_url": "https://api.github.com/users/sharnoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sharnoff", "id": 29154784, "node_id": "MDQ6VXNlcjI5MTU0Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/29154784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharnoff", "html_url": "https://github.com/sharnoff", "followers_url": "https://api.github.com/users/sharnoff/followers", "following_url": "https://api.github.com/users/sharnoff/following{/other_user}", "gists_url": "https://api.github.com/users/sharnoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharnoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharnoff/subscriptions", "organizations_url": "https://api.github.com/users/sharnoff/orgs", "repos_url": "https://api.github.com/users/sharnoff/repos", "events_url": "https://api.github.com/users/sharnoff/events{/privacy}", "received_events_url": "https://api.github.com/users/sharnoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bc267512fc0cb49c86978192857e8187017f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bc267512fc0cb49c86978192857e8187017f0b", "html_url": "https://github.com/rust-lang/rust/commit/e0bc267512fc0cb49c86978192857e8187017f0b"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "1864b5ccf2bc04f93b62ab6db5ad8740e107d916", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a011b5da2cc289fb7d970492ea4111980676412/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a011b5da2cc289fb7d970492ea4111980676412/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=8a011b5da2cc289fb7d970492ea4111980676412", "patch": "@@ -554,8 +554,8 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// a.clear();\n     /// assert!(a.is_empty());\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n         self.base.clear();\n     }\n@@ -746,8 +746,8 @@ where\n     /// assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\n     /// assert_eq!(map.get_key_value(&2), None);\n     /// ```\n-    #[stable(feature = \"map_get_key_value\", since = \"1.40.0\")]\n     #[inline]\n+    #[stable(feature = \"map_get_key_value\", since = \"1.40.0\")]\n     pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n     where\n         K: Borrow<Q>,\n@@ -772,8 +772,8 @@ where\n     /// assert_eq!(map.contains_key(&1), true);\n     /// assert_eq!(map.contains_key(&2), false);\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool\n     where\n         K: Borrow<Q>,\n@@ -800,8 +800,8 @@ where\n     /// }\n     /// assert_eq!(map[&1], \"b\");\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n     where\n         K: Borrow<Q>,\n@@ -834,8 +834,8 @@ where\n     /// assert_eq!(map.insert(37, \"c\"), Some(\"b\"));\n     /// assert_eq!(map[&37], \"c\");\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n         self.base.insert(k, v)\n     }\n@@ -857,8 +857,8 @@ where\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n     where\n         K: Borrow<Q>,\n@@ -886,8 +886,8 @@ where\n     /// assert_eq!(map.remove(&1), None);\n     /// # }\n     /// ```\n-    #[stable(feature = \"hash_map_remove_entry\", since = \"1.27.0\")]\n     #[inline]\n+    #[stable(feature = \"hash_map_remove_entry\", since = \"1.27.0\")]\n     pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>\n     where\n         K: Borrow<Q>,\n@@ -909,8 +909,8 @@ where\n     /// map.retain(|&k, _| k % 2 == 0);\n     /// assert_eq!(map.len(), 4);\n     /// ```\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     #[inline]\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n         F: FnMut(&K, &mut V) -> bool,\n@@ -1542,7 +1542,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n         self.base.get()\n     }\n \n-    /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n+    /// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n@@ -1571,7 +1571,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n         self.base.get_key_value_mut()\n     }\n \n-    /// Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n+    /// Converts the `OccupiedEntry` into a mutable reference to the key and value in the entry\n     /// with a lifetime bound to the map itself.\n     #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n@@ -1609,7 +1609,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n }\n \n impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n-    /// Sets the value of the entry with the VacantEntry's key,\n+    /// Sets the value of the entry with the `VacantEntry`'s key,\n     /// and returns a mutable reference to it.\n     #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n@@ -2072,7 +2072,6 @@ where\n }\n \n impl<'a, K, V> Entry<'a, K, V> {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n     /// a mutable reference to the value in the entry.\n     ///\n@@ -2090,14 +2089,14 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 6);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn or_insert(self, default: V) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n             Vacant(entry) => entry.insert(default),\n         }\n     }\n \n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the result of the default function if empty,\n     /// and returns a mutable reference to the value in the entry.\n     ///\n@@ -2114,14 +2113,14 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n     /// ```\n     #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n             Vacant(entry) => entry.insert(default()),\n         }\n     }\n \n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n     /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n     /// which takes the key as its argument, and returns a mutable reference to the value in the\n     /// entry.\n@@ -2139,6 +2138,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n+    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n@@ -2203,7 +2203,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n-    /// Sets the value of the entry, and returns an OccupiedEntry.\n+    /// Sets the value of the entry, and returns an `OccupiedEntry`.\n     ///\n     /// # Examples\n     ///\n@@ -2230,7 +2230,6 @@ impl<'a, K, V> Entry<'a, K, V> {\n }\n \n impl<'a, K, V: Default> Entry<'a, K, V> {\n-    #[stable(feature = \"entry_or_default\", since = \"1.28.0\")]\n     /// Ensures a value is in the entry by inserting the default value if empty,\n     /// and returns a mutable reference to the value in the entry.\n     ///\n@@ -2247,6 +2246,7 @@ impl<'a, K, V: Default> Entry<'a, K, V> {\n     /// # }\n     /// ```\n     #[inline]\n+    #[stable(feature = \"entry_or_default\", since = \"1.28.0\")]\n     pub fn or_default(self) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),\n@@ -2351,7 +2351,7 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         self.base.get_mut()\n     }\n \n-    /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n+    /// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     ///\n     /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n@@ -2523,7 +2523,7 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n         self.base.into_key()\n     }\n \n-    /// Sets the value of the entry with the VacantEntry's key,\n+    /// Sets the value of the entry with the `VacantEntry`'s key,\n     /// and returns a mutable reference to it.\n     ///\n     /// # Examples\n@@ -2545,8 +2545,8 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n         self.base.insert(value)\n     }\n \n-    /// Sets the value of the entry with the VacantEntry's key,\n-    /// and returns an OccupiedEntry.\n+    /// Sets the value of the entry with the `VacantEntry`'s key,\n+    /// and returns an `OccupiedEntry`.\n     ///\n     /// # Examples\n     ///"}]}