{"sha": "09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "node_id": "C_kwDOAAsO6NoAKDA5Y2IyOWM2NGMyYTBlMTVkZWJmMmQ2ZmNhMmJjN2M3MWE2ODIwMzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-15T21:20:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-15T21:20:49Z"}, "message": "Auto merge of #93439 - abrown:cf-protection, r=nagisa\n\nAdd support for control-flow protection\n\nThis change adds a flag for configuring control-flow protection in the LLVM backend. In Clang, this flag is exposed as `-fcf-protection` with options `none|branch|return|full`. This convention is followed for `rustc`, though as a codegen option: `rustc -Z cf-protection=<none|branch|return|full>`. Tracking issue for future work is #93754.", "tree": {"sha": "df86070b727397e8efc2908e24f90140ed808489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df86070b727397e8efc2908e24f90140ed808489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "html_url": "https://github.com/rust-lang/rust/commit/09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb2856f271fcb647b3cad1b88b29ec97bbab2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb2856f271fcb647b3cad1b88b29ec97bbab2a3", "html_url": "https://github.com/rust-lang/rust/commit/bfb2856f271fcb647b3cad1b88b29ec97bbab2a3"}, {"sha": "8d6c973c7f77e63a9c5d1ce4b7c71a37fcc46f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6c973c7f77e63a9c5d1ce4b7c71a37fcc46f4d", "html_url": "https://github.com/rust-lang/rust/commit/8d6c973c7f77e63a9c5d1ce4b7c71a37fcc46f4d"}], "stats": {"total": 146, "additions": 141, "deletions": 5}, "files": [{"sha": "373ae21d192189ff64ff7fadd78d7942b77186d0", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "patch": "@@ -21,7 +21,8 @@ use rustc_middle::ty::layout::{\n };\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n-use rustc_session::config::{BranchProtection, CFGuard, CrateType, DebugInfo, PAuthKey, PacRet};\n+use rustc_session::config::{BranchProtection, CFGuard, CFProtection};\n+use rustc_session::config::{CrateType, DebugInfo, PAuthKey, PacRet};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -287,6 +288,24 @@ pub unsafe fn create_module<'ll>(\n         );\n     }\n \n+    // Pass on the control-flow protection flags to LLVM (equivalent to `-fcf-protection` in Clang).\n+    if let CFProtection::Branch | CFProtection::Full = sess.opts.debugging_opts.cf_protection {\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Override,\n+            \"cf-protection-branch\\0\".as_ptr().cast(),\n+            1,\n+        )\n+    }\n+    if let CFProtection::Return | CFProtection::Full = sess.opts.debugging_opts.cf_protection {\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            llvm::LLVMModFlagBehavior::Override,\n+            \"cf-protection-return\\0\".as_ptr().cast(),\n+            1,\n+        )\n+    }\n+\n     llmod\n }\n "}, {"sha": "68e7cc3dc98746f2a472bf0a44f8d8e3fd28ad15", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "patch": "@@ -63,6 +63,22 @@ pub enum CFGuard {\n     Checks,\n }\n \n+/// The different settings that the `-Z cf-protection` flag can have.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum CFProtection {\n+    /// Do not enable control-flow protection\n+    None,\n+\n+    /// Emit control-flow protection for branches (enables indirect branch tracking).\n+    Branch,\n+\n+    /// Emit control-flow protection for returns.\n+    Return,\n+\n+    /// Emit control-flow protection for both branches and returns.\n+    Full,\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Hash)]\n pub enum OptLevel {\n     No,         // -O0\n@@ -2630,11 +2646,11 @@ impl PpMode {\n /// we have an opt-in scheme here, so one is hopefully forced to think about\n /// how the hash should be calculated when adding a new command-line argument.\n crate mod dep_tracking {\n-    use super::LdImpl;\n     use super::{\n-        BranchProtection, CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage,\n-        LinkerPluginLto, LocationDetail, LtoCli, OptLevel, OutputType, OutputTypes, Passes,\n-        SourceFileHashAlgorithm, SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n+        InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OptLevel, OutputType,\n+        OutputTypes, Passes, SourceFileHashAlgorithm, SwitchWithOptPath, SymbolManglingVersion,\n+        TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2715,6 +2731,7 @@ crate mod dep_tracking {\n         NativeLibKind,\n         SanitizerSet,\n         CFGuard,\n+        CFProtection,\n         TargetTriple,\n         Edition,\n         LinkerPluginLto,"}, {"sha": "c069144fa9f1c95ded254def6476abfe507743ff", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "patch": "@@ -380,6 +380,7 @@ mod desc {\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n+    pub const parse_cfprotection: &str = \"`none`|`no`|`n` (default), `branch`, `return`, or `full`|`yes`|`y` (equivalent to `branch` and `return`)\";\n     pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n     pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n     pub const parse_optimization_fuel: &str = \"crate=integer\";\n@@ -695,6 +696,25 @@ mod parse {\n         true\n     }\n \n+    crate fn parse_cfprotection(slot: &mut CFProtection, v: Option<&str>) -> bool {\n+        if v.is_some() {\n+            let mut bool_arg = None;\n+            if parse_opt_bool(&mut bool_arg, v) {\n+                *slot = if bool_arg.unwrap() { CFProtection::Full } else { CFProtection::None };\n+                return true;\n+            }\n+        }\n+\n+        *slot = match v {\n+            None | Some(\"none\") => CFProtection::None,\n+            Some(\"branch\") => CFProtection::Branch,\n+            Some(\"return\") => CFProtection::Return,\n+            Some(\"full\") => CFProtection::Full,\n+            Some(_) => return false,\n+        };\n+        true\n+    }\n+\n     crate fn parse_linker_flavor(slot: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n         match v.and_then(LinkerFlavor::from_str) {\n             Some(lf) => *slot = Some(lf),\n@@ -1142,6 +1162,8 @@ options! {\n         \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n     branch_protection: BranchProtection = (BranchProtection::default(), parse_branch_protection, [TRACKED],\n         \"set options for branch target identification and pointer authentication on AArch64\"),\n+    cf_protection: CFProtection = (CFProtection::None, parse_cfprotection, [TRACKED],\n+        \"instrument control-flow architecture protection\"),\n     cgu_partitioning_strategy: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the codegen unit partitioning strategy to use\"),\n     chalk: bool = (false, parse_bool, [TRACKED],"}, {"sha": "cc580ca9b4232ee869a07c809f99ad5850a721f2", "filename": "src/doc/unstable-book/src/compiler-flags/cf-protection.md", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcf-protection.md", "raw_url": "https://github.com/rust-lang/rust/raw/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcf-protection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcf-protection.md?ref=09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "patch": "@@ -0,0 +1,40 @@\n+# `cf-protection`\n+\n+This option enables control-flow enforcement technology (CET) on x86; a more detailed description of\n+CET is available [here]. Similar to `clang`, this flag takes one of the following values:\n+\n+- `none` - Disable CET completely (this is the default).\n+- `branch` - Enable indirect branch tracking (`IBT`).\n+- `return` - Enable shadow stack (`SHSTK`).\n+- `full` - Enable both `branch` and `return`.\n+\n+[here]: https://www.intel.com/content/www/us/en/develop/articles/technical-look-control-flow-enforcement-technology.html\n+\n+This flag only applies to the LLVM backend: it sets the `cf-protection-branch` and\n+`cf-protection-return` flags on LLVM modules. Note, however, that all compiled modules linked\n+together must have the flags set for the compiled output to be CET-enabled. Currently, Rust's\n+standard library does not ship with CET enabled by default, so you may need to rebuild all standard\n+modules with a `cargo` command like:\n+\n+```sh\n+$ RUSTFLAGS=\"-Z cf-protection=full\" RUSTC=\"rustc-custom\" cargo +nightly build -Z build-std --target x86_64-unknown-linux-gnu\n+```\n+\n+### Detection\n+\n+An ELF binary is CET-enabled if it has the `IBT` and `SHSTK` tags, e.g.:\n+\n+```sh\n+$ readelf -a target/x86_64-unknown-linux-gnu/debug/example | grep feature:\n+      Properties: x86 feature: IBT, SHSTK\n+```\n+\n+### Troubleshooting\n+\n+To display modules that are not CET enabled, examine the linker errors available when `cet-report` is enabled:\n+\n+```sh\n+$ RUSTC_LOG=rustc_codegen_ssa::back::link=info rustc-custom -v -Z cf-protection=full -C link-arg=\"-Wl,-z,cet-report=warning\" -o example example.rs\n+...\n+/usr/bin/ld: /.../build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-d73f7266be14cb8b.rlib(std-d73f7266be14cb8b.std.f7443020-cgu.12.rcgu.o): warning: missing IBT and SHSTK properties\n+```"}, {"sha": "ccbc863f57177cf7e156f61565aec96481c27b72", "filename": "src/test/codegen/cf-protection.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/src%2Ftest%2Fcodegen%2Fcf-protection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/src%2Ftest%2Fcodegen%2Fcf-protection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcf-protection.rs?ref=09cb29c64c2a0e15debf2d6fca2bc7c71a682033", "patch": "@@ -0,0 +1,38 @@\n+// Test that the correct module flags are emitted with different control-flow protection flags.\n+\n+// revisions: undefined none branch return full\n+// needs-llvm-components: x86\n+// [undefined] compile-flags:\n+// [none] compile-flags: -Z cf-protection=none\n+// [branch] compile-flags: -Z cf-protection=branch\n+// [return] compile-flags: -Z cf-protection=return\n+// [full] compile-flags: -Z cf-protection=full\n+// compile-flags: --target x86_64-unknown-linux-gnu\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// A basic test function.\n+pub fn test() {\n+}\n+\n+// undefined-NOT: !\"cf-protection-branch\"\n+// undefined-NOT: !\"cf-protection-return\"\n+\n+// none-NOT: !\"cf-protection-branch\"\n+// none-NOT: !\"cf-protection-return\"\n+\n+// branch-NOT: !\"cf-protection-return\"\n+// branch: !\"cf-protection-branch\", i32 1\n+// branch-NOT: !\"cf-protection-return\"\n+\n+// return-NOT: !\"cf-protection-branch\"\n+// return: !\"cf-protection-return\", i32 1\n+// return-NOT: !\"cf-protection-branch\"\n+\n+// full: !\"cf-protection-branch\", i32 1\n+// full: !\"cf-protection-return\", i32 1"}]}