{"sha": "3349e7bb45c18485f1ba090f0f80bda67abd214e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNDllN2JiNDVjMTg0ODVmMWJhMDkwZjBmODBiZGE2N2FiZDIxNGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T10:45:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:36Z"}, "message": "thread the closure-kind through in the closure substs\n\nSimilar to how freshen handled things, but \"always happening\"; we can\nthus remove the corresponding code from `freshen`.", "tree": {"sha": "d4ca86d5eff7043f850118de41fc25cad31b3897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ca86d5eff7043f850118de41fc25cad31b3897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3349e7bb45c18485f1ba090f0f80bda67abd214e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3349e7bb45c18485f1ba090f0f80bda67abd214e", "html_url": "https://github.com/rust-lang/rust/commit/3349e7bb45c18485f1ba090f0f80bda67abd214e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3349e7bb45c18485f1ba090f0f80bda67abd214e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d96819dc0c300a22c08e57051a93652d728931a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d96819dc0c300a22c08e57051a93652d728931a", "html_url": "https://github.com/rust-lang/rust/commit/1d96819dc0c300a22c08e57051a93652d728931a"}], "stats": {"total": 149, "additions": 121, "deletions": 28}, "files": [{"sha": "6d1ede8f1a5debfbfd60ef87dfad92a00b886633", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=3349e7bb45c18485f1ba090f0f80bda67abd214e", "patch": "@@ -253,22 +253,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 self.freshen_closure_like(\n                     def_id, substs, t,\n                     |this| {\n-                        // HACK: use a \"random\" integer type to mark the kind. Because\n-                        // different closure kinds shouldn't get unified during\n-                        // selection, the \"subtyping\" relationship (where any kind is\n-                        // better than no kind) shouldn't  matter here, just that the\n-                        // types are different.\n-                        let closure_kind = this.infcx.closure_kind(def_id);\n-                        let closure_kind_marker = match closure_kind {\n-                            None => tcx.types.i8,\n-                            Some(ty::ClosureKind::Fn) => tcx.types.i16,\n-                            Some(ty::ClosureKind::FnMut) => tcx.types.i32,\n-                            Some(ty::ClosureKind::FnOnce) => tcx.types.i64,\n-                        };\n-\n                         let closure_sig = this.infcx.fn_sig(def_id);\n-                        (tcx.mk_fn_ptr(closure_sig.fold_with(this)),\n-                         closure_kind_marker)\n+                        (tcx.mk_fn_ptr(closure_sig.fold_with(this)), tcx.types.char)\n                     },\n                     |substs| tcx.mk_closure(def_id, substs)\n                 )"}, {"sha": "6aa094d2cd6d7483c078142f42fec337c8d3d652", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=3349e7bb45c18485f1ba090f0f80bda67abd214e", "patch": "@@ -56,7 +56,10 @@ pub enum TypeVariableOrigin {\n     NormalizeProjectionType(Span),\n     TypeInference(Span),\n     TypeParameterDefinition(Span, ast::Name),\n-    TransformedUpvar(Span),\n+\n+    /// one of the upvars or closure kind parameters in a `ClosureSubsts`\n+    /// (before it has been determined)\n+    ClosureSynthetic(Span),\n     SubstitutionPlaceholder(Span),\n     AutoDeref(Span),\n     AdjustmentType(Span),"}, {"sha": "93cb4344cb3b047fa53a3f78ec2cfde24e3dd97a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3349e7bb45c18485f1ba090f0f80bda67abd214e", "patch": "@@ -1962,6 +1962,16 @@ impl<'a, 'tcx> ClosureKind {\n             _ => false,\n         }\n     }\n+\n+    /// Returns the representative scalar type for this closure kind.\n+    /// See `TyS::to_opt_closure_kind` for more details.\n+    pub fn to_ty(self, tcx: TyCtxt<'_, '_, 'tcx>) -> Ty<'tcx> {\n+        match self {\n+            ty::ClosureKind::Fn => tcx.types.i8,\n+            ty::ClosureKind::FnMut => tcx.types.i16,\n+            ty::ClosureKind::FnOnce => tcx.types.i32,\n+        }\n+    }\n }\n \n impl<'tcx> TyS<'tcx> {"}, {"sha": "bc55ffdc31fd836333f403650ee1ec8d111e77bd", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 85, "deletions": 10, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3349e7bb45c18485f1ba090f0f80bda67abd214e", "patch": "@@ -174,16 +174,22 @@ pub enum TypeVariants<'tcx> {\n \n /// A closure can be modeled as a struct that looks like:\n ///\n-///     struct Closure<'l0...'li, T0...Tj, U0...Uk> {\n+///     struct Closure<'l0...'li, T0...Tj, CK, U0...Uk> {\n ///         upvar0: U0,\n ///         ...\n ///         upvark: Uk\n ///     }\n ///\n-/// where 'l0...'li and T0...Tj are the lifetime and type parameters\n-/// in scope on the function that defined the closure, and U0...Uk are\n-/// type parameters representing the types of its upvars (borrowed, if\n-/// appropriate).\n+/// where:\n+///\n+/// - 'l0...'li and T0...Tj are the lifetime and type parameters\n+///   in scope on the function that defined the closure,\n+/// - CK represents the *closure kind* (Fn vs FnMut vs FnOnce). This\n+///   is rather hackily encoded via a scalar type. See\n+///   `TyS::to_opt_closure_kind` for details.\n+/// - U0...Uk are type parameters representing the types of its upvars\n+///   (borrowed, if appropriate; that is, if Ui represents a by-ref upvar,\n+///    and the up-var has the type `Foo`, then `Ui = &Foo`).\n ///\n /// So, for example, given this function:\n ///\n@@ -256,14 +262,54 @@ pub struct ClosureSubsts<'tcx> {\n     pub substs: &'tcx Substs<'tcx>,\n }\n \n-impl<'a, 'gcx, 'acx, 'tcx> ClosureSubsts<'tcx> {\n+/// Struct returned by `split()`. Note that these are subslices of the\n+/// parent slice and not canonical substs themselves.\n+struct SplitClosureSubsts<'tcx> {\n+    closure_kind_ty: Ty<'tcx>,\n+    upvar_kinds: &'tcx [Kind<'tcx>],\n+}\n+\n+impl<'tcx> ClosureSubsts<'tcx> {\n+    /// Divides the closure substs into their respective\n+    /// components. Single source of truth with respect to the\n+    /// ordering.\n+    fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> SplitClosureSubsts<'tcx> {\n+        let generics = tcx.generics_of(def_id);\n+        let parent_len = generics.parent_count();\n+        SplitClosureSubsts {\n+            closure_kind_ty: self.substs[parent_len].as_type().expect(\"closure-kind should be type\"),\n+            upvar_kinds: &self.substs[parent_len + 1..],\n+        }\n+    }\n+\n     #[inline]\n-    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'acx>) ->\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) ->\n         impl Iterator<Item=Ty<'tcx>> + 'tcx\n     {\n-        let generics = tcx.generics_of(def_id);\n-        self.substs[self.substs.len()-generics.own_count()..].iter().map(\n-            |t| t.as_type().expect(\"unexpected region in upvars\"))\n+        let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n+        upvar_kinds.iter().map(|t| t.as_type().expect(\"upvar should be type\"))\n+    }\n+\n+    /// Returns the closure kind for this closure; may return `None`\n+    /// if inference has not yet completed.\n+    pub fn opt_closure_kind(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>)\n+                            -> Option<ty::ClosureKind> {\n+        let closure_kind_ty = self.closure_kind_ty(def_id, tcx);\n+        closure_kind_ty.to_opt_closure_kind()\n+    }\n+\n+    /// Returns the closure kind for this closure; may return `None`\n+    /// if inference has not yet completed.\n+    pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).closure_kind_ty\n+    }\n+}\n+\n+impl<'tcx> ClosureSubsts<'tcx> {\n+    /// Returns the closure kind for this closure; only usable outside\n+    /// of an inference context.\n+    pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> ty::ClosureKind {\n+        self.opt_closure_kind(def_id, tcx).unwrap()\n     }\n }\n \n@@ -1442,6 +1488,35 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             }\n         }\n     }\n+\n+    /// When we create a closure, we record its kind (i.e., what trait\n+    /// it implements) into its `ClosureSubsts` using a type\n+    /// parameter. This is kind of a phantom type, except that the\n+    /// most convenient thing for us to are the integral types. This\n+    /// function converts such a special type into the closure\n+    /// kind. To go the other way, use\n+    /// `tcx.closure_kind_ty(closure_kind)`.\n+    ///\n+    /// Note that during type checking, we use an inference variable\n+    /// to represent the closure kind, because it has not yet been\n+    /// inferred. Once [upvar inference] is complete, that type varibale\n+    /// will be unified.\n+    ///\n+    /// [upvar inference]: src/librustc_typeck/check/upvar.rs\n+    pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {\n+        match self.sty {\n+            TyInt(int_ty) => match int_ty {\n+                ast::IntTy::I8 => Some(ty::ClosureKind::Fn),\n+                ast::IntTy::I16 => Some(ty::ClosureKind::FnMut),\n+                ast::IntTy::I32 => Some(ty::ClosureKind::FnOnce),\n+                _ => bug!(\"cannot convert type `{:?}` to a closure kind\", self),\n+            },\n+\n+            TyInfer(_) => None,\n+\n+            _ => bug!(\"cannot convert type `{:?}` to a closure kind\", self),\n+        }\n+    }\n }\n \n /// Typed constant value."}, {"sha": "90c4654dac9b2eca4ea2a0c017f34e4037c08d2d", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=3349e7bb45c18485f1ba090f0f80bda67abd214e", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             |_, _| span_bug!(expr.span, \"closure has region param\"),\n             |_, _| {\n                 self.infcx\n-                    .next_ty_var(TypeVariableOrigin::TransformedUpvar(expr.span))\n+                    .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span))\n             },\n         );\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);"}, {"sha": "c4cdd958680d9e054f20318eb21d1fd5f7a7d967", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=3349e7bb45c18485f1ba090f0f80bda67abd214e", "patch": "@@ -46,6 +46,7 @@ use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::TypeFoldable;\n use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -216,6 +217,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n+        // Equate the type variable representing the closure kind.\n+        let closure_kind_ty = closure_substs.closure_kind_ty(def_id, self.tcx);\n+        if closure_kind_ty.needs_infer() {\n+            let final_closure_kind = self.tables.borrow().closure_kinds()[closure_hir_id].0;\n+            self.demand_eqtype(span, final_closure_kind.to_ty(self.tcx), closure_kind_ty);\n+        }\n+\n         // Equate the type variables with the actual types.\n         let final_upvar_tys = self.final_upvar_tys(closure_node_id);\n         debug!("}, {"sha": "9ee3300e753751ac38fd7fcd524a2e9ad43f3ce7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3349e7bb45c18485f1ba090f0f80bda67abd214e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3349e7bb45c18485f1ba090f0f80bda67abd214e", "patch": "@@ -1015,8 +1015,19 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // cares about anything but the length is instantiation,\n     // and we don't do that for closures.\n     if let NodeExpr(&hir::Expr { node: hir::ExprClosure(..), .. }) = node {\n+        // add a dummy parameter for the closure kind\n+        types.push(ty::TypeParameterDef {\n+            index: type_start as u32,\n+            name: Symbol::intern(\"<closure_kind>\"),\n+            def_id,\n+            has_default: false,\n+            object_lifetime_default: rl::Set1::Empty,\n+            pure_wrt_drop: false,\n+            synthetic: None,\n+        });\n+\n         tcx.with_freevars(node_id, |fv| {\n-            types.extend(fv.iter().enumerate().map(|(i, _)| ty::TypeParameterDef {\n+            types.extend(fv.iter().zip(1..).map(|(_, i)| ty::TypeParameterDef {\n                 index: type_start + i as u32,\n                 name: Symbol::intern(\"<upvar>\"),\n                 def_id,"}]}