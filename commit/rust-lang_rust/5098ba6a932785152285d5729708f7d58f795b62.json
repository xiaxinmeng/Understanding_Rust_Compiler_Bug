{"sha": "5098ba6a932785152285d5729708f7d58f795b62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOThiYTZhOTMyNzg1MTUyMjg1ZDU3Mjk3MDhmN2Q1OGY3OTViNjI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-24T15:32:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-24T22:21:43Z"}, "message": "Move linking ouside the interface queries.", "tree": {"sha": "e5da024b4c1d8574b5a532daee9fe44490d65320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5da024b4c1d8574b5a532daee9fe44490d65320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5098ba6a932785152285d5729708f7d58f795b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5098ba6a932785152285d5729708f7d58f795b62", "html_url": "https://github.com/rust-lang/rust/commit/5098ba6a932785152285d5729708f7d58f795b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5098ba6a932785152285d5729708f7d58f795b62/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266ede1bb34195663238d23373bcc56f1f731748", "url": "https://api.github.com/repos/rust-lang/rust/commits/266ede1bb34195663238d23373bcc56f1f731748", "html_url": "https://github.com/rust-lang/rust/commit/266ede1bb34195663238d23373bcc56f1f731748"}], "stats": {"total": 99, "additions": 67, "deletions": 32}, "files": [{"sha": "b4dab3979961bccacbd9d526a03bc6fec9854358", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5098ba6a932785152285d5729708f7d58f795b62/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5098ba6a932785152285d5729708f7d58f795b62/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5098ba6a932785152285d5729708f7d58f795b62", "patch": "@@ -283,7 +283,7 @@ pub fn run_compiler(\n             return sess.compile_status();\n         }\n \n-        compiler.enter(|queries| {\n+        let linker = compiler.enter(|queries| {\n             queries.parse()?;\n \n             if let Some(ppm) = &sess.opts.pretty {\n@@ -309,17 +309,20 @@ pub fn run_compiler(\n                         compiler.output_file().as_ref().map(|p| &**p),\n                     );\n                 }\n-                return sess.compile_status();\n+                sess.compile_status()?;\n+                return Ok(None);\n             }\n \n             if callbacks.after_parsing(compiler) == Compilation::Stop {\n-                return sess.compile_status();\n+                sess.compile_status()?;\n+                return Ok(None);\n             }\n \n             if sess.opts.debugging_opts.parse_only ||\n                sess.opts.debugging_opts.show_span.is_some() ||\n                sess.opts.debugging_opts.ast_json_noexpand {\n-                return sess.compile_status();\n+                sess.compile_status()?;\n+                return Ok(None);\n             }\n \n             {\n@@ -328,28 +331,32 @@ pub fn run_compiler(\n                 // Lint plugins are registered; now we can process command line flags.\n                 if sess.opts.describe_lints {\n                     describe_lints(&sess, &lint_store, true);\n-                    return sess.compile_status();\n+                    sess.compile_status()?;\n+                    return Ok(None);\n                 }\n             }\n \n             queries.expansion()?;\n             if callbacks.after_expansion(compiler) == Compilation::Stop {\n-                return sess.compile_status();\n+                sess.compile_status()?;\n+                return Ok(None);\n             }\n \n             queries.prepare_outputs()?;\n \n             if sess.opts.output_types.contains_key(&OutputType::DepInfo)\n                 && sess.opts.output_types.len() == 1\n             {\n-                return sess.compile_status();\n+                sess.compile_status()?;\n+                return Ok(None);\n             }\n \n             queries.global_ctxt()?;\n \n             if sess.opts.debugging_opts.no_analysis ||\n                sess.opts.debugging_opts.ast_json {\n-                return sess.compile_status();\n+                sess.compile_status()?;\n+                return Ok(None);\n             }\n \n             if sess.opts.debugging_opts.save_analysis {\n@@ -381,7 +388,8 @@ pub fn run_compiler(\n             queries.global_ctxt()?.peek_mut().enter(|tcx| tcx.analysis(LOCAL_CRATE))?;\n \n             if callbacks.after_analysis(compiler) == Compilation::Stop {\n-                return sess.compile_status();\n+                sess.compile_status()?;\n+                return Ok(None);\n             }\n \n             if sess.opts.debugging_opts.save_analysis {\n@@ -397,11 +405,14 @@ pub fn run_compiler(\n                 sess.code_stats.print_type_sizes();\n             }\n \n-            queries.link()?;\n-\n-            Ok(())\n+            let linker = queries.linker()?;\n+            Ok(Some(linker))\n         })?;\n \n+        if let Some(linker) = linker {\n+            linker.link()?\n+        }\n+\n         if sess.opts.debugging_opts.perf_stats {\n             sess.print_perf_stats();\n         }"}, {"sha": "e91316ff4772cc6ca02b4f686230dc9f5d13cd42", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5098ba6a932785152285d5729708f7d58f795b62/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5098ba6a932785152285d5729708f7d58f795b62/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=5098ba6a932785152285d5729708f7d58f795b62", "patch": "@@ -81,7 +81,6 @@ pub struct Queries<'comp> {\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<BoxedGlobalCtxt>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n-    link: Query<()>,\n }\n \n impl<'comp> Queries<'comp> {\n@@ -98,7 +97,6 @@ impl<'comp> Queries<'comp> {\n             prepare_outputs: Default::default(),\n             global_ctxt: Default::default(),\n             ongoing_codegen: Default::default(),\n-            link: Default::default(),\n         }\n     }\n \n@@ -278,35 +276,54 @@ impl<'comp> Queries<'comp> {\n         })\n     }\n \n-    pub fn link(&self) -> Result<&Query<()>> {\n-        self.link.compute(|| {\n-            let sess = self.session();\n+    pub fn linker(self) -> Result<Linker> {\n+        let dep_graph = self.dep_graph()?;\n+        let prepare_outputs = self.prepare_outputs()?;\n+        let ongoing_codegen = self.ongoing_codegen()?;\n \n-            let ongoing_codegen = self.ongoing_codegen()?.take();\n+        let sess = self.session().clone();\n+        let codegen_backend = self.codegen_backend().clone();\n \n-            self.codegen_backend().join_codegen_and_link(\n-                ongoing_codegen,\n-                sess,\n-                &*self.dep_graph()?.peek(),\n-                &*self.prepare_outputs()?.peek(),\n-            ).map_err(|_| ErrorReported)?;\n-\n-            Ok(())\n+        Ok(Linker {\n+            sess,\n+            dep_graph: dep_graph.take(),\n+            prepare_outputs: prepare_outputs.take(),\n+            ongoing_codegen: ongoing_codegen.take(),\n+            codegen_backend,\n         })\n     }\n }\n \n+pub struct Linker {\n+    sess: Lrc<Session>,\n+    dep_graph: DepGraph,\n+    prepare_outputs: OutputFilenames,\n+    ongoing_codegen: Box<dyn Any>,\n+    codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n+}\n+\n+impl Linker {\n+    pub fn link(self) -> Result<()> {\n+        self.codegen_backend.join_codegen_and_link(\n+            self.ongoing_codegen,\n+            &self.sess,\n+            &self.dep_graph,\n+            &self.prepare_outputs,\n+        ).map_err(|_| ErrorReported)\n+    }\n+}\n+\n impl Compiler {\n     // This method is different to all the other methods in `Compiler` because\n     // it lacks a `Queries` entry. It's also not currently used. It does serve\n     // as an example of how `Compiler` can be used, with additional steps added\n     // between some passes. And see `rustc_driver::run_compiler` for a more\n     // complex example.\n     pub fn enter<'c, F, T>(&'c self, f: F) -> Result<T>\n-        where F: for<'q> FnOnce(&'q Queries<'c>) -> Result<T>\n+        where F: FnOnce(Queries<'c>) -> Result<T>\n     {\n         let queries = Queries::new(&self);\n-        f(&queries)\n+        f(queries)\n     }\n \n     // This method is different to all the other methods in `Compiler` because\n@@ -315,13 +332,13 @@ impl Compiler {\n     // between some passes. And see `rustc_driver::run_compiler` for a more\n     // complex example.\n     pub fn compile(&self) -> Result<()> {\n-        self.enter(|queries| {\n+        let linker = self.enter(|queries| {\n             queries.prepare_outputs()?;\n \n             if self.session().opts.output_types.contains_key(&OutputType::DepInfo)\n                 && self.session().opts.output_types.len() == 1\n             {\n-                return Ok(())\n+                return Ok(None)\n             }\n \n             queries.global_ctxt()?;\n@@ -334,7 +351,14 @@ impl Compiler {\n             // Drop GlobalCtxt after starting codegen to free memory.\n             mem::drop(queries.global_ctxt()?.take());\n \n-            queries.link().map(|_| ())\n-        })\n+            let linker = queries.linker()?;\n+            Ok(Some(linker))\n+        })?;\n+\n+        if let Some(linker) = linker {\n+            linker.link()?\n+        }\n+\n+        Ok(())\n     }\n }"}]}