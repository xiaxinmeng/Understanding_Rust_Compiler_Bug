{"sha": "67f455afe1496a46171099b711bf067d7095395b", "node_id": "C_kwDOAAsO6NoAKDY3ZjQ1NWFmZTE0OTZhNDYxNzEwOTliNzExYmYwNjdkNzA5NTM5NWI", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-05-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-05-15T00:00:00Z"}, "message": "Suppress \"erroneous constant used\" for constants tainted by errors\n\nWhen constant evaluation fails because its MIR is tainted by errors,\nsuppress note indicating that erroneous constant was used, since those\nerrors have to be fixed regardless of the constant being used or not.", "tree": {"sha": "71cb7409230acfa927effbe86d26ac9eee4e2aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71cb7409230acfa927effbe86d26ac9eee4e2aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67f455afe1496a46171099b711bf067d7095395b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67f455afe1496a46171099b711bf067d7095395b", "html_url": "https://github.com/rust-lang/rust/commit/67f455afe1496a46171099b711bf067d7095395b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67f455afe1496a46171099b711bf067d7095395b/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2913ad6db0f72fed5139253faed73200c7af3535", "url": "https://api.github.com/repos/rust-lang/rust/commits/2913ad6db0f72fed5139253faed73200c7af3535", "html_url": "https://github.com/rust-lang/rust/commit/2913ad6db0f72fed5139253faed73200c7af3535"}], "stats": {"total": 324, "additions": 76, "deletions": 248}, "files": [{"sha": "5037c210e7d285fce92e7e98f2dfc2818bf4de55", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -169,14 +169,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 // See <https://github.com/rust-lang/rust/pull/63152>.\n                 let mut err = struct_error(tcx, &self.error.to_string());\n                 self.decorate(&mut err, decorate);\n-                ErrorHandled::Reported(err.emit())\n+                ErrorHandled::Reported(err.emit().into())\n             }\n             _ => {\n                 // Report as hard error.\n                 let mut err = struct_error(tcx, message);\n                 err.span_label(self.span, self.error.to_string());\n                 self.decorate(&mut err, decorate);\n-                ErrorHandled::Reported(err.emit())\n+                ErrorHandled::Reported(err.emit().into())\n             }\n         }\n     }"}, {"sha": "58b5755af07f24de39b1b387f3faf24f8b7a950c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -382,7 +382,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                         rustc_span::DUMMY_SP,\n                         \"This is likely a const item that is missing from its impl\",\n                     );\n-                    throw_inval!(AlreadyReported(guar));\n+                    throw_inval!(AlreadyReported(guar.into()));\n                 } else {\n                     // `find_mir_or_eval_fn` checks that this is a const fn before even calling us,\n                     // so this should be unreachable."}, {"sha": "2fa63dc8c93ce047a82f21bce8b2f714f4004bf6", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -7,7 +7,7 @@ use either::{Either, Left, Right};\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::IndexVec;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{ErrorHandled, InterpError};\n+use rustc_middle::mir::interpret::{ErrorHandled, InterpError, ReportedErrorInfo};\n use rustc_middle::ty::layout::{\n     self, FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOf, LayoutOfHelpers,\n     TyAndLayout,\n@@ -470,7 +470,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         if let Some(err) = body.tainted_by_errors {\n-            throw_inval!(AlreadyReported(err));\n+            throw_inval!(AlreadyReported(ReportedErrorInfo::tainted_by_errors(err)));\n         }\n         Ok(body)\n     }\n@@ -517,7 +517,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Ok(None) => throw_inval!(TooGeneric),\n \n             // FIXME(eddyb) this could be a bit more specific than `AlreadyReported`.\n-            Err(error_reported) => throw_inval!(AlreadyReported(error_reported)),\n+            Err(error_reported) => throw_inval!(AlreadyReported(error_reported.into())),\n         }\n     }\n \n@@ -905,7 +905,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         query(self.tcx.at(span.unwrap_or_else(|| self.cur_span()))).map_err(|err| {\n             match err {\n                 ErrorHandled::Reported(err) => {\n-                    if let Some(span) = span {\n+                    if !err.is_tainted_by_errors() && let Some(span) = span {\n                         // To make it easier to figure out where this error comes from, also add a note at the current location.\n                         self.tcx.sess.span_note_without_error(span, \"erroneous constant used\");\n                     }"}, {"sha": "e30af165501e5f073c6e48e24df5790ec16de67e", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -595,7 +595,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // FIXME(generic_const_exprs): `ConstKind::Expr` should be able to be evaluated\n             ty::ConstKind::Expr(_) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(reported) => {\n-                throw_inval!(AlreadyReported(reported))\n+                throw_inval!(AlreadyReported(reported.into()))\n             }\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;"}, {"sha": "d49a69dfba5d9882164be317198a3d1b9202cce5", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -1533,7 +1533,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             if let Some(ct) = tcx.thir_abstract_const(unevaluated.def)? {\n                 let ct = tcx.expand_abstract_consts(ct.subst(tcx, substs));\n                 if let Err(e) = ct.error_reported() {\n-                    return Err(ErrorHandled::Reported(e));\n+                    return Err(ErrorHandled::Reported(e.into()));\n                 } else if ct.has_non_region_infer() || ct.has_non_region_param() {\n                     return Err(ErrorHandled::TooGeneric);\n                 } else {"}, {"sha": "d65ceef24727a5bf62e6b1ff84c6e4038c54f3b4", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -15,15 +15,49 @@ use std::{any::Any, backtrace::Backtrace, fmt};\n pub enum ErrorHandled {\n     /// Already reported an error for this evaluation, and the compilation is\n     /// *guaranteed* to fail. Warnings/lints *must not* produce `Reported`.\n-    Reported(ErrorGuaranteed),\n+    Reported(ReportedErrorInfo),\n     /// Don't emit an error, the evaluation failed because the MIR was generic\n     /// and the substs didn't fully monomorphize it.\n     TooGeneric,\n }\n \n impl From<ErrorGuaranteed> for ErrorHandled {\n-    fn from(err: ErrorGuaranteed) -> ErrorHandled {\n-        ErrorHandled::Reported(err)\n+    #[inline]\n+    fn from(error: ErrorGuaranteed) -> ErrorHandled {\n+        ErrorHandled::Reported(error.into())\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n+pub struct ReportedErrorInfo {\n+    error: ErrorGuaranteed,\n+    is_tainted_by_errors: bool,\n+}\n+\n+impl ReportedErrorInfo {\n+    #[inline]\n+    pub fn tainted_by_errors(error: ErrorGuaranteed) -> ReportedErrorInfo {\n+        ReportedErrorInfo { is_tainted_by_errors: true, error }\n+    }\n+\n+    /// Returns true if evaluation failed because MIR was tainted by errors.\n+    #[inline]\n+    pub fn is_tainted_by_errors(self) -> bool {\n+        self.is_tainted_by_errors\n+    }\n+}\n+\n+impl From<ErrorGuaranteed> for ReportedErrorInfo {\n+    #[inline]\n+    fn from(error: ErrorGuaranteed) -> ReportedErrorInfo {\n+        ReportedErrorInfo { is_tainted_by_errors: false, error }\n+    }\n+}\n+\n+impl Into<ErrorGuaranteed> for ReportedErrorInfo {\n+    #[inline]\n+    fn into(self) -> ErrorGuaranteed {\n+        self.error\n     }\n }\n \n@@ -89,7 +123,7 @@ fn print_backtrace(backtrace: &Backtrace) {\n \n impl From<ErrorGuaranteed> for InterpErrorInfo<'_> {\n     fn from(err: ErrorGuaranteed) -> Self {\n-        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err)).into()\n+        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err.into())).into()\n     }\n }\n \n@@ -125,7 +159,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context.\n     TooGeneric,\n     /// Abort in case errors are already reported.\n-    AlreadyReported(ErrorGuaranteed),\n+    AlreadyReported(ReportedErrorInfo),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An error occurred during FnAbi computation: the passed --target lacks FFI support\n@@ -144,7 +178,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         use InvalidProgramInfo::*;\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n-            AlreadyReported(ErrorGuaranteed { .. }) => {\n+            AlreadyReported(_) => {\n                 write!(\n                     f,\n                     \"an error has already been reported elsewhere (this should not usually be printed)\""}, {"sha": "3620385fab13494b6d4485d392fe457542b06682", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -120,8 +120,8 @@ use crate::ty::{self, Instance, Ty, TyCtxt};\n pub use self::error::{\n     struct_error, CheckInAllocMsg, ErrorHandled, EvalToAllocationRawResult, EvalToConstValueResult,\n     EvalToValTreeResult, InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo,\n-    MachineStopType, ResourceExhaustionInfo, ScalarSizeMismatch, UndefinedBehaviorInfo,\n-    UninitBytesAccess, UnsupportedOpInfo,\n+    MachineStopType, ReportedErrorInfo, ResourceExhaustionInfo, ScalarSizeMismatch,\n+    UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar};"}, {"sha": "ce11dabc195d90fc11b200c318473bd4cc58f619", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 self.const_eval_global_id(param_env, cid, span)\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n-            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n+            Err(err) => Err(ErrorHandled::Reported(err.into())),\n         }\n     }\n \n@@ -110,7 +110,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 })\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n-            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n+            Err(err) => Err(ErrorHandled::Reported(err.into())),\n         }\n     }\n "}, {"sha": "1da94dd79179c16789b1e20de3b055adbf15d588", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -2342,7 +2342,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 match tcx.const_eval_resolve(param_env, uneval, None) {\n                     Ok(val) => Self::Val(val, ty),\n                     Err(ErrorHandled::TooGeneric) => self,\n-                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar)),\n+                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar.into())),\n                 }\n             }\n         }"}, {"sha": "a108f6c8947a31e5d3cf54c4659007c1d0345ffd", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -245,7 +245,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ValTree(val?))),\n                         Err(ErrorHandled::TooGeneric) => None,\n-                        Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n+                        Err(ErrorHandled::Reported(e)) => Some(Err(e.into())),\n                     }\n                 }\n                 EvalMode::Mir => {\n@@ -256,7 +256,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ConstVal(val))),\n                         Err(ErrorHandled::TooGeneric) => None,\n-                        Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n+                        Err(ErrorHandled::Reported(e)) => Some(Err(e.into())),\n                     }\n                 }\n             }"}, {"sha": "183c2401fc3ac6ad612faae63230b6c9a83338a3", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -801,7 +801,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                             span: tcx.def_span(unevaluated.def),\n                                             unevaluated: unevaluated,\n                                         });\n-                                    Err(ErrorHandled::Reported(reported))\n+                                    Err(ErrorHandled::Reported(reported.into()))\n                                 }\n                                 Err(err) => Err(err),\n                             }"}, {"sha": "bd1ea43a78e9237c3bfd16f02918d21afd4abee6", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -79,7 +79,7 @@ pub fn is_const_evaluatable<'tcx>(\n                             \"Missing value for constant, but no error reported?\",\n                         )))\n                     }\n-                    Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+                    Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e.into())),\n                     Ok(_) => Ok(()),\n                 }\n             }\n@@ -147,7 +147,7 @@ pub fn is_const_evaluatable<'tcx>(\n \n                 Err(err)\n             }\n-            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e.into())),\n             Ok(_) => Ok(()),\n         }\n     }"}, {"sha": "2f85c32b5750de4c8337f0d63bd3f5f48641e64d", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -615,7 +615,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         (Err(ErrorHandled::Reported(reported)), _)\n                         | (_, Err(ErrorHandled::Reported(reported))) => ProcessResult::Error(\n                             CodeSelectionError(SelectionError::NotConstEvaluatable(\n-                                NotConstEvaluatable::Error(reported),\n+                                NotConstEvaluatable::Error(reported.into()),\n                             )),\n                         ),\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {"}, {"sha": "e3f81a78eeaf68efdcb26dbab70df92b0690f43a", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -289,7 +289,7 @@ pub fn report_error<'tcx, 'mir>(\n                     (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n                 ],\n             InvalidProgram(\n-                InvalidProgramInfo::AlreadyReported(rustc_errors::ErrorGuaranteed { .. })\n+                InvalidProgramInfo::AlreadyReported(_)\n             ) => {\n                 // This got already reported. No point in reporting it again.\n                 return None;"}, {"sha": "893a4dbd4c890a7ba8d9f89f470cc95e265090a8", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -47,7 +47,6 @@ extern crate rustc_ast;\n extern crate rustc_middle;\n extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n-extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_index;\n extern crate rustc_session;"}, {"sha": "434b07443044edfb912ba760002cec340d321e8b", "filename": "tests/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -43,62 +43,6 @@ LL |     println!(\"{:?}\", 0);\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/format.rs:2:12\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:12\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:20\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |                    ^\n-   |\n-   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:20\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |                    ^\n-   |\n-   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:14\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:14\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:22\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |                      ^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:22\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |                      ^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "35915a7a606a4ddee8e5b93493b1227d97e03d0c", "filename": "tests/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -6,7 +6,6 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n-//~^ constant\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -16,7 +15,6 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n-//~^ constant\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -26,7 +24,6 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n-//~^ constant\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -36,43 +33,36 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n-//~^ constant\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n-//~^ constant\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n-//~^ constant\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n-//~^ constant\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n-//~^ constant\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n-//~^ constant\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n-//~^ constant\n \n fn main() {\n     let _ = ARR;"}, {"sha": "4e503e5a5c0a4df39a204d7e5e31c4679f620d8a", "filename": "tests/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 15, "deletions": 75, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -16,156 +16,96 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:8:18\n-   |\n-LL | const ARR: [i32; X] = [99; 34];\n-   |                  ^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:25\n+  --> $DIR/const-integer-bool-ops.rs:10:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:18:19\n-   |\n-LL | const ARR1: [i32; X1] = [99; 47];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:26\n+  --> $DIR/const-integer-bool-ops.rs:19:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:28:19\n-   |\n-LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:26\n+  --> $DIR/const-integer-bool-ops.rs:28:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:38:19\n-   |\n-LL | const ARR3: [i32; X3] = [99; 6];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:41:18\n+  --> $DIR/const-integer-bool-ops.rs:37:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:44:19\n-   |\n-LL | const ARRR: [i32; Y] = [99; 1];\n-   |                   ^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:47:19\n+  --> $DIR/const-integer-bool-ops.rs:42:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:50:20\n-   |\n-LL | const ARRR1: [i32; Y1] = [99; 1];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:53:19\n+  --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:56:20\n-   |\n-LL | const ARRR2: [i32; Y2] = [99; 1];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:59:19\n+  --> $DIR/const-integer-bool-ops.rs:52:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:62:20\n-   |\n-LL | const ARRR3: [i32; Y3] = [99; 0];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:65:19\n+  --> $DIR/const-integer-bool-ops.rs:57:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:68:20\n-   |\n-LL | const ARRR4: [i32; Y4] = [99; 0];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:71:19\n+  --> $DIR/const-integer-bool-ops.rs:62:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:74:20\n-   |\n-LL | const ARRR5: [i32; Y5] = [99; 0];\n-   |                    ^^\n-\n error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "tests/ui/consts/const-mut-refs/issue-76510.32bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -19,12 +19,6 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-note: erroneous constant used\n-  --> $DIR/issue-76510.rs:11:70\n-   |\n-LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0596, E0658, E0764."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "tests/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -19,12 +19,6 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-note: erroneous constant used\n-  --> $DIR/issue-76510.rs:11:70\n-   |\n-LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0596, E0658, E0764."}, {"sha": "143d2fb6b9a3a1a599f36edcc222f4f1d7d34e83", "filename": "tests/ui/consts/const-mut-refs/issue-76510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -9,7 +9,6 @@ const S: &'static mut str = &mut \" hello \";\n \n const fn trigger() -> [(); unsafe {\n         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-        //~^ constant\n         0\n     }] {\n     [(); 0]"}, {"sha": "e77d392e6940282029a11554d11c4c0115a3e6b3", "filename": "tests/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -4,7 +4,6 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected `(usize,)`, found `usize`\n const ARR: [i32; TUP.0] = [];\n-//~^ constant\n \n fn main() {\n }"}, {"sha": "d5df0df9525c50f44c39f37773fafc6228a08334", "filename": "tests/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -11,12 +11,6 @@ help: use a trailing comma to create a tuple with one element\n LL | const TUP: (usize,) = (5usize << 64,);\n    |                       +            ++\n \n-note: erroneous constant used\n-  --> $DIR/const-tup-index-span.rs:6:18\n-   |\n-LL | const ARR: [i32; TUP.0] = [];\n-   |                  ^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "7bcfa057019952b50c804b79e932d7e87f4a7294", "filename": "tests/ui/consts/issue-54954.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-54954.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -9,8 +9,6 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-  //~^ constant\n-  //~| constant\n     z\n }\n "}, {"sha": "b0701bab793c53851c3f855cd287208f5f58e245", "filename": "tests/ui/consts/issue-54954.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-54954.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -16,18 +16,6 @@ LL | |         core::mem::size_of::<T>()\n LL | |     }\n    | |_____- `Tt::const_val` defined here\n \n-note: erroneous constant used\n-  --> $DIR/issue-54954.rs:11:15\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |               ^^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-54954.rs:11:34\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |                                  ^^^^^^^\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0379, E0790."}, {"sha": "e46c649faf0879a79149de1261666d25469c8a3b", "filename": "tests/ui/consts/issue-56164.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-56164.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -28,18 +28,6 @@ error: function pointer calls are not allowed in constant functions\n LL |     input()\n    |     ^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0015, E0277."}, {"sha": "f4898fd9732f58837bff2e70ebaffb14c4e70430", "filename": "tests/ui/consts/issue-66693.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-66693.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -22,17 +22,5 @@ LL |     panic!(&1);\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/issue-66693.rs:11:12\n-   |\n-LL |     panic!(&1);\n-   |            ^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-66693.rs:11:12\n-   |\n-LL |     panic!(&1);\n-   |            ^^\n-\n error: aborting due to 3 previous errors\n "}, {"sha": "06a330813406a9fe0f5a61de534e8e403854181c", "filename": "tests/ui/enum-discriminant/issue-41394.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -5,7 +5,6 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n-    //~^ const\n }\n \n fn main() {}"}, {"sha": "fa95ca9c18a1004a049da6e67152c0e40be605a0", "filename": "tests/ui/enum-discriminant/issue-41394.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -6,12 +6,6 @@ LL |     A = \"\" + 1\n    |         |\n    |         &str\n \n-note: erroneous constant used\n-  --> $DIR/issue-41394.rs:7:9\n-   |\n-LL |     A = Foo::A as isize\n-   |         ^^^^^^^^^^^^^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0369`."}, {"sha": "00588735b9a5932c78fdfb9b3d3b9057d8492541", "filename": "tests/ui/resolve/issue-50599.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fresolve%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fresolve%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n-    //~^ constant\n }"}, {"sha": "d58b6ca5b5c42dab4179734e55359632190cb5f7", "filename": "tests/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -16,12 +16,6 @@ LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;\n    |\n \n-note: erroneous constant used\n-  --> $DIR/issue-50599.rs:4:29\n-   |\n-LL |     let mut digits = [0u32; M];\n-   |                             ^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "4b6bc6124dbf301e232d640498f539cfde51fbba", "filename": "tests/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n-    //~^ constant\n }"}, {"sha": "64c7687f7a882d600af96e075bc78c7f9aff7afd", "filename": "tests/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f455afe1496a46171099b711bf067d7095395b/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=67f455afe1496a46171099b711bf067d7095395b", "patch": "@@ -6,12 +6,6 @@ LL |     const l: usize = v.count();\n    |     |\n    |     help: consider using `let` instead of `const`: `let l`\n \n-note: erroneous constant used\n-  --> $DIR/type-dependent-def-issue-49241.rs:4:18\n-   |\n-LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                  ^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0435`."}]}