{"sha": "e28d4b3516f0703ddb5407bf8cd7fc7e273743bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOGQ0YjM1MTZmMDcwM2RkYjU0MDdiZjhjZDdmYzdlMjczNzQzYmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-12T06:17:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-12T06:33:05Z"}, "message": "core: Add context switching for ARM and MIPS\n\nARM definitely compiles", "tree": {"sha": "52530c9d099e903915db68f36f1acff3cea14236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52530c9d099e903915db68f36f1acff3cea14236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb", "html_url": "https://github.com/rust-lang/rust/commit/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48cb9a8ac0b95408a142ea7bc9767414eba2cbb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/48cb9a8ac0b95408a142ea7bc9767414eba2cbb3", "html_url": "https://github.com/rust-lang/rust/commit/48cb9a8ac0b95408a142ea7bc9767414eba2cbb3"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "dfb7bdf04c3bd788aa8d5ac3154fa93b2eb70ae2", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 63, "deletions": 26, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=e28d4b3516f0703ddb5407bf8cd7fc7e273743bb", "patch": "@@ -65,7 +65,42 @@ extern {\n     fn swap_registers(out_regs: *mut Registers, in_regs: *Registers);\n }\n \n-// Definitions of these registers are in rt/arch/x86_64/regs.h\n+#[cfg(target_arch = \"x86\")]\n+struct Registers {\n+    eax: u32, ebx: u32, ecx: u32, edx: u32,\n+    ebp: u32, esi: u32, edi: u32, esp: u32,\n+    cs: u16, ds: u16, ss: u16, es: u16, fs: u16, gs: u16,\n+    eflags: u32, eip: u32\n+}\n+\n+#[cfg(target_arch = \"x86\")]\n+fn new_regs() -> ~Registers {\n+    ~Registers {\n+        eax: 0, ebx: 0, ecx: 0, edx: 0,\n+        ebp: 0, esi: 0, edi: 0, esp: 0,\n+        cs: 0, ds: 0, ss: 0, es: 0, fs: 0, gs: 0,\n+        eflags: 0, eip: 0\n+    }\n+}\n+\n+#[cfg(target_arch = \"x86\")]\n+fn initialize_call_frame(regs: &mut Registers,\n+                         fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+\n+    let sp = align_down(sp);\n+    let sp = mut_offset(sp, -4); // XXX: -4 words? Needs this be done at all?\n+\n+    unsafe { *sp = arg as uint; }\n+    let sp = mut_offset(sp, -1);\n+    unsafe { *sp = 0; } // The final return address\n+\n+    regs.esp = sp as u32;\n+    regs.eip = fptr as u32;\n+\n+    // Last base pointer on the stack is 0\n+    regs.ebp = 0;\n+}\n+\n #[cfg(target_arch = \"x86_64\")]\n type Registers = [uint * 22];\n \n@@ -101,40 +136,42 @@ fn initialize_call_frame(regs: &mut Registers,\n     regs[RUSTRT_RBP] = 0;\n }\n \n-#[cfg(target_arch = \"x86\")]\n-struct Registers {\n-    eax: u32, ebx: u32, ecx: u32, edx: u32,\n-    ebp: u32, esi: u32, edi: u32, esp: u32,\n-    cs: u16, ds: u16, ss: u16, es: u16, fs: u16, gs: u16,\n-    eflags: u32, eip: u32\n-}\n+#[cfg(target_arch = \"arm\")]\n+type Registers = [uint * 32];\n \n-#[cfg(target_arch = \"x86\")]\n-fn new_regs() -> ~Registers {\n-    ~Registers {\n-        eax: 0, ebx: 0, ecx: 0, edx: 0,\n-        ebp: 0, esi: 0, edi: 0, esp: 0,\n-        cs: 0, ds: 0, ss: 0, es: 0, fs: 0, gs: 0,\n-        eflags: 0, eip: 0\n-    }\n-}\n+#[cfg(target_arch = \"arm\")]\n+fn new_regs() -> ~Registers { ~[0, .. 32] }\n \n-#[cfg(target_arch = \"x86\")]\n+#[cfg(target_arch = \"arm\")]\n fn initialize_call_frame(regs: &mut Registers,\n                          fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+    let sp = mut_offset(sp, -1);\n \n-    let sp = align_down(sp);\n-    let sp = mut_offset(sp, -4); // XXX: -4 words? Needs this be done at all?\n+    // The final return address. 0 indicates the bottom of the stack\n+    unsafe { *sp = 0; }\n \n-    unsafe { *sp = arg as uint; }\n+    regs[0] = arg as uint;   // r0\n+    regs[13] = sp as uint;   // #53 sp, r13\n+    regs[14] = fptr as uint; // #60 pc, r15 --> lr\n+}\n+\n+#[cfg(target_arch = \"mips\")]\n+type Registers = [uint * 32];\n+\n+#[cfg(target_arch = \"mips\")]\n+fn new_regs() -> ~Registers { ~[0, .. 32] }\n+\n+#[cfg(target_arch = \"mips\")]\n+fn initialize_call_frame(regs: &mut Registers,\n+                         fptr: *c_void, arg: *c_void, sp: *mut uint) {\n     let sp = mut_offset(sp, -1);\n-    unsafe { *sp = 0; } // The final return address\n \n-    regs.esp = sp as u32;\n-    regs.eip = fptr as u32;\n+    // The final return address. 0 indicates the bottom of the stack\n+    unsafe { *sp = 0; }\n \n-    // Last base pointer on the stack is 0\n-    regs.ebp = 0;\n+    regs[4] = arg as uint;\n+    regs[29] = sp as uint;\n+    regs[31] = fptr as uint;\n }\n \n fn align_down(sp: *mut uint) -> *mut uint {"}, {"sha": "9feb588e592a030bdcd8ec935f68fed38209e6dc", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28d4b3516f0703ddb5407bf8cd7fc7e273743bb/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=e28d4b3516f0703ddb5407bf8cd7fc7e273743bb", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// XXX: Missing some implementation for other architectures\n-#[cfg(target_os = \"linux\")];\n-#[cfg(target_os = \"mac\")];\n-#[cfg(target_os = \"win32\")];\n-\n // Some basic logging\n macro_rules! rtdebug (\n     ($( $arg:expr),+) => ( {"}]}