{"sha": "89cc8529cc18802e4d7feb370e56809a1150b750", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Y2M4NTI5Y2MxODgwMmU0ZDdmZWIzNzBlNTY4MDlhMTE1MGI3NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-20T14:06:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-20T14:06:13Z"}, "message": "auto merge of #9332 : eugals/rust/master, r=alexcrichton\n\nIt is intended to optimize/beautify the code generated in a few trivial trait operations.\r\nLet's take the following code as an example:\r\n```\r\ntrait Stuff {\r\n    fn bar(&self);\r\n}\r\n\r\nfn callBar(s: &Stuff) {\r\n    s.bar();\r\n}\r\n\r\nstruct Foo;\r\n\r\nimpl Stuff for Foo {\r\n    fn bar(&self) {\r\n    }\r\n}\r\n\r\npub fn main() {\r\n    let o = Foo;\r\n    callBar(&o as &Stuff);\r\n}\r\n```\r\n\r\nAt present it is translated into something like:\r\n```\r\ndefine void @_ZN7callBar_UUID.0E({ i32, %tydesc*, i8*, i8*, i8 }*, { %tydesc*, i8* }*) #4 {\r\n\"function top level\":\r\n  %__trait_callee = alloca { %tydesc*, i8* }\r\n  %__auto_borrow_obj = alloca { %tydesc*, i8* }\r\n  %2 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 0\r\n  %3 = load %tydesc** %2\r\n  %4 = getelementptr inbounds { %tydesc*, i8* }* %__auto_borrow_obj, i32 0, i32 0\r\n  store %tydesc* %3, %tydesc** %4\r\n  %5 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 1\r\n  %6 = load i8** %5\r\n  %7 = getelementptr inbounds { %tydesc*, i8* }* %__auto_borrow_obj, i32 0, i32 1\r\n  store i8* %6, i8** %7\r\n  %8 = bitcast { %tydesc*, i8* }* %__auto_borrow_obj to i8*\r\n  %9 = bitcast { %tydesc*, i8* }* %__trait_callee to i8*\r\n  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %9, i8* %8, i32 8, i32 4, i1 false)\r\n  %10 = getelementptr inbounds { %tydesc*, i8* }* %__trait_callee, i32 0, i32 1\r\n  %11 = load i8** %10\r\n  %12 = bitcast i8* %11 to { i32, %tydesc*, i8*, i8*, i8 }*\r\n  %13 = getelementptr inbounds { %tydesc*, i8* }* %__trait_callee, i32 0, i32 0\r\n  %14 = bitcast %tydesc** %13 to [1 x i8*]**\r\n  %15 = load [1 x i8*]** %14\r\n  %16 = getelementptr inbounds [1 x i8*]* %15, i32 0, i32 1\r\n  %17 = load i8** %16\r\n  %18 = bitcast i8* %17 to void ({ i32, %tydesc*, i8*, i8*, i8 }*)*\r\n  call void %18({ i32, %tydesc*, i8*, i8*, i8 }* %12)\r\n  ret void\r\n}\r\n\r\n...\r\n\r\ndefine void @_ZN4main_UUID.0E({ i32, %tydesc*, i8*, i8*, i8 }*) #4 {\r\n\"function top level\":\r\n  %o = alloca %struct.Foo\r\n  %1 = alloca { %tydesc*, i8* }\r\n  %__auto_borrow_obj = alloca { %tydesc*, i8* }\r\n  %2 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 1\r\n  %3 = bitcast i8** %2 to %struct.Foo**\r\n  store %struct.Foo* %o, %struct.Foo** %3\r\n  %4 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 0\r\n  %5 = bitcast %tydesc** %4 to { %tydesc*, void ({ i32, %tydesc*, i8*, i8*, i8 }*)* }**\r\n  store { %tydesc*, void ({ i32, %tydesc*, i8*, i8*, i8 }*)* }* @vtable1081, { %tydesc*, void ({ i32, %tydesc*, i8*, i8*, i8 }*)* }** %5\r\n  %6 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 0\r\n  %7 = load %tydesc** %6\r\n  %8 = getelementptr inbounds { %tydesc*, i8* }* %__auto_borrow_obj, i32 0, i32 0\r\n  store %tydesc* %7, %tydesc** %8\r\n  %9 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 1\r\n  %10 = load i8** %9\r\n  %11 = getelementptr inbounds { %tydesc*, i8* }* %__auto_borrow_obj, i32 0, i32 1\r\n  store i8* %10, i8** %11\r\n  call void @_ZN7callBar_UUID.0E({ i32, %tydesc*, i8*, i8*, i8 }* undef, { %tydesc*, i8* }* %__auto_borrow_obj)\r\n  ret void\r\n}\r\n```\r\n\r\nIf you apply my patch, it would become way shorter and cleaner:\r\n```\r\ndefine void @_ZN7callBar_UUID.0E({ i32, %tydesc*, i8*, i8*, i8 }*, { %tydesc*, i8* }*) #4 {\r\n\"function top level\":\r\n  %2 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 1\r\n  %3 = load i8** %2\r\n  %4 = bitcast i8* %3 to { i32, %tydesc*, i8*, i8*, i8 }*\r\n  %5 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 0\r\n  %6 = bitcast %tydesc** %5 to [1 x i8*]**\r\n  %7 = load [1 x i8*]** %6\r\n  %8 = getelementptr inbounds [1 x i8*]* %7, i32 0, i32 1\r\n  %9 = load i8** %8\r\n  %10 = bitcast i8* %9 to void ({ i32, %tydesc*, i8*, i8*, i8 }*)*\r\n  call void %10({ i32, %tydesc*, i8*, i8*, i8 }* %4)\r\n  ret void\r\n}\r\n\r\n...\r\n\r\ndefine void @_ZN4main_UUID.0E({ i32, %tydesc*, i8*, i8*, i8 }*) #4 {\r\n\"function top level\":\r\n  %o = alloca %struct.Foo\r\n  %1 = alloca { %tydesc*, i8* }\r\n  %2 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 1\r\n  %3 = bitcast i8** %2 to %struct.Foo**\r\n  store %struct.Foo* %o, %struct.Foo** %3\r\n  %4 = getelementptr inbounds { %tydesc*, i8* }* %1, i32 0, i32 0\r\n  %5 = bitcast %tydesc** %4 to { %tydesc*, void ({ i32, %tydesc*, i8*, i8*, i8 }*)* }**\r\n  store { %tydesc*, void ({ i32, %tydesc*, i8*, i8*, i8 }*)* }* @vtable1081, { %tydesc*, void ({ i32, %tydesc*, i8*, i8*, i8 }*)* }** %5\r\n  call void @_ZN7callBar_UUID.0E({ i32, %tydesc*, i8*, i8*, i8 }* undef, { %tydesc*, i8* }* %1)\r\n  ret void\r\n}\r\n```\r\n\r\nAlthough this change doesn't increase the compilation speed much (I mentioned only about 1-2% boost on \"rustc -O -Z time-passes syntax.rs\"), but I still think it's a good thing to do as it greatly simplifies/clarifies LL generated in some cases which would definitely help in the future code generation investigations.\r\n\r\nI don't provide any new test cases in this patch as it is merely an optimization.\r\n\r\nSorry guys, I somehow messed my previous PR and I don't see any better way to fix as to recreate it here.", "tree": {"sha": "5533b8a3721e23ad254b1e07b34c83802108a27a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5533b8a3721e23ad254b1e07b34c83802108a27a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89cc8529cc18802e4d7feb370e56809a1150b750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89cc8529cc18802e4d7feb370e56809a1150b750", "html_url": "https://github.com/rust-lang/rust/commit/89cc8529cc18802e4d7feb370e56809a1150b750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89cc8529cc18802e4d7feb370e56809a1150b750/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44997a127bb9acc1957d809a0e6cad190b75e491", "url": "https://api.github.com/repos/rust-lang/rust/commits/44997a127bb9acc1957d809a0e6cad190b75e491", "html_url": "https://github.com/rust-lang/rust/commit/44997a127bb9acc1957d809a0e6cad190b75e491"}, {"sha": "fadc6cc4b006d0eb6250afb899f10f8b67ad546d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fadc6cc4b006d0eb6250afb899f10f8b67ad546d", "html_url": "https://github.com/rust-lang/rust/commit/fadc6cc4b006d0eb6250afb899f10f8b67ad546d"}], "stats": {"total": 82, "additions": 51, "deletions": 31}, "files": [{"sha": "01702e749a3569bf0b1cdafdd59e33d9e7dc69ba", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=89cc8529cc18802e4d7feb370e56809a1150b750", "patch": "@@ -313,6 +313,36 @@ pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n         let target_obj_ty = expr_ty_adjusted(bcx, expr);\n         debug!(\"auto_borrow_obj(target=%s)\",\n                target_obj_ty.repr(tcx));\n+\n+        // Extract source store information\n+        let (source_store, source_mutbl) = match ty::get(source_datum.ty).sty {\n+            ty::ty_trait(_, _, s, m, _) => (s, m),\n+            _ => {\n+                bcx.sess().span_bug(\n+                    expr.span,\n+                    fmt!(\"auto_borrow_trait_obj expected a trait, found %s\",\n+                         source_datum.ty.repr(bcx.tcx())));\n+            }\n+        };\n+\n+        // check if any borrowing is really needed or we could reuse the source_datum instead\n+        match ty::get(target_obj_ty).sty {\n+            ty::ty_trait(_, _, ty::RegionTraitStore(target_scope), target_mutbl, _) => {\n+                if target_mutbl == ast::MutImmutable && target_mutbl == source_mutbl {\n+                    match source_store {\n+                        ty::RegionTraitStore(source_scope) => {\n+                            if tcx.region_maps.is_subregion_of(target_scope, source_scope) {\n+                                return DatumBlock { bcx: bcx, datum: source_datum };\n+                            }\n+                        },\n+                        _ => {}\n+\n+                    };\n+                }\n+            },\n+            _ => {}\n+        }\n+\n         let scratch = scratch_datum(bcx, target_obj_ty,\n                                     \"__auto_borrow_obj\", false);\n \n@@ -331,15 +361,6 @@ pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n         // ~T, or &T, depending on source_obj_ty.\n         let source_data_ptr = GEPi(bcx, source_llval, [0u, abi::trt_field_box]);\n         let source_data = Load(bcx, source_data_ptr); // always a ptr\n-        let (source_store, source_mutbl) = match ty::get(source_datum.ty).sty {\n-            ty::ty_trait(_, _, s, m, _) => (s, m),\n-            _ => {\n-                bcx.sess().span_bug(\n-                    expr.span,\n-                    fmt!(\"auto_borrow_trait_obj expected a trait, found %s\",\n-                         source_datum.ty.repr(bcx.tcx())));\n-            }\n-        };\n         let target_data = match source_store {\n             ty::BoxTraitStore(*) => {\n                 // For deref of @T or @mut T, create a dummy datum and"}, {"sha": "934dfabbb4de4aa4040600499d664fe26d143103", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=89cc8529cc18802e4d7feb370e56809a1150b750", "patch": "@@ -434,13 +434,22 @@ pub fn trans_trait_callee(bcx: @mut Block,\n     let _icx = push_ctxt(\"impl::trans_trait_callee\");\n     let mut bcx = bcx;\n \n+    // make a local copy for trait if needed\n     let self_ty = expr_ty_adjusted(bcx, self_expr);\n-    let self_scratch = scratch_datum(bcx, self_ty, \"__trait_callee\", false);\n-    bcx = expr::trans_into(bcx, self_expr, expr::SaveIn(self_scratch.val));\n+    let self_scratch = match ty::get(self_ty).sty {\n+        ty::ty_trait(_, _, ty::RegionTraitStore(*), _, _) => {\n+            unpack_datum!(bcx, expr::trans_to_datum(bcx, self_expr))\n+        }\n+        _ => {\n+            let d = scratch_datum(bcx, self_ty, \"__trait_callee\", false);\n+            bcx = expr::trans_into(bcx, self_expr, expr::SaveIn(d.val));\n+            // Arrange a temporary cleanup for the object in case something\n+            // should go wrong before the method is actually *invoked*.\n+            d.add_clean(bcx);\n+            d\n+        }\n+    };\n \n-    // Arrange a temporary cleanup for the object in case something\n-    // should go wrong before the method is actually *invoked*.\n-    self_scratch.add_clean(bcx);\n \n     let callee_ty = node_id_type(bcx, callee_id);\n     trans_trait_callee_from_llval(bcx,"}, {"sha": "0954302ba81f438cebfdc629de38db1d2bc37c66", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=89cc8529cc18802e4d7feb370e56809a1150b750", "patch": "@@ -278,23 +278,12 @@ impl Type {\n \n     pub fn opaque_trait(ctx: &CrateContext, store: ty::TraitStore) -> Type {\n         let tydesc_ptr = ctx.tydesc_type.ptr_to();\n-        match store {\n-            ty::BoxTraitStore => {\n-                Type::struct_(\n-                    [ tydesc_ptr, Type::opaque_box(ctx).ptr_to() ],\n-                false)\n-            }\n-            ty::UniqTraitStore => {\n-                Type::struct_(\n-                    [ tydesc_ptr, Type::unique(ctx, &Type::i8()).ptr_to()],\n-                false)\n-            }\n-            ty::RegionTraitStore(*) => {\n-                Type::struct_(\n-                    [ tydesc_ptr, Type::i8().ptr_to() ],\n-                false)\n-            }\n-        }\n+        let box_ty = match store {\n+            ty::BoxTraitStore => Type::opaque_box(ctx),\n+            ty::UniqTraitStore => Type::unique(ctx, &Type::i8()),\n+            ty::RegionTraitStore(*) => Type::i8()\n+        };\n+        Type::struct_([tydesc_ptr, box_ty.ptr_to()], false)\n     }\n \n     pub fn kind(&self) -> TypeKind {"}, {"sha": "789295edaaa0733ccafbbf075ce2758906d3db54", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cc8529cc18802e4d7feb370e56809a1150b750/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=89cc8529cc18802e4d7feb370e56809a1150b750", "patch": "@@ -55,6 +55,7 @@ fn test_destroy_actually_kills(force: bool) {\n \n     #[cfg(windows)]\n     fn process_exists(pid: libc::pid_t) -> bool {\n+        #[fixed_stack_segment];\n \n         use std::libc::types::os::arch::extra::DWORD;\n         use std::libc::funcs::extra::kernel32::{CloseHandle, GetExitCodeProcess, OpenProcess};"}]}