{"sha": "5c780b98d10f48d6255cf2deb2643194b9221c02", "node_id": "C_kwDOAAsO6NoAKDVjNzgwYjk4ZDEwZjQ4ZDYyNTVjZjJkZWIyNjQzMTk0YjkyMjFjMDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T09:19:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T09:19:03Z"}, "message": "Auto merge of #96964 - oli-obk:const_trait_mvp, r=compiler-errors\n\nReplace `#[default_method_body_is_const]` with `#[const_trait]`\n\npulled out of #96077\n\nrelated issues:  #67792 and #92158\n\ncc `@fee1-dead`\n\nThis is groundwork to only allowing `impl const Trait` for traits that are marked with `#[const_trait]`. This is necessary to prevent adding a new default method from becoming a breaking change (as it could be a non-const fn).", "tree": {"sha": "c2ff6e458787797f666a3774b05863c2a1d8333e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ff6e458787797f666a3774b05863c2a1d8333e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c780b98d10f48d6255cf2deb2643194b9221c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c780b98d10f48d6255cf2deb2643194b9221c02", "html_url": "https://github.com/rust-lang/rust/commit/5c780b98d10f48d6255cf2deb2643194b9221c02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c780b98d10f48d6255cf2deb2643194b9221c02/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855fc022fe879f4e3493a024f9c6b981d6317612", "url": "https://api.github.com/repos/rust-lang/rust/commits/855fc022fe879f4e3493a024f9c6b981d6317612", "html_url": "https://github.com/rust-lang/rust/commit/855fc022fe879f4e3493a024f9c6b981d6317612"}, {"sha": "2f96fbe2200d5928faafdf068b591170b6a127b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f96fbe2200d5928faafdf068b591170b6a127b7", "html_url": "https://github.com/rust-lang/rust/commit/2f96fbe2200d5928faafdf068b591170b6a127b7"}], "stats": {"total": 342, "additions": 82, "deletions": 260}, "files": [{"sha": "ac529bf152f2ba448a0cc07ae3bf9a3b618a9f4e", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -277,8 +277,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def.did) {\n-                // allow calling functions marked with #[default_method_body_is_const].\n-                if !ecx.tcx.has_attr(def.did, sym::default_method_body_is_const) {\n+                // allow calling functions inside a trait marked with #[const_trait].\n+                if !ecx.tcx.is_const_default_method(def.did) {\n                     // We certainly do *not* want to actually call the fn\n                     // though, so be sure we return here.\n                     throw_unsup_format!(\"calling non-const function `{}`\", instance)"}, {"sha": "d2b5ef8ea6fa6fe03893c859fc35547c433375e0", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -9,6 +9,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(control_flow_enum)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "eea6e2a47a94bcc92ed9087d2eceba67093ba4e5", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -711,8 +711,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     }\n                 };\n \n-                let mut nonconst_call_permission = false;\n-\n                 // Attempting to call a trait method?\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n                     trace!(\"attempting to call a trait method\");\n@@ -774,13 +772,12 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             }\n                         }\n                         _ if !tcx.is_const_fn_raw(callee) => {\n-                            // At this point, it is only legal when the caller is marked with\n-                            // #[default_method_body_is_const], and the callee is in the same\n-                            // trait.\n-                            let callee_trait = tcx.trait_of_item(callee);\n-                            if callee_trait.is_some()\n-                                && tcx.has_attr(caller.to_def_id(), sym::default_method_body_is_const)\n-                                && callee_trait == tcx.trait_of_item(caller)\n+                            // At this point, it is only legal when the caller is in a trait\n+                            // marked with #[const_trait], and the callee is in the same trait.\n+                            let mut nonconst_call_permission = false;\n+                            if let Some(callee_trait) = tcx.trait_of_item(callee)\n+                                && tcx.has_attr(callee_trait, sym::const_trait)\n+                                && Some(callee_trait) == tcx.trait_of_item(caller)\n                                 // Can only call methods when it's `<Self as TheTrait>::f`.\n                                 && tcx.types.self_param == substs.type_at(0)\n                             {\n@@ -874,16 +871,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 let is_intrinsic = tcx.is_intrinsic(callee);\n \n                 if !tcx.is_const_fn_raw(callee) {\n-                    if tcx.trait_of_item(callee).is_some() {\n-                        if tcx.has_attr(callee, sym::default_method_body_is_const) {\n-                            // To get to here we must have already found a const impl for the\n-                            // trait, but for it to still be non-const can be that the impl is\n-                            // using default method bodies.\n-                            nonconst_call_permission = true;\n-                        }\n-                    }\n-\n-                    if !nonconst_call_permission {\n+                    if !tcx.is_const_default_method(callee) {\n+                        // To get to here we must have already found a const impl for the\n+                        // trait, but for it to still be non-const can be that the impl is\n+                        // using default method bodies.\n                         self.check_op(ops::FnCallNonConst {\n                             caller,\n                             callee,"}, {"sha": "25b420bed1766b2d999d3de8ddde4498400ca246", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::{sym, Symbol};\n+use rustc_span::Symbol;\n \n pub use self::qualifs::Qualif;\n \n@@ -84,10 +84,10 @@ pub fn rustc_allow_const_fn_unstable(\n // functions are subject to more stringent restrictions than \"const-unstable\" functions: They\n // cannot use unstable features and can only call other \"const-stable\" functions.\n pub fn is_const_stable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    // A default body marked const is not const-stable because const\n+    // A default body in a `#[const_trait]` is not const-stable because const\n     // trait fns currently cannot be const-stable. We shouldn't\n     // restrict default bodies to only call const-stable functions.\n-    if tcx.has_attr(def_id, sym::default_method_body_is_const) {\n+    if tcx.is_const_default_method(def_id) {\n         return false;\n     }\n "}, {"sha": "8155e65a6dbf573e8813b8b1f20d8b302cbe5990", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -473,9 +473,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     // RFC 2632\n     gated!(\n-        default_method_body_is_const, Normal, template!(Word), WarnFollowing, const_trait_impl,\n-        \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n-        as `const`, which may be removed or renamed in the future.\"\n+        const_trait, Normal, template!(Word), WarnFollowing, const_trait_impl,\n+        \"`const` is a temporary placeholder for marking a trait that is suitable for `const` \\\n+        `impls` and all default bodies as `const`, which may be removed or renamed in the \\\n+        future.\"\n     ),\n     // lang-team MCP 147\n     gated!("}, {"sha": "68876e89c4b1fe3a1c9784c64a507ced7794816a", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -92,6 +92,7 @@ pub enum DefKind {\n     /// [RFC 2593]: https://github.com/rust-lang/rfcs/pull/2593\n     Ctor(CtorOf, CtorKind),\n     /// Associated function: `impl MyStruct { fn associated() {} }`\n+    /// or `trait Foo { fn associated() {} }`\n     AssocFn,\n     /// Associated constant: `trait MyTrait { const ASSOC: usize; }`\n     AssocConst,"}, {"sha": "f67e1cab16d9c02d0290cd35bc0362f3030ac55e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -893,9 +893,9 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             let needs_inline = (generics.requires_monomorphization(tcx)\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n                 && tcx.sess.opts.output_types.should_codegen();\n-            // The function has a `const` modifier or is annotated with `default_method_body_is_const`.\n+            // The function has a `const` modifier or is in a `#[const_trait]`.\n             let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())\n-                || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);\n+                || tcx.is_const_default_method(def_id.to_def_id());\n             let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }"}, {"sha": "97f429cfd3fa6df2ec2b7d6c70df1e8088002b1a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -494,9 +494,7 @@ impl<'hir> Map<'hir> {\n             BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(def_id.to_def_id()) => {\n                 ConstContext::ConstFn\n             }\n-            BodyOwnerKind::Fn\n-                if self.tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const) =>\n-            {\n+            BodyOwnerKind::Fn if self.tcx.is_const_default_method(def_id.to_def_id()) => {\n                 ConstContext::ConstFn\n             }\n             BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,"}, {"sha": "a493aaac276b1a3e8f0cf9cb533ee27b61128829", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -2303,6 +2303,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.def_kind(def_id), DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..))\n             && self.impl_constness(def_id) == hir::Constness::Const\n     }\n+\n+    #[inline]\n+    pub fn is_const_default_method(self, def_id: DefId) -> bool {\n+        matches!(self.trait_of_item(def_id), Some(trait_id) if self.has_attr(trait_id, sym::const_trait))\n+    }\n }\n \n /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition."}, {"sha": "0fe6d58b86daac739f61e4d44cd9c7dbf512c381", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -122,9 +122,7 @@ impl CheckAttrVisitor<'_> {\n                 | sym::rustc_if_this_changed\n                 | sym::rustc_then_this_would_need => self.check_rustc_dirty_clean(&attr),\n                 sym::cmse_nonsecure_entry => self.check_cmse_nonsecure_entry(attr, span, target),\n-                sym::default_method_body_is_const => {\n-                    self.check_default_method_body_is_const(attr, span, target)\n-                }\n+                sym::const_trait => self.check_const_trait(attr, span, target),\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n                 sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n                 sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),\n@@ -2097,23 +2095,14 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    /// default_method_body_is_const should only be applied to trait methods with default bodies.\n-    fn check_default_method_body_is_const(\n-        &self,\n-        attr: &Attribute,\n-        span: Span,\n-        target: Target,\n-    ) -> bool {\n+    /// `#[const_trait]` only applies to traits.\n+    fn check_const_trait(&self, attr: &Attribute, _span: Span, target: Target) -> bool {\n         match target {\n-            Target::Method(MethodKind::Trait { body: true }) => true,\n+            Target::Trait => true,\n             _ => {\n                 self.tcx\n                     .sess\n-                    .struct_span_err(\n-                        attr.span,\n-                        \"attribute should be applied to a trait method with body\",\n-                    )\n-                    .span_label(span, \"not a trait method or missing a body\")\n+                    .struct_span_err(attr.span, \"attribute should be applied to a trait\")\n                     .emit();\n                 false\n             }\n@@ -2207,6 +2196,8 @@ impl CheckAttrVisitor<'_> {\n                 \"attribute `{}` without any lints has no effect\",\n                 attr.name_or_empty()\n             )\n+        } else if attr.name_or_empty() == sym::default_method_body_is_const {\n+            format!(\"`default_method_body_is_const` has been replaced with `#[const_trait]` on traits\")\n         } else {\n             return;\n         };"}, {"sha": "996ca66de0e45a6a3935992c4c16268521d686bb", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -13,7 +13,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n@@ -64,66 +63,6 @@ pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_const_bodies, ..*providers };\n }\n \n-fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-    let _: Option<_> = try {\n-        if let hir::ItemKind::Impl(ref imp) = item.kind && let hir::Constness::Const = imp.constness {\n-            let trait_def_id = imp.of_trait.as_ref()?.trait_def_id()?;\n-            let ancestors = tcx\n-                .trait_def(trait_def_id)\n-                .ancestors(tcx, item.def_id.to_def_id())\n-                .ok()?;\n-            let mut to_implement = Vec::new();\n-\n-            for trait_item in tcx.associated_items(trait_def_id).in_definition_order()\n-            {\n-                if let ty::AssocItem {\n-                    kind: ty::AssocKind::Fn,\n-                    defaultness,\n-                    def_id: trait_item_id,\n-                    ..\n-                } = *trait_item\n-                {\n-                    // we can ignore functions that do not have default bodies:\n-                    // if those are unimplemented it will be caught by typeck.\n-                    if !defaultness.has_value()\n-                        || tcx\n-                        .has_attr(trait_item_id, sym::default_method_body_is_const)\n-                    {\n-                        continue;\n-                    }\n-\n-                    let is_implemented = ancestors\n-                        .leaf_def(tcx, trait_item_id)\n-                        .map(|node_item| !node_item.defining_node.is_from_trait())\n-                        .unwrap_or(false);\n-\n-                    if !is_implemented {\n-                        to_implement.push(trait_item_id);\n-                    }\n-                }\n-            }\n-\n-            // all nonconst trait functions (not marked with #[default_method_body_is_const])\n-            // must be implemented\n-            if !to_implement.is_empty() {\n-                let not_implemented = to_implement\n-                    .into_iter()\n-                    .map(|did| tcx.item_name(did).to_string())\n-                    .collect::<Vec<_>>()\n-                    .join(\"`, `\");\n-                tcx\n-                    .sess\n-                    .struct_span_err(\n-                        item.span,\n-                        \"const trait implementations may not use non-const default functions\",\n-                    )\n-                    .note(&format!(\"`{}` not implemented\", not_implemented))\n-                    .emit();\n-            }\n-        }\n-    };\n-}\n-\n #[derive(Copy, Clone)]\n struct CheckConstVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -254,7 +193,6 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         intravisit::walk_item(self, item);\n-        check_item(self.tcx, item);\n     }\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {"}, {"sha": "16162f1cc898a5284ab49b7af4772888cbb3a7c6", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -505,6 +505,7 @@ symbols! {\n         const_raw_ptr_deref,\n         const_raw_ptr_to_usize_cast,\n         const_refs_to_cell,\n+        const_trait,\n         const_trait_bound_opt_out,\n         const_trait_impl,\n         const_transmute,"}, {"sha": "8056198b20c21690f41239339e0767148e98a2c2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n };\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -153,7 +153,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     let constness = match hir_id {\n         Some(hir_id) => match tcx.hir().get(hir_id) {\n             hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n-                if tcx.has_attr(def_id, sym::default_method_body_is_const) =>\n+                if tcx.is_const_default_method(def_id) =>\n             {\n                 hir::Constness::Const\n             }"}, {"sha": "70f3fe853d97aad8202b86c23211042230f2ff99", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -107,6 +107,7 @@ use crate::marker::Destruct;\n #[lang = \"clone\"]\n #[rustc_diagnostic_item = \"Clone\"]\n #[rustc_trivial_field_reads]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Clone: Sized {\n     /// Returns a copy of the value.\n     ///\n@@ -129,7 +130,7 @@ pub trait Clone: Sized {\n     /// allocations.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[default_method_body_is_const]\n+    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn clone_from(&mut self, source: &Self)\n     where\n         Self: ~const Destruct,"}, {"sha": "f281e8429c693e40089326b9443e5a4a534e8f07", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -214,6 +214,7 @@ use self::Ordering::*;\n         append_const_msg,\n     )\n )]\n+#[cfg_attr(not(bootstrap), const_trait)]\n #[rustc_diagnostic_item = \"PartialEq\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used\n@@ -226,7 +227,7 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[default_method_body_is_const]\n+    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn ne(&self, other: &Rhs) -> bool {\n         !self.eq(other)\n     }\n@@ -1053,6 +1054,7 @@ impl PartialOrd for Ordering {\n         append_const_msg,\n     )\n )]\n+#[cfg_attr(not(bootstrap), const_trait)]\n #[rustc_diagnostic_item = \"PartialOrd\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists.\n@@ -1096,7 +1098,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[default_method_body_is_const]\n+    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn lt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Less))\n     }\n@@ -1116,7 +1118,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[default_method_body_is_const]\n+    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn le(&self, other: &Rhs) -> bool {\n         // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.\n         // FIXME: The root cause was fixed upstream in LLVM with:\n@@ -1139,7 +1141,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[default_method_body_is_const]\n+    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn gt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater))\n     }\n@@ -1159,7 +1161,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[default_method_body_is_const]\n+    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn ge(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater | Equal))\n     }"}, {"sha": "ec70a69ff1060902588f892678289819da707fc4", "filename": "src/test/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -16,12 +16,12 @@ pub struct S<T>(T);\n // @has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Clone'\n // @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' '~const'\n // @has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' ': Clone'\n+#[const_trait]\n pub trait Tr<T> {\n     // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n     // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n     // @!has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n     // @has - '//div[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n-    #[default_method_body_is_const]\n     fn a<A: ~const Clone + ~const Destruct>()\n     where\n         Option<A>: ~const Clone + ~const Destruct,"}, {"sha": "01ac74feff74dfe25fe6a573319715e2f3cefbf2", "filename": "src/test/ui/rfc-2632-const-trait-impl/attr-misuse.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,13 +1,10 @@\n #![feature(const_trait_impl)]\n \n-#[default_method_body_is_const] //~ ERROR attribute should be applied\n+#[const_trait]\n trait A {\n-    #[default_method_body_is_const] //~ ERROR attribute should be applied\n-    fn no_body(self);\n-\n-    #[default_method_body_is_const]\n-    fn correct_use(&self) {}\n+    #[const_trait] //~ ERROR attribute should be applied\n+    fn foo(self);\n }\n \n-#[default_method_body_is_const] //~ ERROR attribute should be applied\n+#[const_trait] //~ ERROR attribute should be applied\n fn main() {}"}, {"sha": "b18f33218c2db68503e59fdc63c012ff7969f7bd", "filename": "src/test/ui/rfc-2632-const-trait-impl/attr-misuse.stderr", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,32 +1,14 @@\n-error: attribute should be applied to a trait method with body\n-  --> $DIR/attr-misuse.rs:3:1\n+error: attribute should be applied to a trait\n+  --> $DIR/attr-misuse.rs:9:1\n    |\n-LL |   #[default_method_body_is_const]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | / trait A {\n-LL | |     #[default_method_body_is_const]\n-LL | |     fn no_body(self);\n-LL | |\n-LL | |     #[default_method_body_is_const]\n-LL | |     fn correct_use(&self) {}\n-LL | | }\n-   | |_- not a trait method or missing a body\n+LL | #[const_trait]\n+   | ^^^^^^^^^^^^^^\n \n-error: attribute should be applied to a trait method with body\n-  --> $DIR/attr-misuse.rs:12:1\n-   |\n-LL | #[default_method_body_is_const]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | fn main() {}\n-   | ------------ not a trait method or missing a body\n-\n-error: attribute should be applied to a trait method with body\n+error: attribute should be applied to a trait\n   --> $DIR/attr-misuse.rs:5:5\n    |\n-LL |     #[default_method_body_is_const]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     fn no_body(self);\n-   |     ----------------- not a trait method or missing a body\n+LL |     #[const_trait]\n+   |     ^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "e73082c11276fc4f8af6a8a0dc61f98b8348d9fe", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,7 +1,7 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait MyTrait {\n-    #[default_method_body_is_const]\n     fn defaulted_func(&self) {}\n     fn func(self);\n }"}, {"sha": "f66d63da6931447c5d2956d54d95cba6d5dae028", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -2,7 +2,7 @@\n \n pub struct Int(i32);\n \n-impl const std::ops::Add for i32 { //~ ERROR type annotations needed\n+impl const std::ops::Add for i32 {\n     //~^ ERROR only traits defined in the current crate can be implemented for primitive types\n     type Output = Self;\n \n@@ -11,15 +11,15 @@ impl const std::ops::Add for i32 { //~ ERROR type annotations needed\n     }\n }\n \n-impl std::ops::Add for Int { //~ ERROR type annotations needed\n+impl std::ops::Add for Int {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n         Int(self.0 + rhs.0)\n     }\n }\n \n-impl const std::ops::Add for Int { //~ ERROR type annotations needed\n+impl const std::ops::Add for Int {\n     //~^ ERROR conflicting implementations of trait\n     type Output = Self;\n "}, {"sha": "f515ec198adaa5b529ecb57d562a4c90d3148f83", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -19,50 +19,7 @@ LL | impl std::ops::Add for Int {\n LL | impl const std::ops::Add for Int {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Int`\n \n-error[E0283]: type annotations needed\n-  --> $DIR/const-and-non-const-impl.rs:5:12\n-   |\n-LL | impl const std::ops::Add for i32 {\n-   |            ^^^^^^^^^^^^^ cannot infer type for type `i32`\n-   |\n-note: multiple `impl`s satisfying `i32: Add` found\n-  --> $DIR/const-and-non-const-impl.rs:5:1\n-   |\n-LL | impl const std::ops::Add for i32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: and another `impl` found in the `core` crate: `impl Add for i32;`\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/const-and-non-const-impl.rs:14:6\n-   |\n-LL | impl std::ops::Add for Int {\n-   |      ^^^^^^^^^^^^^ cannot infer type for struct `Int`\n-   |\n-note: multiple `impl`s satisfying `Int: Add` found\n-  --> $DIR/const-and-non-const-impl.rs:14:1\n-   |\n-LL | impl std::ops::Add for Int {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | impl const std::ops::Add for Int {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/const-and-non-const-impl.rs:22:12\n-   |\n-LL | impl const std::ops::Add for Int {\n-   |            ^^^^^^^^^^^^^ cannot infer type for struct `Int`\n-   |\n-note: multiple `impl`s satisfying `Int: Add` found\n-  --> $DIR/const-and-non-const-impl.rs:14:1\n-   |\n-LL | impl std::ops::Add for Int {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | impl const std::ops::Add for Int {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0117, E0119, E0283.\n+Some errors have detailed explanations: E0117, E0119.\n For more information about an error, try `rustc --explain E0117`."}, {"sha": "0b981d1621ecaf06f80bf1da905d932455bdc1da", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,9 +1,9 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait ConstDefaultFn: Sized {\n     fn b(self);\n \n-    #[default_method_body_is_const]\n     fn a(self) {\n         self.b();\n     }"}, {"sha": "bde8bf20f46c5d1942ca195bfd56e9094f0126d1", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-default-method-body-is-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-default-method-body-is-const.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,4 +1,4 @@\n-// This tests that `default_method_body_is_const` methods can\n+// This tests that `const_trait` default methods can\n // be called from a const context when used across crates.\n //\n // check-pass"}, {"sha": "d27291231fbd74dc72881ac8ab72cb26cfe6c480", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -5,8 +5,8 @@ impl Tr for () {}\n \n const fn foo<T>() where T: ~const Tr {}\n \n+#[const_trait]\n pub trait Foo {\n-    #[default_method_body_is_const]\n     fn foo() {\n         foo::<()>();\n         //~^ ERROR the trait bound `(): ~const Tr` is not satisfied"}, {"sha": "d798516ff70fd05608449ff0b7e0c44c39d624e7", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,10 +1,9 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n pub trait Tr {\n-    #[default_method_body_is_const]\n     fn a(&self) {}\n \n-    #[default_method_body_is_const]\n     fn b(&self) {\n         ().a()\n         //~^ ERROR the trait bound"}, {"sha": "8bb7f0141033de1ab601b90c0c39fb0857e25c6c", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,17 +1,17 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:9:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n    |            ^^^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:9:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n    |            ^^^\n \n error[E0015]: cannot call non-const fn `<() as Tr>::a` in constant functions\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:9:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n    |            ^^^"}, {"sha": "1b45cd9aab9da51f4583c3c64c2d2a5e92e8e008", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-with-staged-api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -9,8 +9,8 @@\n #![feature(const_trait_impl)]\n #![stable(since = \"1\", feature = \"foo\")]\n \n+#[const_trait]\n trait Tr {\n-    #[default_method_body_is_const]\n     fn a() {}\n }\n "}, {"sha": "6df9696f2cbd79a6a9c30e55ffdcc5affd90fffb", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,32 +1,17 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Tr {\n     fn req(&self);\n \n-    fn prov(&self) {\n-        println!(\"lul\");\n-        self.req();\n-    }\n-\n-    #[default_method_body_is_const]\n     fn default() {}\n }\n \n struct S;\n \n-impl const Tr for S {\n-    fn req(&self) {}\n-} //~^^ ERROR const trait implementations may not use non-const default functions\n-\n impl const Tr for u16 {\n-    fn prov(&self) {}\n     fn default() {}\n-} //~^^^ ERROR not all trait items implemented\n+} //~^^ ERROR not all trait items implemented\n \n \n-impl const Tr for u32 {\n-    fn req(&self) {}\n-    fn default() {}\n-} //~^^^ ERROR const trait implementations may not use non-const default functions\n-\n fn main() {}"}, {"sha": "6c6ca9f5db8201802534089ad0d554a6074e67e2", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.stderr", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -1,33 +1,12 @@\n-error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn-fail.rs:17:1\n-   |\n-LL | / impl const Tr for S {\n-LL | |     fn req(&self) {}\n-LL | | }\n-   | |_^\n-   |\n-   = note: `prov` not implemented\n-\n-error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn-fail.rs:27:1\n-   |\n-LL | / impl const Tr for u32 {\n-LL | |     fn req(&self) {}\n-LL | |     fn default() {}\n-LL | | }\n-   | |_^\n-   |\n-   = note: `prov` not implemented\n-\n error[E0046]: not all trait items implemented, missing: `req`\n-  --> $DIR/impl-with-default-fn-fail.rs:21:1\n+  --> $DIR/impl-with-default-fn-fail.rs:12:1\n    |\n LL |     fn req(&self);\n    |     -------------- `req` from trait\n ...\n LL | impl const Tr for u16 {\n    | ^^^^^^^^^^^^^^^^^^^^^ missing `req` in implementation\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0046`."}, {"sha": "ae81421e9e1918b4456ac91a210d352b71d46a19", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-pass.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -2,28 +2,21 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Tr {\n     fn req(&self);\n \n-    fn prov(&self) {\n-        println!(\"lul\");\n-        self.req();\n-    }\n-\n-    #[default_method_body_is_const]\n     fn default() {}\n }\n \n impl const Tr for u8 {\n     fn req(&self) {}\n-    fn prov(&self) {}\n }\n \n macro_rules! impl_tr {\n     ($ty: ty) => {\n         impl const Tr for $ty {\n             fn req(&self) {}\n-            fn prov(&self) {}\n         }\n     }\n }"}, {"sha": "334fc4cb8473d179b557b680b047cfe12055a925", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-default-body-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -37,8 +37,8 @@ impl const FromResidual for T {\n }\n \n #[stable(feature = \"foo\", since = \"1.0\")]\n+#[const_trait]\n pub trait Tr {\n-    #[default_method_body_is_const]\n     #[stable(feature = \"foo\", since = \"1.0\")]\n     fn bar() -> T {\n         T?"}, {"sha": "b7cf9a13b796564a4fba3a0c3a88a37e5b78f347", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c780b98d10f48d6255cf2deb2643194b9221c02/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs?ref=5c780b98d10f48d6255cf2deb2643194b9221c02", "patch": "@@ -6,8 +6,8 @@ trait Bar {\n     fn bar() -> u8;\n }\n \n+#[const_trait]\n trait Foo {\n-    #[default_method_body_is_const]\n     fn foo() -> u8 where Self: ~const Bar {\n         <Self as Bar>::bar() * 6\n     }"}]}