{"sha": "137d1fb210a844a76f89d7355a1aaf9f7a88af33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzN2QxZmIyMTBhODQ0YTc2Zjg5ZDczNTVhMWFhZjlmN2E4OGFmMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-09T22:13:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-09T22:13:40Z"}, "message": "auto merge of #7657 : thestinger/rust/rollup, r=thestinger\n\nd3be8ab r=brson\r\n05eb3cf r=thestinger\r\nc80f4e1 r=huonw\r\n8c27af1 r=huonw\r\n0eee0b6 r=cmr\r\nea2756a r=thestinger", "tree": {"sha": "79aa81625da93344be55a61eb80c8d215dd4a808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79aa81625da93344be55a61eb80c8d215dd4a808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/137d1fb210a844a76f89d7355a1aaf9f7a88af33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/137d1fb210a844a76f89d7355a1aaf9f7a88af33", "html_url": "https://github.com/rust-lang/rust/commit/137d1fb210a844a76f89d7355a1aaf9f7a88af33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/137d1fb210a844a76f89d7355a1aaf9f7a88af33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e388a80c234d628c4d1fab77dc3e3f2c04cbefc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e388a80c234d628c4d1fab77dc3e3f2c04cbefc5", "html_url": "https://github.com/rust-lang/rust/commit/e388a80c234d628c4d1fab77dc3e3f2c04cbefc5"}, {"sha": "31114acdd7da8f2826558b11adea96d1c561aabd", "url": "https://api.github.com/repos/rust-lang/rust/commits/31114acdd7da8f2826558b11adea96d1c561aabd", "html_url": "https://github.com/rust-lang/rust/commit/31114acdd7da8f2826558b11adea96d1c561aabd"}], "stats": {"total": 124, "additions": 98, "deletions": 26}, "files": [{"sha": "2fc502568a8f20330ea746c7b69ef1b0e60fc744", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -292,13 +292,12 @@ pub fn malloc_raw_dyn(bcx: block,\n \n     if heap == heap_exchange {\n         let llty_value = type_of::type_of(ccx, t);\n-        let llalign = llalign_of_min(ccx, llty_value);\n \n         // Allocate space:\n         let r = callee::trans_lang_call(\n             bcx,\n             bcx.tcx().lang_items.exchange_malloc_fn(),\n-            [C_i32(llalign as i32), size],\n+            [size],\n             None);\n         rslt(r.bcx, PointerCast(r.bcx, r.val, llty_value.ptr_to()))\n     } else if heap == heap_exchange_vector {"}, {"sha": "6f5dde74b5c10909b56acb79c0700295771a7be1", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -319,16 +319,19 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 }\n                 _ => ()\n             }\n-            let mut ok = ty::type_is_nil(fn_ty.sig.output);\n-            let num_args = fn_ty.sig.inputs.len();\n-            ok &= num_args == 0u;\n-            if !ok {\n-                tcx.sess.span_err(\n-                    main_span,\n-                    fmt!(\"Wrong type in main function: found `%s`, \\\n-                          expected `fn() -> ()`\",\n-                         ppaux::ty_to_str(tcx, main_t)));\n-            }\n+            let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n+                purity: ast::impure_fn,\n+                abis: abi::AbiSet::Rust(),\n+                sig: ty::FnSig {\n+                    bound_lifetime_names: opt_vec::Empty,\n+                    inputs: ~[],\n+                    output: ty::mk_nil()\n+                }\n+            });\n+\n+            require_same_types(tcx, None, false, main_span, main_t, se_ty,\n+                || fmt!(\"main function expects type: `%s`\",\n+                        ppaux::ty_to_str(ccx.tcx, se_ty)));\n         }\n         _ => {\n             tcx.sess.span_bug(main_span,"}, {"sha": "126650981cd5fffe6c4bc965d1f152995a820f78", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -19,6 +19,8 @@ A quick summary:\n Implementations of the following traits:\n \n * `FromStr`\n+* `ToStr`\n+* `Not`\n * `Ord`\n * `TotalOrd`\n * `Eq`\n@@ -36,6 +38,8 @@ Finally, some inquries into the nature of truth: `is_true` and `is_false`.\n \n #[cfg(not(test))]\n use cmp::{Eq, Ord, TotalOrd, Ordering};\n+#[cfg(not(test))]\n+use ops::Not;\n use option::{None, Option, Some};\n use from_str::FromStr;\n use to_str::ToStr;\n@@ -254,6 +258,27 @@ pub fn all_values(blk: &fn(v: bool)) {\n #[inline]\n pub fn to_bit(v: bool) -> u8 { if v { 1u8 } else { 0u8 } }\n \n+/**\n+* The logical complement of a boolean value.\n+*\n+* # Examples\n+*\n+* ~~~rust\n+* rusti> !true\n+* false\n+* ~~~\n+*\n+* ~~~rust\n+* rusti> !false\n+* true\n+* ~~~\n+*/\n+#[cfg(not(test))]\n+impl Not<bool> for bool {\n+    #[inline]\n+    fn not(&self) -> bool { !*self }\n+}\n+\n #[cfg(not(test))]\n impl Ord for bool {\n     #[inline]"}, {"sha": "222952a6dc14395be0eaae6d8e677a81ab86f7b8", "filename": "src/libstd/option.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -379,6 +379,13 @@ impl<'self, A> Iterator<&'self A> for OptionIterator<'self, A> {\n     fn next(&mut self) -> Option<&'self A> {\n         util::replace(&mut self.opt, None)\n     }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        match self.opt {\n+            Some(_) => (1, Some(1)),\n+            None => (0, Some(0)),\n+        }\n+    }\n }\n \n /// Mutable iterator over an `Option<A>`\n@@ -390,6 +397,13 @@ impl<'self, A> Iterator<&'self mut A> for OptionMutIterator<'self, A> {\n     fn next(&mut self) -> Option<&'self mut A> {\n         util::replace(&mut self.opt, None)\n     }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        match self.opt {\n+            Some(_) => (1, Some(1)),\n+            None => (0, Some(0)),\n+        }\n+    }\n }\n \n #[test]\n@@ -487,3 +501,39 @@ fn test_filtered() {\n     assert_eq!(some_stuff.get(), 42);\n     assert!(modified_stuff.is_none());\n }\n+\n+#[test]\n+fn test_iter() {\n+    let val = 5;\n+\n+    let x = Some(val);\n+    let mut it = x.iter();\n+\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n+    assert_eq!(it.next(), Some(&val));\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n+    assert!(it.next().is_none());\n+}\n+\n+#[test]\n+fn test_mut_iter() {\n+    let val = 5;\n+    let new_val = 11;\n+\n+    let mut x = Some(val);\n+    let mut it = x.mut_iter();\n+\n+    assert_eq!(it.size_hint(), (1, Some(1)));\n+\n+    match it.next() {\n+        Some(interior) => {\n+            assert_eq!(*interior, val);\n+            *interior = new_val;\n+            assert_eq!(x, Some(new_val));\n+        }\n+        None => assert!(false),\n+    }\n+\n+    assert_eq!(it.size_hint(), (0, Some(0)));\n+    assert!(it.next().is_none());\n+}"}, {"sha": "ef89b8de45490eb6b69ddaf104d67e856e30cd6b", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -76,11 +76,11 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     box as *c_char\n }\n \n-// FIXME #4942: Make these signatures agree with exchange_alloc's signatures\n+/// The allocator for unique pointers without contained managed pointers.\n #[cfg(not(stage0), not(test))]\n #[lang=\"exchange_malloc\"]\n #[inline]\n-pub unsafe fn exchange_malloc(_align: u32, size: uintptr_t) -> *c_char {\n+pub unsafe fn exchange_malloc(size: uintptr_t) -> *c_char {\n     malloc_raw(size as uint) as *c_char\n }\n "}, {"sha": "2d730b7a6a2004efdd0f76c434dd3be2acc6e522", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -1771,7 +1771,7 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n \n }\n \n-/// Trait for ~[T] where T is Cloneable\n+/// Trait for &[T] where T is Cloneable\n pub trait MutableCloneableVector<T> {\n     /// Copies as many elements from `src` as it can into `self`\n     /// (the shorter of self.len() and src.len()). Returns the number of elements copied."}, {"sha": "0180c2b31d723f2033f81e385bcf0075587a1dac", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -213,7 +213,7 @@ fn print_diagnostic(topic: &str, lvl: level, msg: &str) {\n     }\n \n     print_maybe_colored(fmt!(\"%s: \", diagnosticstr(lvl)), diagnosticcolor(lvl));\n-    stderr.write_str(fmt!(\"%s\\n\", msg));\n+    print_maybe_colored(fmt!(\"%s\\n\", msg), term::color::BRIGHT_WHITE);\n }\n \n pub fn collect(messages: @mut ~[~str])"}, {"sha": "da8596fa25b472ac10d25af8573fbf96e52c4dfa", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -8,6 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected `fn()\n-\n-fn main(x: int) { }\n+fn main(x: int) { } //~ ERROR: main function expects type"}, {"sha": "05ce3eefda86c322156f14f1ce78c8330ef55d67", "filename": "src/test/compile-fail/extern-main-fn.rs", "status": "renamed", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fextern-main-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fextern-main-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-main-fn.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:binary operation + cannot be applied to type `*int`\n-\n-fn die() -> *int { (0 as *int) + (0 as *int) }\n-fn main() { }\n+extern fn main() {} //~ ERROR: main function expects type", "previous_filename": "src/test/compile-fail/binop-add-ptr.rs"}, {"sha": "09d5765a80f3f67c9b2a329b26c6e72abc8ef5a3", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() -> char {\n-//~^ ERROR Wrong type in main function: found `extern \"Rust\" fn() -> char`\n+//~^ ERROR: main function expects type\n }"}, {"sha": "ae990880523f945f7366827b331ac8d6dfd68008", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/137d1fb210a844a76f89d7355a1aaf9f7a88af33/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=137d1fb210a844a76f89d7355a1aaf9f7a88af33", "patch": "@@ -14,5 +14,5 @@ struct S {\n }\n \n fn main(foo: S) {\n-//~^ ERROR Wrong type in main function: found `extern \"Rust\" fn(S)`\n+//~^ ERROR: main function expects type\n }"}]}