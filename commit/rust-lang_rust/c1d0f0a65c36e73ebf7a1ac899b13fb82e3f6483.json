{"sha": "c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZDBmMGE2NWMzNmU3M2ViZjdhMWFjODk5YjEzZmI4MmUzZjY0ODM=", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-09T12:25:33Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-09T12:25:33Z"}, "message": "TEST: Use SmallVec<[u32; 4]> for field projection.", "tree": {"sha": "c236b47acdbcf8f57c18eb60cb23254bbe579161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c236b47acdbcf8f57c18eb60cb23254bbe579161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483", "html_url": "https://github.com/rust-lang/rust/commit/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c627c0d88ba8bf73793d9fb9bf1f1452c497f26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a", "html_url": "https://github.com/rust-lang/rust/commit/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "225514ea863cb7cdb952dfbe2b6596cccb54db15", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483", "patch": "@@ -24,6 +24,7 @@ use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, RelocModel, Target, TlsModel};\n+use smallvec::SmallVec;\n \n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n@@ -102,7 +103,7 @@ pub struct TypeLowering<'ll> {\n \n     /// If padding is used the slice maps fields from source order\n     /// to llvm order.\n-    pub field_remapping: Option<Box<[u32]>>,\n+    pub field_remapping: Option<Box<SmallVec<[u32; 4]>>>,\n }\n \n fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {"}, {"sha": "225044c84885703101dd428e8ee37bb4344fdf45", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=c1d0f0a65c36e73ebf7a1ac899b13fb82e3f6483", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{LayoutOf, PointeeInfo, Scalar, Size, TyAndLayoutMethods, Variants};\n+use smallvec::{smallvec, SmallVec};\n use tracing::debug;\n \n use std::fmt::Write;\n@@ -18,7 +19,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     layout: TyAndLayout<'tcx>,\n     defer: &mut Option<(&'a Type, TyAndLayout<'tcx>)>,\n-    field_remapping: &mut Option<Box<[u32]>>,\n+    field_remapping: &mut Option<Box<SmallVec<[u32; 4]>>>,\n ) -> &'a Type {\n     match layout.abi {\n         Abi::Scalar(_) => bug!(\"handled elsewhere\"),\n@@ -93,15 +94,15 @@ fn uncached_llvm_type<'a, 'tcx>(\n fn struct_llfields<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     layout: TyAndLayout<'tcx>,\n-) -> (Vec<&'a Type>, bool, Option<Box<[u32]>>) {\n+) -> (Vec<&'a Type>, bool, Option<Box<SmallVec<[u32; 4]>>>) {\n     debug!(\"struct_llfields: {:#?}\", layout);\n     let field_count = layout.fields.count();\n \n     let mut packed = false;\n     let mut offset = Size::ZERO;\n     let mut prev_effective_align = layout.align.abi;\n     let mut result: Vec<_> = Vec::with_capacity(1 + field_count * 2);\n-    let mut field_remapping = vec![0; field_count];\n+    let mut field_remapping = smallvec![0; field_count];\n     for i in layout.fields.index_by_increasing_offset() {\n         let target_offset = layout.fields.offset(i as usize);\n         let field = layout.field(cx, i);\n@@ -150,7 +151,7 @@ fn struct_llfields<'a, 'tcx>(\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n \n-    (result, packed, padding_used.then_some(field_remapping.into_boxed_slice()))\n+    (result, packed, padding_used.then_some(Box::new(field_remapping)))\n }\n \n impl<'a, 'tcx> CodegenCx<'a, 'tcx> {"}]}