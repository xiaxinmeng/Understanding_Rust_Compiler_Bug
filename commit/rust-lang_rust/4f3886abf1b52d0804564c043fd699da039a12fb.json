{"sha": "4f3886abf1b52d0804564c043fd699da039a12fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzg4NmFiZjFiNTJkMDgwNDU2NGMwNDNmZDY5OWRhMDM5YTEyZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-13T05:22:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-13T05:22:08Z"}, "message": "Auto merge of #41847 - alexcrichton:less-unstable-annotations, r=eddyb\n\nrustc: Add a new `-Z force-unstable-if-unmarked` flag\n\nThis commit adds a new `-Z` flag to the compiler for use when bootstrapping the\ncompiler itself. We want to be able to use crates.io crates, but we also want\nthe usage of such crates to be as ergonomic as possible! To that end compiler\ncrates are a little tricky in that the crates.io crates are not annotated as\nunstable, nor do they expect to pull in unstable dependencies.\n\nTo cover all these situations it's intended that the compiler will forever now\nbootstrap with `-Z force-unstable-if-unmarked`. This flags serves a dual purpose\nof forcing crates.io crates to themselves be unstable while also allowing them\nto use other \"unstable\" crates.io crates. This should mean that adding a\ndependency to compiler no longer requires upstream modification with\nunstable/staged_api attributes for inclusion!", "tree": {"sha": "2ed7e676dca983647f80990de2523c22c7514eff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ed7e676dca983647f80990de2523c22c7514eff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3886abf1b52d0804564c043fd699da039a12fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3886abf1b52d0804564c043fd699da039a12fb", "html_url": "https://github.com/rust-lang/rust/commit/4f3886abf1b52d0804564c043fd699da039a12fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3886abf1b52d0804564c043fd699da039a12fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f1cfd0fedc3eaa42ce0be3d5e36c13061d397d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f1cfd0fedc3eaa42ce0be3d5e36c13061d397d", "html_url": "https://github.com/rust-lang/rust/commit/d5f1cfd0fedc3eaa42ce0be3d5e36c13061d397d"}, {"sha": "ab54f4b226639558ff46ea1f3e3f504aacef562d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab54f4b226639558ff46ea1f3e3f504aacef562d", "html_url": "https://github.com/rust-lang/rust/commit/ab54f4b226639558ff46ea1f3e3f504aacef562d"}], "stats": {"total": 341, "additions": 201, "deletions": 140}, "files": [{"sha": "906c468241ae9d765fc006a8fb331c905bbd11d6", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -194,6 +194,8 @@ fn main() {\n                 // do that we pass a weird flag to the compiler to get it to do\n                 // so. Note that this is definitely a hack, and we should likely\n                 // flesh out rpath support more fully in the future.\n+                //\n+                // FIXME: remove condition after next stage0\n                 if stage != \"0\" {\n                     cmd.arg(\"-Z\").arg(\"osx-rpath-install-name\");\n                 }\n@@ -218,6 +220,17 @@ fn main() {\n             cmd.arg(\"-Z\").arg(\"unstable-options\");\n             cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n         }\n+\n+        // Force all crates compiled by this compiler to (a) be unstable and (b)\n+        // allow the `rustc_private` feature to link to other unstable crates\n+        // also in the sysroot.\n+        //\n+        // FIXME: remove condition after next stage0\n+        if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n+            if stage != \"0\" {\n+                cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n+            }\n+        }\n     }\n \n     if verbose > 1 {"}, {"sha": "ea0b521a2ce6934b8dc6fc96b9bba97651bb00cf", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -479,7 +479,8 @@ impl Build {\n         // compiled with debuginfo.\n         if mode != Mode::Tool {\n              cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n-                  .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string());\n+                  .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string())\n+                  .env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n         }\n \n         // Enable usage of unstable features\n@@ -524,7 +525,9 @@ impl Build {\n         // the comipiler, libs, and tests are stable and we don't want to make\n         // their deps unstable (since this would break the first invariant\n         // above).\n-        if mode != Mode::Tool {\n+        //\n+        // FIXME: remove this after next stage0\n+        if mode != Mode::Tool && stage == 0 {\n             cargo.env(\"RUSTBUILD_UNSTABLE\", \"1\");\n         }\n "}, {"sha": "c4c1635aa2a5a34cdfeae7b881536d008823f049", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -19,7 +19,7 @@\n //! objects of a single type.\n \n #![crate_name = \"arena\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -32,7 +32,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(generic_param_attrs)]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]"}, {"sha": "e0bea884f31c5a667245b373ffcc8744261f0fbb", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,7 @@\n //! [mz]: https://code.google.com/p/miniz/\n \n #![crate_name = \"flate\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -25,7 +25,7 @@\n #![deny(warnings)]\n \n #![feature(libc)]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![feature(unique)]\n #![cfg_attr(test, feature(rand))]\n "}, {"sha": "641a42b08188f8f64b9abfc3e8ee71e2dd798765", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,7 @@\n //! generated instead.\n \n #![crate_name = \"fmt_macros\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -25,7 +25,7 @@\n        test(attr(deny(warnings))))]\n #![deny(warnings)]\n \n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![feature(unicode)]\n \n pub use self::Piece::*;"}, {"sha": "c69c68ba59c011a65e6b3aaa873f4fdb690d584e", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -78,9 +78,9 @@\n //! ```\n \n #![crate_name = \"getopts\"]\n-#![unstable(feature = \"rustc_private\",\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `getopts` library instead\",\n-            issue = \"27812\")]\n+            issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -91,7 +91,7 @@\n \n #![deny(missing_docs)]\n #![deny(warnings)]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n use self::Name::*;\n use self::HasArg::*;"}, {"sha": "2c6744e7c90533d7cf045c9fab97b9e294e3fb2c", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -284,8 +284,8 @@\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n #![crate_name = \"graphviz\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "68c5d49591839216c8e4dec12b29b084ea7529d0", "filename": "src/libproc_macro_plugin/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibproc_macro_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibproc_macro_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -72,7 +72,7 @@\n //! }\n //! ```\n #![crate_name = \"proc_macro_plugin\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![feature(plugin_registrar)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n@@ -81,9 +81,9 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n+#![cfg_attr(stage0, feature(rustc_private))]\n \n extern crate rustc_plugin;\n extern crate syntax;"}, {"sha": "5cf26ea8bfca596db6575dc9ec4cc46066f1cc88", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -36,15 +35,17 @@\n #![feature(nonzero)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(specialization)]\n-#![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(discriminant_value)]\n #![feature(sort_unstable)]\n #![feature(trace_macros)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n #![recursion_limit=\"128\"]\n \n extern crate arena;"}, {"sha": "569b1aeeb09d7ca1a2e2323746295a89b24708c7", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -233,7 +233,6 @@ pub trait CrateStore {\n     fn export_macros(&self, cnum: CrateNum);\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n-    fn is_staged_api(&self, cnum: CrateNum) -> bool;\n     fn is_allocator(&self, cnum: CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n@@ -356,7 +355,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"lang_items\") }\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>\n         { bug!(\"missing_lang_items\") }\n-    fn is_staged_api(&self, cnum: CrateNum) -> bool { bug!(\"is_staged_api\") }\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }"}, {"sha": "d74877e355a7946c0d1bed885a397e2ce9b68908", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 58, "deletions": 23, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -13,12 +13,12 @@\n \n pub use self::StabilityLevel::*;\n \n-use hir::map as hir_map;\n use lint;\n use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, DefIndex, LOCAL_CRATE};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n+use session::Session;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::ast;\n@@ -123,7 +123,7 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                    item_sp: Span, kind: AnnotationKind, visit_children: F)\n         where F: FnOnce(&mut Self)\n     {\n-        if self.index.staged_api[&LOCAL_CRATE] && self.tcx.sess.features.borrow().staged_api {\n+        if self.index.staged_api[&LOCAL_CRATE] {\n             debug!(\"annotate(id = {:?}, attrs = {:?})\", id, attrs);\n             if let Some(..) = attr::find_deprecation(self.tcx.sess.diagnostic(), attrs, item_sp) {\n                 self.tcx.sess.span_err(item_sp, \"`#[deprecated]` cannot be used in staged api, \\\n@@ -390,20 +390,36 @@ impl<'a, 'tcx> Index<'tcx> {\n             parent_depr: None,\n             in_trait_impl: false,\n         };\n+\n+        // If the `-Z force-unstable-if-unmarked` flag is passed then we provide\n+        // a parent stability annotation which indicates that this is private\n+        // with the `rustc_private` feature. This is intended for use when\n+        // compiling librustc crates themselves so we can leverage crates.io\n+        // while maintaining the invariant that all sysroot crates are unstable\n+        // by default and are unable to be used.\n+        if tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+            let reason = \"this crate is being loaded from the sysroot, and \\\n+                          unstable location; did you mean to load this crate \\\n+                          from crates.io via `Cargo.toml` instead?\";\n+            let stability = tcx.intern_stability(Stability {\n+                level: attr::StabilityLevel::Unstable {\n+                    reason: Some(Symbol::intern(reason)),\n+                    issue: 27812,\n+                },\n+                feature: Symbol::intern(\"rustc_private\"),\n+                rustc_depr: None,\n+            });\n+            annotator.parent_stab = Some(stability);\n+        }\n+\n         annotator.annotate(ast::CRATE_NODE_ID, &krate.attrs, krate.span, AnnotationKind::Required,\n                            |v| intravisit::walk_crate(v, krate));\n     }\n \n-    pub fn new(hir_map: &hir_map::Map) -> Index<'tcx> {\n-        let krate = hir_map.krate();\n-\n-        let mut is_staged_api = false;\n-        for attr in &krate.attrs {\n-            if attr.path == \"stable\" || attr.path == \"unstable\" {\n-                is_staged_api = true;\n-                break\n-            }\n-        }\n+    pub fn new(sess: &Session) -> Index<'tcx> {\n+        let is_staged_api =\n+            sess.opts.debugging_opts.force_unstable_if_unmarked ||\n+            sess.features.borrow().staged_api;\n \n         let mut staged_api = FxHashMap();\n         staged_api.insert(LOCAL_CRATE, is_staged_api);\n@@ -496,8 +512,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        let is_staged_api = *self.stability.borrow_mut().staged_api.entry(def_id.krate)\n-            .or_insert_with(|| self.sess.cstore.is_staged_api(def_id.krate));\n+        let is_staged_api = self.lookup_stability(DefId {\n+            index: CRATE_DEF_INDEX,\n+            ..def_id\n+        }).is_some();\n         if !is_staged_api {\n             return;\n         }\n@@ -530,15 +548,32 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         match stability {\n             Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n-                if !self.stability.borrow().active_features.contains(feature) {\n-                    let msg = match *reason {\n-                        Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n-                                               feature.as_str(), &r),\n-                        None => format!(\"use of unstable library feature '{}'\", &feature)\n-                    };\n-                    emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n-                                     GateIssue::Library(Some(issue)), &msg);\n+                if self.stability.borrow().active_features.contains(feature) {\n+                    return\n                 }\n+\n+                // When we're compiling the compiler itself we may pull in\n+                // crates from crates.io, but those crates may depend on other\n+                // crates also pulled in from crates.io. We want to ideally be\n+                // able to compile everything without requiring upstream\n+                // modifications, so in the case that this looks like a\n+                // rustc_private crate (e.g. a compiler crate) and we also have\n+                // the `-Z force-unstable-if-unmarked` flag present (we're\n+                // compiling a compiler crate), then let this missing feature\n+                // annotation slide.\n+                if *feature == \"rustc_private\" && issue == 27812 {\n+                    if self.sess.opts.debugging_opts.force_unstable_if_unmarked {\n+                        return\n+                    }\n+                }\n+\n+                let msg = match *reason {\n+                    Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n+                                           feature.as_str(), &r),\n+                    None => format!(\"use of unstable library feature '{}'\", &feature)\n+                };\n+                emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n+                                 GateIssue::Library(Some(issue)), &msg);\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are\n@@ -658,7 +693,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n-    if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n+    if tcx.stability.borrow().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir.krate();\n         let mut missing = MissingStabilityAnnotations {\n             tcx: tcx,"}, {"sha": "884a71f0d32d4b24c983cb9049ca4ba819a9f26d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -1027,6 +1027,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"add a source pattern to the file path remapping config\"),\n     remap_path_prefix_to: Vec<String> = (vec![], parse_string_push, [TRACKED],\n         \"add a mapping target to the file path remapping config\"),\n+    force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n+        \"force all crates to be `rustc_private` unstable\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "69eabfe2ac0bf70c176f02e5fb23b59e1817142b", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -22,7 +22,6 @@\n //! build speedups.\n \n #![crate_name = \"rustc_back\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -34,10 +33,12 @@\n #![feature(const_fn)]\n #![feature(libc)]\n #![feature(rand)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![cfg_attr(test, feature(rand))]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate syntax;\n extern crate libc;\n extern crate serialize;"}, {"sha": "23558d82883423266f399ad98173c0f78f8cb21a", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -11,11 +11,11 @@\n \n #![crate_name = \"rustc_bitflags\"]\n #![feature(associated_consts)]\n-#![feature(staged_api)]\n #![crate_type = \"rlib\"]\n #![no_std]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![deny(warnings)]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n //! A typesafe bitmask flag generator.\n "}, {"sha": "617326808970ba082a763ee66b15075dd0df4f94", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_borrowck\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -21,10 +20,13 @@\n \n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(associated_consts)]\n #![feature(nonzero)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "8142829e81601ebba952ec5d57e7df90cc39a443", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,23 +15,24 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_const_eval\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(i128_type)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate arena;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;"}, {"sha": "528170781ea7519cb1a3cf75d205bf8e48373e80", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,20 +15,21 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_const_math\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(const_fn)]\n #![feature(i128)]\n #![feature(i128_type)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate syntax;\n \n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "c254dfc48d22549da834a03de2cbb999e479bb53", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -17,7 +17,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_data_structures\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -28,8 +27,6 @@\n #![feature(shared)]\n #![feature(collections_range)]\n #![feature(nonzero)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n #![feature(untagged_unions)]\n@@ -42,6 +39,10 @@\n #![feature(manually_drop)]\n #![feature(struct_field_attributes)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "8fddbe110b0e6f4616fb584ede2e9afc71b383cb", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -882,7 +882,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n               \"static item recursion checking\",\n               || static_recursion::check_crate(sess, &hir_map))?;\n \n-    let index = stability::Index::new(&hir_map);\n+    let index = stability::Index::new(&sess);\n \n     let mut local_providers = ty::maps::Providers::default();\n     borrowck::provide(&mut local_providers);"}, {"sha": "024fc546a158efe9d175f4ba7357be522cf1a739", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_driver\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -28,9 +27,11 @@\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n #![feature(set_stdio)]\n-#![feature(staged_api)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "3b4f2560fc555f214969d4df13db2c7189120867", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -138,7 +138,7 @@ fn test_env<F>(source_string: &str,\n     // run just enough stuff to build a tcx:\n     let lang_items = lang_items::collect_language_items(&sess, &hir_map);\n     let named_region_map = resolve_lifetime::krate(&sess, &hir_map);\n-    let index = stability::Index::new(&hir_map);\n+    let index = stability::Index::new(&sess);\n     TyCtxt::create_and_enter(&sess,\n                              ty::maps::Providers::default(),\n                              ty::maps::Providers::default(),"}, {"sha": "0f2e1669a47ad5502cb22d4ce7f2b422c432463a", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_errors\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -19,11 +18,13 @@\n \n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(range_contains)]\n #![feature(libc)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate term;\n extern crate libc;\n extern crate serialize as rustc_serialize;"}, {"sha": "70f967d50b0e1db97688ea48d88c18da60a668e3", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -11,20 +11,21 @@\n //! Support for serializing the dep-graph and reloading it.\n \n #![crate_name = \"rustc_incremental\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(rand)]\n #![feature(conservative_impl_trait)]\n #![feature(sort_unstable)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate graphviz;\n #[macro_use] extern crate rustc;\n extern crate rustc_data_structures;"}, {"sha": "2d0b5a6a51c6ba20baf5da358614c4930e847444", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -20,7 +20,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_lint\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -34,9 +33,11 @@\n #![feature(i128_type)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n #![feature(slice_patterns)]\n-#![feature(staged_api)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n #[macro_use]\n extern crate syntax;"}, {"sha": "790d493f1914c066fa105bb3f1ba774c3ad8524a", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -14,7 +14,6 @@\n #![allow(dead_code)]\n \n #![crate_name = \"rustc_llvm\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -27,10 +26,12 @@\n #![feature(concat_idents)]\n #![feature(libc)]\n #![feature(link_args)]\n-#![feature(staged_api)]\n-#![feature(rustc_private)]\n #![feature(static_nobundle)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate libc;\n #[macro_use]\n #[no_link]"}, {"sha": "c12b4209675dee9847304591dc66ea6c503834b3", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -269,15 +269,6 @@ impl CrateMetadata {\n         self.root.disambiguator\n     }\n \n-    pub fn is_staged_api(&self, dep_graph: &DepGraph) -> bool {\n-        for attr in self.get_item_attrs(CRATE_DEF_INDEX, dep_graph).iter() {\n-            if attr.path == \"stable\" || attr.path == \"unstable\" {\n-                return true;\n-            }\n-        }\n-        false\n-    }\n-\n     pub fn is_allocator(&self, dep_graph: &DepGraph) -> bool {\n         let attrs = self.get_item_attrs(CRATE_DEF_INDEX, dep_graph);\n         attr::contains_name(&attrs, \"allocator\")"}, {"sha": "dbf3e94832fc4fd724a010fe841d440243c406b0", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -229,11 +229,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).get_missing_lang_items(&self.dep_graph)\n     }\n \n-    fn is_staged_api(&self, cnum: CrateNum) -> bool\n-    {\n-        self.get_crate_data(cnum).is_staged_api(&self.dep_graph)\n-    }\n-\n     fn is_allocator(&self, cnum: CrateNum) -> bool\n     {\n         self.get_crate_data(cnum).is_allocator(&self.dep_graph)"}, {"sha": "27555f49e57fc1afc0991cc53c81ae1cb1eca9a0", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_metadata\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -24,10 +23,12 @@\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n #![feature(specialization)]\n-#![feature(staged_api)]\n #![feature(discriminant_value)]\n+#![feature(rustc_private)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n #[macro_use]\n extern crate log;"}, {"sha": "014705bf32fa8b454391fc68b83ff2af95b44cf0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -18,18 +18,19 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![deny(warnings)]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n \n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(i128_type)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(placement_in_syntax)]\n #![feature(collection_placement)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n #[macro_use] extern crate log;\n extern crate graphviz as dot;\n #[macro_use]"}, {"sha": "97f0022b8db8ddfc5cd184561af959bd4af1b827", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_passes\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -24,8 +23,10 @@\n #![deny(warnings)]\n \n #![feature(rustc_diagnostic_macros)]\n-#![feature(staged_api)]\n-#![feature(rustc_private)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "21dd360c9bb7456770cfc86088c7952bb711aa2d", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_platform_intrinsics\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![deny(warnings)]\n #![allow(bad_style)]\n "}, {"sha": "16ab593e47a724b5372b5449b66ccfee1e8348c3", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -51,17 +51,18 @@\n //! for more examples.\n \n #![crate_name = \"rustc_plugin\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(staged_api)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n #[macro_use] extern crate syntax;\n "}, {"sha": "2ced61f5753a90c4aaf9c6312ecfd29add334272", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_privacy\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -18,8 +17,10 @@\n #![deny(warnings)]\n \n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n extern crate rustc;\n #[macro_use] extern crate syntax;"}, {"sha": "ee72aee042e91b0c232fa2b0af1d052561b872af", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_resolve\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -19,8 +18,10 @@\n \n #![feature(associated_consts)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n #[macro_use]\n extern crate log;"}, {"sha": "cc98754f610429dbed69a5a434c16cc1b6bb9d38", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustc_save_analysis\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -19,8 +18,10 @@\n \n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n #[macro_use] extern crate rustc;\n "}, {"sha": "ff094d04c846289bdecf1b10cbfd5e24ba92b0d0", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_trans\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -33,12 +32,14 @@\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n #![feature(slice_patterns)]\n-#![feature(staged_api)]\n #![feature(unicode)]\n #![feature(conservative_impl_trait)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;\n "}, {"sha": "99ee1cff7fd22ab9c2883eb49ac6346931c71c89", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -64,7 +64,6 @@ This API is completely unstable and subject to change.\n */\n \n #![crate_name = \"rustc_typeck\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -81,8 +80,10 @@ This API is completely unstable and subject to change.\n #![feature(never_type)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "d89fa547a89cdcd544993ecf2ae28d3a1a70de42", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_name = \"rustdoc\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -21,14 +20,16 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(libc)]\n-#![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(slice_patterns)]\n-#![feature(staged_api)]\n #![feature(test)]\n #![feature(unicode)]\n #![feature(vec_remove_item)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate arena;\n extern crate getopts;\n extern crate env_logger;"}, {"sha": "4eb2cad5c91b9178e0d817220aeb6dfce93fca7c", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,9 +15,9 @@ Core encoding and decoding interfaces.\n */\n \n #![crate_name = \"serialize\"]\n-#![unstable(feature = \"rustc_private\",\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\",\n             reason = \"deprecated in favor of rustc-serialize on crates.io\",\n-            issue = \"27812\")]\n+            issue = \"27812\"))]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -32,7 +32,7 @@ Core encoding and decoding interfaces.\n #![feature(core_intrinsics)]\n #![feature(i128_type)]\n #![feature(specialization)]\n-#![feature(staged_api)]\n+#![cfg_attr(stage0, feature(staged_api))]\n #![cfg_attr(test, feature(test))]\n \n extern crate collections;"}, {"sha": "32dafcdb582f0ca04a010c348aa11eedd29bdabf", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"syntax\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -24,12 +23,14 @@\n        test(attr(deny(warnings))))]\n #![deny(warnings)]\n \n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(i128_type)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n extern crate serialize;\n #[macro_use] extern crate log;\n #[macro_use] extern crate bitflags;"}, {"sha": "60f5d24ac97552533141eff4b4ccffe2d44d5b05", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -11,7 +11,6 @@\n //! Syntax extensions in the Rust compiler.\n \n #![crate_name = \"syntax_ext\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -20,8 +19,10 @@\n #![deny(warnings)]\n \n #![feature(proc_macro_internals)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n+\n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n \n extern crate fmt_macros;\n extern crate log;"}, {"sha": "25f74aeecf4046eed1ce357fb435ed246a002203", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -15,7 +15,6 @@\n //! This API is completely unstable and subject to change.\n \n #![crate_name = \"syntax_pos\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -27,10 +26,12 @@\n #![feature(custom_attribute)]\n #![feature(optin_builtin_traits)]\n #![allow(unused_attributes)]\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n #![feature(specialization)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(rustc_private))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n use std::cell::{Cell, RefCell};\n use std::ops::{Add, Sub};\n use std::rc::Rc;"}, {"sha": "eb0ee6ba154a187bb390b08fdf780231412a5d32", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3886abf1b52d0804564c043fd699da039a12fb/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=4f3886abf1b52d0804564c043fd699da039a12fb", "patch": "@@ -41,9 +41,6 @@\n //! [ti]: https://en.wikipedia.org/wiki/Terminfo\n \n #![crate_name = \"term\"]\n-#![unstable(feature = \"rustc_private\",\n-            reason = \"use the crates.io `term` library instead\",\n-            issue = \"27812\")]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -54,13 +51,15 @@\n #![deny(missing_docs)]\n #![deny(warnings)]\n \n-#![feature(box_syntax)]\n #![feature(staged_api)]\n #![cfg_attr(windows, feature(libc))]\n // Handle rustfmt skips\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n \n+#![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n+#![cfg_attr(stage0, feature(staged_api))]\n+\n use std::io::prelude::*;\n \n pub use terminfo::TerminfoTerminal;"}]}