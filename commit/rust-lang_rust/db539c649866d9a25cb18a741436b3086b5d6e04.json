{"sha": "db539c649866d9a25cb18a741436b3086b5d6e04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNTM5YzY0OTg2NmQ5YTI1Y2IxOGE3NDE0MzZiMzA4NmI1ZDZlMDQ=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-06-28T18:21:03Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-06-28T18:21:03Z"}, "message": "Use raw_ref_op in A|Rc::as_ptr", "tree": {"sha": "2199dd5e1a4a4be2e6f841468711037c76813ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2199dd5e1a4a4be2e6f841468711037c76813ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db539c649866d9a25cb18a741436b3086b5d6e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db539c649866d9a25cb18a741436b3086b5d6e04", "html_url": "https://github.com/rust-lang/rust/commit/db539c649866d9a25cb18a741436b3086b5d6e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db539c649866d9a25cb18a741436b3086b5d6e04/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25687caa2e4e35b31c29e28998710670e9d54ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/25687caa2e4e35b31c29e28998710670e9d54ee9", "html_url": "https://github.com/rust-lang/rust/commit/25687caa2e4e35b31c29e28998710670e9d54ee9"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "c812d0c631618b882a068de81df88694650d531d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db539c649866d9a25cb18a741436b3086b5d6e04/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db539c649866d9a25cb18a741436b3086b5d6e04/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=db539c649866d9a25cb18a741436b3086b5d6e04", "patch": "@@ -109,6 +109,7 @@\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n+#![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n #![feature(min_specialization)]"}, {"sha": "c69f2ffc43738ec56a0b507e28e95364cfcc4f32", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db539c649866d9a25cb18a741436b3086b5d6e04/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db539c649866d9a25cb18a741436b3086b5d6e04/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=db539c649866d9a25cb18a741436b3086b5d6e04", "patch": "@@ -591,17 +591,13 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(this.ptr);\n-        let fake_ptr = ptr as *mut T;\n \n         // SAFETY: This cannot go through Deref::deref.\n         // Instead, we manually offset the pointer rather than manifesting a reference.\n         // This is so that the returned pointer retains the same provenance as our pointer.\n         // This is required so that e.g. `get_mut` can write through the pointer\n         // after the Rc is recovered through `from_raw`.\n-        unsafe {\n-            let offset = data_offset(&(*ptr).value);\n-            set_data_ptr(fake_ptr, (ptr as *mut u8).offset(offset))\n-        }\n+        unsafe { &raw const (*ptr).value }\n     }\n \n     /// Constructs an `Rc<T>` from a raw pointer."}, {"sha": "5a9ab24562a30681badd0d672a3d7905304dd4bf", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db539c649866d9a25cb18a741436b3086b5d6e04/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db539c649866d9a25cb18a741436b3086b5d6e04/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=db539c649866d9a25cb18a741436b3086b5d6e04", "patch": "@@ -590,17 +590,13 @@ impl<T: ?Sized> Arc<T> {\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n-        let fake_ptr = ptr as *mut T;\n \n         // SAFETY: This cannot go through Deref::deref.\n         // Instead, we manually offset the pointer rather than manifesting a reference.\n         // This is so that the returned pointer retains the same provenance as our pointer.\n         // This is required so that e.g. `get_mut` can write through the pointer\n         // after the Arc is recovered through `from_raw`.\n-        unsafe {\n-            let offset = data_offset(&(*ptr).data);\n-            set_data_ptr(fake_ptr, (ptr as *mut u8).offset(offset))\n-        }\n+        unsafe { &raw const (*ptr).data }\n     }\n \n     /// Constructs an `Arc<T>` from a raw pointer."}]}