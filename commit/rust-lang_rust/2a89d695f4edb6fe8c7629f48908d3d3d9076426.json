{"sha": "2a89d695f4edb6fe8c7629f48908d3d3d9076426", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODlkNjk1ZjRlZGI2ZmU4Yzc2MjlmNDg5MDhkM2QzZDkwNzY0MjY=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-03-30T22:47:01Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-03-30T22:48:26Z"}, "message": "libcore: Ensure min and max functions are consistent for equal inputs", "tree": {"sha": "4f7243e2f9f18553ca1126eb6b18324c01a68629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f7243e2f9f18553ca1126eb6b18324c01a68629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a89d695f4edb6fe8c7629f48908d3d3d9076426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a89d695f4edb6fe8c7629f48908d3d3d9076426", "html_url": "https://github.com/rust-lang/rust/commit/2a89d695f4edb6fe8c7629f48908d3d3d9076426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a89d695f4edb6fe8c7629f48908d3d3d9076426/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf3b0b74aadcc1fe87adbd2c74876a1f6c920b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf3b0b74aadcc1fe87adbd2c74876a1f6c920b3", "html_url": "https://github.com/rust-lang/rust/commit/6cf3b0b74aadcc1fe87adbd2c74876a1f6c920b3"}], "stats": {"total": 155, "additions": 127, "deletions": 28}, "files": [{"sha": "6954438e93a0a17dfa6b23b545904629fa48457b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a89d695f4edb6fe8c7629f48908d3d3d9076426/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a89d695f4edb6fe8c7629f48908d3d3d9076426/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=2a89d695f4edb6fe8c7629f48908d3d3d9076426", "patch": "@@ -362,6 +362,8 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n \n /// Compare and return the minimum of two values.\n ///\n+/// Returns the first argument if the comparison determines them to be equal.\n+///\n /// # Examples\n ///\n /// ```\n@@ -373,11 +375,13 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn min<T: Ord>(v1: T, v2: T) -> T {\n-    if v1 < v2 { v1 } else { v2 }\n+    if v1 <= v2 { v1 } else { v2 }\n }\n \n /// Compare and return the maximum of two values.\n ///\n+/// Returns the second argument if the comparison determines them to be equal.\n+///\n /// # Examples\n ///\n /// ```\n@@ -389,7 +393,7 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn max<T: Ord>(v1: T, v2: T) -> T {\n-    if v1 > v2 { v1 } else { v2 }\n+    if v2 >= v1 { v2 } else { v1 }\n }\n \n /// Compare and return the minimum of two values if there is one.\n@@ -427,7 +431,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n \n /// Compare and return the maximum of two values if there is one.\n ///\n-/// Returns the first argument if the comparison determines them to be equal.\n+/// Returns the second argument if the comparison determines them to be equal.\n ///\n /// # Examples\n ///\n@@ -452,8 +456,8 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n #[unstable(feature = \"core\")]\n pub fn partial_max<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n     match v1.partial_cmp(&v2) {\n-        Some(Less) => Some(v2),\n-        Some(Equal) | Some(Greater) => Some(v1),\n+        Some(Equal) | Some(Less) => Some(v2),\n+        Some(Greater) => Some(v1),\n         None => None\n     }\n }"}, {"sha": "ca83a128c994c037b09f6f50a19a782f5d4658d2", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2a89d695f4edb6fe8c7629f48908d3d3d9076426/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a89d695f4edb6fe8c7629f48908d3d3d9076426/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=2a89d695f4edb6fe8c7629f48908d3d3d9076426", "patch": "@@ -722,6 +722,9 @@ pub trait Iterator {\n \n     /// Consumes the entire iterator to return the maximum element.\n     ///\n+    /// Returns the rightmost element if the comparison determines two elements\n+    /// to be equally maximum.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -732,16 +735,19 @@ pub trait Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn max(self) -> Option<Self::Item> where Self: Sized, Self::Item: Ord\n     {\n-        self.fold(None, |max, x| {\n+        self.fold(None, |max, y| {\n             match max {\n-                None    => Some(x),\n-                Some(y) => Some(cmp::max(x, y))\n+                None    => Some(y),\n+                Some(x) => Some(cmp::max(x, y))\n             }\n         })\n     }\n \n     /// Consumes the entire iterator to return the minimum element.\n     ///\n+    /// Returns the leftmost element if the comparison determines two elements\n+    /// to be equally minimum.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -752,10 +758,10 @@ pub trait Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn min(self) -> Option<Self::Item> where Self: Sized, Self::Item: Ord\n     {\n-        self.fold(None, |min, x| {\n+        self.fold(None, |min, y| {\n             match min {\n-                None    => Some(x),\n-                Some(y) => Some(cmp::min(x, y))\n+                None    => Some(y),\n+                Some(x) => Some(cmp::min(x, y))\n             }\n         })\n     }\n@@ -799,7 +805,7 @@ pub trait Iterator {\n             Some(x) => {\n                 match self.next() {\n                     None => return OneElement(x),\n-                    Some(y) => if x < y {(x, y)} else {(y,x)}\n+                    Some(y) => if x <= y {(x, y)} else {(y, x)}\n                 }\n             }\n         };\n@@ -817,19 +823,19 @@ pub trait Iterator {\n                 None => {\n                     if first < min {\n                         min = first;\n-                    } else if first > max {\n+                    } else if first >= max {\n                         max = first;\n                     }\n                     break;\n                 }\n                 Some(x) => x\n             };\n-            if first < second {\n-                if first < min {min = first;}\n-                if max < second {max = second;}\n+            if first <= second {\n+                if first < min { min = first }\n+                if second >= max { max = second }\n             } else {\n-                if second < min {min = second;}\n-                if max < first {max = first;}\n+                if second < min { min = second }\n+                if first >= max { max = first }\n             }\n         }\n \n@@ -839,6 +845,9 @@ pub trait Iterator {\n     /// Return the element that gives the maximum value from the\n     /// specified function.\n     ///\n+    /// Returns the rightmost element if the comparison determines two elements\n+    /// to be equally maximum.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -855,14 +864,14 @@ pub trait Iterator {\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n     {\n-        self.fold(None, |max: Option<(Self::Item, B)>, x| {\n-            let x_val = f(&x);\n+        self.fold(None, |max: Option<(Self::Item, B)>, y| {\n+            let y_val = f(&y);\n             match max {\n-                None             => Some((x, x_val)),\n-                Some((y, y_val)) => if x_val > y_val {\n-                    Some((x, x_val))\n-                } else {\n+                None             => Some((y, y_val)),\n+                Some((x, x_val)) => if y_val >= x_val {\n                     Some((y, y_val))\n+                } else {\n+                    Some((x, x_val))\n                 }\n             }\n         }).map(|(x, _)| x)\n@@ -871,6 +880,9 @@ pub trait Iterator {\n     /// Return the element that gives the minimum value from the\n     /// specified function.\n     ///\n+    /// Returns the leftmost element if the comparison determines two elements\n+    /// to be equally minimum.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -887,11 +899,11 @@ pub trait Iterator {\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n     {\n-        self.fold(None, |min: Option<(Self::Item, B)>, x| {\n-            let x_val = f(&x);\n+        self.fold(None, |min: Option<(Self::Item, B)>, y| {\n+            let y_val = f(&y);\n             match min {\n-                None             => Some((x, x_val)),\n-                Some((y, y_val)) => if x_val < y_val {\n+                None             => Some((y, y_val)),\n+                Some((x, x_val)) => if x_val <= y_val {\n                     Some((x, x_val))\n                 } else {\n                     Some((y, y_val))"}, {"sha": "86dd1a04532b47b83b9e0a542117e9eaeb3df58f", "filename": "src/test/run-pass/minmax-stability-issue-23687.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2a89d695f4edb6fe8c7629f48908d3d3d9076426/src%2Ftest%2Frun-pass%2Fminmax-stability-issue-23687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a89d695f4edb6fe8c7629f48908d3d3d9076426/src%2Ftest%2Frun-pass%2Fminmax-stability-issue-23687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fminmax-stability-issue-23687.rs?ref=2a89d695f4edb6fe8c7629f48908d3d3d9076426", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core)]\n+use std::fmt::Debug;\n+use std::cmp::{self, PartialOrd, Ordering};\n+use std::iter::MinMaxResult::MinMax;\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+struct Foo {\n+    n: u8,\n+    name: &'static str\n+}\n+\n+impl PartialOrd for Foo {\n+    fn partial_cmp(&self, other: &Foo) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl Ord for Foo {\n+    fn cmp(&self, other: &Foo) -> Ordering {\n+        self.n.cmp(&other.n)\n+    }\n+}\n+\n+fn main() {\n+    let a = Foo { n: 4, name: \"a\" };\n+    let b = Foo { n: 4, name: \"b\" };\n+    let c = Foo { n: 8, name: \"c\" };\n+    let d = Foo { n: 8, name: \"d\" };\n+    let e = Foo { n: 22, name: \"e\" };\n+    let f = Foo { n: 22, name: \"f\" };\n+\n+    let data = [a, b, c, d, e, f];\n+\n+    // `min` should return the left when the values are equal\n+    assert_eq!(data.iter().min(), Some(&a));\n+    assert_eq!(data.iter().min_by(|a| a.n), Some(&a));\n+    assert_eq!(cmp::min(a, b), a);\n+    assert_eq!(cmp::min(b, a), b);\n+    assert_eq!(cmp::partial_min(a, b), Some(a));\n+    assert_eq!(cmp::partial_min(b, a), Some(b));\n+\n+    // `max` should return the right when the values are equal\n+    assert_eq!(data.iter().max(), Some(&f));\n+    assert_eq!(data.iter().max_by(|a| a.n), Some(&f));\n+    assert_eq!(cmp::max(e, f), f);\n+    assert_eq!(cmp::max(f, e), e);\n+    assert_eq!(cmp::partial_max(e, f), Some(f));\n+    assert_eq!(cmp::partial_max(f, e), Some(e));\n+\n+    // Similar for `min_max`\n+    assert_eq!(data.iter().min_max(), MinMax(&a, &f));\n+    assert_eq!(data[1..5].iter().min_max(), MinMax(&b, &e));\n+    assert_eq!(data[2..4].iter().min_max(), MinMax(&c, &d));\n+\n+    let mut presorted = data.to_vec();\n+    presorted.sort();\n+    assert_stable(&presorted);\n+\n+    let mut presorted = data.to_vec();\n+    presorted.sort_by(|a, b| a.cmp(b));\n+    assert_stable(&presorted);\n+\n+    // Assert that sorted and min/max are the same\n+    fn assert_stable<T: Ord + Debug>(presorted: &[T]) {\n+        for slice in presorted.windows(2) {\n+            let a = &slice[0];\n+            let b = &slice[1];\n+\n+            assert_eq!(a, cmp::min(a, b));\n+            assert_eq!(b, cmp::max(a, b));\n+        }\n+    }\n+}"}]}