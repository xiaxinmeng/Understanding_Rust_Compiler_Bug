{"sha": "4d3a91b12b8c9e1b89a19c3663f430e58c16acd3", "node_id": "C_kwDOAAsO6NoAKDRkM2E5MWIxMmI4YzllMWI4OWExOWMzNjYzZjQzMGU1OGMxNmFjZDM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-02T12:39:47Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-23T18:59:00Z"}, "message": "use non-ascribed type as field type in mir", "tree": {"sha": "ad78a97cb27dd455ac560e732665f9ad12f05262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad78a97cb27dd455ac560e732665f9ad12f05262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3", "html_url": "https://github.com/rust-lang/rust/commit/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac31d52324f3a0c41b5daabd842e36448fd95aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac31d52324f3a0c41b5daabd842e36448fd95aae", "html_url": "https://github.com/rust-lang/rust/commit/ac31d52324f3a0c41b5daabd842e36448fd95aae"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "fb9f19b7b9066070420c6ff8e8c9e5f3a7adf321", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=4d3a91b12b8c9e1b89a19c3663f430e58c16acd3", "patch": "@@ -294,7 +294,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             PatKind::Leaf { ref subpatterns } => {\n                 // tuple struct, match subpats (if any)\n-                candidate.match_pairs.extend(self.field_match_pairs(match_pair.place, subpatterns));\n+                candidate\n+                    .match_pairs\n+                    .extend(self.field_match_pairs_tuple_struct(match_pair.place, subpatterns));\n                 Ok(())\n             }\n "}, {"sha": "6a07b07ee12781f10acab82da32b6ffcfbdf160a", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3a91b12b8c9e1b89a19c3663f430e58c16acd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=4d3a91b12b8c9e1b89a19c3663f430e58c16acd3", "patch": "@@ -25,6 +25,51 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             .collect()\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n+    pub(crate) fn field_match_pairs_tuple_struct<'pat>(\n+        &mut self,\n+        place_builder: PlaceBuilder<'tcx>,\n+        subpatterns: &'pat [FieldPat<'tcx>],\n+    ) -> Vec<MatchPair<'pat, 'tcx>> {\n+        let place_ty = place_builder\n+            .try_ty(&self.local_decls, self)\n+            .map(|ty| self.tcx.normalize_erasing_regions(self.param_env, ty));\n+        debug!(?place_ty);\n+\n+        subpatterns\n+            .iter()\n+            .map(|fieldpat| {\n+                // NOTE: With type ascriptions it can happen that we get errors\n+                // during borrow-checking on higher-ranked types if we use the\n+                // ascribed type as the field type, so we try to get the actual field\n+                // type from the `Place`, if possible, see issue #96514\n+                let field_ty = if let Some(place_ty) = place_ty {\n+                    let field_idx = fieldpat.field.as_usize();\n+                    let field_ty = match place_ty.kind() {\n+                        ty::Adt(adt_def, substs) => {\n+                            adt_def.all_fields().collect::<Vec<_>>()[field_idx].ty(self.tcx, substs)\n+                        }\n+                        ty::Tuple(elems) => elems.to_vec()[field_idx],\n+                        _ => bug!(\n+                            \"no field available, place_ty: {:#?}, kind: {:?}\",\n+                            place_ty,\n+                            place_ty.kind()\n+                        ),\n+                    };\n+\n+                    self.tcx.normalize_erasing_regions(self.param_env, field_ty)\n+                } else {\n+                    fieldpat.pattern.ty\n+                };\n+\n+                let place = place_builder.clone().field(fieldpat.field, field_ty);\n+                debug!(?place, ?field_ty);\n+\n+                MatchPair::new(place, &fieldpat.pattern, self)\n+            })\n+            .collect()\n+    }\n+\n     pub(crate) fn prefix_slice_suffix<'pat>(\n         &mut self,\n         match_pairs: &mut SmallVec<[MatchPair<'pat, 'tcx>; 1]>,"}]}