{"sha": "4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDljYThhYmQzMWQ3Y2JlMDg3YWNiOGEzYWViNmZlMWIyZWU1ZWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-25T00:35:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-25T00:37:32Z"}, "message": "Start hooking resolve into creater.", "tree": {"sha": "3fca2d845e595cfa36e6ea9e1a35f4c203a3eaaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fca2d845e595cfa36e6ea9e1a35f4c203a3eaaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee", "html_url": "https://github.com/rust-lang/rust/commit/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3d0d1848116f0e29dcaf8859d27fd4555f3444", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3d0d1848116f0e29dcaf8859d27fd4555f3444", "html_url": "https://github.com/rust-lang/rust/commit/af3d0d1848116f0e29dcaf8859d27fd4555f3444"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "77744086e18670ebd99ccb1d075c6f04453e8dfe", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee", "patch": "@@ -274,3 +274,18 @@ fn read_crates(session.session sess,\n     ret fold.fold_crate[env](e, fld, crate);\n }\n \n+fn lookup_def(&span sp,\n+              @ast.external_crate_info cinfo,\n+              vec[ast.ident] path) -> ast.def {\n+  // FIXME: fill in.\n+  fail;\n+}\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "fb357c53bbb0a645e0b266f2d4e06648c278aebf", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=4e49ca8abd31d7cbe087acb8a3aeb6fe1b2ee5ee", "patch": "@@ -2,6 +2,7 @@ import front.ast;\n import front.ast.ident;\n import front.ast.def;\n import front.ast.ann;\n+import front.creader;\n import driver.session;\n import util.common.new_def_hash;\n import util.common.span;\n@@ -107,9 +108,9 @@ fn find_final_def(&env e, import_map index,\n                   &span sp, vec[ident] idents,\n                   option.t[ast.def_id] import_id) -> def_wrap {\n \n-    // We are given a series of identifiers (a.b.c.d) and we know that\n-    // in the environment 'e' the identifier 'a' was resolved to 'd'. We\n-    // should return what a.b.c.d points to in the end.\n+    // We are given a series of identifiers (p.q.r) and we know that\n+    // in the environment 'e' the identifier 'p' was resolved to 'd'. We\n+    // should return what p.q.r points to in the end.\n     fn found_something(&env e, import_map index,\n                        &span sp, vec[ident] idents, def_wrap d) -> def_wrap {\n \n@@ -135,6 +136,15 @@ fn find_final_def(&env e, import_map index,\n             }\n         }\n \n+        fn found_crate(&env e, &import_map index, &span sp,\n+                       vec[ident] idents,\n+                       @ast.external_crate_info cinfo) -> def_wrap {\n+            auto len = _vec.len[ident](idents);\n+            auto rest_idents = _vec.slice[ident](idents, 1u, len);\n+            auto def = creader.lookup_def(sp, cinfo, rest_idents);\n+            ret def_wrap_other(def);\n+        }\n+\n         alt (d) {\n             case (def_wrap_import(?imp)) {\n                 alt (imp.node) {\n@@ -159,8 +169,16 @@ fn find_final_def(&env e, import_map index,\n             case (def_wrap_native_mod(?i)) {\n                 ret found_mod(e, index, sp, idents, i);\n             }\n-            case (def_wrap_use(?c)) {\n-                e.sess.span_err(sp, \"Crate access is not implemented\");\n+            case (def_wrap_use(?vi)) {\n+                alt (vi.node) {\n+                    case (ast.view_item_use(_, _, _, ?ann)) {\n+                        alt (ann) {\n+                            case (ast.ann_crate(?cinfo)) {\n+                                ret found_crate(e, index, sp, idents, cinfo);\n+                            }\n+                        }\n+                    }\n+                }\n             }\n             case (def_wrap_other(?d)) {\n                 let uint l = _vec.len[ident](idents);"}]}