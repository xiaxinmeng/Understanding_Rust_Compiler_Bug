{"sha": "5bb5f7678530c32caa11a1bc31e27187ff74bc19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYjVmNzY3ODUzMGMzMmNhYTExYTFiYzMxZTI3MTg3ZmY3NGJjMTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-08T12:19:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "Convert rt::sched::new_sched_rng to use open/read/close rather than f*.", "tree": {"sha": "12847e63ec8cc1a756714f680f582777324a46af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12847e63ec8cc1a756714f680f582777324a46af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb5f7678530c32caa11a1bc31e27187ff74bc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb5f7678530c32caa11a1bc31e27187ff74bc19", "html_url": "https://github.com/rust-lang/rust/commit/5bb5f7678530c32caa11a1bc31e27187ff74bc19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb5f7678530c32caa11a1bc31e27187ff74bc19/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db32a2f1d2cfafc519941475f5e660a9ae076f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db32a2f1d2cfafc519941475f5e660a9ae076f0", "html_url": "https://github.com/rust-lang/rust/commit/9db32a2f1d2cfafc519941475f5e660a9ae076f0"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "e5cbadda23d73acc09cf9236e12b16b61c4a549b", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5bb5f7678530c32caa11a1bc31e27187ff74bc19/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb5f7678530c32caa11a1bc31e27187ff74bc19/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=5bb5f7678530c32caa11a1bc31e27187ff74bc19", "patch": "@@ -859,42 +859,36 @@ fn new_sched_rng() -> XorShiftRng {\n     use libc;\n     use sys;\n     use c_str::ToCStr;\n-    use ptr::RawPtr;\n     use vec::MutableVector;\n     use iter::Iterator;\n     use rand::SeedableRng;\n \n     // XXX: this could use io::native::file, when it works.\n-    let file = do \"/dev/urandom\".with_c_str |name| {\n-        do \"r\".with_c_str |mode| {\n-            unsafe { libc::fopen(name, mode) }\n-        }\n+    let fd = do \"/dev/urandom\".with_c_str |name| {\n+        unsafe { libc::open(name, libc::O_RDONLY, 0) }\n     };\n-    if file.is_null() {\n+    if fd == -1 {\n         rtabort!(\"could not open /dev/urandom for reading.\")\n     }\n \n     let mut seeds = [0u32, .. 4];\n+    let size = sys::size_of_val(&seeds);\n     loop {\n-        let nbytes = do seeds.as_mut_buf |buf, len| {\n+        let nbytes = do seeds.as_mut_buf |buf, _| {\n             unsafe {\n-                libc::fread(buf as *mut libc::c_void,\n-                            sys::size_of::<u32>() as libc::size_t,\n-                            len as libc::size_t,\n-                            file)\n+                libc::read(fd,\n+                           buf as *mut libc::c_void,\n+                           size as libc::size_t)\n             }\n         };\n-        rtassert!(nbytes == seeds.len() as libc::size_t);\n+        rtassert!(nbytes as uint == size);\n \n         if !seeds.iter().all(|x| *x == 0) {\n             break;\n         }\n     }\n \n-    // XXX: do we need to guarantee that this is closed with a finally\n-    // block (is that even possible without a scheduler?), or do we\n-    // know that the only way that we can fail here is `abort`ing?\n-    unsafe {libc::fclose(file);}\n+    unsafe {libc::close(fd);}\n \n     SeedableRng::from_seed(seeds)\n }"}]}