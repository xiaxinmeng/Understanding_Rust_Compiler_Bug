{"sha": "35844d0a48e0a644072ae81857782a6e0bd54740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ODQ0ZDBhNDhlMGE2NDQwNzJhZTgxODU3NzgyYTZlMGJkNTQ3NDA=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-03-06T00:11:41Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-05T16:35:33Z"}, "message": "Metadata collection: Resolve lint from locals", "tree": {"sha": "424579e038925cb2611920b530fa17be75affbf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424579e038925cb2611920b530fa17be75affbf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35844d0a48e0a644072ae81857782a6e0bd54740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35844d0a48e0a644072ae81857782a6e0bd54740", "html_url": "https://github.com/rust-lang/rust/commit/35844d0a48e0a644072ae81857782a6e0bd54740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35844d0a48e0a644072ae81857782a6e0bd54740/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce5e368d84887a5a2cee669b467160d4ad7b933", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce5e368d84887a5a2cee669b467160d4ad7b933", "html_url": "https://github.com/rust-lang/rust/commit/2ce5e368d84887a5a2cee669b467160d4ad7b933"}], "stats": {"total": 1268, "additions": 699, "deletions": 569}, "files": [{"sha": "0425689b0ddd9c08f427d615249218ef0e0c208f", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 66, "deletions": 16, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/35844d0a48e0a644072ae81857782a6e0bd54740/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35844d0a48e0a644072ae81857782a6e0bd54740/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=35844d0a48e0a644072ae81857782a6e0bd54740", "patch": "@@ -15,8 +15,6 @@\n \n // # Applicability\n // - TODO xFrednet 2021-01-17: Find lint emit and collect applicability\n-//   - TODO xFrednet 2021-02-28:  1x reference to closure\n-//     - See clippy_lints/src/needless_pass_by_value.rs@NeedlessPassByValue::check_fn\n //   - TODO xFrednet 2021-02-28:  4x weird emission forwarding\n //     - See clippy_lints/src/enum_variants.rs@EnumVariantNames::check_name\n //   - TODO xFrednet 2021-02-28:  6x emission forwarding with local that is initializes from\n@@ -26,14 +24,12 @@\n //     - See clippy_lints/src/misc.rs@check_binary\n //   - TODO xFrednet 2021-02-28:  2x lint from local from method call\n //     - See clippy_lints/src/non_copy_const.rs@lint\n-//   - TODO xFrednet 2021-02-28: 20x lint from local\n-//     - See clippy_lints/src/map_unit_fn.rs@lint_map_unit_fn\n // # NITs\n // - TODO xFrednet 2021-02-13: Collect depreciations and maybe renames\n \n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{self as hir, intravisit, intravisit::Visitor, ExprKind, Item, ItemKind, Mutability, QPath};\n+use rustc_hir::{self as hir, intravisit, intravisit::Visitor, ExprKind, Item, ItemKind, Mutability, QPath, def::DefKind};\n use rustc_lint::{CheckLintNameResult, LateContext, LateLintPass, LintContext, LintId};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -49,7 +45,7 @@ use crate::utils::{\n };\n \n /// This is the output file of the lint collector.\n-const OUTPUT_FILE: &str = \"metadata_collection.json\";\n+const OUTPUT_FILE: &str = \"../metadata_collection.json\";\n /// These lints are excluded from the export.\n const BLACK_LISTED_LINTS: [&str; 2] = [\"lint_author\", \"deep_code_inspection\"];\n /// These groups will be ignored by the lint group matcher. This is useful for collections like\n@@ -270,12 +266,16 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n     /// ```\n     fn check_expr(&mut self, cx: &LateContext<'hir>, expr: &'hir hir::Expr<'_>) {\n         if let Some(args) = match_lint_emission(cx, expr) {\n-            if let Some((lint_name, applicability, is_multi_part)) = extract_complex_emission_info(cx, args) {\n+            let mut emission_info = extract_complex_emission_info(cx, args);\n+            if emission_info.is_empty() {\n+                lint_collection_error_span(cx, expr.span, \"Look, here ... I have no clue what todo with it\");\n+                return;\n+            }\n+\n+            for (lint_name, applicability, is_multi_part) in emission_info.drain(..) {\n                 let app_info = self.applicability_into.entry(lint_name).or_default();\n                 app_info.applicability = applicability;\n                 app_info.is_multi_suggestion = is_multi_part;\n-            } else {\n-                lint_collection_error_span(cx, expr.span, \"Look, here ... I have no clue what todo with it\");\n             }\n         }\n     }\n@@ -380,8 +380,8 @@ fn match_lint_emission<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'_>)\n fn extract_complex_emission_info<'hir>(\n     cx: &LateContext<'hir>,\n     args: &'hir [hir::Expr<'hir>],\n-) -> Option<(String, Option<String>, bool)> {\n-    let mut lint_name = None;\n+) -> Vec<(String, Option<String>, bool)> {\n+    let mut lints= Vec::new();\n     let mut applicability = None;\n     let mut multi_part = false;\n \n@@ -390,9 +390,8 @@ fn extract_complex_emission_info<'hir>(\n \n         if match_type(cx, arg_ty, &paths::LINT) {\n             // If we found the lint arg, extract the lint name\n-            if let ExprKind::Path(ref lint_path) = arg.kind {\n-                lint_name = Some(last_path_segment(lint_path).ident.name);\n-            }\n+            let mut resolved_lints = resolve_lints(cx, arg);\n+            lints.append(&mut resolved_lints);\n         } else if match_type(cx, arg_ty, &paths::APPLICABILITY) {\n             applicability = resolve_applicability(cx, arg);\n         } else if arg_ty.is_closure() {\n@@ -402,7 +401,14 @@ fn extract_complex_emission_info<'hir>(\n         }\n     }\n \n-    lint_name.map(|lint_name| (sym_to_string(lint_name).to_ascii_lowercase(), applicability, multi_part))\n+    lints.drain(..).map(|lint_name| (lint_name, applicability.clone(), multi_part)).collect()\n+}\n+\n+/// Resolves the possible lints that this expression could reference\n+fn resolve_lints(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Vec<String> {\n+    let mut resolver = LintResolver::new(cx);\n+    resolver.visit_expr(expr);\n+    resolver.lints\n }\n \n /// This function tries to resolve the linked applicability to the given expression.\n@@ -426,6 +432,50 @@ fn check_is_multi_part(cx: &LateContext<'hir>, closure_expr: &'hir hir::Expr<'hi\n     false\n }\n \n+struct LintResolver<'a, 'hir> {\n+    cx: &'a LateContext<'hir>,\n+    lints: Vec<String>,\n+}\n+\n+impl<'a, 'hir> LintResolver<'a, 'hir> {\n+    fn new(cx: &'a LateContext<'hir>) -> Self {\n+        Self {\n+            cx,\n+            lints: Vec::<String>::default(),\n+        }\n+    }\n+}\n+\n+impl<'a, 'hir> intravisit::Visitor<'hir> for LintResolver<'a, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::All(self.cx.tcx.hir())\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n+        if_chain! {\n+            if let ExprKind::Path(qpath) = &expr.kind;\n+            if let QPath::Resolved(_, path) = qpath;\n+            \n+            let (expr_ty, _) = walk_ptrs_ty_depth(self.cx.typeck_results().expr_ty(&expr));\n+            if match_type(self.cx, expr_ty, &paths::LINT);\n+            then {\n+                if let hir::def::Res::Def(DefKind::Static, _) = path.res {\n+                    let lint_name = last_path_segment(qpath).ident.name;\n+                    self.lints.push(sym_to_string(lint_name).to_ascii_lowercase());\n+                } else if let Some(local) = get_parent_local(self.cx, expr) {\n+                    if let Some(local_init) = local.init {\n+                        intravisit::walk_expr(self, local_init);\n+                    }\n+                }\n+            }\n+        }\n+\n+        intravisit::walk_expr(self, expr);\n+    }\n+}\n+\n /// This visitor finds the highest applicability value in the visited expressions\n struct ApplicabilityResolver<'a, 'hir> {\n     cx: &'a LateContext<'hir>,\n@@ -488,7 +538,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n     }\n }\n \n-/// This returns the parent local node if the expression is a reference to\n+/// This returns the parent local node if the expression is a reference one\n fn get_parent_local(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Option<&'hir hir::Local<'hir>> {\n     if let ExprKind::Path(QPath::Resolved(_, path)) = expr.kind {\n         if let hir::def::Res::Local(local_hir) = path.res {"}, {"sha": "1f19724ad250b273a350604846e76adac28393a9", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35844d0a48e0a644072ae81857782a6e0bd54740/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35844d0a48e0a644072ae81857782a6e0bd54740/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=35844d0a48e0a644072ae81857782a6e0bd54740", "patch": "@@ -83,7 +83,7 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n-#[cfg(feature = \"internal-lints\")]\n+#[cfg(any(feature = \"internal-lints\", feature = \"metadata-collector-lint\"))]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];"}, {"sha": "f6f72ffa5fa9c8781a59e58eb3a896dc895b8cea", "filename": "metadata_collection.json", "status": "modified", "additions": 632, "deletions": 552, "changes": 1184, "blob_url": "https://github.com/rust-lang/rust/blob/35844d0a48e0a644072ae81857782a6e0bd54740/metadata_collection.json", "raw_url": "https://github.com/rust-lang/rust/raw/35844d0a48e0a644072ae81857782a6e0bd54740/metadata_collection.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/metadata_collection.json?ref=35844d0a48e0a644072ae81857782a6e0bd54740"}]}