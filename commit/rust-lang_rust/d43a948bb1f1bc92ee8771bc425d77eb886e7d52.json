{"sha": "d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0M2E5NDhiYjFmMWJjOTJlZTg3NzFiYzQyNWQ3N2ViODg2ZTdkNTI=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-26T21:48:54Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-09T21:29:30Z"}, "message": "Document rustc::plugin", "tree": {"sha": "dc19483c0695dc1db4ca435bd9b888945782a546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc19483c0695dc1db4ca435bd9b888945782a546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "html_url": "https://github.com/rust-lang/rust/commit/d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c674aceeb60da7e8aca60512c79329186127e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c674aceeb60da7e8aca60512c79329186127e5b", "html_url": "https://github.com/rust-lang/rust/commit/7c674aceeb60da7e8aca60512c79329186127e5b"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "4ac4e3a5a9ffbd547f2dffcf4a3c60aba6781916", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "patch": "@@ -114,13 +114,7 @@ pub mod metadata;\n \n pub mod driver;\n \n-pub mod plugin {\n-    pub use self::registry::Registry;\n-\n-    pub mod registry;\n-    pub mod load;\n-    pub mod build;\n-}\n+pub mod plugin;\n \n pub mod util {\n     pub mod common;"}, {"sha": "ad35c4efe1138adc6eb2a48b86c62ab83e3aeadf", "filename": "src/librustc/plugin/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fbuild.rs?ref=d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Used by `rustc` when compiling a plugin crate.\n+\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Span;\n@@ -36,7 +38,6 @@ impl Visitor<()> for RegistrarFinder {\n }\n \n /// Find the function marked with `#[plugin_registrar]`, if any.\n-/// Used while compiling a crate which defines a registrar.\n pub fn find_plugin_registrar(diagnostic: &diagnostic::SpanHandler,\n                              krate: &ast::Crate) -> Option<ast::NodeId> {\n     let mut finder = RegistrarFinder { registrars: Vec::new() };"}, {"sha": "ba50a15a82ba7d4ce795c3331689a198ce216309", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use plugin::registry::PluginRegistrarFun;\n+//! Used by `rustc` when loading a plugin.\n+\n use driver::session::Session;\n use metadata::creader::PluginMetadataReader;\n+use plugin::registry::Registry;\n \n use std::mem;\n use std::os;\n@@ -22,14 +24,25 @@ use syntax::visit::Visitor;\n use syntax::ext::expand::ExportedMacros;\n use syntax::attr::AttrMetaMethods;\n \n+/// Plugin-related crate metadata.\n pub struct PluginMetadata {\n+    /// Source code of macros exported by the crate.\n     pub macros: Vec<String>,\n+    /// Path to the shared library file.\n     pub lib: Option<Path>,\n+    /// Symbol name of the plugin registrar function.\n     pub registrar_symbol: Option<String>,\n }\n \n+/// Pointer to a registrar function.\n+pub type PluginRegistrarFun =\n+    fn(&mut Registry);\n+\n+/// Information about loaded plugins.\n pub struct Plugins {\n+    /// Source code of exported macros.\n     pub macros: Vec<ExportedMacros>,\n+    /// Registrars, as function pointers.\n     pub registrars: Vec<PluginRegistrarFun>,\n }\n \n@@ -52,6 +65,7 @@ impl<'a> PluginLoader<'a> {\n     }\n }\n \n+/// Read plugin metadata and dynamically load registrar functions.\n pub fn load_plugins(sess: &Session, krate: &ast::Crate) -> Plugins {\n     let mut loader = PluginLoader::new(sess);\n     visit::walk_crate(&mut loader, krate, ());"}, {"sha": "fa70ffc7392f3c2b4405393e1cbed15fc9a5ec85", "filename": "src/librustc/plugin/mod.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fmod.rs?ref=d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+ * Infrastructure for compiler plugins.\n+ *\n+ * Plugins are Rust libraries which extend the behavior of `rustc`\n+ * in various ways.\n+ *\n+ * Plugin authors will use the `Registry` type re-exported by\n+ * this module, along with its methods.  The rest of the module\n+ * is for use by `rustc` itself.\n+ *\n+ * To define a plugin, build a dylib crate with a\n+ * `#[plugin_registrar]` function:\n+ *\n+ * ```rust,ignore\n+ * #![crate_id = \"myplugin\"]\n+ * #![crate_type = \"dylib\"]\n+ * #![feature(plugin_registrar)]\n+ *\n+ * extern crate rustc;\n+ *\n+ * use rustc::plugin::Registry;\n+ *\n+ * #[plugin_registrar]\n+ * pub fn plugin_registrar(reg: &mut Registry) {\n+ *     reg.register_macro(\"mymacro\", expand_mymacro);\n+ * }\n+ *\n+ * fn expand_mymacro(...) {  // details elided\n+ * ```\n+ *\n+ * WARNING: We currently don't check that the registrar function\n+ * has the appropriate type!\n+ *\n+ * To use a plugin while compiling another crate:\n+ *\n+ * ```rust\n+ * #![feature(phase)]\n+ *\n+ * #[phase(plugin)]\n+ * extern crate myplugin;\n+ * ```\n+ *\n+ * If you also need the plugin crate available at runtime, use\n+ * `phase(plugin, link)`.\n+ *\n+ * See `src/test/auxiliary/macro_crate_test.rs` and `src/libfourcc`\n+ * for examples of syntax extension plugins.\n+ */\n+\n+pub use self::registry::Registry;\n+\n+pub mod registry;\n+pub mod load;\n+pub mod build;"}, {"sha": "f6e37822325a8227c027c4281b6653a56a1d3af6", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43a948bb1f1bc92ee8771bc425d77eb886e7d52/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=d43a948bb1f1bc92ee8771bc425d77eb886e7d52", "patch": "@@ -8,13 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Used by plugin crates to tell `rustc` about the plugins they provide.\n+\n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, ItemDecorator, ItemModifier, BasicMacroExpander};\n use syntax::ext::base::{MacroExpanderFn};\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast;\n \n+/// Structure used to register plugins.\n+///\n+/// A plugin registrar function takes an `&mut Registry` and should call\n+/// methods to register its plugins.\n+///\n+/// This struct has public fields and other methods for use by `rustc`\n+/// itself. They are not documented here, and plugin authors should\n+/// not use them.\n pub struct Registry {\n     #[doc(hidden)]\n     pub krate_span: Span,\n@@ -23,9 +33,6 @@ pub struct Registry {\n     pub syntax_exts: Vec<NamedSyntaxExtension>,\n }\n \n-pub type PluginRegistrarFun =\n-    fn(&mut Registry);\n-\n impl Registry {\n     #[doc(hidden)]\n     pub fn new(krate: &ast::Crate) -> Registry {\n@@ -35,6 +42,9 @@ impl Registry {\n         }\n     }\n \n+    /// Register a syntax extension of any kind.\n+    ///\n+    /// This is the most general hook into `libsyntax`'s expansion behavior.\n     pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n         self.syntax_exts.push((name, match extension {\n             NormalTT(ext, _) => NormalTT(ext, Some(self.krate_span)),\n@@ -44,6 +54,11 @@ impl Registry {\n         }));\n     }\n \n+    /// Register a macro of the usual kind.\n+    ///\n+    /// This is a convenience wrapper for `register_syntax_extension`.\n+    /// It builds for you a `NormalTT` with a `BasicMacroExpander`,\n+    /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n         self.register_syntax_extension(\n             token::intern(name),"}]}