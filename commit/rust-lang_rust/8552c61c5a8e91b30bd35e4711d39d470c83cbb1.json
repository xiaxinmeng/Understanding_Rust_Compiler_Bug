{"sha": "8552c61c5a8e91b30bd35e4711d39d470c83cbb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NTJjNjFjNWE4ZTkxYjMwYmQzNWU0NzExZDM5ZDQ3MGM4M2NiYjE=", "commit": {"author": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2018-10-02T05:32:26Z"}, "committer": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2018-10-10T04:10:27Z"}, "message": "Add initial impl of check_pat() for UnusedParens\n\nThis uses a copied version of `check_unused_parens_expr` that is\nspecific to `ast::Pat`. `check_unused_parens_` could possibly be made\nmore generic to work with any `ast::*` that has `node` and `span`\nfields.\n\nThis also only checks for the case of parens around the wildcard\npattern. It covers the case highlighted in the issue, but could check\nfor a lot more.", "tree": {"sha": "211dd2a0c6adb37e1a702809e7535f4be27fdb9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/211dd2a0c6adb37e1a702809e7535f4be27fdb9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8552c61c5a8e91b30bd35e4711d39d470c83cbb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8552c61c5a8e91b30bd35e4711d39d470c83cbb1", "html_url": "https://github.com/rust-lang/rust/commit/8552c61c5a8e91b30bd35e4711d39d470c83cbb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8552c61c5a8e91b30bd35e4711d39d470c83cbb1/comments", "author": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eae47a40484a085f699c3175d51e74901c607e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae47a40484a085f699c3175d51e74901c607e65", "html_url": "https://github.com/rust-lang/rust/commit/eae47a40484a085f699c3175d51e74901c607e65"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "b559b7b8cd8c09d37949157fa2254ea7a8a3f78c", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8552c61c5a8e91b30bd35e4711d39d470c83cbb1/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8552c61c5a8e91b30bd35e4711d39d470c83cbb1/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=8552c61c5a8e91b30bd35e4711d39d470c83cbb1", "patch": "@@ -264,7 +264,7 @@ declare_lint! {\n pub struct UnusedParens;\n \n impl UnusedParens {\n-    fn check_unused_parens_core(&self,\n+    fn check_unused_parens_expr(&self,\n                                 cx: &EarlyContext,\n                                 value: &ast::Expr,\n                                 msg: &str,\n@@ -313,6 +313,56 @@ impl UnusedParens {\n             }\n         }\n     }\n+\n+    fn check_unused_parens_pat(&self,\n+                                cx: &EarlyContext,\n+                                value: &ast::Pat,\n+                                msg: &str,\n+                                struct_lit_needs_parens: bool) {\n+        if let ast::PatKind::Paren(_) = value.node {\n+            // Does there need to be a check similar to `parser::contains_exterior_struct_lit`\n+            // here?\n+            if !struct_lit_needs_parens {\n+                let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n+                let mut err = cx.struct_span_lint(UNUSED_PARENS,\n+                                                  value.span,\n+                                                  &span_msg);\n+                // Remove exactly one pair of parentheses (rather than na\u00efvely\n+                // stripping all paren characters)\n+                let mut ate_left_paren = false;\n+                let mut ate_right_paren = false;\n+                let parens_removed = pprust::pat_to_string(value)\n+                    .trim_matches(|c| {\n+                        match c {\n+                            '(' => {\n+                                if ate_left_paren {\n+                                    false\n+                                } else {\n+                                    ate_left_paren = true;\n+                                    true\n+                                }\n+                            },\n+                            ')' => {\n+                                if ate_right_paren {\n+                                    false\n+                                } else {\n+                                    ate_right_paren = true;\n+                                    true\n+                                }\n+                            },\n+                            _ => false,\n+                        }\n+                    }).to_owned();\n+                err.span_suggestion_short_with_applicability(\n+                    value.span,\n+                    \"remove these parentheses\",\n+                    parens_removed,\n+                    Applicability::MachineApplicable\n+                );\n+                err.emit();\n+            }\n+        }\n+    }\n }\n \n impl LintPass for UnusedParens {\n@@ -354,18 +404,32 @@ impl EarlyLintPass for UnusedParens {\n                 }\n                 let msg = format!(\"{} argument\", call_kind);\n                 for arg in args_to_check {\n-                    self.check_unused_parens_core(cx, arg, &msg, false);\n+                    self.check_unused_parens_expr(cx, arg, &msg, false);\n                 }\n                 return;\n             }\n         };\n-        self.check_unused_parens_core(cx, &value, msg, struct_lit_needs_parens);\n+        self.check_unused_parens_expr(cx, &value, msg, struct_lit_needs_parens);\n+    }\n+\n+    fn check_pat(&mut self, cx: &EarlyContext, p: &ast::Pat) {\n+        use ast::PatKind::*;\n+        let (value, msg) = match p.node {\n+            Paren(ref pat) => {\n+                match pat.node {\n+                    Wild => (p, \"wildcard pattern\"),\n+                    _ => return,\n+                }\n+            }\n+            _ => return,\n+        };\n+        self.check_unused_parens_pat(cx, &value, msg, false);\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n             if let Some(ref value) = local.init {\n-                self.check_unused_parens_core(cx, &value, \"assigned value\", false);\n+                self.check_unused_parens_expr(cx, &value, \"assigned value\", false);\n             }\n         }\n     }"}]}