{"sha": "25acee5494db43bd010c7a2615fae71ce905afe7", "node_id": "C_kwDOAAsO6NoAKDI1YWNlZTU0OTRkYjQzYmQwMTBjN2EyNjE1ZmFlNzFjZTkwNWFmZTc", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-11-13T21:48:27Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-11-13T21:48:27Z"}, "message": "Remove dead NoneError error handling", "tree": {"sha": "2761352831cecd16e62fea2b40e34d918f2f2eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2761352831cecd16e62fea2b40e34d918f2f2eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25acee5494db43bd010c7a2615fae71ce905afe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25acee5494db43bd010c7a2615fae71ce905afe7", "html_url": "https://github.com/rust-lang/rust/commit/25acee5494db43bd010c7a2615fae71ce905afe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25acee5494db43bd010c7a2615fae71ce905afe7/comments", "author": {}, "committer": {}, "parents": [{"sha": "928d14bcd1976ffd33e743aa09c7c22a063bf87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/928d14bcd1976ffd33e743aa09c7c22a063bf87c", "html_url": "https://github.com/rust-lang/rust/commit/928d14bcd1976ffd33e743aa09c7c22a063bf87c"}], "stats": {"total": 44, "additions": 8, "deletions": 36}, "files": [{"sha": "c35bb0cc475d79e411f389327ffaa8d2e6c0dcb1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25acee5494db43bd010c7a2615fae71ce905afe7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acee5494db43bd010c7a2615fae71ce905afe7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=25acee5494db43bd010c7a2615fae71ce905afe7", "patch": "@@ -1035,7 +1035,6 @@ symbols! {\n         non_exhaustive,\n         non_exhaustive_omitted_patterns_lint,\n         non_modrs_mods,\n-        none_error,\n         nontemporal_store,\n         noop_method_borrow,\n         noop_method_clone,"}, {"sha": "41b252a82651cb7799e318baa346c03af1401b64", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/25acee5494db43bd010c7a2615fae71ce905afe7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acee5494db43bd010c7a2615fae71ce905afe7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=25acee5494db43bd010c7a2615fae71ce905afe7", "patch": "@@ -650,41 +650,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 ))\n                         );\n \n-                        if is_try_conversion {\n-                            let none_error = self\n-                                .tcx\n-                                .get_diagnostic_item(sym::none_error)\n-                                .map(|def_id| tcx.type_of(def_id));\n-                            let should_convert_option_to_result =\n-                                Some(trait_ref.skip_binder().substs.type_at(1)) == none_error;\n-                            let should_convert_result_to_option =\n-                                Some(trait_ref.self_ty().skip_binder()) == none_error;\n-                            if should_convert_option_to_result {\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    \"consider converting the `Option<T>` into a `Result<T, _>` \\\n-                                     using `Option::ok_or` or `Option::ok_or_else`\",\n-                                    \".ok_or_else(|| /* error value */)\",\n-                                    Applicability::HasPlaceholders,\n-                                );\n-                            } else if should_convert_result_to_option {\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    \"consider converting the `Result<T, _>` into an `Option<T>` \\\n-                                     using `Result::ok`\",\n-                                    \".ok()\",\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            if let Some(ret_span) = self.return_type_span(&obligation) {\n-                                err.span_label(\n-                                    ret_span,\n-                                    &format!(\n-                                        \"expected `{}` because of this\",\n-                                        trait_ref.skip_binder().self_ty()\n-                                    ),\n-                                );\n-                            }\n+                        if is_try_conversion && let Some(ret_span) = self.return_type_span(&obligation) {\n+                            err.span_label(\n+                                ret_span,\n+                                &format!(\n+                                    \"expected `{}` because of this\",\n+                                    trait_ref.skip_binder().self_ty()\n+                                ),\n+                            );\n                         }\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().tuple_trait() {"}]}