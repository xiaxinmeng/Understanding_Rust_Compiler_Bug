{"sha": "bcc7daa6bcf9728eca36512975f9251a946618d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYzdkYWE2YmNmOTcyOGVjYTM2NTEyOTc1ZjkyNTFhOTQ2NjE4ZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-23T21:18:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T21:27:42Z"}, "message": "rustdoc: Improve comment stripping\n\nThere is less implicit removal of various comment styles, and it also removes\nextraneous stars occasionally found in docblock comments. It turns out that the\nbug for getops was just a differently formatted block.\n\nCloses #9425\nCloses #9417", "tree": {"sha": "15db186db24e0b0ebcb54ac1552bdd6975ca6f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15db186db24e0b0ebcb54ac1552bdd6975ca6f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc7daa6bcf9728eca36512975f9251a946618d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc7daa6bcf9728eca36512975f9251a946618d7", "html_url": "https://github.com/rust-lang/rust/commit/bcc7daa6bcf9728eca36512975f9251a946618d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc7daa6bcf9728eca36512975f9251a946618d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35c0cdff5a5fc9e41468ce167c9304ba43028ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c0cdff5a5fc9e41468ce167c9304ba43028ac4", "html_url": "https://github.com/rust-lang/rust/commit/35c0cdff5a5fc9e41468ce167c9304ba43028ac4"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "f73c34224ee5fb0e9fadb4edde25393e01c407f7", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcc7daa6bcf9728eca36512975f9251a946618d7/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc7daa6bcf9728eca36512975f9251a946618d7/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=bcc7daa6bcf9728eca36512975f9251a946618d7", "patch": "@@ -29,7 +29,7 @@\n //! that requires an input file to be specified, accepts an optional output\n //! file name following -o, and accepts both -h and --help as optional flags.\n //!\n-//! ```\n+//! ~~~{.rust}\n //! exter mod extra;\n //! use extra::getopts::*;\n //! use std::os;\n@@ -75,7 +75,7 @@\n //!     };\n //!     do_work(input, output);\n //! }\n-//! ```\n+//! ~~~\n \n use std::cmp::Eq;\n use std::result::{Err, Ok};"}, {"sha": "88c9fc3e0f792917d812ae3f54cd7c63a88bef3e", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bcc7daa6bcf9728eca36512975f9251a946618d7/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcc7daa6bcf9728eca36512975f9251a946618d7/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=bcc7daa6bcf9728eca36512975f9251a946618d7", "patch": "@@ -59,11 +59,19 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n     fn vertical_trim(lines: ~[~str]) -> ~[~str] {\n         let mut i = 0u;\n         let mut j = lines.len();\n+        // first line of all-stars should be omitted\n+        if lines.len() > 0 && lines[0].iter().all(|c| c == '*') {\n+            i += 1;\n+        }\n         while i < j && lines[i].trim().is_empty() {\n-            i += 1u;\n+            i += 1;\n+        }\n+        // like the first, a last line of all stars should be omitted\n+        if j > i && lines[j - 1].iter().skip(1).all(|c| c == '*') {\n+            j -= 1;\n         }\n-        while j > i && lines[j - 1u].trim().is_empty() {\n-            j -= 1u;\n+        while j > i && lines[j - 1].trim().is_empty() {\n+            j -= 1;\n         }\n         return lines.slice(i, j).to_owned();\n     }\n@@ -106,8 +114,12 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n         }\n     }\n \n-    if comment.starts_with(\"//\") {\n-        return comment.slice(3u, comment.len()).to_owned();\n+    // one-line comments lose their prefix\n+    static ONLINERS: &'static [&'static str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n+    for prefix in ONLINERS.iter() {\n+        if comment.starts_with(*prefix) {\n+            return comment.slice_from(prefix.len()).to_owned();\n+        }\n     }\n \n     if comment.starts_with(\"/*\") {\n@@ -384,29 +396,42 @@ mod test {\n \n     #[test] fn test_block_doc_comment_1() {\n         let comment = \"/**\\n * Test \\n **  Test\\n *   Test\\n*/\";\n-        let correct_stripped = \" Test \\n*  Test\\n   Test\";\n         let stripped = strip_doc_comment_decoration(comment);\n-        assert_eq!(stripped.slice(0, stripped.len()), correct_stripped);\n+        assert_eq!(stripped, ~\" Test \\n*  Test\\n   Test\");\n     }\n \n     #[test] fn test_block_doc_comment_2() {\n         let comment = \"/**\\n * Test\\n *  Test\\n*/\";\n-        let correct_stripped = \" Test\\n  Test\";\n         let stripped = strip_doc_comment_decoration(comment);\n-        assert_eq!(stripped.slice(0, stripped.len()), correct_stripped);\n+        assert_eq!(stripped, ~\" Test\\n  Test\");\n     }\n \n     #[test] fn test_block_doc_comment_3() {\n         let comment = \"/**\\n let a: *int;\\n *a = 5;\\n*/\";\n-        let correct_stripped = \" let a: *int;\\n *a = 5;\";\n         let stripped = strip_doc_comment_decoration(comment);\n-        assert_eq!(stripped.slice(0, stripped.len()), correct_stripped);\n+        assert_eq!(stripped, ~\" let a: *int;\\n *a = 5;\");\n     }\n \n-    #[test] fn test_line_doc_comment() {\n-        let comment = \"/// Test\";\n-        let correct_stripped = \" Test\";\n+    #[test] fn test_block_doc_comment_4() {\n+        let comment = \"/*******************\\n test\\n *********************/\";\n         let stripped = strip_doc_comment_decoration(comment);\n-        assert_eq!(stripped.slice(0, stripped.len()), correct_stripped);\n+        assert_eq!(stripped, ~\" test\");\n+    }\n+\n+    #[test] fn test_line_doc_comment() {\n+        let stripped = strip_doc_comment_decoration(\"/// test\");\n+        assert_eq!(stripped, ~\" test\");\n+        let stripped = strip_doc_comment_decoration(\"///! test\");\n+        assert_eq!(stripped, ~\" test\");\n+        let stripped = strip_doc_comment_decoration(\"// test\");\n+        assert_eq!(stripped, ~\" test\");\n+        let stripped = strip_doc_comment_decoration(\"// test\");\n+        assert_eq!(stripped, ~\" test\");\n+        let stripped = strip_doc_comment_decoration(\"///test\");\n+        assert_eq!(stripped, ~\"test\");\n+        let stripped = strip_doc_comment_decoration(\"///!test\");\n+        assert_eq!(stripped, ~\"test\");\n+        let stripped = strip_doc_comment_decoration(\"//test\");\n+        assert_eq!(stripped, ~\"test\");\n     }\n }"}]}