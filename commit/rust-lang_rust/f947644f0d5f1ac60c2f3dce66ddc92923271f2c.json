{"sha": "f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NDc2NDRmMGQ1ZjFhYzYwYzJmM2RjZTY2ZGRjOTI5MjMyNzFmMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-08T16:47:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-08T16:47:22Z"}, "message": "Auto merge of #5680 - ebroto:3792_let_return, r=Manishearth\n\nlet_and_return: avoid \"does not live long enough\" errors\n\nEDIT: Add #3324 to the list of fixes\n\n<details>\n<summary>Description of old impl</summary>\n<br>\nAvoid suggesting turning the RHS expression of the last statement into the block tail expression if a temporary borrows from a local that would be destroyed before.\n\nThis is my first incursion into MIR so there's probably room for improvement!\n</details>\n\nAvoid linting if the return type of some method or function called in the last statement has a lifetime parameter.\n\nchangelog: Fix false positive in [`let_and_return`]\n\nFixes #3792\nFixes #3324", "tree": {"sha": "024a60b2ec4051d7b6300e3827ff1d800371e2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/024a60b2ec4051d7b6300e3827ff1d800371e2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "html_url": "https://github.com/rust-lang/rust/commit/f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b84b3f76db772f4aee5385bf79545417763acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b84b3f76db772f4aee5385bf79545417763acf", "html_url": "https://github.com/rust-lang/rust/commit/08b84b3f76db772f4aee5385bf79545417763acf"}, {"sha": "dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885", "html_url": "https://github.com/rust-lang/rust/commit/dac8a3c1ca19d2b5934ecbe2ed79ae6c156fd885"}], "stats": {"total": 447, "additions": 291, "deletions": 156}, "files": [{"sha": "6d3fb317bcfc5fa0f0a612780bb798b6ecab9112", "filename": "clippy_lints/src/let_and_return.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_and_return.rs?ref=f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "patch": "@@ -0,0 +1,141 @@\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::{Block, Expr, ExprKind, PatKind, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+use crate::utils::{in_macro, match_qpath, snippet_opt, span_lint_and_then};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let`-bindings, which are subsequently\n+    /// returned.\n+    ///\n+    /// **Why is this bad?** It is just extraneous code. Remove it to make your code\n+    /// more rusty.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// fn foo() -> String {\n+    ///     let x = String::new();\n+    ///     x\n+    /// }\n+    /// ```\n+    /// instead, use\n+    /// ```\n+    /// fn foo() -> String {\n+    ///     String::new()\n+    /// }\n+    /// ```\n+    pub LET_AND_RETURN,\n+    style,\n+    \"creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\"\n+}\n+\n+declare_lint_pass!(LetReturn => [LET_AND_RETURN]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetReturn {\n+    fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx Block<'_>) {\n+        // we need both a let-binding stmt and an expr\n+        if_chain! {\n+            if let Some(retexpr) = block.expr;\n+            if let Some(stmt) = block.stmts.iter().last();\n+            if let StmtKind::Local(local) = &stmt.kind;\n+            if local.ty.is_none();\n+            if local.attrs.is_empty();\n+            if let Some(initexpr) = &local.init;\n+            if let PatKind::Binding(.., ident, _) = local.pat.kind;\n+            if let ExprKind::Path(qpath) = &retexpr.kind;\n+            if match_qpath(qpath, &[&*ident.name.as_str()]);\n+            if !last_statement_borrows(cx, initexpr);\n+            if !in_external_macro(cx.sess(), initexpr.span);\n+            if !in_external_macro(cx.sess(), retexpr.span);\n+            if !in_external_macro(cx.sess(), local.span);\n+            if !in_macro(local.span);\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    LET_AND_RETURN,\n+                    retexpr.span,\n+                    \"returning the result of a `let` binding from a block\",\n+                    |err| {\n+                        err.span_label(local.span, \"unnecessary `let` binding\");\n+\n+                        if let Some(snippet) = snippet_opt(cx, initexpr.span) {\n+                            err.multipart_suggestion(\n+                                \"return the expression directly\",\n+                                vec![\n+                                    (local.span, String::new()),\n+                                    (retexpr.span, snippet),\n+                                ],\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            err.span_help(initexpr.span, \"this expression can be directly returned\");\n+                        }\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn last_statement_borrows<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n+    let mut visitor = BorrowVisitor { cx, borrows: false };\n+    walk_expr(&mut visitor, expr);\n+    visitor.borrows\n+}\n+\n+struct BorrowVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    borrows: bool,\n+}\n+\n+impl BorrowVisitor<'_, '_> {\n+    fn fn_def_id(&self, expr: &Expr<'_>) -> Option<DefId> {\n+        match &expr.kind {\n+            ExprKind::MethodCall(..) => self.cx.tables.type_dependent_def_id(expr.hir_id),\n+            ExprKind::Call(\n+                Expr {\n+                    kind: ExprKind::Path(qpath),\n+                    ..\n+                },\n+                ..,\n+            ) => self.cx.tables.qpath_res(qpath, expr.hir_id).opt_def_id(),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.borrows {\n+            return;\n+        }\n+\n+        if let Some(def_id) = self.fn_def_id(expr) {\n+            self.borrows = self\n+                .cx\n+                .tcx\n+                .fn_sig(def_id)\n+                .output()\n+                .skip_binder()\n+                .walk()\n+                .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "cd258c7b506c39ccd635b4560fd19004958b0d6e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "patch": "@@ -241,6 +241,7 @@ mod large_const_arrays;\n mod large_enum_variant;\n mod large_stack_arrays;\n mod len_zero;\n+mod let_and_return;\n mod let_if_seq;\n mod let_underscore;\n mod lifetimes;\n@@ -599,6 +600,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n+        &let_and_return::LET_AND_RETURN,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n         &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n@@ -775,7 +777,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &regex::INVALID_REGEX,\n         &regex::REGEX_MACRO,\n         &regex::TRIVIAL_REGEX,\n-        &returns::LET_AND_RETURN,\n         &returns::NEEDLESS_RETURN,\n         &returns::UNUSED_UNIT,\n         &serde_api::SERDE_API_MISUSE,\n@@ -1026,6 +1027,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box formatting::Formatting);\n     store.register_early_pass(|| box misc_early::MiscEarlyLints);\n     store.register_early_pass(|| box returns::Return);\n+    store.register_late_pass(|| box let_and_return::LetReturn);\n     store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n@@ -1270,6 +1272,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n+        LintId::of(&let_and_return::LET_AND_RETURN),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n@@ -1395,7 +1398,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&regex::REGEX_MACRO),\n         LintId::of(&regex::TRIVIAL_REGEX),\n-        LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n@@ -1480,6 +1482,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n+        LintId::of(&let_and_return::LET_AND_RETURN),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n@@ -1532,7 +1535,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&regex::REGEX_MACRO),\n         LintId::of(&regex::TRIVIAL_REGEX),\n-        LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),"}, {"sha": "3c939744173562515d8419edffabca457ec08e11", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 3, "deletions": 79, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block.\n@@ -36,33 +36,6 @@ declare_clippy_lint! {\n     \"using a return statement like `return expr;` where an expression would suffice\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `let`-bindings, which are subsequently\n-    /// returned.\n-    ///\n-    /// **Why is this bad?** It is just extraneous code. Remove it to make your code\n-    /// more rusty.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// fn foo() -> String {\n-    ///     let x = String::new();\n-    ///     x\n-    /// }\n-    /// ```\n-    /// instead, use\n-    /// ```\n-    /// fn foo() -> String {\n-    ///     String::new()\n-    /// }\n-    /// ```\n-    pub LET_AND_RETURN,\n-    style,\n-    \"creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for unit (`()`) expressions that can be removed.\n     ///\n@@ -90,7 +63,7 @@ enum RetReplacement {\n     Block,\n }\n \n-declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n+declare_lint_pass!(Return => [NEEDLESS_RETURN, UNUSED_UNIT]);\n \n impl Return {\n     // Check the final stmt or expr in a block for unnecessary return.\n@@ -105,7 +78,7 @@ impl Return {\n         }\n     }\n \n-    // Check a the final expression in a block if it's a return.\n+    // Check the final expression in a block if it's a return.\n     fn check_final_expr(\n         &mut self,\n         cx: &EarlyContext<'_>,\n@@ -186,54 +159,6 @@ impl Return {\n             },\n         }\n     }\n-\n-    // Check for \"let x = EXPR; x\"\n-    fn check_let_return(cx: &EarlyContext<'_>, block: &ast::Block) {\n-        let mut it = block.stmts.iter();\n-\n-        // we need both a let-binding stmt and an expr\n-        if_chain! {\n-            if let Some(retexpr) = it.next_back();\n-            if let ast::StmtKind::Expr(ref retexpr) = retexpr.kind;\n-            if let Some(stmt) = it.next_back();\n-            if let ast::StmtKind::Local(ref local) = stmt.kind;\n-            // don't lint in the presence of type inference\n-            if local.ty.is_none();\n-            if local.attrs.is_empty();\n-            if let Some(ref initexpr) = local.init;\n-            if let ast::PatKind::Ident(_, ident, _) = local.pat.kind;\n-            if let ast::ExprKind::Path(_, ref path) = retexpr.kind;\n-            if match_path_ast(path, &[&*ident.name.as_str()]);\n-            if !in_external_macro(cx.sess(), initexpr.span);\n-            if !in_external_macro(cx.sess(), retexpr.span);\n-            if !in_external_macro(cx.sess(), local.span);\n-            if !in_macro(local.span);\n-            then {\n-                span_lint_and_then(\n-                    cx,\n-                    LET_AND_RETURN,\n-                    retexpr.span,\n-                    \"returning the result of a `let` binding from a block\",\n-                    |err| {\n-                        err.span_label(local.span, \"unnecessary `let` binding\");\n-\n-                        if let Some(snippet) = snippet_opt(cx, initexpr.span) {\n-                            err.multipart_suggestion(\n-                                \"return the expression directly\",\n-                                vec![\n-                                    (local.span, String::new()),\n-                                    (retexpr.span, snippet),\n-                                ],\n-                                Applicability::MachineApplicable,\n-                            );\n-                        } else {\n-                            err.span_help(initexpr.span, \"this expression can be directly returned\");\n-                        }\n-                    },\n-                );\n-            }\n-        }\n-    }\n }\n \n impl EarlyLintPass for Return {\n@@ -254,7 +179,6 @@ impl EarlyLintPass for Return {\n     }\n \n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {\n-        Self::check_let_return(cx, block);\n         if_chain! {\n             if let Some(ref stmt) = block.stmts.last();\n             if let ast::StmtKind::Expr(ref expr) = stmt.kind;"}, {"sha": "7b59917c2bbfc37d2d35a4af4dd0a0aa8aefa063", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "patch": "@@ -398,7 +398,7 @@ pub fn method_calls<'tcx>(\n /// Matches an `Expr` against a chain of methods, and return the matched `Expr`s.\n ///\n /// For example, if `expr` represents the `.baz()` in `foo.bar().baz()`,\n-/// `matched_method_chain(expr, &[\"bar\", \"baz\"])` will return a `Vec`\n+/// `method_chain_args(expr, &[\"bar\", \"baz\"])` will return a `Vec`\n /// containing the `Expr`s for\n /// `.bar()` and `.baz()`\n pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec<&'a [Expr<'a>]>> {"}, {"sha": "cac3cc6bdb316eb2891ff3b4d99d1001371ebfbd", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "patch": "@@ -1023,7 +1023,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         group: \"style\",\n         desc: \"creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\",\n         deprecation: None,\n-        module: \"returns\",\n+        module: \"let_and_return\",\n     },\n     Lint {\n         name: \"let_underscore_lock\","}, {"sha": "09614b8c1ad787d98975f9c800279a1817a7d3b3", "filename": "tests/ui/let_and_return.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/tests%2Fui%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/tests%2Fui%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_and_return.rs?ref=f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "patch": "@@ -0,0 +1,138 @@\n+#![allow(unused)]\n+#![warn(clippy::let_and_return)]\n+\n+fn test() -> i32 {\n+    let _y = 0; // no warning\n+    let x = 5;\n+    x\n+}\n+\n+fn test_inner() -> i32 {\n+    if true {\n+        let x = 5;\n+        x\n+    } else {\n+        0\n+    }\n+}\n+\n+fn test_nowarn_1() -> i32 {\n+    let mut x = 5;\n+    x += 1;\n+    x\n+}\n+\n+fn test_nowarn_2() -> i32 {\n+    let x = 5;\n+    x + 1\n+}\n+\n+fn test_nowarn_3() -> (i32, i32) {\n+    // this should technically warn, but we do not compare complex patterns\n+    let (x, y) = (5, 9);\n+    (x, y)\n+}\n+\n+fn test_nowarn_4() -> i32 {\n+    // this should technically warn, but not b/c of clippy::let_and_return, but b/c of useless type\n+    let x: i32 = 5;\n+    x\n+}\n+\n+fn test_nowarn_5(x: i16) -> u16 {\n+    #[allow(clippy::cast_possible_truncation, clippy::cast_sign_loss)]\n+    let x = x as u16;\n+    x\n+}\n+\n+// False positive example\n+trait Decode {\n+    fn decode<D: std::io::Read>(d: D) -> Result<Self, ()>\n+    where\n+        Self: Sized;\n+}\n+\n+macro_rules! tuple_encode {\n+    ($($x:ident),*) => (\n+        impl<$($x: Decode),*> Decode for ($($x),*) {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn decode<D: std::io::Read>(mut d: D) -> Result<Self, ()> {\n+                // Shouldn't trigger lint\n+                Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))\n+            }\n+        }\n+    );\n+}\n+\n+tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);\n+\n+mod no_lint_if_stmt_borrows {\n+    mod issue_3792 {\n+        use std::io::{self, BufRead, Stdin};\n+\n+        fn read_line() -> String {\n+            let stdin = io::stdin();\n+            let line = stdin.lock().lines().next().unwrap().unwrap();\n+            line\n+        }\n+    }\n+\n+    mod issue_3324 {\n+        use std::cell::RefCell;\n+        use std::rc::{Rc, Weak};\n+\n+        fn test(value: Weak<RefCell<Bar>>) -> u32 {\n+            let value = value.upgrade().unwrap();\n+            let ret = value.borrow().baz();\n+            ret\n+        }\n+\n+        struct Bar {}\n+\n+        impl Bar {\n+            fn new() -> Self {\n+                Bar {}\n+            }\n+            fn baz(&self) -> u32 {\n+                0\n+            }\n+        }\n+\n+        fn main() {\n+            let a = Rc::new(RefCell::new(Bar::new()));\n+            let b = Rc::downgrade(&a);\n+            test(b);\n+        }\n+    }\n+\n+    mod free_function {\n+        struct Inner;\n+\n+        struct Foo<'a> {\n+            inner: &'a Inner,\n+        }\n+\n+        impl Drop for Foo<'_> {\n+            fn drop(&mut self) {}\n+        }\n+\n+        impl Foo<'_> {\n+            fn value(&self) -> i32 {\n+                42\n+            }\n+        }\n+\n+        fn some_foo(inner: &Inner) -> Foo<'_> {\n+            Foo { inner }\n+        }\n+\n+        fn test() -> i32 {\n+            let x = Inner {};\n+            let value = some_foo(&x).value();\n+            value\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "eacf948b3927a5ee28cd67b3756941d811868764", "filename": "tests/ui/let_and_return.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/tests%2Fui%2Flet_and_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f947644f0d5f1ac60c2f3dce66ddc92923271f2c/tests%2Fui%2Flet_and_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_and_return.stderr?ref=f947644f0d5f1ac60c2f3dce66ddc92923271f2c", "patch": "@@ -1,5 +1,5 @@\n error: returning the result of a `let` binding from a block\n-  --> $DIR/let_return.rs:7:5\n+  --> $DIR/let_and_return.rs:7:5\n    |\n LL |     let x = 5;\n    |     ---------- unnecessary `let` binding\n@@ -14,7 +14,7 @@ LL |     5\n    |\n \n error: returning the result of a `let` binding from a block\n-  --> $DIR/let_return.rs:13:9\n+  --> $DIR/let_and_return.rs:13:9\n    |\n LL |         let x = 5;\n    |         ---------- unnecessary `let` binding", "previous_filename": "tests/ui/let_return.stderr"}, {"sha": "23645d48fe79913acf7f7c856ca5fa846ee2ee72", "filename": "tests/ui/let_return.rs", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/08b84b3f76db772f4aee5385bf79545417763acf/tests%2Fui%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b84b3f76db772f4aee5385bf79545417763acf/tests%2Fui%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.rs?ref=08b84b3f76db772f4aee5385bf79545417763acf", "patch": "@@ -1,70 +0,0 @@\n-#![allow(unused)]\n-#![warn(clippy::let_and_return)]\n-\n-fn test() -> i32 {\n-    let _y = 0; // no warning\n-    let x = 5;\n-    x\n-}\n-\n-fn test_inner() -> i32 {\n-    if true {\n-        let x = 5;\n-        x\n-    } else {\n-        0\n-    }\n-}\n-\n-fn test_nowarn_1() -> i32 {\n-    let mut x = 5;\n-    x += 1;\n-    x\n-}\n-\n-fn test_nowarn_2() -> i32 {\n-    let x = 5;\n-    x + 1\n-}\n-\n-fn test_nowarn_3() -> (i32, i32) {\n-    // this should technically warn, but we do not compare complex patterns\n-    let (x, y) = (5, 9);\n-    (x, y)\n-}\n-\n-fn test_nowarn_4() -> i32 {\n-    // this should technically warn, but not b/c of clippy::let_and_return, but b/c of useless type\n-    let x: i32 = 5;\n-    x\n-}\n-\n-fn test_nowarn_5(x: i16) -> u16 {\n-    #[allow(clippy::cast_possible_truncation, clippy::cast_sign_loss)]\n-    let x = x as u16;\n-    x\n-}\n-\n-// False positive example\n-trait Decode {\n-    fn decode<D: std::io::Read>(d: D) -> Result<Self, ()>\n-    where\n-        Self: Sized;\n-}\n-\n-macro_rules! tuple_encode {\n-    ($($x:ident),*) => (\n-        impl<$($x: Decode),*> Decode for ($($x),*) {\n-            #[inline]\n-            #[allow(non_snake_case)]\n-            fn decode<D: std::io::Read>(mut d: D) -> Result<Self, ()> {\n-                // Shouldn't trigger lint\n-                Ok(($({let $x = Decode::decode(&mut d)?; $x }),*))\n-            }\n-        }\n-    );\n-}\n-\n-tuple_encode!(T0, T1, T2, T3, T4, T5, T6, T7);\n-\n-fn main() {}"}]}