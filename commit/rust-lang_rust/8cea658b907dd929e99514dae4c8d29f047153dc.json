{"sha": "8cea658b907dd929e99514dae4c8d29f047153dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZWE2NThiOTA3ZGQ5MjllOTk1MTRkYWU0YzhkMjlmMDQ3MTUzZGM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-19T08:20:13Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-19T14:06:45Z"}, "message": "Rollup merge of #56059 - alexcrichton:fix-tests, r=sfackler\n\nIncrease `Duration` approximate equal threshold to 1us\n\nPreviously this threshold when testing was 100ns, but the Windows\ndocumentation states:\n\n> which is a high resolution (<1us) time stamp\n\nwhich presumably means that we could have up to 1us resolution, which\nmeans that 100ns doesn't capture \"equivalent\" time intervals due to\nvarious bits of rounding here and there.\n\nIt's hoped that this..\n\nCloses #56034", "tree": {"sha": "34da3fc3d98516b792254200a7281b60e0ad8d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34da3fc3d98516b792254200a7281b60e0ad8d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cea658b907dd929e99514dae4c8d29f047153dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvyw3UACgkQ/vbIBR0O\nATyfkRAAlLus5fH60cr182Yu0nBT55BtwIsgQbfv7K3kqyJx11Is5R6td2/PIJbJ\n0Yc8MfsaF8yQ8ddjLhL8lFeZdXEidU/PqpAh5J6UeTZoubafenyGacknfqli6p2t\n8U8beL7YHWx8lCfmSrpg5gQLL4zUnFfkcxJtKOxCGuxamAGMfHEJ73/8wO0R73EJ\nM155y80zONRfYieE8uW9mMM5z8zxdzoqpmVcmvbZ376hDthC/+79+eAbK4akZJmr\nVYHB9bXrcJGSc2DoUetJVcgEQcs7XCxrVPU+Zu2YN4it2PaTF6VMtzJkbq/HqbDU\nfoiyAV6sdObpmitr/Z1GfgmnqBkJDcoh5rcWt2yyiRqBnvgHaiM1taNs2Q+ORpHL\nFyz2lAzhDWRJPOVy6o08DpVvPHeJJw4kU7iLg3wG9acwTqf+kIa+02/qTvkgHA7c\ndyPtsnTI39lBmPqbz9n/dyT0La9KA2CLMpki4UZU7xLg7jaTVq3qE+t7pS7Rl5Ua\nJTP1lHVWYarKesYqD1zvhvm2jEiXpdz7iusdv0YSWBgeIdtYCK98RlqGA46a6Qx8\nZPUPa61HesHTCv9zvMRF3tcFI+jlScWdSoNj+8hSA/2iMmx/m5ds5n2WN1a7dlw1\nujyLjWovLqdknJHKc/qjQBORSEcr5nUetL0BWT0nLGiC5/5brmA=\n=j0HQ\n-----END PGP SIGNATURE-----", "payload": "tree 34da3fc3d98516b792254200a7281b60e0ad8d6d\nparent 10565c45acd85cd73c4554887863fe3a0176e2c1\nparent 86073253d563a7792765933f24acbf93fd3fee1d\nauthor kennytm <kennytm@gmail.com> 1542615613 +0800\ncommitter kennytm <kennytm@gmail.com> 1542636405 +0800\n\nRollup merge of #56059 - alexcrichton:fix-tests, r=sfackler\n\nIncrease `Duration` approximate equal threshold to 1us\n\nPreviously this threshold when testing was 100ns, but the Windows\ndocumentation states:\n\n> which is a high resolution (<1us) time stamp\n\nwhich presumably means that we could have up to 1us resolution, which\nmeans that 100ns doesn't capture \"equivalent\" time intervals due to\nvarious bits of rounding here and there.\n\nIt's hoped that this..\n\nCloses #56034\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cea658b907dd929e99514dae4c8d29f047153dc", "html_url": "https://github.com/rust-lang/rust/commit/8cea658b907dd929e99514dae4c8d29f047153dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cea658b907dd929e99514dae4c8d29f047153dc/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10565c45acd85cd73c4554887863fe3a0176e2c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/10565c45acd85cd73c4554887863fe3a0176e2c1", "html_url": "https://github.com/rust-lang/rust/commit/10565c45acd85cd73c4554887863fe3a0176e2c1"}, {"sha": "86073253d563a7792765933f24acbf93fd3fee1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/86073253d563a7792765933f24acbf93fd3fee1d", "html_url": "https://github.com/rust-lang/rust/commit/86073253d563a7792765933f24acbf93fd3fee1d"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "ce7269d1e78394f65c798d3337a3590d114079ac", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8cea658b907dd929e99514dae4c8d29f047153dc", "patch": "@@ -340,8 +340,21 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 // the last field).  Can't have foreign types here, how would we\n                 // adjust alignment and size for them?\n                 let field = layout.field(self, layout.fields.count() - 1)?;\n-                let (unsized_size, unsized_align) = self.size_and_align_of(metadata, field)?\n-                    .expect(\"Fields cannot be extern types\");\n+                let (unsized_size, unsized_align) = match self.size_and_align_of(metadata, field)? {\n+                    Some(size_and_align) => size_and_align,\n+                    None => {\n+                        // A field with extern type.  If this field is at offset 0, we behave\n+                        // like the underlying extern type.\n+                        // FIXME: Once we have made decisions for how to handle size and alignment\n+                        // of `extern type`, this should be adapted.  It is just a temporary hack\n+                        // to get some code to work that probably ought to work.\n+                        if sized_size == Size::ZERO {\n+                            return Ok(None)\n+                        } else {\n+                            bug!(\"Fields cannot be extern types, unless they are at offset 0\")\n+                        }\n+                    }\n+                };\n \n                 // FIXME (#26403, #27023): We should be adding padding\n                 // to `sized_size` (to accommodate the `unsized_align`"}, {"sha": "fa76eeb2fedd580a99233cd760233f4100bc28c2", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=8cea658b907dd929e99514dae4c8d29f047153dc", "patch": "@@ -351,8 +351,17 @@ where\n         // Offset may need adjustment for unsized fields\n         let (meta, offset) = if field_layout.is_unsized() {\n             // re-use parent metadata to determine dynamic field layout\n-            let (_, align) = self.size_and_align_of(base.meta, field_layout)?\n-                .expect(\"Fields cannot be extern types\");\n+            let align = match self.size_and_align_of(base.meta, field_layout)? {\n+                Some((_, align)) => align,\n+                None if offset == Size::ZERO =>\n+                    // An extern type at offset 0, we fall back to its static alignment.\n+                    // FIXME: Once we have made decisions for how to handle size and alignment\n+                    // of `extern type`, this should be adapted.  It is just a temporary hack\n+                    // to get some code to work that probably ought to work.\n+                    field_layout.align,\n+                None =>\n+                    bug!(\"Cannot compute offset for extern type field at non-0 offset\"),\n+            };\n             (base.meta, offset.abi_align(align))\n         } else {\n             // base.meta could be present; we might be accessing a sized field of an unsized"}, {"sha": "58be1972a81210241cbab9b5c25e7437aa1510e4", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=8cea658b907dd929e99514dae4c8d29f047153dc", "patch": "@@ -481,7 +481,7 @@ mod tests {\n             let (a, b) = ($a, $b);\n             if a != b {\n                 let (a, b) = if a > b {(a, b)} else {(b, a)};\n-                assert!(a - Duration::new(0, 100) <= b,\n+                assert!(a - Duration::new(0, 1000) <= b,\n                         \"{:?} is not almost equal to {:?}\", a, b);\n             }\n         })"}, {"sha": "611fb89341de4842fcffe63ece78aaf129d27250", "filename": "src/test/ui/consts/const-eval/issue-55541.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cea658b907dd929e99514dae4c8d29f047153dc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-55541.rs?ref=8cea658b907dd929e99514dae4c8d29f047153dc", "patch": "@@ -0,0 +1,27 @@\n+// compile-pass\n+\n+// Test that we can handle newtypes wrapping extern types\n+\n+#![feature(extern_types, const_transmute)]\n+\n+use std::marker::PhantomData;\n+\n+extern \"C\" {\n+  pub type ExternType;\n+}\n+unsafe impl Sync for ExternType {}\n+static MAGIC_FFI_STATIC: u8 = 42;\n+\n+#[repr(transparent)]\n+pub struct Wrapper(ExternType);\n+pub static MAGIC_FFI_REF: &'static Wrapper = unsafe {\n+  std::mem::transmute(&MAGIC_FFI_STATIC)\n+};\n+\n+#[repr(transparent)]\n+pub struct Wrapper2(PhantomData<Vec<i32>>, ExternType);\n+pub static MAGIC_FFI_REF2: &'static Wrapper2 = unsafe {\n+  std::mem::transmute(&MAGIC_FFI_STATIC)\n+};\n+\n+fn main() {}"}]}