{"sha": "0aa4cde747bccb1d1277f9203cfe2021feec341f", "node_id": "C_kwDOAAsO6NoAKDBhYTRjZGU3NDdiY2NiMWQxMjc3ZjkyMDNjZmUyMDIxZmVlYzM0MWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T14:01:26Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T15:20:32Z"}, "message": "avoid .into() conversion to identical types", "tree": {"sha": "8250b19d7af3c5a53ae852b71c9247deb1baeabc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8250b19d7af3c5a53ae852b71c9247deb1baeabc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa4cde747bccb1d1277f9203cfe2021feec341f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa4cde747bccb1d1277f9203cfe2021feec341f", "html_url": "https://github.com/rust-lang/rust/commit/0aa4cde747bccb1d1277f9203cfe2021feec341f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa4cde747bccb1d1277f9203cfe2021feec341f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a99eef32a2b7b9d8e77dde539f869e522d181f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a99eef32a2b7b9d8e77dde539f869e522d181f", "html_url": "https://github.com/rust-lang/rust/commit/35a99eef32a2b7b9d8e77dde539f869e522d181f"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "729ae4071e2008b53e1e7276484ab8fb4e021ceb", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -239,8 +239,7 @@ pub fn expand_test_or_bench(\n             cx.attr_nested_word(sym::cfg, sym::test, attr_sp),\n             // #[rustc_test_marker = \"test_case_sort_key\"]\n             cx.attr_name_value_str(sym::rustc_test_marker, test_path_symbol, attr_sp),\n-        ]\n-        .into(),\n+        ],\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(\n             ast::Defaultness::Final,"}, {"sha": "f9e3a2bdc06fe528dcb3bcfa7ef980a2cf3a2d41", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -39,7 +39,7 @@ pub enum Immediate<Prov: Provenance = AllocId> {\n impl<Prov: Provenance> From<Scalar<Prov>> for Immediate<Prov> {\n     #[inline(always)]\n     fn from(val: Scalar<Prov>) -> Self {\n-        Immediate::Scalar(val.into())\n+        Immediate::Scalar(val)\n     }\n }\n \n@@ -53,15 +53,15 @@ impl<Prov: Provenance> Immediate<Prov> {\n     }\n \n     pub fn new_slice(val: Scalar<Prov>, len: u64, cx: &impl HasDataLayout) -> Self {\n-        Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())\n+        Immediate::ScalarPair(val, Scalar::from_machine_usize(len, cx))\n     }\n \n     pub fn new_dyn_trait(\n         val: Scalar<Prov>,\n         vtable: Pointer<Option<Prov>>,\n         cx: &impl HasDataLayout,\n     ) -> Self {\n-        Immediate::ScalarPair(val.into(), Scalar::from_maybe_pointer(vtable, cx))\n+        Immediate::ScalarPair(val, Scalar::from_maybe_pointer(vtable, cx))\n     }\n \n     #[inline]\n@@ -341,10 +341,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     alloc_range(b_offset, b_size),\n                     /*read_provenance*/ b.is_ptr(),\n                 )?;\n-                Some(ImmTy {\n-                    imm: Immediate::ScalarPair(a_val.into(), b_val.into()),\n-                    layout: mplace.layout,\n-                })\n+                Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout })\n             }\n             _ => {\n                 // Neither a scalar nor scalar pair."}, {"sha": "e8ff70e3a4095075ebe765e16a18549decfd866d", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -36,7 +36,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Abi::ScalarPair(..) = dest.layout.abi {\n             // We can use the optimized path and avoid `place_field` (which might do\n             // `force_allocation`).\n-            let pair = Immediate::ScalarPair(val.into(), Scalar::from_bool(overflowed).into());\n+            let pair = Immediate::ScalarPair(val, Scalar::from_bool(overflowed));\n             self.write_immediate(pair, dest)?;\n         } else {\n             assert!(self.tcx.sess.opts.unstable_opts.randomize_layout);"}, {"sha": "97a73e98abcbca9d563027620fc8a74630014606", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -141,7 +141,7 @@ impl<Prov: Provenance> MemPlace<Prov> {\n         match self.meta {\n             MemPlaceMeta::None => Immediate::from(Scalar::from_maybe_pointer(self.ptr, cx)),\n             MemPlaceMeta::Meta(meta) => {\n-                Immediate::ScalarPair(Scalar::from_maybe_pointer(self.ptr, cx).into(), meta.into())\n+                Immediate::ScalarPair(Scalar::from_maybe_pointer(self.ptr, cx), meta)\n             }\n         }\n     }"}, {"sha": "268b3bf1dcd4b23c01fe1d69f15e3d1b528a3133", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -1920,7 +1920,7 @@ impl<'tcx> TypeTrace<'tcx> {\n     ) -> TypeTrace<'tcx> {\n         TypeTrace {\n             cause: cause.clone(),\n-            values: PolyTraitRefs(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+            values: PolyTraitRefs(ExpectedFound::new(a_is_expected, a, b)),\n         }\n     }\n "}, {"sha": "f77bd9f0c6ffc320d6222f03130feff9550ab844", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -88,8 +88,8 @@ pub(super) fn vtable_allocation_provider<'tcx>(\n                 let fn_ptr = Pointer::from(fn_alloc_id);\n                 Scalar::from_pointer(fn_ptr, &tcx)\n             }\n-            VtblEntry::MetadataSize => Scalar::from_uint(size, ptr_size).into(),\n-            VtblEntry::MetadataAlign => Scalar::from_uint(align, ptr_size).into(),\n+            VtblEntry::MetadataSize => Scalar::from_uint(size, ptr_size),\n+            VtblEntry::MetadataAlign => Scalar::from_uint(align, ptr_size),\n             VtblEntry::Vacant => continue,\n             VtblEntry::Method(instance) => {\n                 // Prepare the fn ptr we write into the vtable."}, {"sha": "23a4f85386b8d5f29d2c46d8f3b5f70f7e38b583", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -356,7 +356,7 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         match self {\n             PlaceBuilder::Local { local, projection } => PlaceBuilder::Local {\n                 local: *local,\n-                projection: Vec::from_iter(projection.iter().copied().chain([elem.into()])),\n+                projection: Vec::from_iter(projection.iter().copied().chain([elem])),\n             },\n             PlaceBuilder::Upvar { upvar, projection } => PlaceBuilder::Upvar {\n                 upvar: *upvar,"}, {"sha": "e384cfe165990c47940bde2566b8da034d49fe33", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -701,8 +701,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     BinOp::Mul if const_arg.layout.ty.is_integral() && arg_value == 0 => {\n                         if let Rvalue::CheckedBinaryOp(_, _) = rvalue {\n                             let val = Immediate::ScalarPair(\n-                                const_arg.to_scalar().into(),\n-                                Scalar::from_bool(false).into(),\n+                                const_arg.to_scalar(),\n+                                Scalar::from_bool(false),\n                             );\n                             this.ecx.write_immediate(val, &dest)\n                         } else {"}, {"sha": "40b88788caa6743c66a5e7f9c0e6dba47fd6cb9a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -25,7 +25,7 @@ use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::util::case::Case;\n use rustc_ast::AttrId;\n use rustc_ast::DUMMY_NODE_ID;\n-use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, DelimArgs, Extern};\n+use rustc_ast::{self as ast, AnonConst, AttrStyle, Const, DelimArgs, Extern};\n use rustc_ast::{Async, AttrArgs, AttrArgsEq, Expr, ExprKind, MacDelimiter, Mutability, StrLit};\n use rustc_ast::{HasAttrs, HasTokens, Unsafe, Visibility, VisibilityKind};\n use rustc_ast_pretty::pprust;\n@@ -1217,11 +1217,7 @@ impl<'a> Parser<'a> {\n             value: self.mk_expr(blk.span, ExprKind::Block(blk, None)),\n         };\n         let blk_span = anon_const.value.span;\n-        Ok(self.mk_expr_with_attrs(\n-            span.to(blk_span),\n-            ExprKind::ConstBlock(anon_const),\n-            AttrVec::from(attrs),\n-        ))\n+        Ok(self.mk_expr_with_attrs(span.to(blk_span), ExprKind::ConstBlock(anon_const), attrs))\n     }\n \n     /// Parses mutability (`mut` or nothing)."}, {"sha": "9a40b847d8552ebd9800fa42f6a6791b17562f73", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -83,7 +83,6 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                         .map(|p| p.display().to_string())\n                         .collect::<Vec<_>>()\n                         .join(\", \")\n-                        .into()\n                 };\n                 let first_defined_span = self.tcx.hir().span_if_local(original_def_id);\n                 let mut orig_crate_name = Empty;\n@@ -98,7 +97,6 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n                         .map(|p| p.display().to_string())\n                         .collect::<Vec<_>>()\n                         .join(\", \")\n-                        .into()\n                 };\n                 if first_defined_span.is_none() {\n                     orig_crate_name = self.tcx.crate_name(original_def_id.krate);"}, {"sha": "3b1be1a7f995e2966682169ea9e6eb45bdeddae7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa4cde747bccb1d1277f9203cfe2021feec341f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=0aa4cde747bccb1d1277f9203cfe2021feec341f", "patch": "@@ -1735,8 +1735,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 values.map(|(_, is_normalized_ty_expected, normalized_ty, expected_ty)| {\n                     infer::ValuePairs::Terms(ExpectedFound::new(\n                         is_normalized_ty_expected,\n-                        normalized_ty.into(),\n-                        expected_ty.into(),\n+                        normalized_ty,\n+                        expected_ty,\n                     ))\n                 }),\n                 err,"}]}