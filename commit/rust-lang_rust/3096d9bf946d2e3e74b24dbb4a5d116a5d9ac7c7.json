{"sha": "3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTZkOWJmOTQ2ZDJlM2U3NGIyNGRiYjRhNWQxMTZhNWQ5YWM3Yzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-08T00:58:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-14T19:27:08Z"}, "message": "rustc_llvm: Remove the inner llvm module\n\nThis makes it much saner for clients to use the library since\nthey don't have to worry about shadowing one llvm with another.", "tree": {"sha": "d9536701aff1242ac137fb58d769885b72f0f3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9536701aff1242ac137fb58d769885b72f0f3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "html_url": "https://github.com/rust-lang/rust/commit/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2e15f163fa696aaeae658c84bdcb95bd67432a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2e15f163fa696aaeae658c84bdcb95bd67432a", "html_url": "https://github.com/rust-lang/rust/commit/8e2e15f163fa696aaeae658c84bdcb95bd67432a"}], "stats": {"total": 3396, "additions": 1698, "deletions": 1698}, "files": [{"sha": "cad164c9e2019d0c271c5c7c00b3b2988cedffaf", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -56,7 +56,7 @@ pub enum OutputType {\n \n pub fn llvm_err(sess: &Session, msg: String) -> ! {\n     unsafe {\n-        let cstr = llvm::llvm::LLVMRustGetLastError();\n+        let cstr = llvm::LLVMRustGetLastError();\n         if cstr == ptr::null() {\n             sess.fatal(msg.as_slice());\n         } else {\n@@ -78,7 +78,7 @@ pub fn write_output_file(\n         file_type: llvm::FileType) {\n     unsafe {\n         output.with_c_str(|output| {\n-            let result = llvm::llvm::LLVMRustWriteOutputFile(\n+            let result = llvm::LLVMRustWriteOutputFile(\n                     target, pm, m, output, file_type);\n             if !result {\n                 llvm_err(sess, \"could not write output\".to_string());\n@@ -147,7 +147,7 @@ pub mod write {\n \n             if sess.opts.cg.save_temps {\n                 output.with_extension(\"no-opt.bc\").with_c_str(|buf| {\n-                    llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                    llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                 })\n             }\n \n@@ -193,7 +193,7 @@ pub mod write {\n                          .with_c_str(|t| {\n                 sess.opts.cg.target_cpu.as_slice().with_c_str(|cpu| {\n                     target_feature(sess).with_c_str(|features| {\n-                        llvm::llvm::LLVMRustCreateTargetMachine(\n+                        llvm::LLVMRustCreateTargetMachine(\n                             t, cpu, features,\n                             llvm::CodeModelDefault,\n                             reloc_model,\n@@ -212,26 +212,26 @@ pub mod write {\n             // does, and are by populated by LLVM's default PassManagerBuilder.\n             // Each manager has a different set of passes, but they also share\n             // some common passes.\n-            let fpm = llvm::llvm::LLVMCreateFunctionPassManagerForModule(llmod);\n-            let mpm = llvm::llvm::LLVMCreatePassManager();\n+            let fpm = llvm::LLVMCreateFunctionPassManagerForModule(llmod);\n+            let mpm = llvm::LLVMCreatePassManager();\n \n             // If we're verifying or linting, add them to the function pass\n             // manager.\n             let addpass = |pass: &str| {\n-                pass.as_slice().with_c_str(|s| llvm::llvm::LLVMRustAddPass(fpm, s))\n+                pass.as_slice().with_c_str(|s| llvm::LLVMRustAddPass(fpm, s))\n             };\n             if !sess.no_verify() { assert!(addpass(\"verify\")); }\n \n             if !sess.opts.cg.no_prepopulate_passes {\n-                llvm::llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n-                llvm::llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n+                llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n+                llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n                 populate_llvm_passes(fpm, mpm, llmod, opt_level,\n                                      trans.no_builtins);\n             }\n \n             for pass in sess.opts.cg.passes.iter() {\n                 pass.as_slice().with_c_str(|s| {\n-                    if !llvm::llvm::LLVMRustAddPass(mpm, s) {\n+                    if !llvm::LLVMRustAddPass(mpm, s) {\n                         sess.warn(format!(\"unknown pass {}, ignoring\",\n                                           *pass).as_slice());\n                     }\n@@ -240,13 +240,13 @@ pub mod write {\n \n             // Finally, run the actual optimization passes\n             time(sess.time_passes(), \"llvm function passes\", (), |()|\n-                 llvm::llvm::LLVMRustRunFunctionPassManager(fpm, llmod));\n+                 llvm::LLVMRustRunFunctionPassManager(fpm, llmod));\n             time(sess.time_passes(), \"llvm module passes\", (), |()|\n-                 llvm::llvm::LLVMRunPassManager(mpm, llmod));\n+                 llvm::LLVMRunPassManager(mpm, llmod));\n \n             // Deallocate managers that we're now done with\n-            llvm::llvm::LLVMDisposePassManager(fpm);\n-            llvm::llvm::LLVMDisposePassManager(mpm);\n+            llvm::LLVMDisposePassManager(fpm);\n+            llvm::LLVMDisposePassManager(mpm);\n \n             // Emit the bytecode if we're either saving our temporaries or\n             // emitting an rlib. Whenever an rlib is created, the bytecode is\n@@ -255,7 +255,7 @@ pub mod write {\n                (sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n                 sess.opts.output_types.contains(&OutputTypeExe)) {\n                 output.temp_path(OutputTypeBitcode).with_c_str(|buf| {\n-                    llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                    llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                 })\n             }\n \n@@ -265,7 +265,7 @@ pub mod write {\n \n                 if sess.opts.cg.save_temps {\n                     output.with_extension(\"lto.bc\").with_c_str(|buf| {\n-                        llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                        llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                     })\n                 }\n             }\n@@ -281,11 +281,11 @@ pub mod write {\n             fn with_codegen(tm: TargetMachineRef, llmod: ModuleRef,\n                             no_builtins: bool, f: |PassManagerRef|) {\n                 unsafe {\n-                    let cpm = llvm::llvm::LLVMCreatePassManager();\n-                    llvm::llvm::LLVMRustAddAnalysisPasses(tm, cpm, llmod);\n-                    llvm::llvm::LLVMRustAddLibraryInfo(cpm, llmod, no_builtins);\n+                    let cpm = llvm::LLVMCreatePassManager();\n+                    llvm::LLVMRustAddAnalysisPasses(tm, cpm, llmod);\n+                    llvm::LLVMRustAddLibraryInfo(cpm, llmod, no_builtins);\n                     f(cpm);\n-                    llvm::llvm::LLVMDisposePassManager(cpm);\n+                    llvm::LLVMDisposePassManager(cpm);\n                 }\n             }\n \n@@ -296,13 +296,13 @@ pub mod write {\n                 match *output_type {\n                     OutputTypeBitcode => {\n                         path.with_c_str(|buf| {\n-                            llvm::llvm::LLVMWriteBitcodeToFile(llmod, buf);\n+                            llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                         })\n                     }\n                     OutputTypeLlvmAssembly => {\n                         path.with_c_str(|output| {\n                             with_codegen(tm, llmod, trans.no_builtins, |cpm| {\n-                                llvm::llvm::LLVMRustPrintModule(cpm, llmod, output);\n+                                llvm::LLVMRustPrintModule(cpm, llmod, output);\n                             })\n                         })\n                     }\n@@ -355,11 +355,11 @@ pub mod write {\n                 }\n             });\n \n-            llvm::llvm::LLVMRustDisposeTargetMachine(tm);\n-            llvm::llvm::LLVMDisposeModule(trans.metadata_module);\n-            llvm::llvm::LLVMDisposeModule(llmod);\n-            llvm::llvm::LLVMContextDispose(llcx);\n-            if sess.time_llvm_passes() { llvm::llvm::LLVMRustPrintPassTimings(); }\n+            llvm::LLVMRustDisposeTargetMachine(tm);\n+            llvm::LLVMDisposeModule(trans.metadata_module);\n+            llvm::LLVMDisposeModule(llmod);\n+            llvm::LLVMContextDispose(llcx);\n+            if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n         }\n     }\n \n@@ -426,31 +426,31 @@ pub mod write {\n         }\n \n         INIT.doit(|| {\n-            llvm::llvm::LLVMInitializePasses();\n+            llvm::LLVMInitializePasses();\n \n             // Only initialize the platforms supported by Rust here, because\n             // using --llvm-root will have multiple platforms that rustllvm\n             // doesn't actually link to and it's pointless to put target info\n             // into the registry that Rust cannot generate machine code for.\n-            llvm::llvm::LLVMInitializeX86TargetInfo();\n-            llvm::llvm::LLVMInitializeX86Target();\n-            llvm::llvm::LLVMInitializeX86TargetMC();\n-            llvm::llvm::LLVMInitializeX86AsmPrinter();\n-            llvm::llvm::LLVMInitializeX86AsmParser();\n-\n-            llvm::llvm::LLVMInitializeARMTargetInfo();\n-            llvm::llvm::LLVMInitializeARMTarget();\n-            llvm::llvm::LLVMInitializeARMTargetMC();\n-            llvm::llvm::LLVMInitializeARMAsmPrinter();\n-            llvm::llvm::LLVMInitializeARMAsmParser();\n-\n-            llvm::llvm::LLVMInitializeMipsTargetInfo();\n-            llvm::llvm::LLVMInitializeMipsTarget();\n-            llvm::llvm::LLVMInitializeMipsTargetMC();\n-            llvm::llvm::LLVMInitializeMipsAsmPrinter();\n-            llvm::llvm::LLVMInitializeMipsAsmParser();\n-\n-            llvm::llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n+            llvm::LLVMInitializeX86TargetInfo();\n+            llvm::LLVMInitializeX86Target();\n+            llvm::LLVMInitializeX86TargetMC();\n+            llvm::LLVMInitializeX86AsmPrinter();\n+            llvm::LLVMInitializeX86AsmParser();\n+\n+            llvm::LLVMInitializeARMTargetInfo();\n+            llvm::LLVMInitializeARMTarget();\n+            llvm::LLVMInitializeARMTargetMC();\n+            llvm::LLVMInitializeARMAsmPrinter();\n+            llvm::LLVMInitializeARMAsmParser();\n+\n+            llvm::LLVMInitializeMipsTargetInfo();\n+            llvm::LLVMInitializeMipsTarget();\n+            llvm::LLVMInitializeMipsTargetMC();\n+            llvm::LLVMInitializeMipsAsmPrinter();\n+            llvm::LLVMInitializeMipsAsmParser();\n+\n+            llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n                                          llvm_args.as_ptr());\n         });\n     }\n@@ -463,32 +463,32 @@ pub mod write {\n         // Create the PassManagerBuilder for LLVM. We configure it with\n         // reasonable defaults and prepare it to actually populate the pass\n         // manager.\n-        let builder = llvm::llvm::LLVMPassManagerBuilderCreate();\n+        let builder = llvm::LLVMPassManagerBuilderCreate();\n         match opt {\n             llvm::CodeGenLevelNone => {\n                 // Don't add lifetime intrinsics at O0\n-                llvm::llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n+                llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n             }\n             llvm::CodeGenLevelLess => {\n-                llvm::llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n+                llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n             }\n             // numeric values copied from clang\n             llvm::CodeGenLevelDefault => {\n-                llvm::llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n+                llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n                                                                     225);\n             }\n             llvm::CodeGenLevelAggressive => {\n-                llvm::llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n+                llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder,\n                                                                     275);\n             }\n         }\n-        llvm::llvm::LLVMPassManagerBuilderSetOptLevel(builder, opt as c_uint);\n-        llvm::llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, no_builtins);\n+        llvm::LLVMPassManagerBuilderSetOptLevel(builder, opt as c_uint);\n+        llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, no_builtins);\n \n         // Use the builder to populate the function/module pass managers.\n-        llvm::llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(builder, fpm);\n-        llvm::llvm::LLVMPassManagerBuilderPopulateModulePassManager(builder, mpm);\n-        llvm::llvm::LLVMPassManagerBuilderDispose(builder);\n+        llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(builder, fpm);\n+        llvm::LLVMPassManagerBuilderPopulateModulePassManager(builder, mpm);\n+        llvm::LLVMPassManagerBuilderDispose(builder);\n     }\n }\n "}, {"sha": "6184ea4591f084ae5041f04c56372e6cd516d8f5", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -11,8 +11,9 @@\n use super::link;\n use driver::session;\n use driver::config;\n+use llvm;\n use llvm::archive_ro::ArchiveRO;\n-use llvm::{ModuleRef, TargetMachineRef, llvm, True, False};\n+use llvm::{ModuleRef, TargetMachineRef, True, False};\n use metadata::cstore;\n use util::common::time;\n "}, {"sha": "232a1252f596cf40e501225dc86c1eaac5ccd748", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -33,10 +33,10 @@ use syntax::parse::token::InternedString;\n use std::collections::{HashSet, HashMap};\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n-use lib::llvm::llvm;\n use std::cell::{RefCell};\n use std::fmt;\n \n+use llvm;\n \n pub struct Config {\n     pub os: abi::Os,"}, {"sha": "2149504a67ae72219803a7c2a7e9f9bb2100e8f6", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -15,8 +15,8 @@ use driver::{config, PpMode};\n use driver::{PpmFlowGraph, PpmExpanded, PpmExpandedIdentified, PpmTyped};\n use driver::{PpmIdentified};\n use front;\n-use lib::llvm::{ContextRef, ModuleRef};\n use lint;\n+use llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;\n use metadata::creader;\n use middle::cfg;"}, {"sha": "e850b71dda8cca9266632398d1234a1069977dd2", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -292,7 +292,7 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n     }\n \n     if cg_flags.contains(&\"passes=list\".to_string()) {\n-        unsafe { ::lib::llvm::llvm::LLVMRustPrintPasses(); }\n+        unsafe { ::llvm::LLVMRustPrintPasses(); }\n         return None;\n     }\n "}, {"sha": "e7d52ef3b3d6cb1b54cb124e8207bfe39ba47802", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -215,8 +215,9 @@\n use back::archive::{METADATA_FILENAME};\n use back::svh::Svh;\n use driver::session::Session;\n-use lib::llvm::{False, llvm, ObjectFile, mk_section_iter};\n-use lib::llvm::archive_ro::ArchiveRO;\n+use llvm;\n+use llvm::{False, ObjectFile, mk_section_iter};\n+use llvm::archive_ro::ArchiveRO;\n use metadata::cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n use metadata::decoder;\n use metadata::encoder;"}, {"sha": "958d2cd3774315fa4da1a53a44b2e2e7c00a6e86", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -190,7 +190,8 @@\n \n use back::abi;\n use driver::config::FullDebugInfo;\n-use lib::llvm::{llvm, ValueRef, BasicBlockRef};\n+use llvm;\n+use llvm::{ValueRef, BasicBlockRef};\n use middle::const_eval;\n use middle::def;\n use middle::check_match;"}, {"sha": "3ee61b1d6759668beaf3423c0fb3edfe1abc59df", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -48,7 +48,7 @@\n use libc::c_ulonglong;\n use std::rc::Rc;\n \n-use lib::llvm::{ValueRef, True, IntEQ, IntNE};\n+use llvm::{ValueRef, True, IntEQ, IntNE};\n use middle::subst;\n use middle::subst::Subst;\n use middle::trans::_match;"}, {"sha": "9760ef07a40e463aa4bb7b5d1aabee8a92a4c1ff", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -12,7 +12,7 @@\n # Translation of inline assembly.\n */\n \n-use lib;\n+use llvm;\n use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n@@ -99,8 +99,8 @@ pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)\n     };\n \n     let dialect = match ia.dialect {\n-        ast::AsmAtt   => lib::llvm::AD_ATT,\n-        ast::AsmIntel => lib::llvm::AD_Intel\n+        ast::AsmAtt   => llvm::AD_ATT,\n+        ast::AsmIntel => llvm::AD_Intel\n     };\n \n     let r = ia.asm.get().with_c_str(|a| {"}, {"sha": "6bcc9b9b745b7f5e438842de8b7bbcb9774c4a6e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -31,9 +31,9 @@ use driver::config;\n use driver::config::{NoDebugInfo, FullDebugInfo};\n use driver::session::Session;\n use driver::driver::{CrateAnalysis, CrateTranslation};\n-use lib::llvm::{ModuleRef, ValueRef, BasicBlockRef};\n-use lib::llvm::{llvm, Vector};\n-use lib;\n+use llvm;\n+use llvm::{ModuleRef, ValueRef, BasicBlockRef};\n+use llvm::{Vector};\n use metadata::{csearch, encoder, loader};\n use lint;\n use middle::astencode;\n@@ -172,7 +172,7 @@ impl<'a> Drop for StatRecorder<'a> {\n }\n \n // only use this for foreign function ABIs and glue, use `decl_rust_fn` for Rust functions\n-fn decl_fn(ccx: &CrateContext, name: &str, cc: lib::llvm::CallConv,\n+fn decl_fn(ccx: &CrateContext, name: &str, cc: llvm::CallConv,\n            ty: Type, output: ty::t) -> ValueRef {\n \n     let llfn: ValueRef = name.with_c_str(|buf| {\n@@ -186,16 +186,16 @@ fn decl_fn(ccx: &CrateContext, name: &str, cc: lib::llvm::CallConv,\n         ty::ty_bot => {\n             unsafe {\n                 llvm::LLVMAddFunctionAttribute(llfn,\n-                                               lib::llvm::FunctionIndex as c_uint,\n-                                               lib::llvm::NoReturnAttribute as uint64_t)\n+                                               llvm::FunctionIndex as c_uint,\n+                                               llvm::NoReturnAttribute as uint64_t)\n             }\n         }\n         _ => {}\n     }\n \n-    lib::llvm::SetFunctionCallConv(llfn, cc);\n+    llvm::SetFunctionCallConv(llfn, cc);\n     // Function addresses in Rust are never significant, allowing functions to be merged.\n-    lib::llvm::SetUnnamedAddr(llfn, true);\n+    llvm::SetUnnamedAddr(llfn, true);\n \n     if ccx.is_split_stack_supported() {\n         set_split_stack(llfn);\n@@ -209,14 +209,14 @@ pub fn decl_cdecl_fn(ccx: &CrateContext,\n                      name: &str,\n                      ty: Type,\n                      output: ty::t) -> ValueRef {\n-    decl_fn(ccx, name, lib::llvm::CCallConv, ty, output)\n+    decl_fn(ccx, name, llvm::CCallConv, ty, output)\n }\n \n // only use this for foreign function ABIs and glue, use `get_extern_rust_fn` for Rust functions\n pub fn get_extern_fn(ccx: &CrateContext,\n                      externs: &mut ExternMap,\n                      name: &str,\n-                     cc: lib::llvm::CallConv,\n+                     cc: llvm::CallConv,\n                      ty: Type,\n                      output: ty::t)\n                      -> ValueRef {\n@@ -253,7 +253,7 @@ pub fn decl_rust_fn(ccx: &CrateContext, fn_ty: ty::t, name: &str) -> ValueRef {\n     };\n \n     let llfty = type_of_rust_fn(ccx, has_env, inputs.as_slice(), output);\n-    let llfn = decl_fn(ccx, name, lib::llvm::CCallConv, llfty, output);\n+    let llfn = decl_fn(ccx, name, llvm::CCallConv, llfty, output);\n     let attrs = get_fn_llvm_attributes(ccx, fn_ty);\n     for &(idx, attr) in attrs.iter() {\n         unsafe {\n@@ -266,7 +266,7 @@ pub fn decl_rust_fn(ccx: &CrateContext, fn_ty: ty::t, name: &str) -> ValueRef {\n \n pub fn decl_internal_rust_fn(ccx: &CrateContext, fn_ty: ty::t, name: &str) -> ValueRef {\n     let llfn = decl_rust_fn(ccx, fn_ty, name);\n-    lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n+    llvm::SetLinkage(llfn, llvm::InternalLinkage);\n     llfn\n }\n \n@@ -375,26 +375,26 @@ pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> Rc<tydesc_info> {\n \n #[allow(dead_code)] // useful\n pub fn set_optimize_for_size(f: ValueRef) {\n-    lib::llvm::SetFunctionAttribute(f, lib::llvm::OptimizeForSizeAttribute)\n+    llvm::SetFunctionAttribute(f, llvm::OptimizeForSizeAttribute)\n }\n \n pub fn set_no_inline(f: ValueRef) {\n-    lib::llvm::SetFunctionAttribute(f, lib::llvm::NoInlineAttribute)\n+    llvm::SetFunctionAttribute(f, llvm::NoInlineAttribute)\n }\n \n #[allow(dead_code)] // useful\n pub fn set_no_unwind(f: ValueRef) {\n-    lib::llvm::SetFunctionAttribute(f, lib::llvm::NoUnwindAttribute)\n+    llvm::SetFunctionAttribute(f, llvm::NoUnwindAttribute)\n }\n \n // Tell LLVM to emit the information necessary to unwind the stack for the\n // function f.\n pub fn set_uwtable(f: ValueRef) {\n-    lib::llvm::SetFunctionAttribute(f, lib::llvm::UWTableAttribute)\n+    llvm::SetFunctionAttribute(f, llvm::UWTableAttribute)\n }\n \n pub fn set_inline_hint(f: ValueRef) {\n-    lib::llvm::SetFunctionAttribute(f, lib::llvm::InlineHintAttribute)\n+    llvm::SetFunctionAttribute(f, llvm::InlineHintAttribute)\n }\n \n pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n@@ -415,25 +415,25 @@ pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n     if contains_name(attrs, \"cold\") {\n         unsafe {\n             llvm::LLVMAddFunctionAttribute(llfn,\n-                                           lib::llvm::FunctionIndex as c_uint,\n-                                           lib::llvm::ColdAttribute as uint64_t)\n+                                           llvm::FunctionIndex as c_uint,\n+                                           llvm::ColdAttribute as uint64_t)\n         }\n     }\n }\n \n pub fn set_always_inline(f: ValueRef) {\n-    lib::llvm::SetFunctionAttribute(f, lib::llvm::AlwaysInlineAttribute)\n+    llvm::SetFunctionAttribute(f, llvm::AlwaysInlineAttribute)\n }\n \n pub fn set_split_stack(f: ValueRef) {\n     \"split-stack\".with_c_str(|buf| {\n-        unsafe { llvm::LLVMAddFunctionAttrString(f, lib::llvm::FunctionIndex as c_uint, buf); }\n+        unsafe { llvm::LLVMAddFunctionAttrString(f, llvm::FunctionIndex as c_uint, buf); }\n     })\n }\n \n pub fn unset_split_stack(f: ValueRef) {\n     \"split-stack\".with_c_str(|buf| {\n-        unsafe { llvm::LLVMRemoveFunctionAttrString(f, lib::llvm::FunctionIndex as c_uint, buf); }\n+        unsafe { llvm::LLVMRemoveFunctionAttrString(f, llvm::FunctionIndex as c_uint, buf); }\n     })\n }\n \n@@ -479,7 +479,7 @@ pub fn get_res_dtor(ccx: &CrateContext,\n         get_extern_fn(ccx,\n                       &mut *ccx.externs.borrow_mut(),\n                       name.as_slice(),\n-                      lib::llvm::CCallConv,\n+                      llvm::CCallConv,\n                       llty,\n                       dtor_ty)\n     }\n@@ -546,36 +546,36 @@ pub fn compare_scalar_values<'a>(\n       }\n       floating_point => {\n         let cmp = match op {\n-          ast::BiEq => lib::llvm::RealOEQ,\n-          ast::BiNe => lib::llvm::RealUNE,\n-          ast::BiLt => lib::llvm::RealOLT,\n-          ast::BiLe => lib::llvm::RealOLE,\n-          ast::BiGt => lib::llvm::RealOGT,\n-          ast::BiGe => lib::llvm::RealOGE,\n+          ast::BiEq => llvm::RealOEQ,\n+          ast::BiNe => llvm::RealUNE,\n+          ast::BiLt => llvm::RealOLT,\n+          ast::BiLe => llvm::RealOLE,\n+          ast::BiGt => llvm::RealOGT,\n+          ast::BiGe => llvm::RealOGE,\n           _ => die(cx)\n         };\n         return FCmp(cx, cmp, lhs, rhs);\n       }\n       signed_int => {\n         let cmp = match op {\n-          ast::BiEq => lib::llvm::IntEQ,\n-          ast::BiNe => lib::llvm::IntNE,\n-          ast::BiLt => lib::llvm::IntSLT,\n-          ast::BiLe => lib::llvm::IntSLE,\n-          ast::BiGt => lib::llvm::IntSGT,\n-          ast::BiGe => lib::llvm::IntSGE,\n+          ast::BiEq => llvm::IntEQ,\n+          ast::BiNe => llvm::IntNE,\n+          ast::BiLt => llvm::IntSLT,\n+          ast::BiLe => llvm::IntSLE,\n+          ast::BiGt => llvm::IntSGT,\n+          ast::BiGe => llvm::IntSGE,\n           _ => die(cx)\n         };\n         return ICmp(cx, cmp, lhs, rhs);\n       }\n       unsigned_int => {\n         let cmp = match op {\n-          ast::BiEq => lib::llvm::IntEQ,\n-          ast::BiNe => lib::llvm::IntNE,\n-          ast::BiLt => lib::llvm::IntULT,\n-          ast::BiLe => lib::llvm::IntULE,\n-          ast::BiGt => lib::llvm::IntUGT,\n-          ast::BiGe => lib::llvm::IntUGE,\n+          ast::BiEq => llvm::IntEQ,\n+          ast::BiNe => llvm::IntNE,\n+          ast::BiLt => llvm::IntULT,\n+          ast::BiLe => llvm::IntULE,\n+          ast::BiGt => llvm::IntUGT,\n+          ast::BiGe => llvm::IntUGE,\n           _ => die(cx)\n         };\n         return ICmp(cx, cmp, lhs, rhs);\n@@ -602,12 +602,12 @@ pub fn compare_simd_types(\n         },\n         ty::ty_uint(_) | ty::ty_int(_) => {\n             let cmp = match op {\n-                ast::BiEq => lib::llvm::IntEQ,\n-                ast::BiNe => lib::llvm::IntNE,\n-                ast::BiLt => lib::llvm::IntSLT,\n-                ast::BiLe => lib::llvm::IntSLE,\n-                ast::BiGt => lib::llvm::IntSGT,\n-                ast::BiGe => lib::llvm::IntSGE,\n+                ast::BiEq => llvm::IntEQ,\n+                ast::BiNe => llvm::IntNE,\n+                ast::BiLt => llvm::IntSLT,\n+                ast::BiLe => llvm::IntSLE,\n+                ast::BiGt => llvm::IntSGT,\n+                ast::BiGe => llvm::IntSGE,\n                 _ => cx.sess().bug(\"compare_simd_types: must be a comparison operator\"),\n             };\n             let return_ty = Type::vector(&type_of(cx.ccx(), t), size as u64);\n@@ -801,11 +801,11 @@ pub fn fail_if_zero_or_overflows<'a>(\n     let (is_zero, is_signed) = match ty::get(rhs_t).sty {\n         ty::ty_int(t) => {\n             let zero = C_integral(Type::int_from_ty(cx.ccx(), t), 0u64, false);\n-            (ICmp(cx, lib::llvm::IntEQ, rhs, zero), true)\n+            (ICmp(cx, llvm::IntEQ, rhs, zero), true)\n         }\n         ty::ty_uint(t) => {\n             let zero = C_integral(Type::uint_from_ty(cx.ccx(), t), 0u64, false);\n-            (ICmp(cx, lib::llvm::IntEQ, rhs, zero), false)\n+            (ICmp(cx, llvm::IntEQ, rhs, zero), false)\n         }\n         _ => {\n             cx.sess().bug(format!(\"fail-if-zero on unexpected type: {}\",\n@@ -841,10 +841,10 @@ pub fn fail_if_zero_or_overflows<'a>(\n             }\n             _ => unreachable!(),\n         };\n-        let minus_one = ICmp(bcx, lib::llvm::IntEQ, rhs,\n+        let minus_one = ICmp(bcx, llvm::IntEQ, rhs,\n                              C_integral(llty, -1, false));\n         with_cond(bcx, minus_one, |bcx| {\n-            let is_min = ICmp(bcx, lib::llvm::IntEQ, lhs,\n+            let is_min = ICmp(bcx, llvm::IntEQ, lhs,\n                               C_integral(llty, min, true));\n             with_cond(bcx, is_min, |bcx| {\n                 controlflow::trans_fail(bcx, span,\n@@ -975,11 +975,11 @@ pub fn load_ty(cx: &Block, ptr: ValueRef, t: ty::t) -> ValueRef {\n     if type_is_zero_size(cx.ccx(), t) {\n         C_undef(type_of::type_of(cx.ccx(), t))\n     } else if ty::type_is_bool(t) {\n-        Trunc(cx, LoadRangeAssert(cx, ptr, 0, 2, lib::llvm::False), Type::i1(cx.ccx()))\n+        Trunc(cx, LoadRangeAssert(cx, ptr, 0, 2, llvm::False), Type::i1(cx.ccx()))\n     } else if ty::type_is_char(t) {\n         // a char is a unicode codepoint, and so takes values from 0\n         // to 0x10FFFF inclusive only.\n-        LoadRangeAssert(cx, ptr, 0, 0x10FFFF + 1, lib::llvm::False)\n+        LoadRangeAssert(cx, ptr, 0, 0x10FFFF + 1, llvm::False)\n     } else {\n         Load(cx, ptr)\n     }\n@@ -1755,7 +1755,7 @@ fn finish_register_fn(ccx: &CrateContext, sp: Span, sym: String, node_id: ast::N\n     ccx.item_symbols.borrow_mut().insert(node_id, sym);\n \n     if !ccx.reachable.contains(&node_id) {\n-        lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n+        llvm::SetLinkage(llfn, llvm::InternalLinkage);\n     }\n \n     // The stack exhaustion lang item shouldn't have a split stack because\n@@ -1764,10 +1764,10 @@ fn finish_register_fn(ccx: &CrateContext, sp: Span, sym: String, node_id: ast::N\n     let def = ast_util::local_def(node_id);\n     if ccx.tcx.lang_items.stack_exhausted() == Some(def) {\n         unset_split_stack(llfn);\n-        lib::llvm::SetLinkage(llfn, lib::llvm::ExternalLinkage);\n+        llvm::SetLinkage(llfn, llvm::ExternalLinkage);\n     }\n     if ccx.tcx.lang_items.eh_personality() == Some(def) {\n-        lib::llvm::SetLinkage(llfn, lib::llvm::ExternalLinkage);\n+        llvm::SetLinkage(llfn, llvm::ExternalLinkage);\n     }\n \n \n@@ -1814,13 +1814,13 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n     // implications directly to the call instruction. Right now,\n     // the only attribute we need to worry about is `sret`.\n     if type_of::return_uses_outptr(ccx, ret_ty) {\n-        attrs.push((1, lib::llvm::StructRetAttribute as u64));\n+        attrs.push((1, llvm::StructRetAttribute as u64));\n \n         // The outptr can be noalias and nocapture because it's entirely\n         // invisible to the program. We can also mark it as nonnull\n-        attrs.push((1, lib::llvm::NoAliasAttribute as u64));\n-        attrs.push((1, lib::llvm::NoCaptureAttribute as u64));\n-        attrs.push((1, lib::llvm::NonNullAttribute as u64));\n+        attrs.push((1, llvm::NoAliasAttribute as u64));\n+        attrs.push((1, llvm::NoCaptureAttribute as u64));\n+        attrs.push((1, llvm::NonNullAttribute as u64));\n \n         // Add one more since there's an outptr\n         first_arg_offset += 1;\n@@ -1834,7 +1834,7 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n                 ty::ty_str | ty::ty_vec(..) | ty::ty_trait(..) => true, _ => false\n             } => {}\n             ty::ty_uniq(_) => {\n-                attrs.push((lib::llvm::ReturnIndex as uint, lib::llvm::NoAliasAttribute as u64));\n+                attrs.push((llvm::ReturnIndex as uint, llvm::NoAliasAttribute as u64));\n             }\n             _ => {}\n         }\n@@ -1847,14 +1847,14 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n                 ty::ty_str | ty::ty_vec(..) | ty::ty_trait(..) => true, _ => false\n             } => {}\n             ty::ty_uniq(_) | ty::ty_rptr(_, _) => {\n-                attrs.push((lib::llvm::ReturnIndex as uint, lib::llvm::NonNullAttribute as u64));\n+                attrs.push((llvm::ReturnIndex as uint, llvm::NonNullAttribute as u64));\n             }\n             _ => {}\n         }\n \n         match ty::get(ret_ty).sty {\n             ty::ty_bool => {\n-                attrs.push((lib::llvm::ReturnIndex as uint, lib::llvm::ZExtAttribute as u64));\n+                attrs.push((llvm::ReturnIndex as uint, llvm::ZExtAttribute as u64));\n             }\n             _ => {}\n         }\n@@ -1867,38 +1867,38 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n                 // For non-immediate arguments the callee gets its own copy of\n                 // the value on the stack, so there are no aliases. It's also\n                 // program-invisible so can't possibly capture\n-                attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n-                attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n-                attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n+                attrs.push((idx, llvm::NoAliasAttribute as u64));\n+                attrs.push((idx, llvm::NoCaptureAttribute as u64));\n+                attrs.push((idx, llvm::NonNullAttribute as u64));\n             }\n             ty::ty_bool => {\n-                attrs.push((idx, lib::llvm::ZExtAttribute as u64));\n+                attrs.push((idx, llvm::ZExtAttribute as u64));\n             }\n             // `~` pointer parameters never alias because ownership is transferred\n             ty::ty_uniq(_) => {\n-                attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n-                attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n+                attrs.push((idx, llvm::NoAliasAttribute as u64));\n+                attrs.push((idx, llvm::NonNullAttribute as u64));\n             }\n             // `&mut` pointer parameters never alias other parameters, or mutable global data\n             ty::ty_rptr(b, mt) if mt.mutbl == ast::MutMutable => {\n-                attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n-                attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n+                attrs.push((idx, llvm::NoAliasAttribute as u64));\n+                attrs.push((idx, llvm::NonNullAttribute as u64));\n                 match b {\n                     ReLateBound(_, BrAnon(_)) => {\n-                        attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n+                        attrs.push((idx, llvm::NoCaptureAttribute as u64));\n                     }\n                     _ => {}\n                 }\n             }\n             // When a reference in an argument has no named lifetime, it's impossible for that\n             // reference to escape this function (returned or stored beyond the call by a closure).\n             ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n-                attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n-                attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n+                attrs.push((idx, llvm::NoCaptureAttribute as u64));\n+                attrs.push((idx, llvm::NonNullAttribute as u64));\n             }\n             // & pointer parameters are never null\n             ty::ty_rptr(_, _) => {\n-                attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n+                attrs.push((idx, llvm::NonNullAttribute as u64));\n             }\n             _ => ()\n         }\n@@ -1912,7 +1912,7 @@ pub fn register_fn_llvmty(ccx: &CrateContext,\n                           sp: Span,\n                           sym: String,\n                           node_id: ast::NodeId,\n-                          cc: lib::llvm::CallConv,\n+                          cc: llvm::CallConv,\n                           llfty: Type) -> ValueRef {\n     debug!(\"register_fn_llvmty id={} sym={}\", node_id, sym);\n \n@@ -2073,15 +2073,15 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                         });\n \n                         if !ccx.reachable.contains(&id) {\n-                            lib::llvm::SetLinkage(g, lib::llvm::InternalLinkage);\n+                            llvm::SetLinkage(g, llvm::InternalLinkage);\n                         }\n \n                         // Apply the `unnamed_addr` attribute if\n                         // requested\n                         if !ast_util::static_has_significant_address(\n                                 mutbl,\n                                 i.attrs.as_slice()) {\n-                            lib::llvm::SetUnnamedAddr(g, true);\n+                            llvm::SetUnnamedAddr(g, true);\n \n                             // This is a curious case where we must make\n                             // all of these statics inlineable. If a\n@@ -2103,7 +2103,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n                         if attr::contains_name(i.attrs.as_slice(),\n                                                \"thread_local\") {\n-                            lib::llvm::set_thread_local(g, true);\n+                            llvm::set_thread_local(g, true);\n                         }\n \n                         if !inlineable {\n@@ -2241,7 +2241,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n     // linkage b/c that doesn't quite make sense. Otherwise items can\n     // have internal linkage if they're not reachable.\n     if !foreign && !ccx.reachable.contains(&id) {\n-        lib::llvm::SetLinkage(val, lib::llvm::InternalLinkage);\n+        llvm::SetLinkage(val, llvm::InternalLinkage);\n     }\n \n     ccx.item_vals.borrow_mut().insert(id, val);"}, {"sha": "13b8ed4df6b82a9b4b933a8ce2f5c6ce11803314", "filename": "src/librustc/middle/trans/basic_block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use lib::llvm::{llvm, BasicBlockRef};\n+use llvm;\n+use llvm::{BasicBlockRef};\n use middle::trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n "}, {"sha": "995ad16b59f5b303c159b15af5f34329f1d4773c", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -11,11 +11,10 @@\n #![allow(dead_code)] // FFI wrappers\n #![allow(non_snake_case_functions)]\n \n-use lib::llvm::llvm;\n-use lib::llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect};\n-use lib::llvm::{Opcode, IntPredicate, RealPredicate};\n-use lib::llvm::{ValueRef, BasicBlockRef};\n-use lib;\n+use llvm;\n+use llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect};\n+use llvm::{Opcode, IntPredicate, RealPredicate};\n+use llvm::{ValueRef, BasicBlockRef};\n use middle::trans::common::*;\n use syntax::codemap::Span;\n \n@@ -97,7 +96,7 @@ pub fn Switch(cx: &Block, v: ValueRef, else_: BasicBlockRef, num_cases: uint)\n \n pub fn AddCase(s: ValueRef, on_val: ValueRef, dest: BasicBlockRef) {\n     unsafe {\n-        if llvm::LLVMIsUndef(s) == lib::llvm::True { return; }\n+        if llvm::LLVMIsUndef(s) == llvm::True { return; }\n         llvm::LLVMAddCase(s, on_val, dest);\n     }\n }\n@@ -350,7 +349,7 @@ pub fn Load(cx: &Block, pointer_val: ValueRef) -> ValueRef {\n         let ccx = cx.fcx.ccx;\n         if cx.unreachable.get() {\n             let ty = val_ty(pointer_val);\n-            let eltty = if ty.kind() == lib::llvm::Array {\n+            let eltty = if ty.kind() == llvm::Array {\n                 ty.element_type()\n             } else {\n                 ccx.int_type\n@@ -382,11 +381,11 @@ pub fn AtomicLoad(cx: &Block, pointer_val: ValueRef, order: AtomicOrdering) -> V\n \n \n pub fn LoadRangeAssert(cx: &Block, pointer_val: ValueRef, lo: c_ulonglong,\n-                       hi: c_ulonglong, signed: lib::llvm::Bool) -> ValueRef {\n+                       hi: c_ulonglong, signed: llvm::Bool) -> ValueRef {\n     if cx.unreachable.get() {\n         let ccx = cx.fcx.ccx;\n         let ty = val_ty(pointer_val);\n-        let eltty = if ty.kind() == lib::llvm::Array {\n+        let eltty = if ty.kind() == llvm::Array {\n             ty.element_type()\n         } else {\n             ccx.int_type\n@@ -647,7 +646,7 @@ pub fn Phi(cx: &Block, ty: Type, vals: &[ValueRef],\n \n pub fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n     unsafe {\n-        if llvm::LLVMIsUndef(phi) == lib::llvm::True { return; }\n+        if llvm::LLVMIsUndef(phi) == llvm::True { return; }\n         llvm::LLVMAddIncoming(phi, &val, &bb, 1 as c_uint);\n     }\n }\n@@ -656,7 +655,7 @@ pub fn _UndefReturn(cx: &Block, fn_: ValueRef) -> ValueRef {\n     unsafe {\n         let ccx = cx.fcx.ccx;\n         let ty = val_ty(fn_);\n-        let retty = if ty.kind() == lib::llvm::Integer {\n+        let retty = if ty.kind() == llvm::Integer {\n             ty.return_type()\n         } else {\n             ccx.int_type"}, {"sha": "32e91c337f0862ff8f7be65f8995a82f24ca9e6a", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,11 +10,10 @@\n \n #![allow(dead_code)] // FFI wrappers\n \n-use lib;\n-use lib::llvm::llvm;\n-use lib::llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect};\n-use lib::llvm::{Opcode, IntPredicate, RealPredicate, False};\n-use lib::llvm::{ValueRef, BasicBlockRef, BuilderRef, ModuleRef};\n+use llvm;\n+use llvm::{CallConv, AtomicBinOp, AtomicOrdering, AsmDialect};\n+use llvm::{Opcode, IntPredicate, RealPredicate, False};\n+use llvm::{ValueRef, BasicBlockRef, BuilderRef, ModuleRef};\n use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::machine::llalign_of_pref;\n@@ -460,7 +459,7 @@ impl<'a> Builder<'a> {\n         self.count_insn(\"load.volatile\");\n         unsafe {\n             let insn = llvm::LLVMBuildLoad(self.llbuilder, ptr, noname());\n-            llvm::LLVMSetVolatile(insn, lib::llvm::True);\n+            llvm::LLVMSetVolatile(insn, llvm::True);\n             insn\n         }\n     }\n@@ -477,7 +476,7 @@ impl<'a> Builder<'a> {\n \n \n     pub fn load_range_assert(&self, ptr: ValueRef, lo: c_ulonglong,\n-                           hi: c_ulonglong, signed: lib::llvm::Bool) -> ValueRef {\n+                           hi: c_ulonglong, signed: llvm::Bool) -> ValueRef {\n         let value = self.load(ptr);\n \n         unsafe {\n@@ -487,7 +486,7 @@ impl<'a> Builder<'a> {\n \n             let v = [min, max];\n \n-            llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n+            llvm::LLVMSetMetadata(value, llvm::MD_range as c_uint,\n                                   llvm::LLVMMDNodeInContext(self.ccx.llcx,\n                                                             v.as_ptr(), v.len() as c_uint));\n         }\n@@ -514,7 +513,7 @@ impl<'a> Builder<'a> {\n         self.count_insn(\"store.volatile\");\n         unsafe {\n             let insn = llvm::LLVMBuildStore(self.llbuilder, val, ptr);\n-            llvm::LLVMSetVolatile(insn, lib::llvm::True);\n+            llvm::LLVMSetVolatile(insn, llvm::True);\n         }\n     }\n \n@@ -788,10 +787,10 @@ impl<'a> Builder<'a> {\n                          dia: AsmDialect) -> ValueRef {\n         self.count_insn(\"inlineasm\");\n \n-        let volatile = if volatile { lib::llvm::True }\n-                       else        { lib::llvm::False };\n-        let alignstack = if alignstack { lib::llvm::True }\n-                         else          { lib::llvm::False };\n+        let volatile = if volatile { llvm::True }\n+                       else        { llvm::False };\n+        let alignstack = if alignstack { llvm::True }\n+                         else          { llvm::False };\n \n         let argtys = inputs.iter().map(|v| {\n             debug!(\"Asm Input Type: {:?}\", self.ccx.tn.val_to_string(*v));\n@@ -832,7 +831,7 @@ impl<'a> Builder<'a> {\n                           conv: CallConv, attributes: &[(uint, u64)]) -> ValueRef {\n         self.count_insn(\"callwithconv\");\n         let v = self.call(llfn, args, attributes);\n-        lib::llvm::SetInstructionCallConv(v, conv);\n+        llvm::SetInstructionCallConv(v, conv);\n         v\n     }\n \n@@ -945,7 +944,7 @@ impl<'a> Builder<'a> {\n     pub fn set_cleanup(&self, landing_pad: ValueRef) {\n         self.count_insn(\"setcleanup\");\n         unsafe {\n-            llvm::LLVMSetCleanup(landing_pad, lib::llvm::True);\n+            llvm::LLVMSetCleanup(landing_pad, llvm::True);\n         }\n     }\n "}, {"sha": "0a10fb8b1720830e9ac54b9efd52e151075fc236", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use lib::llvm::Attribute;\n+use llvm::Attribute;\n use std::option;\n use middle::trans::context::CrateContext;\n use middle::trans::cabi_x86;"}, {"sha": "0e2bf2104fd55923bb61f002e59b03e855261489", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,8 +10,9 @@\n \n #![allow(non_uppercase_pattern_statics)]\n \n-use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n-use lib::llvm::{StructRetAttribute, ZExtAttribute};\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{StructRetAttribute, ZExtAttribute};\n use middle::trans::cabi::{FnType, ArgType};\n use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;"}, {"sha": "d07090686874f9e8151d33d5fe2ac83f37b203e4", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -12,8 +12,9 @@\n \n use libc::c_uint;\n use std::cmp;\n-use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n-use lib::llvm::{StructRetAttribute, ZExtAttribute};\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{StructRetAttribute, ZExtAttribute};\n use middle::trans::context::CrateContext;\n use middle::trans::cabi::*;\n use middle::trans::type_::Type;"}, {"sha": "6bb3d992f50c627a4745666c2072b4b729ff4694", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,7 +10,7 @@\n \n \n use syntax::abi::{OsWin32, OsMacos, OsiOS};\n-use lib::llvm::*;\n+use llvm::*;\n use super::cabi::*;\n use super::common::*;\n use super::machine::*;"}, {"sha": "493aca0ddf0c415e9d8e45a4738bd859b513ed4c", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -13,9 +13,10 @@\n \n #![allow(non_uppercase_pattern_statics)]\n \n-use lib::llvm::{llvm, Integer, Pointer, Float, Double};\n-use lib::llvm::{Struct, Array, Attribute};\n-use lib::llvm::{StructRetAttribute, ByValAttribute, ZExtAttribute};\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double};\n+use llvm::{Struct, Array, Attribute};\n+use llvm::{StructRetAttribute, ByValAttribute, ZExtAttribute};\n use middle::trans::cabi::*;\n use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;"}, {"sha": "db2d17c85db5f64b834d0dde519ec48def0be54d", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -19,8 +19,8 @@\n use arena::TypedArena;\n use back::abi;\n use back::link;\n-use lib::llvm::ValueRef;\n-use lib::llvm::llvm;\n+use llvm;\n+use llvm::ValueRef;\n use metadata::csearch;\n use middle::def;\n use middle::subst;"}, {"sha": "6e40445d8f9038b0a7096f685cb21f9d485a2620", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -13,7 +13,7 @@\n  * drop glue. See discussion in `doc.rs` for a high-level summary.\n  */\n \n-use lib::llvm::{BasicBlockRef, ValueRef};\n+use llvm::{BasicBlockRef, ValueRef};\n use middle::trans::base;\n use middle::trans::build;\n use middle::trans::callee;"}, {"sha": "f2400f6bfefe35c6e7470151cb91d29e035a54fe", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -12,7 +12,7 @@\n use back::abi;\n use back::link::mangle_internal_name_by_path_and_seq;\n use driver::config::FullDebugInfo;\n-use lib::llvm::ValueRef;\n+use llvm::ValueRef;\n use middle::def;\n use middle::freevars;\n use middle::lang_items::ClosureExchangeMallocFnLangItem;"}, {"sha": "945185f59534208593556a85b663f67dd119ab6d", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -13,10 +13,9 @@\n //! Code that is useful in various trans modules.\n \n use driver::session::Session;\n-use lib::llvm::{ValueRef, BasicBlockRef, BuilderRef};\n-use lib::llvm::{True, False, Bool};\n-use lib::llvm::llvm;\n-use lib;\n+use llvm;\n+use llvm::{ValueRef, BasicBlockRef, BuilderRef};\n+use llvm::{True, False, Bool};\n use middle::def;\n use middle::lang_items::LangItem;\n use middle::subst;\n@@ -570,7 +569,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n         });\n         llvm::LLVMSetInitializer(g, sc);\n         llvm::LLVMSetGlobalConstant(g, True);\n-        lib::llvm::SetLinkage(g, lib::llvm::InternalLinkage);\n+        llvm::SetLinkage(g, llvm::InternalLinkage);\n \n         cx.const_cstr_cache.borrow_mut().insert(s, g);\n         g\n@@ -599,7 +598,7 @@ pub fn C_binary_slice(cx: &CrateContext, data: &[u8]) -> ValueRef {\n         });\n         llvm::LLVMSetInitializer(g, lldata);\n         llvm::LLVMSetGlobalConstant(g, True);\n-        lib::llvm::SetLinkage(g, lib::llvm::InternalLinkage);\n+        llvm::SetLinkage(g, llvm::InternalLinkage);\n \n         let cs = llvm::LLVMConstPointerCast(g, Type::i8p(cx).to_ref());\n         C_struct(cx, [cs, C_uint(cx, len)], false)"}, {"sha": "2fd468d8fda8fbe248c90b694fa146dc60fe4244", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,9 +10,10 @@\n \n \n use back::abi;\n-use lib::llvm::{llvm, ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, Bool, True,\n+use llvm;\n+use llvm::{ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, Bool, True,\n     False};\n-use lib::llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT, IntSLE,\n+use llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT, IntSLE,\n     RealOEQ, RealOGT, RealOGE, RealOLT, RealOLE, RealONE};\n \n use metadata::csearch;"}, {"sha": "8c55f33a0d46dd19b9c912c6f84010263704c6c1", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,9 +10,10 @@\n \n use driver::config::NoDebugInfo;\n use driver::session::Session;\n-use lib::llvm::{ContextRef, ModuleRef, ValueRef};\n-use lib::llvm::{llvm, TargetData};\n-use lib::llvm::mk_target_data;\n+use llvm;\n+use llvm::{ContextRef, ModuleRef, ValueRef};\n+use llvm::{TargetData};\n+use llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::resolve;\n use middle::trans::adt;"}, {"sha": "845684bb037a935f55f7d2abbf0bfe119621431f", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use lib::llvm::*;\n+use llvm::*;\n use driver::config::FullDebugInfo;\n use middle::def;\n use middle::lang_items::{FailFnLangItem, FailBoundsCheckFnLangItem};"}, {"sha": "d4b2b04745b58903689f66b2ae8a83000ff6e6fd", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -13,7 +13,7 @@\n  * Datums are and how they are intended to be used.\n  */\n \n-use lib::llvm::ValueRef;\n+use llvm::ValueRef;\n use middle::trans::base::*;\n use middle::trans::common::*;\n use middle::trans::cleanup;"}, {"sha": "6e81c10c4a0a91a80e5a871b742c36f1e7adcb25", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -180,9 +180,9 @@ seen before (which is most of the time). */\n \n use driver::config;\n use driver::config::{FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n-use lib::llvm::llvm;\n-use lib::llvm::{ModuleRef, ContextRef, ValueRef};\n-use lib::llvm::debuginfo::*;\n+use llvm;\n+use llvm::{ModuleRef, ContextRef, ValueRef};\n+use llvm::debuginfo::*;\n use metadata::csearch;\n use middle::subst;\n use middle::trans::adt;"}, {"sha": "60bf80191cb1057386a73b7d84f7b87a189ee877", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -34,8 +34,8 @@\n #![allow(non_camel_case_types)]\n \n use back::abi;\n-use lib::llvm::{ValueRef, llvm};\n-use lib;\n+use llvm;\n+use llvm::{ValueRef};\n use metadata::csearch;\n use middle::def;\n use middle::lang_items::MallocFnLangItem;\n@@ -548,7 +548,7 @@ fn trans_index<'a>(bcx: &'a Block<'a>,\n             debug!(\"trans_index: base {}\", bcx.val_to_string(base));\n             debug!(\"trans_index: len {}\", bcx.val_to_string(len));\n \n-            let bounds_check = ICmp(bcx, lib::llvm::IntUGE, ix_val, len);\n+            let bounds_check = ICmp(bcx, llvm::IntUGE, ix_val, len);\n             let expect = ccx.get_intrinsic(&(\"llvm.expect.i1\"));\n             let expected = Call(bcx,\n                                 expect,"}, {"sha": "56fbccefede5ea05f2c81ff4c73f69383193ab4c", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,9 +10,8 @@\n \n \n use back::{link};\n-use lib::llvm::llvm;\n-use lib::llvm::{ValueRef, CallConv, Linkage};\n-use lib;\n+use llvm;\n+use llvm::{ValueRef, CallConv, Linkage};\n use middle::weak_lang_items;\n use middle::trans::base::push_ctxt;\n use middle::trans::base;\n@@ -88,14 +87,14 @@ pub fn llvm_calling_convention(ccx: &CrateContext,\n             // It's the ABI's job to select this, not us.\n             System => ccx.sess().bug(\"system abi should be selected elsewhere\"),\n \n-            Stdcall => lib::llvm::X86StdcallCallConv,\n-            Fastcall => lib::llvm::X86FastcallCallConv,\n-            C => lib::llvm::CCallConv,\n-            Win64 => lib::llvm::X86_64_Win64,\n+            Stdcall => llvm::X86StdcallCallConv,\n+            Fastcall => llvm::X86FastcallCallConv,\n+            C => llvm::CCallConv,\n+            Win64 => llvm::X86_64_Win64,\n \n             // These API constants ought to be more specific...\n-            Cdecl => lib::llvm::CCallConv,\n-            Aapcs => lib::llvm::CCallConv,\n+            Cdecl => llvm::CCallConv,\n+            Aapcs => llvm::CCallConv,\n         }\n     })\n }\n@@ -110,17 +109,17 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n     // ghost, dllimport, dllexport and linkonce_odr_autohide are not supported\n     // and don't have to be, LLVM treats them as no-ops.\n     match name {\n-        \"appending\" => Some(lib::llvm::AppendingLinkage),\n-        \"available_externally\" => Some(lib::llvm::AvailableExternallyLinkage),\n-        \"common\" => Some(lib::llvm::CommonLinkage),\n-        \"extern_weak\" => Some(lib::llvm::ExternalWeakLinkage),\n-        \"external\" => Some(lib::llvm::ExternalLinkage),\n-        \"internal\" => Some(lib::llvm::InternalLinkage),\n-        \"linkonce\" => Some(lib::llvm::LinkOnceAnyLinkage),\n-        \"linkonce_odr\" => Some(lib::llvm::LinkOnceODRLinkage),\n-        \"private\" => Some(lib::llvm::PrivateLinkage),\n-        \"weak\" => Some(lib::llvm::WeakAnyLinkage),\n-        \"weak_odr\" => Some(lib::llvm::WeakODRLinkage),\n+        \"appending\" => Some(llvm::AppendingLinkage),\n+        \"available_externally\" => Some(llvm::AvailableExternallyLinkage),\n+        \"common\" => Some(llvm::CommonLinkage),\n+        \"extern_weak\" => Some(llvm::ExternalWeakLinkage),\n+        \"external\" => Some(llvm::ExternalLinkage),\n+        \"internal\" => Some(llvm::InternalLinkage),\n+        \"linkonce\" => Some(llvm::LinkOnceAnyLinkage),\n+        \"linkonce_odr\" => Some(llvm::LinkOnceODRLinkage),\n+        \"private\" => Some(llvm::PrivateLinkage),\n+        \"weak\" => Some(llvm::WeakAnyLinkage),\n+        \"weak_odr\" => Some(llvm::WeakODRLinkage),\n         _ => None,\n     }\n }\n@@ -157,14 +156,14 @@ pub fn register_static(ccx: &CrateContext,\n                 let g1 = ident.get().with_c_str(|buf| {\n                     llvm::LLVMAddGlobal(ccx.llmod, llty2.to_ref(), buf)\n                 });\n-                lib::llvm::SetLinkage(g1, linkage);\n+                llvm::SetLinkage(g1, linkage);\n \n                 let mut real_name = \"_rust_extern_with_linkage_\".to_string();\n                 real_name.push_str(ident.get());\n                 let g2 = real_name.with_c_str(|buf| {\n                     llvm::LLVMAddGlobal(ccx.llmod, llty.to_ref(), buf)\n                 });\n-                lib::llvm::SetLinkage(g2, lib::llvm::InternalLinkage);\n+                llvm::SetLinkage(g2, llvm::InternalLinkage);\n                 llvm::LLVMSetInitializer(g2, g1);\n                 g2\n             }\n@@ -217,7 +216,7 @@ pub fn register_foreign_item_fn(ccx: &CrateContext, abi: Abi, fty: ty::t,\n     // Make sure the calling convention is right for variadic functions\n     // (should've been caught if not in typeck)\n     if tys.fn_sig.variadic {\n-        assert!(cc == lib::llvm::CCallConv);\n+        assert!(cc == llvm::CCallConv);\n     }\n \n     // Create the LLVM value for the C extern fn\n@@ -347,7 +346,7 @@ pub fn trans_native_call<'a>(\n             llarg_rust\n         } else {\n             if ty::type_is_bool(*passed_arg_tys.get(i)) {\n-                let val = LoadRangeAssert(bcx, llarg_rust, 0, 2, lib::llvm::False);\n+                let val = LoadRangeAssert(bcx, llarg_rust, 0, 2, llvm::False);\n                 Trunc(bcx, val, Type::i1(bcx.ccx()))\n             } else {\n                 Load(bcx, llarg_rust)\n@@ -384,9 +383,9 @@ pub fn trans_native_call<'a>(\n     if fn_type.ret_ty.is_indirect() {\n         // The outptr can be noalias and nocapture because it's entirely\n         // invisible to the program. We can also mark it as nonnull\n-        attrs.push((1, lib::llvm::NoAliasAttribute as u64));\n-        attrs.push((1, lib::llvm::NoCaptureAttribute as u64));\n-        attrs.push((1, lib::llvm::NonNullAttribute as u64));\n+        attrs.push((1, llvm::NoAliasAttribute as u64));\n+        attrs.push((1, llvm::NoCaptureAttribute as u64));\n+        attrs.push((1, llvm::NonNullAttribute as u64));\n     };\n \n     // Add attributes that depend on the concrete foreign ABI\n@@ -531,7 +530,7 @@ pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,\n     let cconv = match ty::get(t).sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n             let c = llvm_calling_convention(ccx, fn_ty.abi);\n-            c.unwrap_or(lib::llvm::CCallConv)\n+            c.unwrap_or(llvm::CCallConv)\n         }\n         _ => fail!(\"expected bare fn in register_rust_fn_with_foreign_abi\")\n     };\n@@ -743,7 +742,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                 llforeign_arg\n             } else {\n                 if ty::type_is_bool(rust_ty) {\n-                    let tmp = builder.load_range_assert(llforeign_arg, 0, 2, lib::llvm::False);\n+                    let tmp = builder.load_range_assert(llforeign_arg, 0, 2, llvm::False);\n                     builder.trunc(tmp, Type::i1(ccx))\n                 } else {\n                     builder.load(llforeign_arg)"}, {"sha": "40065d0bc5053f327562956d7f3bbb003d1804ae", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -15,8 +15,8 @@\n \n use back::abi;\n use back::link::*;\n-use lib::llvm::{llvm, ValueRef, True};\n-use lib;\n+use llvm;\n+use llvm::{ValueRef, True};\n use middle::lang_items::{FreeFnLangItem, ExchangeFreeFnLangItem};\n use middle::subst;\n use middle::trans::adt;\n@@ -492,7 +492,7 @@ fn make_generic_glue(ccx: &CrateContext,\n \n     let bcx = init_function(&fcx, false, ty::mk_nil());\n \n-    lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n+    llvm::SetLinkage(llfn, llvm::InternalLinkage);\n     ccx.stats.n_glues_created.set(ccx.stats.n_glues_created.get() + 1u);\n     // All glue functions take values passed *by alias*; this is a\n     // requirement since in many contexts glue is invoked indirectly and\n@@ -550,7 +550,7 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n             let gvar = ti.tydesc;\n             llvm::LLVMSetInitializer(gvar, tydesc);\n             llvm::LLVMSetGlobalConstant(gvar, True);\n-            lib::llvm::SetLinkage(gvar, lib::llvm::InternalLinkage);\n+            llvm::SetLinkage(gvar, llvm::InternalLinkage);\n         }\n     };\n }"}, {"sha": "d64eeb727e733bdc6820a4c77c8336911a47d9eb", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use lib::llvm::{AvailableExternallyLinkage, SetLinkage};\n+use llvm::{AvailableExternallyLinkage, SetLinkage};\n use metadata::csearch;\n use middle::astencode;\n use middle::trans::base::{push_ctxt, trans_item, get_item_val, trans_fn};"}, {"sha": "af5cdf7a1be73b9630a25049a3744a9876d5db46", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,8 +10,8 @@\n \n #![allow(non_uppercase_pattern_statics)]\n \n-use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg, ValueRef};\n-use lib;\n+use llvm;\n+use llvm::{SequentiallyConsistent, Acquire, Release, Xchg, ValueRef};\n use middle::subst;\n use middle::subst::FnSpace;\n use middle::trans::base::*;"}, {"sha": "2740e5695be107b76b92a4c2f99671e6a7d1db7a", "filename": "src/librustc/middle/trans/llrepr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,7 +10,7 @@\n \n use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;\n-use lib::llvm::ValueRef;\n+use llvm::ValueRef;\n \n pub trait LlvmRepr {\n     fn llrepr(&self, ccx: &CrateContext) -> String;"}, {"sha": "15bbc5ae845898390644965b38ea10c53076e574", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,9 +10,9 @@\n \n // Information concerning the machine representation of various types.\n \n-use lib::llvm::{ValueRef};\n-use lib::llvm::False;\n-use lib::llvm::llvm;\n+use llvm;\n+use llvm::{ValueRef};\n+use llvm::False;\n use middle::trans::common::*;\n \n use middle::trans::type_::Type;"}, {"sha": "092a524e48a1898476d7c283cbfa92cb20735415", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,9 +10,8 @@\n \n \n use back::abi;\n-use lib::llvm::llvm;\n-use lib::llvm::ValueRef;\n-use lib;\n+use llvm;\n+use llvm::ValueRef;\n use metadata::csearch;\n use middle::subst;\n use middle::trans::base::*;\n@@ -460,8 +459,8 @@ pub fn make_vtable<I: Iterator<ValueRef>>(ccx: &CrateContext,\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl).to_ref(), buf)\n         });\n         llvm::LLVMSetInitializer(vt_gvar, tbl);\n-        llvm::LLVMSetGlobalConstant(vt_gvar, lib::llvm::True);\n-        lib::llvm::SetLinkage(vt_gvar, lib::llvm::InternalLinkage);\n+        llvm::LLVMSetGlobalConstant(vt_gvar, llvm::True);\n+        llvm::SetLinkage(vt_gvar, llvm::InternalLinkage);\n         vt_gvar\n     }\n }"}, {"sha": "7687e82654a9201e3e891927116951e53d08745e", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,7 +10,7 @@\n \n use back::link::exported_name;\n use driver::session;\n-use lib::llvm::ValueRef;\n+use llvm::ValueRef;\n use middle::subst;\n use middle::subst::Subst;\n use middle::trans::base::{set_llvm_fn_attrs, set_inline_hint};"}, {"sha": "bc156fc37917cc8ec1c9601b3f0cad308f70d044", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use back::link::mangle_internal_name_by_path_and_seq;\n-use lib::llvm::{ValueRef, llvm};\n+use llvm;\n+use llvm::{ValueRef};\n use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::build::*;"}, {"sha": "07571b2f4c4a509d036263308e2787ed2c4085eb", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -11,8 +11,8 @@\n #![allow(non_camel_case_types)]\n \n use back::abi;\n-use lib;\n-use lib::llvm::{llvm, ValueRef};\n+use llvm;\n+use llvm::{ValueRef};\n use middle::lang_items::StrDupUniqFnLangItem;\n use middle::trans::base::*;\n use middle::trans::base;\n@@ -543,7 +543,7 @@ pub fn iter_vec_loop<'r,\n     { // i < count\n         let lhs = Load(cond_bcx, loop_counter);\n         let rhs = count;\n-        let cond_val = ICmp(cond_bcx, lib::llvm::IntULT, lhs, rhs);\n+        let cond_val = ICmp(cond_bcx, llvm::IntULT, lhs, rhs);\n \n         CondBr(cond_bcx, cond_val, body_bcx.llbb, next_bcx.llbb);\n     }\n@@ -599,7 +599,7 @@ pub fn iter_vec_raw<'r,\n         let data_ptr =\n             Phi(header_bcx, val_ty(data_ptr), [data_ptr], [bcx.llbb]);\n         let not_yet_at_end =\n-            ICmp(header_bcx, lib::llvm::IntULT, data_ptr, data_end_ptr);\n+            ICmp(header_bcx, llvm::IntULT, data_ptr, data_end_ptr);\n         let body_bcx = fcx.new_temp_block(\"iter_vec_loop_body\");\n         let next_bcx = fcx.new_temp_block(\"iter_vec_next\");\n         CondBr(header_bcx, not_yet_at_end, body_bcx.llbb, next_bcx.llbb);"}, {"sha": "10ee8f9ffc7ee8442947d1bb1d10fd4ecd948643", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -10,8 +10,9 @@\n \n #![allow(non_uppercase_pattern_statics)]\n \n-use lib::llvm::{llvm, TypeRef, Bool, False, True, TypeKind, ValueRef};\n-use lib::llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n+use llvm;\n+use llvm::{TypeRef, Bool, False, True, TypeKind, ValueRef};\n+use llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n \n use middle::trans::context::CrateContext;\n "}, {"sha": "2db6a87a9dc53a99b8fcb216421fe9489ddda57e", "filename": "src/librustc/middle/trans/value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use lib::llvm::{llvm, UseRef, ValueRef};\n+use llvm;\n+use llvm::{UseRef, ValueRef};\n use middle::trans::basic_block::BasicBlock;\n use middle::trans::common::Block;\n use libc::c_uint;"}, {"sha": "6c3778787e2e24e5fd3cc2a663fdacce258d56d5", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7", "patch": "@@ -12,7 +12,6 @@\n \n use libc;\n use ArchiveRef;\n-use llvm;\n \n use std::raw;\n use std::mem;\n@@ -31,7 +30,7 @@ impl ArchiveRO {\n     pub fn open(dst: &Path) -> Option<ArchiveRO> {\n         unsafe {\n             let ar = dst.with_c_str(|dst| {\n-                llvm::LLVMRustOpenArchive(dst)\n+                ::LLVMRustOpenArchive(dst)\n             });\n             if ar.is_null() {\n                 None\n@@ -46,7 +45,7 @@ impl ArchiveRO {\n         unsafe {\n             let mut size = 0 as libc::size_t;\n             let ptr = file.with_c_str(|file| {\n-                llvm::LLVMRustArchiveReadSection(self.ptr, file, &mut size)\n+                ::LLVMRustArchiveReadSection(self.ptr, file, &mut size)\n             });\n             if ptr.is_null() {\n                 None\n@@ -63,7 +62,7 @@ impl ArchiveRO {\n impl Drop for ArchiveRO {\n     fn drop(&mut self) {\n         unsafe {\n-            llvm::LLVMRustDestroyArchive(self.ptr);\n+            ::LLVMRustDestroyArchive(self.ptr);\n         }\n     }\n }"}, {"sha": "3d0c5a821709f8f6d68beebce6816bfe77f39683", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1427, "deletions": 1433, "changes": 2860, "blob_url": "https://github.com/rust-lang/rust/blob/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=3096d9bf946d2e3e74b24dbb4a5d116a5d9ac7c7"}]}