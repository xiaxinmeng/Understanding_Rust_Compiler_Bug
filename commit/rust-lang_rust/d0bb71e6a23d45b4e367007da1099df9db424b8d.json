{"sha": "d0bb71e6a23d45b4e367007da1099df9db424b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYmI3MWU2YTIzZDQ1YjRlMzY3MDA3ZGExMDk5ZGY5ZGI0MjRiOGQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-03T15:31:28Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-03T16:04:08Z"}, "message": "Finish the HashMapLint", "tree": {"sha": "f473a85cabe541c8ab84d80d2c04ce66d440bd23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f473a85cabe541c8ab84d80d2c04ce66d440bd23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0bb71e6a23d45b4e367007da1099df9db424b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bb71e6a23d45b4e367007da1099df9db424b8d", "html_url": "https://github.com/rust-lang/rust/commit/d0bb71e6a23d45b4e367007da1099df9db424b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0bb71e6a23d45b4e367007da1099df9db424b8d/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b70ed8e1ead333c0e45d21ff3daa89061a8b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b70ed8e1ead333c0e45d21ff3daa89061a8b05", "html_url": "https://github.com/rust-lang/rust/commit/54b70ed8e1ead333c0e45d21ff3daa89061a8b05"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "14f535b382075a2b265e732c86f2464b5b04e3e5", "filename": "src/hashmap.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d0bb71e6a23d45b4e367007da1099df9db424b8d/src%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bb71e6a23d45b4e367007da1099df9db424b8d/src%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhashmap.rs?ref=d0bb71e6a23d45b4e367007da1099df9db424b8d", "patch": "@@ -1,14 +1,18 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::codemap::Span;\n-use utils::{get_item_name, match_type, snippet, span_help_and_lint, walk_ptrs_ty};\n+use utils::{get_item_name, is_exp_equal, match_type, snippet, span_help_and_lint, walk_ptrs_ty};\n use utils::HASHMAP_PATH;\n \n /// **What it does:** This lint checks for uses of `contains_key` + `insert` on `HashMap`.\n ///\n /// **Why is this bad?** Using `HashMap::entry` is more efficient.\n ///\n-/// **Known problems:** Hopefully none.\n+/// **Known problems:** Some false negatives, eg.:\n+/// ```\n+/// let k = &key;\n+/// if !m.contains_key(k) { m.insert(k.clone(), v); }\n+/// ```\n ///\n /// **Example:** `if !m.contains_key(&k) { m.insert(k, v) }`\n declare_lint! {\n@@ -36,16 +40,22 @@ impl LateLintPass for HashMapLint {\n                 params.len() >= 2,\n                 name.node.as_str() == \"contains_key\"\n             ], {\n+                let key = match params[1].node {\n+                    ExprAddrOf(_, ref key) => key,\n+                    _ => return\n+                };\n+\n                 let map = &params[0];\n                 let obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(map));\n \n                 if match_type(cx, obj_ty, &HASHMAP_PATH) {\n                     if let Some(ref then) = then.expr {\n-                        check_for_insert(cx, expr.span, map, then);\n+                        check_for_insert(cx, expr.span, map, key, then);\n                     }\n-                    else if then.stmts.len() == 1 {\n-                        if let StmtSemi(ref stmt, _) = then.stmts[0].node {\n-                            check_for_insert(cx, expr.span, map, stmt);\n+\n+                    for stmt in &then.stmts {\n+                        if let StmtSemi(ref stmt, _) = stmt.node {\n+                            check_for_insert(cx, expr.span, map, key, stmt);\n                         }\n                     }\n                 }\n@@ -54,20 +64,20 @@ impl LateLintPass for HashMapLint {\n     }\n }\n \n-fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, expr: &Expr) {\n+fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, key: &Expr, expr: &Expr) {\n     if_let_chain! {\n         [\n             let ExprMethodCall(ref name, _, ref params) = expr.node,\n-            params.len() >= 3,\n+            params.len() == 3,\n             name.node.as_str() == \"insert\",\n-            get_item_name(cx, map) == get_item_name(cx, &*params[0])\n+            get_item_name(cx, map) == get_item_name(cx, &*params[0]),\n+            is_exp_equal(cx, key, &params[1])\n         ], {\n             span_help_and_lint(cx, HASHMAP_ENTRY, span,\n                                \"usage of `contains_key` followed by `insert` on `HashMap`\",\n-                               &format!(\"Consider using `{}.entry({}).or_insert({})`\",\n+                               &format!(\"Consider using `{}.entry({})`\",\n                                         snippet(cx, map.span, \"..\"),\n-                                        snippet(cx, params[1].span, \"..\"),\n-                                        snippet(cx, params[2].span, \"..\")));\n+                                        snippet(cx, params[1].span, \"..\")));\n         }\n     }\n }"}, {"sha": "9aeacac0e14ab01074a2f36ad92fce0f94129fd2", "filename": "tests/compile-fail/hashmap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0bb71e6a23d45b4e367007da1099df9db424b8d/tests%2Fcompile-fail%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bb71e6a23d45b4e367007da1099df9db424b8d/tests%2Fcompile-fail%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fhashmap.rs?ref=d0bb71e6a23d45b4e367007da1099df9db424b8d", "patch": "@@ -15,11 +15,9 @@ fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) { m.insert(k, v) } else { None }; //~ERROR: usage of `contains_key` followed by `insert` on `HashMap`\n }\n \n-/* TODO\n fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n-    if !m.contains_key(&k) { m.insert(o, v) } else { None };\n+    if !m.contains_key(&k) { m.insert(o, v); }\n }\n-*/\n \n fn main() {\n }"}]}