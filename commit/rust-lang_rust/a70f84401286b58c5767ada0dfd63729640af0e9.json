{"sha": "a70f84401286b58c5767ada0dfd63729640af0e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MGY4NDQwMTI4NmI1OGM1NzY3YWRhMGRmZDYzNzI5NjQwYWYwZTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-05T08:51:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-05T08:51:19Z"}, "message": "Rollup merge of #49345 - davidtwco:issue-44109, r=nikomatsakis\n\nRFC 2008: Finishing Touches\n\nPart of #44109.\n\nr? @nikomatsakis\n(not sure who was best for this PR).", "tree": {"sha": "a8b464ee85d225a994041703c02b197d2cafd5b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8b464ee85d225a994041703c02b197d2cafd5b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70f84401286b58c5767ada0dfd63729640af0e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxeOHCRBK7hj4Ov3rIwAAdHIIAGX8DzhVOEOp5WsKUHkNSyG2\nIjiVEAFN5rU+Sp2vYGdbhMSykQSonI4If4VXiM/YT0QOLDKThFp5EaIpVe/n/tkY\nYd9zfgOYcA3nFbWVYcmVMUyuJfteKAl+ToB+rMKT6k8MLtyVfHfl/U755+whWSd9\nGC17O8z16Y3afAaCcplMk6D3tc45tqgjfv2T2b58QI9D2TbnCmaADCxVBvS48PtM\nVy93g2E6RqESW+idjrfYb+utC/n2gRhoRJmMWFrB42S+Qv1wwG5a+qAptMFQcuzB\n3aLHqQfS5lllaCvUUoqcnDZpaTx4tnSh8N20hwXUCqy7PQQ53fJ8XtPqqeXYM3A=\n=0G4V\n-----END PGP SIGNATURE-----\n", "payload": "tree a8b464ee85d225a994041703c02b197d2cafd5b8\nparent 46d0befb8e365acc7393e70353d21159a8910b99\nparent 138472bdc6b428eafc755dbc97b2706fa13a268c\nauthor kennytm <kennytm@gmail.com> 1522918279 +0800\ncommitter GitHub <noreply@github.com> 1522918279 +0800\n\nRollup merge of #49345 - davidtwco:issue-44109, r=nikomatsakis\n\nRFC 2008: Finishing Touches\n\nPart of #44109.\n\nr? @nikomatsakis\n(not sure who was best for this PR).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70f84401286b58c5767ada0dfd63729640af0e9", "html_url": "https://github.com/rust-lang/rust/commit/a70f84401286b58c5767ada0dfd63729640af0e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70f84401286b58c5767ada0dfd63729640af0e9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d0befb8e365acc7393e70353d21159a8910b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d0befb8e365acc7393e70353d21159a8910b99", "html_url": "https://github.com/rust-lang/rust/commit/46d0befb8e365acc7393e70353d21159a8910b99"}, {"sha": "138472bdc6b428eafc755dbc97b2706fa13a268c", "url": "https://api.github.com/repos/rust-lang/rust/commits/138472bdc6b428eafc755dbc97b2706fa13a268c", "html_url": "https://github.com/rust-lang/rust/commit/138472bdc6b428eafc755dbc97b2706fa13a268c"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "2662e70999196f458de10c16608a9f55b52e1558", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a70f84401286b58c5767ada0dfd63729640af0e9/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70f84401286b58c5767ada0dfd63729640af0e9/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=a70f84401286b58c5767ada0dfd63729640af0e9", "patch": "@@ -2058,6 +2058,33 @@ where 'x: 'y\n ```\n \"##,\n \n+E0910: r##\"\n+This error indicates that a `#[non_exhaustive]` attribute was incorrectly placed\n+on something other than a struct or enum.\n+\n+Examples of erroneous code:\n+\n+```compile_fail,E0910\n+# #![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+trait Foo { }\n+```\n+\"##,\n+\n+E0911: r##\"\n+This error indicates that a `#[non_exhaustive]` attribute had a value. The\n+`#[non_exhaustive]` should be empty.\n+\n+Examples of erroneous code:\n+\n+```compile_fail,E0911\n+# #![feature(non_exhaustive)]\n+\n+#[non_exhaustive(anything)]\n+struct Foo;\n+```\n+\"##,\n \n }\n "}, {"sha": "956cd17f38f214cd91f47550641f74cdb667742a", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a70f84401286b58c5767ada0dfd63729640af0e9/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70f84401286b58c5767ada0dfd63729640af0e9/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=a70f84401286b58c5767ada0dfd63729640af0e9", "patch": "@@ -66,6 +66,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         for attr in &item.attrs {\n             if attr.check_name(\"inline\") {\n                 self.check_inline(attr, &item.span, target)\n+            } else if attr.check_name(\"non_exhaustive\") {\n+                self.check_non_exhaustive(attr, item, target)\n             } else if attr.check_name(\"wasm_import_module\") {\n                 has_wasm_import_module = true;\n                 if attr.value_str().is_none() {\n@@ -113,6 +115,31 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         }\n     }\n \n+    /// Check if the `#[non_exhaustive]` attribute on an `item` is valid.\n+    fn check_non_exhaustive(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) {\n+        match target {\n+            Target::Struct | Target::Enum => { /* Valid */ },\n+            _ => {\n+                struct_span_err!(self.tcx.sess,\n+                                 attr.span,\n+                                 E0910,\n+                                 \"attribute can only be applied to a struct or enum\")\n+                    .span_label(item.span, \"not a struct or enum\")\n+                    .emit();\n+                return;\n+            }\n+        }\n+\n+        if attr.meta_item_list().is_some() || attr.value_str().is_some() {\n+            struct_span_err!(self.tcx.sess,\n+                             attr.span,\n+                             E0911,\n+                             \"attribute should be empty\")\n+                .span_label(item.span, \"not empty\")\n+                .emit();\n+        }\n+    }\n+\n     /// Check if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(&self, item: &hir::Item, target: Target) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:"}, {"sha": "e48d989c01d61030db2da36fbb68e181253ec00e", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/invalid-attribute.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a70f84401286b58c5767ada0dfd63729640af0e9/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70f84401286b58c5767ada0dfd63729640af0e9/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs?ref=a70f84401286b58c5767ada0dfd63729640af0e9", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive(anything)]\n+//~^ ERROR attribute should be empty [E0911]\n+struct Foo;\n+\n+#[non_exhaustive]\n+//~^ ERROR attribute can only be applied to a struct or enum [E0910]\n+trait Bar { }\n+\n+#[non_exhaustive]\n+//~^ ERROR attribute can only be applied to a struct or enum [E0910]\n+union Baz {\n+    f1: u16,\n+    f2: u16\n+}\n+\n+fn main() { }"}]}