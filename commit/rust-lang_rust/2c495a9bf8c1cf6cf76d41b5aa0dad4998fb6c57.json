{"sha": "2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNDk1YTliZjhjMWNmNmNmNzZkNDFiNWFhMGRhZDQ5OThmYjZjNTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T00:25:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T03:37:32Z"}, "message": "rustdoc: Add iface attribute docs to the doc tree", "tree": {"sha": "e471af4cd55f4cb4d4702fed215f1eda8f97dddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e471af4cd55f4cb4d4702fed215f1eda8f97dddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57", "html_url": "https://github.com/rust-lang/rust/commit/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8a683415c995bdb3d2e8bdc0d6a2bec7fe6cf1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a683415c995bdb3d2e8bdc0d6a2bec7fe6cf1d", "html_url": "https://github.com/rust-lang/rust/commit/b8a683415c995bdb3d2e8bdc0d6a2bec7fe6cf1d"}], "stats": {"total": 130, "additions": 106, "deletions": 24}, "files": [{"sha": "0b38b104c615b7df580e6b05220bd77948c90e8e", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 106, "deletions": 24, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57", "patch": "@@ -25,7 +25,8 @@ fn run(\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n-        fold_res: fold_res\n+        fold_res: fold_res,\n+        fold_iface: fold_iface\n         with *fold::default_seq_fold(srv)\n     });\n     fold.fold_crate(fold, doc)\n@@ -142,35 +143,36 @@ fn fold_fn(\n             with doc\n         };\n     }\n+}\n \n-    fn merge_arg_attrs(\n-        docs: [doc::argdoc],\n-        attrs: [attr_parser::arg_attrs]\n-    ) -> [doc::argdoc] {\n-        vec::map(docs) {|doc|\n-            alt vec::find(attrs) {|attr|\n-                attr.name == doc.name\n-            } {\n-                some(attr) {\n-                    {\n-                        desc: some(attr.desc)\n-                        with doc\n-                    }\n+fn merge_arg_attrs(\n+    docs: [doc::argdoc],\n+    attrs: [attr_parser::arg_attrs]\n+) -> [doc::argdoc] {\n+    vec::map(docs) {|doc|\n+        alt vec::find(attrs) {|attr|\n+            attr.name == doc.name\n+        } {\n+            some(attr) {\n+                {\n+                    desc: some(attr.desc)\n+                    with doc\n                 }\n-                none { doc }\n             }\n+            none { doc }\n         }\n-        // FIXME: Warning when documenting a non-existent arg\n     }\n+    // FIXME: Warning when documenting a non-existent arg\n+}\n \n-    fn merge_ret_attrs(\n-        doc: doc::retdoc,\n-        attrs: option<str>\n-    ) -> doc::retdoc {\n-        {\n-            desc: attrs\n-            with doc\n-        }\n+\n+fn merge_ret_attrs(\n+    doc: doc::retdoc,\n+    attrs: option<str>\n+) -> doc::retdoc {\n+    {\n+        desc: attrs\n+        with doc\n     }\n }\n \n@@ -359,4 +361,84 @@ fn fold_res_should_extract_arg_docs() {\n     let doc = fold_res(fold, doc.topmod.resources()[0]);\n     assert doc.args[0].name == \"a\";\n     assert doc.args[0].desc == some(\"b\");\n+}\n+\n+\n+fn fold_iface(\n+    fold: fold::fold<astsrv::srv>,\n+    doc: doc::ifacedoc\n+) -> doc::ifacedoc {\n+    let srv = fold.ctxt;\n+    let doc = fold::default_seq_fold_iface(fold, doc);\n+    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_iface);\n+\n+    {\n+        brief: attrs.brief,\n+        desc: attrs.desc,\n+        methods: merge_method_attrs(srv, doc.id, doc.methods)\n+        with doc\n+    }\n+}\n+\n+fn merge_method_attrs(\n+    srv: astsrv::srv,\n+    item_id: doc::ast_id,\n+    docs: [doc::methoddoc]\n+) -> [doc::methoddoc] {\n+    // Create an assoc list from method name to attributes\n+    let attrs = astsrv::exec(srv) {|ctxt|\n+        alt ctxt.ast_map.get(item_id) {\n+          ast_map::node_item(@{\n+            node: ast::item_iface(_, methods), _\n+          }) {\n+            vec::map(methods) {|method|\n+                (method.ident, attr_parser::parse_method(method.attrs))\n+            }\n+          }\n+        }\n+    };\n+\n+    vec::map2(docs, attrs) {|doc, attrs|\n+        assert doc.name == tuple::first(attrs);\n+        let attrs = tuple::second(attrs);\n+\n+        {\n+            brief: attrs.brief,\n+            desc: attrs.desc,\n+            args: merge_arg_attrs(doc.args, attrs.args),\n+            return: merge_ret_attrs(doc.return, attrs.return),\n+            failure: attrs.failure\n+            with doc\n+        }\n+    }\n+}\n+\n+#[test]\n+fn should_extract_iface_docs() {\n+    let source = \"#[doc = \\\"whatever\\\"] iface i { fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.ifaces()[0].desc == some(\"whatever\");\n+}\n+\n+#[test]\n+fn should_extract_iface_method_docs() {\n+    let source = \"iface i {\\\n+                  #[doc(\\\n+                  brief = \\\"brief\\\",\\\n+                  desc = \\\"desc\\\",\\\n+                  args(a = \\\"a\\\"),\\\n+                  return = \\\"return\\\",\\\n+                  failure = \\\"failure\\\")]\\\n+                  fn f(a: bool) -> bool;\\\n+                  }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.ifaces()[0].methods[0].brief == some(\"brief\");\n+    assert doc.topmod.ifaces()[0].methods[0].desc == some(\"desc\");\n+    assert doc.topmod.ifaces()[0].methods[0].args[0].desc == some(\"a\");\n+    assert doc.topmod.ifaces()[0].methods[0].return.desc == some(\"return\");\n+    assert doc.topmod.ifaces()[0].methods[0].failure == some(\"failure\");\n }\n\\ No newline at end of file"}]}