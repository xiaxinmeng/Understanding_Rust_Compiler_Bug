{"sha": "4911572b2da65eeff0b017831614ee32b546b9db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MTE1NzJiMmRhNjVlZWZmMGIwMTc4MzE2MTRlZTMyYjU0NmI5ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-29T22:50:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-29T22:50:59Z"}, "message": "Auto merge of #70009 - estebank:sugg-bound, r=Centril\n\nTweak `suggest_constraining_type_param`\n\nSome of the bound restriction structured suggestions were incorrect while others had subpar output.\n\nThe only issue left is a suggestion for an already present bound when dealing with `const`s that should be handled independently.\n\nFix #69983.", "tree": {"sha": "47acd6c1fddf9544a23b175bb907df2ccdcb0b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47acd6c1fddf9544a23b175bb907df2ccdcb0b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4911572b2da65eeff0b017831614ee32b546b9db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4911572b2da65eeff0b017831614ee32b546b9db", "html_url": "https://github.com/rust-lang/rust/commit/4911572b2da65eeff0b017831614ee32b546b9db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4911572b2da65eeff0b017831614ee32b546b9db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699f83f525c985000c1f70bf85117ba383adde87", "url": "https://api.github.com/repos/rust-lang/rust/commits/699f83f525c985000c1f70bf85117ba383adde87", "html_url": "https://github.com/rust-lang/rust/commit/699f83f525c985000c1f70bf85117ba383adde87"}, {"sha": "2c71894657bc0ac7a250170e3733f140750498a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c71894657bc0ac7a250170e3733f140750498a3", "html_url": "https://github.com/rust-lang/rust/commit/2c71894657bc0ac7a250170e3733f140750498a3"}], "stats": {"total": 1079, "additions": 439, "deletions": 640}, "files": [{"sha": "4ab7c4506fe6208f28f196a971fb4f7a66279c2a", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -222,8 +222,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             &mut err,\n                             &param.name.as_str(),\n                             \"Copy\",\n-                            tcx.sess.source_map(),\n-                            span,\n                             None,\n                         );\n                     }"}, {"sha": "98a623e38860c1c62876c463ce77fd0b9a627497", "filename": "src/librustc_trait_selection/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_trait_selection%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_trait_selection%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Flib.rs?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -15,6 +15,7 @@\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"512\"] // For rustdoc\n \n #[macro_use]"}, {"sha": "d0cfa5489589d56a27ca12d27637e1ae5876f425", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 40, "deletions": 90, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -25,8 +25,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::{Node, QPath, TyKind, WhereBoundPredicate, WherePredicate};\n use rustc_session::DiagnosticMessageId;\n-use rustc_span::source_map::SourceMap;\n-use rustc_span::{ExpnKind, Span, DUMMY_SP};\n+use rustc_span::{BytePos, ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n \n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n@@ -1679,14 +1678,8 @@ pub fn suggest_constraining_type_param(\n     err: &mut DiagnosticBuilder<'_>,\n     param_name: &str,\n     constraint: &str,\n-    source_map: &SourceMap,\n-    span: Span,\n     def_id: Option<DefId>,\n ) -> bool {\n-    const MSG_RESTRICT_BOUND_FURTHER: &str = \"consider further restricting this bound with\";\n-    const MSG_RESTRICT_TYPE: &str = \"consider restricting this type parameter with\";\n-    const MSG_RESTRICT_TYPE_FURTHER: &str = \"consider further restricting this type parameter with\";\n-\n     let param = generics.params.iter().find(|p| p.name.ident().as_str() == param_name);\n \n     let param = if let Some(param) = param {\n@@ -1695,11 +1688,24 @@ pub fn suggest_constraining_type_param(\n         return false;\n     };\n \n+    const MSG_RESTRICT_BOUND_FURTHER: &str = \"consider further restricting this bound\";\n+    let msg_restrict_type = format!(\"consider restricting type parameter `{}`\", param_name);\n+    let msg_restrict_type_further =\n+        format!(\"consider further restricting type parameter `{}`\", param_name);\n+\n     if def_id == tcx.lang_items().sized_trait() {\n         // Type parameters are already `Sized` by default.\n         err.span_label(param.span, &format!(\"this type parameter needs to be `{}`\", constraint));\n         return true;\n     }\n+    let mut suggest_restrict = |span| {\n+        err.span_suggestion_verbose(\n+            span,\n+            MSG_RESTRICT_BOUND_FURTHER,\n+            format!(\" + {}\", constraint),\n+            Applicability::MachineApplicable,\n+        );\n+    };\n \n     if param_name.starts_with(\"impl \") {\n         // If there's an `impl Trait` used in argument position, suggest\n@@ -1717,19 +1723,15 @@ pub fn suggest_constraining_type_param(\n         //             |\n         //             replace with: `impl Foo + Bar`\n \n-        err.span_help(param.span, &format!(\"{} `+ {}`\", MSG_RESTRICT_BOUND_FURTHER, constraint));\n-\n-        err.tool_only_span_suggestion(\n-            param.span,\n-            MSG_RESTRICT_BOUND_FURTHER,\n-            format!(\"{} + {}\", param_name, constraint),\n-            Applicability::MachineApplicable,\n-        );\n-\n+        suggest_restrict(param.span.shrink_to_hi());\n         return true;\n     }\n \n-    if generics.where_clause.predicates.is_empty() {\n+    if generics.where_clause.predicates.is_empty()\n+        // Given `trait Base<T = String>: Super<T>` where `T: Copy`, suggest restricting in the\n+        // `where` clause instead of `trait Base<T: Copy = String>: Super<T>`.\n+        && !matches!(param.kind, hir::GenericParamKind::Type { default: Some(_), .. })\n+    {\n         if let Some(bounds_span) = param.bounds_span() {\n             // If user has provided some bounds, suggest restricting them:\n             //\n@@ -1744,38 +1746,16 @@ pub fn suggest_constraining_type_param(\n             //          --\n             //          |\n             //          replace with: `T: Bar +`\n-\n-            err.span_help(\n-                bounds_span,\n-                &format!(\"{} `+ {}`\", MSG_RESTRICT_BOUND_FURTHER, constraint),\n-            );\n-\n-            let span_hi = param.span.with_hi(span.hi());\n-            let span_with_colon = source_map.span_through_char(span_hi, ':');\n-\n-            if span_hi != param.span && span_with_colon != span_hi {\n-                err.tool_only_span_suggestion(\n-                    span_with_colon,\n-                    MSG_RESTRICT_BOUND_FURTHER,\n-                    format!(\"{}: {} + \", param_name, constraint),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+            suggest_restrict(bounds_span.shrink_to_hi());\n         } else {\n             // If user hasn't provided any bounds, suggest adding a new one:\n             //\n             //   fn foo<T>(t: T) { ... }\n             //          - help: consider restricting this type parameter with `T: Foo`\n-\n-            err.span_help(\n-                param.span,\n-                &format!(\"{} `{}: {}`\", MSG_RESTRICT_TYPE, param_name, constraint),\n-            );\n-\n-            err.tool_only_span_suggestion(\n-                param.span,\n-                MSG_RESTRICT_TYPE,\n-                format!(\"{}: {}\", param_name, constraint),\n+            err.span_suggestion_verbose(\n+                param.span.shrink_to_hi(),\n+                &msg_restrict_type,\n+                format!(\": {}\", constraint),\n                 Applicability::MachineApplicable,\n             );\n         }\n@@ -1839,55 +1819,25 @@ pub fn suggest_constraining_type_param(\n             }\n         }\n \n-        let where_clause_span =\n-            generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi();\n+        let where_clause_span = generics.where_clause.span_for_predicates_or_empty_place();\n+        // Account for `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n+        let mut trailing_comma = false;\n+        if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(where_clause_span) {\n+            trailing_comma = snippet.ends_with(\",\");\n+        }\n+        let where_clause_span = if trailing_comma {\n+            let hi = where_clause_span.hi();\n+            Span::new(hi - BytePos(1), hi, where_clause_span.ctxt())\n+        } else {\n+            where_clause_span.shrink_to_hi()\n+        };\n \n         match &param_spans[..] {\n-            &[] => {\n-                err.span_help(\n-                    param.span,\n-                    &format!(\"{} `where {}: {}`\", MSG_RESTRICT_TYPE, param_name, constraint),\n-                );\n-\n-                err.tool_only_span_suggestion(\n-                    where_clause_span,\n-                    MSG_RESTRICT_TYPE,\n-                    format!(\", {}: {}\", param_name, constraint),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-\n-            &[&param_span] => {\n-                err.span_help(\n-                    param_span,\n-                    &format!(\"{} `+ {}`\", MSG_RESTRICT_BOUND_FURTHER, constraint),\n-                );\n-\n-                let span_hi = param_span.with_hi(span.hi());\n-                let span_with_colon = source_map.span_through_char(span_hi, ':');\n-\n-                if span_hi != param_span && span_with_colon != span_hi {\n-                    err.tool_only_span_suggestion(\n-                        span_with_colon,\n-                        MSG_RESTRICT_BOUND_FURTHER,\n-                        format!(\"{}: {} +\", param_name, constraint),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-\n+            &[&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n             _ => {\n-                err.span_help(\n-                    param.span,\n-                    &format!(\n-                        \"{} `where {}: {}`\",\n-                        MSG_RESTRICT_TYPE_FURTHER, param_name, constraint,\n-                    ),\n-                );\n-\n-                err.tool_only_span_suggestion(\n+                err.span_suggestion_verbose(\n                     where_clause_span,\n-                    MSG_RESTRICT_BOUND_FURTHER,\n+                    &msg_restrict_type_further,\n                     format!(\", {}: {}\", param_name, constraint),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "3ac2117ec697e5f8d7769961cc8735dfd3dacc0d", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 21, "deletions": 56, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -195,8 +195,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. })\n-                | hir::Node::TraitItem(hir::TraitItem {\n+                hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n                     kind: hir::TraitItemKind::Fn(..),\n                     ..\n@@ -206,63 +205,31 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     kind: hir::ImplItemKind::Fn(..),\n                     ..\n                 })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Trait(_, _, generics, _, _),\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Impl { generics, .. }, ..\n-                }) if projection.is_some() => {\n+                | hir::Node::Item(\n+                    hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. }\n+                    | hir::Item { kind: hir::ItemKind::Trait(_, _, generics, _, _), .. }\n+                    | hir::Item { kind: hir::ItemKind::Impl { generics, .. }, .. },\n+                ) if projection.is_some() => {\n                     // Missing associated type bound.\n                     suggest_restriction(&generics, \"the associated type\", err);\n                     return;\n                 }\n \n-                hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Struct(_, generics),\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Enum(_, generics), span, ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Union(_, generics),\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Trait(_, _, generics, ..),\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Impl { generics, .. },\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(_, generics, _),\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::TyAlias(_, generics),\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::TraitAlias(generics, _),\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }),\n-                    span,\n-                    ..\n-                })\n-                | hir::Node::TraitItem(hir::TraitItem { generics, span, .. })\n-                | hir::Node::ImplItem(hir::ImplItem { generics, span, .. })\n+                hir::Node::Item(\n+                    hir::Item { kind: hir::ItemKind::Struct(_, generics), .. }\n+                    | hir::Item { kind: hir::ItemKind::Enum(_, generics), .. }\n+                    | hir::Item { kind: hir::ItemKind::Union(_, generics), .. }\n+                    | hir::Item { kind: hir::ItemKind::Trait(_, _, generics, ..), .. }\n+                    | hir::Item { kind: hir::ItemKind::Impl { generics, .. }, .. }\n+                    | hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. }\n+                    | hir::Item { kind: hir::ItemKind::TyAlias(_, generics), .. }\n+                    | hir::Item { kind: hir::ItemKind::TraitAlias(generics, _), .. }\n+                    | hir::Item {\n+                        kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }), ..\n+                    },\n+                )\n+                | hir::Node::TraitItem(hir::TraitItem { generics, .. })\n+                | hir::Node::ImplItem(hir::ImplItem { generics, .. })\n                     if param_ty =>\n                 {\n                     // Missing generic type parameter bound.\n@@ -274,8 +241,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         &mut err,\n                         &param_name,\n                         &constraint,\n-                        self.tcx.sess.source_map(),\n-                        *span,\n                         Some(trait_ref.def_id()),\n                     ) {\n                         return;"}, {"sha": "946a1f1a07abd0c537affe9ac3f6962b875fd9f1", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL |     const Y: usize;\n LL |     let _array = [4; <A as Foo>::Y];\n    |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n    |\n-help: consider further restricting this bound with `+ Foo`\n-  --> $DIR/associated-const-type-parameter-arrays-2.rs:15:16\n+help: consider further restricting this bound\n    |\n-LL | pub fn test<A: Foo, B: Foo>() {\n-   |                ^^^\n+LL | pub fn test<A: Foo + Foo, B: Foo>() {\n+   |                    ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ac40e390cfbbd50bce084ffe4a0422b1fda74bd2", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL |     const Y: usize;\n LL |     let _array: [u32; <A as Foo>::Y];\n    |                       ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n    |\n-help: consider further restricting this bound with `+ Foo`\n-  --> $DIR/associated-const-type-parameter-arrays.rs:15:16\n+help: consider further restricting this bound\n    |\n-LL | pub fn test<A: Foo, B: Foo>() {\n-   |                ^^^\n+LL | pub fn test<A: Foo + Foo, B: Foo>() {\n+   |                    ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1df127873538d2be8cef8d0e43f6e5685d132c50", "filename": "src/test/ui/associated-types/associated-types-invalid-trait-ref-issue-18865.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-invalid-trait-ref-issue-18865.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -4,11 +4,10 @@ error[E0277]: the trait bound `T: Foo<usize>` is not satisfied\n LL |     let u: <T as Foo<usize>>::Bar = t.get_bar();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo<usize>` is not implemented for `T`\n    |\n-help: consider further restricting this bound with `+ Foo<usize>`\n-  --> $DIR/associated-types-invalid-trait-ref-issue-18865.rs:9:8\n+help: consider further restricting this bound\n    |\n-LL | fn f<T:Foo<isize>>(t: &T) {\n-   |        ^^^^^^^^^^\n+LL | fn f<T:Foo<isize> + Foo<usize>>(t: &T) {\n+   |                   ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0b5dee611e489be85c879e1d2470c4373807f437", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -4,11 +4,10 @@ error[E0277]: the trait bound `T: Get` is not satisfied\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: Get`\n-  --> $DIR/associated-types-no-suitable-bound.rs:11:13\n+help: consider restricting type parameter `T`\n    |\n-LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n-   |             ^\n+LL |     fn uhoh<T: Get>(foo: <T as Get>::Value) {}\n+   |              ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "54e39c4367d103a176d16f2f1a2b60b33ea6d89f", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -23,12 +23,11 @@ LL | trait Foo<T> {\n LL |     type Bar: Clone = Vec<T>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::clone::Clone`\n-  --> $DIR/defaults-suitability.rs:32:11\n-   |\n-LL | trait Foo<T> {\n-   |           ^\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | trait Foo<T: std::clone::Clone> {\n+   |            ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n   --> $DIR/defaults-suitability.rs:39:17\n@@ -119,11 +118,10 @@ LL | |     type Baz = T;\n LL | | }\n    | |_- required by `Foo3`\n    |\n-help: consider restricting this type parameter with `where T: std::clone::Clone`\n-  --> $DIR/defaults-suitability.rs:88:12\n+help: consider further restricting type parameter `T`\n    |\n-LL | trait Foo3<T> where\n-   |            ^\n+LL |     Self::Baz: Clone, T: std::clone::Clone\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/defaults-suitability.rs:27:5"}, {"sha": "cfca7cc1011076f2b8018a279c348f0b8bddfa8c", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -47,23 +47,21 @@ LL | impl<T> UncheckedCopy for T {}\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-help: consider restricting this type parameter with `T: std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::ops::Deref`\n-  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n@@ -72,23 +70,21 @@ LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::ops::AddAssign<&'static str>`\n-  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/defaults-unsound-62211-1.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::marker::Copy> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "1dcfbf538e4c73ec85d8e057fdbaecdaae327f04", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -47,23 +47,21 @@ LL | impl<T> UncheckedCopy for T {}\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-help: consider restricting this type parameter with `T: std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::fmt::Display> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::ops::Deref`\n-  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::ops::Deref> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n@@ -72,23 +70,21 @@ LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::ops::AddAssign<&'static str>`\n-  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:41:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/defaults-unsound-62211-2.rs:41:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> UncheckedCopy for T {}\n-   |      ^\n+LL | impl<T: std::marker::Copy> UncheckedCopy for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "81fc961e3dea0ab05dc15006df92c9528309e319", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -5,11 +5,10 @@ LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/bad-method-typaram-kind.rs:1:10\n+help: consider further restricting this bound\n    |\n-LL | fn foo<T:'static>() {\n-   |          ^^^^^^^\n+LL | fn foo<T:'static + std::marker::Send>() {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "acdc03e3726388e89fd8428ce3c161df1d54207e", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 60, "deletions": 80, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -8,11 +8,10 @@ LL |     lhs + rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:5:11\n+help: consider further restricting this bound\n    |\n-LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | fn add<A: Add<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                             ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:8:10\n@@ -25,11 +24,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:5:30\n+help: consider restricting type parameter `B`\n    |\n-LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              ^\n+LL | fn add<A: Add<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                               ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:13:10\n@@ -41,11 +39,10 @@ LL |     lhs - rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:11:11\n+help: consider further restricting this bound\n    |\n-LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | fn sub<A: Sub<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                             ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:14:10\n@@ -58,11 +55,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:11:30\n+help: consider restricting type parameter `B`\n    |\n-LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              ^\n+LL | fn sub<A: Sub<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                               ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:19:10\n@@ -74,11 +70,10 @@ LL |     lhs * rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:17:11\n+help: consider further restricting this bound\n    |\n-LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | fn mul<A: Mul<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                             ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:20:10\n@@ -91,11 +86,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:17:30\n+help: consider restricting type parameter `B`\n    |\n-LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              ^\n+LL | fn mul<A: Mul<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                               ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:25:10\n@@ -107,11 +101,10 @@ LL |     lhs / rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:23:11\n+help: consider further restricting this bound\n    |\n-LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | fn div<A: Div<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                             ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:26:10\n@@ -124,11 +117,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:23:30\n+help: consider restricting type parameter `B`\n    |\n-LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              ^\n+LL | fn div<A: Div<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                               ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:31:10\n@@ -140,11 +132,10 @@ LL |     lhs % rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:29:11\n+help: consider further restricting this bound\n    |\n-LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | fn rem<A: Rem<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                             ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:32:10\n@@ -157,11 +148,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:29:30\n+help: consider restricting type parameter `B`\n    |\n-LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              ^\n+LL | fn rem<A: Rem<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                               ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:37:10\n@@ -173,11 +163,10 @@ LL |     lhs & rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:35:14\n+help: consider further restricting this bound\n    |\n-LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |              ^^^^^^^^^^^^^^^^^^^^\n+LL | fn bitand<A: BitAnd<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                                   ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:38:10\n@@ -190,11 +179,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:35:36\n+help: consider restricting type parameter `B`\n    |\n-LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                    ^\n+LL | fn bitand<A: BitAnd<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                                     ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:43:10\n@@ -206,11 +194,10 @@ LL |     lhs | rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:41:13\n+help: consider further restricting this bound\n    |\n-LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |             ^^^^^^^^^^^^^^^^^^^\n+LL | fn bitor<A: BitOr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                                 ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:44:10\n@@ -223,11 +210,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:41:34\n+help: consider restricting type parameter `B`\n    |\n-LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                  ^\n+LL | fn bitor<A: BitOr<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                                   ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:49:10\n@@ -239,11 +225,10 @@ LL |     lhs ^ rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:47:14\n+help: consider further restricting this bound\n    |\n-LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |              ^^^^^^^^^^^^^^^^^^^^\n+LL | fn bitxor<A: BitXor<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                                   ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:50:10\n@@ -256,11 +241,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:47:36\n+help: consider restricting type parameter `B`\n    |\n-LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                    ^\n+LL | fn bitxor<A: BitXor<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                                     ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:55:10\n@@ -272,11 +256,10 @@ LL |     lhs << rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:53:11\n+help: consider further restricting this bound\n    |\n-LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | fn shl<A: Shl<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                             ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:56:10\n@@ -289,11 +272,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:53:30\n+help: consider restricting type parameter `B`\n    |\n-LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              ^\n+LL | fn shl<A: Shl<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                               ^^^^^^\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:61:10\n@@ -305,11 +287,10 @@ LL |     lhs >> rhs;\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-consume-args.rs:59:11\n+help: consider further restricting this bound\n    |\n-LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           ^^^^^^^^^^^^^^^^^\n+LL | fn shr<A: Shr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n+   |                             ^^^^^^\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:62:10\n@@ -322,11 +303,10 @@ LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n-help: consider restricting this type parameter with `B: Copy`\n-  --> $DIR/binop-consume-args.rs:59:30\n+help: consider restricting type parameter `B`\n    |\n-LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              ^\n+LL | fn shr<A: Shr<B, Output=()>, B: Copy>(lhs: A, rhs: B) {\n+   |                               ^^^^^^\n \n error: aborting due to 20 previous errors\n "}, {"sha": "6d5ac9cab30c05f29c12890ded4ab7522e8919eb", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -9,11 +9,10 @@ LL |     +\n LL |     x;\n    |     ^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-move-semantics.rs:5:19\n+help: consider further restricting this bound\n    |\n-LL | fn double_move<T: Add<Output=()>>(x: T) {\n-   |                   ^^^^^^^^^^^^^^\n+LL | fn double_move<T: Add<Output=()> + Copy>(x: T) {\n+   |                                  ^^^^^^\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:14:5\n@@ -26,11 +25,10 @@ LL |     +\n LL |     x.clone();\n    |     ^ value borrowed here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/binop-move-semantics.rs:11:24\n+help: consider further restricting this bound\n    |\n-LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn move_then_borrow<T: Add<Output=()> + Clone + Copy>(x: T) {\n+   |                                               ^^^^^^\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:21:5"}, {"sha": "a51cda548efd760747c34e55db4c103179cad188", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -26,11 +26,10 @@ LL |     f(1, 2);\n LL |     f(1, 2);\n    |     ^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/borrowck-unboxed-closures.rs:10:8\n+help: consider further restricting this bound\n    |\n-LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn c<F:FnOnce(isize, isize) -> isize + Copy>(f: F) {\n+   |                                      ^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9c98200db513458f5d78728e75d53dbb97f526cd", "filename": "src/test/ui/bound-suggestions.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.fixed?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -13,7 +13,7 @@ fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n }\n \n #[allow(dead_code)]\n-fn test_one_bound<T: std::fmt::Debug +  Sized>(t: T) {\n+fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n     println!(\"{:?}\", t);\n     //~^ ERROR doesn't implement\n }\n@@ -25,7 +25,7 @@ fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt:\n }\n \n #[allow(dead_code)]\n-fn test_one_bound_where<X>(x: X) where X: std::fmt::Debug + Sized {\n+fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n     println!(\"{:?}\", x);\n     //~^ ERROR doesn't implement\n }"}, {"sha": "b9bc503f5301a35504fcaa02f9bc7ec222520f89", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -5,13 +5,12 @@ LL |     println!(\"{:?}\", t);\n    |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `impl Sized`\n-help: consider further restricting this bound with `+ std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:4:17\n-   |\n-LL | fn test_impl(t: impl Sized) {\n-   |                 ^^^^^^^^^^\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL | fn test_impl(t: impl Sized + std::fmt::Debug) {\n+   |                            ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Debug`\n   --> $DIR/bound-suggestions.rs:11:22\n@@ -20,13 +19,12 @@ LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:10:19\n-   |\n-LL | fn test_no_bounds<T>(t: T) {\n-   |                   ^\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n+   |                    ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Debug`\n   --> $DIR/bound-suggestions.rs:17:22\n@@ -35,13 +33,12 @@ LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `T`\n-help: consider further restricting this bound with `+ std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:16:22\n-   |\n-LL | fn test_one_bound<T: Sized>(t: T) {\n-   |                      ^^^^^\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n+   |                            ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Y` doesn't implement `std::fmt::Debug`\n   --> $DIR/bound-suggestions.rs:23:30\n@@ -50,13 +47,12 @@ LL |     println!(\"{:?} {:?}\", x, y);\n    |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `Y`\n-help: consider restricting this type parameter with `where Y: std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:22:28\n-   |\n-LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug {\n-   |                            ^\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting type parameter `Y`\n+   |\n+LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n+   |                                                                   ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `X` doesn't implement `std::fmt::Debug`\n   --> $DIR/bound-suggestions.rs:29:22\n@@ -65,13 +61,12 @@ LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `X`\n-help: consider further restricting this bound with `+ std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:28:40\n-   |\n-LL | fn test_one_bound_where<X>(x: X) where X: Sized {\n-   |                                        ^^^^^^^^\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting this bound\n+   |\n+LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n+   |                                                 ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `X` doesn't implement `std::fmt::Debug`\n   --> $DIR/bound-suggestions.rs:35:22\n@@ -80,13 +75,12 @@ LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `X`\n-help: consider further restricting this type parameter with `where X: std::fmt::Debug`\n-  --> $DIR/bound-suggestions.rs:34:27\n-   |\n-LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized {\n-   |                           ^\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider further restricting type parameter `X`\n+   |\n+LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n+   |                                                            ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ea5215e458d65791f0070898bb1bff8cc0ded295", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -5,12 +5,11 @@ LL | impl <T: Sync+'static> Foo for (T,) { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/builtin-superkinds-double-superkind.rs:6:10\n-   |\n-LL | impl <T: Sync+'static> Foo for (T,) { }\n-   |          ^^^^^^^^^^^^\n    = note: required because it appears within the type `(T,)`\n+help: consider further restricting this bound\n+   |\n+LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n+   |                       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n@@ -19,12 +18,11 @@ LL | impl <T: Send> Foo for (T,T) { }\n    |                ^^^ `T` cannot be shared between threads safely\n    |\n    = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n-help: consider further restricting this bound with `+ std::marker::Sync`\n-  --> $DIR/builtin-superkinds-double-superkind.rs:9:10\n-   |\n-LL | impl <T: Send> Foo for (T,T) { }\n-   |          ^^^^\n    = note: required because it appears within the type `(T, T)`\n+help: consider further restricting this bound\n+   |\n+LL | impl <T: Send + std::marker::Sync> Foo for (T,T) { }\n+   |               ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ba6595f68d5ccbac309460ff3b581c3dddc7e8b4", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -5,12 +5,11 @@ LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n    |\n    = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/builtin-superkinds-in-metadata.rs:13:9\n-   |\n-LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-   |         ^^^^^^^^^^^^\n    = note: required because it appears within the type `X<T>`\n+help: consider further restricting this bound\n+   |\n+LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }\n+   |                      ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bef33d1fd05d32866ce5588ca17f86ecda1a8b53", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -5,11 +5,10 @@ LL | impl <T: Sync+'static> Foo for T { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/builtin-superkinds-typaram-not-send.rs:5:10\n+help: consider further restricting this bound\n    |\n-LL | impl <T: Sync+'static> Foo for T { }\n-   |          ^^^^^^^^^^^^\n+LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }\n+   |                       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f565948f479c3e8e17de4769bfea67ee32b14c42", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -8,11 +8,10 @@ LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |                      ^^^^ `F` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `F`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:33\n+help: consider further restricting this bound\n    |\n-LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^\n+LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + std::marker::Send {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f746f8502b8c26b314ead877d38739fde79b2bef", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -8,11 +8,10 @@ LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `F`\n-help: consider further restricting this bound with `+ std::marker::Sync`\n-  --> $DIR/closure-bounds-subtype.rs:11:30\n+help: consider further restricting this bound\n    |\n-LL | fn give_owned<F>(f: F) where F: FnOnce() + Send {\n-   |                              ^^^^^^^^^^^^^^^^^^\n+LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {\n+   |                                                 ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5a6dfb2fdf946fdfe7ed7a235f242731e08513e0", "filename": "src/test/ui/closures/issue-67123.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-67123.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -6,12 +6,11 @@ LL |     || { t; t; };\n    |          |\n    |          value moved here\n    |\n-help: consider restricting this type parameter with `T: Copy`\n-  --> $DIR/issue-67123.rs:1:8\n-   |\n-LL | fn foo<T>(t: T) {\n-   |        ^\n    = note: move occurs because `t` has type `T`, which does not implement the `Copy` trait\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn foo<T: Copy>(t: T) {\n+   |         ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ef9e3b86694a83194686c4fa41e5e9adc10ea1a4", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -12,12 +12,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |     [x; { N }]\n    |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/issue-61336-2.rs:8:6\n-   |\n-LL | fn g<T, const N: usize>(x: T) -> [T; N] {\n-   |      ^\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "88d81c66d1ffe959f919398f4a5fbb0964c89599", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -12,12 +12,11 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |     [x; N]\n    |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/issue-61336.rs:8:6\n-   |\n-LL | fn g<T, const N: usize>(x: T) -> [T; N] {\n-   |      ^\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d5560c81337730cfbaaea5d51de5b6440f9413c7", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -34,13 +34,12 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/impl_bounds.rs:14:6\n-   |\n-LL | impl<T> Foo for Fooy<T> {\n-   |      ^\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `Fooy<T>`\n    = note: the requirement `Fooy<T>: std::marker::Copy` appears on the associated impl type but not on the corresponding associated trait type\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "268ff057421fe17961c63fcfc9e8f4f376c90044", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -9,11 +9,10 @@ LL |     where B : for<'ccx> Bar<'ccx>\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n    |\n-help: consider further restricting this bound with `+ for<'ccx> Bar<'ccx>`\n-  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:44:11\n+help: consider further restricting this bound\n    |\n-LL |     where B : Qux\n-   |           ^^^^^^^\n+LL |     where B : Qux + for<'ccx> Bar<'ccx>\n+   |                   ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2e20d2fe6dda3fcc9d2f5886b053d2d2ee2cc5e0", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -9,11 +9,10 @@ LL | fn want_foo_for_any_tcx<F>(f: &F)\n LL |     where F : for<'tcx> Foo<'tcx>\n    |               ------------------- required by this bound in `want_foo_for_any_tcx`\n    |\n-help: consider further restricting this bound with `+ for<'tcx> Foo<'tcx>`\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:15:11\n+help: consider further restricting this bound\n    |\n-LL |     where F : Foo<'x>\n-   |           ^^^^^^^^^^^\n+LL |     where F : Foo<'x> + for<'tcx> Foo<'tcx>\n+   |                       ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n@@ -26,11 +25,10 @@ LL | fn want_bar_for_any_ccx<B>(b: &B)\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ------------------- required by this bound in `want_bar_for_any_ccx`\n    |\n-help: consider further restricting this bound with `+ for<'ccx> Bar<'ccx>`\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:29:11\n+help: consider further restricting this bound\n    |\n-LL |     where B : Bar<'x>\n-   |           ^^^^^^^^^^^\n+LL |     where B : Bar<'x> + for<'ccx> Bar<'ccx>\n+   |                       ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6cb2c9fb892f3f5a1caa5c85148f0c58a323d1c3", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -4,27 +4,25 @@ error[E0277]: the trait bound `S: std::marker::Copy` is not satisfied in `(S, T)\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `S`\n    |\n-help: consider further restricting this bound with `+ std::marker::Copy`\n-  --> $DIR/issue-55872-1.rs:11:9\n-   |\n-LL | impl<S: Default> Bar for S {\n-   |         ^^^^^^^\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size\n+help: consider further restricting this bound\n+   |\n+LL | impl<S: Default + std::marker::Copy> Bar for S {\n+   |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:5\n    |\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider further restricting this bound with `+ std::marker::Copy`\n-  --> $DIR/issue-55872-1.rs:16:15\n-   |\n-LL |     fn foo<T: Default>() -> Self::E {\n-   |               ^^^^^^^\n    = note: required because it appears within the type `(S, T)`\n    = note: the return type of a function must have a statically known size\n+help: consider further restricting this bound\n+   |\n+LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n+   |                       ^^^^^^^^^^^^^^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-1.rs:16:37"}, {"sha": "ff0c1ca64e2cc6530facfbb3c391e57117c570d0", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | pub struct Foo<T: Bound>(T);\n LL | impl<T> Trait2 for Foo<T> {}\n    |         ^^^^^^ the trait `Bound` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: Bound`\n-  --> $DIR/issue-21837.rs:8:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> Trait2 for Foo<T> {}\n-   |      ^\n+LL | impl<T: Bound> Trait2 for Foo<T> {}\n+   |       ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f135ad3836ea1e004d04dc43bb76d62aa479a1b2", "filename": "src/test/ui/issues/issue-34721.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-34721.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-34721.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.fixed?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -18,7 +18,7 @@ pub mod bar {\n mod baz {\n     use bar;\n     use Foo;\n-    pub fn baz<T: Copy +  Foo>(x: T) -> T {\n+    pub fn baz<T: Foo + Copy>(x: T) -> T {\n         if 0 == 1 {\n             bar::bar(x.zero())\n         } else {"}, {"sha": "6cfed20f43a042fd2a036507e13ddf31336408e9", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -13,11 +13,10 @@ LL |         };\n LL |         x.zero()\n    |         ^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/issue-34721.rs:21:19\n+help: consider further restricting this bound\n    |\n-LL |     pub fn baz<T: Foo>(x: T) -> T {\n-   |                   ^^^\n+LL |     pub fn baz<T: Foo + Copy>(x: T) -> T {\n+   |                       ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "21cd39d01fa25ccf039daafcb2920ba8573e0958", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -9,11 +9,10 @@ LL | impl<T> Complete for T {\n LL |     type Assoc = T;\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/issue-43784-associated-type.rs:13:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> Complete for T {\n-   |      ^\n+LL | impl<T: std::marker::Copy> Complete for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2fb0583ee7d593ae16fe4c96793ee8d2da5f0498", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -4,11 +4,10 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n LL | impl<T> Complete for T {}\n    |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/issue-43784-supertrait.rs:8:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> Complete for T {}\n-   |      ^\n+LL | impl<T: std::marker::Copy> Complete for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a2f70a8c24082dba0613c22cf0abc126e1871fc1", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -5,27 +5,25 @@ LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::marker::Send`\n-  --> $DIR/kindck-impl-type-params.rs:16:6\n-   |\n-LL | fn f<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn f<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/kindck-impl-type-params.rs:16:6\n-   |\n-LL | fn f<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn f<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n@@ -34,27 +32,25 @@ LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::marker::Send`\n-  --> $DIR/kindck-impl-type-params.rs:23:6\n-   |\n-LL | fn g<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/kindck-impl-type-params.rs:23:6\n-   |\n-LL | fn g<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:38:13"}, {"sha": "cc98f1d9f34b805875efd2ef28dc3ef5c6d16946", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -5,27 +5,25 @@ LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::marker::Send`\n-  --> $DIR/kindck-impl-type-params.rs:16:6\n-   |\n-LL | fn f<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn f<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/kindck-impl-type-params.rs:16:6\n-   |\n-LL | fn f<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn f<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n@@ -34,27 +32,25 @@ LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::marker::Send`\n-  --> $DIR/kindck-impl-type-params.rs:23:6\n-   |\n-LL | fn g<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/kindck-impl-type-params.rs:23:6\n-   |\n-LL | fn g<T>(val: T) {\n-   |      ^\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn g<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n   --> $DIR/kindck-impl-type-params.rs:32:13"}, {"sha": "a30bfa66c5a9ca22772fe841b5a242fa305d8cca", "filename": "src/test/ui/moves/moves-based-on-type-no-recursive-stack-closure.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -17,11 +17,10 @@ LL |     let mut r = R {c: Box::new(f)};\n LL |     f(&mut r, false)\n    |     ^ value borrowed here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/moves-based-on-type-no-recursive-stack-closure.rs:30:35\n+help: consider further restricting this bound\n    |\n-LL | fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) + Copy {\n+   |                                                          ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7133a32431a67ded968b5a7c6023298f3dcec7a4", "filename": "src/test/ui/once-cant-call-twice-on-heap.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -8,11 +8,10 @@ LL |     blk();\n LL |     blk();\n    |     ^^^ value used here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/once-cant-call-twice-on-heap.rs:7:10\n+help: consider further restricting this bound\n    |\n-LL | fn foo<F:FnOnce()>(blk: F) {\n-   |          ^^^^^^^^\n+LL | fn foo<F:FnOnce() + Copy>(blk: F) {\n+   |                   ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f8fe6947852fbdd4c9945a6a9427862db2fe60d1", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -8,14 +8,13 @@ LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::marker::Sync`\n-  --> $DIR/phantom-oibit.rs:20:13\n-   |\n-LL | fn not_sync<T>(x: Guard<T>) {\n-   |             ^\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn not_sync<T: std::marker::Sync>(x: Guard<T>) {\n+   |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:26:12\n@@ -27,15 +26,14 @@ LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::marker::Sync`\n-  --> $DIR/phantom-oibit.rs:25:20\n-   |\n-LL | fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n-   |                    ^\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n    = note: required because it appears within the type `Nested<Guard<'_, T>>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn nested_not_sync<T: std::marker::Sync>(x: Nested<Guard<T>>) {\n+   |                     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4e4cad624754e010a5b5cb977980a8070278ffa1", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -4,11 +4,10 @@ error[E0277]: the trait bound `U: std::cmp::Eq` is not satisfied\n LL | default impl<U> Foo<'static, U> for () {}\n    |                 ^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `U: std::cmp::Eq`\n-  --> $DIR/specialization-wfcheck.rs:7:14\n+help: consider restricting type parameter `U`\n    |\n-LL | default impl<U> Foo<'static, U> for () {}\n-   |              ^\n+LL | default impl<U: std::cmp::Eq> Foo<'static, U> for () {}\n+   |               ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a98cb76a683261226683a6fa3ca35779adf273c6", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -8,11 +8,10 @@ LL |     is_send(val);\n    |             ^^^ `impl Sync` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `impl Sync`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/restrict-type-argument.rs:3:23\n+help: consider further restricting this bound\n    |\n-LL | fn use_impl_sync(val: impl Sync) {\n-   |                       ^^^^^^^^^\n+LL | fn use_impl_sync(val: impl Sync + std::marker::Send) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:8:13\n@@ -24,11 +23,10 @@ LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/restrict-type-argument.rs:7:31\n+help: consider further restricting this bound\n    |\n-LL | fn use_where<S>(val: S) where S: Sync {\n-   |                               ^^^^^^^\n+LL | fn use_where<S>(val: S) where S: Sync + std::marker::Send {\n+   |                                       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:12:13\n@@ -40,11 +38,10 @@ LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/restrict-type-argument.rs:11:17\n+help: consider further restricting this bound\n    |\n-LL | fn use_bound<S: Sync>(val: S) {\n-   |                 ^^^^\n+LL | fn use_bound<S: Sync + std::marker::Send>(val: S) {\n+   |                      ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:20:13\n@@ -56,11 +53,10 @@ LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/restrict-type-argument.rs:18:5\n+help: consider further restricting this bound\n    |\n-LL |     Sync\n-   |     ^^^^\n+LL |     Sync + std::marker::Send\n+   |          ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:24:13\n@@ -72,11 +68,10 @@ LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n-help: consider further restricting this bound with `+ std::marker::Send`\n-  --> $DIR/restrict-type-argument.rs:23:47\n+help: consider further restricting this bound\n    |\n-LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug {\n-   |                                               ^^^^^^^^^^^^^^^^^^\n+LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + std::marker::Send {\n+   |                                                                  ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:28:13\n@@ -88,11 +83,10 @@ LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `S`\n-help: consider restricting this type parameter with `S: std::marker::Send`\n-  --> $DIR/restrict-type-argument.rs:27:16\n+help: consider restricting type parameter `S`\n    |\n-LL | fn use_unbound<S>(val: S) {\n-   |                ^\n+LL | fn use_unbound<S: std::marker::Send>(val: S) {\n+   |                 ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ca4980ca305294c814cbc55e896e58608b184a86", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -6,11 +6,10 @@ LL | trait A<T: Foo> {}\n LL | trait B<T> = A<T>;\n    |              ^^^^ the trait `Foo` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: Foo`\n-  --> $DIR/trait-alias-wf.rs:5:9\n+help: consider restricting type parameter `T`\n    |\n-LL | trait B<T> = A<T>;\n-   |         ^\n+LL | trait B<T: Foo> = A<T>;\n+   |          ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9e8e5e08145022a3f8c97927098382deb99845de", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct Foo<T:Trait> {\n LL | impl<T> Foo<T> {\n    |         ^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: Trait`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:13:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> Foo<T> {\n-   |      ^\n+LL | impl<T: Trait> Foo<T> {\n+   |       ^^^^^^^\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n@@ -40,11 +39,10 @@ LL | struct Foo<T:Trait> {\n LL |     b: Foo<U>,\n    |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `U: Trait`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:26:16\n+help: consider restricting type parameter `U`\n    |\n-LL | struct Badness<U> {\n-   |                ^\n+LL | struct Badness<U: Trait> {\n+   |                 ^^^^^^^\n \n error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n@@ -55,11 +53,10 @@ LL | enum Bar<T:Trait> {\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n    |\n-help: consider restricting this type parameter with `V: Trait`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:30:18\n+help: consider restricting type parameter `V`\n    |\n-LL | enum MoreBadness<V> {\n-   |                  ^\n+LL | enum MoreBadness<V: Trait> {\n+   |                   ^^^^^^^\n \n error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5"}, {"sha": "4107c49bd80ce9b6fee0854abed1b8beafaf4137", "filename": "src/test/ui/traits/traits-repeated-supertrait-ambig.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -10,11 +10,10 @@ error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n-help: consider further restricting this bound with `+ CompareTo<i32>`\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:29:17\n+help: consider further restricting this bound\n    |\n-LL | fn with_trait<C:CompareToInts>(c: &C) -> bool {\n-   |                 ^^^^^^^^^^^^^\n+LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n+   |                               ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:34:5\n@@ -34,11 +33,10 @@ LL |     fn same_as(&self, t: T) -> bool;\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n-help: consider further restricting this bound with `+ CompareTo<i32>`\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:37:17\n+help: consider further restricting this bound\n    |\n-LL | fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {\n-   |                 ^^^^^^^^^^^^^\n+LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n+   |                               ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:42:23"}, {"sha": "aff558569eaca038eb0bb5c293d013c1c42d26fe", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -4,11 +4,10 @@ error[E0277]: the trait bound `T: TraitWithAssoc` is not satisfied\n LL | type Foo<V> = impl Trait<V>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitWithAssoc` is not implemented for `T`\n    |\n-help: consider further restricting this bound with `+ TraitWithAssoc`\n-  --> $DIR/bound_reduction2.rs:18:21\n+help: consider further restricting this bound\n    |\n-LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n-   |                     ^^^^^^^^^^^^^^\n+LL | fn foo_desugared<T: TraitWithAssoc + TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n+   |                                    ^^^^^^^^^^^^^^^^\n \n error: defining opaque type use does not fully define opaque type: generic parameter `V` is specified as concrete type `<T as TraitWithAssoc>::Assoc`\n   --> $DIR/bound_reduction2.rs:18:1"}, {"sha": "f7a04263259f60582408b2ae246a24c88e49e363", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -10,12 +10,11 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n LL | type Underconstrained<T: Trait> = impl 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: Trait`\n-  --> $DIR/generic_underconstrained.rs:10:19\n-   |\n-LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n-   |                   ^\n    = note: the return type of a function must have a statically known size\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n+   |                    ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ad160abcbd5738955a5dfc699df0a2bde1cd4f7f", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -20,12 +20,11 @@ LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `U`\n-help: consider restricting this type parameter with `U: std::fmt::Debug`\n-  --> $DIR/generic_underconstrained2.rs:10:21\n-   |\n-LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n-   |                     ^\n    = note: the return type of a function must have a statically known size\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n+   |                      ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n   --> $DIR/generic_underconstrained2.rs:14:1\n@@ -37,12 +36,11 @@ LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `V`\n-help: consider restricting this type parameter with `V: std::fmt::Debug`\n-  --> $DIR/generic_underconstrained2.rs:19:25\n-   |\n-LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n-   |                         ^\n    = note: the return type of a function must have a statically known size\n+help: consider restricting type parameter `V`\n+   |\n+LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n+   |                          ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ca9b85bacba399705992a3555b1ba8e6fafa7cb7", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -54,11 +54,10 @@ LL | trait Super<T: Copy> { }\n LL | trait Base<T = String>: Super<T> { }\n    |                         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/type-check-defaults.rs:21:12\n+help: consider further restricting type parameter `T`\n    |\n-LL | trait Base<T = String>: Super<T> { }\n-   |            ^\n+LL | trait Base<T = String>: Super<T>, T: std::marker::Copy { }\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}, {"sha": "c8411017b3c8da9c3018705463c24a94e735d683", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -8,11 +8,10 @@ LL | fn is_send<T:Send>() {\n    |    -------   ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n-help: consider restricting this type parameter with `T: std::marker::Send`\n-  --> $DIR/typeck-default-trait-impl-send-param.rs:4:8\n+help: consider restricting type parameter `T`\n    |\n-LL | fn foo<T>() {\n-   |        ^\n+LL | fn foo<T: std::marker::Send>() {\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e0499cfe95ce9cbad9aa77c511b14943d270ba53", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -9,11 +9,10 @@ LL |\n LL |     x.clone();\n    |     ^ value borrowed here after move\n    |\n-help: consider further restricting this bound with `+ Copy`\n-  --> $DIR/unop-move-semantics.rs:5:24\n+help: consider further restricting this bound\n    |\n-LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n-   |                        ^^^^^^^^^^^^^^^^^^^^^\n+LL | fn move_then_borrow<T: Not<Output=T> + Clone + Copy>(x: T) {\n+   |                                              ^^^^^^\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/unop-move-semantics.rs:15:6"}, {"sha": "f70f67d414fc316af30052d0d42f9fb65f0821e0", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | trait ExtraCopy<T:Copy> { }\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `where U: std::marker::Copy`\n-  --> $DIR/wf-enum-bound.rs:9:17\n+help: consider further restricting type parameter `U`\n    |\n-LL | enum SomeEnum<T,U>\n-   |                 ^\n+LL |     where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8634b7dba5c36297d473598830024328e9b9705e", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct IsCopy<T:Copy> {\n LL |         f: IsCopy<A>\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n-help: consider restricting this type parameter with `A: std::marker::Copy`\n-  --> $DIR/wf-enum-fields-struct-variant.rs:11:18\n+help: consider restricting type parameter `A`\n    |\n-LL | enum AnotherEnum<A> {\n-   |                  ^\n+LL | enum AnotherEnum<A: std::marker::Copy> {\n+   |                   ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a22b2d11a91cb6c60dbe892d2454b04079dae046", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct IsCopy<T:Copy> {\n LL |     SomeVariant(IsCopy<A>)\n    |                 ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n-help: consider restricting this type parameter with `A: std::marker::Copy`\n-  --> $DIR/wf-enum-fields.rs:11:15\n+help: consider restricting type parameter `A`\n    |\n-LL | enum SomeEnum<A> {\n-   |               ^\n+LL | enum SomeEnum<A: std::marker::Copy> {\n+   |                ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cf1aeac7e3e4142284877c7e1ec7bd8e3f4ae6e3", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL |\n LL | fn foo<T,U>() where T: ExtraCopy<U>\n    |                        ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `where U: std::marker::Copy`\n-  --> $DIR/wf-fn-where-clause.rs:8:10\n+help: consider further restricting type parameter `U`\n    |\n-LL | fn foo<T,U>() where T: ExtraCopy<U>\n-   |          ^\n+LL | fn foo<T,U>() where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n   --> $DIR/wf-fn-where-clause.rs:12:16"}, {"sha": "d44a6f01a47f68661809b65a865409c6c6d28fd2", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | pub struct MySet<T:MyHash> {\n LL |     type Bar = MySet<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyHash` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: MyHash`\n-  --> $DIR/wf-impl-associated-type-trait.rs:16:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> Foo for T {\n-   |      ^\n+LL | impl<T: MyHash> Foo for T {\n+   |       ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "907701440aad5c3eaf5577e002757d3e39e064d5", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct MustBeCopy<T:Copy> {\n LL | fn bar<T>(_: &MustBeCopy<T>)\n    |              ^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/wf-in-fn-arg.rs:10:8\n+help: consider restricting type parameter `T`\n    |\n-LL | fn bar<T>(_: &MustBeCopy<T>)\n-   |        ^\n+LL | fn bar<T: std::marker::Copy>(_: &MustBeCopy<T>)\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2ed4eecefe1351fa5419233413cd4d10fe734ec7", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct MustBeCopy<T:Copy> {\n LL | fn bar<T>() -> MustBeCopy<T>\n    |                ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/wf-in-fn-ret.rs:10:8\n+help: consider restricting type parameter `T`\n    |\n-LL | fn bar<T>() -> MustBeCopy<T>\n-   |        ^\n+LL | fn bar<T: std::marker::Copy>() -> MustBeCopy<T>\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0c699838abd2a73aa00d58638fc86a6b8e1f3886", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct MustBeCopy<T:Copy> {\n LL |     x: fn(MustBeCopy<T>)\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/wf-in-fn-type-arg.rs:7:12\n+help: consider restricting type parameter `T`\n    |\n-LL | struct Bar<T> {\n-   |            ^\n+LL | struct Bar<T: std::marker::Copy> {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3429ab89ffbac3132a5859a88d0ed8cfcc1ad525", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct MustBeCopy<T:Copy> {\n LL |     x: fn() -> MustBeCopy<T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/wf-in-fn-type-ret.rs:7:12\n+help: consider restricting type parameter `T`\n    |\n-LL | struct Foo<T> {\n-   |            ^\n+LL | struct Foo<T: std::marker::Copy> {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d33749d795c599e513670b3846d27996aa3c7007", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | trait MustBeCopy<T:Copy> {\n LL |     where T: MustBeCopy<U>\n    |              ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `where U: std::marker::Copy`\n-  --> $DIR/wf-in-fn-where-clause.rs:9:10\n+help: consider further restricting type parameter `U`\n    |\n-LL | fn bar<T,U>()\n-   |          ^\n+LL |     where T: MustBeCopy<U>, U: std::marker::Copy\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "605dc49784954163d1bcaf30ef4bb09596583285", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct MustBeCopy<T:Copy> {\n LL |     x: dyn Object<MustBeCopy<T>>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/wf-in-obj-type-trait.rs:9:12\n+help: consider restricting type parameter `T`\n    |\n-LL | struct Bar<T> {\n-   |            ^\n+LL | struct Bar<T: std::marker::Copy> {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "da2f8085a8a9e139627d647844ce127a97bf4565", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | trait ExtraCopy<T:Copy> { }\n LL |     fn foo(self) where T: ExtraCopy<U>\n    |                           ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `U: std::marker::Copy`\n-  --> $DIR/wf-inherent-impl-method-where-clause.rs:11:8\n+help: consider restricting type parameter `U`\n    |\n-LL | impl<T,U> Foo<T,U> {\n-   |        ^\n+LL | impl<T,U: std::marker::Copy> Foo<T,U> {\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "28d5bc62556abc47c9a0a056b653d8bdd834d3d3", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | trait ExtraCopy<T:Copy> { }\n LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n    |                             ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `where U: std::marker::Copy`\n-  --> $DIR/wf-inherent-impl-where-clause.rs:11:8\n+help: consider further restricting type parameter `U`\n    |\n-LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n-   |        ^\n+LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "07e569ddac11d0f6cd4557eb9ff51435cfe82a90", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | trait ExtraCopy<T:Copy> { }\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `where U: std::marker::Copy`\n-  --> $DIR/wf-struct-bound.rs:9:21\n+help: consider further restricting type parameter `U`\n    |\n-LL | struct SomeStruct<T,U>\n-   |                     ^\n+LL |     where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f3bce24eace07683537ada5efc152b48ceb5bbab", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | struct IsCopy<T:Copy> {\n LL |     data: IsCopy<A>\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n-help: consider restricting this type parameter with `A: std::marker::Copy`\n-  --> $DIR/wf-struct-field.rs:11:19\n+help: consider restricting type parameter `A`\n    |\n-LL | struct SomeStruct<A> {\n-   |                   ^\n+LL | struct SomeStruct<A: std::marker::Copy> {\n+   |                    ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6cf7f2069b6b745e84476ee500180b894d1dcaf6", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | trait ExtraCopy<T:Copy> { }\n LL |     type Type1: ExtraCopy<T>;\n    |                 ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/wf-trait-associated-type-bound.rs:9:17\n+help: consider restricting type parameter `T`\n    |\n-LL | trait SomeTrait<T> {\n-   |                 ^\n+LL | trait SomeTrait<T: std::marker::Copy> {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b8ffad6d1802bfa3d00e4ca63c1f37faa2ad7da5", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | trait ExtraCopy<T:Copy> { }\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n-help: consider restricting this type parameter with `where U: std::marker::Copy`\n-  --> $DIR/wf-trait-bound.rs:9:19\n+help: consider further restricting type parameter `U`\n    |\n-LL | trait SomeTrait<T,U>\n-   |                   ^\n+LL |     where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "88b4bec0451790efcb78bec79301b1f5dd90d8f6", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL |\n LL | trait SomeTrait<T>: ExtraCopy<T> {\n    |                     ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/wf-trait-superbound.rs:9:17\n+help: consider restricting type parameter `T`\n    |\n-LL | trait SomeTrait<T>: ExtraCopy<T> {\n-   |                 ^\n+LL | trait SomeTrait<T: std::marker::Copy>: ExtraCopy<T> {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fb1471e95bbd9f3a4053468975fdcb81ac2902d1", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | fn require_copy<T: Copy>(x: T) {}\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:6:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> Foo<T> {\n-   |      ^\n+LL | impl<T: std::marker::Copy> Foo<T> {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6c1516d8ac9e727ad8f5732f0a952a83e248d152", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4911572b2da65eeff0b017831614ee32b546b9db/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=4911572b2da65eeff0b017831614ee32b546b9db", "patch": "@@ -7,11 +7,10 @@ LL | fn require_copy<T: Copy>(x: T) {}\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n-help: consider restricting this type parameter with `T: std::marker::Copy`\n-  --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:11:6\n+help: consider restricting type parameter `T`\n    |\n-LL | impl<T> Foo<T> for Bar<T> {\n-   |      ^\n+LL | impl<T: std::marker::Copy> Foo<T> for Bar<T> {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}