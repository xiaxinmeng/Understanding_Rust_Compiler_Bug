{"sha": "a8b71164af36a5a9584c1a2205a1e8216d27cdc7", "node_id": "C_kwDOAAsO6NoAKGE4YjcxMTY0YWYzNmE1YTk1ODRjMWEyMjA1YTFlODIxNmQyN2NkYzc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-05T10:42:08Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-18T11:22:57Z"}, "message": "change `ct_infer` to a delay_span_bug", "tree": {"sha": "c02d6515bc924694b3dbb2b43b0e274ef83e737d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02d6515bc924694b3dbb2b43b0e274ef83e737d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b71164af36a5a9584c1a2205a1e8216d27cdc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b71164af36a5a9584c1a2205a1e8216d27cdc7", "html_url": "https://github.com/rust-lang/rust/commit/a8b71164af36a5a9584c1a2205a1e8216d27cdc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b71164af36a5a9584c1a2205a1e8216d27cdc7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7531d2fdd49966d83830a7b4596c95587b1e9573", "url": "https://api.github.com/repos/rust-lang/rust/commits/7531d2fdd49966d83830a7b4596c95587b1e9573", "html_url": "https://github.com/rust-lang/rust/commit/7531d2fdd49966d83830a7b4596c95587b1e9573"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "6eb3653dd7baa3e01a94cdda91b2059cba1c7a60", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a8b71164af36a5a9584c1a2205a1e8216d27cdc7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b71164af36a5a9584c1a2205a1e8216d27cdc7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a8b71164af36a5a9584c1a2205a1e8216d27cdc7", "patch": "@@ -1210,11 +1210,25 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Error(DelaySpanBugEmitted(())))\n     }\n \n-    /// Like `err` but for constants.\n+    /// Like [`ty_error`] but for constants.\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n-        self.sess\n-            .delay_span_bug(DUMMY_SP, \"ty::ConstKind::Error constructed but no error reported.\");\n+        self.const_error_with_message(\n+            ty,\n+            DUMMY_SP,\n+            \"ty::ConstKind::Error constructed but no error reported\",\n+        )\n+    }\n+\n+    /// Like [`ty_error_with_message`] but for constants.\n+    #[track_caller]\n+    pub fn const_error_with_message<S: Into<MultiSpan>>(\n+        self,\n+        ty: Ty<'tcx>,\n+        span: S,\n+        msg: &str,\n+    ) -> &'tcx Const<'tcx> {\n+        self.sess.delay_span_bug(span, msg);\n         self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n     }\n "}, {"sha": "8204b5cc36182c1197e01845cf477d34680578a2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8b71164af36a5a9584c1a2205a1e8216d27cdc7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b71164af36a5a9584c1a2205a1e8216d27cdc7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a8b71164af36a5a9584c1a2205a1e8216d27cdc7", "patch": "@@ -381,7 +381,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        self.tcx().ty_error_with_message(span, \"bad_placeholder_type\")\n+        self.tcx().ty_error_with_message(span, \"bad placeholder type\")\n     }\n \n     fn ct_infer(\n@@ -390,13 +390,11 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        bad_placeholder(self.tcx(), \"const\", vec![span], \"generic\").emit();\n-        // Typeck doesn't expect erased regions to be returned from `type_of`.\n         let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n             _ => r,\n         });\n-        self.tcx().const_error(ty)\n+        self.tcx().const_error_with_message(ty, span, \"bad placeholder constant\")\n     }\n \n     fn projected_ty_from_poly_trait_ref("}]}