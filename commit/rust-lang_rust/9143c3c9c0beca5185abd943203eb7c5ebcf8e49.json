{"sha": "9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNDNjM2M5YzBiZWNhNTE4NWFiZDk0MzIwM2ViN2M1ZWJjZjhlNDk=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-29T03:21:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-29T03:21:52Z"}, "message": "Rollup merge of #36794 - japaric:target-panic, r=alexcrichton\n\nadd a panic-strategy field to the target specification\n\nNow a target can define its panic strategy in its specification. If a\nuser doesn't specify a panic strategy via the command line, i.e. '-C\npanic', then the compiler will use the panic strategy defined by the\ntarget specification.\n\nCustom targets can pick their panic strategy via the \"panic-strategy\"\nfield of their target specification JSON file. If omitted in the\nspecification, the strategy defaults to \"unwind\".\n\ncloses #36647\n\n---\n\nI checked that compiling an executable for a custom target with \"panic-strategy\" set to \"abort\" doesn't need the \"eh_personality\" lang item and also that standard crates compiled for that custom target didn't contained undefined symbols to _Unwind_Resume. But this needs an actual unit test, any suggestion on how to test this?\n\nMost of the noise in the diff is due to moving `PanicStrategy` from the `rustc` to the `rustc_back` crate.\n\nr? @alexcrichton\ncc @phil-opp", "tree": {"sha": "7c6975321bfa03d2beb89b21fa19747ffa6e9717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c6975321bfa03d2beb89b21fa19747ffa6e9717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "html_url": "https://github.com/rust-lang/rust/commit/9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1ea5cc273d425033ad430c8fbc28bae1013b45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea5cc273d425033ad430c8fbc28bae1013b45a", "html_url": "https://github.com/rust-lang/rust/commit/f1ea5cc273d425033ad430c8fbc28bae1013b45a"}, {"sha": "8a46e78e64dee2c85ba097081ddff027322e93d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a46e78e64dee2c85ba097081ddff027322e93d3", "html_url": "https://github.com/rust-lang/rust/commit/8a46e78e64dee2c85ba097081ddff027322e93d3"}], "stats": {"total": 120, "additions": 83, "deletions": 37}, "files": [{"sha": "4e83cc328f8269c323f2ac864970c67e730415b8", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -32,7 +32,6 @@ use ty::{self, Ty, TyCtxt};\n use mir::repr::Mir;\n use mir::mir_map::MirMap;\n use session::Session;\n-use session::config::PanicStrategy;\n use session::search_paths::PathKind;\n use util::nodemap::{NodeSet, DefIdMap};\n use std::path::PathBuf;\n@@ -46,6 +45,7 @@ use syntax_pos::Span;\n use rustc_back::target::Target;\n use hir;\n use hir::intravisit::Visitor;\n+use rustc_back::PanicStrategy;\n \n pub use self::NativeLibraryKind::{NativeStatic, NativeFramework, NativeUnknown};\n "}, {"sha": "159b7256c7a27a92f369419f1df37f71dcc04c7d", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -64,9 +64,10 @@\n use hir::def_id::CrateNum;\n \n use session;\n-use session::config::{self, PanicStrategy};\n+use session::config;\n use middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n use util::nodemap::FnvHashMap;\n+use rustc_back::PanicStrategy;\n \n /// A list of dependencies for a certain crate type.\n ///\n@@ -357,7 +358,7 @@ fn verify_ok(sess: &session::Session, list: &[Linkage]) {\n     // only one, but we perform validation here that all the panic strategy\n     // compilation modes for the whole DAG are valid.\n     if let Some((cnum, found_strategy)) = panic_runtime {\n-        let desired_strategy = sess.opts.cg.panic.clone();\n+        let desired_strategy = sess.panic_strategy();\n \n         // First up, validate that our selected panic runtime is indeed exactly\n         // our same strategy."}, {"sha": "aa75c7a572bc5ba322f9d3d6219cfc438879f0d8", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -10,10 +10,11 @@\n \n //! Validity checking for weak lang items\n \n-use session::config::{self, PanicStrategy};\n+use session::config;\n use session::Session;\n use middle::lang_items;\n \n+use rustc_back::PanicStrategy;\n use syntax::ast;\n use syntax::parse::token::InternedString;\n use syntax_pos::Span;\n@@ -92,7 +93,7 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n     // symbols. Other panic runtimes ensure that the relevant symbols are\n     // available to link things together, but they're never exercised.\n     let mut whitelisted = HashSet::new();\n-    if sess.opts.cg.panic != PanicStrategy::Unwind {\n+    if sess.panic_strategy() != PanicStrategy::Unwind {\n         whitelisted.insert(lang_items::EhPersonalityLangItem);\n         whitelisted.insert(lang_items::EhUnwindResumeLangItem);\n     }"}, {"sha": "f8b06bf2e97626c6951323634c8037fe5e1af692", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -19,6 +19,7 @@ pub use self::DebugInfoLevel::*;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n+use rustc_back::PanicStrategy;\n use rustc_back::target::Target;\n use lint;\n use middle::cstore;\n@@ -492,21 +493,6 @@ impl Passes {\n     }\n }\n \n-#[derive(Clone, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum PanicStrategy {\n-    Unwind,\n-    Abort,\n-}\n-\n-impl PanicStrategy {\n-    pub fn desc(&self) -> &str {\n-        match *self {\n-            PanicStrategy::Unwind => \"unwind\",\n-            PanicStrategy::Abort => \"abort\",\n-        }\n-    }\n-}\n-\n /// Declare a macro that will define all CodegenOptions/DebuggingOptions fields and parsers all\n /// at once. The goal of this macro is to define an interface that can be\n /// programmatically used by the option parser in order to initialize the struct\n@@ -620,7 +606,8 @@ macro_rules! options {\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, PanicStrategy};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses};\n+        use rustc_back::PanicStrategy;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -732,10 +719,10 @@ macro_rules! options {\n             }\n         }\n \n-        fn parse_panic_strategy(slot: &mut PanicStrategy, v: Option<&str>) -> bool {\n+        fn parse_panic_strategy(slot: &mut Option<PanicStrategy>, v: Option<&str>) -> bool {\n             match v {\n-                Some(\"unwind\") => *slot = PanicStrategy::Unwind,\n-                Some(\"abort\") => *slot = PanicStrategy::Abort,\n+                Some(\"unwind\") => *slot = Some(PanicStrategy::Unwind),\n+                Some(\"abort\") => *slot = Some(PanicStrategy::Abort),\n                 _ => return false\n             }\n             true\n@@ -809,7 +796,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"explicitly enable the cfg(debug_assertions) directive\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"set the inlining threshold for\"),\n-    panic: PanicStrategy = (PanicStrategy::Unwind, parse_panic_strategy,\n+    panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n         [TRACKED], \"panic strategy to compile crate with\"),\n }\n \n@@ -1665,9 +1652,10 @@ mod dep_tracking {\n     use std::collections::BTreeMap;\n     use std::hash::{Hash, SipHasher};\n     use std::path::PathBuf;\n-    use super::{Passes, PanicStrategy, CrateType, OptLevel, DebugInfoLevel,\n+    use super::{Passes, CrateType, OptLevel, DebugInfoLevel,\n                 OutputTypes, Externs, ErrorOutputType};\n     use syntax::feature_gate::UnstableFeatures;\n+    use rustc_back::PanicStrategy;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, &mut SipHasher, ErrorOutputType);\n@@ -1706,6 +1694,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n+    impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n@@ -1772,7 +1761,8 @@ mod tests {\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n     use std::rc::Rc;\n-    use super::{OutputType, OutputTypes, Externs, PanicStrategy};\n+    use super::{OutputType, OutputTypes, Externs};\n+    use rustc_back::PanicStrategy;\n     use syntax::{ast, attr};\n     use syntax::parse::token::InternedString;\n     use syntax::codemap::dummy_spanned;\n@@ -2318,7 +2308,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.cg.panic = PanicStrategy::Abort;\n+        opts.cg.panic = Some(PanicStrategy::Abort);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n "}, {"sha": "f706bab32c80a0a74d6583a463de7c8b3415537c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -15,7 +15,7 @@ use lint;\n use middle::cstore::CrateStore;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{DebugInfoLevel, PanicStrategy};\n+use session::config::DebugInfoLevel;\n use ty::tls;\n use util::nodemap::{NodeMap, FnvHashMap};\n use util::common::duration_to_secs_str;\n@@ -33,6 +33,7 @@ use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n use syntax_pos::{Span, MultiSpan};\n \n+use rustc_back::PanicStrategy;\n use rustc_back::target::Target;\n use rustc_data_structures::flock;\n use llvm;\n@@ -307,9 +308,13 @@ impl Session {\n     pub fn lto(&self) -> bool {\n         self.opts.cg.lto\n     }\n+    /// Returns the panic strategy for this compile session. If the user explicitly selected one\n+    /// using '-C panic', use that, otherwise use the panic strategy defined by the target.\n+    pub fn panic_strategy(&self) -> PanicStrategy {\n+        self.opts.cg.panic.unwrap_or(self.target.target.options.panic_strategy)\n+    }\n     pub fn no_landing_pads(&self) -> bool {\n-        self.opts.debugging_opts.no_landing_pads ||\n-            self.opts.cg.panic == PanicStrategy::Abort\n+        self.opts.debugging_opts.no_landing_pads || self.panic_strategy() == PanicStrategy::Abort\n     }\n     pub fn unstable_options(&self) -> bool {\n         self.opts.debugging_opts.unstable_options"}, {"sha": "c0f358ca8017bd884c3bfa53a892ee58a2e67a95", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -45,8 +45,36 @@ extern crate libc;\n extern crate serialize;\n #[macro_use] extern crate log;\n \n+extern crate serialize as rustc_serialize; // used by deriving\n+\n pub mod tempdir;\n pub mod sha2;\n pub mod target;\n pub mod slice;\n pub mod dynamic_lib;\n+\n+use serialize::json::{Json, ToJson};\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum PanicStrategy {\n+    Unwind,\n+    Abort,\n+}\n+\n+impl PanicStrategy {\n+    pub fn desc(&self) -> &str {\n+        match *self {\n+            PanicStrategy::Unwind => \"unwind\",\n+            PanicStrategy::Abort => \"abort\",\n+        }\n+    }\n+}\n+\n+impl ToJson for PanicStrategy {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            PanicStrategy::Abort => \"abort\".to_json(),\n+            PanicStrategy::Unwind => \"unwind\".to_json(),\n+        }\n+    }\n+}"}, {"sha": "3eddd911749e5251b13818b7fb64c58f5af85e3c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -50,6 +50,8 @@ use std::default::Default;\n use std::io::prelude::*;\n use syntax::abi::Abi;\n \n+use PanicStrategy;\n+\n mod android_base;\n mod apple_base;\n mod apple_ios_base;\n@@ -347,6 +349,9 @@ pub struct TargetOptions {\n     /// Maximum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub max_atomic_width: u64,\n+\n+    /// Panic strategy: \"unwind\" or \"abort\"\n+    pub panic_strategy: PanicStrategy,\n }\n \n impl Default for TargetOptions {\n@@ -396,6 +401,7 @@ impl Default for TargetOptions {\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n             max_atomic_width: 0,\n+            panic_strategy: PanicStrategy::Unwind,\n         }\n     }\n }\n@@ -474,6 +480,19 @@ impl Target {\n                     .map(|o| o.as_u64()\n                          .map(|s| base.options.$key_name = s));\n             } );\n+            ($key_name:ident, PanicStrategy) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s {\n+                        \"unwind\" => base.options.$key_name = PanicStrategy::Unwind,\n+                        \"abort\" => base.options.$key_name = PanicStrategy::Abort,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n+                                                      panic-strategy. Use 'unwind' or 'abort'.\",\n+                                                     s))),\n+                }\n+                Some(Ok(()))\n+            })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).map(|o| o.as_array()\n@@ -534,6 +553,7 @@ impl Target {\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n         key!(max_atomic_width, u64);\n+        try!(key!(panic_strategy, PanicStrategy));\n \n         Ok(base)\n     }\n@@ -676,6 +696,7 @@ impl ToJson for Target {\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);\n         target_option_val!(max_atomic_width);\n+        target_option_val!(panic_strategy);\n \n         Json::Object(d)\n     }"}, {"sha": "0c7f6204438a78803b21456fa7f94fb60153069b", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -19,7 +19,7 @@ use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::LoadedMacro;\n use rustc::session::{config, Session};\n-use rustc::session::config::PanicStrategy;\n+use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, validate_crate_name, ExternCrate};\n@@ -710,7 +710,7 @@ impl<'a> CrateReader<'a> {\n         // The logic for finding the panic runtime here is pretty much the same\n         // as the allocator case with the only addition that the panic strategy\n         // compilation mode also comes into play.\n-        let desired_strategy = self.sess.opts.cg.panic.clone();\n+        let desired_strategy = self.sess.panic_strategy();\n         let mut runtime_found = false;\n         let mut needs_panic_runtime = attr::contains_name(&krate.attrs,\n                                                           \"needs_panic_runtime\");"}, {"sha": "16a5b5402fbe30fc431939cf614f5774dcf32bc1", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -26,7 +26,7 @@ use rustc::hir::map::DefKey;\n use rustc::mir::repr::Mir;\n use rustc::mir::mir_map::MirMap;\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n-use rustc::session::config::PanicStrategy;\n+use rustc_back::PanicStrategy;\n \n use std::path::PathBuf;\n use syntax::ast;"}, {"sha": "038d0f73d5ce8fd579b6b001e48d8387d00ef14e", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -19,7 +19,7 @@ use rustc::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefIndex, DefId};\n use rustc::hir::map::DefKey;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::ExternCrate;\n-use rustc::session::config::PanicStrategy;\n+use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap, FnvHashSet};\n "}, {"sha": "ca4fb77d95ad62dd8941a2641096df7747185e2d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -1293,7 +1293,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: link_meta.crate_hash,\n             disambiguator: tcx.sess.local_crate_disambiguator().to_string(),\n-            panic_strategy: tcx.sess.opts.cg.panic.clone(),\n+            panic_strategy: tcx.sess.panic_strategy(),\n             plugin_registrar_fn: tcx.sess.plugin_registrar_fn.get().map(|id| {\n                 tcx.map.local_def_id(id).index\n             }),"}, {"sha": "58e18bc709e3c41a5dd2cfdb1be6d7227fcbc202", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9143c3c9c0beca5185abd943203eb7c5ebcf8e49/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=9143c3c9c0beca5185abd943203eb7c5ebcf8e49", "patch": "@@ -18,7 +18,7 @@ use rustc::middle::cstore::{LinkagePreference, NativeLibraryKind};\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n-use rustc::session::config::PanicStrategy;\n+use rustc_back::PanicStrategy;\n \n use rustc_serialize as serialize;\n use syntax::{ast, attr};"}]}