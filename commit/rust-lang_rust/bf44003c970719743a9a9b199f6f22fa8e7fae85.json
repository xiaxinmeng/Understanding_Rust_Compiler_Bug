{"sha": "bf44003c970719743a9a9b199f6f22fa8e7fae85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNDQwMDNjOTcwNzE5NzQzYTlhOWIxOTlmNmYyMmZhOGU3ZmFlODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-08T19:22:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-08T19:22:11Z"}, "message": "Auto merge of #32810 - brson:relnotes, r=brson\n\nRelease notes for 1.8\n\ncc @steveklabnik to me the highlights are compound assignment overloading, 32-bit MSVC builds being ready for use, and the cargo improvements.\n\n[Rendered](https://github.com/brson/rust/blob/relnotes/RELEASES.md).", "tree": {"sha": "4f4cddd41070a016cdfd8ab0aa403738d1545b55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f4cddd41070a016cdfd8ab0aa403738d1545b55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf44003c970719743a9a9b199f6f22fa8e7fae85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf44003c970719743a9a9b199f6f22fa8e7fae85", "html_url": "https://github.com/rust-lang/rust/commit/bf44003c970719743a9a9b199f6f22fa8e7fae85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf44003c970719743a9a9b199f6f22fa8e7fae85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e996943784dcbabed433b6906510298ad80903b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e996943784dcbabed433b6906510298ad80903b", "html_url": "https://github.com/rust-lang/rust/commit/7e996943784dcbabed433b6906510298ad80903b"}, {"sha": "94a387e3260338b9b1fa748dd00000739af8790c", "url": "https://api.github.com/repos/rust-lang/rust/commits/94a387e3260338b9b1fa748dd00000739af8790c", "html_url": "https://github.com/rust-lang/rust/commit/94a387e3260338b9b1fa748dd00000739af8790c"}], "stats": {"total": 208, "additions": 208, "deletions": 0}, "files": [{"sha": "5682960709ffa9024c9642110925f37f9ce08b2b", "filename": "RELEASES.md", "status": "modified", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/bf44003c970719743a9a9b199f6f22fa8e7fae85/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf44003c970719743a9a9b199f6f22fa8e7fae85/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=bf44003c970719743a9a9b199f6f22fa8e7fae85", "patch": "@@ -1,3 +1,211 @@\n+Version 1.8.0 (2016-04-14)\n+==========================\n+\n+Language\n+--------\n+\n+* Rust supports overloading of compound assignment statements like\n+  `+=` by implementing the [`AddAssign`], [`SubAssign`],\n+  [`MulAssign`], [`DivAssign`], [`RemAssign`], [`BitAndAssign`],\n+  [`BitOrAssign`], [`BitXorAssign`], [`ShlAssign`], or [`ShrAssign`]\n+  traits. [RFC 953].\n+* Empty structs can be defined with braces, as in `struct Foo { }`, in\n+  addition to the non-braced form, `struct Foo;`. [RFC 218].\n+\n+Libraries\n+---------\n+\n+* Stabilized APIs:\n+  * [`str::encode_utf16`][] (renamed from `utf16_units`)\n+  * [`str::EncodeUtf16`][] (renamed from `Utf16Units`)\n+  * [`Ref::map`]\n+  * [`RefMut::map`]\n+  * [`ptr::drop_in_place`]\n+  * [`time::Instant`]\n+  * [`time::SystemTime`]\n+  * [`Instant::now`]\n+  * [`Instant::duration_since`][] (renamed from `duration_from_earlier`)\n+  * [`Instant::elapsed`]\n+  * [`SystemTime::now`]\n+  * [`SystemTime::duration_since`][] (renamed from `duration_from_earlier`)\n+  * [`SystemTime::elapsed`]\n+  * Various `Add`/`Sub` impls for `Time` and `SystemTime`\n+  * [`SystemTimeError`]\n+  * [`SystemTimeError::duration`]\n+  * Various impls for `SystemTimeError`\n+  * [`UNIX_EPOCH`]\n+  * [`AddAssign`], [`SubAssign`], [`MulAssign`], [`DivAssign`],\n+    [`RemAssign`], [`BitAndAssign`], [`BitOrAssign`],\n+    [`BitXorAssign`], [`ShlAssign`], [`ShrAssign`].\n+* [The `write!` and `writeln!` macros correctly emit errors if any of\n+  their arguments can't be formatted][1.8w].\n+* [Various I/O functions support large files on 32-bit Linux][1.8l].\n+* [The Unix-specific `raw` modules, which contain a number of\n+  redefined C types are deprecated][1.8r], including `os::raw::unix`,\n+  `os::raw::macos`, and `os::raw::linux`. These modules defined types\n+  such as `ino_t` and `dev_t`. The inconsistency of these definitions\n+  across platforms was making it difficult to implement `std`\n+  correctly. Those that need these definitions should use the `libc`\n+  crate. [RFC 1415].\n+* The Unix-specific `MetadataExt` traits, including\n+  `os::unix::fs::MetadataExt`, which expose values such as inode\n+  numbers [no longer return platform-specific types][1.8r], but\n+  instead return widened integers. [RFC 1415].\n+* [`btree_set::{IntoIter, Iter, Range}` are covariant][1.8cv].\n+* [Atomic loads and stores are not volatile][1.8a].\n+* [All types in `sync::mpsc` implement `fmt::Debug`][1.8mp].\n+\n+Performance\n+-----------\n+\n+* [Inlining hash functions lead to a 3% compile-time improvement in\n+  some workloads][1.8h].\n+* When using jemalloc, its symbols are [unprefixed so that it\n+  overrides the libc malloc implementation][1.8h]. This means that for\n+  rustc, LLVM is now using jemalloc, which results in a 6%\n+  compile-time improvement on a specific workload.\n+* [Avoid quadratic growth in function size due to cleanups][1.8cu].\n+\n+Misc\n+----\n+\n+* [32-bit MSVC builds finally implement unwinding][1.8ms].\n+  i686-pc-windows-msvc is now considered a tier-1 platform.\n+* [The `--print targets` flag prints a list of supported targets][1.8t].\n+* [The `--print cfg` flag prints the `cfg`s defined for the current\n+  target][1.8cf].\n+* [`rustc` can be built with an new Cargo-based build system, written\n+  in Rust][1.8b].  It will eventually replace Rust's Makefile-based\n+  build system. To enable it configure with `configure --rustbuild`.\n+* [Errors for non-exhaustive `match` patterns now list up to 3 missing\n+  variants while also indicating the total number of missing variants\n+  if more than 3][1.8m].\n+* [Executable stacks are disabled on Linux and BSD][1.8nx].\n+* The Rust Project now publishes binary releases of the standard\n+  library for a number of tier-2 targets:\n+  `armv7-unknown-linux-gnueabihf`, `powerpc-unknown-linux-gnu`,\n+  `powerpc64-unknown-linux-gnu`, `powerpc64le-unknown-linux-gnu`\n+  `x86_64-rumprun-netbsd`. These can be installed with\n+  tools such as [multirust][1.8mr].\n+\n+Cargo\n+-----\n+\n+* [`cargo init` creates a new Cargo project in the current\n+  directory][1.8ci].  It is otherwise like `cargo new`.\n+* [Cargo has configuration keys for `-v` and\n+  `--color`][1.8cc]. `verbose` and `color`, respectively, go in the\n+  `[term]` section of `.cargo/config`.\n+* [Configuration keys that evaluate to strings or integers can be set\n+  via environment variables][1.8ce]. For example the `build.jobs` key\n+  can be set via `CARGO_BUILD_JOBS`. Environment variables take\n+  precedence over config files.\n+* [Target-specific dependencies support Rust `cfg` syntax for\n+  describing targets][1.8cfg] so that dependencies for multiple\n+  targets can be specified together. [RFC 1361].\n+* [The environment variables `CARGO_TARGET_ROOT`, `RUSTC`, and\n+  `RUSTDOC` take precedence over the `build.target-dir`,\n+  `build.rustc`, and `build.rustdoc` configuration values][1.8cv].\n+* [The child process tree is killed on Windows when Cargo is\n+  killed][1.8ck].\n+* [The `build.target` configuration value sets the target platform,\n+  like `--target`][1.8ct].\n+\n+Compatibility Notes\n+-------------------\n+\n+* [Unstable compiler flags have been further restricted][1.8u]. Since\n+  1.0 `-Z` flags have been considered unstable, and other flags that\n+  were considered unstable additionally required passing `-Z\n+  unstable-options` to access. Unlike unstable language and library\n+  features though, these options have been accessible on the stable\n+  release channel. Going forward, *new unstable flags will not be\n+  available on the stable release channel*, and old unstable flags\n+  will warn about their usage. In the future, all unstable flags will\n+  be unavailable on the stable release channel.\n+* [It is no longer possible to `match` on empty enum variants using\n+  the `Variant(..)` syntax][1.8v]. This has been a warning since 1.6.\n+* The Unix-specific `MetadataExt` traits, including\n+  `os::unix::fs::MetadataExt`, which expose values such as inode\n+  numbers [no longer return platform-specific types][1.8r], but\n+  instead return widened integers. [RFC 1415].\n+* [Modules sourced from the filesystem cannot appear within arbitrary\n+  blocks, but only within other modules][1.8m].\n+* [`--cfg` compiler flags are parsed strictly as identifiers][1.8c].\n+* On Unix, [stack overflow triggers a runtime abort instead of a\n+  SIGSEGV][1.8so].\n+* [`Command::spawn` and its equivalents return an error if any of\n+  its command-line arguments contain interior `NUL`s][1.8n].\n+* [Tuple and unit enum variants from other crates are in the type\n+  namespace][1.8tn].\n+* [On Windows `rustc` emits `.lib` files for the `staticlib` library\n+  type instead of `.a` files][1.8st]. Additionally, for the MSVC\n+  toolchain, `rustc` emits import libraries named `foo.dll.lib`\n+  instead of `foo.lib`.\n+\n+\n+[1.8a]: https://github.com/rust-lang/rust/pull/30962\n+[1.8b]: https://github.com/rust-lang/rust/pull/31123\n+[1.8c]: https://github.com/rust-lang/rust/pull/31530\n+[1.8cc]: https://github.com/rust-lang/cargo/pull/2397\n+[1.8ce]: https://github.com/rust-lang/cargo/pull/2398\n+[1.8cf]: https://github.com/rust-lang/rust/pull/31278\n+[1.8cfg]: https://github.com/rust-lang/cargo/pull/2328\n+[1.8ci]: https://github.com/rust-lang/cargo/pull/2081\n+[1.8ck]: https://github.com/rust-lang/cargo/pull/2370\n+[1.8ct]: https://github.com/rust-lang/cargo/pull/2335\n+[1.8cu]: https://github.com/rust-lang/rust/pull/31390\n+[1.8cv]: https://github.com/rust-lang/cargo/issues/2365\n+[1.8cv]: https://github.com/rust-lang/rust/pull/30998\n+[1.8h]: https://github.com/rust-lang/rust/pull/31460\n+[1.8l]: https://github.com/rust-lang/rust/pull/31668\n+[1.8m]: https://github.com/rust-lang/rust/pull/31020\n+[1.8m]: https://github.com/rust-lang/rust/pull/31534\n+[1.8mp]: https://github.com/rust-lang/rust/pull/30894\n+[1.8mr]: https://users.rust-lang.org/t/multirust-0-8-with-cross-std-installation/4901\n+[1.8ms]: https://github.com/rust-lang/rust/pull/30448\n+[1.8n]: https://github.com/rust-lang/rust/pull/31056\n+[1.8nx]: https://github.com/rust-lang/rust/pull/30859\n+[1.8r]: https://github.com/rust-lang/rust/pull/31551\n+[1.8so]: https://github.com/rust-lang/rust/pull/31333\n+[1.8st]: https://github.com/rust-lang/rust/pull/29520\n+[1.8t]: https://github.com/rust-lang/rust/pull/31358\n+[1.8tn]: https://github.com/rust-lang/rust/pull/30882\n+[1.8u]: https://github.com/rust-lang/rust/pull/31793\n+[1.8v]: https://github.com/rust-lang/rust/pull/31757\n+[1.8w]: https://github.com/rust-lang/rust/pull/31904\n+[RFC 1361]: https://github.com/rust-lang/rfcs/blob/master/text/1361-cargo-cfg-dependencies.md\n+[RFC 1415]: https://github.com/rust-lang/rfcs/blob/master/text/1415-trim-std-os.md\n+[RFC 218]: https://github.com/rust-lang/rfcs/blob/master/text/0218-empty-struct-with-braces.md\n+[RFC 953]: https://github.com/rust-lang/rfcs/blob/master/text/0953-op-assign.md\n+[`AddAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.AddAssign.html\n+[`BitAndAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.BitAndAssign.html\n+[`BitOrAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.BitOrAssign.html\n+[`BitXorAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.BitXorAssign.html\n+[`DivAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.DivAssign.html\n+[`Instant::duration_since`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.duration_since\n+[`Instant::elapsed`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.elapsed\n+[`Instant::now`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html#method.now\n+[`MulAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.MulAssign.html\n+[`Ref::map`]: http://doc.rust-lang.org/nightly/std/cell/struct.Ref.html#method.map\n+[`RefMut::map`]: http://doc.rust-lang.org/nightly/std/cell/struct.RefMut.html#method.map\n+[`RemAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.RemAssign.html\n+[`ShlAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.ShlAssign.html\n+[`ShrAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.ShrAssign.html\n+[`SubAssign`]: http://doc.rust-lang.org/nightly/std/ops/trait.SubAssign.html\n+[`SystemTime::duration_since`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.duration_since\n+[`SystemTime::elapsed`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.elapsed\n+[`SystemTime::now`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html#method.now\n+[`SystemTimeError::duration`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTimeError.html#method.duration\n+[`SystemTimeError`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTimeError.html\n+[`UNIX_EPOCH`]: http://doc.rust-lang.org/nightly/std/time/constant.UNIX_EPOCH.html\n+[`ptr::drop_in_place`]: http://doc.rust-lang.org/nightly/std/ptr/fn.drop_in_place.html\n+[`str::EncodeUtf16`]: http://doc.rust-lang.org/nightly/std/str/struct.EncodeUtf16.html\n+[`str::encode_utf16`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.encode_utf16\n+[`time::Instant`]: http://doc.rust-lang.org/nightly/std/time/struct.Instant.html\n+[`time::SystemTime`]: http://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html\n+\n+\n Version 1.7.0 (2016-03-03)\n ==========================\n "}]}