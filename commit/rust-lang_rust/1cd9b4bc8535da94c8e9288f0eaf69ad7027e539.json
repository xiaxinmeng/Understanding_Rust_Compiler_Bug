{"sha": "1cd9b4bc8535da94c8e9288f0eaf69ad7027e539", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDliNGJjODUzNWRhOTRjOGU5Mjg4ZjBlYWY2OWFkNzAyN2U1Mzk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-30T21:38:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-30T21:38:25Z"}, "message": "Rollup merge of #64891 - SimonSapin:vec-of-fat-raw-ptr, r=sfackler\n\nFix `vec![x; n]` with null raw fat pointer zeroing the pointer metadata\n\nhttps://github.com/rust-lang/rust/pull/49496 introduced specialization based on:\n\n```rust\nunsafe impl<T: ?Sized> IsZero for *mut T {\n    fn is_zero(&self) -> bool {\n        (*self).is_null()\n    }\n}\n```\n\n\u2026 to call `RawVec::with_capacity_zeroed` for creating `Vec<*mut T>`, which is incorrect for fat pointers since `<*mut T>::is_null` only looks at the data component. That is, a fat pointer can be \u201cnull\u201d without being made entirely of zero bits.\n\nThis commit fixes it by removing the `?Sized` bound on this impl (and the corresponding `*const T` one). This regresses `vec![x; n]` with `x` a null raw slice of length zero, but that seems exceptionally uncommon. (Vtable pointers are never null, so raw trait objects would not take the fast path anyway.)\n\nAn alternative to keep the `?Sized` bound (or even generalize to `impl<U: Copy> IsZero for U`) would be to cast to `&[u8]` of length `size_of::<U>()`, but the optimizer seems not to be able to propagate alignment information and sticks with comparing one byte at a time:\n\nhttps://rust.godbolt.org/z/xQFkwL\n\n----\n\nWithout the library change, the new test fails as follows:\n\n```rust\n---- vec::vec_macro_repeating_null_raw_fat_pointer stdout ----\n[src/liballoc/tests/vec.rs:1301] ptr_metadata(raw_dyn) = 0x00005596ef95f9a8\n[src/liballoc/tests/vec.rs:1306] ptr_metadata(vec[0]) = 0x0000000000000000\nthread 'vec::vec_macro_repeating_null_raw_fat_pointer' panicked at 'assertion failed: vec[0] == null_raw_dyn', src/liballoc/tests/vec.rs:1307:5\n```", "tree": {"sha": "bfd9691a233e37c19520bd16ea298e109c05f4e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd9691a233e37c19520bd16ea298e109c05f4e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdknXSCRBK7hj4Ov3rIwAAdHIIACq2rombm3bC71qTNJ+Cr1Ug\nP6CUntbEo3g1J/FYiwcSawlYR9YsgFFeg0zeYmp9VHlp5D50C3rOnuzSP/1Tm6pG\nuVwMjDvwvPBeJx/s6Bzx26pdHKdIeuW8wwRGAlvDVoZAMefi+HGgGggfhXi6/ctr\nJq9Y/s9A75YI8BYf10ouLFF8IrkfdgczsH3J8I7wfTVu/Z6Wi1ZIdhVN/S3bYhtv\ngmxrXUUYaknJEe9vv7HOflyrNMSdYusdJF/xhd4/Fb2tdnrYeaR0Am4A+m6VaGwp\nv/ZRl4BPBKULq4eVjqcmwbsCH90BJWOwMWcX9xOpnY/QycZI9LVS/04EEge4Q/4=\n=eEpk\n-----END PGP SIGNATURE-----\n", "payload": "tree bfd9691a233e37c19520bd16ea298e109c05f4e1\nparent 3add9790abe9225c34bbf2c9177519af063b1966\nparent ce60da497b664bae7b1476ae4502a073dbb12127\nauthor Tyler Mandry <tmandry@gmail.com> 1569879505 -0700\ncommitter GitHub <noreply@github.com> 1569879505 -0700\n\nRollup merge of #64891 - SimonSapin:vec-of-fat-raw-ptr, r=sfackler\n\nFix `vec![x; n]` with null raw fat pointer zeroing the pointer metadata\n\nhttps://github.com/rust-lang/rust/pull/49496 introduced specialization based on:\n\n```rust\nunsafe impl<T: ?Sized> IsZero for *mut T {\n    fn is_zero(&self) -> bool {\n        (*self).is_null()\n    }\n}\n```\n\n\u2026 to call `RawVec::with_capacity_zeroed` for creating `Vec<*mut T>`, which is incorrect for fat pointers since `<*mut T>::is_null` only looks at the data component. That is, a fat pointer can be \u201cnull\u201d without being made entirely of zero bits.\n\nThis commit fixes it by removing the `?Sized` bound on this impl (and the corresponding `*const T` one). This regresses `vec![x; n]` with `x` a null raw slice of length zero, but that seems exceptionally uncommon. (Vtable pointers are never null, so raw trait objects would not take the fast path anyway.)\n\nAn alternative to keep the `?Sized` bound (or even generalize to `impl<U: Copy> IsZero for U`) would be to cast to `&[u8]` of length `size_of::<U>()`, but the optimizer seems not to be able to propagate alignment information and sticks with comparing one byte at a time:\n\nhttps://rust.godbolt.org/z/xQFkwL\n\n----\n\nWithout the library change, the new test fails as follows:\n\n```rust\n---- vec::vec_macro_repeating_null_raw_fat_pointer stdout ----\n[src/liballoc/tests/vec.rs:1301] ptr_metadata(raw_dyn) = 0x00005596ef95f9a8\n[src/liballoc/tests/vec.rs:1306] ptr_metadata(vec[0]) = 0x0000000000000000\nthread 'vec::vec_macro_repeating_null_raw_fat_pointer' panicked at 'assertion failed: vec[0] == null_raw_dyn', src/liballoc/tests/vec.rs:1307:5\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539", "html_url": "https://github.com/rust-lang/rust/commit/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3add9790abe9225c34bbf2c9177519af063b1966", "url": "https://api.github.com/repos/rust-lang/rust/commits/3add9790abe9225c34bbf2c9177519af063b1966", "html_url": "https://github.com/rust-lang/rust/commit/3add9790abe9225c34bbf2c9177519af063b1966"}, {"sha": "ce60da497b664bae7b1476ae4502a073dbb12127", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce60da497b664bae7b1476ae4502a073dbb12127", "html_url": "https://github.com/rust-lang/rust/commit/ce60da497b664bae7b1476ae4502a073dbb12127"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "98d013dfa2b57616889bb8b3150111077fe90fcf", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=1cd9b4bc8535da94c8e9288f0eaf69ad7027e539", "patch": "@@ -1281,3 +1281,51 @@ fn test_stable_push_pop() {\n     v.pop().unwrap();\n     assert_eq!(*v0, 13);\n }\n+\n+// https://github.com/rust-lang/rust/pull/49496 introduced specialization based on:\n+//\n+// ```\n+// unsafe impl<T: ?Sized> IsZero for *mut T {\n+//     fn is_zero(&self) -> bool {\n+//         (*self).is_null()\n+//     }\n+// }\n+// ```\n+//\n+// \u2026 to call `RawVec::with_capacity_zeroed` for creating `Vec<*mut T>`,\n+// which is incorrect for fat pointers since `<*mut T>::is_null` only looks at the data component.\n+// That is, a fat pointer can be \u201cnull\u201d without being made entirely of zero bits.\n+#[test]\n+fn vec_macro_repeating_null_raw_fat_pointer() {\n+    let raw_dyn = &mut (|| ()) as &mut dyn Fn() as *mut dyn Fn();\n+    let vtable = dbg!(ptr_metadata(raw_dyn));\n+    let null_raw_dyn = ptr_from_raw_parts(std::ptr::null_mut(), vtable);\n+    assert!(null_raw_dyn.is_null());\n+\n+    let vec = vec![null_raw_dyn; 1];\n+    dbg!(ptr_metadata(vec[0]));\n+    assert!(vec[0] == null_raw_dyn);\n+\n+    // Polyfill for https://github.com/rust-lang/rfcs/pull/2580\n+\n+    fn ptr_metadata(ptr: *mut dyn Fn()) -> *mut () {\n+        unsafe {\n+            std::mem::transmute::<*mut dyn Fn(), DynRepr>(ptr).vtable\n+        }\n+    }\n+\n+    fn ptr_from_raw_parts(data: *mut (), vtable: *mut()) -> *mut dyn Fn() {\n+        unsafe {\n+            std::mem::transmute::<DynRepr, *mut dyn Fn()>(DynRepr {\n+                data,\n+                vtable\n+            })\n+        }\n+    }\n+\n+    #[repr(C)]\n+    struct DynRepr {\n+        data: *mut (),\n+        vtable: *mut (),\n+    }\n+}"}, {"sha": "f6f59ae408272a31223490570a7052961543dd45", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd9b4bc8535da94c8e9288f0eaf69ad7027e539/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=1cd9b4bc8535da94c8e9288f0eaf69ad7027e539", "patch": "@@ -1734,14 +1734,14 @@ impl_is_zero!(char, |x| x == '\\0');\n impl_is_zero!(f32, |x: f32| x.to_bits() == 0);\n impl_is_zero!(f64, |x: f64| x.to_bits() == 0);\n \n-unsafe impl<T: ?Sized> IsZero for *const T {\n+unsafe impl<T> IsZero for *const T {\n     #[inline]\n     fn is_zero(&self) -> bool {\n         (*self).is_null()\n     }\n }\n \n-unsafe impl<T: ?Sized> IsZero for *mut T {\n+unsafe impl<T> IsZero for *mut T {\n     #[inline]\n     fn is_zero(&self) -> bool {\n         (*self).is_null()"}]}