{"sha": "16047d46a10813a25e956e659b8861cc67c20cd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MDQ3ZDQ2YTEwODEzYTI1ZTk1NmU2NTliODg2MWNjNjdjMjBjZDI=", "commit": {"author": {"name": "yuk1ty", "email": "yuki.mul.tiplus@gmail.com", "date": "2020-09-21T03:14:28Z"}, "committer": {"name": "yuk1ty", "email": "yuki.mul.tiplus@gmail.com", "date": "2020-09-21T03:14:28Z"}, "message": "fix typo in docs and comments", "tree": {"sha": "9d6a65b92c728d52093529dec22757fe420324ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6a65b92c728d52093529dec22757fe420324ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16047d46a10813a25e956e659b8861cc67c20cd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16047d46a10813a25e956e659b8861cc67c20cd2", "html_url": "https://github.com/rust-lang/rust/commit/16047d46a10813a25e956e659b8861cc67c20cd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16047d46a10813a25e956e659b8861cc67c20cd2/comments", "author": {"login": "yuk1ty", "id": 24487281, "node_id": "MDQ6VXNlcjI0NDg3Mjgx", "avatar_url": "https://avatars.githubusercontent.com/u/24487281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuk1ty", "html_url": "https://github.com/yuk1ty", "followers_url": "https://api.github.com/users/yuk1ty/followers", "following_url": "https://api.github.com/users/yuk1ty/following{/other_user}", "gists_url": "https://api.github.com/users/yuk1ty/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuk1ty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuk1ty/subscriptions", "organizations_url": "https://api.github.com/users/yuk1ty/orgs", "repos_url": "https://api.github.com/users/yuk1ty/repos", "events_url": "https://api.github.com/users/yuk1ty/events{/privacy}", "received_events_url": "https://api.github.com/users/yuk1ty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yuk1ty", "id": 24487281, "node_id": "MDQ6VXNlcjI0NDg3Mjgx", "avatar_url": "https://avatars.githubusercontent.com/u/24487281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuk1ty", "html_url": "https://github.com/yuk1ty", "followers_url": "https://api.github.com/users/yuk1ty/followers", "following_url": "https://api.github.com/users/yuk1ty/following{/other_user}", "gists_url": "https://api.github.com/users/yuk1ty/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuk1ty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuk1ty/subscriptions", "organizations_url": "https://api.github.com/users/yuk1ty/orgs", "repos_url": "https://api.github.com/users/yuk1ty/repos", "events_url": "https://api.github.com/users/yuk1ty/events{/privacy}", "received_events_url": "https://api.github.com/users/yuk1ty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f9f0b384a0a3c997c1ea8f838f5591f12f96633", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9f0b384a0a3c997c1ea8f838f5591f12f96633", "html_url": "https://github.com/rust-lang/rust/commit/0f9f0b384a0a3c997c1ea8f838f5591f12f96633"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "6aa28d04ae197ff5ca3a1a7ed2a9c3816e719865", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -733,7 +733,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n }\n \n /// Check if this enum can be safely exported based on the \"nullable pointer optimization\". If it\n-/// can, return the the type that `ty` can be safely converted to, otherwise return `None`.\n+/// can, return the type that `ty` can be safely converted to, otherwise return `None`.\n /// Currently restricted to function pointers, boxes, references, `core::num::NonZero*`,\n /// `core::ptr::NonNull`, and `#[repr(transparent)]` newtypes.\n /// FIXME: This duplicates code in codegen."}, {"sha": "a8b748833556d8e87df876add7b8bf7d4c8d39e5", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -33,7 +33,7 @@ impl PredecessorCache {\n         self.cache = OnceCell::new();\n     }\n \n-    /// Returns the the predecessor graph for this MIR.\n+    /// Returns the predecessor graph for this MIR.\n     #[inline]\n     pub(super) fn compute(\n         &self,"}, {"sha": "baaf6f27ee821377069a336a1e6532723b16d209", "filename": "compiler/rustc_mir/src/borrow_check/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> MemberConstraintSet<'tcx, ty::RegionVid> {\n     /// Pushes a member constraint into the set.\n     ///\n     /// The input member constraint `m_c` is in the form produced by\n-    /// the the `rustc_middle::infer` code.\n+    /// the `rustc_middle::infer` code.\n     ///\n     /// The `to_region_vid` callback fn is used to convert the regions\n     /// within into `RegionVid` format -- it typically consults the"}, {"sha": "a9b8a6181d499b443221e99e84c435cb53b2fe66", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let target_block = self.cfg.start_new_block();\n             let mut schedule_drops = true;\n             // We keep a stack of all of the bindings and type asciptions\n-            // from the the parent candidates that we visit, that also need to\n+            // from the parent candidates that we visit, that also need to\n             // be bound for each candidate.\n             traverse_candidate(\n                 candidate,"}, {"sha": "d42a786a18fe9cfcebd1ffd59f20d195312b8620", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -67,7 +67,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a type suitable for a function or function pointer parameter.\n     /// The difference from `parse_ty` is that this version allows `...`\n-    /// (`CVarArgs`) at the top level of the the type.\n+    /// (`CVarArgs`) at the top level of the type.\n     pub(super) fn parse_ty_for_param(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(AllowPlus::Yes, RecoverQPath::Yes, AllowCVariadic::Yes)\n     }"}, {"sha": "65a26284186bdb2647e03eb4cb1583e609897eb1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -110,7 +110,7 @@ symbols! {\n     // called `sym::proc_macro` because then it's easy to mistakenly think it\n     // represents \"proc_macro\".\n     //\n-    // As well as the symbols listed, there are symbols for the the strings\n+    // As well as the symbols listed, there are symbols for the strings\n     // \"0\", \"1\", ..., \"9\", which are accessible via `sym::integer`.\n     //\n     // The proc macro will abort if symbols are not in alphabetical order (as"}, {"sha": "351167105ec7a689350c41656d991d6033069497", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -30,7 +30,7 @@\n //! ## No interop with C required\n //!\n //! By default the `crt-static` target feature is enabled, and when enabled\n-//! this means that the the bundled version of `libc.a` found in `liblibc.rlib`\n+//! this means that the bundled version of `libc.a` found in `liblibc.rlib`\n //! is used. This isn't intended really for interoperation with a C because it\n //! may be the case that Rust's bundled C library is incompatible with a\n //! foreign-compiled C library. In this use case, though, we use `rust-lld` and"}, {"sha": "b85ffb535ff9d23b4550e211112632bc586de8cd", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16047d46a10813a25e956e659b8861cc67c20cd2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=16047d46a10813a25e956e659b8861cc67c20cd2", "patch": "@@ -1843,7 +1843,7 @@ fn binding_opaque_type_cycle_error(\n ) {\n     let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n     err.span_label(span, \"cannot resolve opaque type\");\n-    // Find the the owner that declared this `impl Trait` type.\n+    // Find the owner that declared this `impl Trait` type.\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let mut prev_hir_id = hir_id;\n     let mut hir_id = tcx.hir().get_parent_node(hir_id);"}]}