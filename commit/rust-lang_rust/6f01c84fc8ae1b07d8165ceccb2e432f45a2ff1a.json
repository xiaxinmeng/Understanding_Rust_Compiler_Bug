{"sha": "6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMDFjODRmYzhhZTFiMDdkODE2NWNlY2NiMmU0MzJmNDVhMmZmMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T10:34:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T10:34:21Z"}, "message": "Auto merge of #42798 - stepancheg:args-debug, r=sfackler\n\nBetter Debug for Args and ArgsOs\n\nDisplay actual args instead of two dots.", "tree": {"sha": "65497205cc0fa9582e0612e82374799752ad36f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65497205cc0fa9582e0612e82374799752ad36f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "html_url": "https://github.com/rust-lang/rust/commit/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c8b92dc1c160c86d7ba6f08ee718a5324de136", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c8b92dc1c160c86d7ba6f08ee718a5324de136", "html_url": "https://github.com/rust-lang/rust/commit/03c8b92dc1c160c86d7ba6f08ee718a5324de136"}, {"sha": "275f9a04af6191e3aee3852a5a1713130f635164", "url": "https://api.github.com/repos/rust-lang/rust/commits/275f9a04af6191e3aee3852a5a1713130f635164", "html_url": "https://github.com/rust-lang/rust/commit/275f9a04af6191e3aee3852a5a1713130f635164"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "1dfae0ce83f62bbbe177acf96425e92a62d47c12", "filename": "src/libstd/env.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "patch": "@@ -741,7 +741,9 @@ impl DoubleEndedIterator for Args {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Args {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(\"Args { .. }\")\n+        f.debug_struct(\"Args\")\n+            .field(\"inner\", &self.inner.inner.inner_debug())\n+            .finish()\n     }\n }\n \n@@ -766,7 +768,9 @@ impl DoubleEndedIterator for ArgsOs {\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for ArgsOs {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(\"ArgsOs { .. }\")\n+        f.debug_struct(\"ArgsOs\")\n+            .field(\"inner\", &self.inner.inner_debug())\n+            .finish()\n     }\n }\n \n@@ -1114,4 +1118,14 @@ mod tests {\n                         r#\"\"c:\\te;st\";c:\\\"#));\n         assert!(join_paths([r#\"c:\\te\"st\"#].iter().cloned()).is_err());\n     }\n+\n+    #[test]\n+    fn args_debug() {\n+        assert_eq!(\n+            format!(\"Args {{ inner: {:?} }}\", args().collect::<Vec<_>>()),\n+            format!(\"{:?}\", args()));\n+        assert_eq!(\n+            format!(\"ArgsOs {{ inner: {:?} }}\", args_os().collect::<Vec<_>>()),\n+            format!(\"{:?}\", args_os()));\n     }\n+}"}, {"sha": "6e44ad705fe72b28ae828308c515db95ee85d1b3", "filename": "src/libstd/sys/redox/args.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs?ref=6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "patch": "@@ -35,6 +35,12 @@ pub struct Args {\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl Args {\n+    pub fn inner_debug(&self) -> &[OsString] {\n+        self.iter.as_slice()\n+    }\n+}\n+\n impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.iter.next() }"}, {"sha": "bbdcb5d36167ea1f608aeb6dc0481148643dab6f", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "patch": "@@ -35,6 +35,12 @@ pub struct Args {\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl Args {\n+    pub fn inner_debug(&self) -> &[OsString] {\n+        self.iter.as_slice()\n+    }\n+}\n+\n impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.iter.next() }"}, {"sha": "4784633edc14d1d229a623bee0a35e1268949556", "filename": "src/libstd/sys/windows/args.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs?ref=6f01c84fc8ae1b07d8165ceccb2e432f45a2ff1a", "patch": "@@ -16,6 +16,7 @@ use slice;\n use ops::Range;\n use ffi::OsString;\n use libc::{c_int, c_void};\n+use fmt;\n \n pub unsafe fn init(_argc: isize, _argv: *const *const u8) { }\n \n@@ -39,6 +40,36 @@ pub struct Args {\n     cur: *mut *mut u16,\n }\n \n+pub struct ArgsInnerDebug<'a> {\n+    args: &'a Args,\n+}\n+\n+impl<'a> fmt::Debug for ArgsInnerDebug<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.write_str(\"[\")?;\n+        let mut first = true;\n+        for i in self.args.range.clone() {\n+            if !first {\n+                f.write_str(\", \")?;\n+            }\n+            first = false;\n+\n+            // Here we do allocation which could be avoided.\n+            fmt::Debug::fmt(&unsafe { os_string_from_ptr(*self.args.cur.offset(i)) }, f)?;\n+        }\n+        f.write_str(\"]\")?;\n+        Ok(())\n+    }\n+}\n+\n+impl Args {\n+    pub fn inner_debug(&self) -> ArgsInnerDebug {\n+        ArgsInnerDebug {\n+            args: self\n+        }\n+    }\n+}\n+\n unsafe fn os_string_from_ptr(ptr: *mut u16) -> OsString {\n     let mut len = 0;\n     while *ptr.offset(len) != 0 { len += 1; }"}]}