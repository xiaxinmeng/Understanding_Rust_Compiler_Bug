{"sha": "79d5fefa2508212ec2cc46c1069819a988f23598", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZDVmZWZhMjUwODIxMmVjMmNjNDZjMTA2OTgxOWE5ODhmMjM1OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T07:14:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T07:14:55Z"}, "message": "Auto merge of #27275 - nrc:save-use, r=brson\n\nr? @brson", "tree": {"sha": "18d8f912b321aebdfa99e5c8130fe2dbc678e559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d8f912b321aebdfa99e5c8130fe2dbc678e559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d5fefa2508212ec2cc46c1069819a988f23598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d5fefa2508212ec2cc46c1069819a988f23598", "html_url": "https://github.com/rust-lang/rust/commit/79d5fefa2508212ec2cc46c1069819a988f23598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d5fefa2508212ec2cc46c1069819a988f23598/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6c6ce917bd6af9c5d9315708ae6be3ba0b7e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6c6ce917bd6af9c5d9315708ae6be3ba0b7e91", "html_url": "https://github.com/rust-lang/rust/commit/ff6c6ce917bd6af9c5d9315708ae6be3ba0b7e91"}, {"sha": "f91a20bbfb7594c22b26f4216d7eba72c33f6ff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91a20bbfb7594c22b26f4216d7eba72c33f6ff8", "html_url": "https://github.com/rust-lang/rust/commit/f91a20bbfb7594c22b26f4216d7eba72c33f6ff8"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "d1204c7a0a3eda9c6c76f8c1a943ce54485d0dc9", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79d5fefa2508212ec2cc46c1069819a988f23598/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d5fefa2508212ec2cc46c1069819a988f23598/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=79d5fefa2508212ec2cc46c1069819a988f23598", "patch": "@@ -671,6 +671,15 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         }\n \n         let path_data = self.save_ctxt.get_path_data(id, path);\n+        let path_data = match path_data {\n+            Some(pd) => pd,\n+            None => {\n+                self.tcx.sess.span_bug(path.span,\n+                                       &format!(\"Unexpected def kind while looking \\\n+                                                 up path in `{}`\",\n+                                                self.span.snippet(path.span)))\n+            }\n+        };\n         match path_data {\n             Data::VariableRefData(ref vrd) => {\n                 self.fmt.ref_str(ref_kind.unwrap_or(recorder::VarRef),"}, {"sha": "e812725e398dafcc1024874e283892d1b5499f9c", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/79d5fefa2508212ec2cc46c1069819a988f23598/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d5fefa2508212ec2cc46c1069819a988f23598/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=79d5fefa2508212ec2cc46c1069819a988f23598", "patch": "@@ -63,6 +63,8 @@ pub enum Data {\n     VariableRefData(VariableRefData),\n     /// Data for a reference to a type or trait.\n     TypeRefData(TypeRefData),\n+    /// Data for a reference to a module.\n+    ModRefData(ModRefData),\n     /// Data about a function call.\n     FunctionCallData(FunctionCallData),\n     /// Data about a method call.\n@@ -143,6 +145,14 @@ pub struct TypeRefData {\n     pub ref_id: DefId,\n }\n \n+/// Data for a reference to a module.\n+#[derive(Debug)]\n+pub struct ModRefData {\n+    pub span: Span,\n+    pub scope: NodeId,\n+    pub ref_id: DefId,\n+}\n+\n /// Data about a function call.\n #[derive(Debug)]\n pub struct FunctionCallData {\n@@ -498,7 +508,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ExprPath(_, ref path) => {\n-                Some(self.get_path_data(expr.id, path))\n+                self.get_path_data(expr.id, path)\n             }\n             _ => {\n                 // FIXME\n@@ -510,7 +520,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_path_data(&self,\n                          id: NodeId,\n                          path: &ast::Path)\n-                         -> Data {\n+                         -> Option<Data> {\n         let def_map = self.tcx.def_map.borrow();\n         if !def_map.contains_key(&id) {\n             self.tcx.sess.span_bug(path.span,\n@@ -525,22 +535,22 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             def::DefConst(..) |\n             def::DefAssociatedConst(..) |\n             def::DefVariant(..) => {\n-                Data::VariableRefData(VariableRefData {\n+                Some(Data::VariableRefData(VariableRefData {\n                     name: self.span_utils.snippet(sub_span.unwrap()),\n                     span: sub_span.unwrap(),\n                     scope: self.enclosing_scope(id),\n                     ref_id: def.def_id(),\n-                })\n+                }))\n             }\n             def::DefStruct(def_id) |\n             def::DefTy(def_id, _) |\n             def::DefTrait(def_id) |\n             def::DefTyParam(_, _, def_id, _) => {\n-                Data::TypeRefData(TypeRefData {\n+                Some(Data::TypeRefData(TypeRefData {\n                     span: sub_span.unwrap(),\n                     ref_id: def_id,\n                     scope: self.enclosing_scope(id),\n-                })\n+                }))\n             }\n             def::DefMethod(decl_id, provenence) => {\n                 let sub_span = self.span_utils.sub_span_for_meth_name(path.span);\n@@ -571,25 +581,28 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 } else {\n                     None\n                 };\n-                Data::MethodCallData(MethodCallData {\n+                Some(Data::MethodCallData(MethodCallData {\n                     span: sub_span.unwrap(),\n                     scope: self.enclosing_scope(id),\n                     ref_id: def_id,\n                     decl_id: Some(decl_id),\n-                })\n+                }))\n             },\n             def::DefFn(def_id, _) => {\n-                Data::FunctionCallData(FunctionCallData {\n+                Some(Data::FunctionCallData(FunctionCallData {\n                     ref_id: def_id,\n                     span: sub_span.unwrap(),\n                     scope: self.enclosing_scope(id),\n-                })\n+                }))\n+            }\n+            def::DefMod(def_id) => {\n+                Some(Data::ModRefData(ModRefData {\n+                    ref_id: def_id,\n+                    span: sub_span.unwrap(),\n+                    scope: self.enclosing_scope(id),\n+                }))\n             }\n-            _ => self.tcx.sess.span_bug(path.span,\n-                                        &format!(\"Unexpected def kind while looking \\\n-                                                  up path in `{}`: `{:?}`\",\n-                                                 self.span_utils.snippet(path.span),\n-                                                 def)),\n+            _ => None,\n         }\n     }\n "}]}