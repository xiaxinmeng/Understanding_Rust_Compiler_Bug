{"sha": "5953c100d1e9eea5ca70f185e905ea0773a34eb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NTNjMTAwZDFlOWVlYTVjYTcwZjE4NWU5MDVlYTA3NzNhMzRlYjU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-02T11:57:30Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-05T17:36:50Z"}, "message": "Use #[rustc_std_internal_symbol] instead of #[no_mangle]", "tree": {"sha": "2c9b8874d42a001b879b878ac514c827422cf1da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9b8874d42a001b879b878ac514c827422cf1da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5953c100d1e9eea5ca70f185e905ea0773a34eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5953c100d1e9eea5ca70f185e905ea0773a34eb5", "html_url": "https://github.com/rust-lang/rust/commit/5953c100d1e9eea5ca70f185e905ea0773a34eb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5953c100d1e9eea5ca70f185e905ea0773a34eb5/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "html_url": "https://github.com/rust-lang/rust/commit/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "1af93ff4ada57a4b390ac3b113be95e3cd1ac44c", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=5953c100d1e9eea5ca70f185e905ea0773a34eb5", "patch": "@@ -89,7 +89,7 @@ pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n // binaries, but it should never be called as we don't link in an unwinding\n // runtime at all.\n pub mod personalities {\n-    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     #[cfg(not(any(\n         all(target_arch = \"wasm32\", not(target_os = \"emscripten\"),),\n         all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86_64\",),\n@@ -98,7 +98,7 @@ pub mod personalities {\n \n     // On x86_64-pc-windows-gnu we use our own personality function that needs\n     // to return `ExceptionContinueSearch` as we're passing on all our frames.\n-    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     #[cfg(all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86_64\"))]\n     pub extern \"C\" fn rust_eh_personality(\n         _record: usize,\n@@ -114,16 +114,16 @@ pub mod personalities {\n     //\n     // Note that we don't execute landing pads, so this is never called, so it's\n     // body is empty.\n-    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     #[cfg(all(bootstrap, target_os = \"windows\", target_env = \"gnu\"))]\n     pub extern \"C\" fn rust_eh_unwind_resume() {}\n \n     // These two are called by our startup objects on i686-pc-windows-gnu, but\n     // they don't need to do anything so the bodies are nops.\n-    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     #[cfg(all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86\"))]\n     pub extern \"C\" fn rust_eh_register_frames() {}\n-    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     #[cfg(all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86\"))]\n     pub extern \"C\" fn rust_eh_unregister_frames() {}\n }"}, {"sha": "117246aa6c95e38ab940b225601ed1e02926599b", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=5953c100d1e9eea5ca70f185e905ea0773a34eb5", "patch": "@@ -94,7 +94,6 @@ extern \"C\" fn exception_cleanup(ptr: *mut libc::c_void) -> DestructorRet {\n }\n \n #[lang = \"eh_personality\"]\n-#[no_mangle]\n unsafe extern \"C\" fn rust_eh_personality(\n     version: c_int,\n     actions: uw::_Unwind_Action,"}, {"sha": "9c032b30341e9da44c75bd3cb2eb1e2f956d8f06", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=5953c100d1e9eea5ca70f185e905ea0773a34eb5", "patch": "@@ -130,7 +130,6 @@ cfg_if::cfg_if! {\n         //\n         // iOS uses the default routine instead since it uses SjLj unwinding.\n         #[lang = \"eh_personality\"]\n-        #[no_mangle]\n         unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,\n                                                  exception_object: *mut uw::_Unwind_Exception,\n                                                  context: *mut uw::_Unwind_Context)\n@@ -264,7 +263,6 @@ cfg_if::cfg_if! {\n                 // On x86_64 MinGW targets, the unwinding mechanism is SEH however the unwind\n                 // handler data (aka LSDA) uses GCC-compatible encoding.\n                 #[lang = \"eh_personality\"]\n-                #[no_mangle]\n                 #[allow(nonstandard_style)]\n                 unsafe extern \"C\" fn rust_eh_personality(exceptionRecord: *mut uw::EXCEPTION_RECORD,\n                         establisherFrame: uw::LPVOID,\n@@ -280,7 +278,6 @@ cfg_if::cfg_if! {\n             } else {\n                 // The personality routine for most of our targets.\n                 #[lang = \"eh_personality\"]\n-                #[no_mangle]\n                 unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n                         actions: uw::_Unwind_Action,\n                         exception_class: uw::_Unwind_Exception_Class,\n@@ -351,12 +348,12 @@ pub mod eh_frame_registry {\n         fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n     }\n \n-    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern \"C\" fn rust_eh_register_frames(eh_frame_begin: *const u8, object: *mut u8) {\n         __register_frame_info(eh_frame_begin, object);\n     }\n \n-    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n     pub unsafe extern \"C\" fn rust_eh_unregister_frames(eh_frame_begin: *const u8, object: *mut u8) {\n         __deregister_frame_info(eh_frame_begin, object);\n     }"}, {"sha": "20331e8808cada6f33a2c913b70c05b1c62e45b1", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5953c100d1e9eea5ca70f185e905ea0773a34eb5/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=5953c100d1e9eea5ca70f185e905ea0773a34eb5", "patch": "@@ -72,7 +72,7 @@ extern \"C\" {\n \n mod dwarf;\n \n-#[no_mangle]\n+#[rustc_std_internal_symbol]\n pub unsafe extern \"C\" fn __rust_panic_cleanup(\n     payload: TryPayload,\n ) -> *mut (dyn Any + Send + 'static) {\n@@ -81,7 +81,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(\n \n // Entry point for raising an exception, just delegates to the platform-specific\n // implementation.\n-#[no_mangle]\n+#[rustc_std_internal_symbol]\n #[unwind(allowed)]\n pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n     let payload = payload as *mut &mut dyn BoxMeUp;"}]}