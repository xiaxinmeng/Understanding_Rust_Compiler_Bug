{"sha": "774ea145ec4525e63ba97502306036e773c19eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NGVhMTQ1ZWM0NTI1ZTYzYmE5NzUwMjMwNjAzNmU3NzNjMTllY2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-10T16:27:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T03:00:51Z"}, "message": "make more code use dvec", "tree": {"sha": "a5dbc6d74456fda9919b81364089390584eeb3b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5dbc6d74456fda9919b81364089390584eeb3b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774ea145ec4525e63ba97502306036e773c19eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774ea145ec4525e63ba97502306036e773c19eca", "html_url": "https://github.com/rust-lang/rust/commit/774ea145ec4525e63ba97502306036e773c19eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774ea145ec4525e63ba97502306036e773c19eca/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f969da8824c4a2a25f67a1576907e7de985d97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f969da8824c4a2a25f67a1576907e7de985d97c", "html_url": "https://github.com/rust-lang/rust/commit/0f969da8824c4a2a25f67a1576907e7de985d97c"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "4a2d03ec0c8fefc4730398c836df962c7356090e", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/774ea145ec4525e63ba97502306036e773c19eca/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774ea145ec4525e63ba97502306036e773c19eca/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=774ea145ec4525e63ba97502306036e773c19eca", "patch": "@@ -17,6 +17,7 @@ import std::{list};\n import std::list::{list, nil, cons};\n import option::{is_none, is_some};\n import syntax::print::pprust::*;\n+import dvec::{dvec, extensions};\n \n export resolve_crate;\n export def_map, ext_map, exp_map, impl_map;\n@@ -1798,7 +1799,7 @@ fn check_arm(e: @env, a: ast::arm, &&x: (), v: vt<()>) {\n     visit::visit_arm(a, x, v);\n     let ch0 = checker(*e, \"binding\");\n     check_pat(e, ch0, a.pats[0]);\n-    let seen0 = ch0.seen;\n+    let seen0 = ch0.seen.get();\n     let mut i = vec::len(a.pats);\n     while i > 1u {\n         i -= 1u;\n@@ -1807,7 +1808,7 @@ fn check_arm(e: @env, a: ast::arm, &&x: (), v: vt<()>) {\n \n         // Ensure the bindings introduced in this pattern are the same as in\n         // the first pattern.\n-        if vec::len(ch.seen) != vec::len(seen0) {\n+        if ch.seen.len() != seen0.len() {\n             e.sess.span_err(a.pats[i].span,\n                             \"inconsistent number of bindings\");\n         } else {\n@@ -1902,11 +1903,10 @@ fn check_ty(e: @env, ty: @ast::ty, &&x: (), v: vt<()>) {\n     visit::visit_ty(ty, x, v);\n }\n \n-type checker = @{mut seen: [ident], kind: str, sess: session};\n+type checker = @{seen: dvec<ident>, kind: str, sess: session};\n \n fn checker(e: env, kind: str) -> checker {\n-    let seen: [ident] = [];\n-    ret @{mut seen: seen, kind: kind, sess: e.sess};\n+    ret @{seen: dvec(), kind: kind, sess: e.sess};\n }\n \n fn check_name(ch: checker, sp: span, name: ident) {\n@@ -1918,7 +1918,7 @@ fn check_name(ch: checker, sp: span, name: ident) {\n }\n fn add_name(ch: checker, sp: span, name: ident) {\n     check_name(ch, sp, name);\n-    ch.seen += [name];\n+    ch.seen.push(name);\n }\n \n fn ensure_unique<T>(e: env, sp: span, elts: [T], id: fn(T) -> ident,"}, {"sha": "9e3c6255c8913973b7e3f01521489f72795deb1c", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/774ea145ec4525e63ba97502306036e773c19eca/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774ea145ec4525e63ba97502306036e773c19eca/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=774ea145ec4525e63ba97502306036e773c19eca", "patch": "@@ -15,6 +15,7 @@ import syntax::ast_util::dummy_sp;\n import syntax::util::interner;\n import util::common;\n import syntax::codemap::span;\n+import dvec::{dvec, extensions};\n \n import std::map::hashmap;\n \n@@ -26,7 +27,7 @@ type ctxt =\n     {mut next_tag_id: u16,\n      pad: u16,\n      tag_id_to_index: hashmap<ast::def_id, u16>,\n-     mut tag_order: [ast::def_id],\n+     tag_order: dvec<ast::def_id>,\n      resources: interner::interner<res_info>,\n      llshapetablesty: TypeRef,\n      llshapetables: ValueRef};\n@@ -273,7 +274,7 @@ fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n     ret {mut next_tag_id: 0u16,\n          pad: 0u16,\n          tag_id_to_index: common::new_def_hash(),\n-         mut tag_order: [],\n+         tag_order: dvec(),\n          resources: interner::mk(hash_res_info, {|a, b| a == b}),\n          llshapetablesty: llshapetablesty,\n          llshapetables: llshapetables};\n@@ -328,7 +329,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n               none {\n                 id = ccx.shape_cx.next_tag_id;\n                 ccx.shape_cx.tag_id_to_index.insert(did, id);\n-                ccx.shape_cx.tag_order += [did];\n+                ccx.shape_cx.tag_order.push(did);\n                 ccx.shape_cx.next_tag_id += 1u16;\n               }\n               some(existing_id) { id = existing_id; }\n@@ -497,7 +498,7 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n     let mut i = 0u;\n     let mut data = [];\n     let mut offsets = [];\n-    while i < vec::len(ccx.shape_cx.tag_order) {\n+    while i < ccx.shape_cx.tag_order.len() {\n         let did = ccx.shape_cx.tag_order[i];\n         let variants = ty::enum_variants(ccx.tcx, did);\n         let item_tyt = ty::lookup_item_type(ccx.tcx, did);"}]}