{"sha": "e315fd9bb0e0647ab8b0e118d264d2103e271586", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTVmZDliYjBlMDY0N2FiOGIwZTExOGQyNjRkMjEwM2UyNzE1ODY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-29T13:00:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-29T13:00:36Z"}, "message": "Merge #6090\n\n6090: More style advice r=matklad a=matklad\n\nbors r+\\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8fcb1279955a74327980700587e718335117979a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fcb1279955a74327980700587e718335117979a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e315fd9bb0e0647ab8b0e118d264d2103e271586", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfcy/0CRBK7hj4Ov3rIwAAdHIIAK9ThGCqtiJfebI/EEiSOg/g\nSBa5NYHJ91Tcy6VJdCtmQnEXPwWeFxGt2ISe9mW07vXtF5IAfFmvDK9K23LwG2vs\nOOB5v7HqdaoQY9Wrk2+6zZ7ZjruQ5WGV95acrH1ADcA4AnXOC7L/AxJa2Mf6jbPJ\naSyLsRoqrhB8fxo4m5UpHyl3tTlbJVjV7dt/ZW75cX7Kld4UcQmPoC1g7F2jTo14\n5CxyS97rxQY/heETeStrJMJUPO2q++ZmOknmHZqlERfUwM9Mnp35wYDsinWj1gNH\nmTq0Mx2uOZzYU4R4nA/Ys+dUoso+0bFWwaY0o8uIJ5gIIoKYHvzh3M/hHqw3hbw=\n=CJV8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fcb1279955a74327980700587e718335117979a\nparent bdc1f76cbda7478f39c190cc6ba296bc0030928f\nparent b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601384436 +0000\ncommitter GitHub <noreply@github.com> 1601384436 +0000\n\nMerge #6090\n\n6090: More style advice r=matklad a=matklad\n\nbors r+\\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e315fd9bb0e0647ab8b0e118d264d2103e271586", "html_url": "https://github.com/rust-lang/rust/commit/e315fd9bb0e0647ab8b0e118d264d2103e271586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e315fd9bb0e0647ab8b0e118d264d2103e271586/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdc1f76cbda7478f39c190cc6ba296bc0030928f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc1f76cbda7478f39c190cc6ba296bc0030928f", "html_url": "https://github.com/rust-lang/rust/commit/bdc1f76cbda7478f39c190cc6ba296bc0030928f"}, {"sha": "b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd", "html_url": "https://github.com/rust-lang/rust/commit/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "bcd86fd3f07bca1241ce11eec30c3ab74cd0ff7f", "filename": "docs/dev/style.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e315fd9bb0e0647ab8b0e118d264d2103e271586/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/e315fd9bb0e0647ab8b0e118d264d2103e271586/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=e315fd9bb0e0647ab8b0e118d264d2103e271586", "patch": "@@ -197,6 +197,43 @@ fn frobnicate(walrus: Option<Walrus>) {\n }\n ```\n \n+Avoid preconditions that spawn function boundaries:\n+\n+\n+```rust\n+// Good\n+fn string_literal_contents(s: &str) -> Option<&str> {\n+    if s.starts_with('\"') && s.ends_with('\"') {\n+        Some(&s[1..s.len() - 1])\n+    } else {\n+        None\n+    }\n+}\n+\n+fn foo() {\n+    let s: &str = ...;\n+    if let Some(contents) = string_literal_contents(s) {\n+\n+    }\n+}\n+\n+// Not as good\n+fn is_string_literal(s: &str) -> Option<&str> {\n+    s.starts_with('\"') && s.ends_with('\"')\n+    Some()\n+}\n+\n+fn foo() {\n+    let s: &str = ...;\n+    if is_string_literal(s) {\n+        let contents = &s[1..s.len() - 1];\n+    }\n+}\n+```\n+\n+In the \"Not as good\" version, the precondition that `1` is a valid char boundary is checked in `is_string_literal` and utilized in `foo`.\n+In the \"Good\" version, precondition check and usage are checked in the same block, and then encoded in the types.\n+\n # Early Returns\n \n Do use early returns\n@@ -271,6 +308,21 @@ if words.len() != 2 {\n }\n ```\n \n+If allocation is inevitable, let the caller allocate the resource:\n+\n+```rust\n+// Good\n+fn frobnicate(s: String) {\n+    ...\n+}\n+\n+// Not as good\n+fn frobnicate(s: &str) {\n+    let s = s.to_string();\n+    ...\n+}\n+```\n+\n # Avoid Monomorphization\n \n Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*."}]}