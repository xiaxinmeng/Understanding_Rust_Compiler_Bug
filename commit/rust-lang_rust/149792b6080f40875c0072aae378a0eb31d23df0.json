{"sha": "149792b6080f40875c0072aae378a0eb31d23df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OTc5MmI2MDgwZjQwODc1YzAwNzJhYWUzNzhhMGViMzFkMjNkZjA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T16:16:47Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T18:30:55Z"}, "message": "pat_constructors returns at most one constructor\n\nI tracked the origins of `pat_constructors` returning a `Vec` to commit\n9b3f9d94441340f0cdf6ec59aab739baef0f1ac0. It was indeed specifically\nfor variable-length slice patterns.", "tree": {"sha": "015706f3fb85fcd2b6c0cf51fb3b7b2fac156e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015706f3fb85fcd2b6c0cf51fb3b7b2fac156e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/149792b6080f40875c0072aae378a0eb31d23df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/149792b6080f40875c0072aae378a0eb31d23df0", "html_url": "https://github.com/rust-lang/rust/commit/149792b6080f40875c0072aae378a0eb31d23df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/149792b6080f40875c0072aae378a0eb31d23df0/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7044f23e9c1b5e59a10fdf66d23127a00fedbc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7044f23e9c1b5e59a10fdf66d23127a00fedbc3", "html_url": "https://github.com/rust-lang/rust/commit/d7044f23e9c1b5e59a10fdf66d23127a00fedbc3"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "527924266fe20ee50227d7e373818e31e1051363", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/149792b6080f40875c0072aae378a0eb31d23df0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149792b6080f40875c0072aae378a0eb31d23df0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=149792b6080f40875c0072aae378a0eb31d23df0", "patch": "@@ -1615,13 +1615,13 @@ pub fn is_useful<'p, 'a, 'tcx>(\n \n     debug!(\"is_useful_expand_first_col: pcx={:#?}, expanding {:#?}\", pcx, v.head());\n \n-    if let Some(constructors) = pat_constructors(cx, v.head(), pcx) {\n-        debug!(\"is_useful - expanding constructors: {:#?}\", constructors);\n+    if let Some(constructor) = pat_constructor(cx, v.head(), pcx) {\n+        debug!(\"is_useful - expanding constructor: {:#?}\", constructor);\n         split_grouped_constructors(\n             cx.tcx,\n             cx.param_env,\n             pcx,\n-            constructors,\n+            vec![constructor],\n             matrix,\n             pcx.span,\n             Some(hir_id),\n@@ -1634,7 +1634,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n         debug!(\"is_useful - expanding wildcard\");\n \n         let used_ctors: Vec<Constructor<'_>> =\n-            matrix.heads().flat_map(|p| pat_constructors(cx, p, pcx).unwrap_or(vec![])).collect();\n+            matrix.heads().filter_map(|p| pat_constructor(cx, p, pcx)).collect();\n         debug!(\"used_ctors = {:#?}\", used_ctors);\n         // `all_ctors` are all the constructors for the given type, which\n         // should all be represented (or caught with the wild pattern `_`).\n@@ -1777,47 +1777,39 @@ fn is_useful_specialized<'p, 'a, 'tcx>(\n         .unwrap_or(NotUseful)\n }\n \n-/// Determines the constructors that the given pattern can be specialized to.\n-///\n-/// In most cases, there's only one constructor that a specific pattern\n-/// represents, such as a specific enum variant or a specific literal value.\n-/// Slice patterns, however, can match slices of different lengths. For instance,\n-/// `[a, b, tail @ ..]` can match a slice of length 2, 3, 4 and so on.\n-///\n+/// Determines the constructor that the given pattern can be specialized to.\n /// Returns `None` in case of a catch-all, which can't be specialized.\n-fn pat_constructors<'tcx>(\n+fn pat_constructor<'tcx>(\n     cx: &mut MatchCheckCtxt<'_, 'tcx>,\n     pat: &Pat<'tcx>,\n     pcx: PatCtxt<'tcx>,\n-) -> Option<Vec<Constructor<'tcx>>> {\n+) -> Option<Constructor<'tcx>> {\n     match *pat.kind {\n-        PatKind::AscribeUserType { ref subpattern, .. } => pat_constructors(cx, subpattern, pcx),\n+        PatKind::AscribeUserType { ref subpattern, .. } => pat_constructor(cx, subpattern, pcx),\n         PatKind::Binding { .. } | PatKind::Wild => None,\n-        PatKind::Leaf { .. } | PatKind::Deref { .. } => Some(vec![Single]),\n+        PatKind::Leaf { .. } | PatKind::Deref { .. } => Some(Single),\n         PatKind::Variant { adt_def, variant_index, .. } => {\n-            Some(vec![Variant(adt_def.variants[variant_index].def_id)])\n+            Some(Variant(adt_def.variants[variant_index].def_id))\n         }\n-        PatKind::Constant { value } => Some(vec![ConstantValue(value, pat.span)]),\n-        PatKind::Range(PatRange { lo, hi, end }) => Some(vec![ConstantRange(\n+        PatKind::Constant { value } => Some(ConstantValue(value, pat.span)),\n+        PatKind::Range(PatRange { lo, hi, end }) => Some(ConstantRange(\n             lo.eval_bits(cx.tcx, cx.param_env, lo.ty),\n             hi.eval_bits(cx.tcx, cx.param_env, hi.ty),\n             lo.ty,\n             end,\n             pat.span,\n-        )]),\n+        )),\n         PatKind::Array { .. } => match pcx.ty.kind {\n-            ty::Array(_, length) => {\n-                Some(vec![FixedLenSlice(length.eval_usize(cx.tcx, cx.param_env))])\n-            }\n+            ty::Array(_, length) => Some(FixedLenSlice(length.eval_usize(cx.tcx, cx.param_env))),\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty),\n         },\n         PatKind::Slice { ref prefix, ref slice, ref suffix } => {\n             let prefix = prefix.len() as u64;\n             let suffix = suffix.len() as u64;\n             if slice.is_some() {\n-                Some(vec![VarLenSlice(prefix, suffix)])\n+                Some(VarLenSlice(prefix, suffix))\n             } else {\n-                Some(vec![FixedLenSlice(prefix + suffix)])\n+                Some(FixedLenSlice(prefix + suffix))\n             }\n         }\n         PatKind::Or { .. } => {"}]}