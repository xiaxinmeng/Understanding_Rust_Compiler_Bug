{"sha": "be93b29d304b310ec56630f5313ccddf3ae470ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTNiMjlkMzA0YjMxMGVjNTY2MzBmNTMxM2NjZGRmM2FlNDcwZWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-02T20:33:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-05T21:17:02Z"}, "message": "rustc: Implement parsing and typechecking for \"once fn\"", "tree": {"sha": "72c84b2fdbd5b82b9366162382461f0d2fa38b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72c84b2fdbd5b82b9366162382461f0d2fa38b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be93b29d304b310ec56630f5313ccddf3ae470ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be93b29d304b310ec56630f5313ccddf3ae470ea", "html_url": "https://github.com/rust-lang/rust/commit/be93b29d304b310ec56630f5313ccddf3ae470ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be93b29d304b310ec56630f5313ccddf3ae470ea/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "html_url": "https://github.com/rust-lang/rust/commit/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e"}], "stats": {"total": 327, "additions": 266, "deletions": 61}, "files": [{"sha": "8667f36c749e599e396e5627c0b0bbbb92621386", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -1059,6 +1059,25 @@ enum region_ {\n     re_named(ident)\n }\n \n+#[auto_serialize]\n+#[auto_deserialize]\n+enum Onceness {\n+    Once,\n+    Many\n+}\n+\n+impl Onceness : cmp::Eq {\n+    pure fn eq(other: &Onceness) -> bool {\n+        match (self, *other) {\n+            (Once, Once) | (Many, Many) => true,\n+            _ => false\n+        }\n+    }\n+    pure fn ne(other: &Onceness) -> bool {\n+        !self.eq(other)\n+    }\n+}\n+\n #[auto_serialize]\n #[auto_deserialize]\n enum ty_ {\n@@ -1070,7 +1089,7 @@ enum ty_ {\n     ty_ptr(mt),\n     ty_rptr(@region, mt),\n     ty_rec(~[ty_field]),\n-    ty_fn(proto, purity, @~[ty_param_bound], fn_decl),\n+    ty_fn(proto, purity, Onceness, @~[ty_param_bound], fn_decl),\n     ty_tup(~[@Ty]),\n     ty_path(@path, node_id),\n     ty_fixed_length(@Ty, Option<uint>),"}, {"sha": "7c8909668f5358022433484dbae0e555000427f4", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -524,10 +524,11 @@ fn noop_fold_ty(t: ty_, fld: ast_fold) -> ty_ {\n       ty_ptr(mt) => ty_ptr(fold_mt(mt, fld)),\n       ty_rptr(region, mt) => ty_rptr(region, fold_mt(mt, fld)),\n       ty_rec(fields) => ty_rec(vec::map(fields, |f| fold_field(*f, fld))),\n-      ty_fn(proto, purity, bounds, decl) =>\n-        ty_fn(proto, purity,\n-              @vec::map(*bounds,\n-                        |x| fold_ty_param_bound(*x, fld)),\n+      ty_fn(proto, purity, onceness, bounds, decl) =>\n+        ty_fn(proto,\n+              purity,\n+              onceness,\n+              @vec::map(*bounds, |x| fold_ty_param_bound(*x, fld)),\n               fold_fn_decl(decl, fld)),\n       ty_tup(tys) => ty_tup(vec::map(tys, |ty| fld.fold_ty(*ty))),\n       ty_path(path, id) => ty_path(fld.fold_path(path), fld.new_id(id)),"}, {"sha": "63545a69608720f4fe0f074aca09d9e4632456e3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -287,7 +287,7 @@ impl Parser {\n \n     pure fn id_to_str(id: ident) -> @~str { self.sess.interner.get(id) }\n \n-    fn parse_ty_fn(purity: ast::purity) -> ty_ {\n+    fn parse_ty_fn(purity: ast::purity, onceness: ast::Onceness) -> ty_ {\n         let proto, bounds;\n         if self.eat_keyword(~\"extern\") {\n             self.expect_keyword(~\"fn\");\n@@ -298,7 +298,17 @@ impl Parser {\n             proto = self.parse_fn_ty_proto();\n             bounds = self.parse_optional_ty_param_bounds();\n         };\n-        ty_fn(proto, purity, bounds, self.parse_ty_fn_decl())\n+        ty_fn(proto, purity, onceness, bounds, self.parse_ty_fn_decl())\n+    }\n+\n+    fn parse_ty_fn_with_onceness(purity: ast::purity) -> ty_ {\n+        let onceness = self.parse_optional_onceness();\n+        self.parse_ty_fn(purity, onceness)\n+    }\n+\n+    fn parse_ty_fn_with_purity_and_onceness() -> ty_ {\n+        let purity = self.parse_optional_purity();\n+        self.parse_ty_fn_with_onceness(purity)\n     }\n \n     fn parse_ty_fn_decl() -> fn_decl {\n@@ -526,15 +536,18 @@ impl Parser {\n             let region = self.parse_region_with_sep();\n             let mt = self.parse_mt();\n             ty_rptr(region, mt)\n+        } else if self.eat_keyword(~\"once\") {\n+            self.parse_ty_fn(ast::impure_fn, ast::Once)\n         } else if self.eat_keyword(~\"pure\") {\n-            self.parse_ty_fn(ast::pure_fn)\n+            self.parse_ty_fn_with_onceness(ast::pure_fn)\n         } else if self.eat_keyword(~\"unsafe\") {\n-            self.parse_ty_fn(ast::unsafe_fn)\n+            self.parse_ty_fn_with_onceness(ast::unsafe_fn)\n         } else if self.is_keyword(~\"fn\") {\n-            self.parse_ty_fn(ast::impure_fn)\n+            self.parse_ty_fn_with_onceness(ast::impure_fn)\n         } else if self.eat_keyword(~\"extern\") {\n             self.expect_keyword(~\"fn\");\n-            ty_fn(proto_bare, ast::impure_fn, @~[], self.parse_ty_fn_decl())\n+            ty_fn(proto_bare, ast::impure_fn, ast::Many, @~[],\n+                  self.parse_ty_fn_decl())\n         } else if self.token == token::MOD_SEP || is_ident(self.token) {\n             let path = self.parse_path_with_tps(colons_before_params);\n             ty_path(path, self.get_id())\n@@ -2275,6 +2288,20 @@ impl Parser {\n             self.get_id()), span: self.last_span}\n     }\n \n+    fn parse_optional_purity() -> ast::purity {\n+        if self.eat_keyword(~\"pure\") {\n+            ast::pure_fn\n+        } else if self.eat_keyword(~\"unsafe\") {\n+            ast::unsafe_fn\n+        } else {\n+            ast::impure_fn\n+        }\n+    }\n+\n+    fn parse_optional_onceness() -> ast::Onceness {\n+        if self.eat_keyword(~\"once\") { ast::Once } else { ast::Many }\n+    }\n+\n     fn parse_optional_ty_param_bounds() -> @~[ty_param_bound] {\n         let mut bounds = ~[];\n         if self.eat(token::COLON) {"}, {"sha": "0d139b101d8f385572e10891cdb66c738786314d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -427,6 +427,7 @@ fn strict_keyword_table() -> HashMap<~str, ()> {\n         ~\"if\", ~\"impl\",\n         ~\"let\", ~\"log\", ~\"loop\",\n         ~\"match\", ~\"mod\", ~\"move\", ~\"mut\",\n+        ~\"once\",\n         ~\"priv\", ~\"pub\", ~\"pure\",\n         ~\"ref\", ~\"return\",\n         ~\"struct\","}, {"sha": "e0b9958bcb748eeca843e1ca0190e6e6956eb85f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -394,8 +394,9 @@ fn print_type_ex(s: ps, &&ty: @ast::Ty, print_colons: bool) {\n         commasep(s, inconsistent, elts, print_type);\n         pclose(s);\n       }\n-      ast::ty_fn(proto, purity, bounds, d) => {\n-        print_ty_fn(s, Some(proto), purity, bounds, d, None, None, None);\n+      ast::ty_fn(proto, purity, onceness, bounds, d) => {\n+        print_ty_fn(s, Some(proto), purity, onceness, bounds, d, None, None,\n+                    None);\n       }\n       ast::ty_path(path, _) => print_path(s, path, print_colons),\n       ast::ty_fixed_length(t, v) => {\n@@ -804,7 +805,7 @@ fn print_ty_method(s: ps, m: ast::ty_method) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, m.span.lo);\n     print_outer_attributes(s, m.attrs);\n-    print_ty_fn(s, None, m.purity,\n+    print_ty_fn(s, None, m.purity, ast::Many,\n                 @~[], m.decl, Some(m.ident), Some(m.tps),\n                 Some(m.self_ty.node));\n     word(s.s, ~\";\");\n@@ -1273,7 +1274,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         cbox(s, indent_unit);\n         // head-box, will be closed by print-block at start\n         ibox(s, 0u);\n-        word(s.s, fn_header_info_to_str(None, None, Some(proto),\n+        word(s.s, fn_header_info_to_str(None, None, Some(proto), ast::Many,\n                                         ast::inherited));\n         print_fn_args_and_ret(s, decl, *cap_clause, None);\n         space(s.s);\n@@ -1606,12 +1607,15 @@ fn print_self_ty(s: ps, self_ty: ast::self_ty_) -> bool {\n     return true;\n }\n \n-fn print_fn(s: ps, decl: ast::fn_decl, purity: Option<ast::purity>,\n+fn print_fn(s: ps,\n+            decl: ast::fn_decl,\n+            purity: Option<ast::purity>,\n             name: ast::ident,\n             typarams: ~[ast::ty_param],\n             opt_self_ty: Option<ast::self_ty_>,\n             vis: ast::visibility) {\n-    head(s, fn_header_info_to_str(opt_self_ty, purity, None, vis));\n+    head(s, fn_header_info_to_str(opt_self_ty, purity, None, ast::Many,\n+                                  vis));\n     print_ident(s, name);\n     print_type_params(s, typarams);\n     print_fn_args_and_ret(s, decl, ~[], opt_self_ty);\n@@ -1831,14 +1835,17 @@ fn print_arg(s: ps, input: ast::arg) {\n     end(s);\n }\n \n-fn print_ty_fn(s: ps, opt_proto: Option<ast::proto>, purity: ast::purity,\n+fn print_ty_fn(s: ps,\n+               opt_proto: Option<ast::proto>,\n+               purity: ast::purity,\n+               onceness: ast::Onceness,\n                bounds: @~[ast::ty_param_bound],\n                decl: ast::fn_decl, id: Option<ast::ident>,\n                tps: Option<~[ast::ty_param]>,\n                opt_self_ty: Option<ast::self_ty_>) {\n     ibox(s, indent_unit);\n     word(s.s, fn_header_info_to_str(opt_self_ty, Some(purity), opt_proto,\n-                                    ast::inherited));\n+                                    onceness, ast::inherited));\n     print_bounds(s, bounds);\n     match id { Some(id) => { word(s.s, ~\" \"); print_ident(s, id); } _ => () }\n     match tps { Some(tps) => print_type_params(s, tps), _ => () }\n@@ -2062,6 +2069,7 @@ fn next_comment(s: ps) -> Option<comments::cmnt> {\n fn fn_header_info_to_str(opt_sty: Option<ast::self_ty_>,\n                          opt_purity: Option<ast::purity>,\n                          opt_p: Option<ast::proto>,\n+                         onceness: ast::Onceness,\n                          vis: ast::visibility) -> ~str {\n \n     let mut s = visibility_qualified(vis, ~\"\");\n@@ -2082,6 +2090,11 @@ fn fn_header_info_to_str(opt_sty: Option<ast::self_ty_>,\n \n     str::push_str(&mut s, opt_proto_to_str(opt_p));\n \n+    match onceness {\n+        ast::Once => str::push_str(&mut s, ~\"once \"),\n+        ast::Many => {}\n+    }\n+\n     return s;\n }\n \n@@ -2101,6 +2114,13 @@ pure fn purity_to_str(p: ast::purity) -> ~str {\n     }\n }\n \n+pure fn onceness_to_str(o: ast::Onceness) -> ~str {\n+    match o {\n+        ast::Once => ~\"once\",\n+        ast::Many => ~\"many\"\n+    }\n+}\n+\n fn print_purity(s: ps, p: ast::purity) {\n     match p {\n       ast::impure_fn => (),"}, {"sha": "be6fb4cefa83e888e2ec0c6a6caddc221aeb44cd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -203,7 +203,7 @@ fn visit_ty<E>(t: @Ty, e: E, v: vt<E>) {\n       ty_tup(ts) => for ts.each |tt| {\n         v.visit_ty(*tt, e, v);\n       },\n-      ty_fn(_, _, bounds, decl) => {\n+      ty_fn(_, _, _, bounds, decl) => {\n         for decl.inputs.each |a| { v.visit_ty(a.ty, e, v); }\n         visit_ty_param_bounds(bounds, e, v);\n         v.visit_ty(decl.output, e, v);"}, {"sha": "f15c254e71c004861f41556622c4e9deab5d2dc3", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -387,6 +387,14 @@ fn parse_purity(c: char) -> purity {\n     }\n }\n \n+fn parse_onceness(c: char) -> ast::Onceness {\n+    match c {\n+        'o' => ast::Once,\n+        'm' => ast::Many,\n+        _ => fail ~\"parse_onceness: bad onceness\"\n+    }\n+}\n+\n fn parse_arg(st: @pstate, conv: conv_did) -> ty::arg {\n     {mode: parse_mode(st),\n      ty: parse_ty(st, conv)}\n@@ -406,6 +414,7 @@ fn parse_mode(st: @pstate) -> ast::mode {\n fn parse_ty_fn(st: @pstate, conv: conv_did) -> ty::FnTy {\n     let proto = parse_proto(st);\n     let purity = parse_purity(next(st));\n+    let onceness = parse_onceness(next(st));\n     let bounds = parse_bounds(st, conv);\n     assert (next(st) == '[');\n     let mut inputs: ~[ty::arg] = ~[];\n@@ -418,6 +427,7 @@ fn parse_ty_fn(st: @pstate, conv: conv_did) -> ty::FnTy {\n     return FnTyBase {\n         meta: FnMeta {purity: purity,\n                       proto: proto,\n+                      onceness: onceness,\n                       bounds: bounds,\n                       ret_style: ret_style},\n         sig: FnSig {inputs: inputs,"}, {"sha": "725b8c41f5cbb5c1c8bda95a6dda8fb5e92829e5", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -349,9 +349,17 @@ fn enc_purity(w: io::Writer, p: purity) {\n     }\n }\n \n+fn enc_onceness(w: io::Writer, o: Onceness) {\n+    match o {\n+        Once => w.write_char('o'),\n+        Many => w.write_char('m')\n+    }\n+}\n+\n fn enc_ty_fn(w: io::Writer, cx: @ctxt, ft: ty::FnTy) {\n     enc_proto(w, cx, ft.meta.proto);\n     enc_purity(w, ft.meta.purity);\n+    enc_onceness(w, ft.meta.onceness);\n     enc_bounds(w, cx, ft.meta.bounds);\n     w.write_char('[');\n     for ft.sig.inputs.each |arg| {"}, {"sha": "9d28e35acb0de9fbd48bc7504061373898a6c22c", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -841,7 +841,7 @@ fn check_fn_deprecated_modes(tcx: ty::ctxt, fn_ty: ty::t, decl: ast::fn_decl,\n                         let span = arg_ast.ty.span;\n                         // Recurse to check fn-type argument\n                         match arg_ast.ty.node {\n-                            ast::ty_fn(_, _, _, decl) => {\n+                            ast::ty_fn(_, _, _, _, decl) => {\n                                 check_fn_deprecated_modes(tcx, arg_ty.ty,\n                                                           decl, span, id);\n                             }\n@@ -856,7 +856,7 @@ fn check_fn_deprecated_modes(tcx: ty::ctxt, fn_ty: ty::t, decl: ast::fn_decl,\n                                 // Functions with preceding sigil are parsed\n                                 // as pointers of functions\n                                 match mt.ty.node {\n-                                    ast::ty_fn(_, _, _, decl) => {\n+                                    ast::ty_fn(_, _, _, _, decl) => {\n                                         check_fn_deprecated_modes(\n                                             tcx, arg_ty.ty,\n                                             decl, span, id);\n@@ -889,7 +889,7 @@ fn check_item_deprecated_modes(tcx: ty::ctxt, it: @ast::item) {\n     match it.node {\n         ast::item_ty(ty, _) => {\n             match ty.node {\n-                ast::ty_fn(_, _, _, decl) => {\n+                ast::ty_fn(_, _, _, _, decl) => {\n                     let fn_ty = ty::node_id_to_type(tcx, it.id);\n                     check_fn_deprecated_modes(\n                         tcx, fn_ty, decl, ty.span, it.id)"}, {"sha": "a98ec2181d923151d6309528cedc3f36dfd9a26d", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -624,8 +624,8 @@ fn determine_rp_in_ty(ty: @ast::Ty,\n         }\n       }\n \n-      ast::ty_fn(ast::proto_bare, _, _, _) |\n-      ast::ty_fn(ast::proto_block, _, _, _) if cx.anon_implies_rp => {\n+      ast::ty_fn(ast::proto_bare, _, _, _, _) |\n+      ast::ty_fn(ast::proto_block, _, _, _, _) if cx.anon_implies_rp => {\n         debug!(\"referenced bare fn type with regions %s\",\n                pprust::ty_to_str(ty, cx.sess.intr()));\n         cx.add_rp(cx.item_id, cx.add_variance(rv_contravariant));\n@@ -672,8 +672,8 @@ fn determine_rp_in_ty(ty: @ast::Ty,\n     match ty.node {\n       ast::ty_box(mt) | ast::ty_uniq(mt) => {\n         match mt.ty.node {\n-          ast::ty_fn(ast::proto_bare, _, _, _) |\n-          ast::ty_fn(ast::proto_block, _, _, _) => {\n+          ast::ty_fn(ast::proto_bare, _, _, _, _) |\n+          ast::ty_fn(ast::proto_block, _, _, _, _) => {\n             do cx.with(cx.item_id, false) {\n                 visit_mt(mt, cx, visitor);\n             }\n@@ -706,7 +706,7 @@ fn determine_rp_in_ty(ty: @ast::Ty,\n         }\n       }\n \n-      ast::ty_fn(_, _, bounds, decl) => {\n+      ast::ty_fn(_, _, _, bounds, decl) => {\n         // fn() binds the & region, so do not consider &T types that\n         // appear *inside* a fn() type to affect the enclosing item:\n         do cx.with(cx.item_id, false) {"}, {"sha": "933fb7eedfba1ca12ef3b8203488ffe210708ebb", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -1000,6 +1000,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n                               proto:\n                                   ty::proto_vstore(ty::vstore_slice(\n                                       ty::re_bound(ty::br_anon(0)))),\n+                              onceness: ast::Many,\n                               bounds: @~[],\n                               ret_style: ast::return_val},\n                 sig: FnSig {inputs: ~[{mode: ast::expl(ast::by_val),"}, {"sha": "0c93c610b681dfcf9f1d8cba8403b498fbbd9656", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -250,6 +250,7 @@ fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> Option<ty::t> {\n                 tcx,\n                 FnTyBase {meta: FnMeta {purity: ast::impure_fn,\n                                         proto: fty.meta.proto,\n+                                        onceness: ast::Many,\n                                         bounds: @~[],\n                                         ret_style: ast::return_val},\n                           sig: FnSig {inputs: ~[],\n@@ -261,6 +262,7 @@ fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> Option<ty::t> {\n                 tcx,\n                 FnTyBase {meta: FnMeta {purity: ast::impure_fn,\n                                         proto: box_proto,\n+                                        onceness: ast::Many,\n                                         bounds: @~[],\n                                         ret_style: ast::return_val},\n                           sig: FnSig {inputs: ~[],"}, {"sha": "80f48eace8f45cc5e252cfa78d487e868d96d167", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -126,6 +126,7 @@ export kind_is_owned;\n export meta_kind, kind_lteq, type_kind;\n export operators;\n export type_err, terr_vstore_kind;\n+export terr_onceness_mismatch;\n export type_err_to_str, note_and_explain_type_err;\n export expected_found;\n export type_needs_drop;\n@@ -186,6 +187,7 @@ export terr_proto_mismatch;\n export terr_ret_style_mismatch;\n export terr_fn, terr_trait;\n export purity_to_str;\n+export onceness_to_str;\n export param_tys_in_type;\n export eval_repeat_count;\n export fn_proto, proto_bare, proto_vstore;\n@@ -504,11 +506,14 @@ impl fn_proto : cmp::Eq {\n  *\n  * - `purity` is the function's effect (pure, impure, unsafe).\n  * - `proto` is the protocol (fn@, fn~, etc).\n+ * - `onceness` indicates whether the function can be called one time or many\n+ *   times.\n  * - `bounds` is the parameter bounds on the function's upvars.\n  * - `ret_style` indicates whether the function returns a value or fails. */\n struct FnMeta {\n     purity: ast::purity,\n     proto: fn_proto,\n+    onceness: ast::Onceness,\n     bounds: @~[param_bound],\n     ret_style: ret_style\n }\n@@ -679,6 +684,7 @@ enum type_err {\n     terr_mismatch,\n     terr_ret_style_mismatch(expected_found<ast::ret_style>),\n     terr_purity_mismatch(expected_found<purity>),\n+    terr_onceness_mismatch(expected_found<Onceness>),\n     terr_mutability,\n     terr_proto_mismatch(expected_found<ty::fn_proto>),\n     terr_box_mutability,\n@@ -3326,6 +3332,11 @@ fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n                  purity_to_str(values.expected),\n                  purity_to_str(values.found))\n         }\n+        terr_onceness_mismatch(values) => {\n+            fmt!(\"expected %s fn but found %s fn\",\n+                 onceness_to_str(values.expected),\n+                 onceness_to_str(values.found))\n+        }\n         terr_proto_mismatch(values) => {\n             fmt!(\"expected %s closure, found %s closure\",\n                  proto_ty_to_str(cx, values.expected),"}, {"sha": "b18b032e0a616a5ba60e55e14a2e11062e7f446a", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -208,7 +208,8 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n               _ => ()\n             }\n           }\n-          ast::ty_fn(ast::proto_block, purity, ast_bounds, ast_fn_decl) => {\n+          ast::ty_fn(ast::proto_block, purity, onceness, ast_bounds,\n+                     ast_fn_decl) => {\n             let new_proto;\n             match vst {\n                 ty::vstore_fixed(_) => {\n@@ -223,9 +224,15 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n \n             // Run through the normal function type conversion process.\n             let bounds = collect::compute_bounds(self.ccx(), ast_bounds);\n-            let fn_decl = ty_of_fn_decl(self, rscope, new_proto, purity,\n+            let fn_decl = ty_of_fn_decl(self,\n+                                        rscope,\n+                                        new_proto,\n+                                        purity,\n+                                        onceness,\n                                         bounds,\n-                                        ast_fn_decl, None, span);\n+                                        ast_fn_decl,\n+                                        None,\n+                                        span);\n             return ty::mk_fn(tcx, fn_decl);\n           }\n           _ => ()\n@@ -309,10 +316,10 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n         };\n         ty::mk_rec(tcx, flds)\n       }\n-      ast::ty_fn(proto, purity, ast_bounds, decl) => {\n+      ast::ty_fn(proto, purity, onceness, ast_bounds, decl) => {\n         let bounds = collect::compute_bounds(self.ccx(), ast_bounds);\n         let fn_decl = ty_of_fn_decl(self, rscope, proto, purity,\n-                                    bounds, decl, None,\n+                                    onceness, bounds, decl, None,\n                                     ast_ty.span);\n         ty::mk_fn(tcx, fn_decl)\n       }\n@@ -476,6 +483,7 @@ fn ty_of_fn_decl<AC: ast_conv, RS: region_scope Copy Owned>(\n     self: AC, rscope: RS,\n     ast_proto: ast::proto,\n     purity: ast::purity,\n+    onceness: ast::Onceness,\n     bounds: @~[ty::param_bound],\n     decl: ast::fn_decl,\n     expected_tys: expected_tys,\n@@ -508,6 +516,7 @@ fn ty_of_fn_decl<AC: ast_conv, RS: region_scope Copy Owned>(\n         FnTyBase {\n             meta: FnMeta {purity: purity,\n                           proto: proto,\n+                          onceness: onceness,\n                           bounds: bounds,\n                           ret_style: decl.cf},\n             sig: FnSig {inputs: input_tys,"}, {"sha": "09225b4fef8a9a50147cfd5a07f2e68fe736a4a5", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -1310,7 +1310,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // block syntax lambdas; that is, lambdas without explicit\n         // protos.\n         let expected_sty = unpack_expected(fcx, expected, |x| Some(x));\n-        let (expected_tys, expected_purity, expected_proto) =\n+        let (expected_tys,\n+             expected_purity,\n+             expected_proto,\n+             expected_onceness) =\n             match expected_sty {\n               Some(ty::ty_fn(ref fn_ty)) => {\n                 let {fn_ty, _} =\n@@ -1320,10 +1323,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                 (Some({inputs: fn_ty.sig.inputs,\n                        output: fn_ty.sig.output}),\n                  fn_ty.meta.purity,\n-                 fn_ty.meta.proto)\n+                 fn_ty.meta.proto,\n+                 fn_ty.meta.onceness)\n               }\n               _ => {\n-                (None, ast::impure_fn, ty::proto_vstore(ty::vstore_box))\n+                (None,\n+                 ast::impure_fn,\n+                 ty::proto_vstore(ty::vstore_box),\n+                 ast::Many)\n               }\n             };\n \n@@ -1334,17 +1341,25 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // XXX: This is a hack.\n         let ast_proto = ast_proto_opt.get_default(ast::proto_box);\n         let ast_purity = ast::impure_fn;\n+        let ast_onceness = ast::Many;\n \n         // construct the function type\n-        let mut fn_ty = astconv::ty_of_fn_decl(fcx, fcx,\n-                                               ast_proto, ast_purity, @~[],\n-                                               decl, expected_tys, expr.span);\n+        let mut fn_ty = astconv::ty_of_fn_decl(fcx,\n+                                               fcx,\n+                                               ast_proto,\n+                                               ast_purity,\n+                                               ast_onceness,\n+                                               @~[],\n+                                               decl,\n+                                               expected_tys,\n+                                               expr.span);\n \n         // Patch up the function declaration, if necessary.\n         match ast_proto_opt {\n           None => {\n             fn_ty.meta.purity = expected_purity;\n             fn_ty.meta.proto = expected_proto;\n+            fn_ty.meta.onceness = expected_onceness;\n           }\n           Some(_) => { }\n         }\n@@ -2802,6 +2817,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n             meta: FnMeta {purity: ast::impure_fn,\n                           proto: ty::proto_vstore(ty::vstore_slice(\n                               ty::re_bound(ty::br_anon(0)))),\n+                          onceness: ast::Many,\n                           bounds: @~[],\n                           ret_style: ast::return_val},\n             sig: FnSig {inputs: ~[{mode: ast::expl(ast::by_val),\n@@ -2825,6 +2841,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n     let fty = ty::mk_fn(tcx, FnTyBase {\n         meta: FnMeta {purity: ast::impure_fn,\n                       proto: ty::proto_bare,\n+                      onceness: ast::Many,\n                       bounds: @~[],\n                       ret_style: ast::return_val},\n         sig: FnSig {inputs: inputs,"}, {"sha": "04f7aae0bf2a004216019cbc2ae60f2717691e48", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -134,6 +134,7 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n                 result_ty = Some(ty::mk_fn(tcx, FnTyBase {\n                     meta: FnMeta {purity: ast::pure_fn,\n                                   proto: ty::proto_vstore(ty::vstore_box),\n+                                  onceness: ast::Many,\n                                   bounds: @~[],\n                                   ret_style: ast::return_val},\n                     sig: FnSig {inputs: args,\n@@ -604,7 +605,7 @@ fn convert_struct(ccx: @crate_ctxt,\n         let t_dtor = ty::mk_fn(\n             tcx,\n             ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_bare,\n-                          ast::impure_fn, @~[],\n+                          ast::impure_fn, ast::Many, @~[],\n                           ast_util::dtor_dec(), None, dtor.span));\n         write_ty_to_tcx(tcx, dtor.node.id, t_dtor);\n         tcx.tcache.insert(local_def(dtor.node.id),\n@@ -643,6 +644,7 @@ fn convert_struct(ccx: @crate_ctxt,\n                     meta: FnMeta {\n                         purity: ast::pure_fn,\n                         proto: ty::proto_bare,\n+                        onceness: ast::Many,\n                         bounds: @~[],\n                         ret_style: ast::return_val,\n                     },\n@@ -682,9 +684,15 @@ fn ty_of_method(ccx: @crate_ctxt,\n                 rp: Option<ty::region_variance>) -> ty::method {\n     {ident: m.ident,\n      tps: ty_param_bounds(ccx, m.tps),\n-     fty: ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_bare,\n-                        m.purity, @~[],\n-                        m.decl, None, m.span),\n+     fty: ty_of_fn_decl(ccx,\n+                        type_rscope(rp),\n+                        ast::proto_bare,\n+                        m.purity,\n+                        ast::Many,\n+                        @~[],\n+                        m.decl,\n+                        None,\n+                        m.span),\n      self_ty: m.self_ty.node,\n      vis: m.vis,\n      def_id: local_def(m.id)}\n@@ -696,8 +704,15 @@ fn ty_of_ty_method(self: @crate_ctxt,\n                    id: ast::def_id) -> ty::method {\n     {ident: m.ident,\n      tps: ty_param_bounds(self, m.tps),\n-     fty: ty_of_fn_decl(self, type_rscope(rp), ast::proto_bare, m.purity,\n-                        @~[], m.decl, None, m.span),\n+     fty: ty_of_fn_decl(self,\n+                        type_rscope(rp),\n+                        ast::proto_bare,\n+                        m.purity,\n+                        ast::Many,\n+                        @~[],\n+                        m.decl,\n+                        None,\n+                        m.span),\n      // assume public, because this is only invoked on trait methods\n      self_ty: m.self_ty.node,\n      vis: ast::public,\n@@ -752,9 +767,15 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n       }\n       ast::item_fn(decl, purity, tps, _) => {\n         let bounds = ty_param_bounds(ccx, tps);\n-        let tofd = ty_of_fn_decl(ccx, empty_rscope,\n-                                 ast::proto_bare, purity, @~[],\n-                                 decl, None, it.span);\n+        let tofd = ty_of_fn_decl(ccx,\n+                                 empty_rscope,\n+                                 ast::proto_bare,\n+                                 purity,\n+                                 ast::Many,\n+                                 @~[],\n+                                 decl,\n+                                 None,\n+                                 it.span);\n         let tpt = {bounds: bounds,\n                    region_param: None,\n                    ty: ty::mk_fn(ccx.tcx, tofd)};\n@@ -910,6 +931,7 @@ fn ty_of_foreign_fn_decl(ccx: @crate_ctxt,\n     let t_fn = ty::mk_fn(ccx.tcx, FnTyBase {\n         meta: FnMeta {purity: purity,\n                       proto: ty::proto_bare,\n+                      onceness: ast::Many,\n                       bounds: @~[],\n                       ret_style: ast::return_val},\n         sig: FnSig {inputs: input_tys,"}, {"sha": "87f313f68bd9bdc372f8edbc0619452420694251", "filename": "src/rustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -46,6 +46,7 @@\n \n use to_str::ToStr;\n use ty::{FnTyBase, FnMeta, FnSig};\n+use syntax::ast::Onceness;\n \n trait combine {\n     fn infcx() -> infer_ctxt;\n@@ -72,6 +73,7 @@ trait combine {\n     fn protos(p1: ty::fn_proto, p2: ty::fn_proto) -> cres<ty::fn_proto>;\n     fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style>;\n     fn purities(a: purity, b: purity) -> cres<purity>;\n+    fn oncenesses(a: Onceness, b: Onceness) -> cres<Onceness>;\n     fn contraregions(a: ty::Region, b: ty::Region) -> cres<ty::Region>;\n     fn regions(a: ty::Region, b: ty::Region) -> cres<ty::Region>;\n     fn vstores(vk: ty::terr_vstore_kind,\n@@ -311,10 +313,14 @@ fn super_fn_metas<C:combine>(\n     do self.protos(a_f.proto, b_f.proto).chain |p| {\n         do self.ret_styles(a_f.ret_style, b_f.ret_style).chain |rs| {\n             do self.purities(a_f.purity, b_f.purity).chain |purity| {\n-                Ok(FnMeta {purity: purity,\n-                           proto: p,\n-                           bounds: a_f.bounds, // XXX: This is wrong!\n-                           ret_style: rs})\n+                do self.oncenesses(a_f.onceness, b_f.onceness).chain\n+                        |onceness| {\n+                    Ok(FnMeta {purity: purity,\n+                               proto: p,\n+                               onceness: onceness,\n+                               bounds: a_f.bounds, // XXX: This is wrong!\n+                               ret_style: rs})\n+                }\n             }\n         }\n     }"}, {"sha": "0e81d97426f36232a593258eb9209a08c20044bd", "filename": "src/rustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -1,6 +1,7 @@\n use combine::*;\n use lattice::*;\n use to_str::ToStr;\n+use syntax::ast::{Many, Once};\n \n enum Glb = combine_fields;  // \"greatest lower bound\" (common subtype)\n \n@@ -97,6 +98,13 @@ impl Glb: combine {\n         }\n     }\n \n+    fn oncenesses(a: Onceness, b: Onceness) -> cres<Onceness> {\n+        match (a, b) {\n+            (Many, _) | (_, Many) => Ok(Many),\n+            (Once, Once) => Ok(Once)\n+        }\n+    }\n+\n     fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style> {\n         match (r1, r2) {\n           (ast::return_val, ast::return_val) => {"}, {"sha": "285b05736c63ef1b66a86869be61d582e51f8d78", "filename": "src/rustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -1,6 +1,7 @@\n use combine::*;\n use lattice::*;\n use to_str::ToStr;\n+use syntax::ast::{Many, Once};\n \n enum Lub = combine_fields;  // \"subtype\", \"subregion\" etc\n \n@@ -80,6 +81,13 @@ impl Lub: combine {\n         }\n     }\n \n+    fn oncenesses(a: Onceness, b: Onceness) -> cres<Onceness> {\n+        match (a, b) {\n+            (Once, _) | (_, Once) => Ok(Once),\n+            (Many, Many) => Ok(Many)\n+        }\n+    }\n+\n     fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style> {\n         match (r1, r2) {\n           (ast::return_val, _) |"}, {"sha": "9e27235b30d1a434956ee17cdd55fa10038642d0", "filename": "src/rustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -93,6 +93,12 @@ impl Sub: combine {\n         })\n     }\n \n+    fn oncenesses(a: Onceness, b: Onceness) -> cres<Onceness> {\n+        self.lub().oncenesses(a, b).compare(b, || {\n+            ty::terr_onceness_mismatch(expected_found(&self, a, b))\n+        })\n+    }\n+\n     fn ret_styles(a: ret_style, b: ret_style) -> cres<ret_style> {\n         self.lub().ret_styles(a, b).compare(b, || {\n             ty::terr_ret_style_mismatch(expected_found(&self, a, b))"}, {"sha": "c7062baaea5ec4103bdd0b9fa201f4ac467e7e89", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -19,7 +19,8 @@ use syntax::codemap;\n use syntax::codemap::span;\n use syntax::print::pprust;\n use syntax::print::pprust::{path_to_str, proto_to_str,\n-                            mode_to_str, purity_to_str};\n+                            mode_to_str, purity_to_str,\n+                            onceness_to_str};\n use syntax::{ast, ast_util};\n use syntax::ast_map;\n \n@@ -266,14 +267,24 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         };\n         modestr + ty_to_str(cx, ty)\n     }\n-    fn fn_to_str(cx: ctxt, purity: ast::purity, proto: ty::fn_proto,\n+    fn fn_to_str(cx: ctxt,\n+                 purity: ast::purity,\n+                 proto: ty::fn_proto,\n+                 onceness: ast::Onceness,\n                  ident: Option<ast::ident>,\n-                 inputs: ~[arg], output: t, cf: ast::ret_style) -> ~str {\n+                 inputs: ~[arg],\n+                 output: t,\n+                 cf: ast::ret_style) -> ~str {\n         let mut s;\n \n         s = match purity {\n-          ast::impure_fn => ~\"\",\n-          _ => purity_to_str(purity) + ~\" \"\n+            ast::impure_fn => ~\"\",\n+            _ => purity_to_str(purity) + ~\" \"\n+        };\n+\n+        s += match onceness {\n+            ast::Many => ~\"\",\n+            ast::Once => onceness_to_str(onceness) + ~\" \"\n         };\n \n         s += ~\"fn\";\n@@ -298,8 +309,13 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n     }\n     fn method_to_str(cx: ctxt, m: method) -> ~str {\n         return fn_to_str(\n-            cx, m.fty.meta.purity, m.fty.meta.proto, Some(m.ident),\n-            m.fty.sig.inputs, m.fty.sig.output,\n+            cx,\n+            m.fty.meta.purity,\n+            m.fty.meta.proto,\n+            m.fty.meta.onceness,\n+            Some(m.ident),\n+            m.fty.sig.inputs,\n+            m.fty.sig.output,\n             m.fty.meta.ret_style) + ~\";\";\n     }\n     fn field_to_str(cx: ctxt, f: field) -> ~str {\n@@ -347,8 +363,14 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         ~\"(\" + str::connect(strs, ~\",\") + ~\")\"\n       }\n       ty_fn(ref f) => {\n-        fn_to_str(cx, f.meta.purity, f.meta.proto, None, f.sig.inputs,\n-                  f.sig.output, f.meta.ret_style)\n+        fn_to_str(cx,\n+                  f.meta.purity,\n+                  f.meta.proto,\n+                  f.meta.onceness,\n+                  None,\n+                  f.sig.inputs,\n+                  f.sig.output,\n+                  f.meta.ret_style)\n       }\n       ty_infer(infer_ty) => infer_ty.to_str(),\n       ty_param({idx: id, _}) => {"}, {"sha": "1b789b4df3d9ccf49d4e6bf5d5da2fd42140b4b7", "filename": "src/test/compile-fail/once-fn-subtyping.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be93b29d304b310ec56630f5313ccddf3ae470ea/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs?ref=be93b29d304b310ec56630f5313ccddf3ae470ea", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let f: &once fn() = ||();\n+    let g: &fn() = f;  //~ ERROR mismatched types\n+    let h: &fn() = ||();\n+    let i: &once fn() = h;  // ok\n+}\n+"}]}