{"sha": "e12aeb39bc4221421890011006c5ae23154cc695", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMmFlYjM5YmM0MjIxNDIxODkwMDExMDA2YzVhZTIzMTU0Y2M2OTU=", "commit": {"author": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2014-05-04T07:11:42Z"}, "committer": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2014-05-13T21:19:00Z"}, "message": "Use CreateProcessW instead of CreateProcessA\n\nChanged libnative to use CreateProcessW instead of CreateProcessA.  In\naddition, the lpEnvironment parameter now uses Unicode.\n\nAdded a helper function os::win32::as_mut_utf16_p, which does basically\nthe same thing as os::win32::as_utf16_p except the pointer is mutable.", "tree": {"sha": "88152484211b4ac51c81c8217dcd23135dba5700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88152484211b4ac51c81c8217dcd23135dba5700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e12aeb39bc4221421890011006c5ae23154cc695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e12aeb39bc4221421890011006c5ae23154cc695", "html_url": "https://github.com/rust-lang/rust/commit/e12aeb39bc4221421890011006c5ae23154cc695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e12aeb39bc4221421890011006c5ae23154cc695/comments", "author": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4537f13a877850d8a390acc2e3a80964532505b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4537f13a877850d8a390acc2e3a80964532505b3", "html_url": "https://github.com/rust-lang/rust/commit/4537f13a877850d8a390acc2e3a80964532505b3"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "cf80d5a06d5f4861b04e43dc05ff10b9ef02bc68", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e12aeb39bc4221421890011006c5ae23154cc695/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12aeb39bc4221421890011006c5ae23154cc695/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=e12aeb39bc4221421890011006c5ae23154cc695", "patch": "@@ -208,7 +208,7 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use consts::os::extra::{TRUE, FALSE, INFINITE};\n #[cfg(windows)] pub use consts::os::extra::{PROCESS_TERMINATE, PROCESS_QUERY_INFORMATION};\n #[cfg(windows)] pub use consts::os::extra::{STILL_ACTIVE, DETACHED_PROCESS};\n-#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW_PROCESS_GROUP};\n+#[cfg(windows)] pub use consts::os::extra::{CREATE_NEW_PROCESS_GROUP, CREATE_UNICODE_ENVIRONMENT};\n #[cfg(windows)] pub use consts::os::extra::{FILE_BEGIN, FILE_END, FILE_CURRENT};\n #[cfg(windows)] pub use consts::os::extra::{FILE_GENERIC_READ, FILE_GENERIC_WRITE};\n #[cfg(windows)] pub use consts::os::extra::{FILE_SHARE_READ, FILE_SHARE_WRITE, FILE_SHARE_DELETE};\n@@ -1937,6 +1937,7 @@ pub mod consts {\n \n             pub static DETACHED_PROCESS: DWORD = 0x00000008;\n             pub static CREATE_NEW_PROCESS_GROUP: DWORD = 0x00000200;\n+            pub static CREATE_UNICODE_ENVIRONMENT: DWORD = 0x00000400;\n \n             pub static PIPE_ACCESS_DUPLEX: DWORD = 0x00000003;\n             pub static PIPE_ACCESS_INBOUND: DWORD = 0x00000001;\n@@ -4193,7 +4194,7 @@ pub mod funcs {\n         pub mod kernel32 {\n             use types::os::arch::c95::{c_uint};\n             use types::os::arch::extra::{BOOL, DWORD, SIZE_T, HMODULE,\n-                                               LPCWSTR, LPWSTR, LPCSTR, LPSTR,\n+                                               LPCWSTR, LPWSTR,\n                                                LPCH, LPDWORD, LPVOID,\n                                                LPCVOID, LPOVERLAPPED,\n                                                LPSECURITY_ATTRIBUTES,\n@@ -4251,16 +4252,16 @@ pub mod funcs {\n                                    dwProcessId: DWORD)\n                                    -> HANDLE;\n                 pub fn GetCurrentProcess() -> HANDLE;\n-                pub fn CreateProcessA(lpApplicationName: LPCSTR,\n-                                      lpCommandLine: LPSTR,\n+                pub fn CreateProcessW(lpApplicationName: LPCWSTR,\n+                                      lpCommandLine: LPWSTR,\n                                       lpProcessAttributes:\n                                       LPSECURITY_ATTRIBUTES,\n                                       lpThreadAttributes:\n                                       LPSECURITY_ATTRIBUTES,\n                                       bInheritHandles: BOOL,\n                                       dwCreationFlags: DWORD,\n                                       lpEnvironment: LPVOID,\n-                                      lpCurrentDirectory: LPCSTR,\n+                                      lpCurrentDirectory: LPCWSTR,\n                                       lpStartupInfo: LPSTARTUPINFO,\n                                       lpProcessInformation:\n                                       LPPROCESS_INFORMATION)"}, {"sha": "dbb191911e7418f99c1601d12b942cf651c1ea09", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e12aeb39bc4221421890011006c5ae23154cc695/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12aeb39bc4221421890011006c5ae23154cc695/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=e12aeb39bc4221421890011006c5ae23154cc695", "patch": "@@ -258,7 +258,7 @@ fn spawn_process_os(config: p::ProcessConfig,\n         GetCurrentProcess,\n         DuplicateHandle,\n         CloseHandle,\n-        CreateProcessA\n+        CreateProcessW\n     };\n     use libc::funcs::extra::msvcrt::get_osfhandle;\n \n@@ -318,15 +318,15 @@ fn spawn_process_os(config: p::ProcessConfig,\n         let mut create_err = None;\n \n         // stolen from the libuv code.\n-        let mut flags = 0;\n+        let mut flags = libc::CREATE_UNICODE_ENVIRONMENT;\n         if config.detach {\n             flags |= libc::DETACHED_PROCESS | libc::CREATE_NEW_PROCESS_GROUP;\n         }\n \n         with_envp(env, |envp| {\n             with_dirp(dir, |dirp| {\n-                cmd.with_c_str(|cmdp| {\n-                    let created = CreateProcessA(ptr::null(), mem::transmute(cmdp),\n+                os::win32::as_mut_utf16_p(cmd, |cmdp| {\n+                    let created = CreateProcessW(ptr::null(), cmdp,\n                                                  ptr::mut_null(), ptr::mut_null(), TRUE,\n                                                  flags, envp, dirp, &mut si,\n                                                  &mut pi);\n@@ -691,7 +691,7 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*mut c_void| -> T) -> T {\n \n             for pair in env.iter() {\n                 let kv = format!(\"{}={}\", *pair.ref0(), *pair.ref1());\n-                blk.push_all(kv.as_bytes());\n+                blk.push_all(kv.to_utf16().as_slice());\n                 blk.push(0);\n             }\n \n@@ -704,9 +704,12 @@ fn with_envp<T>(env: Option<~[(~str, ~str)]>, cb: |*mut c_void| -> T) -> T {\n }\n \n #[cfg(windows)]\n-fn with_dirp<T>(d: Option<&Path>, cb: |*libc::c_char| -> T) -> T {\n+fn with_dirp<T>(d: Option<&Path>, cb: |*u16| -> T) -> T {\n     match d {\n-      Some(dir) => dir.with_c_str(|buf| cb(buf)),\n+      Some(dir) => match dir.as_str() {\n+          Some(dir_str) => os::win32::as_utf16_p(dir_str, cb),\n+          None => cb(ptr::null())\n+      },\n       None => cb(ptr::null())\n     }\n }"}, {"sha": "44c338a3091807730747964d18d7061f885e6e32", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e12aeb39bc4221421890011006c5ae23154cc695/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12aeb39bc4221421890011006c5ae23154cc695/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=e12aeb39bc4221421890011006c5ae23154cc695", "patch": "@@ -141,10 +141,14 @@ pub mod win32 {\n     }\n \n     pub fn as_utf16_p<T>(s: &str, f: |*u16| -> T) -> T {\n+        as_mut_utf16_p(s, |t| { f(t as *u16) })\n+    }\n+\n+    pub fn as_mut_utf16_p<T>(s: &str, f: |*mut u16| -> T) -> T {\n         let mut t = s.to_utf16();\n         // Null terminate before passing on.\n         t.push(0u16);\n-        f(t.as_ptr())\n+        f(t.as_mut_ptr())\n     }\n }\n "}]}