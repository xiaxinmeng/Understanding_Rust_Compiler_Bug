{"sha": "67a9f20c91fcb7281b46514bd866e353347a4416", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTlmMjBjOTFmY2I3MjgxYjQ2NTE0YmQ4NjZlMzUzMzQ3YTQ0MTY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-15T06:09:47Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-15T06:09:47Z"}, "message": "Fix `map_clone` bad suggestion\n\n`cloned` requires that the elements of the iterator must be references. This\nchange determines if that is the case by examining the type of the closure\nargument and suggesting `.cloned` only if it is a reference. When the closure\nargument is not a reference, it suggests removing the `map` call instead.\n\nA minor problem with this change is that the new check sometimes overlaps\nwith the `clone_on_copy` lint.\n\nFixes #498", "tree": {"sha": "432dcfb14ba3df06762ecb69d23e65d71b9dfcc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432dcfb14ba3df06762ecb69d23e65d71b9dfcc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a9f20c91fcb7281b46514bd866e353347a4416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a9f20c91fcb7281b46514bd866e353347a4416", "html_url": "https://github.com/rust-lang/rust/commit/67a9f20c91fcb7281b46514bd866e353347a4416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a9f20c91fcb7281b46514bd866e353347a4416/comments", "author": null, "committer": null, "parents": [{"sha": "19553aee2cef35cb3b3409128f76f3819a43b925", "url": "https://api.github.com/repos/rust-lang/rust/commits/19553aee2cef35cb3b3409128f76f3819a43b925", "html_url": "https://github.com/rust-lang/rust/commit/19553aee2cef35cb3b3409128f76f3819a43b925"}], "stats": {"total": 105, "additions": 80, "deletions": 25}, "files": [{"sha": "0fb0d8d690f1b92e430b9de3bba62bcaafb028c7", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/67a9f20c91fcb7281b46514bd866e353347a4416/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a9f20c91fcb7281b46514bd866e353347a4416/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=67a9f20c91fcb7281b46514bd866e353347a4416", "patch": "@@ -5,6 +5,7 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use syntax::ast::Ident;\n@@ -69,19 +70,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     hir::PatKind::Ref(ref inner, _) => if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated, _, name, None\n                     ) = inner.node {\n-                        lint(cx, e.span, args[0].span, name, closure_expr);\n+                        if ident_eq(name, closure_expr) {\n+                            lint(cx, e.span, args[0].span);\n+                        }\n                     },\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n                         match closure_expr.node {\n                             hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n-                                if !cx.tables.expr_ty(inner).is_box() {\n-                                    lint(cx, e.span, args[0].span, name, inner);\n+                                if ident_eq(name, inner) && !cx.tables.expr_ty(inner).is_box() {\n+                                    lint(cx, e.span, args[0].span);\n                                 }\n                             },\n                             hir::ExprKind::MethodCall(ref method, _, ref obj) => {\n-                                if method.ident.as_str() == \"clone\"\n+                                if ident_eq(name, &obj[0]) && method.ident.as_str() == \"clone\"\n                                     && match_trait_method(cx, closure_expr, &paths::CLONE_TRAIT) {\n-                                    lint(cx, e.span, args[0].span, name, &obj[0]);\n+\n+                                    let obj_ty = cx.tables.expr_ty(&obj[0]);\n+                                    if let ty::Ref(..) = obj_ty.sty {\n+                                        lint(cx, e.span, args[0].span);\n+                                    } else {\n+                                        lint_needless_cloning(cx, e.span, args[0].span);\n+                                    }\n                                 }\n                             },\n                             _ => {},\n@@ -94,22 +103,38 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-fn lint(cx: &LateContext<'_, '_>, replace: Span, root: Span, name: Ident, path: &hir::Expr) {\n+fn ident_eq(name: Ident, path: &hir::Expr) -> bool {\n     if let hir::ExprKind::Path(hir::QPath::Resolved(None, ref path)) = path.node {\n-        if path.segments.len() == 1 && path.segments[0].ident == name {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                MAP_CLONE,\n-                replace,\n-                \"You are using an explicit closure for cloning elements\",\n-                \"Consider calling the dedicated `cloned` method\",\n-                format!(\n-                    \"{}.cloned()\",\n-                    snippet_with_applicability(cx, root, \"..\", &mut applicability)\n-                ),\n-                applicability,\n-            )\n-        }\n+        path.segments.len() == 1 && path.segments[0].ident == name\n+    } else {\n+        false\n     }\n }\n+\n+fn lint_needless_cloning(cx: &LateContext<'_, '_>, root: Span, receiver: Span) {\n+    span_lint_and_sugg(\n+        cx,\n+        MAP_CLONE,\n+        root.trim_start(receiver).unwrap(),\n+        \"You are needlessly cloning iterator elements\",\n+        \"Remove the map call\",\n+        String::new(),\n+        Applicability::MachineApplicable,\n+    )\n+}\n+\n+fn lint(cx: &LateContext<'_, '_>, replace: Span, root: Span) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    span_lint_and_sugg(\n+        cx,\n+        MAP_CLONE,\n+        replace,\n+        \"You are using an explicit closure for cloning elements\",\n+        \"Consider calling the dedicated `cloned` method\",\n+        format!(\n+            \"{}.cloned()\",\n+            snippet_with_applicability(cx, root, \"..\", &mut applicability)\n+        ),\n+        applicability,\n+    )\n+}"}, {"sha": "aea8924073cbf336d092179b32d7a17fe4b01715", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67a9f20c91fcb7281b46514bd866e353347a4416/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/67a9f20c91fcb7281b46514bd866e353347a4416/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=67a9f20c91fcb7281b46514bd866e353347a4416", "patch": "@@ -1,11 +1,23 @@\n // run-rustfix\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n+#![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().cloned().collect();\n     let _: Vec<String> = vec![String::new()].iter().cloned().collect();\n     let _: Vec<u32> = vec![42, 43].iter().cloned().collect();\n     let _: Option<u64> = Some(Box::new(16)).map(|b| *b);\n+\n+    // Don't lint these\n+    let v = vec![5_i8; 6];\n+    let a = 0;\n+    let b = &a;\n+    let _ = v.iter().map(|_x| *b);\n+    let _ = v.iter().map(|_x| a.clone());\n+    let _ = v.iter().map(|&_x| a);\n+\n+    // Issue #496\n+    let _ = std::env::args();\n }"}, {"sha": "e5560b34bb08a50af4dd3a0af833160d9818995c", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67a9f20c91fcb7281b46514bd866e353347a4416/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a9f20c91fcb7281b46514bd866e353347a4416/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=67a9f20c91fcb7281b46514bd866e353347a4416", "patch": "@@ -1,11 +1,23 @@\n // run-rustfix\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n+#![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n     let _: Option<u64> = Some(Box::new(16)).map(|b| *b);\n+\n+    // Don't lint these\n+    let v = vec![5_i8; 6];\n+    let a = 0;\n+    let b = &a;\n+    let _ = v.iter().map(|_x| *b);\n+    let _ = v.iter().map(|_x| a.clone());\n+    let _ = v.iter().map(|&_x| a);\n+\n+    // Issue #496\n+    let _ = std::env::args().map(|v| v.clone());\n }"}, {"sha": "504f4a01a4cc6681beba3e475231d10a93dfb0c1", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67a9f20c91fcb7281b46514bd866e353347a4416/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a9f20c91fcb7281b46514bd866e353347a4416/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=67a9f20c91fcb7281b46514bd866e353347a4416", "patch": "@@ -1,22 +1,28 @@\n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:7:22\n+  --> $DIR/map_clone.rs:8:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:8:26\n+  --> $DIR/map_clone.rs:9:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:9:23\n+  --> $DIR/map_clone.rs:10:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![42, 43].iter().cloned()`\n \n-error: aborting due to 3 previous errors\n+error: You are needlessly cloning iterator elements\n+  --> $DIR/map_clone.rs:22:29\n+   |\n+LL |     let _ = std::env::args().map(|v| v.clone());\n+   |                             ^^^^^^^^^^^^^^^^^^^ help: Remove the map call\n+\n+error: aborting due to 4 previous errors\n "}]}