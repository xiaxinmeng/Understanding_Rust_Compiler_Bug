{"sha": "c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NWJiN2Y4Yjk5ZjE2ZjlkMGViZWM2Mjc2Nzk3Y2IyMWNmZDdlNDc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-11T12:03:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-11T13:04:40Z"}, "message": "Explicitly check for reference locals or fields in Name classification", "tree": {"sha": "c0151b1984fd3e279132da6cceb37d9cef7d02ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0151b1984fd3e279132da6cceb37d9cef7d02ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "html_url": "https://github.com/rust-lang/rust/commit/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "html_url": "https://github.com/rust-lang/rust/commit/87621de2b9e03cf4b34e49107671ff5ff3e81cdd"}], "stats": {"total": 117, "additions": 67, "deletions": 50}, "files": [{"sha": "00b6f7a5c323efd1e874f41787ba43f281585c68", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -112,8 +112,8 @@ pub(crate) fn external_docs(\n     let node = token.parent()?;\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())?,\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined())?,\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced_field())?,\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.defined_or_referenced_field())?,\n             _ => return None,\n         }\n     };"}, {"sha": "59306ac065b91b0d0b4a3fedc6c80f490c7440e9", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -25,10 +25,10 @@ pub(crate) fn goto_declaration(\n         match parent {\n             ast::NameRef(name_ref) => {\n                 let name_kind = NameRefClass::classify(&sema, &name_ref)?;\n-                name_kind.referenced()\n+                name_kind.referenced_local()\n             },\n             ast::Name(name) => {\n-                NameClass::classify(&sema, &name)?.referenced_or_defined()\n+                NameClass::classify(&sema, &name)?.defined_or_referenced_local()\n             },\n             _ => return None,\n         }"}, {"sha": "e9ca2336315a1486335b60798feb6e9f6e199b19", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -60,12 +60,11 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, Either::Right(&name_ref))\n             },\n             ast::Name(name) => {\n-                let def = NameClass::classify(&sema, &name)?.referenced_or_defined();\n-                try_find_trait_item_definition(sema.db, &def)\n-                    .or_else(|| def.try_to_nav(sema.db))\n+                let def = NameClass::classify(&sema, &name)?.defined_or_referenced_local();\n+                try_find_trait_item_definition(sema.db, &def).or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n-                let def = name_class.referenced_or_defined();\n+                let def = name_class.defined_or_referenced_local();\n                 def.try_to_nav(sema.db)\n             } else {\n                 reference_definition(&sema, Either::Left(&lt))\n@@ -140,7 +139,7 @@ pub(crate) fn reference_definition(\n         |lifetime| NameRefClass::classify_lifetime(sema, lifetime),\n         |name_ref| NameRefClass::classify(sema, name_ref),\n     )?;\n-    let def = name_kind.referenced();\n+    let def = name_kind.referenced_local();\n     def.try_to_nav(sema.db)\n }\n \n@@ -878,10 +877,11 @@ fn main() {\n             r#\"\n enum Foo {\n     Bar { x: i32 }\n-}       //^\n+}\n fn baz(foo: Foo) {\n     match foo {\n         Foo::Bar { x$0 } => x\n+                 //^\n     };\n }\n \"#,"}, {"sha": "d1101230452f7b5a3f25d57446c87a61997cf223", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -29,10 +29,10 @@ pub(crate) fn goto_implementation(\n     let node = sema.find_node_at_offset_with_descend(&syntax, position.offset)?;\n     let def = match &node {\n         ast::NameLike::Name(name) => {\n-            NameClass::classify(&sema, name).map(|class| class.referenced_or_defined())\n+            NameClass::classify(&sema, name).map(|class| class.defined_or_referenced_local())\n         }\n         ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(&sema, name_ref).map(|class| class.referenced())\n+            NameRefClass::classify(&sema, name_ref).map(|class| class.referenced_local())\n         }\n         ast::NameLike::Lifetime(_) => None,\n     }?;"}, {"sha": "8c0bbda53647ad512998860a72e29e49bb4ab596", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -96,18 +96,14 @@ pub(crate) fn hover(\n         match node {\n             // we don't use NameClass::referenced_or_defined here as we do not want to resolve\n             // field pattern shorthands to their definition\n-            ast::Name(name) => NameClass::classify(&sema, &name).and_then(|class| match class {\n-                NameClass::ConstReference(def) => Some(def),\n-                def => def.defined(),\n-            }),\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|class| class.defined_or_referenced_local()),\n             ast::NameRef(name_ref) => {\n-                NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())\n+                NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced_field())\n             },\n             ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime).map_or_else(\n-                || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced()),\n+                || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced_local()),\n                 |d| d.defined(),\n             ),\n-\n             _ => {\n                 if ast::Comment::cast(token.clone()).is_some() {\n                     cov_mark::hit!(no_highlight_on_comment_hover);"}, {"sha": "9eeb2cf5af5b0b3dad4eb776e12d43b7aec80fa5", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn find_all_refs(\n \n     let (def, is_literal_search) =\n         if let Some(name) = get_name_of_item_declaration(&syntax, position) {\n-            (NameClass::classify(sema, &name)?.referenced_or_defined(), true)\n+            (NameClass::classify(sema, &name)?.defined_or_referenced_field(), true)\n         } else {\n             (find_def(sema, &syntax, position.offset)?, false)\n         };\n@@ -116,13 +116,17 @@ pub(crate) fn find_def(\n     offset: TextSize,\n ) -> Option<Definition> {\n     let def = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n-        ast::NameLike::NameRef(name_ref) => NameRefClass::classify(sema, &name_ref)?.referenced(),\n-        ast::NameLike::Name(name) => NameClass::classify(sema, &name)?.referenced_or_defined(),\n+        ast::NameLike::NameRef(name_ref) => {\n+            NameRefClass::classify(sema, &name_ref)?.referenced_local()\n+        }\n+        ast::NameLike::Name(name) => {\n+            NameClass::classify(sema, &name)?.defined_or_referenced_local()\n+        }\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| class.referenced())\n+            .map(|class| class.referenced_local())\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n-                    .map(|class| class.referenced_or_defined())\n+                    .map(|class| class.defined_or_referenced_local())\n             })?,\n     };\n     Some(def)"}, {"sha": "f19dcaeb8017103b2e6f7f80501e515c3db22dee", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -108,11 +108,11 @@ fn find_definition(\n             bail!(\"Renaming aliases is currently unsupported\")\n         }\n         ast::NameLike::Name(name) => {\n-            NameClass::classify(sema, &name).map(|class| class.referenced_or_defined())\n+            NameClass::classify(sema, &name).map(|class| class.defined_or_referenced_local())\n         }\n         ast::NameLike::NameRef(name_ref) => {\n             if let Some(def) =\n-                NameRefClass::classify(sema, &name_ref).map(|class| class.referenced())\n+                NameRefClass::classify(sema, &name_ref).map(|class| class.referenced_local())\n             {\n                 // if the name differs from the definitions name it has to be an alias\n                 if def.name(sema.db).map_or(false, |it| it.to_string() != name_ref.text()) {\n@@ -124,9 +124,10 @@ fn find_definition(\n             }\n         }\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| class.referenced())\n+            .map(|class| class.referenced_local())\n             .or_else(|| {\n-                NameClass::classify_lifetime(sema, &lifetime).map(|it| it.referenced_or_defined())\n+                NameClass::classify_lifetime(sema, &lifetime)\n+                    .map(|it| it.defined_or_referenced_field())\n             }),\n     }\n     .ok_or_else(|| format_err!(\"No references found at position\"))?;"}, {"sha": "197a32da069438c00d1ee8839c1687980c478025", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -58,10 +58,8 @@ pub(super) fn element(\n                 Some(NameClass::ConstReference(def)) => highlight_def(db, krate, def),\n                 Some(NameClass::PatFieldShorthand { field_ref, .. }) => {\n                     let mut h = HlTag::Symbol(SymbolKind::Field).into();\n-                    if let Definition::Field(field) = field_ref {\n-                        if let hir::VariantDef::Union(_) = field.parent_def(db) {\n-                            h |= HlMod::Unsafe;\n-                        }\n+                    if let hir::VariantDef::Union(_) = field_ref.parent_def(db) {\n+                        h |= HlMod::Unsafe;\n                     }\n                     h\n                 }"}, {"sha": "ea2db0b4eb718b93a747f7f2a857e71a84fa22d9", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -638,7 +638,7 @@ fn vars_used_in_body(ctx: &AssistContext, body: &FunctionBody) -> Vec<Local> {\n     body.descendants()\n         .filter_map(ast::NameRef::cast)\n         .filter_map(|name_ref| NameRefClass::classify(&ctx.sema, &name_ref))\n-        .map(|name_kind| name_kind.referenced())\n+        .map(|name_kind| name_kind.referenced_local())\n         .filter_map(|definition| match definition {\n             Definition::Local(local) => Some(local),\n             _ => None,"}, {"sha": "a72345564d8cc2cb934f0f9897df8fb3d2489eec", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -112,12 +112,11 @@ pub enum NameClass {\n     /// `None` in `if let None = Some(82) {}`.\n     /// Syntactically, it is a name, but semantically it is a reference.\n     ConstReference(Definition),\n-    /// `field` in `if let Foo { field } = foo`. Here, `ast::Name` both Here the\n-    /// name both introduces a definition into a local scope, and refers to an\n-    /// existing definition.\n+    /// `field` in `if let Foo { field } = foo`. Here, `ast::Name` both introduces\n+    /// a definition into a local scope, and refers to an existing definition.\n     PatFieldShorthand {\n         local_def: Local,\n-        field_ref: Definition,\n+        field_ref: Field,\n     },\n }\n \n@@ -134,11 +133,23 @@ impl NameClass {\n         Some(res)\n     }\n \n-    /// `Definition` referenced or defined by this name.\n-    pub fn referenced_or_defined(self) -> Definition {\n+    /// `Definition` referenced or defined by this name, in case of a shorthand this will yield the field reference.\n+    pub fn defined_or_referenced_field(self) -> Definition {\n         match self {\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-            NameClass::PatFieldShorthand { local_def: _, field_ref } => field_ref,\n+            NameClass::PatFieldShorthand { local_def: _, field_ref } => {\n+                Definition::Field(field_ref)\n+            }\n+        }\n+    }\n+\n+    /// `Definition` referenced or defined by this name, in case of a shorthand this will yield the local definition.\n+    pub fn defined_or_referenced_local(self) -> Definition {\n+        match self {\n+            NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n+            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n+                Definition::Local(local_def)\n+            }\n         }\n     }\n \n@@ -183,7 +194,7 @@ impl NameClass {\n                             })\n                             .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n \n-                        Some(NameClass::Definition(name_ref_class.referenced()))\n+                        Some(NameClass::Definition(name_ref_class.referenced_field()))\n                     } else {\n                         let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n                         let krate = sema.resolve_extern_crate(&extern_crate)?;\n@@ -197,7 +208,6 @@ impl NameClass {\n                     if let Some(record_pat_field) = it.syntax().parent().and_then(ast::RecordPatField::cast) {\n                         if record_pat_field.name_ref().is_none() {\n                             if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n-                                let field = Definition::Field(field);\n                                 return Some(NameClass::PatFieldShorthand { local_def: local, field_ref: field });\n                             }\n                         }\n@@ -302,17 +312,25 @@ impl NameClass {\n #[derive(Debug)]\n pub enum NameRefClass {\n     Definition(Definition),\n-    FieldShorthand { local_ref: Local, field_ref: Definition },\n+    FieldShorthand { local_ref: Local, field_ref: Field },\n }\n \n impl NameRefClass {\n-    /// `Definition`, which this name refers to.\n-    pub fn referenced(self) -> Definition {\n+    /// `Definition`, which this name refers to with a preference for the field reference in case of a field shorthand.\n+    pub fn referenced_field(self) -> Definition {\n+        match self {\n+            NameRefClass::Definition(def) => def,\n+            NameRefClass::FieldShorthand { local_ref: _, field_ref } => {\n+                Definition::Field(field_ref)\n+            }\n+        }\n+    }\n+\n+    /// `Definition`, which this name refers to with a preference for the local reference in case of a field shorthand.\n+    pub fn referenced_local(self) -> Definition {\n         match self {\n             NameRefClass::Definition(def) => def,\n             NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n-                // FIXME: this is inherently ambiguous -- this name refers to\n-                // two different defs....\n                 Definition::Local(local_ref)\n             }\n         }\n@@ -342,9 +360,8 @@ impl NameRefClass {\n \n         if let Some(record_field) = ast::RecordExprField::for_field_name(name_ref) {\n             if let Some((field, local, _)) = sema.resolve_record_field(&record_field) {\n-                let field = Definition::Field(field);\n                 let res = match local {\n-                    None => NameRefClass::Definition(field),\n+                    None => NameRefClass::Definition(Definition::Field(field)),\n                     Some(local) => {\n                         NameRefClass::FieldShorthand { field_ref: field, local_ref: local }\n                     }"}, {"sha": "41254b784741416e0cc74d24bdd211ecfbbb7454", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=c65bb7f8b99f16f9d0ebec6276797cb21cfd7e47", "patch": "@@ -550,6 +550,7 @@ impl<'a> FindUsages<'a> {\n                 }\n             }\n             Some(NameRefClass::FieldShorthand { local_ref: local, field_ref: field }) => {\n+                let field = Definition::Field(field);\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let access = match self.def {\n                     Definition::Field(_) if field == self.def => reference_access(&field, name_ref),\n@@ -574,7 +575,7 @@ impl<'a> FindUsages<'a> {\n         match NameClass::classify(self.sema, name) {\n             Some(NameClass::PatFieldShorthand { local_def: _, field_ref })\n                 if matches!(\n-                    self.def, Definition::Field(_) if field_ref == self.def\n+                    self.def, Definition::Field(_) if Definition::Field(field_ref) == self.def\n                 ) =>\n             {\n                 let FileRange { file_id, range } = self.sema.original_range(name.syntax());"}]}