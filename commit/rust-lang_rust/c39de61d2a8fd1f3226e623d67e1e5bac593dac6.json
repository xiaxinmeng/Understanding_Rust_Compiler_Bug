{"sha": "c39de61d2a8fd1f3226e623d67e1e5bac593dac6", "node_id": "C_kwDOAAsO6NoAKGMzOWRlNjFkMmE4ZmQxZjMyMjZlNjIzZDY3ZTFlNWJhYzU5M2RhYzY", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-23T16:42:12Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-23T19:55:17Z"}, "message": "include closures and generators in try_compute_field_ty", "tree": {"sha": "d75555cad229d8b9bb7362523ac9c2615a183743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d75555cad229d8b9bb7362523ac9c2615a183743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c39de61d2a8fd1f3226e623d67e1e5bac593dac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c39de61d2a8fd1f3226e623d67e1e5bac593dac6", "html_url": "https://github.com/rust-lang/rust/commit/c39de61d2a8fd1f3226e623d67e1e5bac593dac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c39de61d2a8fd1f3226e623d67e1e5bac593dac6/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d00026edd315a05c4aff27c8d8cb233a6e95d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d00026edd315a05c4aff27c8d8cb233a6e95d92", "html_url": "https://github.com/rust-lang/rust/commit/4d00026edd315a05c4aff27c8d8cb233a6e95d92"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "bf417dae7851137cf96a145b7ab645622c0af70e", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c39de61d2a8fd1f3226e623d67e1e5bac593dac6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39de61d2a8fd1f3226e623d67e1e5bac593dac6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=c39de61d2a8fd1f3226e623d67e1e5bac593dac6", "patch": "@@ -397,13 +397,49 @@ impl<'tcx> PlaceBuilder<'tcx> {\n                 .all_fields()\n                 .nth(field_idx)\n                 .unwrap_or_else(|| {\n-                    bug!(\"expected to take field idx {:?} of fields of {:?}\", field_idx, adt_def)\n+                    bug!(\n+                        \"expected to take field with idx {:?} of fields of {:?}\",\n+                        field_idx,\n+                        adt_def\n+                    )\n                 })\n                 .ty(cx.tcx, substs),\n             ty::Tuple(elems) => elems.iter().nth(field_idx).unwrap_or_else(|| {\n-                bug!(\"expected to take field idx {:?} of {:?}\", field_idx, elems)\n+                bug!(\"expected to take field with idx {:?} of {:?}\", field_idx, elems)\n             }),\n-            _ => return None,\n+            ty::Closure(_, substs) => {\n+                let substs = substs.as_closure();\n+                let Some(f_ty) = substs.upvar_tys().nth(field_idx) else {\n+                    bug!(\"expected to take field with idx {:?} of {:?}\", field_idx, substs.upvar_tys().collect::<Vec<_>>());\n+                };\n+\n+                f_ty\n+            }\n+            &ty::Generator(def_id, substs, _) => {\n+                if let Some(var) = variant_index {\n+                    let gen_body = cx.tcx.optimized_mir(def_id);\n+                    let Some(layout) = gen_body.generator_layout() else {\n+                        bug!(\"No generator layout for {:?}\", base_ty);\n+                    };\n+\n+                    let Some(&local) = layout.variant_fields[var].get(field) else {\n+                        bug!(\"expected to take field {:?} of {:?}\", field, layout.variant_fields[var]);\n+                    };\n+\n+                    let Some(&f_ty) = layout.field_tys.get(local) else {\n+                        bug!(\"expected to get element for {:?} in {:?}\", local, layout.field_tys);\n+                    };\n+\n+                    f_ty\n+                } else {\n+                    let Some(f_ty) = substs.as_generator().prefix_tys().nth(field.index()) else {\n+                        bug!(\"expected to take index {:?} in {:?}\", field.index(), substs.as_generator().prefix_tys().collect::<Vec<_>>());\n+                    };\n+\n+                    f_ty\n+                }\n+            }\n+            _ => bug!(\"couldn't create field type, unexpected base type: {:?}\", base_ty),\n         };\n \n         Some(cx.tcx.normalize_erasing_regions(cx.param_env, field_ty))"}]}