{"sha": "d601e74675b5e92b2050c1f4454138a69e620f54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDFlNzQ2NzViNWU5MmIyMDUwYzFmNDQ1NDEzOGE2OWU2MjBmNTQ=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2018-03-26T13:14:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-26T13:14:59Z"}, "message": "Rollup merge of #49346 - Diggsey:hashmap-get-pair, r=Mark-Simulacrum\n\nImplement get_key_value for HashMap, BTreeMap\n\nFixes #43143\n\nFollow up from #46992", "tree": {"sha": "bd2dfdf9a4d67ce3a110a1e208b4ef246ea8b792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2dfdf9a4d67ce3a110a1e208b4ef246ea8b792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d601e74675b5e92b2050c1f4454138a69e620f54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJauPJTCRBK7hj4Ov3rIwAAdHIIAIcA8CS0LsKdIhxKiy8Xn31U\n0cCNW/50n87JsURYWVqFHWf7+dvzLQfDD1WIS6erUVL6cORJ5hOg36Dolwfmy9x4\n2VaRie1DzECxccE8j60zVsOK7sqwUWg3cHfV6NWq9J8YvvHU4L8N+SSIJugFB3i3\nwtbaYui6THAbZjX4Zxv7zQaYoQ+DxFQ92XdmxJIBjHj9n+x7/CWUeEeYA9SmPiRL\nXx1s+R/m1s8OW+6qJHlSJi+8AMpDZ4oltnMDYsASs0o+bdGiDlHHXlVaTYBSDmce\n6ntC8B+I3dxfcZ8z+Z/ZXG/0J/HbWaHD+KcVcwJVtekOI7XgstN+8iEYbN02F/E=\n=ZlEJ\n-----END PGP SIGNATURE-----\n", "payload": "tree bd2dfdf9a4d67ce3a110a1e208b4ef246ea8b792\nparent bd3db2bf2c0833a8dfd9b364cc92acfbd467e418\nparent fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b\nauthor Tim Neumann <mail@timnn.me> 1522070099 +0200\ncommitter GitHub <noreply@github.com> 1522070099 +0200\n\nRollup merge of #49346 - Diggsey:hashmap-get-pair, r=Mark-Simulacrum\n\nImplement get_key_value for HashMap, BTreeMap\n\nFixes #43143\n\nFollow up from #46992\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d601e74675b5e92b2050c1f4454138a69e620f54", "html_url": "https://github.com/rust-lang/rust/commit/d601e74675b5e92b2050c1f4454138a69e620f54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d601e74675b5e92b2050c1f4454138a69e620f54/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd3db2bf2c0833a8dfd9b364cc92acfbd467e418", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3db2bf2c0833a8dfd9b364cc92acfbd467e418", "html_url": "https://github.com/rust-lang/rust/commit/bd3db2bf2c0833a8dfd9b364cc92acfbd467e418"}, {"sha": "fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b", "html_url": "https://github.com/rust-lang/rust/commit/fbec3ec5a78747ee458518e4be7cfe1b5eac9e3b"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "cada190032aa064c806545b65c9c96ec05e3b65b", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d601e74675b5e92b2050c1f4454138a69e620f54/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d601e74675b5e92b2050c1f4454138a69e620f54/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=d601e74675b5e92b2050c1f4454138a69e620f54", "patch": "@@ -576,6 +576,33 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n     }\n \n+    /// Returns the key-value pair corresponding to the supplied key.\n+    ///\n+    /// The supplied key may be any borrowed form of the map's key type, but the ordering\n+    /// on the borrowed form *must* match the ordering on the key type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_get_key_value)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\n+    /// assert_eq!(map.get_key_value(&2), None);\n+    /// ```\n+    #[unstable(feature = \"map_get_key_value\", issue = \"49347\")]\n+    pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n+        where K: Borrow<Q>,\n+              Q: Ord\n+    {\n+        match search::search_tree(self.root.as_ref(), k) {\n+            Found(handle) => Some(handle.into_kv()),\n+            GoDown(_) => None,\n+        }\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but the ordering"}, {"sha": "f0bb781411fb4103026cf5d3d2954ef9761d8207", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d601e74675b5e92b2050c1f4454138a69e620f54/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d601e74675b5e92b2050c1f4454138a69e620f54/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d601e74675b5e92b2050c1f4454138a69e620f54", "patch": "@@ -1184,6 +1184,34 @@ impl<K, V, S> HashMap<K, V, S>\n         self.search(k).map(|bucket| bucket.into_refs().1)\n     }\n \n+    /// Returns the key-value pair corresponding to the supplied key.\n+    ///\n+    /// The supplied key may be any borrowed form of the map's key type, but\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n+    /// the key type.\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_get_key_value)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\n+    /// assert_eq!(map.get_key_value(&2), None);\n+    /// ```\n+    #[unstable(feature = \"map_get_key_value\", issue = \"49347\")]\n+    pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>\n+        where K: Borrow<Q>,\n+              Q: Hash + Eq\n+    {\n+        self.search(k).map(|bucket| bucket.into_refs())\n+    }\n+\n     /// Returns true if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but"}]}