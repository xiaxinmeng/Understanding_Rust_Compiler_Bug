{"sha": "9dde5639908263bb3348616438c59d184fb29530", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZGU1NjM5OTA4MjYzYmIzMzQ4NjE2NDM4YzU5ZDE4NGZiMjk1MzA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-23T22:48:10Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-25T06:27:24Z"}, "message": "Stop reexporting `PrimitiveType` enum in librustdoc.", "tree": {"sha": "3559464bfc4b9399808c99993ddaf9341054020f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3559464bfc4b9399808c99993ddaf9341054020f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dde5639908263bb3348616438c59d184fb29530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dde5639908263bb3348616438c59d184fb29530", "html_url": "https://github.com/rust-lang/rust/commit/9dde5639908263bb3348616438c59d184fb29530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dde5639908263bb3348616438c59d184fb29530/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9ff541396285ac441c5029ae4f0869edc97044", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9ff541396285ac441c5029ae4f0869edc97044", "html_url": "https://github.com/rust-lang/rust/commit/0c9ff541396285ac441c5029ae4f0869edc97044"}], "stats": {"total": 210, "additions": 105, "deletions": 105}, "files": [{"sha": "7e599569a282ef208d402a237c00d1c33d7b7b91", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 91, "deletions": 92, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/9dde5639908263bb3348616438c59d184fb29530/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dde5639908263bb3348616438c59d184fb29530/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9dde5639908263bb3348616438c59d184fb29530", "patch": "@@ -12,7 +12,6 @@\n //! that clean them.\n \n pub use self::Type::*;\n-pub use self::PrimitiveType::*;\n pub use self::TypeKind::*;\n pub use self::VariantKind::*;\n pub use self::Mutability::*;\n@@ -1517,12 +1516,12 @@ impl Type {\n     pub fn primitive_type(&self) -> Option<PrimitiveType> {\n         match *self {\n             Primitive(p) | BorrowedRef { type_: box Primitive(p), ..} => Some(p),\n-            Vector(..) | BorrowedRef{ type_: box Vector(..), ..  } => Some(Slice),\n+            Vector(..) | BorrowedRef{ type_: box Vector(..), ..  } => Some(PrimitiveType::Slice),\n             FixedVector(..) | BorrowedRef { type_: box FixedVector(..), .. } => {\n-                Some(Array)\n+                Some(PrimitiveType::Array)\n             }\n-            Tuple(..) => Some(PrimitiveTuple),\n-            RawPointer(..) => Some(PrimitiveRawPointer),\n+            Tuple(..) => Some(PrimitiveType::PrimitiveTuple),\n+            RawPointer(..) => Some(PrimitiveType::PrimitiveRawPointer),\n             _ => None,\n         }\n     }\n@@ -1547,25 +1546,25 @@ impl GetDefId for Type {\n impl PrimitiveType {\n     fn from_str(s: &str) -> Option<PrimitiveType> {\n         match s {\n-            \"isize\" => Some(Isize),\n-            \"i8\" => Some(I8),\n-            \"i16\" => Some(I16),\n-            \"i32\" => Some(I32),\n-            \"i64\" => Some(I64),\n-            \"usize\" => Some(Usize),\n-            \"u8\" => Some(U8),\n-            \"u16\" => Some(U16),\n-            \"u32\" => Some(U32),\n-            \"u64\" => Some(U64),\n-            \"bool\" => Some(Bool),\n-            \"char\" => Some(Char),\n-            \"str\" => Some(Str),\n-            \"f32\" => Some(F32),\n-            \"f64\" => Some(F64),\n-            \"array\" => Some(Array),\n-            \"slice\" => Some(Slice),\n-            \"tuple\" => Some(PrimitiveTuple),\n-            \"pointer\" => Some(PrimitiveRawPointer),\n+            \"isize\" => Some(PrimitiveType::Isize),\n+            \"i8\" => Some(PrimitiveType::I8),\n+            \"i16\" => Some(PrimitiveType::I16),\n+            \"i32\" => Some(PrimitiveType::I32),\n+            \"i64\" => Some(PrimitiveType::I64),\n+            \"usize\" => Some(PrimitiveType::Usize),\n+            \"u8\" => Some(PrimitiveType::U8),\n+            \"u16\" => Some(PrimitiveType::U16),\n+            \"u32\" => Some(PrimitiveType::U32),\n+            \"u64\" => Some(PrimitiveType::U64),\n+            \"bool\" => Some(PrimitiveType::Bool),\n+            \"char\" => Some(PrimitiveType::Char),\n+            \"str\" => Some(PrimitiveType::Str),\n+            \"f32\" => Some(PrimitiveType::F32),\n+            \"f64\" => Some(PrimitiveType::F64),\n+            \"array\" => Some(PrimitiveType::Array),\n+            \"slice\" => Some(PrimitiveType::Slice),\n+            \"tuple\" => Some(PrimitiveType::PrimitiveTuple),\n+            \"pointer\" => Some(PrimitiveType::PrimitiveRawPointer),\n             _ => None,\n         }\n     }\n@@ -1585,25 +1584,25 @@ impl PrimitiveType {\n \n     pub fn to_string(&self) -> &'static str {\n         match *self {\n-            Isize => \"isize\",\n-            I8 => \"i8\",\n-            I16 => \"i16\",\n-            I32 => \"i32\",\n-            I64 => \"i64\",\n-            Usize => \"usize\",\n-            U8 => \"u8\",\n-            U16 => \"u16\",\n-            U32 => \"u32\",\n-            U64 => \"u64\",\n-            F32 => \"f32\",\n-            F64 => \"f64\",\n-            Str => \"str\",\n-            Bool => \"bool\",\n-            Char => \"char\",\n-            Array => \"array\",\n-            Slice => \"slice\",\n-            PrimitiveTuple => \"tuple\",\n-            PrimitiveRawPointer => \"pointer\",\n+            PrimitiveType::Isize => \"isize\",\n+            PrimitiveType::I8 => \"i8\",\n+            PrimitiveType::I16 => \"i16\",\n+            PrimitiveType::I32 => \"i32\",\n+            PrimitiveType::I64 => \"i64\",\n+            PrimitiveType::Usize => \"usize\",\n+            PrimitiveType::U8 => \"u8\",\n+            PrimitiveType::U16 => \"u16\",\n+            PrimitiveType::U32 => \"u32\",\n+            PrimitiveType::U64 => \"u64\",\n+            PrimitiveType::F32 => \"f32\",\n+            PrimitiveType::F64 => \"f64\",\n+            PrimitiveType::Str => \"str\",\n+            PrimitiveType::Bool => \"bool\",\n+            PrimitiveType::Char => \"char\",\n+            PrimitiveType::Array => \"array\",\n+            PrimitiveType::Slice => \"slice\",\n+            PrimitiveType::PrimitiveTuple => \"tuple\",\n+            PrimitiveType::PrimitiveRawPointer => \"pointer\",\n         }\n     }\n \n@@ -1771,21 +1770,21 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         match self.sty {\n             ty::TyNever => Never,\n-            ty::TyBool => Primitive(Bool),\n-            ty::TyChar => Primitive(Char),\n-            ty::TyInt(ast::IntTy::Is) => Primitive(Isize),\n-            ty::TyInt(ast::IntTy::I8) => Primitive(I8),\n-            ty::TyInt(ast::IntTy::I16) => Primitive(I16),\n-            ty::TyInt(ast::IntTy::I32) => Primitive(I32),\n-            ty::TyInt(ast::IntTy::I64) => Primitive(I64),\n-            ty::TyUint(ast::UintTy::Us) => Primitive(Usize),\n-            ty::TyUint(ast::UintTy::U8) => Primitive(U8),\n-            ty::TyUint(ast::UintTy::U16) => Primitive(U16),\n-            ty::TyUint(ast::UintTy::U32) => Primitive(U32),\n-            ty::TyUint(ast::UintTy::U64) => Primitive(U64),\n-            ty::TyFloat(ast::FloatTy::F32) => Primitive(F32),\n-            ty::TyFloat(ast::FloatTy::F64) => Primitive(F64),\n-            ty::TyStr => Primitive(Str),\n+            ty::TyBool => Primitive(PrimitiveType::Bool),\n+            ty::TyChar => Primitive(PrimitiveType::Char),\n+            ty::TyInt(ast::IntTy::Is) => Primitive(PrimitiveType::Isize),\n+            ty::TyInt(ast::IntTy::I8) => Primitive(PrimitiveType::I8),\n+            ty::TyInt(ast::IntTy::I16) => Primitive(PrimitiveType::I16),\n+            ty::TyInt(ast::IntTy::I32) => Primitive(PrimitiveType::I32),\n+            ty::TyInt(ast::IntTy::I64) => Primitive(PrimitiveType::I64),\n+            ty::TyUint(ast::UintTy::Us) => Primitive(PrimitiveType::Usize),\n+            ty::TyUint(ast::UintTy::U8) => Primitive(PrimitiveType::U8),\n+            ty::TyUint(ast::UintTy::U16) => Primitive(PrimitiveType::U16),\n+            ty::TyUint(ast::UintTy::U32) => Primitive(PrimitiveType::U32),\n+            ty::TyUint(ast::UintTy::U64) => Primitive(PrimitiveType::U64),\n+            ty::TyFloat(ast::FloatTy::F32) => Primitive(PrimitiveType::F32),\n+            ty::TyFloat(ast::FloatTy::F64) => Primitive(PrimitiveType::F64),\n+            ty::TyStr => Primitive(PrimitiveType::Str),\n             ty::TyBox(t) => {\n                 let box_did = cx.tcx_opt().and_then(|tcx| {\n                     tcx.lang_items.owned_box()\n@@ -2438,25 +2437,25 @@ fn build_deref_target_impls(cx: &DocContext,\n             }\n         };\n         let did = match primitive {\n-            Isize => tcx.lang_items.isize_impl(),\n-            I8 => tcx.lang_items.i8_impl(),\n-            I16 => tcx.lang_items.i16_impl(),\n-            I32 => tcx.lang_items.i32_impl(),\n-            I64 => tcx.lang_items.i64_impl(),\n-            Usize => tcx.lang_items.usize_impl(),\n-            U8 => tcx.lang_items.u8_impl(),\n-            U16 => tcx.lang_items.u16_impl(),\n-            U32 => tcx.lang_items.u32_impl(),\n-            U64 => tcx.lang_items.u64_impl(),\n-            F32 => tcx.lang_items.f32_impl(),\n-            F64 => tcx.lang_items.f64_impl(),\n-            Char => tcx.lang_items.char_impl(),\n-            Bool => None,\n-            Str => tcx.lang_items.str_impl(),\n-            Slice => tcx.lang_items.slice_impl(),\n-            Array => tcx.lang_items.slice_impl(),\n-            PrimitiveTuple => None,\n-            PrimitiveRawPointer => tcx.lang_items.const_ptr_impl(),\n+            PrimitiveType::Isize => tcx.lang_items.isize_impl(),\n+            PrimitiveType::I8 => tcx.lang_items.i8_impl(),\n+            PrimitiveType::I16 => tcx.lang_items.i16_impl(),\n+            PrimitiveType::I32 => tcx.lang_items.i32_impl(),\n+            PrimitiveType::I64 => tcx.lang_items.i64_impl(),\n+            PrimitiveType::Usize => tcx.lang_items.usize_impl(),\n+            PrimitiveType::U8 => tcx.lang_items.u8_impl(),\n+            PrimitiveType::U16 => tcx.lang_items.u16_impl(),\n+            PrimitiveType::U32 => tcx.lang_items.u32_impl(),\n+            PrimitiveType::U64 => tcx.lang_items.u64_impl(),\n+            PrimitiveType::F32 => tcx.lang_items.f32_impl(),\n+            PrimitiveType::F64 => tcx.lang_items.f64_impl(),\n+            PrimitiveType::Char => tcx.lang_items.char_impl(),\n+            PrimitiveType::Bool => None,\n+            PrimitiveType::Str => tcx.lang_items.str_impl(),\n+            PrimitiveType::Slice => tcx.lang_items.slice_impl(),\n+            PrimitiveType::Array => tcx.lang_items.slice_impl(),\n+            PrimitiveType::PrimitiveTuple => None,\n+            PrimitiveType::PrimitiveRawPointer => tcx.lang_items.const_ptr_impl(),\n         };\n         if let Some(did) = did {\n             if !did.is_local() {\n@@ -2739,21 +2738,21 @@ fn resolve_type(cx: &DocContext,\n \n     let is_generic = match def {\n         Def::PrimTy(p) => match p {\n-            hir::TyStr => return Primitive(Str),\n-            hir::TyBool => return Primitive(Bool),\n-            hir::TyChar => return Primitive(Char),\n-            hir::TyInt(ast::IntTy::Is) => return Primitive(Isize),\n-            hir::TyInt(ast::IntTy::I8) => return Primitive(I8),\n-            hir::TyInt(ast::IntTy::I16) => return Primitive(I16),\n-            hir::TyInt(ast::IntTy::I32) => return Primitive(I32),\n-            hir::TyInt(ast::IntTy::I64) => return Primitive(I64),\n-            hir::TyUint(ast::UintTy::Us) => return Primitive(Usize),\n-            hir::TyUint(ast::UintTy::U8) => return Primitive(U8),\n-            hir::TyUint(ast::UintTy::U16) => return Primitive(U16),\n-            hir::TyUint(ast::UintTy::U32) => return Primitive(U32),\n-            hir::TyUint(ast::UintTy::U64) => return Primitive(U64),\n-            hir::TyFloat(ast::FloatTy::F32) => return Primitive(F32),\n-            hir::TyFloat(ast::FloatTy::F64) => return Primitive(F64),\n+            hir::TyStr => return Primitive(PrimitiveType::Str),\n+            hir::TyBool => return Primitive(PrimitiveType::Bool),\n+            hir::TyChar => return Primitive(PrimitiveType::Char),\n+            hir::TyInt(ast::IntTy::Is) => return Primitive(PrimitiveType::Isize),\n+            hir::TyInt(ast::IntTy::I8) => return Primitive(PrimitiveType::I8),\n+            hir::TyInt(ast::IntTy::I16) => return Primitive(PrimitiveType::I16),\n+            hir::TyInt(ast::IntTy::I32) => return Primitive(PrimitiveType::I32),\n+            hir::TyInt(ast::IntTy::I64) => return Primitive(PrimitiveType::I64),\n+            hir::TyUint(ast::UintTy::Us) => return Primitive(PrimitiveType::Usize),\n+            hir::TyUint(ast::UintTy::U8) => return Primitive(PrimitiveType::U8),\n+            hir::TyUint(ast::UintTy::U16) => return Primitive(PrimitiveType::U16),\n+            hir::TyUint(ast::UintTy::U32) => return Primitive(PrimitiveType::U32),\n+            hir::TyUint(ast::UintTy::U64) => return Primitive(PrimitiveType::U64),\n+            hir::TyFloat(ast::FloatTy::F32) => return Primitive(PrimitiveType::F32),\n+            hir::TyFloat(ast::FloatTy::F64) => return Primitive(PrimitiveType::F64),\n         },\n         Def::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(keywords::SelfType.name().to_string());"}, {"sha": "2b8db6975f135d991f316592c8d86da6fc7aeb0f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9dde5639908263bb3348616438c59d184fb29530/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dde5639908263bb3348616438c59d184fb29530/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9dde5639908263bb3348616438c59d184fb29530", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::def_id::DefId;\n use syntax::abi::Abi;\n use rustc::hir;\n \n-use clean;\n+use clean::{self, PrimitiveType};\n use core::DocAccessLevels;\n use html::item_type::ItemType;\n use html::escape::Escape;\n@@ -468,28 +468,28 @@ impl fmt::Display for clean::Type {\n             }\n             clean::Tuple(ref typs) => {\n                 match &typs[..] {\n-                    &[] => primitive_link(f, clean::PrimitiveTuple, \"()\"),\n+                    &[] => primitive_link(f, PrimitiveType::PrimitiveTuple, \"()\"),\n                     &[ref one] => {\n-                        primitive_link(f, clean::PrimitiveTuple, \"(\")?;\n+                        primitive_link(f, PrimitiveType::PrimitiveTuple, \"(\")?;\n                         write!(f, \"{},\", one)?;\n-                        primitive_link(f, clean::PrimitiveTuple, \")\")\n+                        primitive_link(f, PrimitiveType::PrimitiveTuple, \")\")\n                     }\n                     many => {\n-                        primitive_link(f, clean::PrimitiveTuple, \"(\")?;\n+                        primitive_link(f, PrimitiveType::PrimitiveTuple, \"(\")?;\n                         write!(f, \"{}\", CommaSep(&many))?;\n-                        primitive_link(f, clean::PrimitiveTuple, \")\")\n+                        primitive_link(f, PrimitiveType::PrimitiveTuple, \")\")\n                     }\n                 }\n             }\n             clean::Vector(ref t) => {\n-                primitive_link(f, clean::Slice, &format!(\"[\"))?;\n+                primitive_link(f, PrimitiveType::Slice, &format!(\"[\"))?;\n                 write!(f, \"{}\", t)?;\n-                primitive_link(f, clean::Slice, &format!(\"]\"))\n+                primitive_link(f, PrimitiveType::Slice, &format!(\"]\"))\n             }\n             clean::FixedVector(ref t, ref s) => {\n-                primitive_link(f, clean::PrimitiveType::Array, \"[\")?;\n+                primitive_link(f, PrimitiveType::Array, \"[\")?;\n                 write!(f, \"{}\", t)?;\n-                primitive_link(f, clean::PrimitiveType::Array,\n+                primitive_link(f, PrimitiveType::Array,\n                                &format!(\"; {}]\", Escape(s)))\n             }\n             clean::Never => f.write_str(\"!\"),\n@@ -516,12 +516,13 @@ impl fmt::Display for clean::Type {\n                     clean::Vector(ref bt) => { // BorrowedRef{ ... Vector(T) } is &[T]\n                         match **bt {\n                             clean::Generic(_) =>\n-                                primitive_link(f, clean::Slice,\n+                                primitive_link(f, PrimitiveType::Slice,\n                                     &format!(\"&amp;{}{}[{}]\", lt, m, **bt)),\n                             _ => {\n-                                primitive_link(f, clean::Slice, &format!(\"&amp;{}{}[\", lt, m))?;\n+                                primitive_link(f, PrimitiveType::Slice,\n+                                               &format!(\"&amp;{}{}[\", lt, m))?;\n                                 write!(f, \"{}\", **bt)?;\n-                                primitive_link(f, clean::Slice, \"]\")\n+                                primitive_link(f, PrimitiveType::Slice, \"]\")\n                             }\n                         }\n                     }"}]}