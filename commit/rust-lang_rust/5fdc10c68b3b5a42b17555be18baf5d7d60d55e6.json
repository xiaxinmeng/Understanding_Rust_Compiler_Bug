{"sha": "5fdc10c68b3b5a42b17555be18baf5d7d60d55e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZGMxMGM2OGIzYjVhNDJiMTc1NTViZTE4YmFmNWQ3ZDYwZDU1ZTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-18T23:44:24Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-19T01:57:06Z"}, "message": "Filter out non-macros in resolve_macro\n\nFixes https://github.com/rust-lang/rust/issues/48341", "tree": {"sha": "7a673436e03ea2bca893dceffd3b07698b1add1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a673436e03ea2bca893dceffd3b07698b1add1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6", "html_url": "https://github.com/rust-lang/rust/commit/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04c124078ae9142588363e54877b9a151fb2043", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04c124078ae9142588363e54877b9a151fb2043", "html_url": "https://github.com/rust-lang/rust/commit/a04c124078ae9142588363e54877b9a151fb2043"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "6accda1d8517920cbad82b1e1d7007b73d9ebdb1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fdc10c68b3b5a42b17555be18baf5d7d60d55e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5fdc10c68b3b5a42b17555be18baf5d7d60d55e6", "patch": "@@ -1008,7 +1008,7 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n \n /// Resolve a string as a macro\n fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n-    use syntax::ext::base::MacroKind;\n+    use syntax::ext::base::{MacroKind, SyntaxExtension};\n     use syntax::ext::hygiene::Mark;\n     let segment = ast::PathSegment {\n         identifier: ast::Ident::from_str(path_str),\n@@ -1025,7 +1025,11 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     let res = resolver\n         .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n     if let Ok(def) = res {\n-        Some(def)\n+        if let SyntaxExtension::DeclMacro(..) = *resolver.get_macro(def) {\n+            Some(def)\n+        } else {\n+            None\n+        }\n     } else if let Some(def) = resolver.all_macros.get(&path_str.into()) {\n         Some(*def)\n     } else {"}]}