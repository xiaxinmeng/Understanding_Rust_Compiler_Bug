{"sha": "39b2a41b39b445bf7efab02f6eade16135d7df85", "node_id": "C_kwDOAAsO6NoAKDM5YjJhNDFiMzliNDQ1YmY3ZWZhYjAyZjZlYWRlMTYxMzVkN2RmODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T03:57:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T03:57:10Z"}, "message": "Auto merge of #104334 - compiler-errors:ufcs-sugg-wrong-def-id, r=estebank\n\nUse impl's def id when calculating type to specify in UFCS\n\nFixes #104327\nFixes #104328\n\nAlso addresses https://github.com/rust-lang/rust/pull/102670#discussion_r987381197", "tree": {"sha": "464f1fd8bd56b6f842463e7830abc342ff95879f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/464f1fd8bd56b6f842463e7830abc342ff95879f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b2a41b39b445bf7efab02f6eade16135d7df85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b2a41b39b445bf7efab02f6eade16135d7df85", "html_url": "https://github.com/rust-lang/rust/commit/39b2a41b39b445bf7efab02f6eade16135d7df85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b2a41b39b445bf7efab02f6eade16135d7df85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6af2711baa5a5db116c123116b2150ed63799d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6af2711baa5a5db116c123116b2150ed63799d", "html_url": "https://github.com/rust-lang/rust/commit/7a6af2711baa5a5db116c123116b2150ed63799d"}, {"sha": "1225a6538999f32a10157c6965e86816d3820fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1225a6538999f32a10157c6965e86816d3820fe8", "html_url": "https://github.com/rust-lang/rust/commit/1225a6538999f32a10157c6965e86816d3820fe8"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "2dd2c568bab97be6f3a78f2cd894ba695adadeec", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -2312,18 +2312,19 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         let trait_impls = self.tcx.trait_impls_of(data.trait_ref.def_id);\n \n                         if trait_impls.blanket_impls().is_empty()\n-                            && let Some((impl_ty, _)) = trait_impls.non_blanket_impls().iter().next()\n-                            && let Some(impl_def_id) = impl_ty.def() {\n-                            let message = if trait_impls.non_blanket_impls().len() == 1 {\n+                            && let Some(impl_def_id) = trait_impls.non_blanket_impls().values().flatten().next()\n+                        {\n+                            let non_blanket_impl_count = trait_impls.non_blanket_impls().values().flatten().count();\n+                            let message = if non_blanket_impl_count == 1 {\n                                 \"use the fully-qualified path to the only available implementation\".to_string()\n                             } else {\n                                 format!(\n                                     \"use a fully-qualified path to a specific available implementation ({} found)\",\n-                                    trait_impls.non_blanket_impls().len()\n+                                    non_blanket_impl_count\n                                 )\n                             };\n                             let mut suggestions = vec![(\n-                                trait_path_segment.ident.span.shrink_to_lo(),\n+                                path.span.shrink_to_lo(),\n                                 format!(\"<{} as \", self.tcx.type_of(impl_def_id))\n                             )];\n                             if let Some(generic_arg) = trait_path_segment.args {"}, {"sha": "ef9b7cae01bbd4c00290ff2dd006e5562335662d", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -6,6 +6,11 @@ LL |     fn bar() -> isize;\n ...\n LL |     let x: isize = Foo::bar();\n    |                    ^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     let x: isize = <isize as Foo>::bar();\n+   |                    +++++++++    +\n \n error: aborting due to previous error\n "}, {"sha": "fc025a3fca2bfc47b4df9629ee8145e907878550", "filename": "src/test/ui/error-codes/E0790.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0790.stderr?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -37,8 +37,8 @@ LL |     inner::MyTrait::my_fn();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     inner::<MyStruct as MyTrait>::my_fn();\n-   |            ++++++++++++        +\n+LL |     <MyStruct as inner::MyTrait>::my_fn();\n+   |     ++++++++++++               +\n \n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:30:13\n@@ -51,8 +51,8 @@ LL |     let _ = inner::MyTrait::MY_ASSOC_CONST;\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _ = inner::<MyStruct as MyTrait>::MY_ASSOC_CONST;\n-   |                    ++++++++++++        +\n+LL |     let _ = <MyStruct as inner::MyTrait>::MY_ASSOC_CONST;\n+   |             ++++++++++++               +\n \n error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n   --> $DIR/E0790.rs:50:5"}, {"sha": "dd621ae71008faf7cb22ad5bafac1ebccff3053d", "filename": "src/test/ui/suggestions/issue-104327.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104327.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104327.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104327.rs?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -0,0 +1,12 @@\n+trait Bar {}\n+\n+trait Foo {\n+    fn f() {}\n+}\n+\n+impl Foo for dyn Bar {}\n+\n+fn main() {\n+    Foo::f();\n+    //~^ ERROR cannot call associated function on trait without specifying the corresponding `impl` type\n+}"}, {"sha": "acec3a55d526e499ef897cd6bc0323b05f2bb245", "filename": "src/test/ui/suggestions/issue-104327.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104327.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104327.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104327.stderr?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -0,0 +1,17 @@\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/issue-104327.rs:10:5\n+   |\n+LL |     fn f() {}\n+   |     --------- `Foo::f` defined here\n+...\n+LL |     Foo::f();\n+   |     ^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     <(dyn Bar + 'static) as Foo>::f();\n+   |     +++++++++++++++++++++++    +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "c3707baf79fc3c583fcdbe60fadc289129895d4f", "filename": "src/test/ui/suggestions/issue-104328.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104328.rs?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -0,0 +1,12 @@\n+#![feature(object_safe_for_dispatch)]\n+\n+trait Foo {\n+    fn f() {}\n+}\n+\n+impl Foo for dyn Sized {}\n+\n+fn main() {\n+    Foo::f();\n+    //~^ ERROR cannot call associated function on trait without specifying the corresponding `impl` type\n+}"}, {"sha": "b31b84781bacbb11cfb47ffee90d20db57f68258", "filename": "src/test/ui/suggestions/issue-104328.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104328.stderr?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -0,0 +1,17 @@\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/issue-104328.rs:10:5\n+   |\n+LL |     fn f() {}\n+   |     --------- `Foo::f` defined here\n+...\n+LL |     Foo::f();\n+   |     ^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL |     <(dyn Sized + 'static) as Foo>::f();\n+   |     +++++++++++++++++++++++++    +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0790`."}, {"sha": "575ace2374ee64ec15c33701d40fffab44285bce", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39b2a41b39b445bf7efab02f6eade16135d7df85/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=39b2a41b39b445bf7efab02f6eade16135d7df85", "patch": "@@ -9,8 +9,8 @@ LL |     let _f: base::Foo = base::HasNew::new();\n    |\n help: use the fully-qualified path to the only available implementation\n    |\n-LL |     let _f: base::Foo = base::<Foo as HasNew>::new();\n-   |                               +++++++       +\n+LL |     let _f: base::Foo = <Foo as base::HasNew>::new();\n+   |                         +++++++             +\n \n error: aborting due to previous error\n "}]}