{"sha": "53a648522b0263aa13752b78c9e27464d6caf579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYTY0ODUyMmIwMjYzYWExMzc1MmI3OGM5ZTI3NDY0ZDZjYWY1Nzk=", "commit": {"author": {"name": "k0pernicus", "email": "antonin.carette@gmail.com", "date": "2017-10-05T20:34:49Z"}, "committer": {"name": "k0pernicus", "email": "antonin.carette@gmail.com", "date": "2017-10-09T11:06:51Z"}, "message": "New rebase for the issue #45022\n\nAdd pretty printer files into test execution time-stamping\n\nMove find_rust_src_path() as a method for Config\n\nMove find_rust_src_path() as a method for Config\n\nCall find_rust_src_path() from Config\n\nMove find_rust_src_path() from common.rs to header.rs\n\nAdd pretty printer files as relevant files to get up_to_date information\n\nRemove dead code\n\nAdd two pretty printer files to keep a close watch on\n\nMove find_rust_src_path() as a method for Config\n\nMove find_rust_src_path() as a method for Config\n\nCall find_rust_src_path() from Config\n\nMove find_rust_src_path() from common.rs to header.rs\n\nRemove dead code\n\nAdd two pretty printer files to keep a close watch on", "tree": {"sha": "0a0742f2f459840517997155c13c0aa12bebe1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0742f2f459840517997155c13c0aa12bebe1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a648522b0263aa13752b78c9e27464d6caf579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a648522b0263aa13752b78c9e27464d6caf579", "html_url": "https://github.com/rust-lang/rust/commit/53a648522b0263aa13752b78c9e27464d6caf579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a648522b0263aa13752b78c9e27464d6caf579/comments", "author": {"login": "k0pernicus", "id": 3605451, "node_id": "MDQ6VXNlcjM2MDU0NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3605451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0pernicus", "html_url": "https://github.com/k0pernicus", "followers_url": "https://api.github.com/users/k0pernicus/followers", "following_url": "https://api.github.com/users/k0pernicus/following{/other_user}", "gists_url": "https://api.github.com/users/k0pernicus/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0pernicus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0pernicus/subscriptions", "organizations_url": "https://api.github.com/users/k0pernicus/orgs", "repos_url": "https://api.github.com/users/k0pernicus/repos", "events_url": "https://api.github.com/users/k0pernicus/events{/privacy}", "received_events_url": "https://api.github.com/users/k0pernicus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k0pernicus", "id": 3605451, "node_id": "MDQ6VXNlcjM2MDU0NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3605451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0pernicus", "html_url": "https://github.com/k0pernicus", "followers_url": "https://api.github.com/users/k0pernicus/followers", "following_url": "https://api.github.com/users/k0pernicus/following{/other_user}", "gists_url": "https://api.github.com/users/k0pernicus/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0pernicus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0pernicus/subscriptions", "organizations_url": "https://api.github.com/users/k0pernicus/orgs", "repos_url": "https://api.github.com/users/k0pernicus/repos", "events_url": "https://api.github.com/users/k0pernicus/events{/privacy}", "received_events_url": "https://api.github.com/users/k0pernicus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "417ffc98dfc770c27f7f2d7430f0edf975576591", "url": "https://api.github.com/repos/rust-lang/rust/commits/417ffc98dfc770c27f7f2d7430f0edf975576591", "html_url": "https://github.com/rust-lang/rust/commit/417ffc98dfc770c27f7f2d7430f0edf975576591"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "191958387912e811f29114e0443b05a01a2f5f3e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53a648522b0263aa13752b78c9e27464d6caf579/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a648522b0263aa13752b78c9e27464d6caf579/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=53a648522b0263aa13752b78c9e27464d6caf579", "patch": "@@ -567,6 +567,19 @@ impl Config {\n             None\n         }\n     }\n+\n+    pub fn find_rust_src_root(&self) -> Option<PathBuf> {\n+        let mut path = self.src_base.clone();\n+        let path_postfix = Path::new(\"src/etc/lldb_batchmode.py\");\n+\n+        while path.pop() {\n+            if path.join(&path_postfix).is_file() {\n+                return Some(path);\n+            }\n+        }\n+\n+        None\n+    }\n }\n \n pub fn lldb_version_to_int(version_string: &str) -> isize {"}, {"sha": "306497da9e3f9df5d2cd67b7f1502ae97c6050b1", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/53a648522b0263aa13752b78c9e27464d6caf579/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a648522b0263aa13752b78c9e27464d6caf579/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=53a648522b0263aa13752b78c9e27464d6caf579", "patch": "@@ -489,15 +489,28 @@ fn stamp(config: &Config, testpaths: &TestPaths) -> PathBuf {\n }\n \n fn up_to_date(config: &Config, testpaths: &TestPaths, props: &EarlyProps) -> bool {\n+    let rust_src_dir = config.find_rust_src_root().expect(\n+        \"Could not find Rust source root\",\n+    );\n     let stamp = mtime(&stamp(config, testpaths));\n-    let mut inputs = vec![\n-        mtime(&testpaths.file),\n-        mtime(&config.rustc_path),\n-    ];\n+    let mut inputs = vec![mtime(&testpaths.file), mtime(&config.rustc_path)];\n     for aux in props.aux.iter() {\n-        inputs.push(mtime(&testpaths.file.parent().unwrap()\n-                                         .join(\"auxiliary\")\n-                                         .join(aux)));\n+        inputs.push(mtime(\n+            &testpaths.file.parent().unwrap().join(\"auxiliary\").join(\n+                aux,\n+            ),\n+        ));\n+    }\n+    // Relevant pretty printer files\n+    let pretty_printer_files = [\n+        \"src/etc/debugger_pretty_printers_common.py\",\n+        \"src/etc/gdb_load_rust_pretty_printers.py\",\n+        \"src/etc/gdb_rust_pretty_printing.py\",\n+        \"src/etc/lldb_batchmode.py\",\n+        \"src/etc/lldb_rust_formatters.py\",\n+    ];\n+    for pretty_printer_file in &pretty_printer_files {\n+        inputs.push(mtime(&rust_src_dir.join(pretty_printer_file)));\n     }\n     for lib in config.run_lib_path.read_dir().unwrap() {\n         let lib = lib.unwrap();"}, {"sha": "870e08cc6e595b59269e43b3454c00f50b4f8734", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/53a648522b0263aa13752b78c9e27464d6caf579/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a648522b0263aa13752b78c9e27464d6caf579/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=53a648522b0263aa13752b78c9e27464d6caf579", "patch": "@@ -571,9 +571,10 @@ actual:\\n\\\n                 }\n             }\n \n-            _=> {\n-                let rust_src_root = self.find_rust_src_root()\n-                                        .expect(\"Could not find Rust source root\");\n+            _ => {\n+                let rust_src_root = self.config.find_rust_src_root().expect(\n+                    \"Could not find Rust source root\",\n+                );\n                 let rust_pp_module_rel_path = Path::new(\"./src/etc\");\n                 let rust_pp_module_abs_path = rust_src_root.join(rust_pp_module_rel_path)\n                                                            .to_str()\n@@ -664,19 +665,6 @@ actual:\\n\\\n         self.check_debugger_output(&debugger_run_result, &check_lines);\n     }\n \n-    fn find_rust_src_root(&self) -> Option<PathBuf> {\n-        let mut path = self.config.src_base.clone();\n-        let path_postfix = Path::new(\"src/etc/lldb_batchmode.py\");\n-\n-        while path.pop() {\n-            if path.join(&path_postfix).is_file() {\n-                return Some(path);\n-            }\n-        }\n-\n-        None\n-    }\n-\n     fn run_debuginfo_lldb_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n@@ -735,7 +723,9 @@ actual:\\n\\\n         script_str.push_str(\"version\\n\");\n \n         // Switch LLDB into \"Rust mode\"\n-        let rust_src_root = self.find_rust_src_root().expect(\"Could not find Rust source root\");\n+        let rust_src_root = self.config.find_rust_src_root().expect(\n+            \"Could not find Rust source root\",\n+        );\n         let rust_pp_module_rel_path = Path::new(\"./src/etc/lldb_rust_formatters.py\");\n         let rust_pp_module_abs_path = rust_src_root.join(rust_pp_module_rel_path)\n                                                    .to_str()\n@@ -1717,11 +1707,13 @@ actual:\\n\\\n         if self.props.check_test_line_numbers_match {\n             self.check_rustdoc_test_option(proc_res);\n         } else {\n-            let root = self.find_rust_src_root().unwrap();\n-            let res = self.cmd2procres(Command::new(&self.config.docck_python)\n-                                       .arg(root.join(\"src/etc/htmldocck.py\"))\n-                                       .arg(out_dir)\n-                                       .arg(&self.testpaths.file));\n+            let root = self.config.find_rust_src_root().unwrap();\n+            let res = self.cmd2procres(\n+                Command::new(&self.config.docck_python)\n+                    .arg(root.join(\"src/etc/htmldocck.py\"))\n+                    .arg(out_dir)\n+                    .arg(&self.testpaths.file),\n+            );\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"htmldocck failed!\", &res);\n             }"}]}