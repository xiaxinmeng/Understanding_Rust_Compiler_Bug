{"sha": "972cd8bb69d4c856735adc8abcfceab96a62f716", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmNkOGJiNjlkNGM4NTY3MzVhZGM4YWJjZmNlYWI5NmE2MmY3MTY=", "commit": {"author": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-09-06T19:31:06Z"}, "committer": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-09-06T19:31:06Z"}, "message": "Fix typos.", "tree": {"sha": "72a6072219b1694c7f5b1d9b9ce172e7538c1908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72a6072219b1694c7f5b1d9b9ce172e7538c1908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972cd8bb69d4c856735adc8abcfceab96a62f716", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQB1BAAWCAAdFiEEcsU1MS52w+AyCfaTF0Yl5eh3wNkFAluRgIIACgkQF0Yl5eh3wNlYPgEAkdNX\nRJ64NzOgfOrS7X7zMGkhT+SI8Ydq1FUAsI55GBQBAKPLiaIgyntLhDc7iqLDYF3UvnCORs5OnVGl\nsveKeLQC\n=97qV\n-----END PGP SIGNATURE-----\n", "payload": "tree 72a6072219b1694c7f5b1d9b9ce172e7538c1908\nparent c82af09bb0fb78379cf3b525d22f902b3139217f\nauthor Without Boats <boats@mozilla.com> 1536262266 +0200\ncommitter Without Boats <boats@mozilla.com> 1536262266 +0200\n\nFix typos.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972cd8bb69d4c856735adc8abcfceab96a62f716", "html_url": "https://github.com/rust-lang/rust/commit/972cd8bb69d4c856735adc8abcfceab96a62f716", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972cd8bb69d4c856735adc8abcfceab96a62f716/comments", "author": null, "committer": null, "parents": [{"sha": "c82af09bb0fb78379cf3b525d22f902b3139217f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82af09bb0fb78379cf3b525d22f902b3139217f", "html_url": "https://github.com/rust-lang/rust/commit/c82af09bb0fb78379cf3b525d22f902b3139217f"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "29ba433bec7f52ed8a9791baf2a0c176e14c8856", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/972cd8bb69d4c856735adc8abcfceab96a62f716/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972cd8bb69d4c856735adc8abcfceab96a62f716/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=972cd8bb69d4c856735adc8abcfceab96a62f716", "patch": "@@ -751,7 +751,7 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n \n /* Nota bene\n  *\n- *  We could have chosen not to add this impl, and instead have written a \n+ *  We could have chosen not to add this impl, and instead have written a\n  *  function of Pin<Box<T>> to Pin<T>. Such a function would not be sound,\n  *  because Box<T> implements Unpin even when T does not, as a result of\n  *  this impl.\n@@ -762,7 +762,7 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n  *        standard library pointer types support projecting through a pin\n  *        (Box<T> is the only pointer type in std for which this would be\n  *        safe.)\n- *      - It is in practive very useful to have Box<T> be unconditionally\n+ *      - It is in practice very useful to have Box<T> be unconditionally\n  *        Unpin because of trait objects, for which the structural auto\n  *        trait functionality does not apply (e.g. Box<dyn Foo> would\n  *        otherwise not be Unpin)."}]}