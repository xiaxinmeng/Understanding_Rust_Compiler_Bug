{"sha": "bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6", "node_id": "C_kwDOAAsO6NoAKGJkNzc4ZTIxNmQzYzU4MDQ5ZmUwMjU5Y2U1YzhlOGZkNDVjZmNiZDY", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2021-10-25T17:14:54Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2021-10-26T18:05:29Z"}, "message": "Register the generated lints from `cargo dev new_lint`", "tree": {"sha": "7c3536b09f82224d67818ec211f1c5c17bb0d425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3536b09f82224d67818ec211f1c5c17bb0d425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6", "html_url": "https://github.com/rust-lang/rust/commit/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2d93349a2edf6090cb2518358af6789d899d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2d93349a2edf6090cb2518358af6789d899d1e", "html_url": "https://github.com/rust-lang/rust/commit/cc2d93349a2edf6090cb2518358af6789d899d1e"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "43a478ee77db826975fcbda09202af1381a2981b", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6", "patch": "@@ -42,7 +42,8 @@ pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str\n     };\n \n     create_lint(&lint, msrv).context(\"Unable to create lint implementation\")?;\n-    create_test(&lint).context(\"Unable to create a test for the new lint\")\n+    create_test(&lint).context(\"Unable to create a test for the new lint\")?;\n+    add_lint(&lint, msrv).context(\"Unable to add lint to clippy_lints/src/lib.rs\")\n }\n \n fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n@@ -80,6 +81,33 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n     }\n }\n \n+fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n+    let path = \"clippy_lints/src/lib.rs\";\n+    let mut lib_rs = fs::read_to_string(path).context(\"reading\")?;\n+\n+    let comment_start = lib_rs.find(\"// add lints here,\").expect(\"Couldn't find comment\");\n+\n+    let new_lint = if enable_msrv {\n+        format!(\n+            \"store.register_{lint_pass}_pass(move || Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n+            lint_pass = lint.pass,\n+            module_name = lint.name,\n+            camel_name = to_camel_case(lint.name),\n+        )\n+    } else {\n+        format!(\n+            \"store.register_{lint_pass}_pass(|| Box::new({module_name}::{camel_name}));\\n    \",\n+            lint_pass = lint.pass,\n+            module_name = lint.name,\n+            camel_name = to_camel_case(lint.name),\n+        )\n+    };\n+\n+    lib_rs.insert_str(comment_start, &new_lint);\n+\n+    fs::write(path, lib_rs).context(\"writing\")\n+}\n+\n fn write_file<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n     fn inner(path: &Path, contents: &[u8]) -> io::Result<()> {\n         OpenOptions::new()\n@@ -151,7 +179,6 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     };\n \n     let lint_name = lint.name;\n-    let pass_name = lint.pass;\n     let category = lint.category;\n     let name_camel = to_camel_case(lint.name);\n     let name_upper = lint_name.to_uppercase();\n@@ -228,18 +255,14 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n                     extract_msrv_attr!({context_import});\n                 }}\n \n-                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n-                //       e.g. store.register_{pass_name}_pass(move || Box::new({module_name}::{name_camel}::new(msrv)));\n                 // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n                 // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n                 // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n             \"},\n             pass_type = pass_type,\n             pass_lifetimes = pass_lifetimes,\n-            pass_name = pass_name,\n             name_upper = name_upper,\n             name_camel = name_camel,\n-            module_name = lint_name,\n             context_import = context_import,\n         )\n     } else {\n@@ -248,16 +271,11 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n                 declare_lint_pass!({name_camel} => [{name_upper}]);\n \n                 impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n-                //\n-                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n-                //       e.g. store.register_{pass_name}_pass(|| Box::new({module_name}::{name_camel}));\n             \"},\n             pass_type = pass_type,\n             pass_lifetimes = pass_lifetimes,\n-            pass_name = pass_name,\n             name_upper = name_upper,\n             name_camel = name_camel,\n-            module_name = lint_name,\n         )\n     });\n "}, {"sha": "86f9d75c06f781c80c6a07a9881fa6ae6be5f8af", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6", "patch": "@@ -777,7 +777,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n-\n+    // add lints here, do not remove this comment, it's used in `new_lint`\n }\n \n #[rustfmt::skip]"}, {"sha": "0e112e37cbc1ad38cc20cd24009c4c2bce532cfa", "filename": "doc/adding_lints.md", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=bd778e216d3c58049fe0259ce5c8e8fd45cfcbd6", "patch": "@@ -16,6 +16,7 @@ because that's clearly a non-descriptive name.\n   - [Edition 2018 tests](#edition-2018-tests)\n   - [Testing manually](#testing-manually)\n   - [Lint declaration](#lint-declaration)\n+  - [Lint registration](#lint-registration)\n   - [Lint passes](#lint-passes)\n   - [Emitting a lint](#emitting-a-lint)\n   - [Adding the lint logic](#adding-the-lint-logic)\n@@ -43,9 +44,9 @@ take a look at our [lint naming guidelines][lint_naming]. To get started on this\n lint you can run `cargo dev new_lint --name=foo_functions --pass=early\n --category=pedantic` (category will default to nursery if not provided). This\n command will create two files: `tests/ui/foo_functions.rs` and\n-`clippy_lints/src/foo_functions.rs`, as well as run `cargo dev update_lints` to\n-register the new lint. For cargo lints, two project hierarchies (fail/pass) will\n-be created by default under `tests/ui-cargo`.\n+`clippy_lints/src/foo_functions.rs`, as well as\n+[registering the lint](#lint-registration). For cargo lints, two project\n+hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n \n@@ -220,32 +221,34 @@ declare_lint_pass!(FooFunctions => [FOO_FUNCTIONS]);\n impl EarlyLintPass for FooFunctions {}\n ```\n \n-Normally after declaring the lint, we have to run `cargo dev update_lints`,\n-which updates some files, so Clippy knows about the new lint. Since we used\n-`cargo dev new_lint ...` to generate the lint declaration, this was done\n-automatically. While `update_lints` automates most of the things, it doesn't\n-automate everything. We will have to register our lint pass manually in the\n-`register_plugins` function in `clippy_lints/src/lib.rs`:\n+[declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L60\n+[example_lint_page]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n+[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n+[category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L110\n+\n+## Lint registration\n+\n+When using `cargo dev new_lint`, the lint is automatically registered and\n+nothing more has to be done.\n+\n+When declaring a new lint by hand and `cargo dev update_lints` is used, the lint\n+pass may have to be registered manually in the `register_plugins` function in\n+`clippy_lints/src/lib.rs`:\n \n ```rust\n-store.register_early_pass(|| box foo_functions::FooFunctions);\n+store.register_early_pass(|| Box::new(foo_functions::FooFunctions));\n ```\n \n As one may expect, there is a corresponding `register_late_pass` method\n available as well. Without a call to one of `register_early_pass` or\n `register_late_pass`, the lint pass in question will not be run.\n \n-One reason that `cargo dev` does not automate this step is that multiple lints\n-can use the same lint pass, so registering the lint pass may already be done\n-when adding a new lint. Another reason that this step is not automated is that\n-the order that the passes are registered determines the order the passes\n-actually run, which in turn affects the order that any emitted lints are output\n-in.\n-\n-[declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L60\n-[example_lint_page]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n-[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n-[category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L110\n+One reason that `cargo dev update_lints` does not automate this step is that\n+multiple lints can use the same lint pass, so registering the lint pass may\n+already be done when adding a new lint. Another reason that this step is not\n+automated is that the order that the passes are registered determines the order\n+the passes actually run, which in turn affects the order that any emitted lints\n+are output in.\n \n ## Lint passes\n "}]}