{"sha": "6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "node_id": "C_kwDOAAsO6NoAKDZlYzczNTk2MmYwYzk0OGU2OTcxZjEyZmM1ZjQyNzlmN2MxYThjMjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T21:51:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T21:51:24Z"}, "message": "Auto merge of #8699 - Jarcho:vec_init_then_push_7071, r=dswij,xFrednet\n\nDon't lint `vec_init_then_push` when further extended\n\nfixes #7071\n\nThis will still lint when a larger number of pushes are done (four currently). The exact number could be debated, but this is more readable then a sequence of pushes so it shouldn't be too large.\n\nchangelog: Don't lint `vec_init_then_push` when further extended.\nchangelog: Remove `mut` binding from `vec_init_then_push` when possible.", "tree": {"sha": "ea6a46e6b017390da6a6c38c8065a0f2264be639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea6a46e6b017390da6a6c38c8065a0f2264be639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "html_url": "https://github.com/rust-lang/rust/commit/6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0a61e7ce7d980deb801156af12cd14d95a1b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0a61e7ce7d980deb801156af12cd14d95a1b94", "html_url": "https://github.com/rust-lang/rust/commit/1c0a61e7ce7d980deb801156af12cd14d95a1b94"}, {"sha": "f1574cc1319cbf4cd915568f0dc165815de93caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1574cc1319cbf4cd915568f0dc165815de93caf", "html_url": "https://github.com/rust-lang/rust/commit/f1574cc1319cbf4cd915568f0dc165815de93caf"}], "stats": {"total": 365, "additions": 294, "deletions": 71}, "files": [{"sha": "35db45e2b0c9921b97672f6322e48a870f658190", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 133, "deletions": 57, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "patch": "@@ -1,19 +1,30 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher::{get_vec_init_kind, VecInitKind};\n use clippy_utils::source::snippet;\n-use clippy_utils::{path_to_local, path_to_local_id};\n-use if_chain::if_chain;\n+use clippy_utils::visitors::for_each_local_use_after_expr;\n+use clippy_utils::{get_parent_expr, path_to_local_id};\n+use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Local, PatKind, Stmt, StmtKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{\n+    BindingAnnotation, Block, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, Stmt, StmtKind, UnOp,\n+};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `push` immediately after creating a new `Vec`.\n     ///\n+    /// If the `Vec` is created using `with_capacity` this will only lint if the capacity is a\n+    /// constant and the number of pushes is greater than or equal to the initial capacity.\n+    ///\n+    /// If the `Vec` is extended after the initial sequence of pushes and it was default initialized\n+    /// then this will only lint after there were at least four pushes. This number may change in\n+    /// the future.\n+    ///\n     /// ### Why is this bad?\n     /// The `vec![]` macro is both more performant and easier to read than\n     /// multiple `push` calls.\n@@ -43,26 +54,88 @@ pub struct VecInitThenPush {\n struct VecPushSearcher {\n     local_id: HirId,\n     init: VecInitKind,\n-    lhs_is_local: bool,\n-    lhs_span: Span,\n+    lhs_is_let: bool,\n+    let_ty_span: Option<Span>,\n+    name: Symbol,\n     err_span: Span,\n-    found: u64,\n+    found: u128,\n+    last_push_expr: HirId,\n }\n impl VecPushSearcher {\n     fn display_err(&self, cx: &LateContext<'_>) {\n-        match self.init {\n+        let required_pushes_before_extension = match self.init {\n             _ if self.found == 0 => return,\n-            VecInitKind::WithLiteralCapacity(x) if x > self.found => return,\n+            VecInitKind::WithConstCapacity(x) if x > self.found => return,\n+            VecInitKind::WithConstCapacity(x) => x,\n             VecInitKind::WithExprCapacity(_) => return,\n-            _ => (),\n+            _ => 3,\n         };\n \n-        let mut s = if self.lhs_is_local {\n+        let mut needs_mut = false;\n+        let res = for_each_local_use_after_expr(cx, self.local_id, self.last_push_expr, |e| {\n+            let Some(parent) = get_parent_expr(cx, e) else {\n+                return ControlFlow::Continue(())\n+            };\n+            let adjusted_ty = cx.typeck_results().expr_ty_adjusted(e);\n+            let adjusted_mut = adjusted_ty.ref_mutability().unwrap_or(Mutability::Not);\n+            needs_mut |= adjusted_mut == Mutability::Mut;\n+            match parent.kind {\n+                ExprKind::AddrOf(_, Mutability::Mut, _) => {\n+                    needs_mut = true;\n+                    return ControlFlow::Break(true);\n+                },\n+                ExprKind::Unary(UnOp::Deref, _) | ExprKind::Index(..) if !needs_mut => {\n+                    let mut last_place = parent;\n+                    while let Some(parent) = get_parent_expr(cx, parent) {\n+                        if matches!(parent.kind, ExprKind::Unary(UnOp::Deref, _) | ExprKind::Field(..))\n+                            || matches!(parent.kind, ExprKind::Index(e, _) if e.hir_id == last_place.hir_id)\n+                        {\n+                            last_place = parent;\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    needs_mut |= cx.typeck_results().expr_ty_adjusted(last_place).ref_mutability()\n+                        == Some(Mutability::Mut)\n+                        || get_parent_expr(cx, last_place)\n+                            .map_or(false, |e| matches!(e.kind, ExprKind::AddrOf(_, Mutability::Mut, _)));\n+                },\n+                ExprKind::MethodCall(_, [recv, ..], _)\n+                    if recv.hir_id == e.hir_id\n+                        && adjusted_mut == Mutability::Mut\n+                        && !adjusted_ty.peel_refs().is_slice() =>\n+                {\n+                    // No need to set `needs_mut` to true. The receiver will be either explicitly borrowed, or it will\n+                    // be implicitly borrowed via an adjustment. Both of these cases are already handled by this point.\n+                    return ControlFlow::Break(true);\n+                },\n+                ExprKind::Assign(lhs, ..) if e.hir_id == lhs.hir_id => {\n+                    needs_mut = true;\n+                    return ControlFlow::Break(false);\n+                },\n+                _ => (),\n+            }\n+            ControlFlow::Continue(())\n+        });\n+\n+        // Avoid allocating small `Vec`s when they'll be extended right after.\n+        if res == ControlFlow::Break(true) && self.found <= required_pushes_before_extension {\n+            return;\n+        }\n+\n+        let mut s = if self.lhs_is_let {\n             String::from(\"let \")\n         } else {\n             String::new()\n         };\n-        s.push_str(&snippet(cx, self.lhs_span, \"..\"));\n+        if needs_mut {\n+            s.push_str(\"mut \");\n+        }\n+        s.push_str(self.name.as_str());\n+        if let Some(span) = self.let_ty_span {\n+            s.push_str(\": \");\n+            s.push_str(&snippet(cx, span, \"_\"));\n+        }\n         s.push_str(\" = vec![..];\");\n \n         span_lint_and_sugg(\n@@ -83,60 +156,63 @@ impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n     }\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n-        if_chain! {\n-            if !in_external_macro(cx.sess(), local.span);\n-            if let Some(init) = local.init;\n-            if let PatKind::Binding(BindingAnnotation::Mutable, id, _, None) = local.pat.kind;\n-            if let Some(init_kind) = get_vec_init_kind(cx, init);\n-            then {\n-                self.searcher = Some(VecPushSearcher {\n-                        local_id: id,\n-                        init: init_kind,\n-                        lhs_is_local: true,\n-                        lhs_span: local.ty.map_or(local.pat.span, |t| local.pat.span.to(t.span)),\n-                        err_span: local.span,\n-                        found: 0,\n-                    });\n-            }\n+        if let Some(init_expr) = local.init\n+            && let PatKind::Binding(BindingAnnotation::Mutable, id, name, None) = local.pat.kind\n+            && !in_external_macro(cx.sess(), local.span)\n+            && let Some(init) = get_vec_init_kind(cx, init_expr)\n+            && !matches!(init, VecInitKind::WithExprCapacity(_))\n+        {\n+            self.searcher = Some(VecPushSearcher {\n+                local_id: id,\n+                init,\n+                lhs_is_let: true,\n+                name: name.name,\n+                let_ty_span: local.ty.map(|ty| ty.span),\n+                err_span: local.span,\n+                found: 0,\n+                last_push_expr: init_expr.hir_id,\n+            });\n         }\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if self.searcher.is_none();\n-            if !in_external_macro(cx.sess(), expr.span);\n-            if let ExprKind::Assign(left, right, _) = expr.kind;\n-            if let Some(id) = path_to_local(left);\n-            if let Some(init_kind) = get_vec_init_kind(cx, right);\n-            then {\n-                self.searcher = Some(VecPushSearcher {\n-                    local_id: id,\n-                    init: init_kind,\n-                    lhs_is_local: false,\n-                    lhs_span: left.span,\n-                    err_span: expr.span,\n-                    found: 0,\n-                });\n-            }\n+        if self.searcher.is_none()\n+            && let ExprKind::Assign(left, right, _) = expr.kind\n+            && let ExprKind::Path(QPath::Resolved(None, path)) = left.kind\n+            && let [name] = &path.segments\n+            && let Res::Local(id) = path.res\n+            && !in_external_macro(cx.sess(), expr.span)\n+            && let Some(init) = get_vec_init_kind(cx, right)\n+            && !matches!(init, VecInitKind::WithExprCapacity(_))\n+        {\n+            self.searcher = Some(VecPushSearcher {\n+                local_id: id,\n+                init,\n+                lhs_is_let: false,\n+                let_ty_span: None,\n+                name: name.ident.name,\n+                err_span: expr.span,\n+                found: 0,\n+                last_push_expr: expr.hir_id,\n+            });\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if let Some(searcher) = self.searcher.take() {\n-            if_chain! {\n-                if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind;\n-                if let ExprKind::MethodCall(path, [self_arg, _], _) = expr.kind;\n-                if path_to_local_id(self_arg, searcher.local_id);\n-                if path.ident.name.as_str() == \"push\";\n-                then {\n-                    self.searcher = Some(VecPushSearcher {\n-                        found: searcher.found + 1,\n-                        err_span: searcher.err_span.to(stmt.span),\n-                        .. searcher\n-                    });\n-                } else {\n-                    searcher.display_err(cx);\n-                }\n+            if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind\n+                && let ExprKind::MethodCall(name, [self_arg, _], _) = expr.kind\n+                && path_to_local_id(self_arg, searcher.local_id)\n+                && name.ident.as_str() == \"push\"\n+            {\n+                self.searcher = Some(VecPushSearcher {\n+                    found: searcher.found + 1,\n+                    err_span: searcher.err_span.to(stmt.span),\n+                    last_push_expr: expr.hir_id,\n+                    .. searcher\n+                });\n+            } else {\n+                searcher.display_err(cx);\n             }\n         }\n     }"}, {"sha": "1e0fc789af24306beaea24a7823acac6ca2dca8a", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "patch": "@@ -2,10 +2,11 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n+use crate::consts::{constant_simple, Constant};\n use crate::ty::is_type_diagnostic_item;\n use crate::{is_expn_of, match_def_path, paths};\n use if_chain::if_chain;\n-use rustc_ast::ast::{self, LitKind};\n+use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::{Arm, Block, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, QPath};\n use rustc_lint::LateContext;\n@@ -431,7 +432,7 @@ pub enum VecInitKind {\n     /// `Vec::default()` or `Default::default()`\n     Default,\n     /// `Vec::with_capacity(123)`\n-    WithLiteralCapacity(u64),\n+    WithConstCapacity(u128),\n     /// `Vec::with_capacity(slice.len())`\n     WithExprCapacity(HirId),\n }\n@@ -449,15 +450,11 @@ pub fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -\n                     return Some(VecInitKind::Default);\n                 } else if name.ident.name.as_str() == \"with_capacity\" {\n                     let arg = args.get(0)?;\n-                    if_chain! {\n-                        if let ExprKind::Lit(lit) = &arg.kind;\n-                        if let LitKind::Int(num, _) = lit.node;\n-                        then {\n-                            return Some(VecInitKind::WithLiteralCapacity(num.try_into().ok()?));\n-                        }\n-                    }\n-                    return Some(VecInitKind::WithExprCapacity(arg.hir_id));\n-                }\n+                    return match constant_simple(cx, cx.typeck_results(), arg) {\n+                        Some(Constant::Int(num)) => Some(VecInitKind::WithConstCapacity(num)),\n+                        _ => Some(VecInitKind::WithExprCapacity(arg.hir_id)),\n+                    };\n+                };\n             },\n             ExprKind::Path(QPath::Resolved(_, path))\n                 if match_def_path(cx, path.res.opt_def_id()?, &paths::DEFAULT_TRAIT_METHOD)"}, {"sha": "b6c8f1d516e557fb77e928541d5eaf92a0400c0d", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "patch": "@@ -1,4 +1,4 @@\n-use crate::path_to_local_id;\n+use crate::{get_enclosing_block, path_to_local_id};\n use core::ops::ControlFlow;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -436,3 +436,61 @@ pub fn for_each_value_source<'tcx, B>(\n         _ => f(e),\n     }\n }\n+\n+/// Runs the given function for each path expression referencing the given local which occur after\n+/// the given expression.\n+pub fn for_each_local_use_after_expr<'tcx, B>(\n+    cx: &LateContext<'tcx>,\n+    local_id: HirId,\n+    expr_id: HirId,\n+    f: impl FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B>,\n+) -> ControlFlow<B> {\n+    struct V<'cx, 'tcx, F, B> {\n+        cx: &'cx LateContext<'tcx>,\n+        local_id: HirId,\n+        expr_id: HirId,\n+        found: bool,\n+        res: ControlFlow<B>,\n+        f: F,\n+    }\n+    impl<'cx, 'tcx, F: FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B>, B> Visitor<'tcx> for V<'cx, 'tcx, F, B> {\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n+        }\n+\n+        fn visit_expr(&mut self, e: &'tcx Expr<'tcx>) {\n+            if !self.found {\n+                if e.hir_id == self.expr_id {\n+                    self.found = true;\n+                } else {\n+                    walk_expr(self, e);\n+                }\n+                return;\n+            }\n+            if self.res.is_break() {\n+                return;\n+            }\n+            if path_to_local_id(e, self.local_id) {\n+                self.res = (self.f)(e);\n+            } else {\n+                walk_expr(self, e);\n+            }\n+        }\n+    }\n+\n+    if let Some(b) = get_enclosing_block(cx, local_id) {\n+        let mut v = V {\n+            cx,\n+            local_id,\n+            expr_id,\n+            found: false,\n+            res: ControlFlow::Continue(()),\n+            f,\n+        };\n+        v.visit_block(b);\n+        v.res\n+    } else {\n+        ControlFlow::Continue(())\n+    }\n+}"}, {"sha": "531745424a7d02b77c8503480b81eb9b72ad2103", "filename": "tests/ui/vec_init_then_push.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/tests%2Fui%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/tests%2Fui%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.rs?ref=6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "patch": "@@ -29,6 +29,12 @@ fn main() {\n         // no lint\n         vec.push(1);\n     }\n+\n+    let mut vec = Vec::with_capacity(5);\n+    vec.push(1);\n+    vec.push(2);\n+    vec.push(3);\n+    vec.push(4);\n }\n \n pub fn no_lint() -> Vec<i32> {\n@@ -44,3 +50,57 @@ pub fn no_lint() -> Vec<i32> {\n         }\n     }\n }\n+\n+fn _from_iter(items: impl Iterator<Item = u32>) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(0);\n+    v.push(1);\n+    v.extend(items);\n+    v\n+}\n+\n+fn _cond_push(x: bool) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(0);\n+    if x {\n+        v.push(1);\n+    }\n+    v.push(2);\n+    v\n+}\n+\n+fn _push_then_edit(x: u32) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(x);\n+    v.push(1);\n+    v[0] = v[1] + 5;\n+    v\n+}\n+\n+fn _cond_push_with_large_start(x: bool) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(0);\n+    v.push(1);\n+    v.push(0);\n+    v.push(1);\n+    v.push(0);\n+    v.push(0);\n+    v.push(1);\n+    v.push(0);\n+    if x {\n+        v.push(1);\n+    }\n+\n+    let mut v2 = Vec::new();\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.extend(&v);\n+\n+    v2\n+}"}, {"sha": "50b029fc33727a2a23351099f8beb60ac88271f1", "filename": "tests/ui/vec_init_then_push.stderr", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/tests%2Fui%2Fvec_init_then_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ec735962f0c948e6971f12fc5f4279f7c1a8c28/tests%2Fui%2Fvec_init_then_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_init_then_push.stderr?ref=6ec735962f0c948e6971f12fc5f4279f7c1a8c28", "patch": "@@ -3,7 +3,7 @@ error: calls to `push` immediately after creation\n    |\n LL | /     let mut def_err: Vec<u32> = Default::default();\n LL | |     def_err.push(0);\n-   | |____________________^ help: consider using the `vec![]` macro: `let mut def_err: Vec<u32> = vec![..];`\n+   | |____________________^ help: consider using the `vec![]` macro: `let def_err: Vec<u32> = vec![..];`\n    |\n    = note: `-D clippy::vec-init-then-push` implied by `-D warnings`\n \n@@ -30,5 +30,37 @@ LL | /     new_err = Vec::new();\n LL | |     new_err.push(0);\n    | |____________________^ help: consider using the `vec![]` macro: `new_err = vec![..];`\n \n-error: aborting due to 4 previous errors\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:73:5\n+   |\n+LL | /     let mut v = Vec::new();\n+LL | |     v.push(x);\n+LL | |     v.push(1);\n+   | |______________^ help: consider using the `vec![]` macro: `let mut v = vec![..];`\n+\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:81:5\n+   |\n+LL | /     let mut v = Vec::new();\n+LL | |     v.push(0);\n+LL | |     v.push(1);\n+LL | |     v.push(0);\n+...  |\n+LL | |     v.push(1);\n+LL | |     v.push(0);\n+   | |______________^ help: consider using the `vec![]` macro: `let mut v = vec![..];`\n+\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:94:5\n+   |\n+LL | /     let mut v2 = Vec::new();\n+LL | |     v2.push(0);\n+LL | |     v2.push(1);\n+LL | |     v2.push(0);\n+...  |\n+LL | |     v2.push(1);\n+LL | |     v2.push(0);\n+   | |_______________^ help: consider using the `vec![]` macro: `let mut v2 = vec![..];`\n+\n+error: aborting due to 7 previous errors\n "}]}