{"sha": "c0472a5450f3e2a39d2ea1f64d8886411b377667", "node_id": "C_kwDOAAsO6NoAKGMwNDcyYTU0NTBmM2UyYTM5ZDJlYTFmNjRkODg4NjQxMWIzNzc2Njc", "commit": {"author": {"name": "Byron Zhong", "email": "byronzhong@cs.uchicago.edu", "date": "2022-10-27T05:49:39Z"}, "committer": {"name": "Byron Zhong", "email": "byronzhong@cs.uchicago.edu", "date": "2022-10-27T05:49:39Z"}, "message": "Fix E0433 diagnostics ignoring typo suggestions and outputing wrong message", "tree": {"sha": "f53170e566ab1f0d58016991db35f7e852e16fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f53170e566ab1f0d58016991db35f7e852e16fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0472a5450f3e2a39d2ea1f64d8886411b377667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0472a5450f3e2a39d2ea1f64d8886411b377667", "html_url": "https://github.com/rust-lang/rust/commit/c0472a5450f3e2a39d2ea1f64d8886411b377667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0472a5450f3e2a39d2ea1f64d8886411b377667/comments", "author": {"login": "zbyrn", "id": 34432561, "node_id": "MDQ6VXNlcjM0NDMyNTYx", "avatar_url": "https://avatars.githubusercontent.com/u/34432561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbyrn", "html_url": "https://github.com/zbyrn", "followers_url": "https://api.github.com/users/zbyrn/followers", "following_url": "https://api.github.com/users/zbyrn/following{/other_user}", "gists_url": "https://api.github.com/users/zbyrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbyrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbyrn/subscriptions", "organizations_url": "https://api.github.com/users/zbyrn/orgs", "repos_url": "https://api.github.com/users/zbyrn/repos", "events_url": "https://api.github.com/users/zbyrn/events{/privacy}", "received_events_url": "https://api.github.com/users/zbyrn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zbyrn", "id": 34432561, "node_id": "MDQ6VXNlcjM0NDMyNTYx", "avatar_url": "https://avatars.githubusercontent.com/u/34432561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbyrn", "html_url": "https://github.com/zbyrn", "followers_url": "https://api.github.com/users/zbyrn/followers", "following_url": "https://api.github.com/users/zbyrn/following{/other_user}", "gists_url": "https://api.github.com/users/zbyrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbyrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbyrn/subscriptions", "organizations_url": "https://api.github.com/users/zbyrn/orgs", "repos_url": "https://api.github.com/users/zbyrn/repos", "events_url": "https://api.github.com/users/zbyrn/events{/privacy}", "received_events_url": "https://api.github.com/users/zbyrn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1898c34e923bad763e723c68dd9f23a09f9eb0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1898c34e923bad763e723c68dd9f23a09f9eb0fc", "html_url": "https://github.com/rust-lang/rust/commit/1898c34e923bad763e723c68dd9f23a09f9eb0fc"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "6337540efbdcdfd392946687df29e1f97c11bb16", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c0472a5450f3e2a39d2ea1f64d8886411b377667/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0472a5450f3e2a39d2ea1f64d8886411b377667/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=c0472a5450f3e2a39d2ea1f64d8886411b377667", "patch": "@@ -31,7 +31,7 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_span::source_map::{respan, Spanned};\n use std::collections::{hash_map::Entry, BTreeSet};\n-use std::mem::{replace, take};\n+use std::mem::{replace, take, swap};\n \n mod diagnostics;\n \n@@ -3334,10 +3334,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             let (mut err, candidates) =\n                 this.smart_resolve_report_errors(path, path_span, PathSource::Type, None);\n \n-            if candidates.is_empty() {\n-                err.cancel();\n-                return Some(parent_err);\n-            }\n \n             // There are two different error messages user might receive at\n             // this point:\n@@ -3348,37 +3344,62 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // latter one - for paths in expression-position.\n             //\n             // Thus (since we're in expression-position at this point), not to\n-            // confuse the user, we want to keep the *message* from E0432 (so\n+            // confuse the user, we want to keep the *message* from E0433 (so\n             // `parent_err`), but we want *hints* from E0412 (so `err`).\n             //\n             // And that's what happens below - we're just mixing both messages\n             // into a single one.\n             let mut parent_err = this.r.into_struct_error(parent_err.span, parent_err.node);\n \n+            // overwrite all properties with the parent's error message\n             err.message = take(&mut parent_err.message);\n             err.code = take(&mut parent_err.code);\n+            swap(&mut err.span, &mut parent_err.span);\n             err.children = take(&mut parent_err.children);\n+            err.sort_span = parent_err.sort_span;\n+            err.is_lint = parent_err.is_lint;\n+\n+            // merge the parent's suggestions with the typo suggestions\n+            fn append_result<T, E>(res1: &mut Result<Vec<T>, E>, res2: Result<Vec<T>, E>) {\n+                match res1 {\n+                    Ok(vec1) => match res2 {\n+                        Ok(mut vec2) => { vec1.append(&mut vec2); },\n+                        Err(e) => { *res1 = Err(e) },\n+                    },\n+                    Err(_) => (),\n+                };\n+            }\n+            append_result(&mut err.suggestions, parent_err.suggestions.clone());\n \n             parent_err.cancel();\n \n             let def_id = this.parent_scope.module.nearest_parent_mod();\n \n             if this.should_report_errs() {\n-                this.r.use_injections.push(UseError {\n-                    err,\n-                    candidates,\n-                    def_id,\n-                    instead: false,\n-                    suggestion: None,\n-                    path: path.into(),\n-                    is_call: source.is_call(),\n-                });\n+                if candidates.is_empty() {\n+                    // When there is no suggested imports, we can just emit the error\n+                    // and suggestions immediately. Note that we bypass the usually error\n+                    // reporting routine (ie via `self.r.report_error`) because we need\n+                    // to post-process the `ResolutionError` above.\n+                    err.emit();\n+                } else {\n+                    // If there are suggested imports, the error reporting is delayed\n+                    this.r.use_injections.push(UseError {\n+                        err,\n+                        candidates,\n+                        def_id,\n+                        instead: false,\n+                        suggestion: None,\n+                        path: path.into(),\n+                        is_call: source.is_call(),\n+                    });\n+                }\n             } else {\n                 err.cancel();\n             }\n \n             // We don't return `Some(parent_err)` here, because the error will\n-            // be already printed as part of the `use` injections\n+            // be already printed either immediately or as part of the `use` injections\n             None\n         };\n "}]}