{"sha": "7f19a2d2de32ea61a8c9b8bca44a13894954b3be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMTlhMmQyZGUzMmVhNjFhOGM5YjhiY2E0NGExMzg5NDk1NGIzYmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-01T18:29:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-01T18:29:31Z"}, "message": "Find codegen backends in more locations\n\n* Search in the sysroot passed using `--sysroot` in addition to the\n  default sysroot.\n* Search for `librustc_codegen_$name.so` in addition to\n  `librustc_codegen_$name-$release.so`.", "tree": {"sha": "a4d4c91a81d47af411bb4d9c1b7f432ea91a3c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d4c91a81d47af411bb4d9c1b7f432ea91a3c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f19a2d2de32ea61a8c9b8bca44a13894954b3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f19a2d2de32ea61a8c9b8bca44a13894954b3be", "html_url": "https://github.com/rust-lang/rust/commit/7f19a2d2de32ea61a8c9b8bca44a13894954b3be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f19a2d2de32ea61a8c9b8bca44a13894954b3be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe1fa9122b8ea0cac7e7e92be798a44cc89831c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe1fa9122b8ea0cac7e7e92be798a44cc89831c", "html_url": "https://github.com/rust-lang/rust/commit/1fe1fa9122b8ea0cac7e7e92be798a44cc89831c"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "d80454d29a5faa592306a482fab3826fa6915752", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f19a2d2de32ea61a8c9b8bca44a13894954b3be/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f19a2d2de32ea61a8c9b8bca44a13894954b3be/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=7f19a2d2de32ea61a8c9b8bca44a13894954b3be", "patch": "@@ -799,7 +799,7 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(util::release_str()));\n         if cfg!(feature = \"llvm\") {\n-            get_builtin_codegen_backend(\"llvm\")().print_version();\n+            get_builtin_codegen_backend(&None, \"llvm\")().print_version();\n         }\n     }\n }\n@@ -1088,7 +1088,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n \n     if cg_flags.iter().any(|x| *x == \"passes=list\") {\n         if cfg!(feature = \"llvm\") {\n-            get_builtin_codegen_backend(\"llvm\")().print_passes();\n+            get_builtin_codegen_backend(&None, \"llvm\")().print_passes();\n         }\n         return None;\n     }"}, {"sha": "ec496032f521063a30b6d0f5a37d0ac0b4637114", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f19a2d2de32ea61a8c9b8bca44a13894954b3be/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f19a2d2de32ea61a8c9b8bca44a13894954b3be/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=7f19a2d2de32ea61a8c9b8bca44a13894954b3be", "patch": "@@ -241,7 +241,7 @@ pub fn get_codegen_backend(sopts: &config::Options) -> Box<dyn CodegenBackend> {\n \n         let backend = match codegen_name {\n             filename if filename.contains('.') => load_backend_from_dylib(filename.as_ref()),\n-            codegen_name => get_builtin_codegen_backend(codegen_name),\n+            codegen_name => get_builtin_codegen_backend(&sopts.maybe_sysroot, codegen_name),\n         };\n \n         unsafe {\n@@ -366,15 +366,21 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     }\n }\n \n-pub fn get_builtin_codegen_backend(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n+pub fn get_builtin_codegen_backend(\n+    maybe_sysroot: &Option<PathBuf>,\n+    backend_name: &str,\n+) -> fn() -> Box<dyn CodegenBackend> {\n     match backend_name {\n         #[cfg(feature = \"llvm\")]\n         \"llvm\" => rustc_codegen_llvm::LlvmCodegenBackend::new,\n-        _ => get_codegen_sysroot(backend_name),\n+        _ => get_codegen_sysroot(maybe_sysroot, backend_name),\n     }\n }\n \n-pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n+pub fn get_codegen_sysroot(\n+    maybe_sysroot: &Option<PathBuf>,\n+    backend_name: &str,\n+) -> fn() -> Box<dyn CodegenBackend> {\n     // For now we only allow this function to be called once as it'll dlopen a\n     // few things, which seems to work best if we only do that once. In\n     // general this assertion never trips due to the once guard in `get_codegen_backend`,\n@@ -389,8 +395,9 @@ pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend\n     let target = session::config::host_triple();\n     let sysroot_candidates = sysroot_candidates();\n \n-    let sysroot = sysroot_candidates\n+    let sysroot = maybe_sysroot\n         .iter()\n+        .chain(sysroot_candidates.iter())\n         .map(|sysroot| {\n             let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n             sysroot.join(libdir).with_file_name(\"codegen-backends\")\n@@ -426,8 +433,10 @@ pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend\n \n     let mut file: Option<PathBuf> = None;\n \n-    let expected_name =\n-        format!(\"rustc_codegen_{}-{}\", backend_name, release_str().expect(\"CFG_RELEASE\"));\n+    let expected_names = &[\n+        format!(\"rustc_codegen_{}-{}\", backend_name, release_str().expect(\"CFG_RELEASE\")),\n+        format!(\"rustc_codegen_{}\", backend_name),\n+    ];\n     for entry in d.filter_map(|e| e.ok()) {\n         let path = entry.path();\n         let filename = match path.file_name().and_then(|s| s.to_str()) {\n@@ -438,7 +447,7 @@ pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend\n             continue;\n         }\n         let name = &filename[DLL_PREFIX.len()..filename.len() - DLL_SUFFIX.len()];\n-        if name != expected_name {\n+        if !expected_names.iter().any(|expected| expected == name) {\n             continue;\n         }\n         if let Some(ref prev) = file {"}]}