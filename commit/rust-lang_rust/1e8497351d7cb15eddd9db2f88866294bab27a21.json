{"sha": "1e8497351d7cb15eddd9db2f88866294bab27a21", "node_id": "C_kwDOAAsO6NoAKDFlODQ5NzM1MWQ3Y2IxNWVkZGQ5ZGIyZjg4ODY2Mjk0YmFiMjdhMjE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-14T23:13:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-14T23:51:11Z"}, "message": "Streamline `parse_path_start_expr`.\n\nLet-chaining avoids some code duplication.", "tree": {"sha": "c0334d8e7425f0b5e9a399e956607007810406e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0334d8e7425f0b5e9a399e956607007810406e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e8497351d7cb15eddd9db2f88866294bab27a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8497351d7cb15eddd9db2f88866294bab27a21", "html_url": "https://github.com/rust-lang/rust/commit/1e8497351d7cb15eddd9db2f88866294bab27a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e8497351d7cb15eddd9db2f88866294bab27a21/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b52ff73edc8b0b7c74bc28760d618187731fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b52ff73edc8b0b7c74bc28760d618187731fe8", "html_url": "https://github.com/rust-lang/rust/commit/e2b52ff73edc8b0b7c74bc28760d618187731fe8"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "ec6a64b745e4ea6cc86f9568999b438b7956ba10", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e8497351d7cb15eddd9db2f88866294bab27a21/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8497351d7cb15eddd9db2f88866294bab27a21/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1e8497351d7cb15eddd9db2f88866294bab27a21", "patch": "@@ -1510,34 +1510,31 @@ impl<'a> Parser<'a> {\n         } else {\n             (None, self.parse_path(PathStyle::Expr)?)\n         };\n-        let lo = path.span;\n \n         // `!`, as an operator, is prefix, so we know this isn't that.\n-        let (hi, kind) = if self.eat(&token::Not) {\n+        let (span, kind) = if self.eat(&token::Not) {\n             // MACRO INVOCATION expression\n             if qself.is_some() {\n                 self.struct_span_err(path.span, \"macros cannot use qualified paths\").emit();\n             }\n+            let lo = path.span;\n             let mac = MacCall {\n                 path,\n                 args: self.parse_mac_args()?,\n                 prior_type_ascription: self.last_type_ascription,\n             };\n-            (self.prev_token.span, ExprKind::MacCall(mac))\n-        } else if self.check(&token::OpenDelim(Delimiter::Brace)) {\n-            if let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path, &attrs) {\n+            (lo.to(self.prev_token.span), ExprKind::MacCall(mac))\n+        } else if self.check(&token::OpenDelim(Delimiter::Brace)) &&\n+            let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path, &attrs) {\n                 if qself.is_some() {\n                     self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n                 }\n                 return expr;\n-            } else {\n-                (path.span, ExprKind::Path(qself, path))\n-            }\n         } else {\n             (path.span, ExprKind::Path(qself, path))\n         };\n \n-        let expr = self.mk_expr(lo.to(hi), kind, attrs);\n+        let expr = self.mk_expr(span, kind, attrs);\n         self.maybe_recover_from_bad_qpath(expr)\n     }\n "}]}