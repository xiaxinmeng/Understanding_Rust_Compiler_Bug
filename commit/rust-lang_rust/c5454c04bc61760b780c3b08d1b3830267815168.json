{"sha": "c5454c04bc61760b780c3b08d1b3830267815168", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NDU0YzA0YmM2MTc2MGI3ODBjM2IwOGQxYjM4MzAyNjc4MTUxNjg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-09T20:25:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-28T08:04:50Z"}, "message": "Use `Ident`s for lifetimes in HIR", "tree": {"sha": "5de829c78f2d97166f067d81682d490e6ad96d07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de829c78f2d97166f067d81682d490e6ad96d07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5454c04bc61760b780c3b08d1b3830267815168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5454c04bc61760b780c3b08d1b3830267815168", "html_url": "https://github.com/rust-lang/rust/commit/c5454c04bc61760b780c3b08d1b3830267815168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5454c04bc61760b780c3b08d1b3830267815168/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba196bdcb10736da5d14c961bd8962d80e300913", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba196bdcb10736da5d14c961bd8962d80e300913", "html_url": "https://github.com/rust-lang/rust/commit/ba196bdcb10736da5d14c961bd8962d80e300913"}], "stats": {"total": 166, "additions": 93, "deletions": 73}, "files": [{"sha": "bb8b0fd8e0179e4306394722f7e661eaf1b12950", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -432,8 +432,8 @@ pub fn walk_label<'v, V: Visitor<'v>>(visitor: &mut V, label: &'v Label) {\n pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n     visitor.visit_id(lifetime.id);\n     match lifetime.name {\n-        LifetimeName::Param(ParamName::Plain(name)) => {\n-            visitor.visit_name(lifetime.span, name);\n+        LifetimeName::Param(ParamName::Plain(ident)) => {\n+            visitor.visit_ident(ident);\n         }\n         LifetimeName::Param(ParamName::Fresh(_)) |\n         LifetimeName::Static |\n@@ -741,7 +741,7 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n     visitor.visit_id(param.id);\n     walk_list!(visitor, visit_attribute, &param.attrs);\n     match param.name {\n-        ParamName::Plain(name) => visitor.visit_name(param.span, name),\n+        ParamName::Plain(ident) => visitor.visit_ident(ident),\n         ParamName::Fresh(_) => {}\n     }\n     match param.kind {"}, {"sha": "561097e9afc962b088892139fdb9b3705319ffc5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -138,7 +138,7 @@ pub struct LoweringContext<'a> {\n     // When `is_collectin_in_band_lifetimes` is true, each lifetime is checked\n     // against this list to see if it is already in-scope, or if a definition\n     // needs to be created for it.\n-    in_scope_lifetimes: Vec<Name>,\n+    in_scope_lifetimes: Vec<Ident>,\n \n     type_def_lifetime_params: DefIdMap<usize>,\n \n@@ -678,15 +678,15 @@ impl<'a> LoweringContext<'a> {\n                 // that collisions are ok here and this shouldn't\n                 // really show up for end-user.\n                 let str_name = match hir_name {\n-                    ParamName::Plain(name) => name.as_str(),\n-                    ParamName::Fresh(_) => keywords::UnderscoreLifetime.name().as_str(),\n+                    ParamName::Plain(ident) => name.as_interned_str(),\n+                    ParamName::Fresh(_) => keywords::UnderscoreLifetime.name().as_interned_str(),\n                 };\n \n                 // Add a definition for the in-band lifetime def\n                 self.resolver.definitions().create_def_with_parent(\n                     parent_id.index,\n                     def_node_id,\n-                    DefPathData::LifetimeParam(str_name.as_interned_str()),\n+                    DefPathData::LifetimeDef(str_name),\n                     DefIndexAddressSpace::High,\n                     Mark::root(),\n                     span,\n@@ -712,22 +712,23 @@ impl<'a> LoweringContext<'a> {\n     /// lifetimes are enabled, then we want to push that lifetime into\n     /// the vector of names to define later. In that case, it will get\n     /// added to the appropriate generics.\n-    fn maybe_collect_in_band_lifetime(&mut self, span: Span, name: Name) {\n+    fn maybe_collect_in_band_lifetime(&mut self, ident: Ident) {\n         if !self.is_collecting_in_band_lifetimes {\n             return;\n         }\n \n-        if self.in_scope_lifetimes.contains(&name) {\n+        if self.in_scope_lifetimes.contains(&ident.modern()) {\n             return;\n         }\n \n         let hir_name = ParamName::Plain(name);\n \n-        if self.lifetimes_to_define.iter().any(|(_, lt_name)| *lt_name == hir_name) {\n+        if self.lifetimes_to_define.iter()\n+                                   .any(|(_, lt_name)| *lt_name.modern() == hir_name.modern()) {\n             return;\n         }\n \n-        self.lifetimes_to_define.push((span, hir_name));\n+        self.lifetimes_to_define.push((ident.span, hir_name));\n     }\n \n     /// When we have either an elided or `'_` lifetime in an impl\n@@ -750,7 +751,7 @@ impl<'a> LoweringContext<'a> {\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n-            GenericParamKind::Lifetime { .. } => Some(param.ident.name),\n+            GenericParamKind::Lifetime { .. } => Some(param.ident.modern()),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -774,7 +775,7 @@ impl<'a> LoweringContext<'a> {\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => Some(param.name.name()),\n+            hir::GenericParamKind::Lifetime { .. } => Some(param.name.ident().modern()),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -1443,7 +1444,7 @@ impl<'a> LoweringContext<'a> {\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n                         def_node_id,\n-                        DefPathData::LifetimeParam(name.name().as_interned_str()),\n+                        DefPathData::LifetimeParam(name.ident().as_interned_str()),\n                         DefIndexAddressSpace::High,\n                         Mark::root(),\n                         lifetime.span,\n@@ -2177,20 +2178,22 @@ impl<'a> LoweringContext<'a> {\n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n         let span = l.ident.span;\n         match self.lower_ident(l.ident) {\n-            x if x == \"'static\" => self.new_named_lifetime(l.id, span, hir::LifetimeName::Static),\n-            x if x == \"'_\" => match self.anonymous_lifetime_mode {\n-                AnonymousLifetimeMode::CreateParameter => {\n-                    let fresh_name = self.collect_fresh_in_band_lifetime(span);\n-                    self.new_named_lifetime(l.id, span, hir::LifetimeName::Param(fresh_name))\n-                }\n+            ident if ident.name == keywords::StaticLifetime.name() =>\n+                self.new_named_lifetime(l.id, span, hir::LifetimeName::Static),\n+            ident if ident.name == keywords::UnderscoreLifetime.name() =>\n+                match self.anonymous_lifetime_mode {\n+                    AnonymousLifetimeMode::CreateParameter => {\n+                        let fresh_name = self.collect_fresh_in_band_lifetime(span);\n+                        self.new_named_lifetime(l.id, span, hir::LifetimeName::Param(fresh_name))\n+                    }\n \n-                AnonymousLifetimeMode::PassThrough => {\n-                    self.new_named_lifetime(l.id, span, hir::LifetimeName::Underscore)\n-                }\n-            },\n-            name => {\n-                self.maybe_collect_in_band_lifetime(span, name);\n-                let param_name = ParamName::Plain(name);\n+                    AnonymousLifetimeMode::PassThrough => {\n+                        self.new_named_lifetime(l.id, span, hir::LifetimeName::Underscore)\n+                    }\n+                },\n+            ident => {\n+                self.maybe_collect_in_band_lifetime(ident);\n+                let param_name = ParamName::Plain(ident);\n                 self.new_named_lifetime(l.id, span, hir::LifetimeName::Param(param_name))\n             }\n         }"}, {"sha": "261b5d313eff0660037300c86bf4f260f3916066", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -112,11 +112,11 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // information we encapsulate into, the better\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n-            ItemKind::Trait(..) => DefPathData::Trait(i.ident.name.as_interned_str()),\n+            ItemKind::Trait(..) => DefPathData::Trait(i.ident.as_interned_str()),\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n-                DefPathData::TypeNs(i.ident.name.as_interned_str()),\n+                DefPathData::TypeNs(i.ident.as_interned_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }\n@@ -129,10 +129,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     |this| visit::walk_item(this, i)\n                 )\n             }\n-            ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_interned_str()),\n+            ItemKind::Mod(..) => DefPathData::Module(i.ident.as_interned_str()),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.name.as_interned_str()),\n-            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_interned_str()),\n+                DefPathData::ValueNs(i.ident.as_interned_str()),\n+            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.as_interned_str()),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(..) => {\n@@ -169,7 +169,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n \n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.name.as_interned_str()),\n+                                  DefPathData::ValueNs(foreign_item.ident.as_interned_str()),\n                                   REGULAR_SPACE,\n                                   foreign_item.span);\n \n@@ -180,8 +180,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_variant(&mut self, v: &'a Variant, g: &'a Generics, item_id: NodeId) {\n         let def = self.create_def(v.node.data.id(),\n-                                  DefPathData::EnumVariant(v.node.ident\n-                                                            .name.as_interned_str()),\n+                                  DefPathData::EnumVariant(v.node.ident.as_interned_str()),\n                                   REGULAR_SPACE,\n                                   v.span);\n         self.with_parent(def, |this| visit::walk_variant(this, v, g, item_id));\n@@ -201,7 +200,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_generic_param(&mut self, param: &'a GenericParam) {\n-        let name = param.ident.name.as_interned_str();\n+        let name = param.ident.as_interned_str();\n         let def_path_data = match param.kind {\n             GenericParamKind::Lifetime { .. } => DefPathData::LifetimeParam(name),\n             GenericParamKind::Type { .. } => DefPathData::TypeParam(name),\n@@ -214,9 +213,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.name.as_interned_str()),\n+                DefPathData::ValueNs(ti.ident.as_interned_str()),\n             TraitItemKind::Type(..) => {\n-                DefPathData::AssocTypeInTrait(ti.ident.name.as_interned_str())\n+                DefPathData::AssocTypeInTrait(ti.ident.as_interned_str())\n             },\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n         };\n@@ -239,8 +238,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 )\n             }\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.name.as_interned_str()),\n-            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.name.as_interned_str()),\n+                DefPathData::ValueNs(ii.ident.as_interned_str()),\n+            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.as_interned_str()),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n "}, {"sha": "8c2f4e89352e5e298556c288967dd3260663dc72", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -953,8 +953,8 @@ impl<'hir> Map<'hir> {\n             NodeTraitItem(ti) => ti.name,\n             NodeVariant(v) => v.node.name,\n             NodeField(f) => f.ident.name,\n-            NodeLifetime(lt) => lt.name.name(),\n-            NodeGenericParam(param) => param.name.name(),\n+            NodeLifetime(lt) => lt.name.ident().name,\n+            NodeGenericParam(param) => param.name.ident().name,\n             NodeBinding(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n             NodeStructCtor(_) => self.name(self.get_parent(id)),\n             _ => bug!(\"no name for {}\", self.node_to_string(id))"}, {"sha": "dedc276dcc347517c4648d71a7d694e877abc8d8", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -245,13 +245,13 @@ pub enum LifetimeName {\n }\n \n impl LifetimeName {\n-    pub fn name(&self) -> Name {\n-        use self::LifetimeName::*;\n+    pub fn ident(&self) -> Ident {\n         match *self {\n-            Implicit => keywords::Invalid.name(),\n-            Underscore => keywords::UnderscoreLifetime.name(),\n-            Static => keywords::StaticLifetime.name(),\n-            Param(param_name) => param_name.name(),\n+            LifetimeName::Implicit => keywords::Invalid.ident(),\n+            LifetimeName::Fresh(_) | LifetimeName::Underscore =>\n+                keywords::UnderscoreLifetime.ident(),\n+            LifetimeName::Static => keywords::StaticLifetime.ident(),\n+            LifetimeName::Ident(ident) => ident,\n         }\n     }\n \n@@ -272,6 +272,19 @@ impl LifetimeName {\n     fn is_static(&self) -> bool {\n         self == &LifetimeName::Static\n     }\n+\n+    pub fn modern(&self) -> LifetimeName {\n+        match *self {\n+            LifetimeName::Ident(ident) => LifetimeName::Ident(ident.modern()),\n+            lifetime_name => lifetime_name,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Lifetime {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.name.ident().fmt(f)\n+    }\n }\n \n impl fmt::Debug for Lifetime {"}, {"sha": "1d9345dbae265eaed217faf3d850cee774b4bc02", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -94,7 +94,7 @@ impl Region {\n         let def_id = hir_map.local_def_id(param.id);\n         let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\"Region::early: index={} def_id={:?}\", i, def_id);\n-        (param.name, Region::EarlyBound(i, def_id, origin))\n+        (param.name.modern(), Region::EarlyBound(i, def_id, origin))\n     }\n \n     fn late(hir_map: &Map, param: &GenericParam) -> (ParamName, Region) {\n@@ -108,7 +108,7 @@ impl Region {\n             def_id,\n             origin,\n         );\n-        (param.name, Region::LateBound(depth, def_id, origin))\n+        (param.name.modern(), Region::LateBound(depth, def_id, origin))\n     }\n \n     fn late_anon(index: &Cell<u32>) -> Region {\n@@ -1177,7 +1177,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n                     ref lifetimes, s, ..\n                 } => {\n                     // FIXME (#24278): non-hygienic comparison\n-                    let param_name = hir::ParamName::Plain(label);\n+                    let param_name = hir::ParamName::Plain(ast::Ident::with_empty_ctxt(label));\n                     if let Some(def) = lifetimes.get(&param_name) {\n                         let node_id = tcx.hir.as_local_node_id(def.id().unwrap()).unwrap();\n \n@@ -1220,7 +1220,7 @@ fn compute_object_lifetime_defaults(\n                                 generics.params.iter().find_map(|param| match param.kind {\n                                         GenericParamKind::Lifetime { .. } => {\n                                             if i == 0 {\n-                                                return Some(param.name.name().to_string());\n+                                                return Some(param.name.ident().to_string());\n                                             }\n                                             i -= 1;\n                                             None\n@@ -1254,7 +1254,7 @@ fn object_lifetime_defaults_for_item(\n     fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::GenericBound]) {\n         for bound in bounds {\n             if let hir::GenericBound::Outlives(ref lifetime) = *bound {\n-                set.insert(lifetime.name);\n+                set.insert(lifetime.name.modern());\n             }\n         }\n     }\n@@ -1582,7 +1582,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         LifetimeName::Param(param_name) => param_name,\n                         _ => bug!(\"expected LifetimeName::Param\"),\n                     };\n-                    if let Some(&def) = lifetimes.get(&name) {\n+                    if let Some(&def) = lifetimes.get(&name.modern()) {\n                         break Some(def.shifted(late_depth));\n                     } else {\n                         late_depth += 1;\n@@ -1651,7 +1651,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 lifetime_ref.span,\n                 E0261,\n                 \"use of undeclared lifetime name `{}`\",\n-                lifetime_ref.name.name()\n+                lifetime_ref\n             ).span_label(lifetime_ref.span, \"undeclared lifetime\")\n                 .emit();\n         }\n@@ -2254,7 +2254,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         lifetime_i.span,\n                         E0262,\n                         \"invalid lifetime parameter name: `{}`\",\n-                        name\n+                        lifetime\n                     );\n                     err.span_label(\n                         lifetime_i.span,\n@@ -2327,7 +2327,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     ) {\n         for &(label, label_span) in &self.labels_in_fn {\n             // FIXME (#24278): non-hygienic comparison\n-            if param.name.name() == label {\n+            if param.name.ident().name == label {\n                 signal_shadowing_problem(\n                     self.tcx,\n                     label,\n@@ -2353,12 +2353,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 Scope::Binder {\n                     ref lifetimes, s, ..\n                 } => {\n-                    if let Some(&def) = lifetimes.get(&param.name) {\n+                    if let Some(&def) = lifetimes.get(&param.name.modern()) {\n                         let node_id = self.tcx.hir.as_local_node_id(def.id().unwrap()).unwrap();\n \n                         signal_shadowing_problem(\n                             self.tcx,\n-                            param.name.name(),\n+                            param.name.ident().name,\n                             original_lifetime(self.tcx.hir.span(node_id)),\n                             shadower_lifetime(&param),\n                         );\n@@ -2520,7 +2520,8 @@ fn insert_late_bound_lifetimes(\n             hir::GenericParamKind::Lifetime { .. } => {\n                 if !param.bounds.is_empty() {\n                     // `'a: 'b` means both `'a` and `'b` are referenced\n-                    appears_in_where_clause.regions.insert(hir::LifetimeName::Param(param.name));\n+                    appears_in_where_clause\n+                        .regions.insert(hir::LifetimeName::Param(param.name.modern()));\n                 }\n             }\n             hir::GenericParamKind::Type { .. } => {}\n@@ -2537,7 +2538,7 @@ fn insert_late_bound_lifetimes(\n     // - do not appear in the where-clauses\n     // - are not implicitly captured by `impl Trait`\n     for param in &generics.params {\n-        let lt_name = hir::LifetimeName::Param(param.name);\n+        let lt_name = hir::LifetimeName::Param(param.name.modern());\n         // appears in the where clauses? early-bound.\n         if appears_in_where_clause.regions.contains(&lt_name) {\n             continue;\n@@ -2596,7 +2597,7 @@ fn insert_late_bound_lifetimes(\n         }\n \n         fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) {\n-            self.regions.insert(lifetime_ref.name);\n+            self.regions.insert(lifetime_ref.name.modern());\n         }\n     }\n \n@@ -2610,7 +2611,7 @@ fn insert_late_bound_lifetimes(\n         }\n \n         fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) {\n-            self.regions.insert(lifetime_ref.name);\n+            self.regions.insert(lifetime_ref.name.modern());\n         }\n     }\n }"}, {"sha": "28e533054f0cb468c03f0a0aef693f1ac58cd86e", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_generic_param(&mut self, cx: &LateContext, param: &hir::GenericParam) {\n         match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n-                let name = param.name.name().as_str();\n+                let name = param.name.ident().as_str();\n                 self.check_snake_case(cx, \"lifetime\", &name, Some(param.span));\n             }\n             GenericParamKind::Type { .. } => {}"}, {"sha": "be42549df74a32ba816217ec314930619b7fe6d2", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -632,7 +632,7 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         let param = &hir_generics.params[index];\n-        report_bivariance(tcx, param.span, param.name.name());\n+        report_bivariance(tcx, param.span, param.name.ident().name);\n     }\n }\n "}, {"sha": "28dba08f16a67cf1b7f849140417c1f19b84aa99", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -898,7 +898,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     params.extend(early_lifetimes.enumerate().map(|(i, param)| {\n         ty::GenericParamDef {\n-            name: param.name.name().as_interned_str(),\n+            name: param.name.ident().as_interned_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(param.id),\n             pure_wrt_drop: param.pure_wrt_drop,\n@@ -1437,7 +1437,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.id),\n             index,\n-            name: param.name.name().as_interned_str(),\n+            name: param.name.ident().as_interned_str(),\n         }));\n         index += 1;\n "}, {"sha": "dd86554bec431e47e6af9bb352cb09b0207cc1ef", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     let name = if param.name == \"\" {\n                         hir::ParamName::Plain(keywords::StaticLifetime.name())\n                     } else {\n-                        hir::ParamName::Plain(param.name.as_symbol())\n+                        hir::ParamName::Plain(ast::Ident::from_interned_str(param.name))\n                     };\n \n                     args.push(hir::GenericArg::Lifetime(hir::Lifetime {"}, {"sha": "274269ef53ac4655c7339a25a3a4808c933e3f22", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -1664,7 +1664,7 @@ impl Clean<Lifetime> for hir::Lifetime {\n                 _ => {}\n             }\n         }\n-        Lifetime(self.name.name().to_string())\n+        Lifetime(self.name.ident().to_string())\n     }\n }\n \n@@ -1677,14 +1677,14 @@ impl Clean<Lifetime> for hir::GenericParam {\n                         hir::GenericBound::Outlives(lt) => lt,\n                         _ => panic!(),\n                     });\n-                    let name = bounds.next().unwrap().name.name();\n-                    let mut s = format!(\"{}: {}\", self.name.name(), name);\n+                    let name = bounds.next().unwrap().name.ident();\n+                    let mut s = format!(\"{}: {}\", self.name.ident(), name);\n                     for bound in bounds {\n-                        s.push_str(&format!(\" + {}\", bound.name.name()));\n+                        s.push_str(&format!(\" + {}\", bound.name.ident()));\n                     }\n                     Lifetime(s)\n                 } else {\n-                    Lifetime(self.name.name().to_string())\n+                    Lifetime(self.name.ident().to_string())\n                 }\n             }\n             _ => panic!(),"}, {"sha": "b92553842bc8280696a005f913eedba033df1942", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5454c04bc61760b780c3b08d1b3830267815168/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c5454c04bc61760b780c3b08d1b3830267815168", "patch": "@@ -70,6 +70,10 @@ impl Ident {\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n+\n+    pub fn as_interned_str(self) -> InternedString {\n+        self.name.as_interned_str()\n+    }\n }\n \n impl PartialEq for Ident {"}]}