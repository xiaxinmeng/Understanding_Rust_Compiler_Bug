{"sha": "642786986ff21f33d3a08191d7c19cccf97d25e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Mjc4Njk4NmZmMjFmMzNkM2EwODE5MWQ3YzE5Y2NjZjk3ZDI1ZTI=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-14T10:15:20Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-27T10:05:59Z"}, "message": "deduplicate some", "tree": {"sha": "1715dfa5b3c864eee804ce091161e1fbd18b320b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1715dfa5b3c864eee804ce091161e1fbd18b320b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/642786986ff21f33d3a08191d7c19cccf97d25e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/642786986ff21f33d3a08191d7c19cccf97d25e2", "html_url": "https://github.com/rust-lang/rust/commit/642786986ff21f33d3a08191d7c19cccf97d25e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/642786986ff21f33d3a08191d7c19cccf97d25e2/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dcd5d7a7c41407478360bb2b77b3bfa857cca09", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dcd5d7a7c41407478360bb2b77b3bfa857cca09", "html_url": "https://github.com/rust-lang/rust/commit/2dcd5d7a7c41407478360bb2b77b3bfa857cca09"}], "stats": {"total": 65, "additions": 28, "deletions": 37}, "files": [{"sha": "b271b48b6c3ef443fe3ab36f8bbc0bc5481b85b1", "filename": "crates/ide_assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/642786986ff21f33d3a08191d7c19cccf97d25e2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642786986ff21f33d3a08191d7c19cccf97d25e2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=642786986ff21f33d3a08191d7c19cccf97d25e2", "patch": "@@ -1,12 +1,9 @@\n use itertools::Itertools;\n-use stdx::{format_to, to_lower_snake_case};\n+use stdx::to_lower_snake_case;\n use syntax::ast::VisibilityOwner;\n use syntax::ast::{self, AstNode, NameOwner};\n \n-use crate::{\n-    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n-    AssistContext, AssistId, AssistKind, Assists,\n-};\n+use crate::{AssistContext, AssistId, AssistKind, Assists, assist_context::AssistBuilder, utils::{find_impl_block_end, find_struct_impl, generate_impl_text}};\n \n // Assist: generate_enum_is_method\n //\n@@ -56,15 +53,8 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n         \"Generate an `is_` method for an enum variant\",\n         target,\n         |builder| {\n-            let mut buf = String::with_capacity(512);\n-\n-            if impl_def.is_some() {\n-                buf.push('\\n');\n-            }\n-\n             let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-            format_to!(\n-                buf,\n+            let method = format!(\n                 \"    /// Returns `true` if the {} is [`{}`].\n     {}fn {}(&self) -> bool {{\n         matches!(self, Self::{}{})\n@@ -77,14 +67,7 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n                 variant_kind.pattern_suffix(),\n             );\n \n-            let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n-                .unwrap_or_else(|| {\n-                    buf = generate_impl_text(&parent_enum, &buf);\n-                    parent_enum.syntax().text_range().end()\n-                });\n-\n-            builder.insert(start_offset, buf);\n+            add_method_to_adt(builder, &parent_enum, impl_def, &method);\n         },\n     )\n }\n@@ -140,15 +123,8 @@ pub(crate) fn generate_enum_into_method(acc: &mut Assists, ctx: &AssistContext)\n         \"Generate an `into_` method for an enum variant\",\n         target,\n         |builder| {\n-            let mut buf = String::with_capacity(512);\n-\n-            if impl_def.is_some() {\n-                buf.push('\\n');\n-            }\n-\n             let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-            format_to!(\n-                buf,\n+            let method = format!(\n                 \"    {}fn {}(self) -> Option<{}> {{\n         if let Self::{}{} = self {{\n             Some({})\n@@ -164,18 +140,33 @@ pub(crate) fn generate_enum_into_method(acc: &mut Assists, ctx: &AssistContext)\n                 bound_name,\n             );\n \n-            let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n-                .unwrap_or_else(|| {\n-                    buf = generate_impl_text(&parent_enum, &buf);\n-                    parent_enum.syntax().text_range().end()\n-                });\n-\n-            builder.insert(start_offset, buf);\n+            add_method_to_adt(builder, &parent_enum, impl_def, &method);\n         },\n     )\n }\n \n+fn add_method_to_adt(\n+    builder: &mut AssistBuilder,\n+    adt: &ast::Adt,\n+    impl_def: Option<ast::Impl>,\n+    method: &str,\n+) {\n+    let mut buf = String::with_capacity(method.len() + 2);\n+    if impl_def.is_some() {\n+        buf.push('\\n');\n+    }\n+    buf.push_str(method);\n+\n+    let start_offset = impl_def\n+        .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n+        .unwrap_or_else(|| {\n+            buf = generate_impl_text(&adt, &buf);\n+            adt.syntax().text_range().end()\n+        });\n+\n+    builder.insert(start_offset, buf);\n+}\n+\n enum VariantKind {\n     Unit,\n     /// Tuple with a single field"}]}