{"sha": "4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMmY0MGRmZGY1ZmYyYmNiY2M4MTA1MjQ2YThjMzIwNTRjNDBjYjc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-05T21:54:08Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-08T06:55:55Z"}, "message": "Remove unused Step methods", "tree": {"sha": "01588d8b96243d13a51ec5b6a48dfc21ab6afb82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01588d8b96243d13a51ec5b6a48dfc21ab6afb82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7", "html_url": "https://github.com/rust-lang/rust/commit/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbed18ca20f14a1fe3c8a1e02071c8e8dd7476c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbed18ca20f14a1fe3c8a1e02071c8e8dd7476c5", "html_url": "https://github.com/rust-lang/rust/commit/dbed18ca20f14a1fe3c8a1e02071c8e8dd7476c5"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "db3fc1155c3288dab9123db3c05fd9f461414d7c", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=4b2f40dfdf5ff2bcbcc8105246a8c32054c40cb7", "patch": "@@ -22,9 +22,6 @@ use super::{FusedIterator, TrustedLen};\n            reason = \"likely to be replaced by finer-grained traits\",\n            issue = \"42168\")]\n pub trait Step: PartialOrd + Sized {\n-    /// Steps `self` if possible.\n-    fn step(&self, by: &Self) -> Option<Self>;\n-\n     /// Returns the number of steps between two step objects. The count is\n     /// inclusive of `start` and exclusive of `end`.\n     ///\n@@ -35,9 +32,6 @@ pub trait Step: PartialOrd + Sized {\n     /// Same as `steps_between`, but with a `by` of 1\n     fn steps_between_by_one(start: &Self, end: &Self) -> Option<usize>;\n \n-    /// Tests whether this step is negative or not (going backwards)\n-    fn is_negative(&self) -> bool;\n-\n     /// Replaces this step with `1`, returning itself\n     fn replace_one(&mut self) -> Self;\n \n@@ -57,10 +51,6 @@ macro_rules! step_impl_unsigned {\n                    reason = \"likely to be replaced by finer-grained traits\",\n                    issue = \"42168\")]\n         impl Step for $t {\n-            #[inline]\n-            fn step(&self, by: &$t) -> Option<$t> {\n-                (*self).checked_add(*by)\n-            }\n             #[inline]\n             #[allow(trivial_numeric_casts)]\n             fn steps_between(start: &$t, end: &$t, by: &$t) -> Option<usize> {\n@@ -79,11 +69,6 @@ macro_rules! step_impl_unsigned {\n                 }\n             }\n \n-            #[inline]\n-            fn is_negative(&self) -> bool {\n-                false\n-            }\n-\n             #[inline]\n             fn replace_one(&mut self) -> Self {\n                 mem::replace(self, 1)\n@@ -117,10 +102,6 @@ macro_rules! step_impl_signed {\n                    reason = \"likely to be replaced by finer-grained traits\",\n                    issue = \"42168\")]\n         impl Step for $t {\n-            #[inline]\n-            fn step(&self, by: &$t) -> Option<$t> {\n-                (*self).checked_add(*by)\n-            }\n             #[inline]\n             #[allow(trivial_numeric_casts)]\n             fn steps_between(start: &$t, end: &$t, by: &$t) -> Option<usize> {\n@@ -150,11 +131,6 @@ macro_rules! step_impl_signed {\n                 }\n             }\n \n-            #[inline]\n-            fn is_negative(&self) -> bool {\n-                *self < 0\n-            }\n-\n             #[inline]\n             fn replace_one(&mut self) -> Self {\n                 mem::replace(self, 1)\n@@ -189,21 +165,11 @@ macro_rules! step_impl_no_between {\n                    reason = \"likely to be replaced by finer-grained traits\",\n                    issue = \"42168\")]\n         impl Step for $t {\n-            #[inline]\n-            fn step(&self, by: &$t) -> Option<$t> {\n-                (*self).checked_add(*by)\n-            }\n             #[inline]\n             fn steps_between(_a: &$t, _b: &$t, _by: &$t) -> Option<usize> {\n                 None\n             }\n \n-            #[inline]\n-            #[allow(unused_comparisons)]\n-            fn is_negative(&self) -> bool {\n-                *self < 0\n-            }\n-\n             #[inline]\n             fn replace_one(&mut self) -> Self {\n                 mem::replace(self, 1)"}]}