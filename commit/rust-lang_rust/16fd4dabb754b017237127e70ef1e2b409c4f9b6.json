{"sha": "16fd4dabb754b017237127e70ef1e2b409c4f9b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZmQ0ZGFiYjc1NGIwMTcyMzcxMjdlNzBlZjFlMmI0MDljNGY5YjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-23T18:20:30Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:56Z"}, "message": "Remove file id from item tree\n\nIt's not needed, and `source` is only used by tests anyways", "tree": {"sha": "2743ebecc714b27f75a9dfe0a488437e475010ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2743ebecc714b27f75a9dfe0a488437e475010ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16fd4dabb754b017237127e70ef1e2b409c4f9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16fd4dabb754b017237127e70ef1e2b409c4f9b6", "html_url": "https://github.com/rust-lang/rust/commit/16fd4dabb754b017237127e70ef1e2b409c4f9b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16fd4dabb754b017237127e70ef1e2b409c4f9b6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c019002d17185f4e8be54a978ab5d67bc632f518", "url": "https://api.github.com/repos/rust-lang/rust/commits/c019002d17185f4e8be54a978ab5d67bc632f518", "html_url": "https://github.com/rust-lang/rust/commit/c019002d17185f4e8be54a978ab5d67bc632f518"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "40bb78b57a58f194939d421a273c8d94c4addd68", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=16fd4dabb754b017237127e70ef1e2b409c4f9b6", "patch": "@@ -67,7 +67,6 @@ enum AttrOwner {\n /// The item tree of a source file.\n #[derive(Debug, Eq, PartialEq)]\n pub struct ItemTree {\n-    file_id: HirFileId,\n     top_level: SmallVec<[ModItem; 1]>,\n     attrs: FxHashMap<AttrOwner, Attrs>,\n     inner_items: FxHashMap<FileAstId<ast::ModuleItem>, SmallVec<[ModItem; 1]>>,\n@@ -81,7 +80,7 @@ impl ItemTree {\n         let syntax = if let Some(node) = db.parse_or_expand(file_id) {\n             node\n         } else {\n-            return Arc::new(Self::empty(file_id));\n+            return Arc::new(Self::empty());\n         };\n \n         let hygiene = Hygiene::new(db.upcast(), file_id);\n@@ -113,9 +112,8 @@ impl ItemTree {\n         Arc::new(item_tree)\n     }\n \n-    fn empty(file_id: HirFileId) -> Self {\n+    fn empty() -> Self {\n         Self {\n-            file_id,\n             top_level: Default::default(),\n             attrs: Default::default(),\n             inner_items: Default::default(),\n@@ -150,19 +148,14 @@ impl ItemTree {\n         self.inner_items.values().flatten().copied()\n     }\n \n-    pub fn source<S: ItemTreeNode>(\n-        &self,\n-        db: &dyn DefDatabase,\n-        of: FileItemTreeId<S>,\n-    ) -> S::Source {\n+    pub fn source<S: ItemTreeNode>(&self, db: &dyn DefDatabase, of: ItemTreeId<S>) -> S::Source {\n         // This unwrap cannot fail, since it has either succeeded above, or resulted in an empty\n         // ItemTree (in which case there is no valid `FileItemTreeId` to call this method with).\n-        let root = db\n-            .parse_or_expand(self.file_id)\n-            .expect(\"parse_or_expand failed on constructed ItemTree\");\n+        let root =\n+            db.parse_or_expand(of.file_id).expect(\"parse_or_expand failed on constructed ItemTree\");\n \n-        let id = self[of].ast_id();\n-        let map = db.ast_id_map(self.file_id);\n+        let id = self[of.value].ast_id();\n+        let map = db.ast_id_map(of.file_id);\n         let ptr = map.get(id);\n         ptr.to_node(&root)\n     }"}, {"sha": "3af22149d86243da79b333505d67671262ff4199", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=16fd4dabb754b017237127e70ef1e2b409c4f9b6", "patch": "@@ -42,7 +42,7 @@ pub(super) struct Ctx {\n impl Ctx {\n     pub(super) fn new(db: &dyn DefDatabase, hygiene: Hygiene, file: HirFileId) -> Self {\n         Self {\n-            tree: ItemTree::empty(file),\n+            tree: ItemTree::empty(),\n             hygiene,\n             file,\n             source_ast_id_map: db.ast_id_map(file),"}, {"sha": "179baee788cd283061b49127f12d2fce4588f36b", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=16fd4dabb754b017237127e70ef1e2b409c4f9b6", "patch": "@@ -1,6 +1,6 @@\n use super::{ItemTree, ModItem, ModKind};\n use crate::{db::DefDatabase, test_db::TestDB};\n-use hir_expand::db::AstDatabase;\n+use hir_expand::{db::AstDatabase, HirFileId, InFile};\n use insta::assert_snapshot;\n use ra_db::fixture::WithFixture;\n use ra_syntax::{ast, AstNode};\n@@ -10,37 +10,38 @@ use stdx::format_to;\n \n fn test_inner_items(ra_fixture: &str) {\n     let (db, file_id) = TestDB::with_single_file(ra_fixture);\n-    let tree = db.item_tree(file_id.into());\n-    let root = db.parse_or_expand(file_id.into()).unwrap();\n-    let ast_id_map = db.ast_id_map(file_id.into());\n+    let file_id = HirFileId::from(file_id);\n+    let tree = db.item_tree(file_id);\n+    let root = db.parse_or_expand(file_id).unwrap();\n+    let ast_id_map = db.ast_id_map(file_id);\n \n     // Traverse the item tree and collect all module/impl/trait-level items as AST nodes.\n     let mut outer_items = FxHashSet::default();\n     let mut worklist = tree.top_level_items().to_vec();\n     while let Some(item) = worklist.pop() {\n         let node: ast::ModuleItem = match item {\n-            ModItem::Import(it) => tree.source(&db, it).into(),\n-            ModItem::ExternCrate(it) => tree.source(&db, it).into(),\n-            ModItem::Function(it) => tree.source(&db, it).into(),\n-            ModItem::Struct(it) => tree.source(&db, it).into(),\n-            ModItem::Union(it) => tree.source(&db, it).into(),\n-            ModItem::Enum(it) => tree.source(&db, it).into(),\n-            ModItem::Const(it) => tree.source(&db, it).into(),\n-            ModItem::Static(it) => tree.source(&db, it).into(),\n-            ModItem::TypeAlias(it) => tree.source(&db, it).into(),\n+            ModItem::Import(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::ExternCrate(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::Function(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::Struct(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::Union(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::Enum(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::Const(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::Static(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n+            ModItem::TypeAlias(it) => tree.source(&db, InFile::new(file_id, it)).into(),\n             ModItem::Mod(it) => {\n                 if let ModKind::Inline { items } = &tree[it].kind {\n                     worklist.extend(items);\n                 }\n-                tree.source(&db, it).into()\n+                tree.source(&db, InFile::new(file_id, it)).into()\n             }\n             ModItem::Trait(it) => {\n                 worklist.extend(tree[it].items.iter().map(|item| ModItem::from(*item)));\n-                tree.source(&db, it).into()\n+                tree.source(&db, InFile::new(file_id, it)).into()\n             }\n             ModItem::Impl(it) => {\n                 worklist.extend(tree[it].items.iter().map(|item| ModItem::from(*item)));\n-                tree.source(&db, it).into()\n+                tree.source(&db, InFile::new(file_id, it)).into()\n             }\n             ModItem::MacroCall(_) => continue,\n         };"}, {"sha": "85ff26a3682cb3cae34246ebaea25ed733929783", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fd4dabb754b017237127e70ef1e2b409c4f9b6/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=16fd4dabb754b017237127e70ef1e2b409c4f9b6", "patch": "@@ -166,17 +166,17 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n         DefWithBodyId::FunctionId(it) => {\n             let loc = it.lookup(&db);\n             let tree = db.item_tree(loc.id.file_id);\n-            tree.source(&db, loc.id.value).syntax().text_range().start()\n+            tree.source(&db, loc.id).syntax().text_range().start()\n         }\n         DefWithBodyId::ConstId(it) => {\n             let loc = it.lookup(&db);\n             let tree = db.item_tree(loc.id.file_id);\n-            tree.source(&db, loc.id.value).syntax().text_range().start()\n+            tree.source(&db, loc.id).syntax().text_range().start()\n         }\n         DefWithBodyId::StaticId(it) => {\n             let loc = it.lookup(&db);\n             let tree = db.item_tree(loc.id.file_id);\n-            tree.source(&db, loc.id.value).syntax().text_range().start()\n+            tree.source(&db, loc.id).syntax().text_range().start()\n         }\n     });\n     for def in defs {"}]}