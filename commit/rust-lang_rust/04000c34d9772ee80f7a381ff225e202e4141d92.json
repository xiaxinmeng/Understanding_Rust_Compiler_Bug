{"sha": "04000c34d9772ee80f7a381ff225e202e4141d92", "node_id": "C_kwDOAAsO6NoAKDA0MDAwYzM0ZDk3NzJlZTgwZjdhMzgxZmYyMjVlMjAyZTQxNDFkOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T16:48:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T16:48:42Z"}, "message": "Auto merge of #12077 - Veykril:neither, r=Veykril\n\nminor: Remove `either` dependency from `ide_completion`\n\nbors r+", "tree": {"sha": "6b8b4e70dd0869a957b06d46d22b78be3c11ae3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b8b4e70dd0869a957b06d46d22b78be3c11ae3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04000c34d9772ee80f7a381ff225e202e4141d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04000c34d9772ee80f7a381ff225e202e4141d92", "html_url": "https://github.com/rust-lang/rust/commit/04000c34d9772ee80f7a381ff225e202e4141d92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04000c34d9772ee80f7a381ff225e202e4141d92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68694919744709385e168f5812b73e28c513b5d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/68694919744709385e168f5812b73e28c513b5d6", "html_url": "https://github.com/rust-lang/rust/commit/68694919744709385e168f5812b73e28c513b5d6"}, {"sha": "8154365b008f3b40c97543b9d5509193618499c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8154365b008f3b40c97543b9d5509193618499c7", "html_url": "https://github.com/rust-lang/rust/commit/8154365b008f3b40c97543b9d5509193618499c7"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "38d1d0cd6a0c2d657118b9a50b2c9e35925408bd", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04000c34d9772ee80f7a381ff225e202e4141d92/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/04000c34d9772ee80f7a381ff225e202e4141d92/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=04000c34d9772ee80f7a381ff225e202e4141d92", "patch": "@@ -641,7 +641,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"base_db\",\n  \"cov-mark\",\n- \"either\",\n  \"expect-test\",\n  \"hir\",\n  \"ide_db\","}, {"sha": "8d9381e09af19cec16da24538ad3e769102956b0", "filename": "crates/ide_completion/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04000c34d9772ee80f7a381ff225e202e4141d92/crates%2Fide_completion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04000c34d9772ee80f7a381ff225e202e4141d92/crates%2Fide_completion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2FCargo.toml?ref=04000c34d9772ee80f7a381ff225e202e4141d92", "patch": "@@ -13,7 +13,6 @@ doctest = false\n cov-mark = \"2.0.0-pre.1\"\n itertools = \"0.10.3\"\n rustc-hash = \"1.1.0\"\n-either = \"1.6.1\"\n once_cell = \"1.10.0\"\n smallvec = \"1.8.0\"\n "}, {"sha": "9eb9da1b1b133befd1fda546e7686462f0af7d76", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/04000c34d9772ee80f7a381ff225e202e4141d92/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04000c34d9772ee80f7a381ff225e202e4141d92/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=04000c34d9772ee80f7a381ff225e202e4141d92", "patch": "@@ -1,6 +1,5 @@\n //! Completes references after dot (fields and method calls).\n \n-use either::Either;\n use rustc_hash::FxHashSet;\n \n use crate::{context::CompletionContext, patterns::ImmediateLocation, Completions};\n@@ -20,10 +19,13 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     if matches!(ctx.completion_location, Some(ImmediateLocation::MethodCall { .. })) {\n         cov_mark::hit!(test_no_struct_field_completion_for_method_call);\n     } else {\n-        complete_fields(ctx, &receiver_ty, |field, ty| match field {\n-            Either::Left(field) => acc.add_field(ctx, None, field, &ty),\n-            Either::Right(tuple_idx) => acc.add_tuple_field(ctx, None, tuple_idx, &ty),\n-        });\n+        complete_fields(\n+            acc,\n+            ctx,\n+            &receiver_ty,\n+            |acc, field, ty| acc.add_field(ctx, None, field, &ty),\n+            |acc, field, ty| acc.add_tuple_field(ctx, None, field, &ty),\n+        );\n     }\n     complete_methods(ctx, &receiver_ty, |func| acc.add_method(ctx, func, None, None));\n }\n@@ -38,14 +40,13 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if let Some(func) = ctx.function_def.as_ref().and_then(|fn_| ctx.sema.to_def(fn_)) {\n         if let Some(self_) = func.self_param(ctx.db) {\n             let ty = self_.ty(ctx.db);\n-            complete_fields(ctx, &ty, |field, ty| match field {\n-                either::Either::Left(field) => {\n-                    acc.add_field(ctx, Some(hir::known::SELF_PARAM), field, &ty)\n-                }\n-                either::Either::Right(tuple_idx) => {\n-                    acc.add_tuple_field(ctx, Some(hir::known::SELF_PARAM), tuple_idx, &ty)\n-                }\n-            });\n+            complete_fields(\n+                acc,\n+                ctx,\n+                &ty,\n+                |acc, field, ty| acc.add_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n+                |acc, field, ty| acc.add_tuple_field(ctx, Some(hir::known::SELF_PARAM), field, &ty),\n+            );\n             complete_methods(ctx, &ty, |func| {\n                 acc.add_method(ctx, func, Some(hir::known::SELF_PARAM), None)\n             });\n@@ -54,17 +55,19 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n }\n \n fn complete_fields(\n+    acc: &mut Completions,\n     ctx: &CompletionContext,\n     receiver: &hir::Type,\n-    mut f: impl FnMut(Either<hir::Field, usize>, hir::Type),\n+    mut named_field: impl FnMut(&mut Completions, hir::Field, hir::Type),\n+    mut tuple_index: impl FnMut(&mut Completions, usize, hir::Type),\n ) {\n     for receiver in receiver.autoderef(ctx.db) {\n         for (field, ty) in receiver.fields(ctx.db) {\n-            f(Either::Left(field), ty);\n+            named_field(acc, field, ty);\n         }\n         for (i, ty) in receiver.tuple_fields(ctx.db).into_iter().enumerate() {\n             // Tuple fields are always public (tuple struct fields are handled above).\n-            f(Either::Right(i), ty);\n+            tuple_index(acc, i, ty);\n         }\n     }\n }"}]}