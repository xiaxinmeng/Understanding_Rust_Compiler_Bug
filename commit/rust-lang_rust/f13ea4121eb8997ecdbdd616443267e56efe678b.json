{"sha": "f13ea4121eb8997ecdbdd616443267e56efe678b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxM2VhNDEyMWViODk5N2VjZGJkZDYxNjQ0MzI2N2U1NmVmZTY3OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-07T01:06:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-07T01:06:15Z"}, "message": "auto merge of #4795 : catamorphism/rust/less-copy, r=catamorphism", "tree": {"sha": "8bd5abb2e9cc6536f59a86dd54c9cfb79a003737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd5abb2e9cc6536f59a86dd54c9cfb79a003737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13ea4121eb8997ecdbdd616443267e56efe678b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13ea4121eb8997ecdbdd616443267e56efe678b", "html_url": "https://github.com/rust-lang/rust/commit/f13ea4121eb8997ecdbdd616443267e56efe678b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13ea4121eb8997ecdbdd616443267e56efe678b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a", "html_url": "https://github.com/rust-lang/rust/commit/cf6c3d96fb1a7230cbdd8ebc77af30ba35b9e35a"}, {"sha": "739e5ba369cfe19da10d7adf1bcfcd14b80f52bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/739e5ba369cfe19da10d7adf1bcfcd14b80f52bb", "html_url": "https://github.com/rust-lang/rust/commit/739e5ba369cfe19da10d7adf1bcfcd14b80f52bb"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "1c6d824eb6059c94d28d816312907131618d5a89", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f13ea4121eb8997ecdbdd616443267e56efe678b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13ea4121eb8997ecdbdd616443267e56efe678b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f13ea4121eb8997ecdbdd616443267e56efe678b", "patch": "@@ -137,7 +137,7 @@ pub fn log_fn_time(ccx: @crate_ctxt, +name: ~str, start: time::Timespec,\n     ccx.stats.fn_times.push({ident: name, time: elapsed});\n }\n \n-pub fn decl_fn(llmod: ModuleRef, name: ~str, cc: lib::llvm::CallConv,\n+pub fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv,\n                llty: TypeRef) -> ValueRef {\n     let llfn: ValueRef = str::as_c_str(name, |buf| {\n         unsafe {\n@@ -150,7 +150,7 @@ pub fn decl_fn(llmod: ModuleRef, name: ~str, cc: lib::llvm::CallConv,\n     return llfn;\n }\n \n-pub fn decl_cdecl_fn(llmod: ModuleRef, +name: ~str, llty: TypeRef)\n+pub fn decl_cdecl_fn(llmod: ModuleRef, name: &str, llty: TypeRef)\n                   -> ValueRef {\n     return decl_fn(llmod, name, lib::llvm::CCallConv, llty);\n }\n@@ -164,20 +164,19 @@ pub fn decl_internal_cdecl_fn(llmod: ModuleRef, +name: ~str, llty: TypeRef) ->\n     return llfn;\n }\n \n-pub fn get_extern_fn(externs: HashMap<~str, ValueRef>,\n+pub fn get_extern_fn(externs: ExternMap,\n                      llmod: ModuleRef,\n-                     +name: ~str,\n+                     name: @str,\n                      cc: lib::llvm::CallConv,\n                      ty: TypeRef) -> ValueRef {\n     if externs.contains_key_ref(&name) { return externs.get(&name); }\n-    // XXX: Bad copy.\n-    let f = decl_fn(llmod, copy name, cc, ty);\n+    let f = decl_fn(llmod, name, cc, ty);\n     externs.insert(name, f);\n     return f;\n }\n \n-pub fn get_extern_const(externs: HashMap<~str, ValueRef>, llmod: ModuleRef,\n-                        +name: ~str, ty: TypeRef) -> ValueRef {\n+pub fn get_extern_const(externs: ExternMap, llmod: ModuleRef,\n+                        name: @str, ty: TypeRef) -> ValueRef {\n     unsafe {\n         if externs.contains_key_ref(&name) { return externs.get(&name); }\n         let c = str::as_c_str(name, |buf| {\n@@ -189,9 +188,9 @@ pub fn get_extern_const(externs: HashMap<~str, ValueRef>, llmod: ModuleRef,\n }\n \n     fn get_simple_extern_fn(cx: block,\n-                            externs: HashMap<~str, ValueRef>,\n+                            externs: ExternMap,\n                             llmod: ModuleRef,\n-                            +name: ~str,\n+                            name: @str,\n                             n_args: int) -> ValueRef {\n     let _icx = cx.insn_ctxt(\"get_simple_extern_fn\");\n     let ccx = cx.fcx.ccx;\n@@ -201,8 +200,8 @@ pub fn get_extern_const(externs: HashMap<~str, ValueRef>, llmod: ModuleRef,\n     return get_extern_fn(externs, llmod, name, lib::llvm::CCallConv, t);\n }\n \n-pub fn trans_foreign_call(cx: block, externs: HashMap<~str, ValueRef>,\n-                          llmod: ModuleRef, +name: ~str, args: ~[ValueRef]) ->\n+pub fn trans_foreign_call(cx: block, externs: ExternMap,\n+                          llmod: ModuleRef, name: @str, args: ~[ValueRef]) ->\n    ValueRef {\n     let _icx = cx.insn_ctxt(\"trans_foreign_call\");\n     let n = args.len() as int;\n@@ -474,6 +473,7 @@ pub fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id,\n         let class_ty = ty::subst_tps(tcx, substs, None,\n                           ty::lookup_item_type(tcx, parent_id).ty);\n         let llty = type_of_dtor(ccx, class_ty);\n+        let name = name.to_managed(); // :-(\n         get_extern_fn(ccx.externs, ccx.llmod, name, lib::llvm::CCallConv,\n                       llty)\n     }\n@@ -775,7 +775,7 @@ pub fn null_env_ptr(bcx: block) -> ValueRef {\n \n pub fn trans_external_path(ccx: @crate_ctxt, did: ast::def_id, t: ty::t)\n     -> ValueRef {\n-    let name = csearch::get_symbol(ccx.sess.cstore, did);\n+    let name = csearch::get_symbol(ccx.sess.cstore, did).to_managed(); // Sad\n     match ty::get(t).sty {\n       ty::ty_fn(_) => {\n         let llty = type_of_fn_from_ty(ccx, t);"}, {"sha": "f12bb0eb0a647c8a3725bec4d2fe166904200c2c", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f13ea4121eb8997ecdbdd616443267e56efe678b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13ea4121eb8997ecdbdd616443267e56efe678b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f13ea4121eb8997ecdbdd616443267e56efe678b", "patch": "@@ -152,13 +152,15 @@ pub fn BuilderRef_res(B: BuilderRef) -> BuilderRef_res {\n     }\n }\n \n+type ExternMap = HashMap<@str, ValueRef>;\n+\n // Crate context.  Every crate we compile has one of these.\n pub struct crate_ctxt {\n      sess: session::Session,\n      llmod: ModuleRef,\n      td: target_data,\n      tn: type_names,\n-     externs: HashMap<~str, ValueRef>,\n+     externs: ExternMap,\n      intrinsics: HashMap<~str, ValueRef>,\n      item_vals: HashMap<ast::node_id, ValueRef>,\n      exp_map2: resolve::ExportMap2,"}]}