{"sha": "89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YWM4NjU0ZTE5YjEyMzEzMmM4MmViOWY4MWVkM2JhOWJiM2ViMzM=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-13T20:48:49Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-04-13T20:51:05Z"}, "message": "Various consistency and phrasing fixes in std::collections' docs\n\n* Changed btree_map's and hash_map's Entry (etc.) docs to be consistent\n* Changed VecDeque's type and module summary sentences to be consistent\n  with each other as well as with other summary sentences in the module\n* Changed HashMap's and HashSet's summary sentences to be less redundantly\n  phrased and also more consistant with the other summary sentences in the\n  module\n* Also, added an example to Bound", "tree": {"sha": "202e1bc5cdc0ddbe997d2b30c6e7357aeded95f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/202e1bc5cdc0ddbe997d2b30c6e7357aeded95f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "html_url": "https://github.com/rust-lang/rust/commit/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/comments", "author": null, "committer": null, "parents": [{"sha": "d688c4d806c6272c6b7a60dbed2aa329641fbf93", "url": "https://api.github.com/repos/rust-lang/rust/commits/d688c4d806c6272c6b7a60dbed2aa329641fbf93", "html_url": "https://github.com/rust-lang/rust/commit/d688c4d806c6272c6b7a60dbed2aa329641fbf93"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "b986c0275502c41d859a9163b0e8ac376317108e", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "patch": "@@ -420,18 +420,19 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K,\n }\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n-/// This enum is constructed from the [`entry`] method on [`BTreeMap`].\n+///\n+/// This `enum` is constructed from the [`entry`] method on [`BTreeMap`].\n ///\n /// [`BTreeMap`]: struct.BTreeMap.html\n /// [`entry`]: struct.BTreeMap.html#method.entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n-    /// A vacant `Entry`\n+    /// A vacant entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n            VacantEntry<'a, K, V>),\n \n-    /// An occupied `Entry`\n+    /// An occupied entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n              OccupiedEntry<'a, K, V>),\n@@ -451,7 +452,8 @@ impl<'a, K: 'a + Debug + Ord, V: 'a + Debug> Debug for Entry<'a, K, V> {\n     }\n }\n \n-/// A vacant `Entry`. It is part of the [`Entry`] enum.\n+/// A view into a vacant entry in a `BTreeMap`.\n+/// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -473,7 +475,8 @@ impl<'a, K: 'a + Debug + Ord, V: 'a> Debug for VacantEntry<'a, K, V> {\n     }\n }\n \n-/// An occupied `Entry`. It is part of the [`Entry`] enum.\n+/// A view into an occupied entry in a `BTreeMap`.\n+/// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4ff54095bd35d0ea04c9821958ee545374359452", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "patch": "@@ -135,6 +135,23 @@ mod std {\n }\n \n /// An endpoint of a range of keys.\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::BTreeMap;\n+/// use std::collections::Bound::{Excluded, Included, Unbounded};\n+///\n+/// let mut map = BTreeMap::new();\n+/// map.insert(3, \"a\");\n+/// map.insert(5, \"b\");\n+/// map.insert(8, \"c\");\n+///\n+/// for (key, value) in map.range((Excluded(3), Included(8))) {\n+///     println!(\"{}: {}\", key, value);\n+/// }\n+///\n+/// assert_eq!(Some((&3, &\"a\")), map.range((Unbounded, Included(5))).next());\n+/// ```\n #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n pub enum Bound<T> {"}, {"sha": "2ce3b92843bd7f6570bbde6500de4fb6db78e6e9", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! `VecDeque` is a double-ended queue, which is implemented with the help of a\n-//! growing ring buffer.\n+//! A double-ended queue implemented with a growable ring buffer.\n //!\n //! This queue has `O(1)` amortized inserts and removals from both ends of the\n //! container. It also has `O(1)` indexing like a vector. The contained elements\n@@ -43,8 +42,7 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (32 - 1); // Largest possible power of\n #[cfg(target_pointer_width = \"64\")]\n const MAXIMUM_ZST_CAPACITY: usize = 1 << (64 - 1); // Largest possible power of two\n \n-/// `VecDeque` is a growable ring buffer, which can be used as a double-ended\n-/// queue efficiently.\n+/// A double-ended queue implemented with a growable ring buffer.\n ///\n /// The \"default\" usage of this type as a queue is to use [`push_back`] to add to\n /// the queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]"}, {"sha": "eacb59d375a5065885a0c884eeec45ab092cbefa", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "patch": "@@ -215,8 +215,7 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n // 1. Alfredo Viola (2005). Distributional analysis of Robin Hood linear probing\n //    hashing with buckets.\n \n-/// A hash map implementation which uses linear probing with Robin Hood bucket\n-/// stealing.\n+/// A hash map implemented with linear probing and Robin Hood bucket stealing.\n ///\n /// By default, `HashMap` uses a hashing algorithm selected to provide\n /// resistance against HashDoS attacks. The algorithm is randomly seeded, and a\n@@ -1511,19 +1510,20 @@ impl<'a, K, V> InternalEntry<K, V, &'a mut RawTable<K, V>> {\n     }\n }\n \n-/// A view into a single location in a map, which may be vacant or occupied.\n-/// This enum is constructed from the [`entry`] method on [`HashMap`].\n+/// A view into a single entry in a map, which may either be vacant or occupied.\n+///\n+/// This `enum` is constructed from the [`entry`] method on [`HashMap`].\n ///\n /// [`HashMap`]: struct.HashMap.html\n /// [`entry`]: struct.HashMap.html#method.entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n-    /// An occupied Entry.\n+    /// An occupied entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n              OccupiedEntry<'a, K, V>),\n \n-    /// A vacant Entry.\n+    /// A vacant entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n            VacantEntry<'a, K, V>),\n@@ -1547,7 +1547,7 @@ impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for Entry<'a, K, V> {\n     }\n }\n \n-/// A view into a single occupied location in a HashMap.\n+/// A view into an occupied entry in a `HashMap`.\n /// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n@@ -1567,7 +1567,7 @@ impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> {\n     }\n }\n \n-/// A view into a single empty location in a HashMap.\n+/// A view into a vacant entry in a `HashMap`.\n /// It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html"}, {"sha": "e3fad28502573a7604ca0ddbb90744098a4ce413", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "patch": "@@ -24,8 +24,7 @@ use super::map::{self, HashMap, Keys, RandomState};\n // for `bucket.val` in the case of HashSet. I suppose we would need HKT\n // to get rid of it properly.\n \n-/// An implementation of a hash set using the underlying representation of a\n-/// `HashMap` where the value is ().\n+/// A hash set implemented as a `HashMap` where the value is `()`.\n ///\n /// As with the [`HashMap`] type, a `HashSet` requires that the elements\n /// implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by"}, {"sha": "506bf717337bd824704c1233bda7a5fe8bfc8e2d", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ac8654e19b123132c82eb9f81ed3ba9bb3eb33/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=89ac8654e19b123132c82eb9f81ed3ba9bb3eb33", "patch": "@@ -442,16 +442,14 @@ mod hash;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod hash_map {\n-    //! A hash map implementation which uses linear probing with Robin\n-    //! Hood bucket stealing.\n+    //! A hash map implemented with linear probing and Robin Hood bucket stealing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::hash::map::*;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod hash_set {\n-    //! An implementation of a hash set using the underlying representation of a\n-    //! `HashMap` where the value is ().\n+    //! A hash set implemented as a `HashMap` where the value is `()`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::hash::set::*;\n }"}]}