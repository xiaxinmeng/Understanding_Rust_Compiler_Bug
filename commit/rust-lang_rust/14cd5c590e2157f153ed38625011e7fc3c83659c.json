{"sha": "14cd5c590e2157f153ed38625011e7fc3c83659c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0Y2Q1YzU5MGUyMTU3ZjE1M2VkMzg2MjUwMTFlN2ZjM2M4MzY1OWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-05T12:26:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-05T12:26:34Z"}, "message": "auto merge of #18646 : eddyb/rust/snapshots, r=alexcrichton", "tree": {"sha": "c1719bcbbafeabf8dbd4da524580dfbebc20b933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1719bcbbafeabf8dbd4da524580dfbebc20b933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14cd5c590e2157f153ed38625011e7fc3c83659c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14cd5c590e2157f153ed38625011e7fc3c83659c", "html_url": "https://github.com/rust-lang/rust/commit/14cd5c590e2157f153ed38625011e7fc3c83659c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14cd5c590e2157f153ed38625011e7fc3c83659c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98958bcaf403354dff0a390db0206e2e03336180", "url": "https://api.github.com/repos/rust-lang/rust/commits/98958bcaf403354dff0a390db0206e2e03336180", "html_url": "https://github.com/rust-lang/rust/commit/98958bcaf403354dff0a390db0206e2e03336180"}, {"sha": "56dbf3d1223bca9e02a201e43fb48895a1d5cbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/56dbf3d1223bca9e02a201e43fb48895a1d5cbd1", "html_url": "https://github.com/rust-lang/rust/commit/56dbf3d1223bca9e02a201e43fb48895a1d5cbd1"}], "stats": {"total": 370, "additions": 18, "deletions": 352}, "files": [{"sha": "013ed999b032b301371a3dfdd44bb23e2c19e363", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 153, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -250,37 +250,6 @@ pub trait UpperExp for Sized? {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-// NOTE(stage0): Remove macro after next snapshot\n-#[cfg(stage0)]\n-macro_rules! uniform_fn_call_workaround {\n-    ($( $name: ident, $trait_: ident; )*) => {\n-        $(\n-            #[doc(hidden)]\n-            pub fn $name<Sized? T: $trait_>(x: &T, fmt: &mut Formatter) -> Result {\n-                x.fmt(fmt)\n-            }\n-            )*\n-    }\n-}\n-// NOTE(stage0): Remove macro after next snapshot\n-#[cfg(stage0)]\n-uniform_fn_call_workaround! {\n-    secret_show, Show;\n-    secret_bool, Bool;\n-    secret_char, Char;\n-    secret_signed, Signed;\n-    secret_unsigned, Unsigned;\n-    secret_octal, Octal;\n-    secret_binary, Binary;\n-    secret_lower_hex, LowerHex;\n-    secret_upper_hex, UpperHex;\n-    secret_string, String;\n-    secret_pointer, Pointer;\n-    secret_float, Float;\n-    secret_lower_exp, LowerExp;\n-    secret_upper_exp, UpperExp;\n-}\n-\n static DEFAULT_ARGUMENT: rt::Argument<'static> = rt::Argument {\n     position: rt::ArgumentNext,\n     format: rt::FormatSpec {\n@@ -570,33 +539,13 @@ pub fn argument<'a, T>(f: extern \"Rust\" fn(&T, &mut Formatter) -> Result,\n \n /// When the compiler determines that the type of an argument *must* be a string\n /// (such as for select), then it invokes this method.\n-// NOTE(stage0): remove function after a snapshot\n-#[cfg(stage0)]\n-#[doc(hidden)] #[inline]\n-pub fn argumentstr<'a>(s: &'a &str) -> Argument<'a> {\n-    argument(secret_string, s)\n-}\n-\n-/// When the compiler determines that the type of an argument *must* be a string\n-/// (such as for select), then it invokes this method.\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[doc(hidden)] #[inline]\n pub fn argumentstr<'a>(s: &'a &str) -> Argument<'a> {\n     argument(String::fmt, s)\n }\n \n /// When the compiler determines that the type of an argument *must* be a uint\n /// (such as for plural), then it invokes this method.\n-// NOTE(stage0): remove function after a snapshot\n-#[cfg(stage0)]\n-#[doc(hidden)] #[inline]\n-pub fn argumentuint<'a>(s: &'a uint) -> Argument<'a> {\n-    argument(secret_unsigned, s)\n-}\n-\n-/// When the compiler determines that the type of an argument *must* be a uint\n-/// (such as for plural), then it invokes this method.\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[doc(hidden)] #[inline]\n pub fn argumentuint<'a>(s: &'a uint) -> Argument<'a> {\n     argument(Unsigned::fmt, s)\n@@ -614,15 +563,6 @@ impl<'a> Show for &'a Show+'a {\n     fn fmt(&self, f: &mut Formatter) -> Result { (*self).fmt(f) }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl Bool for bool {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        secret_string(&(if *self {\"true\"} else {\"false\"}), f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl Bool for bool {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         String::fmt(if *self { \"true\" } else { \"false\" }, f)\n@@ -641,20 +581,6 @@ impl String for str {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl Char for char {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        use char::Char;\n-\n-        let mut utf8 = [0u8, ..4];\n-        let amt = self.encode_utf8(utf8).unwrap_or(0);\n-        let s: &str = unsafe { mem::transmute(utf8[..amt]) };\n-        secret_string(&s, f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl Char for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         use char::Char;\n@@ -666,62 +592,25 @@ impl Char for char {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> Pointer for *const T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        f.flags |= 1 << (rt::FlagAlternate as uint);\n-        secret_lower_hex::<uint>(&(*self as uint), f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.flags |= 1 << (rt::FlagAlternate as uint);\n         LowerHex::fmt(&(*self as uint), f)\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> Pointer for *mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        secret_pointer::<*const T>(&(*self as *const T), f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T> Pointer for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> Pointer for &'a T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        secret_pointer::<*const T>(&(&**self as *const T), f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> Pointer for &'a T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a, T> Pointer for &'a mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        secret_pointer::<*const T>(&(&**self as *const T), f)\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a, T> Pointer for &'a mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Pointer::fmt(&(&**self as *const T), f)\n@@ -797,65 +686,23 @@ floating!(f64)\n \n // Implementation of Show for various core types\n \n-// NOTE(stage0): remove macro after a snapshot\n-#[cfg(stage0)]\n-macro_rules! delegate(($ty:ty to $other:ident) => {\n-    impl Show for $ty {\n-        fn fmt(&self, f: &mut Formatter) -> Result {\n-            (concat_idents!(secret_, $other)(self, f))\n-        }\n-    }\n-})\n-\n-// NOTE(stage0): remove these macros after a snapshot\n-#[cfg(stage0)]\n-delegate!(str to string)\n-#[cfg(stage0)]\n-delegate!(bool to bool)\n-#[cfg(stage0)]\n-delegate!(char to char)\n-#[cfg(stage0)]\n-delegate!(f32 to float)\n-#[cfg(stage0)]\n-delegate!(f64 to float)\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n macro_rules! delegate(($ty:ty to $other:ident) => {\n     impl Show for $ty {\n         fn fmt(&self, f: &mut Formatter) -> Result {\n             $other::fmt(self, f)\n         }\n     }\n })\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n delegate!(str to String)\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n delegate!(bool to Bool)\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n delegate!(char to Char)\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n delegate!(f32 to Float)\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n delegate!(f64 to Float)\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> Show for *const T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { secret_pointer(self, f) }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T> Show for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> Show for *mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { secret_pointer(self, f) }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T> Show for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }"}, {"sha": "91f95ef203c12df5cc5331615bc175ae80d9ce9d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -171,7 +171,6 @@ extern \"rust-intrinsic\" {\n     /// with optimization of surrounding code and reduce performance. It should\n     /// not be used if the invariant can be discovered by the optimizer on its\n     /// own, or if it does not enable any significant optimizations.\n-    #[cfg(not(stage0))]\n     pub fn assume(b: bool);\n \n     /// Execute a breakpoint trap, for inspection by a debugger."}, {"sha": "8d072fffb60a4eb1ce712cb208a9075255e9852c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -849,34 +849,30 @@ pub trait DerefMut<Sized? Result>: Deref<Result> {\n #[lang=\"fn\"]\n pub trait Fn<Args,Result> {\n     /// This is called when the call operator is used.\n-    #[rust_call_abi_hack]\n-    fn call(&self, args: Args) -> Result;\n+    extern \"rust-call\" fn call(&self, args: Args) -> Result;\n }\n \n /// A version of the call operator that takes a mutable receiver.\n #[lang=\"fn_mut\"]\n pub trait FnMut<Args,Result> {\n     /// This is called when the call operator is used.\n-    #[rust_call_abi_hack]\n-    fn call_mut(&mut self, args: Args) -> Result;\n+    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Result;\n }\n \n /// A version of the call operator that takes a by-value receiver.\n #[lang=\"fn_once\"]\n pub trait FnOnce<Args,Result> {\n     /// This is called when the call operator is used.\n-    #[rust_call_abi_hack]\n-    fn call_once(self, args: Args) -> Result;\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Result;\n }\n \n macro_rules! def_fn_mut(\n     ($($args:ident)*) => (\n         impl<Result$(,$args)*>\n         FnMut<($($args,)*),Result>\n         for extern \"Rust\" fn($($args: $args,)*) -> Result {\n-            #[rust_call_abi_hack]\n             #[allow(non_snake_case)]\n-            fn call_mut(&mut self, args: ($($args,)*)) -> Result {\n+            extern \"rust-call\" fn call_mut(&mut self, args: ($($args,)*)) -> Result {\n                 let ($($args,)*) = args;\n                 (*self)($($args,)*)\n             }"}, {"sha": "fd0526db411cb8f0c262f1cd67630887d8be20ee", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -33,49 +33,6 @@\n use fmt;\n use intrinsics;\n \n-// NOTE(stage0): remove after a snapshot\n-#[cfg(stage0)]\n-#[cold] #[inline(never)] // this is the slow path, always\n-#[lang=\"fail\"]\n-pub fn panic(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n-    let (expr, file, line) = *expr_file_line;\n-    let ref file_line = (file, line);\n-    format_args!(|args| -> () {\n-        panic_fmt(args, file_line);\n-    }, \"{}\", expr);\n-\n-    unsafe { intrinsics::abort() }\n-}\n-\n-// NOTE(stage0): remove after a snapshot\n-#[cfg(stage0)]\n-#[cold] #[inline(never)]\n-#[lang=\"fail_bounds_check\"]\n-fn panic_bounds_check(file_line: &(&'static str, uint),\n-                     index: uint, len: uint) -> ! {\n-    format_args!(|args| -> () {\n-        panic_fmt(args, file_line);\n-    }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n-    unsafe { intrinsics::abort() }\n-}\n-\n-// NOTE(stage0): remove after a snapshot\n-#[cfg(stage0)]\n-#[cold] #[inline(never)]\n-pub fn panic_fmt(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n-    #[allow(improper_ctypes)]\n-    extern {\n-        #[lang = \"fail_fmt\"]\n-        fn panic_impl(fmt: &fmt::Arguments, file: &'static str,\n-                        line: uint) -> !;\n-\n-    }\n-    let (file, line) = *file_line;\n-    unsafe { panic_impl(fmt, file, line) }\n-}\n-\n-// NOTE(stage0): remove cfg after a snapshot\n-#[cfg(not(stage0))]\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"panic\"]\n pub fn panic(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n@@ -88,8 +45,6 @@ pub fn panic(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     unsafe { intrinsics::abort() }\n }\n \n-// NOTE(stage0): remove cfg after a snapshot\n-#[cfg(not(stage0))]\n #[cold] #[inline(never)]\n #[lang=\"panic_bounds_check\"]\n fn panic_bounds_check(file_line: &(&'static str, uint),\n@@ -100,8 +55,6 @@ fn panic_bounds_check(file_line: &(&'static str, uint),\n     unsafe { intrinsics::abort() }\n }\n \n-// NOTE(stage0): remove cfg after a snapshot\n-#[cfg(not(stage0))]\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(improper_ctypes)]"}, {"sha": "0374a64261f02b4bee370e730d42f65350039502", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -574,20 +574,6 @@ fn convert_methods<'a,I>(ccx: &CrateCtxt,\n                     rcvr_ty_generics: &ty::Generics,\n                     rcvr_visibility: ast::Visibility)\n                     -> ty::Method {\n-        // FIXME(pcwalton): Hack until we have syntax in stage0 for snapshots.\n-        let real_abi = match container {\n-            ty::TraitContainer(trait_id) => {\n-                if ccx.tcx.lang_items.fn_trait() == Some(trait_id) ||\n-                        ccx.tcx.lang_items.fn_mut_trait() == Some(trait_id) ||\n-                        ccx.tcx.lang_items.fn_once_trait() == Some(trait_id) {\n-                    abi::RustCall\n-                } else {\n-                    m.pe_abi()\n-                }\n-            }\n-            _ => m.pe_abi(),\n-        };\n-\n         let m_ty_generics =\n             ty_generics_for_fn_or_method(\n                 ccx,\n@@ -607,7 +593,7 @@ fn convert_methods<'a,I>(ccx: &CrateCtxt,\n                                       untransformed_rcvr_ty,\n                                       m.pe_explicit_self(),\n                                       &*m.pe_fn_decl(),\n-                                      real_abi)\n+                                      m.pe_abi())\n             }\n             TraitConvertMethodContext(trait_id, trait_items) => {\n                 let tmcx = TraitMethodCtxt {\n@@ -622,7 +608,7 @@ fn convert_methods<'a,I>(ccx: &CrateCtxt,\n                                       untransformed_rcvr_ty,\n                                       m.pe_explicit_self(),\n                                       &*m.pe_fn_decl(),\n-                                      real_abi)\n+                                      m.pe_abi())\n             }\n         };\n "}, {"sha": "356273964aff9174017c526e3a68025081b88a25", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -497,14 +497,6 @@ pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n     begin_unwind_fmt(msg, &(file, line))\n }\n \n-// NOTE(stage0): remove after a snapshot\n-#[cfg(not(test))]\n-#[lang = \"fail_fmt\"]\n-pub extern fn rust_fail_begin_unwind(msg: &fmt::Arguments,\n-                                file: &'static str, line: uint) -> ! {\n-    rust_begin_unwind(msg, file, line)\n-}\n-\n /// The entry point for unwinding with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call"}, {"sha": "782ef098d81eb64052cc270da27a5cb3bbdb05c1", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -424,22 +424,6 @@ pub use core::fmt::{Argument, Arguments, write, radix, Radix, RadixFmt};\n \n #[doc(hidden)]\n pub use core::fmt::{argument, argumentstr, argumentuint};\n-// NOTE(stage0): remove these imports after a snapshot\n-#[cfg(stage0)]\n-#[doc(hidden)]\n-pub use core::fmt::{secret_show, secret_string, secret_unsigned};\n-#[cfg(stage0)]\n-#[doc(hidden)]\n-pub use core::fmt::{secret_signed, secret_lower_hex, secret_upper_hex};\n-#[cfg(stage0)]\n-#[doc(hidden)]\n-pub use core::fmt::{secret_bool, secret_char, secret_octal, secret_binary};\n-#[cfg(stage0)]\n-#[doc(hidden)]\n-pub use core::fmt::{secret_float, secret_upper_exp, secret_lower_exp};\n-#[cfg(stage0)]\n-#[doc(hidden)]\n-pub use core::fmt::{secret_pointer};\n \n /// The format function takes a precompiled format string and a list of\n /// arguments, to return the resulting formatted string."}, {"sha": "078e393eb28ed2293041cc0beeb7191e8565ee25", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -24,9 +24,6 @@ use std::fmt::Show;\n use std::rc::Rc;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-#[cfg(stage0)]\n-pub use self::TtToken as TTTok;\n-\n // FIXME #6993: in librustc, uses of \"ident\" should be replaced\n // by just \"Name\".\n "}, {"sha": "35d56440b50dbe68cc4c94c2b85b29168dddc828", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -1491,13 +1491,7 @@ mod test {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    fn mk_ident (id: &str, is_mod_name: bool) -> token::Token {\n-        token::Ident(str_to_ident(id), is_mod_name)\n-    }\n-\n     // make the identifier by looking up the string in the interner\n-    #[cfg(not(stage0))]\n     fn mk_ident(id: &str, style: token::IdentStyle) -> token::Token {\n         token::Ident(str_to_ident(id), style)\n     }"}, {"sha": "10bb9ef36250e40c9b7a85b277df08fb595989ba", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -63,7 +63,6 @@ use ast::{Visibility, WhereClause, WherePredicate};\n use ast;\n use ast_util::{as_prec, ident_to_path, operator_prec};\n use ast_util;\n-use attr;\n use codemap::{Span, BytePos, Spanned, spanned, mk_sp};\n use codemap;\n use parse;\n@@ -1262,11 +1261,6 @@ impl<'a> Parser<'a> {\n                 let vis = p.parse_visibility();\n                 let abi = if p.eat_keyword(keywords::Extern) {\n                     p.parse_opt_abi().unwrap_or(abi::C)\n-                } else if attr::contains_name(attrs.as_slice(),\n-                                              \"rust_call_abi_hack\") {\n-                    // FIXME(stage0, pcwalton): Remove this awful hack after a\n-                    // snapshot, and change to `extern \"rust-call\" fn`.\n-                    abi::RustCall\n                 } else {\n                     abi::Rust\n                 };\n@@ -4446,11 +4440,6 @@ impl<'a> Parser<'a> {\n             } else {\n                 let abi = if self.eat_keyword(keywords::Extern) {\n                     self.parse_opt_abi().unwrap_or(abi::C)\n-                } else if attr::contains_name(attrs.as_slice(),\n-                                              \"rust_call_abi_hack\") {\n-                    // FIXME(stage0, pcwalton): Remove this awful hack after a\n-                    // snapshot, and change to `extern \"rust-call\" fn`.\n-                    abi::RustCall\n                 } else {\n                     abi::Rust\n                 };"}, {"sha": "29a2f38959eed9aa263b69d10a34b919d461843c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -20,69 +20,6 @@ use std::mem;\n use std::path::BytesContainer;\n use std::rc::Rc;\n \n-// NOTE(stage0): remove these re-exports after the next snapshot\n-// (needed to allow quotations to pass stage0)\n-#[cfg(stage0)] pub use self::Plus           as PLUS;\n-#[cfg(stage0)] pub use self::Minus          as MINUS;\n-#[cfg(stage0)] pub use self::Star           as STAR;\n-#[cfg(stage0)] pub use self::Slash          as SLASH;\n-#[cfg(stage0)] pub use self::Percent        as PERCENT;\n-#[cfg(stage0)] pub use self::Caret          as CARET;\n-#[cfg(stage0)] pub use self::And            as AND;\n-#[cfg(stage0)] pub use self::Or             as OR;\n-#[cfg(stage0)] pub use self::Shl            as SHL;\n-#[cfg(stage0)] pub use self::Shr            as SHR;\n-#[cfg(stage0)] pub use self::Eq             as EQ;\n-#[cfg(stage0)] pub use self::Lt             as LT;\n-#[cfg(stage0)] pub use self::Le             as LE;\n-#[cfg(stage0)] pub use self::EqEq           as EQEQ;\n-#[cfg(stage0)] pub use self::Ne             as NE;\n-#[cfg(stage0)] pub use self::Ge             as GE;\n-#[cfg(stage0)] pub use self::Gt             as GT;\n-#[cfg(stage0)] pub use self::AndAnd         as ANDAND;\n-#[cfg(stage0)] pub use self::OrOr           as OROR;\n-#[cfg(stage0)] pub use self::Not            as NOT;\n-#[cfg(stage0)] pub use self::Tilde          as TILDE;\n-#[cfg(stage0)] pub use self::BinOp          as BINOP;\n-#[cfg(stage0)] pub use self::BinOpEq        as BINOPEQ;\n-#[cfg(stage0)] pub use self::At             as AT;\n-#[cfg(stage0)] pub use self::Dot            as DOT;\n-#[cfg(stage0)] pub use self::DotDot         as DOTDOT;\n-#[cfg(stage0)] pub use self::DotDotDot      as DOTDOTDOT;\n-#[cfg(stage0)] pub use self::Comma          as COMMA;\n-#[cfg(stage0)] pub use self::Semi           as SEMI;\n-#[cfg(stage0)] pub use self::Colon          as COLON;\n-#[cfg(stage0)] pub use self::ModSep         as MOD_SEP;\n-#[cfg(stage0)] pub use self::RArrow         as RARROW;\n-#[cfg(stage0)] pub use self::LArrow         as LARROW;\n-#[cfg(stage0)] pub use self::FatArrow       as FAT_ARROW;\n-#[cfg(stage0)] pub use self::Pound          as POUND;\n-#[cfg(stage0)] pub use self::Dollar         as DOLLAR;\n-#[cfg(stage0)] pub use self::Question       as QUESTION;\n-#[cfg(stage0)] pub use self::LitByte        as LIT_BYTE;\n-#[cfg(stage0)] pub use self::LitChar        as LIT_CHAR;\n-#[cfg(stage0)] pub use self::LitInteger     as LIT_INTEGER;\n-#[cfg(stage0)] pub use self::LitFloat       as LIT_FLOAT;\n-#[cfg(stage0)] pub use self::LitStr         as LIT_STR;\n-#[cfg(stage0)] pub use self::LitStrRaw      as LIT_STR_RAW;\n-#[cfg(stage0)] pub use self::LitBinary      as LIT_BINARY;\n-#[cfg(stage0)] pub use self::LitBinaryRaw   as LIT_BINARY_RAW;\n-#[cfg(stage0)] pub use self::Ident          as IDENT;\n-#[cfg(stage0)] pub use self::Underscore     as UNDERSCORE;\n-#[cfg(stage0)] pub use self::Lifetime       as LIFETIME;\n-#[cfg(stage0)] pub use self::Interpolated   as INTERPOLATED;\n-#[cfg(stage0)] pub use self::DocComment     as DOC_COMMENT;\n-#[cfg(stage0)] pub use self::Whitespace     as WS;\n-#[cfg(stage0)] pub use self::Comment        as COMMENT;\n-#[cfg(stage0)] pub use self::Shebang        as SHEBANG;\n-#[cfg(stage0)] pub use self::Eof            as EOF;\n-#[cfg(stage0)] pub const LPAREN:    Token = OpenDelim(Paren);\n-#[cfg(stage0)] pub const RPAREN:    Token = CloseDelim(Paren);\n-#[cfg(stage0)] pub const LBRACKET:  Token = OpenDelim(Bracket);\n-#[cfg(stage0)] pub const RBRACKET:  Token = CloseDelim(Bracket);\n-#[cfg(stage0)] pub const LBRACE:    Token = OpenDelim(Brace);\n-#[cfg(stage0)] pub const RBRACE:    Token = CloseDelim(Brace);\n-\n #[allow(non_camel_case_types)]\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n pub enum BinOpToken {\n@@ -109,15 +46,7 @@ pub enum DelimToken {\n     Brace,\n }\n \n-#[cfg(stage0)]\n-#[allow(non_upper_case_globals)]\n-pub const ModName: bool = true;\n-#[cfg(stage0)]\n-#[allow(non_upper_case_globals)]\n-pub const Plain: bool = false;\n-\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n-#[cfg(not(stage0))]\n pub enum IdentStyle {\n     /// `::` follows the identifier with no whitespace in-between.\n     ModName,\n@@ -173,9 +102,6 @@ pub enum Token {\n     LitBinaryRaw(ast::Name, uint), /* raw binary str delimited by n hash symbols */\n \n     /* Name components */\n-    #[cfg(stage0)]\n-    Ident(ast::Ident, bool),\n-    #[cfg(not(stage0))]\n     Ident(ast::Ident, IdentStyle),\n     Underscore,\n     Lifetime(ast::Ident),\n@@ -398,9 +324,6 @@ pub enum Nonterminal {\n     NtPat(P<ast::Pat>),\n     NtExpr(P<ast::Expr>),\n     NtTy(P<ast::Ty>),\n-    #[cfg(stage0)]\n-    NtIdent(Box<ast::Ident>, bool),\n-    #[cfg(not(stage0))]\n     NtIdent(Box<ast::Ident>, IdentStyle),\n     /// Stuff inside brackets for attributes\n     NtMeta(P<ast::MetaItem>),"}, {"sha": "2c32e0e1643f5275695bd2dac1277889c35c541c", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -1,3 +1,12 @@\n+S 2014-11-04 1b2ad78\n+  freebsd-x86_64 f8c41a522d6a3c9691a0865dab170dcb988e9141\n+  linux-i386 d827fbbd778b854923971873cf03bdb79c2e8575\n+  linux-x86_64 1ddca522a8ba4a4f662dc17ca16b0f50f2c15f87\n+  macos-i386 597cd42301e1569df8ad090574cd535d19283387\n+  macos-x86_64 4bfb2aff1c3e3c57653b32adc34b399c5aeb759b\n+  winnt-i386 11390f5607bf638b515931dd2f85a7245bf91581\n+  winnt-x86_64 905c34b5eeaa502fe4ad7446b3d9afb4a8d167c9\n+\n S 2014-10-22 d44ea72\n   freebsd-x86_64 8bf5ee7c1ca8ab880800cf3a535e16bb7ffbf9e8\n   linux-i386 1fc8302b405406a3fc183b23c8397bef5a56c52a"}, {"sha": "6dcdc1d1086c3c273e9c4f26f9ed74fd79fc10c6", "filename": "src/test/run-pass/issue-16739.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cd5c590e2157f153ed38625011e7fc3c83659c/src%2Ftest%2Frun-pass%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16739.rs?ref=14cd5c590e2157f153ed38625011e7fc3c83659c", "patch": "@@ -16,18 +16,15 @@\n struct Foo { foo: uint }\n \n impl FnOnce<(), uint> for Foo {\n-    #[rust_call_abi_hack]\n-    fn call_once(self, _: ()) -> uint { self.foo }\n+    extern \"rust-call\" fn call_once(self, _: ()) -> uint { self.foo }\n }\n \n impl FnOnce<(uint,), uint> for Foo {\n-    #[rust_call_abi_hack]\n-    fn call_once(self, (x,): (uint,)) -> uint { self.foo + x }\n+    extern \"rust-call\" fn call_once(self, (x,): (uint,)) -> uint { self.foo + x }\n }\n \n impl FnOnce<(uint, uint), uint> for Foo {\n-    #[rust_call_abi_hack]\n-    fn call_once(self, (x, y): (uint, uint)) -> uint { self.foo + x + y }\n+    extern \"rust-call\" fn call_once(self, (x, y): (uint, uint)) -> uint { self.foo + x + y }\n }\n \n fn main() {"}]}