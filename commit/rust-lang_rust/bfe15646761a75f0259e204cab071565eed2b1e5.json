{"sha": "bfe15646761a75f0259e204cab071565eed2b1e5", "node_id": "C_kwDOAAsO6NoAKGJmZTE1NjQ2NzYxYTc1ZjAyNTllMjA0Y2FiMDcxNTY1ZWVkMmIxZTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-22T19:26:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-22T19:26:42Z"}, "message": "Auto merge of #93202 - matthiaskrgr:rollup-rki39xg, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #85967 (add support for the l4-bender linker on the x86_64-unknown-l4re-uclibc tier 3 target)\n - #92828 (Print a helpful message if unwinding aborts when it reaches a nounwind function)\n - #93012 (Update pulldown-cmark version to fix markdown list issue)\n - #93116 (Simplify use of `map_or`)\n - #93132 (Increase the format version of rustdoc-json-types)\n - #93147 (Interner cleanups)\n - #93153 (Reject unsupported naked functions)\n - #93170 (Add missing GUI test explanations)\n - #93172 (rustdoc: remove dashed underline under main heading)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "526c09cd8b590b1ad045318c273cb3e01d6e95a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526c09cd8b590b1ad045318c273cb3e01d6e95a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe15646761a75f0259e204cab071565eed2b1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe15646761a75f0259e204cab071565eed2b1e5", "html_url": "https://github.com/rust-lang/rust/commit/bfe15646761a75f0259e204cab071565eed2b1e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe15646761a75f0259e204cab071565eed2b1e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf72996eda4f8af19b0ca7235c6f62e0245a313", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "html_url": "https://github.com/rust-lang/rust/commit/ecf72996eda4f8af19b0ca7235c6f62e0245a313"}, {"sha": "19e414a9dc99568560741c696eb67aa511385725", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e414a9dc99568560741c696eb67aa511385725", "html_url": "https://github.com/rust-lang/rust/commit/19e414a9dc99568560741c696eb67aa511385725"}], "stats": {"total": 947, "additions": 560, "deletions": 387}, "files": [{"sha": "eabbf8c987ca25ccc6c4bd65bcabcba5c30d046e", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -689,7 +689,7 @@ dependencies = [\n  \"clippy_utils\",\n  \"if_chain\",\n  \"itertools 0.10.1\",\n- \"pulldown-cmark 0.9.0\",\n+ \"pulldown-cmark\",\n  \"quine-mc_cluskey\",\n  \"regex-syntax\",\n  \"rustc-semver\",\n@@ -2186,9 +2186,9 @@ dependencies = [\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.4.14\"\n+version = \"0.4.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f6e77253c46a90eb7e96b2807201dab941a4db5ea05eca5aaaf7027395f352b3\"\n+checksum = \"241f10687eb3b4e0634b3b4e423f97c5f1efbd69dc9522e24a8b94583eeec3c6\"\n dependencies = [\n  \"ammonia\",\n  \"anyhow\",\n@@ -2201,7 +2201,7 @@ dependencies = [\n  \"log\",\n  \"memchr\",\n  \"opener\",\n- \"pulldown-cmark 0.8.0\",\n+ \"pulldown-cmark\",\n  \"regex\",\n  \"serde\",\n  \"serde_derive\",\n@@ -2865,27 +2865,16 @@ dependencies = [\n \n [[package]]\n name = \"pulldown-cmark\"\n-version = \"0.8.0\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ffade02495f22453cd593159ea2f59827aae7f53fa8323f756799b670881dcf8\"\n+checksum = \"34f197a544b0c9ab3ae46c359a7ec9cbbb5c7bf97054266fecb7ead794a181d6\"\n dependencies = [\n  \"bitflags\",\n  \"getopts\",\n  \"memchr\",\n  \"unicase\",\n ]\n \n-[[package]]\n-name = \"pulldown-cmark\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"acd16514d1af5f7a71f909a44ef253cdb712a376d7ebc8ae4a471a9be9743548\"\n-dependencies = [\n- \"bitflags\",\n- \"memchr\",\n- \"unicase\",\n-]\n-\n [[package]]\n name = \"punycode\"\n version = \"0.4.1\"\n@@ -4440,7 +4429,7 @@ dependencies = [\n  \"expect-test\",\n  \"itertools 0.9.0\",\n  \"minifier\",\n- \"pulldown-cmark 0.9.0\",\n+ \"pulldown-cmark\",\n  \"rayon\",\n  \"regex\",\n  \"rustdoc-json-types\","}, {"sha": "ec9fc22bc4d053739f942d3da6a96164f4ba38b3", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1159,6 +1159,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     LinkerFlavor::Lld(_) => \"lld\",\n                     LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n                     LinkerFlavor::BpfLinker => \"bpf-linker\",\n+                    LinkerFlavor::L4Bender => \"l4-bender\",\n                 }),\n                 flavor,\n             )),"}, {"sha": "3fb56f42b8cca9600befa67d5de5bc4f06f61f21", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 153, "deletions": 1, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -126,7 +126,6 @@ pub fn get_linker<'a>(\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n     assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n-\n     match flavor {\n         LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n             Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n@@ -149,6 +148,8 @@ pub fn get_linker<'a>(\n         LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n \n         LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n+\n+        LinkerFlavor::L4Bender => Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>,\n     }\n }\n \n@@ -1355,6 +1356,157 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n }\n \n+/// Linker shepherd script for L4Re (Fiasco)\n+pub struct L4Bender<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+    hinted_static: bool,\n+}\n+\n+impl<'a> Linker for L4Bender<'a> {\n+    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+        bug!(\"dylibs are not supported on L4Re\");\n+    }\n+    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-PC{}\", lib));\n+    }\n+    fn link_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(lib);\n+    }\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+    fn framework_path(&mut self, _: &Path) {\n+        bug!(\"frameworks are not supported on L4Re\");\n+    }\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn full_relro(&mut self) {\n+        self.cmd.arg(\"-zrelro\");\n+        self.cmd.arg(\"-znow\");\n+    }\n+\n+    fn partial_relro(&mut self) {\n+        self.cmd.arg(\"-zrelro\");\n+    }\n+\n+    fn no_relro(&mut self) {\n+        self.cmd.arg(\"-znorelro\");\n+    }\n+\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n+    fn set_output_kind(&mut self, _output_kind: LinkOutputKind, _out_filename: &Path) {}\n+\n+    fn link_rust_dylib(&mut self, _: Symbol, _: &Path) {\n+        panic!(\"Rust dylibs not supported\");\n+    }\n+\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+        bug!(\"frameworks not supported on L4Re\");\n+    }\n+\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+        self.hint_static();\n+        self.cmd.arg(\"--whole-archive\").arg(format!(\"-l{}\", lib));\n+        self.cmd.arg(\"--no-whole-archive\");\n+    }\n+\n+    fn link_whole_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(\"--whole-archive\").arg(lib).arg(\"--no-whole-archive\");\n+    }\n+\n+    fn gc_sections(&mut self, keep_metadata: bool) {\n+        if !keep_metadata {\n+            self.cmd.arg(\"--gc-sections\");\n+        }\n+    }\n+\n+    fn no_gc_sections(&mut self) {\n+        self.cmd.arg(\"--no-gc-sections\");\n+    }\n+\n+    fn optimize(&mut self) {\n+        // GNU-style linkers support optimization with -O. GNU ld doesn't\n+        // need a numeric argument, but other linkers do.\n+        if self.sess.opts.optimize == config::OptLevel::Default\n+            || self.sess.opts.optimize == config::OptLevel::Aggressive\n+        {\n+            self.cmd.arg(\"-O1\");\n+        }\n+    }\n+\n+    fn pgo_gen(&mut self) {}\n+\n+    fn debuginfo(&mut self, strip: Strip) {\n+        match strip {\n+            Strip::None => {}\n+            Strip::Debuginfo => {\n+                self.cmd().arg(\"--strip-debug\");\n+            }\n+            Strip::Symbols => {\n+                self.cmd().arg(\"--strip-all\");\n+            }\n+        }\n+    }\n+\n+    fn no_default_libraries(&mut self) {\n+        self.cmd.arg(\"-nostdlib\");\n+    }\n+\n+    fn export_symbols(&mut self, _: &Path, _: CrateType, _: &[String]) {\n+        // ToDo, not implemented, copy from GCC\n+        self.sess.warn(\"exporting symbols not implemented yet for L4Bender\");\n+        return;\n+    }\n+\n+    fn subsystem(&mut self, subsystem: &str) {\n+        self.cmd.arg(&format!(\"--subsystem {}\", subsystem));\n+    }\n+\n+    fn reset_per_library_state(&mut self) {\n+        self.hint_static(); // Reset to default before returning the composed command line.\n+    }\n+\n+    fn group_start(&mut self) {\n+        self.cmd.arg(\"--start-group\");\n+    }\n+\n+    fn group_end(&mut self) {\n+        self.cmd.arg(\"--end-group\");\n+    }\n+\n+    fn linker_plugin_lto(&mut self) {}\n+\n+    fn control_flow_guard(&mut self) {}\n+\n+    fn no_crt_objects(&mut self) {}\n+}\n+\n+impl<'a> L4Bender<'a> {\n+    pub fn new(cmd: Command, sess: &'a Session) -> L4Bender<'a> {\n+        L4Bender { cmd: cmd, sess: sess, hinted_static: false }\n+    }\n+\n+    fn hint_static(&mut self) {\n+        if !self.hinted_static {\n+            self.cmd.arg(\"-static\");\n+            self.hinted_static = true;\n+        }\n+    }\n+}\n+\n pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n         return exports.clone();"}, {"sha": "b1a76b80002db8486ee6a7f3c09d18f8975b750b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -477,6 +477,28 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n+    fn codegen_abort_terminator(\n+        &mut self,\n+        helper: TerminatorCodegenHelper<'tcx>,\n+        mut bx: Bx,\n+        terminator: &mir::Terminator<'tcx>,\n+    ) {\n+        let span = terminator.source_info.span;\n+        self.set_debug_loc(&mut bx, terminator.source_info);\n+\n+        // Get the location information.\n+        let location = self.get_caller_location(&mut bx, terminator.source_info).immediate();\n+\n+        // Obtain the panic entry point.\n+        let def_id = common::langcall(bx.tcx(), Some(span), \"\", LangItem::PanicNoUnwind);\n+        let instance = ty::Instance::mono(bx.tcx(), def_id);\n+        let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n+        let llfn = bx.get_fn_addr(instance);\n+\n+        // Codegen the actual panic invoke/call.\n+        helper.do_call(self, &mut bx, fn_abi, llfn, &[location], None, None);\n+    }\n+\n     /// Returns `true` if this is indeed a panic intrinsic and codegen is done.\n     fn codegen_panic_intrinsic(\n         &mut self,\n@@ -1014,10 +1036,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::TerminatorKind::Resume => self.codegen_resume_terminator(helper, bx),\n \n             mir::TerminatorKind::Abort => {\n-                bx.abort();\n-                // `abort` does not terminate the block, so we still need to generate\n-                // an `unreachable` terminator after it.\n-                bx.unreachable();\n+                self.codegen_abort_terminator(helper, bx, terminator);\n             }\n \n             mir::TerminatorKind::Goto { target } => {"}, {"sha": "d4b12d00f1ff6d8f231bccb6bf819fac9e563683", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -486,6 +486,7 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n E0784: include_str!(\"./error_codes/E0784.md\"),\n E0785: include_str!(\"./error_codes/E0785.md\"),\n E0786: include_str!(\"./error_codes/E0786.md\"),\n+E0787: include_str!(\"./error_codes/E0787.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "cee5082927026627abb0c67d2d596cb214ecf110", "filename": "compiler/rustc_error_codes/src/error_codes/E0787.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0787.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0787.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0787.md?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -0,0 +1,28 @@\n+An unsupported naked function definition.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0787\n+#![feature(naked_functions)]\n+\n+#[naked]\n+pub extern \"C\" fn f() -> u32 {\n+    42\n+}\n+```\n+\n+The naked functions must be defined using a single inline assembly\n+block.\n+\n+The execution must never fall through past the end of the assembly\n+code so the block must use `noreturn` option. The asm block can also\n+use `att_syntax` and `raw` options, but others options are not allowed.\n+\n+The asm block must not contain any operands other than `const` and\n+`sym`.\n+\n+### Additional information\n+\n+For more information, please see [RFC 2972].\n+\n+[RFC 2972]: https://github.com/rust-lang/rfcs/blob/master/text/2972-constrained-naked.md"}, {"sha": "be4849d0b846e1064ac31b36617a4e74db93b1f4", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -283,6 +283,7 @@ language_item_table! {\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n+    PanicNoUnwind,           sym::panic_no_unwind,     panic_no_unwind,            Target::Fn,             GenericRequirement::Exact(0);\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n "}, {"sha": "dde47c1e4c43b5ebca01ec1029df887a0ab46768", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -481,6 +481,11 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n          <https://github.com/rust-lang/rust/issues/59014> for more information\",\n     );\n     store.register_removed(\"plugin_as_library\", \"plugins have been deprecated and retired\");\n+    store.register_removed(\n+        \"unsupported_naked_functions\",\n+        \"converted into hard error, see RFC 2972 \\\n+         <https://github.com/rust-lang/rfcs/blob/master/text/2972-constrained-naked.md> for more information\",\n+    );\n }\n \n fn register_internals(store: &mut LintStore) {"}, {"sha": "4096815c6a42631b0a530c615400cebce0e87862", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -2759,52 +2759,6 @@ declare_lint! {\n     \"undefined naked function ABI\"\n }\n \n-declare_lint! {\n-    /// The `unsupported_naked_functions` lint detects naked function\n-    /// definitions that are unsupported but were previously accepted.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust\n-    /// #![feature(naked_functions)]\n-    ///\n-    /// #[naked]\n-    /// pub extern \"C\" fn f() -> u32 {\n-    ///     42\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// The naked functions must be defined using a single inline assembly\n-    /// block.\n-    ///\n-    /// The execution must never fall through past the end of the assembly\n-    /// code so the block must use `noreturn` option. The asm block can also\n-    /// use `att_syntax` option, but other options are not allowed.\n-    ///\n-    /// The asm block must not contain any operands other than `const` and\n-    /// `sym`. Additionally, naked function should specify a non-Rust ABI.\n-    ///\n-    /// Naked functions cannot be inlined. All forms of the `inline` attribute\n-    /// are prohibited.\n-    ///\n-    /// While other definitions of naked functions were previously accepted,\n-    /// they are unsupported and might not work reliably. This is a\n-    /// [future-incompatible] lint that will transition into hard error in\n-    /// the future.\n-    ///\n-    /// [future-incompatible]: ../index.md#future-incompatible-lints\n-    pub UNSUPPORTED_NAKED_FUNCTIONS,\n-    Warn,\n-    \"unsupported naked function definitions\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #32408 <https://github.com/rust-lang/rust/issues/32408>\",\n-    };\n-}\n-\n declare_lint! {\n     /// The `ineffective_unstable_trait_impl` lint detects `#[unstable]` attributes which are not used.\n     ///\n@@ -3070,7 +3024,6 @@ declare_lint_pass! {\n         UNINHABITED_STATIC,\n         FUNCTION_ITEM_REFERENCES,\n         USELESS_DEPRECATED,\n-        UNSUPPORTED_NAKED_FUNCTIONS,\n         MISSING_ABI,\n         INVALID_DOC_ATTRIBUTES,\n         SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,"}, {"sha": "f613cd0d4503b7ebdaf220afa40543922a4497d3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 52, "deletions": 44, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -113,6 +113,12 @@ pub struct CtxtInterners<'tcx> {\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, Layout>,\n     adt_def: InternedSet<'tcx, AdtDef>,\n+\n+    /// `#[stable]` and `#[unstable]` attributes\n+    stability: InternedSet<'tcx, attr::Stability>,\n+\n+    /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes\n+    const_stability: InternedSet<'tcx, attr::ConstStability>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -134,6 +140,8 @@ impl<'tcx> CtxtInterners<'tcx> {\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n             adt_def: Default::default(),\n+            stability: Default::default(),\n+            const_stability: Default::default(),\n         }\n     }\n \n@@ -1035,12 +1043,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,\n \n-    /// `#[stable]` and `#[unstable]` attributes\n-    stability_interner: ShardedHashMap<&'tcx attr::Stability, ()>,\n-\n-    /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes\n-    const_stability_interner: ShardedHashMap<&'tcx attr::ConstStability, ()>,\n-\n     /// Stores memory for globals (statics/consts).\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n \n@@ -1092,16 +1094,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.create_memory_alloc(alloc)\n     }\n \n-    // FIXME(eddyb) move to `direct_interners!`.\n-    pub fn intern_stability(self, stab: attr::Stability) -> &'tcx attr::Stability {\n-        self.stability_interner.intern(stab, |stab| self.arena.alloc(stab))\n-    }\n-\n-    // FIXME(eddyb) move to `direct_interners!`.\n-    pub fn intern_const_stability(self, stab: attr::ConstStability) -> &'tcx attr::ConstStability {\n-        self.const_stability_interner.intern(stab, |stab| self.arena.alloc(stab))\n-    }\n-\n     /// Returns a range of the start/end indices specified with the\n     /// `rustc_layout_scalar_valid_range` attribute.\n     // FIXME(eddyb) this is an awkward spot for this method, maybe move it?\n@@ -1185,8 +1177,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             evaluation_cache: Default::default(),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n-            stability_interner: Default::default(),\n-            const_stability_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             output_filenames: Arc::new(output_filenames),\n         }\n@@ -1952,11 +1942,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n                 writeln!(fmt, \"InternalSubsts interner: #{}\", self.0.interners.substs.len())?;\n                 writeln!(fmt, \"Region interner: #{}\", self.0.interners.region.len())?;\n-                writeln!(fmt, \"Stability interner: #{}\", self.0.stability_interner.len())?;\n+                writeln!(fmt, \"Stability interner: #{}\", self.0.interners.stability.len())?;\n                 writeln!(\n                     fmt,\n                     \"Const Stability interner: #{}\",\n-                    self.0.const_stability_interner.len()\n+                    self.0.interners.const_stability.len()\n                 )?;\n                 writeln!(\n                     fmt,\n@@ -1973,24 +1963,37 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-/// An entry in an interner.\n+// This type holds a `T` in the interner. The `T` is stored in the arena and\n+// this type just holds a pointer to it, but it still effectively owns it. It\n+// impls `Borrow` so that it can be looked up using the original\n+// (non-arena-memory-owning) types.\n struct Interned<'tcx, T: ?Sized>(&'tcx T);\n \n impl<'tcx, T: 'tcx + ?Sized> Clone for Interned<'tcx, T> {\n     fn clone(&self) -> Self {\n         Interned(self.0)\n     }\n }\n+\n impl<'tcx, T: 'tcx + ?Sized> Copy for Interned<'tcx, T> {}\n \n impl<'tcx, T: 'tcx + ?Sized> IntoPointer for Interned<'tcx, T> {\n     fn into_pointer(&self) -> *const () {\n         self.0 as *const _ as *const ()\n     }\n }\n-// N.B., an `Interned<Ty>` compares and hashes as a `TyKind`.\n+\n+#[allow(rustc::usage_of_ty_tykind)]\n+impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n+        &self.0.kind()\n+    }\n+}\n+\n impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {\n+        // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n+        // `x == y`.\n         self.0.kind() == other.0.kind()\n     }\n }\n@@ -1999,19 +2002,21 @@ impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}\n \n impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind().hash(s)\n     }\n }\n \n-#[allow(rustc::usage_of_ty_tykind)]\n-impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n-        &self.0.kind()\n+impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n+        &self.0.kind\n     }\n }\n-// N.B., an `Interned<PredicateInner>` compares and hashes as a `PredicateKind`.\n+\n impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {\n+        // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n+        // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n@@ -2020,19 +2025,21 @@ impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}\n \n impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)\n     }\n }\n \n-impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n-        &self.0.kind\n+impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {\n+    fn borrow<'a>(&'a self) -> &'a [T] {\n+        &self.0[..]\n     }\n }\n \n-// N.B., an `Interned<List<T>>` compares and hashes as its elements.\n impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {\n     fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {\n+        // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n+        // `x == y`.\n         self.0[..] == other.0[..]\n     }\n }\n@@ -2041,20 +2048,23 @@ impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}\n \n impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0[..].hash(s)\n     }\n }\n \n-impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {\n-    fn borrow<'a>(&'a self) -> &'a [T] {\n-        &self.0[..]\n-    }\n-}\n-\n macro_rules! direct_interners {\n     ($($name:ident: $method:ident($ty:ty),)+) => {\n-        $(impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n+        $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {\n+            fn borrow<'a>(&'a self) -> &'a $ty {\n+                &self.0\n+            }\n+        }\n+\n+        impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n             fn eq(&self, other: &Self) -> bool {\n+                // The `Borrow` trait requires that `x.borrow() == y.borrow()`\n+                // equals `x == y`.\n                 self.0 == other.0\n             }\n         }\n@@ -2063,16 +2073,12 @@ macro_rules! direct_interners {\n \n         impl<'tcx> Hash for Interned<'tcx, $ty> {\n             fn hash<H: Hasher>(&self, s: &mut H) {\n+                // The `Borrow` trait requires that `x.borrow().hash(s) ==\n+                // x.hash(s)`.\n                 self.0.hash(s)\n             }\n         }\n \n-        impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {\n-            fn borrow<'a>(&'a self) -> &'a $ty {\n-                &self.0\n-            }\n-        }\n-\n         impl<'tcx> TyCtxt<'tcx> {\n             pub fn $method(self, v: $ty) -> &'tcx $ty {\n                 self.interners.$name.intern(v, |v| {\n@@ -2089,6 +2095,8 @@ direct_interners! {\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),\n     adt_def: intern_adt_def(AdtDef),\n+    stability: intern_stability(attr::Stability),\n+    const_stability: intern_const_stability(attr::ConstStability),\n }\n \n macro_rules! slice_interners {"}, {"sha": "8ed1533436ed1f18273bbae747b699cc5eea4da8", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -376,15 +376,28 @@ pub struct CReaderCacheKey {\n     pub pos: usize,\n }\n \n+/// Represents a type.\n+///\n+/// IMPORTANT: Every `TyS` is *required* to have unique contents. The type's\n+/// correctness relies on this, *but it does not enforce it*. Therefore, any\n+/// code that creates a `TyS` must ensure uniqueness itself. In practice this\n+/// is achieved by interning.\n #[allow(rustc::usage_of_ty_tykind)]\n pub struct TyS<'tcx> {\n     /// This field shouldn't be used directly and may be removed in the future.\n     /// Use `TyS::kind()` instead.\n     kind: TyKind<'tcx>,\n+\n+    /// This field provides fast access to information that is also contained\n+    /// in `kind`.\n+    ///\n     /// This field shouldn't be used directly and may be removed in the future.\n     /// Use `TyS::flags()` instead.\n     flags: TypeFlags,\n \n+    /// This field provides fast access to information that is also contained\n+    /// in `kind`.\n+    ///\n     /// This is a kind of confusing thing: it stores the smallest\n     /// binder such that\n     ///\n@@ -436,13 +449,17 @@ impl<'tcx> PartialOrd for TyS<'tcx> {\n impl<'tcx> PartialEq for TyS<'tcx> {\n     #[inline]\n     fn eq(&self, other: &TyS<'tcx>) -> bool {\n+        // Pointer equality implies equality (due to the unique contents\n+        // assumption).\n         ptr::eq(self, other)\n     }\n }\n impl<'tcx> Eq for TyS<'tcx> {}\n \n impl<'tcx> Hash for TyS<'tcx> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n+        // Pointer hashing is sufficient (due to the unique contents\n+        // assumption).\n         (self as *const TyS<'_>).hash(s)\n     }\n }"}, {"sha": "f7cd95785ea8df7886283ad1a0bcfb0b192c5b80", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -418,7 +418,7 @@ impl BasicCoverageBlockData {\n     pub fn take_edge_counters(\n         &mut self,\n     ) -> Option<impl Iterator<Item = (BasicCoverageBlock, CoverageKind)>> {\n-        self.edge_from_bcbs.take().map_or(None, |m| Some(m.into_iter()))\n+        self.edge_from_bcbs.take().map(|m| m.into_iter())\n     }\n \n     pub fn id(&self) -> String {"}, {"sha": "7f13da5d38f870c6757400306b95ef62d2e4a423", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -807,10 +807,18 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(create_fn_mono_item(tcx, instance, source));\n                 }\n             }\n+            mir::TerminatorKind::Abort { .. } => {\n+                let instance = Instance::mono(\n+                    tcx,\n+                    tcx.require_lang_item(LangItem::PanicNoUnwind, Some(source)),\n+                );\n+                if should_codegen_locally(tcx, &instance) {\n+                    self.output.push(create_fn_mono_item(tcx, instance, source));\n+                }\n+            }\n             mir::TerminatorKind::Goto { .. }\n             | mir::TerminatorKind::SwitchInt { .. }\n             | mir::TerminatorKind::Resume\n-            | mir::TerminatorKind::Abort\n             | mir::TerminatorKind::Return\n             | mir::TerminatorKind::Unreachable => {}\n             mir::TerminatorKind::GeneratorDrop"}, {"sha": "00a93ccc9aa09d793c4524ab3fe5e0fa9363eeee", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,14 +1,14 @@\n //! Checks validity of naked functions.\n \n use rustc_ast::{Attribute, InlineAsmOptions};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{FnKind, Visitor};\n use rustc_hir::{ExprKind, HirId, InlineAsmOperand, StmtKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::UNDEFINED_NAKED_FUNCTION_ABI;\n-use rustc_session::lint::builtin::UNSUPPORTED_NAKED_FUNCTIONS;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n@@ -64,18 +64,16 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n             check_abi(self.tcx, hir_id, fn_header.abi, ident_span);\n             check_no_patterns(self.tcx, body.params);\n             check_no_parameters_use(self.tcx, body);\n-            check_asm(self.tcx, hir_id, body, span);\n-            check_inline(self.tcx, hir_id, attrs);\n+            check_asm(self.tcx, body, span);\n+            check_inline(self.tcx, attrs);\n         }\n     }\n }\n \n /// Check that the function isn't inlined.\n-fn check_inline(tcx: TyCtxt<'_>, hir_id: HirId, attrs: &[Attribute]) {\n+fn check_inline(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n     for attr in attrs.iter().filter(|attr| attr.has_name(sym::inline)) {\n-        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, attr.span, |lint| {\n-            lint.build(\"naked functions cannot be inlined\").emit();\n-        });\n+        tcx.sess.struct_span_err(attr.span, \"naked functions cannot be inlined\").emit();\n     }\n }\n \n@@ -146,31 +144,31 @@ impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n }\n \n /// Checks that function body contains a single inline assembly block.\n-fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n+fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n     let mut this = CheckInlineAssembly { tcx, items: Vec::new() };\n     this.visit_body(body);\n     if let [(ItemKind::Asm, _)] = this.items[..] {\n         // Ok.\n     } else {\n-        tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, fn_span, |lint| {\n-            let mut diag = lint.build(\"naked functions must contain a single asm block\");\n-            let mut has_asm = false;\n-            for &(kind, span) in &this.items {\n-                match kind {\n-                    ItemKind::Asm if has_asm => {\n-                        diag.span_label(\n-                            span,\n-                            \"multiple asm blocks are unsupported in naked functions\",\n-                        );\n-                    }\n-                    ItemKind::Asm => has_asm = true,\n-                    ItemKind::NonAsm => {\n-                        diag.span_label(span, \"non-asm is unsupported in naked functions\");\n-                    }\n+        let mut diag = struct_span_err!(\n+            tcx.sess,\n+            fn_span,\n+            E0787,\n+            \"naked functions must contain a single asm block\"\n+        );\n+        let mut has_asm = false;\n+        for &(kind, span) in &this.items {\n+            match kind {\n+                ItemKind::Asm if has_asm => {\n+                    diag.span_label(span, \"multiple asm blocks are unsupported in naked functions\");\n+                }\n+                ItemKind::Asm => has_asm = true,\n+                ItemKind::NonAsm => {\n+                    diag.span_label(span, \"non-asm is unsupported in naked functions\");\n                 }\n             }\n-            diag.emit();\n-        });\n+        }\n+        diag.emit();\n     }\n }\n \n@@ -221,7 +219,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n \n             ExprKind::InlineAsm(ref asm) => {\n                 self.items.push((ItemKind::Asm, span));\n-                self.check_inline_asm(expr.hir_id, asm, span);\n+                self.check_inline_asm(asm, span);\n             }\n \n             ExprKind::DropTemps(..) | ExprKind::Block(..) | ExprKind::Err => {\n@@ -230,7 +228,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n         }\n     }\n \n-    fn check_inline_asm(&self, hir_id: HirId, asm: &'tcx hir::InlineAsm<'tcx>, span: Span) {\n+    fn check_inline_asm(&self, asm: &'tcx hir::InlineAsm<'tcx>, span: Span) {\n         let unsupported_operands: Vec<Span> = asm\n             .operands\n             .iter()\n@@ -243,18 +241,17 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n             })\n             .collect();\n         if !unsupported_operands.is_empty() {\n-            self.tcx.struct_span_lint_hir(\n-                UNSUPPORTED_NAKED_FUNCTIONS,\n-                hir_id,\n+            struct_span_err!(\n+                self.tcx.sess,\n                 unsupported_operands,\n-                |lint| {\n-                    lint.build(\"only `const` and `sym` operands are supported in naked functions\")\n-                        .emit();\n-                },\n-            );\n+                E0787,\n+                \"only `const` and `sym` operands are supported in naked functions\",\n+            )\n+            .emit();\n         }\n \n         let unsupported_options: Vec<&'static str> = [\n+            (InlineAsmOptions::MAY_UNWIND, \"`may_unwind`\"),\n             (InlineAsmOptions::NOMEM, \"`nomem`\"),\n             (InlineAsmOptions::NOSTACK, \"`nostack`\"),\n             (InlineAsmOptions::PRESERVES_FLAGS, \"`preserves_flags`\"),\n@@ -266,19 +263,24 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n         .collect();\n \n         if !unsupported_options.is_empty() {\n-            self.tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, span, |lint| {\n-                lint.build(&format!(\n-                    \"asm options unsupported in naked functions: {}\",\n-                    unsupported_options.join(\", \")\n-                ))\n-                .emit();\n-            });\n+            struct_span_err!(\n+                self.tcx.sess,\n+                span,\n+                E0787,\n+                \"asm options unsupported in naked functions: {}\",\n+                unsupported_options.join(\", \")\n+            )\n+            .emit();\n         }\n \n         if !asm.options.contains(InlineAsmOptions::NORETURN) {\n-            self.tcx.struct_span_lint_hir(UNSUPPORTED_NAKED_FUNCTIONS, hir_id, span, |lint| {\n-                lint.build(\"asm in naked functions must use `noreturn` option\").emit();\n-            });\n+            struct_span_err!(\n+                self.tcx.sess,\n+                span,\n+                E0787,\n+                \"asm in naked functions must use `noreturn` option\"\n+            )\n+            .emit();\n         }\n     }\n }"}, {"sha": "a756de4c0fc453b7035f87e42d482d13dea18b4e", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::abi::{Align, TargetDataLayout};\n-use rustc_target::spec::{SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n+use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n \n use rustc_serialize::json;\n \n@@ -2237,6 +2237,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n+    if cg.linker_flavor == Some(LinkerFlavor::L4Bender)\n+        && !nightly_options::is_unstable_enabled(matches)\n+    {\n+        early_error(\n+            error_format,\n+            \"`l4-bender` linker flavor is unstable, `-Z unstable-options` \\\n+             flag must also be passed to explicitly use it\",\n+        );\n+    }\n+\n     let prints = collect_print_requests(&mut cg, &mut debugging_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "9870c90f2ec94363bb6780927cd631cbb9f6051e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -990,6 +990,7 @@ symbols! {\n         panic_implementation,\n         panic_info,\n         panic_location,\n+        panic_no_unwind,\n         panic_runtime,\n         panic_str,\n         panic_unwind,"}, {"sha": "9e7973f63a9709b0d707990efe4520fd066d4e58", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,25 +1,14 @@\n use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n-//use std::process::Command;\n-\n-// Use GCC to locate code for crt* libraries from the host, not from L4Re. Note\n-// that a few files also come from L4Re, for these, the function shouldn't be\n-// used. This uses GCC for the location of the file, but GCC is required for L4Re anyway.\n-//fn get_path_or(filename: &str) -> String {\n-//    let child = Command::new(\"gcc\")\n-//        .arg(format!(\"-print-file-name={}\", filename)).output()\n-//        .expect(\"Failed to execute GCC\");\n-//    String::from_utf8(child.stdout)\n-//        .expect(\"Couldn't read path from GCC\").trim().into()\n-//}\n+use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".to_string(),\n         env: \"uclibc\".to_string(),\n-        linker_flavor: LinkerFlavor::Ld,\n+        linker_flavor: LinkerFlavor::L4Bender,\n         executables: true,\n         panic_strategy: PanicStrategy::Abort,\n-        linker: Some(\"ld\".to_string()),\n+        linker: Some(\"l4-bender\".to_string()),\n         linker_is_gnu: false,\n         families: vec![\"unix\".to_string()],\n         ..Default::default()"}, {"sha": "4effb8bacf6d6cfc01e57aa22e48b5330506da98", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -90,6 +90,7 @@ mod windows_uwp_msvc_base;\n pub enum LinkerFlavor {\n     Em,\n     Gcc,\n+    L4Bender,\n     Ld,\n     Msvc,\n     Lld(LldFlavor),\n@@ -160,6 +161,7 @@ macro_rules! flavor_mappings {\n flavor_mappings! {\n     ((LinkerFlavor::Em), \"em\"),\n     ((LinkerFlavor::Gcc), \"gcc\"),\n+    ((LinkerFlavor::L4Bender), \"l4-bender\"),\n     ((LinkerFlavor::Ld), \"ld\"),\n     ((LinkerFlavor::Msvc), \"msvc\"),\n     ((LinkerFlavor::PtxLinker), \"ptx-linker\"),"}, {"sha": "64c7c1c5f6fbea3759f58b47f080e7a4cc5de61f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,9 +1,12 @@\n-use crate::spec::Target;\n+use crate::spec::{PanicStrategy, Target};\n \n pub fn target() -> Target {\n     let mut base = super::l4re_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n+    base.crt_static_allows_dylibs = false;\n+    base.dynamic_linking = false;\n+    base.panic_strategy = PanicStrategy::Abort;\n \n     Target {\n         llvm_target: \"x86_64-unknown-l4re-uclibc\".to_string(),"}, {"sha": "405224f8fb0b095f03947a1f31020939c6ad9bd2", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -31,6 +31,7 @@ pub struct PanicInfo<'a> {\n     payload: &'a (dyn Any + Send),\n     message: Option<&'a fmt::Arguments<'a>>,\n     location: &'a Location<'a>,\n+    can_unwind: bool,\n }\n \n impl<'a> PanicInfo<'a> {\n@@ -44,9 +45,10 @@ impl<'a> PanicInfo<'a> {\n     pub fn internal_constructor(\n         message: Option<&'a fmt::Arguments<'a>>,\n         location: &'a Location<'a>,\n+        can_unwind: bool,\n     ) -> Self {\n         struct NoPayload;\n-        PanicInfo { location, message, payload: &NoPayload }\n+        PanicInfo { location, message, payload: &NoPayload, can_unwind }\n     }\n \n     #[unstable(\n@@ -127,6 +129,18 @@ impl<'a> PanicInfo<'a> {\n         // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.\n         Some(&self.location)\n     }\n+\n+    /// Returns whether the panic handler is allowed to unwind the stack from\n+    /// the point where the panic occurred.\n+    ///\n+    /// This is true for most kinds of panics with the exception of panics\n+    /// caused by trying to unwind out of a `Drop` implementation or a function\n+    /// whose ABI does not support unwinding.\n+    #[must_use]\n+    #[unstable(feature = \"panic_can_unwind\", issue = \"92988\")]\n+    pub fn can_unwind(&self) -> bool {\n+        self.can_unwind\n+    }\n }\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]"}, {"sha": "5078eea07a15c5499daff9c0fa50d9982407c83b", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -77,6 +77,31 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[track_caller]\n+#[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n+fn panic_no_unwind() -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        super::intrinsics::abort()\n+    }\n+\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    // that gets resolved to the `#[panic_handler]` function.\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n+    }\n+\n+    // PanicInfo with the `can_unwind` flag set to false forces an abort.\n+    let fmt = format_args!(\"panic in a function that cannot unwind\");\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), false);\n+\n+    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n+    unsafe { panic_impl(&pi) }\n+}\n+\n /// The entry point for panicking with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call\n@@ -104,7 +129,7 @@ pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;\n     }\n \n-    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller());\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), true);\n \n     // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n     unsafe { panic_impl(&pi) }"}, {"sha": "7f05c82ac284bdfc9c279c8ff0f4a221a3235464", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -39,6 +39,10 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"hermit\")] {\n         #[path = \"hermit.rs\"]\n         mod real_imp;\n+    } else if #[cfg(target_os = \"l4re\")] {\n+        // L4Re is unix family but does not yet support unwinding.\n+        #[path = \"dummy.rs\"]\n+        mod real_imp;\n     } else if #[cfg(target_env = \"msvc\")] {\n         #[path = \"seh.rs\"]\n         mod real_imp;"}, {"sha": "489d362be427660e6a5e864104128de066ab2a22", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -311,6 +311,7 @@\n #![feature(once_cell)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n+#![feature(panic_can_unwind)]\n #![feature(panic_unwind)]\n #![feature(pin_static_ref)]\n #![feature(portable_simd)]"}, {"sha": "83ab13c963dc55f6dc6ebe3aeb7f38d736c7249d", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -576,9 +576,14 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n     let msg = info.message().unwrap(); // The current implementation always returns Some\n     crate::sys_common::backtrace::__rust_end_short_backtrace(move || {\n         if let Some(msg) = msg.as_str() {\n-            rust_panic_with_hook(&mut StrPanicPayload(msg), info.message(), loc);\n+            rust_panic_with_hook(&mut StrPanicPayload(msg), info.message(), loc, info.can_unwind());\n         } else {\n-            rust_panic_with_hook(&mut PanicPayload::new(msg), info.message(), loc);\n+            rust_panic_with_hook(\n+                &mut PanicPayload::new(msg),\n+                info.message(),\n+                loc,\n+                info.can_unwind(),\n+            );\n         }\n     })\n }\n@@ -602,7 +607,7 @@ pub const fn begin_panic<M: Any + Send>(msg: M) -> ! {\n \n     let loc = Location::caller();\n     return crate::sys_common::backtrace::__rust_end_short_backtrace(move || {\n-        rust_panic_with_hook(&mut PanicPayload::new(msg), None, loc)\n+        rust_panic_with_hook(&mut PanicPayload::new(msg), None, loc, true)\n     });\n \n     struct PanicPayload<A> {\n@@ -647,6 +652,7 @@ fn rust_panic_with_hook(\n     payload: &mut dyn BoxMeUp,\n     message: Option<&fmt::Arguments<'_>>,\n     location: &Location<'_>,\n+    can_unwind: bool,\n ) -> ! {\n     let (must_abort, panics) = panic_count::increase();\n \n@@ -663,14 +669,14 @@ fn rust_panic_with_hook(\n         } else {\n             // Unfortunately, this does not print a backtrace, because creating\n             // a `Backtrace` will allocate, which we must to avoid here.\n-            let panicinfo = PanicInfo::internal_constructor(message, location);\n+            let panicinfo = PanicInfo::internal_constructor(message, location, can_unwind);\n             rtprintpanic!(\"{}\\npanicked after panic::always_abort(), aborting.\\n\", panicinfo);\n         }\n-        intrinsics::abort()\n+        crate::sys::abort_internal();\n     }\n \n     unsafe {\n-        let mut info = PanicInfo::internal_constructor(message, location);\n+        let mut info = PanicInfo::internal_constructor(message, location, can_unwind);\n         let _guard = HOOK_LOCK.read();\n         match HOOK {\n             // Some platforms (like wasm) know that printing to stderr won't ever actually\n@@ -691,13 +697,13 @@ fn rust_panic_with_hook(\n         };\n     }\n \n-    if panics > 1 {\n+    if panics > 1 || !can_unwind {\n         // If a thread panics while it's already unwinding then we\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n         rtprintpanic!(\"thread panicked while panicking. aborting.\\n\");\n-        intrinsics::abort()\n+        crate::sys::abort_internal();\n     }\n \n     rust_panic(payload)"}, {"sha": "560c62155d9312b91de398ff19be6e06cf5539fe", "filename": "library/std/src/sys/unix/process/process_unix/tests.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -53,5 +53,10 @@ fn test_command_fork_no_unwind() {\n     let status = got.expect(\"panic unexpectedly propagated\");\n     dbg!(status);\n     let signal = status.signal().expect(\"expected child process to die of signal\");\n-    assert!(signal == libc::SIGABRT || signal == libc::SIGILL || signal == libc::SIGTRAP);\n+    assert!(\n+        signal == libc::SIGABRT\n+            || signal == libc::SIGILL\n+            || signal == libc::SIGTRAP\n+            || signal == libc::SIGSEGV\n+    );\n }"}, {"sha": "836cf3cd56a05250cae68ef11f0b8b36c9b0d044", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -150,7 +150,6 @@ h1.fqn {\n \tdisplay: flex;\n \tflex-wrap: wrap;\n \tjustify-content: space-between;\n-\tborder-bottom: 1px dashed #DDDDDD;\n \tpadding-bottom: 6px;\n \tmargin-bottom: 15px;\n }"}, {"sha": "600833664be5ed5ce0b08fb5394df609636865c4", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -8,6 +8,9 @@ use std::path::PathBuf;\n \n use serde::{Deserialize, Serialize};\n \n+/// rustdoc format-version.\n+pub const FORMAT_VERSION: u32 = 10;\n+\n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n /// tools to find or link to them.\n@@ -517,8 +520,5 @@ pub struct Static {\n     pub expr: String,\n }\n \n-/// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 9;\n-\n #[cfg(test)]\n mod tests;"}, {"sha": "51c7a0c615d00d321c39578ade27990b55d5879b", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,42 +1,32 @@\n // compile-flags: -C no-prepopulate-passes\n+// needs-asm-support\n+// only-x86_64\n \n #![crate_type = \"lib\"]\n #![feature(naked_functions)]\n+use std::arch::asm;\n \n // CHECK: Function Attrs: naked\n // CHECK-NEXT: define{{.*}}void @naked_empty()\n #[no_mangle]\n #[naked]\n-pub fn naked_empty() {\n+pub unsafe extern \"C\" fn naked_empty() {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: ret void\n+    // CHECK-NEXT: call void asm\n+    // CHECK-NEXT: unreachable\n+    asm!(\"ret\",\n+         options(noreturn));\n }\n \n // CHECK: Function Attrs: naked\n+// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i64 %a, i64 %b)\n #[no_mangle]\n #[naked]\n-// CHECK-NEXT: define{{.*}}void @naked_with_args(i{{[0-9]+( %a)?}})\n-pub fn naked_with_args(a: isize) {\n+pub unsafe extern \"C\" fn naked_with_args_and_return(a: isize, b: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK: ret void\n-}\n-\n-// CHECK: Function Attrs: naked\n-// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_return()\n-#[no_mangle]\n-#[naked]\n-pub fn naked_with_return() -> isize {\n-    // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: ret i{{[0-9]+}} 0\n-    0\n-}\n-\n-// CHECK: Function Attrs: naked\n-// CHECK-NEXT: define{{.*}}i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+( %a)?}})\n-#[no_mangle]\n-#[naked]\n-pub fn naked_with_args_and_return(a: isize) -> isize {\n-    // CHECK-NEXT: {{.+}}:\n-    // CHECK: ret i{{[0-9]+}} 0\n-    0\n+    // CHECK-NEXT: call void asm\n+    // CHECK-NEXT: unreachable\n+    asm!(\"lea rax, [rdi + rsi]\",\n+         \"ret\",\n+         options(noreturn));\n }"}, {"sha": "13bc139ecd05a50039bf60ae7d62bafead9dd8c2", "filename": "src/test/codegen/naked-noinline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -7,7 +7,6 @@\n \n use std::arch::asm;\n \n-#[inline(always)]\n #[naked]\n #[no_mangle]\n pub unsafe extern \"C\" fn f() {"}, {"sha": "f238741e599f68242616ecbaf5150baf0d13a842", "filename": "src/test/codegen/unwind-and-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -9,7 +9,7 @@ extern \"C-unwind\" {\n \n // CHECK: Function Attrs:{{.*}}nounwind\n // CHECK-NEXT: define{{.*}}void @foo\n-// CHECK: call void @llvm.trap()\n+// CHECK: call void @_ZN4core9panicking15panic_no_unwind\n #[no_mangle]\n pub unsafe extern \"C\" fn foo() {\n     bar();"}, {"sha": "3bed7a0a03ea5a786e764882b2e88140f6d76152", "filename": "src/test/rustdoc-gui/check_info_sign_position.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck_info_sign_position.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,5 @@\n+// This test checks the position of the information on the code blocks (like\n+// `compile_fail` or `ignore`).\n goto: file://|DOC_PATH|/test_docs/index.html\n goto: ./fn.check_list_code_block.html\n // If the codeblock is the first element of the docblock, the information tooltip must have"}, {"sha": "1818f0dbcdf418fdf01d7aa76baa84d9fb36cc14", "filename": "src/test/rustdoc-gui/code-sidebar-toggle.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// This test checks that the source code pages sidebar toggle is working as expected.\n goto: file://|DOC_PATH|/test_docs/index.html\n click: \".srclink\"\n wait-for: \"#sidebar-toggle\""}, {"sha": "9cff12f3e41315954aa2401721fa25d532de5b9f", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,5 @@\n+// This test ensures that the \"Escape\" shortcut is handled correctly based on the\n+// current content displayed.\n goto: file://|DOC_PATH|/test_docs/index.html\n // First, we check that the search results are hidden when the Escape key is pressed.\n write: (\".search-input\", \"test\")"}, {"sha": "5f29fde6689bf0bdb48868996c85863ac7cad716", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,5 +1,5 @@\n-goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // This test checks that the font weight is correctly applied.\n+goto: file://|DOC_PATH|/lib2/struct.Foo.html\n assert-css: (\"//*[@class='docblock item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\n     \"//*[@class='structfield small-section-header']//a[text()='Alias']\","}, {"sha": "4f75b5841ee5e2aca545583cab1fdf33be24a04b", "filename": "src/test/rustdoc-gui/huge-collection-of-constants.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,7 +1,7 @@\n-goto: file://|DOC_PATH|/test_docs/huge_amount_of_consts/index.html\n-\n // Make sure that the last two entries are more than 12 pixels apart and not stacked on each other.\n \n+goto: file://|DOC_PATH|/test_docs/huge_amount_of_consts/index.html\n+\n compare-elements-position-near-false: (\n     \"//*[@class='item-table']//div[last()-1]\",\n     \"//*[@class='item-table']//div[last()-3]\","}, {"sha": "eba1a662b9fa85bdd33a381363eac8bc2f7f2fab", "filename": "src/test/rustdoc-gui/list_code_block.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// This test checks that code blocks in list are supported.\n goto: file://|DOC_PATH|/test_docs/index.html\n goto: ./fn.check_list_code_block.html\n assert: (\"pre.rust.fn\")"}, {"sha": "98ca40512ee3c319f0737699fcffa0eb6ef3490a", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks that the crate search filtering is handled correctly and changes the results.\n goto: file://|DOC_PATH|/test_docs/index.html\n show-text: true\n write: (\".search-input\", \"test\")"}, {"sha": "872df5fc3f95b9dc4d869c0dac832ad3647f3475", "filename": "src/test/rustdoc-gui/search-result-colors.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks that the result colors are as expected.\n goto: file://|DOC_PATH|/test_docs/index.html\n // We set the theme so we're sure that the correct values will be used, whatever the computer\n // this test is running on."}, {"sha": "823ea67b1b0554f0210730f9bf00311cbfca18a1", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks that the search results have the expected width.\n goto: file://|DOC_PATH|/test_docs/index.html\n size: (900, 1000)\n write: (\".search-input\", \"test\")"}, {"sha": "8b50c5c5e1a5b3eee4712780ec962572facf11db", "filename": "src/test/rustdoc-gui/search-result-keyword.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-keyword.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks that the \"keyword\" results have the expected text alongside them.\n goto: file://|DOC_PATH|/test_docs/index.html\n write: (\".search-input\", \"CookieMonster\")\n // Waiting for the search results to appear..."}, {"sha": "52b3ceae7b115ae09186d12cb9a38a60cf02dd55", "filename": "src/test/rustdoc-gui/search-tab-selection-if-current-is-empty.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,5 @@\n+// Checks that the first non-empty search result tab is selected if the default/currently selected\n+// one is empty.\n goto: file://|DOC_PATH|/test_docs/index.html\n write: (\".search-input\", \"Foo\")\n // Waiting for the search results to appear..."}, {"sha": "c7abe896be1d1234902ec22afa1b74481fa11d0b", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks multiple things on the sidebar display (width of its elements, colors, etc).\n goto: file://|DOC_PATH|/test_docs/index.html\n show-text: true\n local-storage: {\"rustdoc-theme\": \"light\"}"}, {"sha": "375ff4878e5257e1262fe55ebb85953256a19168", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks that the interactions with the source code pages are workined as expected.\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n // Check that we can click on the line number.\n click: \".line-numbers > span:nth-child(4)\" // This is the span for line 4."}, {"sha": "60d089ffa37587db122cb160b08dcd966d56d34d", "filename": "src/test/rustdoc-gui/theme-change.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Ensures that the theme change is working as expected.\n goto: file://|DOC_PATH|/test_docs/index.html\n click: \"#theme-picker\"\n click: \"#theme-choices > button:first-child\""}, {"sha": "b502692300113120be7d128b5f04b066a5688c8d", "filename": "src/test/rustdoc-gui/toggle-docs-mobile.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,5 @@\n+// Checks that the documentation toggles on mobile have the correct position, style and work\n+// as expected.\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n size: (433, 600)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})"}, {"sha": "480d6242ac611790c39f0c208cdb749095e6bd8a", "filename": "src/test/rustdoc-gui/toggle-docs.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks that the documentation toggles have the correct position, style and work as expected.\n goto: file://|DOC_PATH|/test_docs/index.html\n assert-attribute: (\"#main-content > details.top-doc\", {\"open\": \"\"})\n assert-text: (\"#toggle-all-docs\", \"[\u2212]\")"}, {"sha": "38942baa0b5974c6926807455882bad64c21b2bc", "filename": "src/test/rustdoc-gui/trait-sidebar-item-order.goml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,3 +1,4 @@\n+// Checks that the elements in the sidebar are alphabetically sorted.\n goto: file://|DOC_PATH|/test_docs/trait.AnotherOne.html\n assert-text: (\".sidebar-links a:nth-of-type(1)\", \"another\")\n assert-text: (\".sidebar-links a:nth-of-type(2)\", \"func1\")"}, {"sha": "5b4293972ea215e592277c85eda2960a289c580a", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 28, "deletions": 43, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -5,7 +5,7 @@\n \n #![feature(naked_functions)]\n #![feature(or_patterns)]\n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const, asm_sym, asm_unwind)]\n #![crate_type = \"lib\"]\n \n use std::arch::asm;\n@@ -32,8 +32,7 @@ pub unsafe extern \"C\" fn patterns(\n \n #[naked]\n pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     a + 1\n     //~^ ERROR referencing function parameters is not allowed in naked functions\n }\n@@ -42,21 +41,18 @@ pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n pub unsafe extern \"C\" fn inc_asm(a: u32) -> u32 {\n     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n     //~^ ERROR referencing function parameters is not allowed in naked functions\n-    //~| WARN only `const` and `sym` operands are supported in naked functions\n-    //~| WARN this was previously accepted\n+    //~| ERROR only `const` and `sym` operands are supported in naked functions\n }\n \n #[naked]\n pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     (|| a + 1)()\n }\n \n #[naked]\n pub unsafe extern \"C\" fn unsupported_operands() {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     let mut a = 0usize;\n     let mut b = 0usize;\n     let mut c = 0usize;\n@@ -65,11 +61,9 @@ pub unsafe extern \"C\" fn unsupported_operands() {\n     const F: usize = 0usize;\n     static G: usize = 0usize;\n     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n-         //~^ WARN asm in naked functions must use `noreturn` option\n-         //~| WARN this was previously accepted\n+         //~^ ERROR asm in naked functions must use `noreturn` option\n          in(reg) a,\n-         //~^ WARN only `const` and `sym` operands are supported in naked functions\n-         //~| WARN this was previously accepted\n+         //~^ ERROR only `const` and `sym` operands are supported in naked functions\n          inlateout(reg) b,\n          inout(reg) c,\n          lateout(reg) d,\n@@ -81,31 +75,25 @@ pub unsafe extern \"C\" fn unsupported_operands() {\n \n #[naked]\n pub extern \"C\" fn missing_assembly() {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n }\n \n #[naked]\n pub extern \"C\" fn too_many_asm_blocks() {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n+    //~^ ERROR naked functions must contain a single asm block\n     asm!(\"\");\n-    //~^ WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm in naked functions must use `noreturn` option\n     asm!(\"\");\n-    //~^ WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm in naked functions must use `noreturn` option\n     asm!(\"\");\n-    //~^ WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm in naked functions must use `noreturn` option\n     asm!(\"\", options(noreturn));\n }\n \n pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n     #[naked]\n     pub extern \"C\" fn inner(y: usize) -> usize {\n-        //~^ WARN naked functions must contain a single asm block\n-        //~| WARN this was previously accepted\n+        //~^ ERROR naked functions must contain a single asm block\n         *&y\n         //~^ ERROR referencing function parameters is not allowed in naked functions\n     }\n@@ -115,18 +103,21 @@ pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n #[naked]\n unsafe extern \"C\" fn invalid_options() {\n     asm!(\"\", options(nomem, preserves_flags, noreturn));\n-    //~^ WARN asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-    //~| WARN this was previously accepted\n+    //~^ ERROR asm options unsupported in naked functions: `nomem`, `preserves_flags`\n }\n \n #[naked]\n unsafe extern \"C\" fn invalid_options_continued() {\n     asm!(\"\", options(readonly, nostack), options(pure));\n     //~^ ERROR asm with the `pure` option must have at least one output\n-    //~| WARN asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-    //~| WARN this was previously accepted\n-    //~| WARN asm in naked functions must use `noreturn` option\n-    //~| WARN this was previously accepted\n+    //~| ERROR asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n+    //~| ERROR asm in naked functions must use `noreturn` option\n+}\n+\n+#[naked]\n+unsafe extern \"C\" fn invalid_may_unwind() {\n+    asm!(\"\", options(noreturn, may_unwind));\n+    //~^ ERROR asm options unsupported in naked functions: `may_unwind`\n }\n \n #[naked]\n@@ -177,38 +168,32 @@ pub unsafe extern \"C\" fn inline_none() {\n \n #[naked]\n #[inline]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_hint() {\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n #[inline(always)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_always() {\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n #[inline(never)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_never() {\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n #[inline]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n #[inline(always)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n #[inline(never)]\n-//~^ WARN naked functions cannot be inlined\n-//~| WARN this was previously accepted\n+//~^ ERROR naked functions cannot be inlined\n pub unsafe extern \"C\" fn inline_all() {\n     asm!(\"\", options(noreturn));\n }"}, {"sha": "c1dcc433db6c6b3ce7bae11fa679cff03d73e348", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 59, "deletions": 122, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe15646761a75f0259e204cab071565eed2b1e5/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=bfe15646761a75f0259e204cab071565eed2b1e5", "patch": "@@ -1,5 +1,5 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:124:14\n+  --> $DIR/naked-functions.rs:111:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n@@ -29,66 +29,54 @@ LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:37:5\n+  --> $DIR/naked-functions.rs:36:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n-warning: naked functions must contain a single asm block\n+error[E0787]: naked functions must contain a single asm block\n   --> $DIR/naked-functions.rs:34:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n-LL | |\n LL | |     a + 1\n    | |     ----- non-asm is unsupported in naked functions\n LL | |\n LL | | }\n    | |_^\n-   |\n-   = note: `#[warn(unsupported_naked_functions)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:43:31\n+  --> $DIR/naked-functions.rs:42:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n-warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:43:23\n+error[E0787]: only `const` and `sym` operands are supported in naked functions\n+  --> $DIR/naked-functions.rs:42:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:50:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:48:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n-LL | |\n LL | |     (|| a + 1)()\n    | |     ------------ non-asm is unsupported in naked functions\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:70:10\n+error[E0787]: only `const` and `sym` operands are supported in naked functions\n+  --> $DIR/naked-functions.rs:65:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n-...\n+LL |\n LL |          inlateout(reg) b,\n    |          ^^^^^^^^^^^^^^^^\n LL |          inout(reg) c,\n@@ -97,31 +85,24 @@ LL |          lateout(reg) d,\n    |          ^^^^^^^^^^^^^^\n LL |          out(reg) e,\n    |          ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:67:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:63:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n-LL | |\n LL | |          in(reg) a,\n+LL | |\n ...  |\n LL | |          sym G,\n LL | |     );\n    | |_____^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:57:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:54:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n-LL | |\n LL | |     let mut a = 0usize;\n    | |     ------------------- non-asm is unsupported in naked functions\n LL | |     let mut b = 0usize;\n@@ -136,188 +117,144 @@ LL | |     let mut e = 0usize;\n LL | |     );\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:83:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:77:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n-LL | |\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:92:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:84:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:95:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:86:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:98:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:88:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:89:1\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:82:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n-LL | |\n LL | |     asm!(\"\");\n-...  |\n+LL | |\n LL | |     asm!(\"\");\n    | |     -------- multiple asm blocks are unsupported in naked functions\n-...  |\n+LL | |\n LL | |     asm!(\"\");\n    | |     -------- multiple asm blocks are unsupported in naked functions\n-...  |\n+LL | |\n LL | |     asm!(\"\", options(noreturn));\n    | |     --------------------------- multiple asm blocks are unsupported in naked functions\n LL | | }\n    | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:109:11\n+  --> $DIR/naked-functions.rs:97:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:106:5\n+error[E0787]: naked functions must contain a single asm block\n+  --> $DIR/naked-functions.rs:95:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n-LL | |\n LL | |         *&y\n    | |         --- non-asm is unsupported in naked functions\n LL | |\n LL | |     }\n    | |_____^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:117:5\n+error[E0787]: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n+  --> $DIR/naked-functions.rs:105:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:124:5\n+error[E0787]: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n+  --> $DIR/naked-functions.rs:111:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:124:5\n+error[E0787]: asm in naked functions must use `noreturn` option\n+  --> $DIR/naked-functions.rs:111:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0787]: asm options unsupported in naked functions: `may_unwind`\n+  --> $DIR/naked-functions.rs:119:5\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n+LL |     asm!(\"\", options(noreturn, may_unwind));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:133:15\n+  --> $DIR/naked-functions.rs:124:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:139:15\n+  --> $DIR/naked-functions.rs:130:15\n    |\n LL | pub unsafe fn rust_abi() {\n    |               ^^^^^^^^\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:179:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:170:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:187:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:177:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:195:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:184:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:203:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:191:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:206:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:193:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:209:1\n+error: naked functions cannot be inlined\n+  --> $DIR/naked-functions.rs:195:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-error: aborting due to 8 previous errors; 23 warnings emitted\n+error: aborting due to 30 previous errors; 2 warnings emitted\n \n+For more information about this error, try `rustc --explain E0787`."}]}