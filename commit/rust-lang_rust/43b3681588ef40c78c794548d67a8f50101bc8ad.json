{"sha": "43b3681588ef40c78c794548d67a8f50101bc8ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYjM2ODE1ODhlZjQwYzc4Yzc5NDU0OGQ2N2E4ZjUwMTAxYmM4YWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-21T19:55:54Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-25T18:00:18Z"}, "message": "Fix a rebasing issue and addressed reviewer comment", "tree": {"sha": "75efb7c6bfd12d46f48fbca9c5b007938602489e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75efb7c6bfd12d46f48fbca9c5b007938602489e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43b3681588ef40c78c794548d67a8f50101bc8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43b3681588ef40c78c794548d67a8f50101bc8ad", "html_url": "https://github.com/rust-lang/rust/commit/43b3681588ef40c78c794548d67a8f50101bc8ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43b3681588ef40c78c794548d67a8f50101bc8ad/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff009d1d3606e98b210fb423802cd3711fc82ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff009d1d3606e98b210fb423802cd3711fc82ee6", "html_url": "https://github.com/rust-lang/rust/commit/ff009d1d3606e98b210fb423802cd3711fc82ee6"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "973fd65beb3d88031936d271563ede90c60465e4", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/43b3681588ef40c78c794548d67a8f50101bc8ad/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b3681588ef40c78c794548d67a8f50101bc8ad/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=43b3681588ef40c78c794548d67a8f50101bc8ad", "patch": "@@ -267,20 +267,28 @@ impl InlinedItem {\n \n // FIXME: find a better place for this?\n pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let say = |s: &str| {\n-        match (sp, sess) {\n-            (_, None) => panic!(\"{}\", s),\n-            (Some(sp), Some(sess)) => sess.span_fatal(sp, s),\n-            (None, Some(sess)) => sess.fatal(s),\n+    let mut err_count = 0;\n+    {\n+        let mut say = |s: &str| {\n+            match (sp, sess) {\n+                (_, None) => panic!(\"{}\", s),\n+                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+                (None, Some(sess)) => sess.err(s),\n+            }\n+            err_count += 1;\n+        };\n+        if s.is_empty() {\n+            say(\"crate name must not be empty\");\n+        }\n+        for c in s.chars() {\n+            if c.is_alphanumeric() { continue }\n+            if c == '_'  { continue }\n+            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n         }\n-    };\n-    if s.is_empty() {\n-        say(\"crate name must not be empty\");\n     }\n-    for c in s.chars() {\n-        if c.is_alphanumeric() { continue }\n-        if c == '_'  { continue }\n-        say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n+\n+    if err_count > 0 {\n+        sess.unwrap().abort_if_errors();\n     }\n }\n "}, {"sha": "c698f72955320b6b033a58967fc82ba2d80dda89", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43b3681588ef40c78c794548d67a8f50101bc8ad/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b3681588ef40c78c794548d67a8f50101bc8ad/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=43b3681588ef40c78c794548d67a8f50101bc8ad", "patch": "@@ -3038,7 +3038,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                           record_used: bool)\n                           -> Option<LocalDef> {\n         if identifier.name == special_idents::invalid.name {\n-            return Some(LocalDef::from_def(DefErr));\n+            return Some(LocalDef::from_def(Def::Err));\n         }\n \n         // First, check to see whether the name is a primitive type."}]}