{"sha": "f82d230081e256865c1f93162efc64bbcd4f8582", "node_id": "C_kwDOAAsO6NoAKGY4MmQyMzAwODFlMjU2ODY1YzFmOTMxNjJlZmM2NGJiY2Q0Zjg1ODI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-15T19:25:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-15T19:25:44Z"}, "message": "Simplify", "tree": {"sha": "7a822a682825466535f0a5da227521a106bd9d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a822a682825466535f0a5da227521a106bd9d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82d230081e256865c1f93162efc64bbcd4f8582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82d230081e256865c1f93162efc64bbcd4f8582", "html_url": "https://github.com/rust-lang/rust/commit/f82d230081e256865c1f93162efc64bbcd4f8582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82d230081e256865c1f93162efc64bbcd4f8582/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17691ee974c8eee31b24c59fae7123dfc5486ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/17691ee974c8eee31b24c59fae7123dfc5486ef6", "html_url": "https://github.com/rust-lang/rust/commit/17691ee974c8eee31b24c59fae7123dfc5486ef6"}], "stats": {"total": 117, "additions": 59, "deletions": 58}, "files": [{"sha": "537d7c66774136f38fd43b8b48a76771d40da608", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 59, "deletions": 58, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/f82d230081e256865c1f93162efc64bbcd4f8582/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82d230081e256865c1f93162efc64bbcd4f8582/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=f82d230081e256865c1f93162efc64bbcd4f8582", "patch": "@@ -413,39 +413,70 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    fn err_ty(&self) -> Ty {\n-        self.result.standard_types.unknown.clone()\n-    }\n+    fn resolve_all(self) -> InferenceResult {\n+        let InferenceContext { mut table, mut result, .. } = self;\n \n-    fn resolve_all(mut self) -> InferenceResult {\n         // FIXME resolve obligations as well (use Guidance if necessary)\n-        self.table.resolve_obligations_as_possible();\n+        table.resolve_obligations_as_possible();\n \n         // make sure diverging type variables are marked as such\n-        self.table.propagate_diverging_flag();\n-        let mut result = std::mem::take(&mut self.result);\n+        table.propagate_diverging_flag();\n         for ty in result.type_of_expr.values_mut() {\n-            *ty = self.table.resolve_completely(ty.clone());\n+            *ty = table.resolve_completely(ty.clone());\n         }\n         for ty in result.type_of_pat.values_mut() {\n-            *ty = self.table.resolve_completely(ty.clone());\n+            *ty = table.resolve_completely(ty.clone());\n         }\n         for mismatch in result.type_mismatches.values_mut() {\n-            mismatch.expected = self.table.resolve_completely(mismatch.expected.clone());\n-            mismatch.actual = self.table.resolve_completely(mismatch.actual.clone());\n+            mismatch.expected = table.resolve_completely(mismatch.expected.clone());\n+            mismatch.actual = table.resolve_completely(mismatch.actual.clone());\n         }\n         for (_, subst) in result.method_resolutions.values_mut() {\n-            *subst = self.table.resolve_completely(subst.clone());\n+            *subst = table.resolve_completely(subst.clone());\n         }\n         for adjustment in result.expr_adjustments.values_mut().flatten() {\n-            adjustment.target = self.table.resolve_completely(adjustment.target.clone());\n+            adjustment.target = table.resolve_completely(adjustment.target.clone());\n         }\n         for adjustment in result.pat_adjustments.values_mut().flatten() {\n-            adjustment.target = self.table.resolve_completely(adjustment.target.clone());\n+            adjustment.target = table.resolve_completely(adjustment.target.clone());\n         }\n         result\n     }\n \n+    fn collect_const(&mut self, data: &ConstData) {\n+        self.return_ty = self.make_ty(&data.type_ref);\n+    }\n+\n+    fn collect_static(&mut self, data: &StaticData) {\n+        self.return_ty = self.make_ty(&data.type_ref);\n+    }\n+\n+    fn collect_fn(&mut self, data: &FunctionData) {\n+        let body = Arc::clone(&self.body); // avoid borrow checker problem\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n+            .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n+        let param_tys =\n+            data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n+        for (ty, pat) in param_tys.into_iter().zip(body.params.iter()) {\n+            let ty = self.insert_type_vars(ty);\n+            let ty = self.normalize_associated_types_in(ty);\n+\n+            self.infer_pat(*pat, &ty, BindingMode::default());\n+        }\n+        let error_ty = &TypeRef::Error;\n+        let return_ty = if data.has_async_kw() {\n+            data.async_ret_type.as_deref().unwrap_or(error_ty)\n+        } else {\n+            &*data.ret_type\n+        };\n+        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n+        self.return_ty = return_ty;\n+    }\n+\n+    fn infer_body(&mut self) {\n+        self.infer_expr_coerce(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n+    }\n+\n     fn write_expr_ty(&mut self, expr: ExprId, ty: Ty) {\n         self.result.type_of_expr.insert(expr, ty);\n     }\n@@ -491,6 +522,10 @@ impl<'a> InferenceContext<'a> {\n         self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Disallowed)\n     }\n \n+    fn err_ty(&self) -> Ty {\n+        self.result.standard_types.unknown.clone()\n+    }\n+\n     /// Replaces ConstScalar::Unknown by a new type var, so we can maybe still infer it.\n     fn insert_const_vars_shallow(&mut self, c: Const) -> Const {\n         let data = c.data(Interner);\n@@ -544,6 +579,16 @@ impl<'a> InferenceContext<'a> {\n         self.table.unify(ty1, ty2)\n     }\n \n+    /// Recurses through the given type, normalizing associated types mentioned\n+    /// in it by replacing them by type variables and registering obligations to\n+    /// resolve later. This should be done once for every type we get from some\n+    /// type annotation (e.g. from a let type annotation, field type or function\n+    /// call). `make_ty` handles this already, but e.g. for field types we need\n+    /// to do it as well.\n+    fn normalize_associated_types_in(&mut self, ty: Ty) -> Ty {\n+        self.table.normalize_associated_types_in(ty)\n+    }\n+\n     fn resolve_ty_shallow(&mut self, ty: &Ty) -> Ty {\n         self.resolve_obligations_as_possible();\n         self.table.resolve_ty_shallow(ty)\n@@ -586,16 +631,6 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    /// Recurses through the given type, normalizing associated types mentioned\n-    /// in it by replacing them by type variables and registering obligations to\n-    /// resolve later. This should be done once for every type we get from some\n-    /// type annotation (e.g. from a let type annotation, field type or function\n-    /// call). `make_ty` handles this already, but e.g. for field types we need\n-    /// to do it as well.\n-    fn normalize_associated_types_in(&mut self, ty: Ty) -> Ty {\n-        self.table.normalize_associated_types_in(ty)\n-    }\n-\n     fn resolve_variant(&mut self, path: Option<&Path>, value_ns: bool) -> (Ty, Option<VariantId>) {\n         let path = match path {\n             Some(path) => path,\n@@ -727,40 +762,6 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    fn collect_const(&mut self, data: &ConstData) {\n-        self.return_ty = self.make_ty(&data.type_ref);\n-    }\n-\n-    fn collect_static(&mut self, data: &StaticData) {\n-        self.return_ty = self.make_ty(&data.type_ref);\n-    }\n-\n-    fn collect_fn(&mut self, data: &FunctionData) {\n-        let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n-            .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n-        let param_tys =\n-            data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n-        for (ty, pat) in param_tys.into_iter().zip(body.params.iter()) {\n-            let ty = self.insert_type_vars(ty);\n-            let ty = self.normalize_associated_types_in(ty);\n-\n-            self.infer_pat(*pat, &ty, BindingMode::default());\n-        }\n-        let error_ty = &TypeRef::Error;\n-        let return_ty = if data.has_async_kw() {\n-            data.async_ret_type.as_deref().unwrap_or(error_ty)\n-        } else {\n-            &*data.ret_type\n-        };\n-        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n-        self.return_ty = return_ty;\n-    }\n-\n-    fn infer_body(&mut self) {\n-        self.infer_expr_coerce(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n-    }\n-\n     fn resolve_lang_item(&self, name: Name) -> Option<LangItemTarget> {\n         let krate = self.resolver.krate();\n         self.db.lang_item(krate, name.to_smol_str())"}]}