{"sha": "a9cc010c4883bafba1304f6fd581343f5b1b3ba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Y2MwMTBjNDg4M2JhZmJhMTMwNGY2ZmQ1ODEzNDNmNWIxYjNiYTI=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-02-13T08:13:48Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-03-09T19:01:32Z"}, "message": "Make it possible to instantiate hardcoded Backtrace from test", "tree": {"sha": "468cee497d8f2a6c111c8624694b5e97b8216439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/468cee497d8f2a6c111c8624694b5e97b8216439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9cc010c4883bafba1304f6fd581343f5b1b3ba2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl5mkowACgkQ+boUO5X/\nbYLs3w/+PRqGn6bytDmI9hoXtYIZvjpY6yhH71aqZbJwX08K75iRJfx9rxGXOcRb\nDcPs0Le0HMhvH6bh31r9UrAB7LumyD4HjugEcDJv71oJIOo/nVky5wtw5SIS+XSd\nNnJNrybzBE1h/wD8DndnP/zz/nneUApVchGQXSuQBNfan3GceyXwXx3c7cNYLah8\n0qm+XRmVB1DCkwQXqIPWIUk6no0TmFBqFyJX8b5V9sY1RtCL7KucfBdqq500+JFS\n0NZO0QrJKe+g07j3pB4/Y6YyulT0VY+L0VVO5RiQuKJLMiAkleKs7sDB4pG1Whx6\nNFfyjD7GFCQaMi7+PxNRV0aF0fBf3n62CF2vQTIVLtjmYkCgDsObYmk6cZCxVB2O\nJUAHVr67ncnYGFK7t8/TBIqvm41cjrGntfCeTL75AWrPAEv7DuKe7zIJmsdEw6IN\nnx47NSgZX4m6UC0seiKlGzmN+NMM1E6gupBRZQhN+07Dhv568MHYb8etlRZKOcJK\nqpW612DvVfy5UBIjE1JAwOlky8GXz0i7YszAA1SdUnBQfw1BzMlL+cn31Zfg25gU\nP1KJW1pQiWMB2BDu+Q9dJble1kDShSauPP1BXRxysA8a+xvIHeLqDVJXbXmyaUfw\n/B9/NwA1oKf270sRQDT+v76SgLmYyXahrjs7kkmq+Q7YmbAyoI4=\n=3MWr\n-----END PGP SIGNATURE-----", "payload": "tree 468cee497d8f2a6c111c8624694b5e97b8216439\nparent 1f1ca877b7002e3ac45916df5415fde1584775ab\nauthor David Tolnay <dtolnay@gmail.com> 1581581628 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1583780492 -0700\n\nMake it possible to instantiate hardcoded Backtrace from test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cc010c4883bafba1304f6fd581343f5b1b3ba2", "html_url": "https://github.com/rust-lang/rust/commit/a9cc010c4883bafba1304f6fd581343f5b1b3ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9cc010c4883bafba1304f6fd581343f5b1b3ba2/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f1ca877b7002e3ac45916df5415fde1584775ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f1ca877b7002e3ac45916df5415fde1584775ab", "html_url": "https://github.com/rust-lang/rust/commit/1f1ca877b7002e3ac45916df5415fde1584775ab"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "04fd80ecbdb23073d0caeb9f6a6c2bfdf8e05b6d", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a9cc010c4883bafba1304f6fd581343f5b1b3ba2/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9cc010c4883bafba1304f6fd581343f5b1b3ba2/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=a9cc010c4883bafba1304f6fd581343f5b1b3ba2", "patch": "@@ -92,6 +92,7 @@\n // a backtrace or actually symbolizing it.\n \n use crate::env;\n+use crate::ffi::c_void;\n use crate::fmt;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sync::Mutex;\n@@ -144,10 +145,16 @@ fn _assert_send_sync() {\n }\n \n struct BacktraceFrame {\n-    frame: backtrace::Frame,\n+    frame: RawFrame,\n     symbols: Vec<BacktraceSymbol>,\n }\n \n+enum RawFrame {\n+    Actual(backtrace::Frame),\n+    #[cfg(test)]\n+    Fake,\n+}\n+\n struct BacktraceSymbol {\n     name: Option<Vec<u8>>,\n     filename: Option<BytesOrWide>,\n@@ -293,7 +300,10 @@ impl Backtrace {\n         let mut actual_start = None;\n         unsafe {\n             backtrace::trace_unsynchronized(|frame| {\n-                frames.push(BacktraceFrame { frame: frame.clone(), symbols: Vec::new() });\n+                frames.push(BacktraceFrame {\n+                    frame: RawFrame::Actual(frame.clone()),\n+                    symbols: Vec::new(),\n+                });\n                 if frame.symbol_address() as usize == ip && actual_start.is_none() {\n                     actual_start = Some(frames.len());\n                 }\n@@ -393,8 +403,13 @@ impl Capture {\n         let _lock = lock();\n         for frame in self.frames.iter_mut() {\n             let symbols = &mut frame.symbols;\n+            let frame = match &frame.frame {\n+                RawFrame::Actual(frame) => frame,\n+                #[cfg(test)]\n+                RawFrame::Fake => unimplemented!(),\n+            };\n             unsafe {\n-                backtrace::resolve_frame_unsynchronized(&frame.frame, |symbol| {\n+                backtrace::resolve_frame_unsynchronized(frame, |symbol| {\n                     symbols.push(BacktraceSymbol {\n                         name: symbol.name().map(|m| m.as_bytes().to_vec()),\n                         filename: symbol.filename_raw().map(|b| match b {\n@@ -408,3 +423,13 @@ impl Capture {\n         }\n     }\n }\n+\n+impl RawFrame {\n+    fn ip(&self) -> *mut c_void {\n+        match self {\n+            RawFrame::Actual(frame) => frame.ip(),\n+            #[cfg(test)]\n+            RawFrame::Fake => 1 as *mut c_void,\n+        }\n+    }\n+}"}]}