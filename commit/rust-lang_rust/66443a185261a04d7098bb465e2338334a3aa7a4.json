{"sha": "66443a185261a04d7098bb465e2338334a3aa7a4", "node_id": "C_kwDOAAsO6NoAKDY2NDQzYTE4NTI2MWEwNGQ3MDk4YmI0NjVlMjMzODMzNGEzYWE3YTQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-06T18:05:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-06T18:05:37Z"}, "message": "Rollup merge of #96557 - nbdd0121:const, r=oli-obk\n\nAllow inline consts to reference generic params\n\nTracking issue: #76001\n\nThe RFC says that inline consts cannot reference to generic parameters (for now), same as array length expressions. And expresses that it's desirable for it to reference in-scope generics, when array length expressions gain that feature as well.\n\nHowever it is possible to implement this for inline consts before doing this for all anon consts, because inline consts are only used as values and they won't be used in the type system. So we can have:\n```rust\nfn foo<T>() {\n    let x = [4i32; std::mem::size_of::<T>()];   // NOT ALLOWED (for now)\n    let x = const { std::mem::size_of::<T>() }; // ALLOWED with this PR!\n    let x = [4i32; const { std::mem::size_of::<T>() }];   // NOT ALLOWED (for now)\n}\n```\n\nThis would make inline consts super useful for compile-time checks and assertions:\n```rust\nfn assert_zst<T>() {\n    const { assert!(std::mem::size_of::<T>() == 0) };\n}\n```\n\nThis would create an error during monomorphization when `assert_zst` is instantiated with non-ZST `T`s. A error during mono might sound scary, but this is exactly what a \"desugared\" inline const would do:\n```rust\nfn assert_zst<T>() {\n    struct F<T>(T);\n    impl<T> F<T> {\n        const V: () = assert!(std::mem::size_of::<T>() == 0);\n    }\n    let _ = F::<T>::V;\n}\n```\n\nIt should also be noted that the current inline const implementation can already reference the type params via type inference, so this resolver-level restriction is not any useful either:\n```rust\nfn foo<T>() -> usize {\n    let (_, size): (PhantomData<T>, usize) = const {\n        const fn my_size_of<T>() -> (PhantomData<T>, usize) {\n            (PhantomData, std::mem::size_of::<T>())\n        }\n        my_size_of()\n    };\n    size\n}\n```\n\n```@rustbot``` label: F-inline_const", "tree": {"sha": "732802c4fbba4b80da89f3fbe61bf129116b65a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/732802c4fbba4b80da89f3fbe61bf129116b65a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66443a185261a04d7098bb465e2338334a3aa7a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidWNxCRBK7hj4Ov3rIwAAYiwIAFL19XwAgrS1lri4ZQrQ5SlO\nEPG98V3ce/5bd/FZhgaBJ16XfYpDb/icgKNq112Q2MSe/q+wtVcRHlQv7vooPO6E\ntFM8bJPSPUKMO8jjguSuTVtV3twJ1gdMT0ZhsRt5UK5q0WcVybse8MoQ3UvEtjzn\nfbBLjjTohQIPQzZPDo/e5f4/xAlsdGgDLPH5KjyQW1+Mhk6qIyeyWHwFanYQpIEu\nOGT4ZbpCXmCKR5EM33UZ/nykln6CKvza/yFxFjfPiLFxEk10CjDVRS9B6FB01ySh\ngG1viuzvRBifzmPQOEJxaBo8ygl1r3k8kTe6pY/U1SER9q6zRNvB8aiN40vCYyw=\n=AE8Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 732802c4fbba4b80da89f3fbe61bf129116b65a4\nparent e209e85e39b4851c3ec122a45ddeabe318b2d522\nparent 5b5ac28c64ce695c7cb85f365b385892d78f1be6\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1651860337 +0200\ncommitter GitHub <noreply@github.com> 1651860337 +0200\n\nRollup merge of #96557 - nbdd0121:const, r=oli-obk\n\nAllow inline consts to reference generic params\n\nTracking issue: #76001\n\nThe RFC says that inline consts cannot reference to generic parameters (for now), same as array length expressions. And expresses that it's desirable for it to reference in-scope generics, when array length expressions gain that feature as well.\n\nHowever it is possible to implement this for inline consts before doing this for all anon consts, because inline consts are only used as values and they won't be used in the type system. So we can have:\n```rust\nfn foo<T>() {\n    let x = [4i32; std::mem::size_of::<T>()];   // NOT ALLOWED (for now)\n    let x = const { std::mem::size_of::<T>() }; // ALLOWED with this PR!\n    let x = [4i32; const { std::mem::size_of::<T>() }];   // NOT ALLOWED (for now)\n}\n```\n\nThis would make inline consts super useful for compile-time checks and assertions:\n```rust\nfn assert_zst<T>() {\n    const { assert!(std::mem::size_of::<T>() == 0) };\n}\n```\n\nThis would create an error during monomorphization when `assert_zst` is instantiated with non-ZST `T`s. A error during mono might sound scary, but this is exactly what a \"desugared\" inline const would do:\n```rust\nfn assert_zst<T>() {\n    struct F<T>(T);\n    impl<T> F<T> {\n        const V: () = assert!(std::mem::size_of::<T>() == 0);\n    }\n    let _ = F::<T>::V;\n}\n```\n\nIt should also be noted that the current inline const implementation can already reference the type params via type inference, so this resolver-level restriction is not any useful either:\n```rust\nfn foo<T>() -> usize {\n    let (_, size): (PhantomData<T>, usize) = const {\n        const fn my_size_of<T>() -> (PhantomData<T>, usize) {\n            (PhantomData, std::mem::size_of::<T>())\n        }\n        my_size_of()\n    };\n    size\n}\n```\n\n```@rustbot``` label: F-inline_const\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66443a185261a04d7098bb465e2338334a3aa7a4", "html_url": "https://github.com/rust-lang/rust/commit/66443a185261a04d7098bb465e2338334a3aa7a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66443a185261a04d7098bb465e2338334a3aa7a4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e209e85e39b4851c3ec122a45ddeabe318b2d522", "url": "https://api.github.com/repos/rust-lang/rust/commits/e209e85e39b4851c3ec122a45ddeabe318b2d522", "html_url": "https://github.com/rust-lang/rust/commit/e209e85e39b4851c3ec122a45ddeabe318b2d522"}, {"sha": "5b5ac28c64ce695c7cb85f365b385892d78f1be6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5ac28c64ce695c7cb85f365b385892d78f1be6", "html_url": "https://github.com/rust-lang/rust/commit/5b5ac28c64ce695c7cb85f365b385892d78f1be6"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "a1d1b6b3a785bcc6e522d6e7363140e4a4fcdb90", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -136,6 +136,10 @@ pub trait Printer<'tcx>: Sized {\n                     match key.disambiguated_data.data {\n                         // Closures' own generics are only captures, don't print them.\n                         DefPathData::ClosureExpr => {}\n+                        // This covers both `DefKind::AnonConst` and `DefKind::InlineConst`.\n+                        // Anon consts doesn't have their own generics, and inline consts' own\n+                        // generics are their inferred types, so don't print them.\n+                        DefPathData::AnonConst => {}\n \n                         // If we have any generic arguments to print, we do that\n                         // on top of the same path, but without its own generics."}, {"sha": "723e66e9ef61807d42ed927cdf72970d2157ecab", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -3105,6 +3105,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         );\n     }\n \n+    fn resolve_inline_const(&mut self, constant: &'ast AnonConst) {\n+        debug!(\"resolve_anon_const {constant:?}\");\n+        self.with_constant_rib(IsRepeatExpr::No, HasGenericParams::Yes, None, |this| {\n+            visit::walk_anon_const(this, constant);\n+        });\n+    }\n+\n     fn resolve_expr(&mut self, expr: &'ast Expr, parent: Option<&'ast Expr>) {\n         // First, record candidate traits for this expression if it could\n         // result in the invocation of a method call.\n@@ -3261,7 +3268,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n             ExprKind::ConstBlock(ref ct) => {\n-                self.resolve_anon_const(ct, IsRepeatExpr::No);\n+                self.resolve_inline_const(ct);\n             }\n             ExprKind::Index(ref elem, ref idx) => {\n                 self.resolve_expr(elem, Some(expr));"}, {"sha": "4e8879af54aff015e1de748d3486a56ba0252b6a", "filename": "src/test/ui/inline-const/const-expr-generic-err.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.rs?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -0,0 +1,15 @@\n+// build-fail\n+#![feature(inline_const)]\n+\n+fn foo<T>() {\n+    const { assert!(std::mem::size_of::<T>() == 0); } //~ ERROR E0080\n+}\n+\n+fn bar<const N: usize>() -> usize {\n+    const { N - 1 } //~ ERROR E0080\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+    bar::<0>();\n+}"}, {"sha": "db0d85a2d4e74c5ca4d30ddd54c7f6b677dd4346", "filename": "src/test/ui/inline-const/const-expr-generic-err.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err.stderr?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -0,0 +1,29 @@\n+error[E0080]: evaluation of `foo::<i32>::{constant#0}` failed\n+  --> $DIR/const-expr-generic-err.rs:5:13\n+   |\n+LL |     const { assert!(std::mem::size_of::<T>() == 0); }\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: std::mem::size_of::<T>() == 0', $DIR/const-expr-generic-err.rs:5:13\n+   |\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: the above error was encountered while instantiating `fn foo::<i32>`\n+  --> $DIR/const-expr-generic-err.rs:13:5\n+   |\n+LL |     foo::<i32>();\n+   |     ^^^^^^^^^^^^\n+\n+error[E0080]: evaluation of `bar::<0_usize>::{constant#0}` failed\n+  --> $DIR/const-expr-generic-err.rs:9:13\n+   |\n+LL |     const { N - 1 }\n+   |             ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n+\n+note: the above error was encountered while instantiating `fn bar::<0_usize>`\n+  --> $DIR/const-expr-generic-err.rs:14:5\n+   |\n+LL |     bar::<0>();\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "e097cbe9dd6d1d3187c09a80b1eb78271f3fa425", "filename": "src/test/ui/inline-const/const-expr-generic-err2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.rs?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -0,0 +1,10 @@\n+#![feature(inline_const)]\n+\n+fn foo<T>() {\n+    let _ = [0u8; const { std::mem::size_of::<T>() }];\n+    //~^ ERROR: constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+}"}, {"sha": "00b716cd25965da94bde26294fa0065da3605db8", "filename": "src/test/ui/inline-const/const-expr-generic-err2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic-err2.stderr?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/const-expr-generic-err2.rs:4:19\n+   |\n+LL |     let _ = [0u8; const { std::mem::size_of::<T>() }];\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "3207bfa0e89e6bfc5967ee068e8718d0af709898", "filename": "src/test/ui/inline-const/const-expr-generic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-generic.rs?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(inline_const)]\n+\n+fn foo<T>() -> usize {\n+    const { std::mem::size_of::<T>() }\n+}\n+\n+fn bar<const N: usize>() -> usize {\n+    const { N + 1 }\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+    bar::<1>();\n+}"}, {"sha": "e1946467583e908c1ea23d85bdaacd88a9a909ac", "filename": "src/test/ui/inline-const/const-match-pat-generic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.rs?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -1,6 +1,5 @@\n #![allow(incomplete_features)]\n #![feature(inline_const_pat)]\n-#![feature(generic_const_exprs)]\n \n // rust-lang/rust#82518: ICE with inline-const in match referencing const-generic parameter\n \n@@ -16,7 +15,7 @@ const fn f(x: usize) -> usize {\n     x + 1\n }\n \n-fn bar<const V: usize>() where [(); f(V)]: {\n+fn bar<const V: usize>() {\n     match 0 {\n         const { f(V) } => {},\n         //~^ ERROR constant pattern depends on a generic parameter"}, {"sha": "ade200d99ba39c46390e7b9009866ec396c2f683", "filename": "src/test/ui/inline-const/const-match-pat-generic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-generic.stderr?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -1,17 +1,17 @@\n error[E0158]: const parameters cannot be referenced in patterns\n-  --> $DIR/const-match-pat-generic.rs:9:9\n+  --> $DIR/const-match-pat-generic.rs:8:9\n    |\n LL |         const { V } => {},\n    |         ^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/const-match-pat-generic.rs:21:9\n+  --> $DIR/const-match-pat-generic.rs:20:9\n    |\n LL |         const { f(V) } => {},\n    |         ^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/const-match-pat-generic.rs:21:9\n+  --> $DIR/const-match-pat-generic.rs:20:9\n    |\n LL |         const { f(V) } => {},\n    |         ^^^^^^^^^^^^^^"}, {"sha": "6ae700753f06d672724d197018dd7fbecceb6ecf", "filename": "src/tools/clippy/tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Findexing_slicing_index.stderr?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: evaluation of `main::{constant#3}::<&i32>` failed\n+error[E0080]: evaluation of `main::{constant#3}` failed\n   --> $DIR/indexing_slicing_index.rs:31:14\n    |\n LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts."}]}