{"sha": "efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYTY2NzVmMWQ2MzJmNWQ1MjRmNGE3YTE4ODM4YzZlZTFjMGM0NDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-18T18:19:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-18T18:29:53Z"}, "message": "make filetype() include the \".\" (fixes #3412)", "tree": {"sha": "766244783f25f9933d1b2bcc8e8d993367033bdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/766244783f25f9933d1b2bcc8e8d993367033bdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "html_url": "https://github.com/rust-lang/rust/commit/efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b013cd800ce675a445220105911bbefd2427e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b013cd800ce675a445220105911bbefd2427e47", "html_url": "https://github.com/rust-lang/rust/commit/3b013cd800ce675a445220105911bbefd2427e47"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "8dd82bcf6a3740c792379f6d80a93cc24ab672f5", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "patch": "@@ -804,7 +804,7 @@ fn install_source(c: cargo, path: &Path) {\n \n     let mut cratefiles = ~[];\n     for os::walk_dir(&Path(\".\")) |p| {\n-        if p.filetype() == Some(~\"rc\") {\n+        if p.filetype() == Some(~\".rc\") {\n             vec::push(cratefiles, *p);\n         }\n     }"}, {"sha": "9ee36769ff167af174606b38d0d0449f69dfa844", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "patch": "@@ -26,7 +26,7 @@ fn contains(haystack: ~str, needle: ~str) -> bool {\n }\n \n fn find_rust_files(files: &mut ~[Path], path: &Path) {\n-    if path.filetype() == Some(~\"rs\") && !contains(path.to_str(), ~\"utf8\") {\n+    if path.filetype() == Some(~\".rs\") && !contains(path.to_str(), ~\"utf8\") {\n         // ignoring \"utf8\" tests because something is broken\n         vec::push(*files, *path);\n     } else if os::path_is_dir(path)"}, {"sha": "e135aec8f78a8e4f720e5bdf627efac656ee1849", "filename": "src/libcore/path.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "patch": "@@ -128,7 +128,7 @@ impl PosixPath : GenericPath {\n           None => None,\n           Some(ref f) => {\n             match str::rfind_char(*f, '.') {\n-              Some(p) if p+1 < f.len() => Some(f.slice(p+1, f.len())),\n+              Some(p) if p < f.len() => Some(f.slice(p, f.len())),\n               _ => None\n             }\n           }\n@@ -153,8 +153,7 @@ impl PosixPath : GenericPath {\n     pure fn with_filestem(s: &str) -> PosixPath {\n         match self.filetype() {\n           None => self.with_filename(s),\n-          Some(ref t) =>\n-          self.with_filename(str::from_slice(s) + \".\" + *t)\n+          Some(ref t) => self.with_filename(str::from_slice(s) + *t)\n         }\n     }\n \n@@ -168,8 +167,7 @@ impl PosixPath : GenericPath {\n             let t = ~\".\" + str::from_slice(t);\n             match self.filestem() {\n               None => self.with_filename(t),\n-              Some(ref s) =>\n-              self.with_filename(*s + t)\n+              Some(ref s) => self.with_filename(*s + t)\n             }\n         }\n     }\n@@ -321,7 +319,7 @@ impl WindowsPath : GenericPath {\n           None => None,\n           Some(ref f) => {\n             match str::rfind_char(*f, '.') {\n-              Some(p) if p+1 < f.len() => Some(f.slice(p+1, f.len())),\n+              Some(p) if p < f.len() => Some(f.slice(p, f.len())),\n               _ => None\n             }\n           }\n@@ -344,8 +342,7 @@ impl WindowsPath : GenericPath {\n     pure fn with_filestem(s: &str) -> WindowsPath {\n         match self.filetype() {\n           None => self.with_filename(s),\n-          Some(ref t) =>\n-          self.with_filename(str::from_slice(s) + \".\" + *t)\n+          Some(ref t) => self.with_filename(str::from_slice(s) + *t)\n         }\n     }\n \n@@ -470,6 +467,18 @@ mod posix {\n         }\n     }\n \n+    #[test]\n+    fn test_filetype_foo_bar() {\n+        let wp = mk(\"foo.bar\");\n+        assert wp.filetype() == Some(~\".bar\");\n+    }\n+\n+    #[test]\n+    fn test_filetype_foo() {\n+        let wp = mk(\"foo\");\n+        assert wp.filetype() == None;\n+    }\n+\n     #[test]\n     fn test_posix_paths() {\n         t(&(mk(\"hi\")), \"hi\");\n@@ -642,4 +651,19 @@ mod windows {\n \n     }\n \n+    #[cfg(test)]\n+    fn mk(s: &str) -> PosixPath { from_str::<PosixPath>(s) }\n+\n+    #[test]\n+    fn test_filetype_foo_bar() {\n+        let wp = mk(\"foo.bar\");\n+        assert wp.filetype() == Some(~\".bar\");\n+    }\n+\n+    #[test]\n+    fn test_filetype_foo() {\n+        let wp = mk(\"foo\");\n+        assert wp.filetype() == None;\n+    }\n+\n }"}, {"sha": "9b9d7addee20ccefd43cb00b6d92278372cd5206", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "patch": "@@ -51,9 +51,9 @@ fn new_parse_sess_special_handler(sh: span_handler, cm: codemap::codemap)\n \n fn parse_crate_from_file(input: &Path, cfg: ast::crate_cfg,\n                          sess: parse_sess) -> @ast::crate {\n-    if input.filetype() == Some(~\"rc\") {\n+    if input.filetype() == Some(~\".rc\") {\n         parse_crate_from_crate_file(input, cfg, sess)\n-    } else if input.filetype() == Some(~\"rs\") {\n+    } else if input.filetype() == Some(~\".rs\") {\n         parse_crate_from_source_file(input, cfg, sess)\n     } else {\n         sess.span_diagnostic.handler().fatal(~\"unknown input file type: \" +"}, {"sha": "e3c308bed9fc44cc3e44e1e5ea0cee07e8bbe55b", "filename": "src/rustc/back/linkage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Frustc%2Fback%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa6675f1d632f5d524f4a7a18838c6ee1c0c447/src%2Frustc%2Fback%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flinkage.rs?ref=efa6675f1d632f5d524f4a7a18838c6ee1c0c447", "patch": "@@ -685,7 +685,7 @@ fn link_binary(sess: session,\n \n     let cstore = sess.cstore;\n     for cstore::get_used_crate_files(cstore).each |cratepath| {\n-        if cratepath.filetype() == Some(~\"rlib\") {\n+        if cratepath.filetype() == Some(~\".rlib\") {\n             vec::push(cc_args, cratepath.to_str());\n             loop;\n         }"}]}