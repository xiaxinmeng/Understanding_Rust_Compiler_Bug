{"sha": "5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjlhYTZmZGY0Yzg3MjlmZmQwMWM0MGFhMTdhZDliZDUwMWQxZGY=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-10T10:32:10Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-11T09:43:04Z"}, "message": "lintcheck: add support for path sources", "tree": {"sha": "6c38581019d428fd75d8d7a5bb4b4c3943eedf53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c38581019d428fd75d8d7a5bb4b4c3943eedf53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "html_url": "https://github.com/rust-lang/rust/commit/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfe154be8cce39b7c2bbe69a61d1ceb818d2a8f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe154be8cce39b7c2bbe69a61d1ceb818d2a8f7", "html_url": "https://github.com/rust-lang/rust/commit/cfe154be8cce39b7c2bbe69a61d1ceb818d2a8f7"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "5ac96e2210c89a782685c662482747457c151272", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "patch": "@@ -9,6 +9,7 @@ edition = \"2018\"\n bytecount = \"0.6\"\n clap = \"2.33\"\n flate2 = { version = \"1.0.19\", optional = true }\n+fs_extra = { version = \"1.2.0\", optional = true }\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n@@ -21,5 +22,5 @@ ureq = { version = \"2.0.0-rc3\", optional = true }\n walkdir = \"2\"\n \n [features]\n-lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\"]\n+lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\", \"fs_extra\"]\n deny-warnings = []"}, {"sha": "3846e8bd4ccb79a8dee8c62f90fea1a99a10661f", "filename": "clippy_dev/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FREADME.md?ref=5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "patch": "@@ -1,8 +1,10 @@\n-## Clippy-dev is a tool to ease clippys development, similar to `rustc`s `x.py`.\n+# Clippy Dev Tool \n+\n+The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s `x.py`.\n \n Functionalities (incomplete):\n \n-# lintcheck\n+## `lintcheck`\n Runs clippy on a fixed set of crates read from `clippy_dev/lintcheck_crates.toml`\n and saves logs of the lint warnings into the repo.\n We can then check the diff and spot new or disappearing warnings."}, {"sha": "60e70ca4eb22bbb6cfac5704d3764853461ff86d", "filename": "clippy_dev/lintcheck_crates.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Flintcheck_crates.toml?ref=5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "patch": "@@ -10,6 +10,7 @@ rayon = {name = \"rayon\", versions = ['1.5.0']}\n serde = {name = \"serde\", versions = ['1.0.118']}\n # top 10 crates.io dls\n bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n+# crash = {name = \"clippy_crash\", path = \"/tmp/clippy_crash\"}\n libc = {name = \"libc\", versions = ['0.2.81']}\n log = {name = \"log\", versions = ['0.4.11']}\n proc-macro2 = {name = \"proc-macro2\", versions = ['1.0.24']}"}, {"sha": "e9d0b420c3bb5c289829c7ddb3b651de347eb844", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=5e29aa6fdf4c8729ffd01c40aa17ad9bd501d1df", "patch": "@@ -31,13 +31,15 @@ struct TomlCrate {\n     versions: Option<Vec<String>>,\n     git_url: Option<String>,\n     git_hash: Option<String>,\n+    path: Option<String>,\n }\n \n-// represents an archive we download from crates.io\n+// represents an archive we download from crates.io, or a git repo, or a local repo\n #[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n enum CrateSource {\n     CratesIo { name: String, version: String },\n     Git { name: String, url: String, commit: String },\n+    Path { name: String, path: PathBuf },\n }\n \n // represents the extracted sourcecode of a crate\n@@ -111,7 +113,7 @@ impl CrateSource {\n             },\n             CrateSource::Git { name, url, commit } => {\n                 let repo_path = {\n-                    let mut repo_path = PathBuf::from(\"target/lintcheck/downloads\");\n+                    let mut repo_path = PathBuf::from(\"target/lintcheck/crates\");\n                     // add a -git suffix in case we have the same crate from crates.io and a git repo\n                     repo_path.push(format!(\"{}-git\", name));\n                     repo_path\n@@ -139,6 +141,37 @@ impl CrateSource {\n                     path: repo_path,\n                 }\n             },\n+            CrateSource::Path { name, path } => {\n+                use fs_extra::dir;\n+\n+                // simply copy the entire directory into our target dir\n+                let copy_dest = PathBuf::from(\"target/lintcheck/crates/\");\n+\n+                // the source path of the crate we copied,  ${copy_dest}/crate_name\n+                let crate_root = copy_dest.join(name); // .../crates/local_crate\n+\n+                if !crate_root.exists() {\n+                    println!(\"Copying {} to {}\", path.display(), copy_dest.display());\n+\n+                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).expect(&format!(\n+                        \"Failed to copy from {}, to  {}\",\n+                        path.display(),\n+                        crate_root.display()\n+                    ));\n+                } else {\n+                    println!(\n+                        \"Not copying {} to {}, destination already exists\",\n+                        path.display(),\n+                        crate_root.display()\n+                    );\n+                }\n+\n+                Crate {\n+                    version: String::from(\"local\"),\n+                    name: name.clone(),\n+                    path: crate_root,\n+                }\n+            },\n         }\n     }\n }\n@@ -211,6 +244,13 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n     // multiple Cratesources)\n     let mut crate_sources = Vec::new();\n     tomlcrates.into_iter().for_each(|tk| {\n+        if let Some(ref path) = tk.path {\n+            crate_sources.push(CrateSource::Path {\n+                name: tk.name.clone(),\n+                path: PathBuf::from(path),\n+            });\n+        }\n+\n         // if we have multiple versions, save each one\n         if let Some(ref versions) = tk.versions {\n             versions.iter().for_each(|ver| {\n@@ -234,7 +274,10 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n         {\n             eprintln!(\"tomlkrate: {:?}\", tk);\n             if tk.git_hash.is_some() != tk.git_url.is_some() {\n-                panic!(\"Encountered TomlCrate with only one of git_hash and git_url!\")\n+                panic!(\"Error: Encountered TomlCrate with only one of git_hash and git_url!\");\n+            }\n+            if tk.path.is_some() && (tk.git_hash.is_some() || tk.versions.is_some()) {\n+                panic!(\"Error: TomlCrate can only have one of 'git_.*', 'version' or 'path' fields\");\n             }\n             unreachable!(\"Failed to translate TomlCrate into CrateSource!\");\n         }\n@@ -298,6 +341,7 @@ pub fn run(clap_config: &ArgMatches) {\n             let name = match krate {\n                 CrateSource::CratesIo { name, .. } => name,\n                 CrateSource::Git { name, .. } => name,\n+                CrateSource::Path { name, .. } => name,\n             };\n             name == only_one_crate\n         }) {"}]}