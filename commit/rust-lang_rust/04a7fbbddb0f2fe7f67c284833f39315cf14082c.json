{"sha": "04a7fbbddb0f2fe7f67c284833f39315cf14082c", "node_id": "C_kwDOAAsO6NoAKDA0YTdmYmJkZGIwZjJmZTdmNjdjMjg0ODMzZjM5MzE1Y2YxNDA4MmM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-14T11:01:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-14T11:10:43Z"}, "message": "Move out doc-links tests into a separate module", "tree": {"sha": "9e7d4430e90e5e5c78983ea6e2211dd021cd1d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7d4430e90e5e5c78983ea6e2211dd021cd1d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a7fbbddb0f2fe7f67c284833f39315cf14082c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a7fbbddb0f2fe7f67c284833f39315cf14082c", "html_url": "https://github.com/rust-lang/rust/commit/04a7fbbddb0f2fe7f67c284833f39315cf14082c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a7fbbddb0f2fe7f67c284833f39315cf14082c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "536ed7c45198128bed4c0cb8d50afb09b44cba0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/536ed7c45198128bed4c0cb8d50afb09b44cba0a", "html_url": "https://github.com/rust-lang/rust/commit/536ed7c45198128bed4c0cb8d50afb09b44cba0a"}], "stats": {"total": 810, "additions": 414, "deletions": 396}, "files": [{"sha": "4985a71a85dda93354f0e01d92aeeed68e14bd4a", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 3, "deletions": 396, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/04a7fbbddb0f2fe7f67c284833f39315cf14082c/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a7fbbddb0f2fe7f67c284833f39315cf14082c/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=04a7fbbddb0f2fe7f67c284833f39315cf14082c", "patch": "@@ -1,5 +1,8 @@\n //! Extracts, resolves and rewrites links and intra-doc links in markdown documentation.\n \n+#[cfg(test)]\n+mod tests;\n+\n mod intra_doc_links;\n \n use either::Either;\n@@ -528,399 +531,3 @@ fn get_assoc_item_fragment(db: &dyn HirDatabase, assoc_item: hir::AssocItem) ->\n         AssocItem::TypeAlias(ty) => format!(\"associatedtype.{}\", ty.name(db)),\n     })\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use expect_test::{expect, Expect};\n-    use ide_db::base_db::FileRange;\n-    use itertools::Itertools;\n-\n-    use crate::{fixture, TryToNav};\n-\n-    use super::*;\n-\n-    #[test]\n-    fn external_docs_doc_url_crate() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:main deps:foo\n-use foo$0::Foo;\n-//- /lib.rs crate:foo\n-pub struct Foo;\n-\"#,\n-            expect![[r#\"https://docs.rs/foo/*/foo/index.html\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_doc_url_std_crate() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:std\n-use self$0;\n-\"#,\n-            expect![[r#\"https://doc.rust-lang.org/nightly/std/index.html\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_doc_url_struct() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Fo$0o;\n-\"#,\n-            expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_doc_url_struct_field() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Foo {\n-    field$0: ()\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#structfield.field\"##]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_doc_url_fn() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub fn fo$0o() {}\n-\"#,\n-            expect![[r#\"https://docs.rs/foo/*/foo/fn.foo.html\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_doc_url_impl_assoc() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Foo;\n-impl Foo {\n-    pub fn method$0() {}\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n-        );\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Foo;\n-impl Foo {\n-    const CONST$0: () = ();\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_doc_url_impl_trait_assoc() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Foo;\n-pub trait Trait {\n-    fn method() {}\n-}\n-impl Trait for Foo {\n-    pub fn method$0() {}\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n-        );\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Foo;\n-pub trait Trait {\n-    const CONST: () = ();\n-}\n-impl Trait for Foo {\n-    const CONST$0: () = ();\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n-        );\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Foo;\n-pub trait Trait {\n-    type Type;\n-}\n-impl Trait for Foo {\n-    type Type$0 = ();\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedtype.Type\"##]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_doc_url_trait_assoc() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub trait Foo {\n-    fn method$0();\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#tymethod.method\"##]],\n-        );\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub trait Foo {\n-    const CONST$0: ();\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedconstant.CONST\"##]],\n-        );\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub trait Foo {\n-    type Type$0;\n-}\n-\"#,\n-            expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedtype.Type\"##]],\n-        );\n-    }\n-\n-    #[test]\n-    fn external_docs_trait() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-trait Trait$0 {}\n-\"#,\n-            expect![[r#\"https://docs.rs/foo/*/foo/trait.Trait.html\"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn external_docs_module() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub mod foo {\n-    pub mod ba$0r {}\n-}\n-\"#,\n-            expect![[r#\"https://docs.rs/foo/*/foo/foo/bar/index.html\"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn external_docs_reexport_order() {\n-        check_external_docs(\n-            r#\"\n-//- /main.rs crate:foo\n-pub mod wrapper {\n-    pub use module::Item;\n-\n-    pub mod module {\n-        pub struct Item;\n-    }\n-}\n-\n-fn foo() {\n-    let bar: wrapper::It$0em;\n-}\n-        \"#,\n-            expect![[r#\"https://docs.rs/foo/*/foo/wrapper/module/struct.Item.html\"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn test_trait_items() {\n-        check_doc_links(\n-            r#\"\n-/// [`Trait`]\n-/// [`Trait::Type`]\n-/// [`Trait::CONST`]\n-/// [`Trait::func`]\n-trait Trait$0 {\n-   // ^^^^^ Trait\n-    type Type;\n-      // ^^^^ Trait::Type\n-    const CONST: usize;\n-       // ^^^^^ Trait::CONST\n-    fn func();\n-    // ^^^^ Trait::func\n-}\n-        \"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn rewrite_html_root_url() {\n-        check_rewrite(\n-            r#\"\n-//- /main.rs crate:foo\n-#![doc(arbitrary_attribute = \"test\", html_root_url = \"https:/example.com\", arbitrary_attribute2)]\n-\n-pub mod foo {\n-    pub struct Foo;\n-}\n-/// [Foo](foo::Foo)\n-pub struct B$0ar\n-\"#,\n-            expect![[r#\"[Foo](https://example.com/foo/foo/struct.Foo.html)\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn rewrite_on_field() {\n-        check_rewrite(\n-            r#\"\n-//- /main.rs crate:foo\n-pub struct Foo {\n-    /// [Foo](struct.Foo.html)\n-    fie$0ld: ()\n-}\n-\"#,\n-            expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn rewrite_struct() {\n-        check_rewrite(\n-            r#\"\n-//- /main.rs crate:foo\n-/// [Foo]\n-pub struct $0Foo;\n-\"#,\n-            expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n-        );\n-        check_rewrite(\n-            r#\"\n-//- /main.rs crate:foo\n-/// [`Foo`]\n-pub struct $0Foo;\n-\"#,\n-            expect![[r#\"[`Foo`](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n-        );\n-        check_rewrite(\n-            r#\"\n-//- /main.rs crate:foo\n-/// [Foo](struct.Foo.html)\n-pub struct $0Foo;\n-\"#,\n-            expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n-        );\n-        check_rewrite(\n-            r#\"\n-//- /main.rs crate:foo\n-/// [struct Foo](struct.Foo.html)\n-pub struct $0Foo;\n-\"#,\n-            expect![[r#\"[struct Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n-        );\n-        check_rewrite(\n-            r#\"\n-//- /main.rs crate:foo\n-/// [my Foo][foo]\n-///\n-/// [foo]: Foo\n-pub struct $0Foo;\n-\"#,\n-            expect![[r#\"[my Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n-        );\n-    }\n-\n-    fn check_external_docs(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = fixture::position(ra_fixture);\n-        let url = analysis.external_docs(position).unwrap().expect(\"could not find url for symbol\");\n-\n-        expect.assert_eq(&url)\n-    }\n-\n-    fn check_rewrite(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = fixture::position(ra_fixture);\n-        let sema = &Semantics::new(&*analysis.db);\n-        let (cursor_def, docs) = def_under_cursor(sema, &position);\n-        let res = rewrite_links(sema.db, docs.as_str(), cursor_def);\n-        expect.assert_eq(&res)\n-    }\n-\n-    fn check_doc_links(ra_fixture: &str) {\n-        let key_fn = |&(FileRange { file_id, range }, _): &_| (file_id, range.start());\n-\n-        let (analysis, position, mut expected) = fixture::annotations(ra_fixture);\n-        expected.sort_by_key(key_fn);\n-        let sema = &Semantics::new(&*analysis.db);\n-        let (cursor_def, docs) = def_under_cursor(sema, &position);\n-        let defs = extract_definitions_from_docs(&docs);\n-        let actual: Vec<_> = defs\n-            .into_iter()\n-            .map(|(_, link, ns)| {\n-                let def = resolve_doc_path_for_def(sema.db, cursor_def, &link, ns)\n-                    .unwrap_or_else(|| panic!(\"Failed to resolve {}\", link));\n-                let nav_target = def.try_to_nav(sema.db).unwrap();\n-                let range = FileRange {\n-                    file_id: nav_target.file_id,\n-                    range: nav_target.focus_or_full_range(),\n-                };\n-                (range, link)\n-            })\n-            .sorted_by_key(key_fn)\n-            .collect();\n-        assert_eq!(expected, actual);\n-    }\n-\n-    fn def_under_cursor(\n-        sema: &Semantics<RootDatabase>,\n-        position: &FilePosition,\n-    ) -> (Definition, hir::Documentation) {\n-        let (docs, def) = sema\n-            .parse(position.file_id)\n-            .syntax()\n-            .token_at_offset(position.offset)\n-            .left_biased()\n-            .unwrap()\n-            .ancestors()\n-            .find_map(|it| node_to_def(sema, &it))\n-            .expect(\"no def found\")\n-            .unwrap();\n-        let docs = docs.expect(\"no docs found for cursor def\");\n-        (def, docs)\n-    }\n-\n-    fn node_to_def(\n-        sema: &Semantics<RootDatabase>,\n-        node: &SyntaxNode,\n-    ) -> Option<Option<(Option<hir::Documentation>, Definition)>> {\n-        Some(match_ast! {\n-            match node {\n-                ast::SourceFile(it)  => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Module(def))),\n-                ast::Module(it)      => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Module(def))),\n-                ast::Fn(it)          => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Function(def))),\n-                ast::Struct(it)      => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Adt(hir::Adt::Struct(def)))),\n-                ast::Union(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Adt(hir::Adt::Union(def)))),\n-                ast::Enum(it)        => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Adt(hir::Adt::Enum(def)))),\n-                ast::Variant(it)     => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Variant(def))),\n-                ast::Trait(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Trait(def))),\n-                ast::Static(it)      => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Static(def))),\n-                ast::Const(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Const(def))),\n-                ast::TypeAlias(it)   => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::TypeAlias(def))),\n-                ast::Impl(it)        => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::SelfType(def))),\n-                ast::RecordField(it) => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Field(def))),\n-                ast::TupleField(it)  => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Field(def))),\n-                ast::Macro(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Macro(def))),\n-                // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-                _ => return None,\n-            }\n-        })\n-    }\n-}"}, {"sha": "27a70b18aa07fff1d9ca73f192a57700fee64c9f", "filename": "crates/ide/src/doc_links/tests.rs", "status": "added", "additions": 411, "deletions": 0, "changes": 411, "blob_url": "https://github.com/rust-lang/rust/blob/04a7fbbddb0f2fe7f67c284833f39315cf14082c/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a7fbbddb0f2fe7f67c284833f39315cf14082c/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs?ref=04a7fbbddb0f2fe7f67c284833f39315cf14082c", "patch": "@@ -0,0 +1,411 @@\n+use expect_test::{expect, Expect};\n+use hir::{HasAttrs, Semantics};\n+use ide_db::{\n+    base_db::{FilePosition, FileRange},\n+    defs::Definition,\n+    RootDatabase,\n+};\n+use itertools::Itertools;\n+use syntax::{ast, match_ast, AstNode, SyntaxNode};\n+\n+use crate::{\n+    doc_links::{extract_definitions_from_docs, resolve_doc_path_for_def, rewrite_links},\n+    fixture, TryToNav,\n+};\n+\n+fn check_external_docs(ra_fixture: &str, expect: Expect) {\n+    let (analysis, position) = fixture::position(ra_fixture);\n+    let url = analysis.external_docs(position).unwrap().expect(\"could not find url for symbol\");\n+\n+    expect.assert_eq(&url)\n+}\n+\n+fn check_rewrite(ra_fixture: &str, expect: Expect) {\n+    let (analysis, position) = fixture::position(ra_fixture);\n+    let sema = &Semantics::new(&*analysis.db);\n+    let (cursor_def, docs) = def_under_cursor(sema, &position);\n+    let res = rewrite_links(sema.db, docs.as_str(), cursor_def);\n+    expect.assert_eq(&res)\n+}\n+\n+fn check_doc_links(ra_fixture: &str) {\n+    let key_fn = |&(FileRange { file_id, range }, _): &_| (file_id, range.start());\n+\n+    let (analysis, position, mut expected) = fixture::annotations(ra_fixture);\n+    expected.sort_by_key(key_fn);\n+    let sema = &Semantics::new(&*analysis.db);\n+    let (cursor_def, docs) = def_under_cursor(sema, &position);\n+    let defs = extract_definitions_from_docs(&docs);\n+    let actual: Vec<_> = defs\n+        .into_iter()\n+        .map(|(_, link, ns)| {\n+            let def = resolve_doc_path_for_def(sema.db, cursor_def, &link, ns)\n+                .unwrap_or_else(|| panic!(\"Failed to resolve {}\", link));\n+            let nav_target = def.try_to_nav(sema.db).unwrap();\n+            let range =\n+                FileRange { file_id: nav_target.file_id, range: nav_target.focus_or_full_range() };\n+            (range, link)\n+        })\n+        .sorted_by_key(key_fn)\n+        .collect();\n+    assert_eq!(expected, actual);\n+}\n+\n+fn def_under_cursor(\n+    sema: &Semantics<RootDatabase>,\n+    position: &FilePosition,\n+) -> (Definition, hir::Documentation) {\n+    let (docs, def) = sema\n+        .parse(position.file_id)\n+        .syntax()\n+        .token_at_offset(position.offset)\n+        .left_biased()\n+        .unwrap()\n+        .ancestors()\n+        .find_map(|it| node_to_def(sema, &it))\n+        .expect(\"no def found\")\n+        .unwrap();\n+    let docs = docs.expect(\"no docs found for cursor def\");\n+    (def, docs)\n+}\n+\n+fn node_to_def(\n+    sema: &Semantics<RootDatabase>,\n+    node: &SyntaxNode,\n+) -> Option<Option<(Option<hir::Documentation>, Definition)>> {\n+    Some(match_ast! {\n+        match node {\n+            ast::SourceFile(it)  => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Module(def))),\n+            ast::Module(it)      => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Module(def))),\n+            ast::Fn(it)          => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Function(def))),\n+            ast::Struct(it)      => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Adt(hir::Adt::Struct(def)))),\n+            ast::Union(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Adt(hir::Adt::Union(def)))),\n+            ast::Enum(it)        => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Adt(hir::Adt::Enum(def)))),\n+            ast::Variant(it)     => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Variant(def))),\n+            ast::Trait(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Trait(def))),\n+            ast::Static(it)      => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Static(def))),\n+            ast::Const(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Const(def))),\n+            ast::TypeAlias(it)   => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::TypeAlias(def))),\n+            ast::Impl(it)        => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::SelfType(def))),\n+            ast::RecordField(it) => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Field(def))),\n+            ast::TupleField(it)  => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Field(def))),\n+            ast::Macro(it)       => sema.to_def(&it).map(|def| (def.docs(sema.db), Definition::Macro(def))),\n+            // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            _ => return None,\n+        }\n+    })\n+}\n+\n+#[test]\n+fn external_docs_doc_url_crate() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:main deps:foo\n+use foo$0::Foo;\n+//- /lib.rs crate:foo\n+pub struct Foo;\n+\"#,\n+        expect![[r#\"https://docs.rs/foo/*/foo/index.html\"#]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_std_crate() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:std\n+use self$0;\n+\"#,\n+        expect![[r#\"https://doc.rust-lang.org/nightly/std/index.html\"#]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_struct() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Fo$0o;\n+\"#,\n+        expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_struct_field() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Foo {\n+    field$0: ()\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#structfield.field\"##]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_fn() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub fn fo$0o() {}\n+\"#,\n+        expect![[r#\"https://docs.rs/foo/*/foo/fn.foo.html\"#]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_impl_assoc() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Foo;\n+impl Foo {\n+    pub fn method$0() {}\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n+    );\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Foo;\n+impl Foo {\n+    const CONST$0: () = ();\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_impl_trait_assoc() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Foo;\n+pub trait Trait {\n+    fn method() {}\n+}\n+impl Trait for Foo {\n+    pub fn method$0() {}\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n+    );\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Foo;\n+pub trait Trait {\n+    const CONST: () = ();\n+}\n+impl Trait for Foo {\n+    const CONST$0: () = ();\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n+    );\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Foo;\n+pub trait Trait {\n+    type Type;\n+}\n+impl Trait for Foo {\n+    type Type$0 = ();\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedtype.Type\"##]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_trait_assoc() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub trait Foo {\n+    fn method$0();\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#tymethod.method\"##]],\n+    );\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub trait Foo {\n+    const CONST$0: ();\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedconstant.CONST\"##]],\n+    );\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub trait Foo {\n+    type Type$0;\n+}\n+\"#,\n+        expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedtype.Type\"##]],\n+    );\n+}\n+\n+#[test]\n+fn external_docs_trait() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+trait Trait$0 {}\n+\"#,\n+        expect![[r#\"https://docs.rs/foo/*/foo/trait.Trait.html\"#]],\n+    )\n+}\n+\n+#[test]\n+fn external_docs_module() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub mod foo {\n+    pub mod ba$0r {}\n+}\n+\"#,\n+        expect![[r#\"https://docs.rs/foo/*/foo/foo/bar/index.html\"#]],\n+    )\n+}\n+\n+#[test]\n+fn external_docs_reexport_order() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub mod wrapper {\n+    pub use module::Item;\n+\n+    pub mod module {\n+        pub struct Item;\n+    }\n+}\n+\n+fn foo() {\n+    let bar: wrapper::It$0em;\n+}\n+        \"#,\n+        expect![[r#\"https://docs.rs/foo/*/foo/wrapper/module/struct.Item.html\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_trait_items() {\n+    check_doc_links(\n+        r#\"\n+/// [`Trait`]\n+/// [`Trait::Type`]\n+/// [`Trait::CONST`]\n+/// [`Trait::func`]\n+trait Trait$0 {\n+   // ^^^^^ Trait\n+    type Type;\n+      // ^^^^ Trait::Type\n+    const CONST: usize;\n+       // ^^^^^ Trait::CONST\n+    fn func();\n+    // ^^^^ Trait::func\n+}\n+        \"#,\n+    )\n+}\n+\n+#[test]\n+fn rewrite_html_root_url() {\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+#![doc(arbitrary_attribute = \"test\", html_root_url = \"https:/example.com\", arbitrary_attribute2)]\n+\n+pub mod foo {\n+    pub struct Foo;\n+}\n+/// [Foo](foo::Foo)\n+pub struct B$0ar\n+\"#,\n+        expect![[r#\"[Foo](https://example.com/foo/foo/struct.Foo.html)\"#]],\n+    );\n+}\n+\n+#[test]\n+fn rewrite_on_field() {\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Foo {\n+    /// [Foo](struct.Foo.html)\n+    fie$0ld: ()\n+}\n+\"#,\n+        expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n+    );\n+}\n+\n+#[test]\n+fn rewrite_struct() {\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+/// [Foo]\n+pub struct $0Foo;\n+\"#,\n+        expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n+    );\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+/// [`Foo`]\n+pub struct $0Foo;\n+\"#,\n+        expect![[r#\"[`Foo`](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n+    );\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+/// [Foo](struct.Foo.html)\n+pub struct $0Foo;\n+\"#,\n+        expect![[r#\"[Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n+    );\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+/// [struct Foo](struct.Foo.html)\n+pub struct $0Foo;\n+\"#,\n+        expect![[r#\"[struct Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n+    );\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+/// [my Foo][foo]\n+///\n+/// [foo]: Foo\n+pub struct $0Foo;\n+\"#,\n+        expect![[r#\"[my Foo](https://docs.rs/foo/*/foo/struct.Foo.html)\"#]],\n+    );\n+    // FIXME #11008\n+    check_rewrite(\n+        r#\"\n+//- /main.rs crate:foo\n+/// [`foo`]\n+///\n+/// [`foo`]: Foo\n+pub struct $0Foo;\n+\"#,\n+        expect![[r#\"\n+            [`foo`]\n+\n+            []: https://docs.rs/foo/*/foo/struct.Foo.html\"#]],\n+    );\n+}"}]}