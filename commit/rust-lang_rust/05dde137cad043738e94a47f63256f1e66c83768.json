{"sha": "05dde137cad043738e94a47f63256f1e66c83768", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZGRlMTM3Y2FkMDQzNzM4ZTk0YTQ3ZjYzMjU2ZjFlNjZjODM3Njg=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-11-18T23:10:43Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-11-18T23:10:43Z"}, "message": "Make PackedFingerprint's Fingerprint private", "tree": {"sha": "d4790750fafb14b96cc7864d0687e37eaa4e8b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4790750fafb14b96cc7864d0687e37eaa4e8b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05dde137cad043738e94a47f63256f1e66c83768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05dde137cad043738e94a47f63256f1e66c83768", "html_url": "https://github.com/rust-lang/rust/commit/05dde137cad043738e94a47f63256f1e66c83768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05dde137cad043738e94a47f63256f1e66c83768/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f09d474836d14811af1f9ebead4c1649c54e4e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09d474836d14811af1f9ebead4c1649c54e4e4c", "html_url": "https://github.com/rust-lang/rust/commit/f09d474836d14811af1f9ebead4c1649c54e4e4c"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "01efcaf6f448d8f59778dce8a3e8989bd50fd441", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=05dde137cad043738e94a47f63256f1e66c83768", "patch": "@@ -170,9 +170,12 @@ impl FingerprintDecoder for opaque::Decoder<'_> {\n // `DepNode`s. As of this writing, the size of a `DepNode` decreases by ~30%\n // (from 24 bytes to 17) by using the packed representation here, which\n // noticeably decreases total memory usage when compiling large crates.\n+//\n+// The wrapped `Fingerprint` is private to reduce the chance of a client\n+// invoking undefined behavior by taking a reference to the packed field.\n #[cfg_attr(any(target_arch = \"x86\", target_arch = \"x86_64\"), repr(packed))]\n #[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]\n-pub struct PackedFingerprint(pub Fingerprint);\n+pub struct PackedFingerprint(Fingerprint);\n \n impl std::fmt::Display for PackedFingerprint {\n     #[inline]\n@@ -198,3 +201,17 @@ impl<D: rustc_serialize::Decoder> Decodable<D> for PackedFingerprint {\n         Fingerprint::decode(d).map(|f| PackedFingerprint(f))\n     }\n }\n+\n+impl From<Fingerprint> for PackedFingerprint {\n+    #[inline]\n+    fn from(f: Fingerprint) -> PackedFingerprint {\n+        PackedFingerprint(f)\n+    }\n+}\n+\n+impl From<PackedFingerprint> for Fingerprint {\n+    #[inline]\n+    fn from(f: PackedFingerprint) -> Fingerprint {\n+        f.0\n+    }\n+}"}, {"sha": "38bc3b46b0f15f69cc61a6b408f75e5c0eb9608c", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=05dde137cad043738e94a47f63256f1e66c83768", "patch": "@@ -61,7 +61,7 @@ use crate::traits::query::{\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n-use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n@@ -236,7 +236,7 @@ macro_rules! define_dep_nodes {\n                 debug_assert!(kind.can_reconstruct_query_key() && kind.has_params());\n                 DepNode {\n                     kind,\n-                    hash: PackedFingerprint(def_path_hash.0),\n+                    hash: def_path_hash.0.into(),\n                 }\n             }\n \n@@ -252,7 +252,7 @@ macro_rules! define_dep_nodes {\n             /// has been removed.\n             fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n-                    let def_path_hash = DefPathHash(self.hash.0);\n+                    let def_path_hash = DefPathHash(self.hash.into());\n                     tcx.def_path_hash_to_def_id.as_ref()?.get(&def_path_hash).cloned()\n                 } else {\n                     None"}, {"sha": "3d9e739cd28c7e92803e7c408afbbd633e3f6c4c", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=05dde137cad043738e94a47f63256f1e66c83768", "patch": "@@ -62,7 +62,7 @@ impl<K: DepKind> DepNode<K> {\n     /// does not require any parameters.\n     pub fn new_no_params(kind: K) -> DepNode<K> {\n         debug_assert!(!kind.has_params());\n-        DepNode { kind, hash: PackedFingerprint(Fingerprint::ZERO) }\n+        DepNode { kind, hash: Fingerprint::ZERO.into() }\n     }\n \n     pub fn construct<Ctxt, Key>(tcx: Ctxt, kind: K, arg: &Key) -> DepNode<K>\n@@ -71,7 +71,7 @@ impl<K: DepKind> DepNode<K> {\n         Key: DepNodeParams<Ctxt>,\n     {\n         let hash = arg.to_fingerprint(tcx);\n-        let dep_node = DepNode { kind, hash: PackedFingerprint(hash) };\n+        let dep_node = DepNode { kind, hash: hash.into() };\n \n         #[cfg(debug_assertions)]\n         {"}, {"sha": "617ec84ae71a91226689b2bb4615032d990b9210", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dde137cad043738e94a47f63256f1e66c83768/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=05dde137cad043738e94a47f63256f1e66c83768", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::QueryInvocationId;\n use rustc_data_structures::sharded::{self, Sharded};\n@@ -976,7 +976,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             // Fingerprint::combine() is faster than sending Fingerprint\n             // through the StableHasher (at least as long as StableHasher\n             // is so slow).\n-            hash: PackedFingerprint(self.anon_id_seed.combine(hasher.finish())),\n+            hash: self.anon_id_seed.combine(hasher.finish()).into(),\n         };\n \n         self.intern_node(target_dep_node, task_deps.reads, Fingerprint::ZERO)"}]}