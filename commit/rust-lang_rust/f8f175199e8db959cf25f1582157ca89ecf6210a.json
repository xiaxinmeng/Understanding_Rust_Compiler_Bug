{"sha": "f8f175199e8db959cf25f1582157ca89ecf6210a", "node_id": "C_kwDOAAsO6NoAKGY4ZjE3NTE5OWU4ZGI5NTljZjI1ZjE1ODIxNTdjYTg5ZWNmNjIxMGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-12T11:48:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-12T11:48:53Z"}, "message": "Auto merge of #93933 - matthiaskrgr:rollup-1hjae6g, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91908 (Add 2 tests)\n - #93595 (fix ICE when parsing lifetime as function argument)\n - #93757 (Add some known GAT bugs as tests)\n - #93759 (Pretty print ItemKind::Use in rustfmt style)\n - #93897 (linkchecker: fix panic on directory symlinks)\n - #93898 (tidy: Extend error code check)\n - #93928 (Add missing release notes for #85200)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e97706832717d66ab32f137f22edc560688bd472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e97706832717d66ab32f137f22edc560688bd472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f175199e8db959cf25f1582157ca89ecf6210a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f175199e8db959cf25f1582157ca89ecf6210a", "html_url": "https://github.com/rust-lang/rust/commit/f8f175199e8db959cf25f1582157ca89ecf6210a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f175199e8db959cf25f1582157ca89ecf6210a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d", "html_url": "https://github.com/rust-lang/rust/commit/9cdefd763b910ffd1d42233a8c752ab5fd84ca4d"}, {"sha": "0e3ecd28fd6b3671b62e91661797f20a3f9c7deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3ecd28fd6b3671b62e91661797f20a3f9c7deb", "html_url": "https://github.com/rust-lang/rust/commit/0e3ecd28fd6b3671b62e91661797f20a3f9c7deb"}], "stats": {"total": 675, "additions": 644, "deletions": 31}, "files": [{"sha": "a9422fa103ed83006cf055d19060b59395138a8a", "filename": "RELEASES.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -156,6 +156,7 @@ Language\n - [Macro attributes may follow `#[derive]` and will see the original (pre-`cfg`) input.][87220]\n - [Accept curly-brace macros in expressions, like `m!{ .. }.method()` and `m!{ .. }?`.][88690]\n - [Allow panicking in constant evaluation.][89508]\n+- [Ignore derived `Clone` and `Debug` implementations during dead code analysis.][85200]\n \n Compiler\n --------\n@@ -216,6 +217,9 @@ Cargo\n Compatibility notes\n -------------------\n \n+- [Ignore derived `Clone` and `Debug` implementations during dead code analysis.][85200]\n+  This will break some builds that set `#![deny(dead_code)]`.\n+\n Internal changes\n ----------------\n These changes provide no direct user facing benefits, but represent significant\n@@ -224,6 +228,7 @@ and related tools.\n \n - [Added an experimental backend for codegen with `libgccjit`.][87260]\n \n+[85200]: https://github.com/rust-lang/rust/pull/85200/\n [86191]: https://github.com/rust-lang/rust/pull/86191/\n [87220]: https://github.com/rust-lang/rust/pull/87220/\n [87260]: https://github.com/rust-lang/rust/pull/87260/"}, {"sha": "93310dd45c575783e54e04eaa72c3d85105466f6", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -75,6 +75,10 @@ impl Printer {\n     }\n \n     pub fn trailing_comma(&mut self) {\n+        self.scan_break(BreakToken { pre_break: Some(','), ..BreakToken::default() });\n+    }\n+\n+    pub fn trailing_comma_or_space(&mut self) {\n         self.scan_break(BreakToken {\n             blank_space: 1,\n             pre_break: Some(','),"}, {"sha": "6435f1b6141e35a66c82211ab67a2b27883ad402", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -142,7 +142,7 @@ impl<'a> State<'a> {\n             if !field.is_last || has_rest {\n                 self.word_space(\",\");\n             } else {\n-                self.trailing_comma();\n+                self.trailing_comma_or_space();\n             }\n         }\n         if has_rest {"}, {"sha": "d7e9ef0e50dd864e92700acdaa9d6a1809f0fa77", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -1,5 +1,6 @@\n use crate::pp::Breaks::Inconsistent;\n-use crate::pprust::state::{AnnNode, PrintState, State};\n+use crate::pprust::state::delimited::IterDelimited;\n+use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n \n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n@@ -138,11 +139,10 @@ impl<'a> State<'a> {\n                 self.end(); // end outer head-block\n             }\n             ast::ItemKind::Use(ref tree) => {\n-                self.head(visibility_qualified(&item.vis, \"use\"));\n+                self.print_visibility(&item.vis);\n+                self.word_nbsp(\"use\");\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n-                self.end(); // end inner head-block\n-                self.end(); // end outer head-block\n             }\n             ast::ItemKind::Static(ref ty, mutbl, ref body) => {\n                 let def = ast::Defaultness::Final;\n@@ -615,8 +615,8 @@ impl<'a> State<'a> {\n             ast::UseTreeKind::Simple(rename, ..) => {\n                 self.print_path(&tree.prefix, false, 0);\n                 if let Some(rename) = rename {\n-                    self.space();\n-                    self.word_space(\"as\");\n+                    self.nbsp();\n+                    self.word_nbsp(\"as\");\n                     self.print_ident(rename);\n                 }\n             }\n@@ -628,16 +628,36 @@ impl<'a> State<'a> {\n                 self.word(\"*\");\n             }\n             ast::UseTreeKind::Nested(ref items) => {\n-                if tree.prefix.segments.is_empty() {\n-                    self.word(\"{\");\n-                } else {\n+                if !tree.prefix.segments.is_empty() {\n                     self.print_path(&tree.prefix, false, 0);\n-                    self.word(\"::{\");\n+                    self.word(\"::\");\n+                }\n+                if items.is_empty() {\n+                    self.word(\"{}\");\n+                } else if items.len() == 1 {\n+                    self.print_use_tree(&items[0].0);\n+                } else {\n+                    self.cbox(INDENT_UNIT);\n+                    self.word(\"{\");\n+                    self.zerobreak();\n+                    self.ibox(0);\n+                    for use_tree in items.iter().delimited() {\n+                        self.print_use_tree(&use_tree.0);\n+                        if !use_tree.is_last {\n+                            self.word(\",\");\n+                            if let ast::UseTreeKind::Nested(_) = use_tree.0.kind {\n+                                self.hardbreak();\n+                            } else {\n+                                self.space();\n+                            }\n+                        }\n+                    }\n+                    self.end();\n+                    self.trailing_comma();\n+                    self.offset(-INDENT_UNIT);\n+                    self.word(\"}\");\n+                    self.end();\n                 }\n-                self.commasep(Inconsistent, &items, |this, &(ref tree, _)| {\n-                    this.print_use_tree(tree)\n-                });\n-                self.word(\"}\");\n             }\n         }\n     }"}, {"sha": "a72681dbf4e7ede9866d2b620ec9e071cdf3627a", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -97,6 +97,7 @@ E0184: include_str!(\"./error_codes/E0184.md\"),\n E0185: include_str!(\"./error_codes/E0185.md\"),\n E0186: include_str!(\"./error_codes/E0186.md\"),\n E0191: include_str!(\"./error_codes/E0191.md\"),\n+E0192: include_str!(\"./error_codes/E0192.md\"),\n E0193: include_str!(\"./error_codes/E0193.md\"),\n E0195: include_str!(\"./error_codes/E0195.md\"),\n E0197: include_str!(\"./error_codes/E0197.md\"),\n@@ -522,7 +523,6 @@ E0787: include_str!(\"./error_codes/E0787.md\"),\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n-//  E0192, // negative impl only applicable to auto traits\n //  E0194, // merged into E0403\n //  E0196, // cannot determine a type for this closure\n     E0208,"}, {"sha": "deca042a91a5054b30c4a7e29cac91c5f8e31a11", "filename": "compiler/rustc_error_codes/src/error_codes/E0192.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0192.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0192.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0192.md?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -1,15 +1,17 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A negative impl was added on a trait implementation.\n \n Erroneous code example:\n \n-```compile_fail,E0192\n+```compile_fail\n trait Trait {\n     type Bar;\n }\n \n struct Foo;\n \n-impl !Trait for Foo { } //~ ERROR E0192\n+impl !Trait for Foo { } //~ ERROR\n \n fn main() {}\n ```"}, {"sha": "e9aa4adcaf79bae5faddf019378d84bf3f8b5e29", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -1457,9 +1457,9 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n             self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)\n         } else if !ate_colon && (self.check(&TokenKind::Comma) || self.check(&TokenKind::Gt)) {\n-            // We're probably inside of a `Path<'a>` that needs a turbofish, so suppress the\n-            // \"must be followed by a colon\" error, and the \"expected one of\" error.\n-            self.diagnostic().delay_span_bug(lo, \"this label wasn't parsed correctly\");\n+            // We're probably inside of a `Path<'a>` that needs a turbofish\n+            let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n+            self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();\n             consume_colon = false;\n             Ok(self.mk_expr_err(lo))\n         } else {"}, {"sha": "5da9523524552148852a956ed472f9b8920cad69", "filename": "src/test/pretty/use-tree.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fpretty%2Fuse-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fpretty%2Fuse-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fuse-tree.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,23 @@\n+// pp-exact\n+// edition:2021\n+\n+#![allow(unused_imports)]\n+\n+use ::std::fmt::{self, Debug, Display, Write as _};\n+\n+use core::option::Option::*;\n+\n+use core::{\n+    cmp::{Eq, Ord, PartialEq, PartialOrd},\n+    convert::{AsMut, AsRef, From, Into},\n+    iter::{\n+        DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator,\n+        IntoIterator, Iterator,\n+    },\n+    marker::{\n+        Copy as Copy, Send as Send, Sized as Sized, Sync as Sync, Unpin as U,\n+    },\n+    ops::{*, Drop, Fn, FnMut, FnOnce},\n+};\n+\n+fn main() {}"}, {"sha": "109c2eed27a334e21af279913170cf8028aa3142", "filename": "src/test/ui/associated-types/issue-91069.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91069.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91069.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-91069.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+pub trait Associate {\n+    type Associated;\n+}\n+\n+pub struct Wrap<'a> {\n+    pub field: &'a i32,\n+}\n+\n+pub trait Create<T> {\n+    fn create() -> Self;\n+}\n+\n+pub fn oh_no<'a, T>()\n+where\n+    Wrap<'a>: Associate,\n+    <Wrap<'a> as Associate>::Associated: Create<T>,\n+{\n+    <Wrap<'a> as Associate>::Associated::create();\n+}\n+\n+\n+pub fn main() {}"}, {"sha": "aea8aaf4bb3939285745cb28bbfe20af3de80f4d", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,17 @@\n+// check-fail\n+\n+// This should pass, but it requires `Sized` to be coinductive.\n+\n+#![feature(generic_associated_types)]\n+\n+trait Allocator {\n+    type Allocated<T>;\n+}\n+\n+enum LinkedList<A: Allocator> {\n+    Head,\n+    Next(A::Allocated<Self>)\n+    //~^ overflow\n+}\n+\n+fn main() {}"}, {"sha": "e18af9c257f7ffa6c18cf8b3b4d6a8c584d13135", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,20 @@\n+error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n+  --> $DIR/issue-80626.rs:13:10\n+   |\n+LL |     Next(A::Allocated<Self>)\n+   |          ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: no field of an enum variant may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     Next(&A::Allocated<Self>)\n+   |          +\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     Next(Box<A::Allocated<Self>>)\n+   |          ++++                  +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "3f8776a363770301165c638152c612b874a8e8a3", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,27 @@\n+// check-fail\n+\n+// This should pass, but seems to run into a TAIT issue.\n+\n+#![feature(generic_associated_types)]\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait Stream {\n+    type Item;\n+}\n+\n+impl Stream for () {\n+    type Item = i32;\n+}\n+\n+trait Yay<AdditionalValue> {\n+    type InnerStream<'s>: Stream<Item = i32> + 's;\n+    fn foo<'s>() -> Self::InnerStream<'s>;\n+}\n+\n+impl<'a> Yay<&'a ()> for () {\n+    type InnerStream<'s> = impl Stream<Item = i32> + 's;\n+    //~^ the type\n+    fn foo<'s>() -> Self::InnerStream<'s> { todo!() }\n+}\n+\n+fn main() {}"}, {"sha": "9f4efc0addb735ec74be590c3d683543bd406172", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,15 @@\n+error[E0477]: the type `impl Stream<Item = i32>` does not fulfill the required lifetime\n+  --> $DIR/issue-86218.rs:22:28\n+   |\n+LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must outlive the lifetime `'s` as defined here as required by this binding\n+  --> $DIR/issue-86218.rs:22:22\n+   |\n+LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n+   |                      ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "5f7a42a740df67282b0c84bc20cc9c2023c1e61e", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,45 @@\n+// check-fail\n+\n+// This should pass, but we need an extension of implied bounds (probably).\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait AsRef2 {\n+  type Output<'a> where Self: 'a;\n+\n+  fn as_ref2<'a>(&'a self) -> Self::Output<'a>;\n+}\n+\n+impl<T> AsRef2 for Vec<T> {\n+  type Output<'a> where Self: 'a = &'a [T];\n+\n+  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\n+    &self[..]\n+  }\n+}\n+\n+#[derive(Debug)]\n+struct Foo<T>(T);\n+#[derive(Debug)]\n+struct FooRef<'a, U>(&'a [U]);\n+\n+impl<'b, T, U> AsRef2 for Foo<T> //~ the type parameter\n+where\n+    // * `for<'b, 'c> T: AsRef2<Output<'b> = &'c [U]>>` does not work\n+    //\n+    // * `U` is unconstrained but should be allowed in this context because `Output` is\n+    // an associated type\n+    T: AsRef2<Output<'b> = &'b [U]>,\n+    U: 'b\n+{\n+  type Output<'a> where Self: 'a = FooRef<'a, U>;\n+\n+  fn as_ref2<'a>(&'a self) -> Self::Output<'a> {\n+    FooRef(self.0.as_ref2())\n+  }\n+}\n+\n+fn main() {\n+    let foo = Foo(vec![1, 2, 3]);\n+    dbg!(foo.as_ref2());\n+}"}, {"sha": "31b3a9619b6af5d1ab703c5ceb0b921baf9624f0", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `U` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-87735.rs:26:13\n+   |\n+LL | impl<'b, T, U> AsRef2 for Foo<T>\n+   |             ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "4dbaf429ead26b8e33c4a700e7f206d1b891bcdb", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,22 @@\n+// check-fail\n+\n+// This should pass, but unnormalized input args aren't treated as implied.\n+\n+#![feature(generic_associated_types)]\n+\n+trait MyTrait {\n+    type Assoc<'a, 'b> where 'b: 'a;\n+    fn do_sth(arg: Self::Assoc<'_, '_>);\n+}\n+\n+struct Foo;\n+\n+impl MyTrait for Foo {\n+    type Assoc<'a, 'b> where 'b: 'a = u32;\n+\n+    fn do_sth(_: u32) {} //~ lifetime bound\n+    // fn do_sth(_: Self::Assoc<'static, 'static>) {}\n+    // fn do_sth(_: Self::Assoc<'_, '_>) {}\n+}\n+\n+fn main() {}"}, {"sha": "c38d44785923327406414d9408914d36940250ef", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,20 @@\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/issue-87748.rs:17:5\n+   |\n+LL |     fn do_sth(_: u32) {}\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the anonymous lifetime #2 defined here\n+  --> $DIR/issue-87748.rs:17:5\n+   |\n+LL |     fn do_sth(_: u32) {}\n+   |     ^^^^^^^^^^^^^^^^^\n+note: but lifetime parameter must outlive the anonymous lifetime #1 defined here\n+  --> $DIR/issue-87748.rs:17:5\n+   |\n+LL |     fn do_sth(_: u32) {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0478`."}, {"sha": "1cd3534ba77a0bcc992eec026a7df030cf252ad1", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,21 @@\n+// check-fail\n+\n+// This should pass.\n+\n+#![feature(generic_associated_types)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    type Ass where Self::Ass: Debug;\n+}\n+\n+#[derive(Debug)]\n+struct Bar;\n+\n+impl Foo for Bar {\n+    type Ass = Bar;\n+    //~^ overflow\n+}\n+\n+fn main() {}"}, {"sha": "d2dc991a2b6408c36e1e7f37674ea83f8d82e6d0", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,9 @@\n+error[E0275]: overflow evaluating the requirement `<Bar as Foo>::Ass == _`\n+  --> $DIR/issue-87755.rs:17:16\n+   |\n+LL |     type Ass = Bar;\n+   |                ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "3d2ff38ab049e9dc289ee2c2ae16e5249d40d18c", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,26 @@\n+// check-fail\n+\n+// This should pass, but using a type alias vs a reference directly\n+// changes late-bound -> early-bound.\n+\n+#![feature(generic_associated_types)]\n+\n+trait Scanner {\n+    type Input<'a>;\n+    type Token<'a>;\n+\n+    fn scan<'a>(&mut self, i : Self::Input<'a>) -> Self::Token<'a>;\n+}\n+\n+struct IdScanner();\n+\n+impl Scanner for IdScanner {\n+    type Input<'a> = &'a str;\n+    type Token<'a> = &'a str;\n+\n+    fn scan<'a>(&mut self, s : &'a str) -> &'a str { //~ lifetime parameters\n+        s\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "759c0440d07ba12ed103f9d9c305fd058f878b07", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,12 @@\n+error[E0195]: lifetime parameters or bounds on method `scan` do not match the trait declaration\n+  --> $DIR/issue-87803.rs:21:12\n+   |\n+LL |     fn scan<'a>(&mut self, i : Self::Input<'a>) -> Self::Token<'a>;\n+   |            ---- lifetimes in impl do not match this method in trait\n+...\n+LL |     fn scan<'a>(&mut self, s : &'a str) -> &'a str {\n+   |            ^^^^ lifetimes do not match method in trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0195`."}, {"sha": "f4633ca5169999188f573667cb6631e3324be70f", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,31 @@\n+// check-fail\n+\n+// This should pass, but has a missed normalization due to HRTB.\n+\n+#![feature(generic_associated_types)]\n+\n+trait Iterable {\n+    type Iterator<'a> where Self: 'a;\n+    fn iter(&self) -> Self::Iterator<'_>;\n+}\n+\n+struct SomeImplementation();\n+\n+impl Iterable for SomeImplementation {\n+    type Iterator<'a> = std::iter::Empty<usize>;\n+    fn iter(&self) -> Self::Iterator<'_> {\n+        std::iter::empty()\n+    }\n+}\n+\n+fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n+    f(&mut i.iter());\n+}\n+\n+fn main() {\n+    do_something(SomeImplementation(), |_| ());\n+    do_something(SomeImplementation(), test);\n+    //~^ type mismatch\n+}\n+\n+fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}"}, {"sha": "05bc58cbba4e6062da43b0cb67b5fe9a8c12b9f6", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,20 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/issue-88382.rs:27:40\n+   |\n+LL |     do_something(SomeImplementation(), test);\n+   |     ------------                       ^^^^ expected signature of `for<'a> fn(&mut <SomeImplementation as Iterable>::Iterator<'a>) -> _`\n+   |     |\n+   |     required by a bound introduced by this call\n+...\n+LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n+   | ------------------------------------------------- found signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n+   |\n+note: required by a bound in `do_something`\n+  --> $DIR/issue-88382.rs:21:56\n+   |\n+LL | fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `do_something`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "7e62790cc50c309e18f3da973702f1d4c44dd15e", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,31 @@\n+// check-fail\n+\n+// This should pass, but has a missed normalization due to HRTB.\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Marker {}\n+\n+pub trait Trait {\n+    type Assoc<'a>;\n+}\n+\n+fn test<T>(value: T)\n+where\n+    T: Trait,\n+    for<'a> T::Assoc<'a>: Marker,\n+{\n+}\n+\n+impl Marker for () {}\n+\n+struct Foo;\n+\n+impl Trait for Foo {\n+    type Assoc<'a> = ();\n+}\n+\n+fn main() {\n+    test(Foo);\n+    //~^ the trait bound\n+}"}, {"sha": "604658da7d2c2adcaa25c43a825f8d7871059d7e", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not satisfied\n+  --> $DIR/issue-88460.rs:29:5\n+   |\n+LL |     test(Foo);\n+   |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n+   |\n+note: required by a bound in `test`\n+  --> $DIR/issue-88460.rs:16:27\n+   |\n+LL | fn test<T>(value: T)\n+   |    ---- required by a bound in this\n+...\n+LL |     for<'a> T::Assoc<'a>: Marker,\n+   |                           ^^^^^^ required by this bound in `test`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "90568fcb40125181fe4448a1905021a07841783d", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,34 @@\n+// check-fail\n+\n+// This should pass, but requires more logic.\n+\n+#![feature(generic_associated_types)]\n+\n+trait A {\n+    type I<'a>;\n+}\n+\n+pub struct TestA<F>\n+{\n+    f: F,\n+}\n+\n+impl<F> A for TestA<F> {\n+    type I<'a> = &'a F;\n+}\n+\n+struct TestB<Q, F>\n+{\n+    q: Q,\n+    f: F,\n+}\n+\n+impl<'q, Q, I, F> A for TestB<Q, F> //~ the type parameter\n+where\n+    Q: A<I<'q> = &'q I>,\n+    F: Fn(I),\n+{\n+    type I<'a> = ();\n+}\n+\n+fn main() {}"}, {"sha": "ccc5ae0b621a103214db7455c15e0e09dd787687", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `I` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-88526.rs:26:13\n+   |\n+LL | impl<'q, Q, I, F> A for TestB<Q, F>\n+   |             ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "5d850849fd21cc9931fe46d9b5d22d094ba25a37", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,43 @@\n+// check-fail\n+// edition:2021\n+\n+// This should pass, but seems to run into a TAIT bug.\n+\n+#![feature(type_alias_impl_trait)]\n+#![feature(generic_associated_types)]\n+\n+use std::future::Future;\n+\n+trait Stream {\n+    type Item;\n+}\n+\n+struct Empty<T>(T);\n+impl<T> Stream for Empty<T> {\n+    type Item = ();\n+}\n+fn empty<T>() -> Empty<T> {\n+    todo!()\n+}\n+\n+trait X {\n+    type LineStream<'a, Repr>: Stream<Item = Repr> where Self: 'a;\n+\n+    type LineStreamFut<'a,Repr>: Future<Output = Self::LineStream<'a, Repr>> where Self: 'a;\n+\n+    fn line_stream<'a,Repr>(&'a self) -> Self::LineStreamFut<'a,Repr>;\n+}\n+\n+struct Y;\n+\n+impl X for Y {\n+    type LineStream<'a, Repr> = impl Stream<Item = Repr>; //~ could not find\n+\n+    type LineStreamFut<'a, Repr> = impl Future<Output = Self::LineStream<'a, Repr>> ;\n+\n+    fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> { //~ type mismatch\n+        async {empty()}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "48745fe0fbd96d308abf327c170b10cad8e6678f", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,21 @@\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == impl Stream<Item = Repr>`\n+  --> $DIR/issue-89008.rs:38:43\n+   |\n+LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n+   |                                 ------------------------ the expected opaque type\n+...\n+LL |     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found struct `Empty`\n+   |\n+   = note: expected opaque type `impl Stream<Item = Repr>`\n+                   found struct `Empty<_>`\n+\n+error: could not find defining uses\n+  --> $DIR/issue-89008.rs:34:33\n+   |\n+LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "2b82d2946b3ba11b6e47a39fa35914426ac5bf90", "filename": "src/test/ui/generic-associated-types/issue-91139.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Foo<T> {\n+    type Type<'a>\n+    where\n+        T: 'a;\n+}\n+\n+impl<T> Foo<T> for () {\n+    type Type<'a>\n+    where\n+        T: 'a,\n+    = ();\n+}\n+\n+fn foo<T>() {\n+    let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+}\n+\n+pub fn main() {}"}, {"sha": "261fcb5f9183e9a34b42b74ac1c1ecc95e44c556", "filename": "src/test/ui/parser/issues/issue-93282.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -1,4 +1,15 @@\n fn main() {\n     f<'a,>\n     //~^ ERROR expected\n+    //~| ERROR expected\n+}\n+\n+fn bar(a: usize, b: usize) -> usize {\n+    a + b\n+}\n+\n+fn foo() {\n+    let x = 1;\n+    bar('y, x);\n+    //~^ ERROR expected\n }"}, {"sha": "900f21a7ccef461ae7465a9c8f3d846439dadd5e", "filename": "src/test/ui/parser/issues/issue-93282.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-93282.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -1,3 +1,9 @@\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/issue-93282.rs:2:9\n+   |\n+LL |     f<'a,>\n+   |         ^ expected `while`, `for`, `loop` or `{` after a label\n+\n error: expected one of `.`, `:`, `;`, `?`, `for`, `loop`, `while`, `{`, `}`, or an operator, found `,`\n   --> $DIR/issue-93282.rs:2:9\n    |\n@@ -9,5 +15,11 @@ help: use `::<...>` instead of `<...>` to specify lifetime, type, or const argum\n LL |     f::<'a,>\n    |      ++\n \n-error: aborting due to previous error\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/issue-93282.rs:13:11\n+   |\n+LL |     bar('y, x);\n+   |           ^ expected `while`, `for`, `loop` or `{` after a label\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "f29fd7a5472d45ce75e870a02b78979c0e94f921", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -22,10 +22,12 @@ fn main() {\n     let _ = f<'_, i8>();\n     //~^ ERROR expected one of\n     //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+    //~| ERROR expected\n \n     f<'_>();\n     //~^ comparison operators cannot be chained\n     //~| HELP use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n+    //~| ERROR expected\n \n     let _ = f<u8>;\n     //~^ ERROR comparison operators cannot be chained"}, {"sha": "92d700753dc1b24665bce4e45eb9e056f363e215", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -53,6 +53,12 @@ help: use `::<...>` instead of `<...>` to specify lifetime, type, or const argum\n LL |     let _ = f::<u8, i8>();\n    |              ++\n \n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/require-parens-for-chained-comparison.rs:22:17\n+   |\n+LL |     let _ = f<'_, i8>();\n+   |                 ^ expected `while`, `for`, `loop` or `{` after a label\n+\n error: expected one of `.`, `:`, `;`, `?`, `else`, `for`, `loop`, `while`, `{`, or an operator, found `,`\n   --> $DIR/require-parens-for-chained-comparison.rs:22:17\n    |\n@@ -64,8 +70,14 @@ help: use `::<...>` instead of `<...>` to specify lifetime, type, or const argum\n LL |     let _ = f::<'_, i8>();\n    |              ++\n \n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/require-parens-for-chained-comparison.rs:27:9\n+   |\n+LL |     f<'_>();\n+   |         ^ expected `while`, `for`, `loop` or `{` after a label\n+\n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:26:6\n+  --> $DIR/require-parens-for-chained-comparison.rs:27:6\n    |\n LL |     f<'_>();\n    |      ^  ^\n@@ -76,13 +88,13 @@ LL |     f::<'_>();\n    |      ++\n \n error: comparison operators cannot be chained\n-  --> $DIR/require-parens-for-chained-comparison.rs:30:14\n+  --> $DIR/require-parens-for-chained-comparison.rs:32:14\n    |\n LL |     let _ = f<u8>;\n    |              ^  ^\n    |\n    = help: use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "46daaf42883f026a2e675247ae3fd3c4c6f79d12", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -182,8 +182,9 @@ impl Checker {\n     fn walk(&mut self, dir: &Path, report: &mut Report) {\n         for entry in t!(dir.read_dir()).map(|e| t!(e)) {\n             let path = entry.path();\n-            let kind = t!(entry.file_type());\n-            if kind.is_dir() {\n+            // Goes through symlinks\n+            let metadata = t!(fs::metadata(&path));\n+            if metadata.is_dir() {\n                 self.walk(&path, report);\n             } else {\n                 self.check(&path, report);"}, {"sha": "2a23d72edc06409029ebc5f1d631c662f56b833b", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f175199e8db959cf25f1582157ca89ecf6210a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=f8f175199e8db959cf25f1582157ca89ecf6210a", "patch": "@@ -1,7 +1,7 @@\n //! Checks that all error codes have at least one test to prevent having error\n //! codes that are silently not thrown by the compiler anymore.\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n use std::fs::read_to_string;\n use std::path::Path;\n@@ -205,6 +205,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     let mut found_explanations = 0;\n     let mut found_tests = 0;\n     let mut error_codes: HashMap<String, ErrorCodeStatus> = HashMap::new();\n+    let mut explanations: HashSet<String> = HashSet::new();\n     // We want error codes which match the following cases:\n     //\n     // * foo(a, E0111, a)\n@@ -218,17 +219,27 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     for path in paths {\n         super::walk(path, &mut |path| super::filter_dirs(path), &mut |entry, contents| {\n             let file_name = entry.file_name();\n+            let entry_path = entry.path();\n+\n             if file_name == \"error_codes.rs\" {\n                 extract_error_codes(contents, &mut error_codes, entry.path(), &mut errors);\n                 found_explanations += 1;\n-            } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n+            } else if entry_path.extension() == Some(OsStr::new(\"stderr\")) {\n                 extract_error_codes_from_tests(contents, &mut error_codes);\n                 found_tests += 1;\n-            } else if entry.path().extension() == Some(OsStr::new(\"rs\")) {\n+            } else if entry_path.extension() == Some(OsStr::new(\"rs\")) {\n                 let path = entry.path().to_string_lossy();\n                 if PATHS_TO_IGNORE_FOR_EXTRACTION.iter().all(|c| !path.contains(c)) {\n                     extract_error_codes_from_source(contents, &mut error_codes, &regex);\n                 }\n+            } else if entry_path\n+                .parent()\n+                .and_then(|p| p.file_name())\n+                .map(|p| p == \"error_codes\")\n+                .unwrap_or(false)\n+                && entry_path.extension() == Some(OsStr::new(\"md\"))\n+            {\n+                explanations.insert(file_name.to_str().unwrap().replace(\".md\", \"\"));\n             }\n         });\n     }\n@@ -240,6 +251,10 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n         eprintln!(\"No error code was found in compilation errors!\");\n         *bad = true;\n     }\n+    if explanations.is_empty() {\n+        eprintln!(\"No error code explanation was found!\");\n+        *bad = true;\n+    }\n     if errors.is_empty() {\n         println!(\"Found {} error codes\", error_codes.len());\n \n@@ -282,11 +297,21 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n             }\n         }\n     }\n+    if errors.is_empty() {\n+        for explanation in explanations {\n+            if !error_codes.contains_key(&explanation) {\n+                errors.push(format!(\n+                    \"{} error code explanation should be listed in `error_codes.rs`\",\n+                    explanation\n+                ));\n+            }\n+        }\n+    }\n     errors.sort();\n     for err in &errors {\n         eprintln!(\"{}\", err);\n     }\n-    println!(\"Found {} error codes with no tests\", errors.len());\n+    println!(\"Found {} error(s) in error codes\", errors.len());\n     if !errors.is_empty() {\n         *bad = true;\n     }"}]}