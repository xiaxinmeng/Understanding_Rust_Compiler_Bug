{"sha": "33d80bfaa0f2a4ca996a942e6d65a932e72fec1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZDgwYmZhYTBmMmE0Y2E5OTZhOTQyZTZkNjVhOTMyZTcyZmVjMWI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-02-13T22:07:08Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-02-13T22:07:08Z"}, "message": "Return without a reference in unix Weak::get()", "tree": {"sha": "bdbd444d45849d80840347a43d226d95c081e296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbd444d45849d80840347a43d226d95c081e296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b", "html_url": "https://github.com/rust-lang/rust/commit/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c5af85e09be583128df5eda6b4de25a23387c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c5af85e09be583128df5eda6b4de25a23387c1", "html_url": "https://github.com/rust-lang/rust/commit/70c5af85e09be583128df5eda6b4de25a23387c1"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "b60e241f10ceee698ddfcf65acbad46ae76b967f", "filename": "src/libstd/sys/unix/weak.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fweak.rs?ref=33d80bfaa0f2a4ca996a942e6d65a932e72fec1b", "patch": "@@ -45,16 +45,15 @@ impl<F> Weak<F> {\n         }\n     }\n \n-    pub fn get(&self) -> Option<&F> {\n+    pub fn get(&self) -> Option<F> {\n         assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n         unsafe {\n             if self.addr.load(Ordering::SeqCst) == 1 {\n                 self.addr.store(fetch(self.name), Ordering::SeqCst);\n             }\n-            if self.addr.load(Ordering::SeqCst) == 0 {\n-                None\n-            } else {\n-                mem::transmute::<&AtomicUsize, Option<&F>>(&self.addr)\n+            match self.addr.load(Ordering::SeqCst) {\n+                0 => None,\n+                addr => Some(mem::transmute_copy::<usize, F>(&addr)),\n             }\n         }\n     }"}]}