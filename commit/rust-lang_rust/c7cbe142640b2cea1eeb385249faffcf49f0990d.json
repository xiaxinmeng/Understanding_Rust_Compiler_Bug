{"sha": "c7cbe142640b2cea1eeb385249faffcf49f0990d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Y2JlMTQyNjQwYjJjZWExZWViMzg1MjQ5ZmFmZmNmNDlmMDk5MGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-12T23:47:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-12T23:47:10Z"}, "message": "Auto merge of #48955 - kennytm:rollup, r=kennytm\n\nRollup of 13 pull requests\n\n- Successful merges: #48201, #48705, #48725, #48824, #48877, #48880, #48887, #48928, #48934, #48480, #48631, #48898, #48954\n- Failed merges:", "tree": {"sha": "1a1177f544911d4739febbd995bddfc4c418edd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a1177f544911d4739febbd995bddfc4c418edd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7cbe142640b2cea1eeb385249faffcf49f0990d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cbe142640b2cea1eeb385249faffcf49f0990d", "html_url": "https://github.com/rust-lang/rust/commit/c7cbe142640b2cea1eeb385249faffcf49f0990d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7cbe142640b2cea1eeb385249faffcf49f0990d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883e74645d350b6752cb94d48f46363f6f8789e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/883e74645d350b6752cb94d48f46363f6f8789e9", "html_url": "https://github.com/rust-lang/rust/commit/883e74645d350b6752cb94d48f46363f6f8789e9"}, {"sha": "99d0ac0b65452642e56619a84e2b83717ee35297", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d0ac0b65452642e56619a84e2b83717ee35297", "html_url": "https://github.com/rust-lang/rust/commit/99d0ac0b65452642e56619a84e2b83717ee35297"}], "stats": {"total": 489, "additions": 222, "deletions": 267}, "files": [{"sha": "d70b2b52aca1b136d70617a03d04b5c7bccd9969", "filename": "CODE_OF_CONDUCT.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/CODE_OF_CONDUCT.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/CODE_OF_CONDUCT.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CODE_OF_CONDUCT.md?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -11,9 +11,9 @@ A version of this document [can be found online](https://www.rust-lang.org/condu\n * Please be kind and courteous. There's no need to be mean or rude.\n * Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n * Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n-* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behaviour. We interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n+* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term \"harassment\" as including the definition in the <a href=\"http://citizencodeofconduct.org/\">Citizen Code of Conduct</a>; if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don't tolerate behavior that excludes people in socially marginalized groups.\n * Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or any of the [Rust moderation team][mod_team] immediately. Whether you're a regular contributor or a newcomer, we care about making this community a safe place for you and we've got your back.\n-* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behaviour is not welcome.\n+* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n \n ## Moderation\n "}, {"sha": "2b389888e5185eb46675af9eb3a4a63cadeb04b5", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -26,10 +26,10 @@ As a reminder, all contributors are expected to follow our [Code of Conduct][coc\n ## Feature Requests\n [feature-requests]: #feature-requests\n \n-To request a change to the way that the Rust language works, please open an\n-issue in the [RFCs repository](https://github.com/rust-lang/rfcs/issues/new)\n-rather than this one. New features and other significant language changes\n-must go through the RFC process.\n+To request a change to the way the Rust language works, please head over\n+to the [RFCs repository](https://github.com/rust-lang/rfcs) and view the \n+[README](https://github.com/rust-lang/rfcs/blob/master/README.md)\n+for instructions.\n \n ## Bug Reports\n [bug-reports]: #bug-reports"}, {"sha": "1bb2bed463b0925be99a8d48e4bf7a628dfda9a1", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -1212,8 +1212,9 @@ impl<T: Clone> Vec<T> {\n     /// difference, with each additional slot filled with `value`.\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n-    /// This method requires `Clone` to clone the passed value. If you'd\n-    /// rather create a value with `Default` instead, see [`resize_default`].\n+    /// This method requires [`Clone`] to be able clone the passed value. If\n+    /// you'd rather create a value with [`Default`] instead, see\n+    /// [`resize_default`].\n     ///\n     /// # Examples\n     ///\n@@ -1227,6 +1228,8 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     ///\n+    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    /// [`Default`]: ../../std/default/trait.Default.html\n     /// [`resize_default`]: #method.resize_default\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n@@ -1244,7 +1247,7 @@ impl<T: Clone> Vec<T> {\n     /// Iterates over the slice `other`, clones each element, and then appends\n     /// it to this `Vec`. The `other` vector is traversed in-order.\n     ///\n-    /// Note that this function is same as `extend` except that it is\n+    /// Note that this function is same as [`extend`] except that it is\n     /// specialized to work with slices instead. If and when Rust gets\n     /// specialization this function will likely be deprecated (but still\n     /// available).\n@@ -1256,6 +1259,8 @@ impl<T: Clone> Vec<T> {\n     /// vec.extend_from_slice(&[2, 3, 4]);\n     /// assert_eq!(vec, [1, 2, 3, 4]);\n     /// ```\n+    ///\n+    /// [`extend`]: #method.extend\n     #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n         self.spec_extend(other.iter())\n@@ -1266,12 +1271,11 @@ impl<T: Default> Vec<T> {\n     /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n     ///\n     /// If `new_len` is greater than `len`, the `Vec` is extended by the\n-    /// difference, with each additional slot filled with `Default::default()`.\n+    /// difference, with each additional slot filled with [`Default::default()`].\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n-    /// This method uses `Default` to create new values on every push. If\n-    /// you'd rather `Clone` a given value, use [`resize`].\n-    ///\n+    /// This method uses [`Default`] to create new values on every push. If\n+    /// you'd rather [`Clone`] a given value, use [`resize`].\n     ///\n     /// # Examples\n     ///\n@@ -1288,6 +1292,9 @@ impl<T: Default> Vec<T> {\n     /// ```\n     ///\n     /// [`resize`]: #method.resize\n+    /// [`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default\n+    /// [`Default`]: ../../std/default/trait.Default.html\n+    /// [`Clone`]: ../../std/clone/trait.Clone.html\n     #[unstable(feature = \"vec_resize_default\", issue = \"41758\")]\n     pub fn resize_default(&mut self, new_len: usize) {\n         let len = self.len();"}, {"sha": "36618e86968b5ea3d0fecf4c684bed1b6b0f0ca2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -1203,21 +1203,42 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n /// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n ///\n-/// The compiler makes optimizations based on the knowledge that `&T` is not mutably aliased or\n-/// mutated, and that `&mut T` is unique. When building abstractions like `Cell`, `RefCell`,\n-/// `Mutex`, etc, you need to turn these optimizations off. `UnsafeCell` is the only legal way\n-/// to do this. When `UnsafeCell<T>` is immutably aliased, it is still safe to obtain a mutable\n-/// reference to its interior and/or to mutate it. However, it is up to the abstraction designer\n-/// to ensure that no two mutable references obtained this way are active at the same time, and\n-/// that there are no active mutable references or mutations when an immutable reference is obtained\n-/// from the cell. This is often done via runtime checks.\n+/// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n+/// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n+/// aliased or mutated, and that `&mut T` is unique. `UnsafeCel<T>` is the only core language\n+/// feature to work around this restriction. All other types that allow internal mutability, such as\n+/// `Cell<T>` and `RefCell<T>` use `UnsafeCell` to wrap their internal data.\n ///\n-/// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n-/// okay (provided you enforce the invariants some other way); it is still undefined behavior\n-/// to have multiple `&mut UnsafeCell<T>` aliases.\n+/// The `UnsafeCell` API itself is technically very simple: it gives you a raw pointer `*mut T` to\n+/// its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly.\n+///\n+/// The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:\n+///\n+/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T` reference) that\n+/// is accessible by safe code (for example, because you returned it), then you must not access\n+/// the data in any way that contradicts that reference for the remainder of `'a`. For example, that\n+/// means that if you take the `*mut T` from an `UnsafeCell<T>` and case it to an `&T`, then until\n+/// that reference's lifetime expires, the data in `T` must remain immutable (modulo any\n+/// `UnsafeCell` data found within `T`, of course). Similarly, if you create an `&mut T` reference\n+/// that is released to safe code, then you must not access the data within the `UnsafeCell` until\n+/// that reference expires.\n+///\n+/// - At all times, you must avoid data races, meaning that if multiple threads have access to\n+/// the same `UnsafeCell`, then any writes must have a proper happens-before relation to all other\n+/// accesses (or use atomics).\n ///\n+/// To assist with proper design, the following scenarios are explicitly declared legal\n+/// for single-threaded code:\n ///\n-/// Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.\n+/// 1. A `&T` reference can be released to safe code and there it can co-exit with other `&T`\n+/// references, but not with a `&mut T`\n+///\n+/// 2. A `&mut T` reference may be released to safe code, provided neither other `&mut T` nor `&T`\n+/// co-exist with it. A `&mut T` must always be unique.\n+///\n+/// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n+/// okay (provided you enforce the invariants some other way), it is still undefined behavior\n+/// to have multiple `&mut UnsafeCell<T>` aliases.\n ///\n /// # Examples\n ///\n@@ -1282,9 +1303,9 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n     /// This can be cast to a pointer of any kind.\n-    /// Ensure that the access is unique when casting to\n-    /// `&mut T`, and ensure that there are no mutations or mutable\n-    /// aliases going on when casting to `&T`\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`\n     ///\n     /// # Examples\n     ///"}, {"sha": "213b317f632eb5b7e6ce57eb688bf39d5dff082e", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -684,18 +684,16 @@ pub trait Octal {\n ///\n /// The `Binary` trait should format its output as a number in binary.\n ///\n-/// For primitive signed integers (`i8` to `i128`, and `isize`),\n+/// For primitive signed integers ([`i8`] to [`i128`], and [`isize`]),\n /// negative values are formatted as the two\u2019s complement representation.\n ///\n /// The alternate flag, `#`, adds a `0b` in front of the output.\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n-/// [module]: ../../std/fmt/index.html\n-///\n /// # Examples\n ///\n-/// Basic usage with `i32`:\n+/// Basic usage with [`i32`]:\n ///\n /// ```\n /// let x = 42; // 42 is '101010' in binary\n@@ -725,6 +723,12 @@ pub trait Octal {\n ///\n /// println!(\"l as binary is: {:b}\", l);\n /// ```\n+///\n+/// [module]: ../../std/fmt/index.html\n+/// [`i8`]: ../../std/primitive.i8.html\n+/// [`i128`]: ../../std/primitive.i128.html\n+/// [`isize`]: ../../std/primitive.isize.html\n+/// [`i32`]: ../../std/primitive.i32.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Binary {\n     /// Formats the value using the given formatter."}, {"sha": "448e49ffebda80d179ecba7661857daa94c787fd", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -74,7 +74,9 @@\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(doc_cfg)]\n #![feature(doc_spotlight)]\n+#![feature(fn_must_use)]\n #![feature(fundamental)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]"}, {"sha": "3b13ef015006432fadc3f1d768d1d92351317f0c", "filename": "src/librustc_back/target/l4re_base.rs", "status": "modified", "additions": 16, "deletions": 55, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -8,74 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use PanicStrategy;\n use LinkerFlavor;\n+use PanicStrategy;\n use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n-use std::env;\n-use std::process::Command;\n+//use std::process::Command;\n \n // Use GCC to locate code for crt* libraries from the host, not from L4Re. Note\n // that a few files also come from L4Re, for these, the function shouldn't be\n // used. This uses GCC for the location of the file, but GCC is required for L4Re anyway.\n-fn get_path_or(filename: &str) -> String {\n-    let child = Command::new(\"gcc\")\n-        .arg(format!(\"-print-file-name={}\", filename)).output()\n-        .expect(\"Failed to execute GCC\");\n-    String::from_utf8(child.stdout)\n-        .expect(\"Couldn't read path from GCC\").trim().into()\n-}\n+//fn get_path_or(filename: &str) -> String {\n+//    let child = Command::new(\"gcc\")\n+//        .arg(format!(\"-print-file-name={}\", filename)).output()\n+//        .expect(\"Failed to execute GCC\");\n+//    String::from_utf8(child.stdout)\n+//        .expect(\"Couldn't read path from GCC\").trim().into()\n+//}\n \n-pub fn opts() -> Result<TargetOptions, String> {\n-    let l4re_lib_path = env::var_os(\"L4RE_LIBDIR\").ok_or(\"Unable to find L4Re \\\n-        library directory: L4RE_LIBDIR not set.\")?.into_string().unwrap();\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Ld, vec![\n-        format!(\"-T{}/main_stat.ld\", l4re_lib_path),\n-        \"--defsym=__executable_start=0x01000000\".to_string(),\n-        \"--defsym=__L4_KIP_ADDR__=0x6ffff000\".to_string(),\n-        format!(\"{}/crt1.o\", l4re_lib_path),\n-        format!(\"{}/crti.o\", l4re_lib_path),\n-        get_path_or(\"crtbeginT.o\"),\n-    ]);\n-    let mut post_link_args = LinkArgs::new();\n-    post_link_args.insert(LinkerFlavor::Ld, vec![\n-        format!(\"{}/l4f/libpthread.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_sig.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_sig_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_socket_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_fs_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_sem_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libl4re-vfs.o.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re-util.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_support_misc.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libsupc++.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4shmc.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re-c.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re-c-util.a\", l4re_lib_path),\n-        get_path_or(\"libgcc_eh.a\"),\n-        format!(\"{}/l4f/libdl.a\", l4re_lib_path),\n-        \"--start-group\".to_string(),\n-        format!(\"{}/l4f/libl4util.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_l4re.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libuc_c.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_l4refile.a\", l4re_lib_path),\n-        \"--end-group\".to_string(),\n-        format!(\"{}/l4f/libl4sys.a\", l4re_lib_path),\n-        \"-gc-sections\".to_string(),\n-        get_path_or(\"crtend.o\"),\n-        format!(\"{}/crtn.o\", l4re_lib_path),\n-    ]);\n+pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![]);\n \n-    Ok(TargetOptions {\n+    TargetOptions {\n         executables: true,\n         has_elf_tls: false,\n         exe_allocation_crate: None,\n         panic_strategy: PanicStrategy::Abort,\n-        pre_link_args,\n-        post_link_args,\n+        linker: Some(\"ld\".to_string()),\n+        pre_link_args: args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n-    })\n+    }\n }"}, {"sha": "821a77f52f511b203fb6ead8cc2fb5586c47e949", "filename": "src/librustc_back/target/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -12,7 +12,7 @@ use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::l4re_base::opts()?;\n+    let mut base = super::l4re_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n "}, {"sha": "1ea1ff1fae24df1a533514a58f67b3a5d2dfabdd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -3096,10 +3096,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             };\n                     }\n                     ty::TyRawPtr(..) => {\n-                        err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref \\\n-                                           with `(*{0}).{1}`\",\n-                                          self.tcx.hir.node_to_pretty_string(base.id),\n-                                          field.node));\n+                        let base = self.tcx.hir.node_to_pretty_string(base.id);\n+                        let msg = format!(\"`{}` is a native pointer; try dereferencing it\", base);\n+                        let suggestion = format!(\"(*{}).{}\", base, field.node);\n+                        err.span_suggestion(field.span, &msg, suggestion);\n                     }\n                     _ => {}\n                 }"}, {"sha": "678e1762a551926399bfa0bb76963aeb797e43b1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -3181,14 +3181,16 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         render_impls(cx, w, concrete, containing_item)?;\n         write!(w, \"</div>\")?;\n \n-        write!(w, \"\n-            <h2 id='synthetic-implementations' class='small-section-header'>\n-              Auto Trait Implementations<a href='#synthetic-implementations' class='anchor'></a>\n-            </h2>\n-            <div id='synthetic-implementations-list'>\n-        \")?;\n-        render_impls(cx, w, synthetic, containing_item)?;\n-        write!(w, \"</div>\")?;\n+        if !synthetic.is_empty() {\n+            write!(w, \"\n+                <h2 id='synthetic-implementations' class='small-section-header'>\n+                  Auto Trait Implementations<a href='#synthetic-implementations' class='anchor'></a>\n+                </h2>\n+                <div id='synthetic-implementations-list'>\n+            \")?;\n+            render_impls(cx, w, synthetic, containing_item)?;\n+            write!(w, \"</div>\")?;\n+        }\n     }\n     Ok(())\n }"}, {"sha": "28d39cb174a108dc0688c79098f0287374a5605b", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -1628,6 +1628,7 @@\n     function toggleAllDocs() {\n         var toggle = document.getElementById(\"toggle-all-docs\");\n         if (hasClass(toggle, \"will-expand\")) {\n+            updateLocalStorage(\"rustdoc-collapse\", \"false\");\n             removeClass(toggle, \"will-expand\");\n             onEveryMatchingChild(toggle, \"inner\", function(e) {\n                 e.innerHTML = labelForToggleButton(false);\n@@ -1637,6 +1638,7 @@\n                 collapseDocs(e, \"show\");\n             });\n         } else {\n+            updateLocalStorage(\"rustdoc-collapse\", \"true\");\n             addClass(toggle, \"will-expand\");\n             onEveryMatchingChild(toggle, \"inner\", function(e) {\n                 e.innerHTML = labelForToggleButton(true);\n@@ -1988,6 +1990,10 @@\n     window.onresize = function() {\n         hideSidebar();\n     };\n+\n+    if (getCurrentValue(\"rustdoc-collapse\") === \"true\") {\n+        toggleAllDocs();\n+    }\n }());\n \n // Sets the focus on the search bar at the top of the page"}, {"sha": "db52ed67d3a85b3aa35c718146f41a3fcc396e75", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -453,6 +453,10 @@ impl File {\n     /// will be extended to `size` and have all of the intermediate data filled\n     /// in with 0s.\n     ///\n+    /// The file's cursor isn't changed. In particular, if the cursor was at the\n+    /// end and the file is shrunk using this operation, the cursor will now be\n+    /// past the end.\n+    ///\n     /// # Errors\n     ///\n     /// This function will return an error if the file is not opened for writing."}, {"sha": "bd0ca0e670487edcd466dac06fe47c22e0ae5e79", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -2831,9 +2831,10 @@ impl<'a> Parser<'a> {\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 let span_of_tilde = lo;\n                 let mut err = self.diagnostic().struct_span_err(span_of_tilde,\n-                        \"`~` can not be used as a unary operator\");\n-                err.span_label(span_of_tilde, \"did you mean `!`?\");\n-                err.help(\"use `!` instead of `~` if you meant to perform bitwise negation\");\n+                        \"`~` cannot be used as a unary operator\");\n+                err.span_suggestion_short(span_of_tilde,\n+                                          \"use `!` to perform bitwise negation\",\n+                                          \"!\".to_owned());\n                 err.emit();\n                 (lo.to(span), self.mk_unary(UnOp::Not, e))\n             }\n@@ -3389,7 +3390,7 @@ impl<'a> Parser<'a> {\n                                                None)?;\n         if let Err(mut e) = self.expect(&token::OpenDelim(token::Brace)) {\n             if self.token == token::Token::Semi {\n-                e.span_note(match_span, \"did you mean to remove this `match` keyword?\");\n+                e.span_suggestion_short(match_span, \"try removing this `match`\", \"\".to_owned());\n             }\n             return Err(e)\n         }\n@@ -5361,7 +5362,9 @@ impl<'a> Parser<'a> {\n                 if is_macro_rules {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n-                    err.help(\"did you mean #[macro_export]?\");\n+                    err.span_suggestion(sp,\n+                                        \"try exporting the macro\",\n+                                        \"#[macro_export]\".to_owned());\n                     Err(err)\n                 } else {\n                     let mut err = self.diagnostic()"}, {"sha": "7b23de582a79aa74415c3234a23183128697654f", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -70,7 +70,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<E\n     // We want to make sure we have the ctxt set so that we can use unstable methods\n     let span = span.with_ctxt(cx.backtrace());\n     let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n-    let builder = Ident::from_str(\"builder\");\n+    let builder = Ident::from_str(\"__debug_trait_builder\");\n     let builder_expr = cx.expr_ident(span, builder.clone());\n \n     let fmt = substr.nonself_args[0].clone();"}, {"sha": "59d701dd0fbc85fe8dcb89be2371c67c3ea4cb15", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -1294,6 +1294,12 @@ fn get_concurrency() -> usize {\n         // FIXME: implement\n         1\n     }\n+\n+    #[cfg(target_os = \"l4re\")]\n+    fn num_cpus() -> usize {\n+        // FIXME: implement\n+        1\n+    }\n }\n \n pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {"}, {"sha": "ab9356f2af650815d339d77306f0d09c44d531ad", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -1 +1 @@\n-Subproject commit 678cbd325c84070c9dbe4303969fbd2734c0b4ee\n+Subproject commit ab9356f2af650815d339d77306f0d09c44d531ad"}, {"sha": "dfe3a21961e3b6d62f7217ad9abd4b8d61b4b834", "filename": "src/test/run-pass/issue-42453.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Frun-pass%2Fissue-42453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Frun-pass%2Fissue-42453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-42453.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Debug)]\n+struct builder;\n+\n+fn main() {\n+\n+}\n+"}, {"sha": "3748313593fc22bd37c5226da6fe76035c31f051", "filename": "src/test/rustdoc/empty-section.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Frustdoc%2Fempty-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Frustdoc%2Fempty-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-section.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+#![feature(optin_builtin_traits)]\n+\n+pub struct Foo;\n+\n+// @has foo/struct.Foo.html\n+// @!has - '//*[@class=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n+impl !Send for Foo {}\n+impl !Sync for Foo {}"}, {"sha": "e8fd248011cb85398e707b8dcc0f97328f19c54e", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x = ~1; //~ ERROR can not be used as a unary operator\n+    let x = ~1; //~ ERROR cannot be used as a unary operator\n }", "previous_filename": "src/test/ui/did_you_mean/issue-41679.rs"}, {"sha": "f13f15f63771da929f6d7b087cb838fa64ae942b", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -0,0 +1,8 @@\n+error: `~` cannot be used as a unary operator\n+  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:12:13\n+   |\n+LL |     let x = ~1; //~ ERROR cannot be used as a unary operator\n+   |             ^ help: use `!` to perform bitwise negation\n+\n+error: aborting due to previous error\n+"}, {"sha": "c17812fc0cb9dc5719423ac82d05f8dd10c0e107", "filename": "src/test/ui/did_you_mean/issue-41679.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr?ref=883e74645d350b6752cb94d48f46363f6f8789e9", "patch": "@@ -1,10 +0,0 @@\n-error: `~` can not be used as a unary operator\n-  --> $DIR/issue-41679.rs:12:13\n-   |\n-LL |     let x = ~1; //~ ERROR can not be used as a unary operator\n-   |             ^ did you mean `!`?\n-   |\n-   = help: use `!` instead of `~` if you meant to perform bitwise negation\n-\n-error: aborting due to previous error\n-"}, {"sha": "3c88608697aadb7b1302ba7f10ef6a73154f63e6", "filename": "src/test/ui/did_you_mean/match-refactor-to-expr.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fmatch-refactor-to-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fmatch-refactor-to-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fmatch-refactor-to-expr.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     let foo =\n-        match //~ NOTE did you mean to remove this `match` keyword?\n+        match\n         Some(4).unwrap_or_else(5)\n         //~^ NOTE expected one of `.`, `?`, `{`, or an operator here\n         ; //~ NOTE unexpected token", "previous_filename": "src/test/parse-fail/match-refactor-to-expr.rs"}, {"sha": "ecca781684cec16190056242678e66a03f3d9a97", "filename": "src/test/ui/did_you_mean/match-refactor-to-expr.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fmatch-refactor-to-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fmatch-refactor-to-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fmatch-refactor-to-expr.stderr?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `.`, `?`, `{`, or an operator, found `;`\n+  --> $DIR/match-refactor-to-expr.rs:18:9\n+   |\n+LL |         match\n+   |         ----- help: try removing this `match`\n+LL |         Some(4).unwrap_or_else(5)\n+   |                                  - expected one of `.`, `?`, `{`, or an operator here\n+LL |         //~^ NOTE expected one of `.`, `?`, `{`, or an operator here\n+LL |         ; //~ NOTE unexpected token\n+   |         ^ unexpected token\n+\n+error: aborting due to previous error\n+"}, {"sha": "65a0d642cd7d19c6042946f7a84a473f83431276", "filename": "src/test/ui/did_you_mean/pub-macro-rules.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n #[macro_use] mod bleh {\n-    pub macro_rules! foo { //~ ERROR can't qualify macro_rules invocation with `pub`\n-    //~^ HELP did you mean #[macro_export]?\n+    pub macro_rules! foo { //~ ERROR can't qualify macro_rules invocation\n         ($n:ident) => (\n             fn $n () -> i32 {\n                 1", "previous_filename": "src/test/parse-fail/pub-macro-rules.rs"}, {"sha": "dfeab75525ba3c2189a9e745942bd0f5380c7cb0", "filename": "src/test/ui/did_you_mean/pub-macro-rules.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -0,0 +1,8 @@\n+error: can't qualify macro_rules invocation with `pub`\n+  --> $DIR/pub-macro-rules.rs:12:5\n+   |\n+LL |     pub macro_rules! foo { //~ ERROR can't qualify macro_rules invocation\n+   |     ^^^ help: try exporting the macro: `#[macro_export]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "268c3cd6d2afd8325c0d62c7205dae555dda9ade", "filename": "src/test/ui/issue-11004.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fissue-11004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftest%2Fui%2Fissue-11004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11004.stderr?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -2,17 +2,13 @@ error[E0609]: no field `x` on type `*mut A`\n   --> $DIR/issue-11004.rs:17:21\n    |\n LL |     let x : i32 = n.x; //~ no field `x` on type `*mut A`\n-   |                     ^\n-   |\n-   = note: `n` is a native pointer; perhaps you need to deref with `(*n).x`\n+   |                     ^ help: `n` is a native pointer; try dereferencing it: `(*n).x`\n \n error[E0609]: no field `y` on type `*mut A`\n   --> $DIR/issue-11004.rs:18:21\n    |\n LL |     let y : f64 = n.y; //~ no field `y` on type `*mut A`\n-   |                     ^\n-   |\n-   = note: `n` is a native pointer; perhaps you need to deref with `(*n).y`\n+   |                     ^ help: `n` is a native pointer; try dereferencing it: `(*n).y`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "19339800a7a98381770c987238b477a50ab28c42", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-4.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr?ref=883e74645d350b6752cb94d48f46363f6f8789e9", "patch": "@@ -1,19 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-4.rs:12:13\n-   |\n-11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                     ---                 --- these references are declared with different lifetimes...\n-12 |     z.push((x,y));\n-   |             ^ ...but data flows into `z` here\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-4.rs:12:15\n-   |\n-11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                         ---                  --- these references are declared with different lifetimes...\n-12 |     z.push((x,y));\n-   |               ^ ...but data flows into `z` here\n-\n-error: aborting due to 2 previous errors\n-\n-If you want more information on this error, try using \"rustc --explain E0623\""}, {"sha": "502b344c89e448b2efcbb48fd689fd2eef8f8bc1", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-to-empty.stderr", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr?ref=883e74645d350b6752cb94d48f46363f6f8789e9", "patch": "@@ -1,45 +0,0 @@\n-warning: not reporting region error due to -Znll\n-  --> $DIR/propagate-approximated-to-empty.rs:41:9\n-   |\n-41 |         demand_y(x, y, x.get())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: free region `'_#6r` does not outlive free region `'_#4r`\n-  --> $DIR/propagate-approximated-to-empty.rs:41:18\n-   |\n-41 |         demand_y(x, y, x.get())\n-   |                  ^\n-\n-note: No external requirements\n-  --> $DIR/propagate-approximated-to-empty.rs:39:47\n-   |\n-39 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |  _______________________________________________^\n-40 | |         // Only works if 'x: 'y:\n-41 | |         demand_y(x, y, x.get())\n-42 | |         //~^ WARN not reporting region error due to -Znll\n-43 | |         //~| ERROR free region `'_#6r` does not outlive free region `'_#4r`\n-44 | |     });\n-   | |_____^\n-   |\n-   = note: defining type: DefId(0/1:18 ~ propagate_approximated_to_empty[317d]::supply[0]::{{closure}}[0]) with closure substs [\n-               i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n-           ]\n-\n-note: No external requirements\n-  --> $DIR/propagate-approximated-to-empty.rs:38:1\n-   |\n-38 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-39 | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-40 | |         // Only works if 'x: 'y:\n-41 | |         demand_y(x, y, x.get())\n-...  |\n-44 | |     });\n-45 | | }\n-   | |_^\n-   |\n-   = note: defining type: DefId(0/0:6 ~ propagate_approximated_to_empty[317d]::supply[0]) with substs []\n-\n-error: aborting due to previous error\n-"}, {"sha": "27f93939246c0abb95246b9174cfb9022f68b318", "filename": "src/test/ui/resolve-error.stderr", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve-error.stderr?ref=883e74645d350b6752cb94d48f46363f6f8789e9", "patch": "@@ -1,62 +0,0 @@\n-error: cannot find derive macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:37:10\n-   |\n-37 | #[derive(FooWithLongNan)]\n-   |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n-\n-error: cannot find attribute macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:40:3\n-   |\n-40 | #[attr_proc_macra]\n-   |   ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n-\n-error: cannot find attribute macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:43:3\n-   |\n-43 | #[FooWithLongNan]\n-   |   ^^^^^^^^^^^^^^\n-\n-error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:46:10\n-   |\n-46 | #[derive(Dlone)]\n-   |          ^^^^^ help: try: `Clone`\n-\n-error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:49:10\n-   |\n-49 | #[derive(Dlona)]\n-   |          ^^^^^ help: try: `Clona`\n-\n-error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:52:10\n-   |\n-52 | #[derive(attr_proc_macra)]\n-   |          ^^^^^^^^^^^^^^^\n-\n-error: cannot find macro `FooWithLongNama!` in this scope\n-  --> $DIR/resolve-error.rs:56:5\n-   |\n-56 |     FooWithLongNama!();\n-   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam!`\n-\n-error: cannot find macro `attr_proc_macra!` in this scope\n-  --> $DIR/resolve-error.rs:58:5\n-   |\n-58 |     attr_proc_macra!();\n-   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac!`\n-\n-error: cannot find macro `Dlona!` in this scope\n-  --> $DIR/resolve-error.rs:60:5\n-   |\n-60 |     Dlona!();\n-   |     ^^^^^\n-\n-error: cannot find macro `bang_proc_macrp!` in this scope\n-  --> $DIR/resolve-error.rs:62:5\n-   |\n-62 |     bang_proc_macrp!();\n-   |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro!`\n-\n-error: aborting due to previous error(s)\n-"}, {"sha": "af498129fc440532d451d558b0cd1c464b1ba134", "filename": "src/test/ui/span/loan-extend.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/883e74645d350b6752cb94d48f46363f6f8789e9/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr?ref=883e74645d350b6752cb94d48f46363f6f8789e9", "patch": "@@ -1,14 +0,0 @@\n-error[E0597]: `short` does not live long enough\n-  --> $DIR/loan-extend.rs:21:1\n-   |\n-19 |     long = borrow(&mut short);\n-   |                        ----- borrow occurs here\n-20 |\n-21 | }\n-   | ^ `short` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n-\n-error: aborting due to previous error\n-\n-If you want more information on this error, try using \"rustc --explain E0597\""}, {"sha": "06eb055f68e060e179014984c78e68bcaa011bbf", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -51,6 +51,7 @@ pub mod features;\n pub mod cargo;\n pub mod pal;\n pub mod deps;\n+pub mod ui_tests;\n pub mod unstable_book;\n \n fn filter_dirs(path: &Path) -> bool {"}, {"sha": "24974192795608aa302b8df9ba4bb7d6cd32e62c", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -45,6 +45,7 @@ fn main() {\n         deps::check(&path, &mut bad);\n     }\n     deps::check_whitelist(&path, &cargo, &mut bad);\n+    ui_tests::check(&path, &mut bad);\n \n     if bad {\n         eprintln!(\"some tidy checks failed\");"}, {"sha": "f7fec2e667ab959e4ce11f0201c6c030c257a145", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cbe142640b2cea1eeb385249faffcf49f0990d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=c7cbe142640b2cea1eeb385249faffcf49f0990d", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Tidy check to ensure that there are no stray `.stderr` files in UI test directories.\n+\n+use std::path::Path;\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    super::walk_many(&[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n+                     &mut |_| false,\n+                     &mut |file_path| {\n+        if let Some(ext) = file_path.extension() {\n+            if (ext == \"stderr\" || ext == \"stdout\") && !file_path.with_extension(\"rs\").exists() {\n+                println!(\"Stray file with UI testing output: {:?}\", file_path);\n+                *bad = true;\n+            }\n+        }\n+    });\n+}"}]}