{"sha": "65150af1b4841feeb8b81f1ada60de1191912590", "node_id": "C_kwDOAAsO6NoAKDY1MTUwYWYxYjQ4NDFmZWViOGI4MWYxYWRhNjBkZTExOTE5MTI1OTA", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-10-19T17:24:26Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-10-22T16:22:18Z"}, "message": "Update the minimum external LLVM to 11", "tree": {"sha": "224932be576d326b9b056bffcd236093a82d083b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224932be576d326b9b056bffcd236093a82d083b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65150af1b4841feeb8b81f1ada60de1191912590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65150af1b4841feeb8b81f1ada60de1191912590", "html_url": "https://github.com/rust-lang/rust/commit/65150af1b4841feeb8b81f1ada60de1191912590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65150af1b4841feeb8b81f1ada60de1191912590/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a698baf6bfc61d85ce6e25122a092c60c7f21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a698baf6bfc61d85ce6e25122a092c60c7f21a", "html_url": "https://github.com/rust-lang/rust/commit/68a698baf6bfc61d85ce6e25122a092c60c7f21a"}], "stats": {"total": 229, "additions": 40, "deletions": 189}, "files": [{"sha": "5ce1d4b2d4ecac6f1cb04178415ff51806ac8600", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -43,7 +43,7 @@ jobs:\n           - name: mingw-check\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-10\n+          - name: x86_64-gnu-llvm-11\n             os: ubuntu-latest-xl\n             env: {}\n           - name: x86_64-gnu-tools\n@@ -274,7 +274,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-10\n+          - name: x86_64-gnu-llvm-11\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-latest-xl"}, {"sha": "4e4487ad88cebd2eb6eb5c17144348bb19a3654d", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -95,8 +95,7 @@ unsafe fn configure_llvm(sess: &Session) {\n         // Ref:\n         // - https://github.com/rust-lang/rust/issues/85351\n         // - https://reviews.llvm.org/D103167\n-        let llvm_version = llvm_util::get_version();\n-        if llvm_version >= (11, 0, 0) && llvm_version < (13, 0, 0) {\n+        if llvm_util::get_version() < (13, 0, 0) {\n             add(\"-enable-machine-outliner=never\", false);\n         }\n "}, {"sha": "8cd2bd12450e3d55a1c548cc4475d1f598754225", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -98,10 +98,7 @@ extern \"C\" void LLVMRustCoverageWriteMapSectionNameToString(LLVMModuleRef M,\n \n extern \"C\" void LLVMRustCoverageWriteFuncSectionNameToString(LLVMModuleRef M,\n                                                              RustStringRef Str) {\n-#if LLVM_VERSION_GE(11, 0)\n   WriteSectionNameToString(M, IPSK_covfun, Str);\n-// else do nothing; the `Version` check will abort codegen on the Rust side\n-#endif\n }\n \n extern \"C\" void LLVMRustCoverageWriteMappingVarNameToString(RustStringRef Str) {\n@@ -111,9 +108,5 @@ extern \"C\" void LLVMRustCoverageWriteMappingVarNameToString(RustStringRef Str) {\n }\n \n extern \"C\" uint32_t LLVMRustCoverageMappingVersion() {\n-#if LLVM_VERSION_GE(11, 0)\n   return coverage::CovMapVersion::Version4;\n-#else\n-  return coverage::CovMapVersion::Version3;\n-#endif\n }"}, {"sha": "dcf81dd7eb5b7cfd1853d6fead9b109a77f6a64b", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -54,10 +54,6 @@ typedef struct LLVMOpaqueTargetMachine *LLVMTargetMachineRef;\n \n DEFINE_STDCXX_CONVERSION_FUNCTIONS(Pass, LLVMPassRef)\n DEFINE_STDCXX_CONVERSION_FUNCTIONS(TargetMachine, LLVMTargetMachineRef)\n-#if LLVM_VERSION_LT(11, 0)\n-DEFINE_STDCXX_CONVERSION_FUNCTIONS(PassManagerBuilder,\n-                                   LLVMPassManagerBuilderRef)\n-#endif\n \n extern \"C\" void LLVMInitializePasses() {\n   PassRegistry &Registry = *PassRegistry::getPassRegistry();\n@@ -857,13 +853,8 @@ LLVMRustOptimizeWithNewPassManager(\n   // PassBuilder does not create a pipeline.\n   std::vector<std::function<void(ModulePassManager &, OptimizationLevel)>>\n       PipelineStartEPCallbacks;\n-#if LLVM_VERSION_GE(11, 0)\n   std::vector<std::function<void(ModulePassManager &, OptimizationLevel)>>\n       OptimizerLastEPCallbacks;\n-#else\n-  std::vector<std::function<void(FunctionPassManager &, OptimizationLevel)>>\n-      OptimizerLastEPCallbacks;\n-#endif\n \n   if (VerifyIR) {\n     PipelineStartEPCallbacks.push_back(\n@@ -896,7 +887,6 @@ LLVMRustOptimizeWithNewPassManager(\n           SanitizerOptions->SanitizeMemoryTrackOrigins,\n           SanitizerOptions->SanitizeMemoryRecover,\n           /*CompileKernel=*/false);\n-#if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n #if LLVM_VERSION_GE(14, 0)\n@@ -907,22 +897,9 @@ LLVMRustOptimizeWithNewPassManager(\n           MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n         }\n       );\n-#else\n-      PipelineStartEPCallbacks.push_back(\n-        [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n-          MPM.addPass(MemorySanitizerPass(Options));\n-        }\n-      );\n-      OptimizerLastEPCallbacks.push_back(\n-        [Options](FunctionPassManager &FPM, OptimizationLevel Level) {\n-          FPM.addPass(MemorySanitizerPass(Options));\n-        }\n-      );\n-#endif\n     }\n \n     if (SanitizerOptions->SanitizeThread) {\n-#if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n         [](ModulePassManager &MPM, OptimizationLevel Level) {\n #if LLVM_VERSION_GE(14, 0)\n@@ -933,22 +910,9 @@ LLVMRustOptimizeWithNewPassManager(\n           MPM.addPass(createModuleToFunctionPassAdaptor(ThreadSanitizerPass()));\n         }\n       );\n-#else\n-      PipelineStartEPCallbacks.push_back(\n-        [](ModulePassManager &MPM, OptimizationLevel Level) {\n-          MPM.addPass(ThreadSanitizerPass());\n-        }\n-      );\n-      OptimizerLastEPCallbacks.push_back(\n-        [](FunctionPassManager &FPM, OptimizationLevel Level) {\n-          FPM.addPass(ThreadSanitizerPass());\n-        }\n-      );\n-#endif\n     }\n \n     if (SanitizerOptions->SanitizeAddress) {\n-#if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n@@ -967,29 +931,8 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n         }\n       );\n-#else\n-      PipelineStartEPCallbacks.push_back(\n-        [&](ModulePassManager &MPM, OptimizationLevel Level) {\n-          MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n-        }\n-      );\n-      OptimizerLastEPCallbacks.push_back(\n-        [SanitizerOptions](FunctionPassManager &FPM, OptimizationLevel Level) {\n-          FPM.addPass(AddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover,\n-              /*UseAfterScope=*/true));\n-        }\n-      );\n-      PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n-          MPM.addPass(ModuleAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n-        }\n-      );\n-#endif\n     }\n     if (SanitizerOptions->SanitizeHWAddress) {\n-#if LLVM_VERSION_GE(11, 0)\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n #if LLVM_VERSION_GE(14, 0)\n@@ -1003,14 +946,6 @@ LLVMRustOptimizeWithNewPassManager(\n #endif\n         }\n       );\n-#else\n-      PipelineStartEPCallbacks.push_back(\n-        [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n-          MPM.addPass(HWAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n-        }\n-      );\n-#endif\n     }\n   }\n \n@@ -1037,17 +972,8 @@ LLVMRustOptimizeWithNewPassManager(\n       for (const auto &C : PipelineStartEPCallbacks)\n         C(MPM, OptLevel);\n \n-# if LLVM_VERSION_GE(11, 0)\n       for (const auto &C : OptimizerLastEPCallbacks)\n         C(MPM, OptLevel);\n-# else\n-      if (!OptimizerLastEPCallbacks.empty()) {\n-        FunctionPassManager FPM(DebugPassManager);\n-        for (const auto &C : OptimizerLastEPCallbacks)\n-          C(FPM, OptLevel);\n-        MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));\n-      }\n-# endif\n \n       MPM.addPass(AlwaysInlinerPass(EmitLifetimeMarkers));\n \n@@ -1088,17 +1014,8 @@ LLVMRustOptimizeWithNewPassManager(\n #else\n         MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n #endif\n-#if LLVM_VERSION_GE(11, 0)\n         for (const auto &C : OptimizerLastEPCallbacks)\n           C(MPM, OptLevel);\n-#else\n-        if (!OptimizerLastEPCallbacks.empty()) {\n-          FunctionPassManager FPM(DebugPassManager);\n-          for (const auto &C : OptimizerLastEPCallbacks)\n-            C(FPM, OptLevel);\n-          MPM.addPass(createModuleToFunctionPassAdaptor(std::move(FPM)));\n-        }\n-#endif\n         break;\n       case LLVMRustOptStage::PreLinkFatLTO:\n #if LLVM_VERSION_GE(12, 0)\n@@ -1552,7 +1469,6 @@ LLVMRustFreeThinLTOData(LLVMRustThinLTOData *Data) {\n // `ProcessThinLTOModule` function. Here they're split up into separate steps\n // so rustc can save off the intermediate bytecode between each step.\n \n-#if LLVM_VERSION_GE(11, 0)\n static bool\n clearDSOLocalOnDeclarations(Module &Mod, TargetMachine &TM) {\n   // When linking an ELF shared object, dso_local should be dropped. We\n@@ -1563,20 +1479,15 @@ clearDSOLocalOnDeclarations(Module &Mod, TargetMachine &TM) {\n       Mod.getPIELevel() == PIELevel::Default;\n   return ClearDSOLocalOnDeclarations;\n }\n-#endif\n \n extern \"C\" bool\n LLVMRustPrepareThinLTORename(const LLVMRustThinLTOData *Data, LLVMModuleRef M,\n                              LLVMTargetMachineRef TM) {\n   Module &Mod = *unwrap(M);\n   TargetMachine &Target = *unwrap(TM);\n \n-#if LLVM_VERSION_GE(11, 0)\n   bool ClearDSOLocal = clearDSOLocalOnDeclarations(Mod, Target);\n   bool error = renameModuleForThinLTO(Mod, Data->Index, ClearDSOLocal);\n-#else\n-  bool error = renameModuleForThinLTO(Mod, Data->Index);\n-#endif\n \n   if (error) {\n     LLVMRustSetLastError(\"renameModuleForThinLTO failed\");\n@@ -1645,12 +1556,8 @@ LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M,\n \n     return MOrErr;\n   };\n-#if LLVM_VERSION_GE(11, 0)\n   bool ClearDSOLocal = clearDSOLocalOnDeclarations(Mod, Target);\n   FunctionImporter Importer(Data->Index, Loader, ClearDSOLocal);\n-#else\n-  FunctionImporter Importer(Data->Index, Loader);\n-#endif\n   Expected<bool> Result = Importer.importFunctions(Mod, ImportList);\n   if (!Result) {\n     LLVMRustSetLastError(toString(Result.takeError()).c_str());"}, {"sha": "3ce98b177ad58e8cc6eb1b0efc604c6589faa2af", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -681,10 +681,8 @@ static Optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {\n     return DIFile::ChecksumKind::CSK_MD5;\n   case LLVMRustChecksumKind::SHA1:\n     return DIFile::ChecksumKind::CSK_SHA1;\n-#if (LLVM_VERSION_MAJOR >= 11)\n   case LLVMRustChecksumKind::SHA256:\n     return DIFile::ChecksumKind::CSK_SHA256;\n-#endif\n   default:\n     report_fatal_error(\"bad ChecksumKind.\");\n   }\n@@ -999,14 +997,9 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateUnionType(\n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope,\n     const char *Name, size_t NameLen, LLVMMetadataRef Ty) {\n-#if LLVM_VERSION_GE(11, 0)\n   bool IsDefault = false; // FIXME: should we ever set this true?\n   return wrap(Builder->createTemplateTypeParameter(\n       unwrapDI<DIDescriptor>(Scope), StringRef(Name, NameLen), unwrapDI<DIType>(Ty), IsDefault));\n-#else\n-  return wrap(Builder->createTemplateTypeParameter(\n-      unwrapDI<DIDescriptor>(Scope), StringRef(Name, NameLen), unwrapDI<DIType>(Ty)));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateNameSpace(\n@@ -1246,23 +1239,16 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMArrayTypeKind;\n   case Type::PointerTyID:\n     return LLVMPointerTypeKind;\n-#if LLVM_VERSION_GE(11, 0)\n   case Type::FixedVectorTyID:\n     return LLVMVectorTypeKind;\n-#else\n-  case Type::VectorTyID:\n-    return LLVMVectorTypeKind;\n-#endif\n   case Type::X86_MMXTyID:\n     return LLVMX86_MMXTypeKind;\n   case Type::TokenTyID:\n     return LLVMTokenTypeKind;\n-#if LLVM_VERSION_GE(11, 0)\n   case Type::ScalableVectorTyID:\n     return LLVMScalableVectorTypeKind;\n   case Type::BFloatTyID:\n     return LLVMBFloatTypeKind;\n-#endif\n #if LLVM_VERSION_GE(12, 0)\n   case Type::X86_AMXTyID:\n     return LLVMX86_AMXTypeKind;"}, {"sha": "c4125ba0be0c1122eca9d32445cb7c6966b36447", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -378,11 +378,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 10 {\n+        if major >= 11 {\n             return;\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=10.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=11.0\\n\\n\", version)\n }\n \n fn configure_cmake("}, {"sha": "45b555146cfb23b427ca8fba3ac2ee7080ed0917", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-11/Dockerfile", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-11%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-11%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-11%2FDockerfile?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,5 +1,6 @@\n-FROM ubuntu:18.04\n+FROM ubuntu:20.04\n \n+ARG DEBIAN_FRONTEND=noninteractive\n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n   gcc-multilib \\\n@@ -13,8 +14,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-10-tools \\\n-  llvm-10-dev \\\n+  llvm-11-tools \\\n+  llvm-11-dev \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -28,7 +29,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-10 \\\n+      --llvm-root=/usr/lib/llvm-11 \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n ", "previous_filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-10/Dockerfile"}, {"sha": "904e563787044b0b5fa4252e5b5c309c94091e2c", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -284,7 +284,7 @@ jobs:\n           - name: mingw-check\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-10\n+          - name: x86_64-gnu-llvm-11\n             <<: *job-linux-xl\n \n           - name: x86_64-gnu-tools\n@@ -431,7 +431,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-10\n+          - name: x86_64-gnu-llvm-11\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl"}, {"sha": "5196aa9fa1759e3a0c9b0b051113fcb491d68a73", "filename": "src/test/assembly/asm/aarch64-modifiers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target aarch64-unknown-linux-gnu"}, {"sha": "66c39a48c6e1d5fbc1ecb2ea3207c5dedeb4af37", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64"}, {"sha": "a6985a3bf5c6b6313c13b1e64b1f7bc8bd4e1947", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target armv7-unknown-linux-gnueabihf"}, {"sha": "c848e3284ff1f06bb1926b6ba7587e13b2bb5983", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon"}, {"sha": "1c981040d601474da4547213aa610003c4e16e0d", "filename": "src/test/assembly/asm/global_asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // only-x86_64\n // assembly-output: emit-asm\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel"}, {"sha": "2156d77233d83888f99ed4ee9454596dfb4920e2", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target hexagon-unknown-linux-musl\n // needs-llvm-components: hexagon"}, {"sha": "eb6627639f159d5d77a02c6e9756b7cdcffa5204", "filename": "src/test/assembly/asm/mips-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // revisions: mips32 mips64\n // assembly-output: emit-asm\n //[mips32] compile-flags: --target mips-unknown-linux-gnu"}, {"sha": "cc816fd78f81e2063c66a74e2740afe941b2182f", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target nvptx64-nvidia-cuda\n // compile-flags: --crate-type cdylib"}, {"sha": "e2904cd3f87f60811c9b2a5aea8a230b216cc1fe", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,4 @@\n-// min-llvm-version: 10.0.1\n+// min-llvm-version: 12.0.0\n // revisions: powerpc powerpc64\n // assembly-output: emit-asm\n //[powerpc] compile-flags: --target powerpc-unknown-linux-gnu"}, {"sha": "0fe371c08397d5d300da254625bdf0e1bfdb1649", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // revisions: riscv64 riscv32\n // assembly-output: emit-asm\n //[riscv64] compile-flags: --target riscv64imac-unknown-none-elf"}, {"sha": "b8a4ca08df1cc8ce2d06a39ad7513558b69ede8c", "filename": "src/test/assembly/asm/s390x-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // revisions: s390x\n // assembly-output: emit-asm\n //[s390x] compile-flags: --target s390x-unknown-linux-gnu"}, {"sha": "1a356e3e5f16ef11188484b61268ee04f7890f9a", "filename": "src/test/assembly/asm/wasm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,4 @@\n-// min-llvm-version: 10.0.1\n+// min-llvm-version: 12.0.0\n // assembly-output: emit-asm\n // compile-flags: --target wasm32-unknown-unknown\n // compile-flags: --crate-type cdylib"}, {"sha": "574fdf12cd0401194a11afd13c5fbd4512929d9c", "filename": "src/test/assembly/asm/x86-modifiers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // revisions: x86_64 i686\n // assembly-output: emit-asm\n // compile-flags: -O"}, {"sha": "81be79cbaac18c25d8e9516bd8bb6327bdb6b92d", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // revisions: x86_64 i686\n // assembly-output: emit-asm\n //[x86_64] compile-flags: --target x86_64-unknown-linux-gnu"}, {"sha": "c3ffaeb9547b3c20a43168cc88d3aed04cbb29d3", "filename": "src/test/codegen/alloc-optimisation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,6 +1,5 @@\n //\n // no-system-llvm\n-// min-llvm-version: 10.0.1\n // compile-flags: -O\n #![crate_type=\"lib\"]\n "}, {"sha": "ce13a7ff938c8beb23ce18f7c230dd6ddfc4f8aa", "filename": "src/test/codegen/asm-powerpc-clobbers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // revisions: powerpc powerpc64 powerpc64le\n //[powerpc] compile-flags: --target powerpc-unknown-linux-gnu\n //[powerpc] needs-llvm-components: powerpc"}, {"sha": "2deabcaa6c21f289266b50aada863efa96ba9c3f", "filename": "src/test/codegen/binary-search-index-no-bound-check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbinary-search-index-no-bound-check.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 11.0.0\n // compile-flags: -O\n // ignore-debug: the debug assertions get in the way\n #![crate_type = \"lib\"]"}, {"sha": "aa66c2ed08edb777fc24e53c76b870c99b93026d", "filename": "src/test/codegen/enum-bounds-check-derived-idx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,7 +1,6 @@\n // This test checks an optimization that is not guaranteed to work. This test case should not block\n // a future LLVM update.\n // compile-flags: -O\n-// min-llvm-version: 11.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "b26945bc54940642ee5fc04aa5600bd13a8f87b4", "filename": "src/test/codegen/enum-bounds-check-issue-13926.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,7 +1,6 @@\n // This test checks an optimization that is not guaranteed to work. This test case should not block\n // a future LLVM update.\n // compile-flags: -O\n-// min-llvm-version: 11.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "a1fa1387d9441d0f00d83b8e87fae37d51b7663e", "filename": "src/test/codegen/enum-bounds-check-issue-82871.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-82871.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-82871.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-82871.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -O\n-// min-llvm-version: 11.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "e5ee94e1f45e137263d0971028e79dff857a52fb", "filename": "src/test/codegen/issue-27130.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fissue-27130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fissue-27130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-27130.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -O\n-// min-llvm-version: 11.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "8d07a67a1b451807d84bc90a70a302bdcb2dc04f", "filename": "src/test/codegen/issue-73396-bounds-check-after-position.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fissue-73396-bounds-check-after-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fissue-73396-bounds-check-after-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-73396-bounds-check-after-position.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 11.0.0\n // compile-flags: -O\n // ignore-debug: the debug assertions get in the way\n #![crate_type = \"lib\"]"}, {"sha": "1ad05906e21abe61ad351258e12569ff81d09a16", "filename": "src/test/codegen/issue-73827-bounds-check-index-in-subexpr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fissue-73827-bounds-check-index-in-subexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fissue-73827-bounds-check-index-in-subexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-73827-bounds-check-index-in-subexpr.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,7 +1,6 @@\n // This test checks that bounds checks are elided when\n // index is part of a (x | y) < C style condition\n \n-// min-llvm-version: 11.0.0\n // compile-flags: -O\n \n #![crate_type = \"lib\"]"}, {"sha": "dc7db8e23728ea9f3d3ae64f275014aa437bdd3c", "filename": "src/test/codegen/src-hash-algorithm/src-hash-algorithm-sha256.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fsrc-hash-algorithm%2Fsrc-hash-algorithm-sha256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fsrc-hash-algorithm%2Fsrc-hash-algorithm-sha256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsrc-hash-algorithm%2Fsrc-hash-algorithm-sha256.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -g -Z src-hash-algorithm=sha256\n-// min-llvm-version: 11.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "a656c9e6f656a8f01db6717e3bfff5ec27d5d3bc", "filename": "src/test/codegen/vec-in-place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-in-place.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,6 +1,5 @@\n // ignore-debug: the debug assertions get in the way\n // compile-flags: -O\n-// min-llvm-version: 11.0\n #![crate_type = \"lib\"]\n \n // Ensure that trivial casts of vec elements are O(1)"}, {"sha": "8722d9e10d91d204fa457b5afc93eb1b3f1f7e42", "filename": "src/test/run-make-fulldeps/coverage-llvmir/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,5 +1,4 @@\n # needs-profiler-support\n-# min-llvm-version: 11.0\n \n -include ../coverage/coverage_tools.mk\n "}, {"sha": "4adf02bee0af47eaf85a133e0871c87f6746695a", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,6 +1,5 @@\n # needs-profiler-support\n # ignore-windows-gnu\n-# min-llvm-version: 11.0\n \n # FIXME(mati865): MinGW GCC miscompiles compiler-rt profiling library but with Clang it works\n # properly. Since we only have GCC on the CI ignore the test for now."}, {"sha": "e8e62efe01c140de3ddc5c462469aa06859ac20d", "filename": "src/test/run-make-fulldeps/split-debuginfo/Makefile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,7 +1,5 @@\n -include ../tools.mk\n \n-# min-llvm-version: 11.0\n-\n all: off packed unpacked\n \n ifeq ($(UNAME),Darwin)"}, {"sha": "ef61ff0450157a73c603b9ec1cff626547fa12ec", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,7 +1,6 @@\n -include ../tools.mk\n \n # only-linux\n-# min-llvm-version: 11.0\n \n all:\n \t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 foo.rs -g"}, {"sha": "05165b2d46c0dd3eb85fccd5dd7711d57592b269", "filename": "src/test/ui/asm/aarch64/const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // only-aarch64\n // run-pass\n // revisions: mirunsafeck thirunsafeck"}, {"sha": "143ed1824039c91b4fb91ad789a6a600659e5d0a", "filename": "src/test/ui/asm/aarch64/srcloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // only-aarch64\n // build-fail\n // compile-flags: -Ccodegen-units=1"}, {"sha": "526555334cb882cd1cf2c5d97ef225bab56974fc", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // only-aarch64\n // only-linux\n // run-pass"}, {"sha": "dbf17755720829516155af2e69b864d2952e92ec", "filename": "src/test/ui/asm/x86_64/const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // only-x86_64\n // run-pass\n // revisions: mirunsafeck thirunsafeck"}, {"sha": "c4ccfb8016a7798e7bf87178a61ecf9d9f71fc47", "filename": "src/test/ui/asm/x86_64/srcloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 10.0.1\n // only-x86_64\n // build-fail\n // compile-flags: -Ccodegen-units=1"}, {"sha": "77894657292fbb8e40d24488b952192d9c94017e", "filename": "src/test/ui/asm/x86_64/srcloc.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.stderr?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,5 +1,5 @@\n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:11:15\n+  --> $DIR/srcloc.rs:10:15\n    |\n LL |         asm!(\"invalid_instruction\");\n    |               ^\n@@ -11,7 +11,7 @@ LL |     invalid_instruction\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:15:13\n+  --> $DIR/srcloc.rs:14:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -23,7 +23,7 @@ LL |             invalid_instruction\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:20:13\n+  --> $DIR/srcloc.rs:19:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -35,7 +35,7 @@ LL |             invalid_instruction\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:26:13\n+  --> $DIR/srcloc.rs:25:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -47,7 +47,7 @@ LL |             invalid_instruction\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:33:13\n+  --> $DIR/srcloc.rs:32:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -59,7 +59,7 @@ LL |             invalid_instruction\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:38:14\n+  --> $DIR/srcloc.rs:37:14\n    |\n LL |         asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n    |              ^\n@@ -71,7 +71,7 @@ LL |     invalid_instruction\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: scale factor without index register is ignored\n-  --> $DIR/srcloc.rs:41:15\n+  --> $DIR/srcloc.rs:40:15\n    |\n LL |         asm!(\"movaps %xmm3, (%esi, 2)\", options(att_syntax));\n    |               ^\n@@ -83,7 +83,7 @@ LL |     movaps %xmm3, (%esi, 2)\n    |                          ^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:45:14\n+  --> $DIR/srcloc.rs:44:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -95,7 +95,7 @@ LL |     invalid_instruction\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:51:14\n+  --> $DIR/srcloc.rs:50:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -107,7 +107,7 @@ LL | invalid_instruction\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:58:14\n+  --> $DIR/srcloc.rs:57:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -119,7 +119,7 @@ LL | invalid_instruction\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:65:13\n+  --> $DIR/srcloc.rs:64:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -131,7 +131,7 @@ LL | invalid_instruction\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction'\n-  --> $DIR/srcloc.rs:72:13\n+  --> $DIR/srcloc.rs:71:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -143,7 +143,7 @@ LL | invalid_instruction\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction1'\n-  --> $DIR/srcloc.rs:79:14\n+  --> $DIR/srcloc.rs:78:14\n    |\n LL |             \"invalid_instruction1\",\n    |              ^\n@@ -155,7 +155,7 @@ LL |     invalid_instruction1\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction2'\n-  --> $DIR/srcloc.rs:80:14\n+  --> $DIR/srcloc.rs:79:14\n    |\n LL |             \"invalid_instruction2\",\n    |              ^\n@@ -167,7 +167,7 @@ LL | invalid_instruction2\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction1'\n-  --> $DIR/srcloc.rs:86:13\n+  --> $DIR/srcloc.rs:85:13\n    |\n LL |             concat!(\n    |             ^\n@@ -179,7 +179,7 @@ LL |     invalid_instruction1\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction2'\n-  --> $DIR/srcloc.rs:86:13\n+  --> $DIR/srcloc.rs:85:13\n    |\n LL |             concat!(\n    |             ^\n@@ -191,7 +191,7 @@ LL | invalid_instruction2\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction1'\n-  --> $DIR/srcloc.rs:95:13\n+  --> $DIR/srcloc.rs:94:13\n    |\n LL |             concat!(\n    |             ^\n@@ -203,7 +203,7 @@ LL |     invalid_instruction1\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction2'\n-  --> $DIR/srcloc.rs:95:13\n+  --> $DIR/srcloc.rs:94:13\n    |\n LL |             concat!(\n    |             ^\n@@ -215,7 +215,7 @@ LL | invalid_instruction2\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction3'\n-  --> $DIR/srcloc.rs:99:13\n+  --> $DIR/srcloc.rs:98:13\n    |\n LL |             concat!(\n    |             ^\n@@ -227,7 +227,7 @@ LL | invalid_instruction3\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction4'\n-  --> $DIR/srcloc.rs:99:13\n+  --> $DIR/srcloc.rs:98:13\n    |\n LL |             concat!(\n    |             ^\n@@ -239,7 +239,7 @@ LL | invalid_instruction4\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction1'\n-  --> $DIR/srcloc.rs:110:13\n+  --> $DIR/srcloc.rs:109:13\n    |\n LL |             concat!(\n    |             ^\n@@ -251,7 +251,7 @@ LL |     invalid_instruction1\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction2'\n-  --> $DIR/srcloc.rs:110:13\n+  --> $DIR/srcloc.rs:109:13\n    |\n LL |             concat!(\n    |             ^\n@@ -263,7 +263,7 @@ LL | invalid_instruction2\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction3'\n-  --> $DIR/srcloc.rs:114:13\n+  --> $DIR/srcloc.rs:113:13\n    |\n LL |             concat!(\n    |             ^\n@@ -275,7 +275,7 @@ LL | invalid_instruction3\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: invalid instruction mnemonic 'invalid_instruction4'\n-  --> $DIR/srcloc.rs:114:13\n+  --> $DIR/srcloc.rs:113:13\n    |\n LL |             concat!(\n    |             ^"}, {"sha": "0496ff6dd2458ba0f7f0765b7a9dae7b1054c9ed", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,4 +1,4 @@\n-// min-llvm-version: 10.0.1\n+// min-llvm-version: 12.0.0\n // only-x86_64\n // only-linux\n // run-pass"}, {"sha": "d5c67af2b41464fab168132c2e405752193e8963", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,7 +1,6 @@\n // build-fail\n // compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n // needs-llvm-components: arm\n-// min-llvm-version: 11.0\n #![feature(abi_c_cmse_nonsecure_call, no_core, lang_items, intrinsics)]\n #![no_core]\n #[lang=\"sized\"]"}, {"sha": "ca133a5e167d9a23b5ccb4add6badb27fb6a271b", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n // needs-llvm-components: arm\n-// min-llvm-version: 11.0\n+// min-llvm-version: 12.0\n #![feature(cmse_nonsecure_entry, no_core, lang_items)]\n #![no_core]\n #[lang=\"sized\"]"}, {"sha": "6e030f1cc487573adfdf21f91b0fbbcf45e3004c", "filename": "src/test/ui/issues/issue-69225-SCEVAddExpr-wrap-flag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fissues%2Fissue-69225-SCEVAddExpr-wrap-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65150af1b4841feeb8b81f1ada60de1191912590/src%2Ftest%2Fui%2Fissues%2Fissue-69225-SCEVAddExpr-wrap-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69225-SCEVAddExpr-wrap-flag.rs?ref=65150af1b4841feeb8b81f1ada60de1191912590", "patch": "@@ -1,6 +1,5 @@\n // run-fail\n // compile-flags: -C opt-level=3\n-// min-llvm-version: 11.0\n // error-pattern: index out of bounds: the len is 0 but the index is 16777216\n // ignore-wasm no panic or subprocess support\n // ignore-emscripten no panic or subprocess support"}]}