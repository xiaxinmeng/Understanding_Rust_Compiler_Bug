{"sha": "ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOGQyM2Q1NDQ0NWY4ZDNlNjJhNWUyYmQ2ZmRlOWFjM2ZmMmNmMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-20T22:52:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-20T22:52:11Z"}, "message": "Auto merge of #52574 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #52502 (fix unsafety: don't call ptr_rotate for ZST)\n - #52505 (rustc: Remove a workaround in ThinLTO fixed upstream)\n - #52526 (Enable run-pass/sepcomp-lib-lto.rs on Android)\n - #52527 (Remove duplicate E0396 tests)\n - #52539 (rustc: Fix two custom attributes with custom derive)\n - #52540 (Fix docker/run.sh script when run locally)\n - #52573 (Cleanups)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5b1993b8da7f303046ad60ce690ca657cb34bced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b1993b8da7f303046ad60ce690ca657cb34bced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "html_url": "https://github.com/rust-lang/rust/commit/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878dd0b5e19e086e608351f33bf12e3625425f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/878dd0b5e19e086e608351f33bf12e3625425f20", "html_url": "https://github.com/rust-lang/rust/commit/878dd0b5e19e086e608351f33bf12e3625425f20"}, {"sha": "7bf3578a39e71d61a22beaa121ebd25de2b25738", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf3578a39e71d61a22beaa121ebd25de2b25738", "html_url": "https://github.com/rust-lang/rust/commit/7bf3578a39e71d61a22beaa121ebd25de2b25738"}], "stats": {"total": 134, "additions": 73, "deletions": 61}, "files": [{"sha": "b1ee636644ec79e76415e4cb2eb76d64fa3c6f84", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -99,7 +99,7 @@ objdir=$root_dir/obj\n \n mkdir -p $HOME/.cargo\n mkdir -p $objdir/tmp\n-mkdir $objdir/cores\n+mkdir -p $objdir/cores\n \n args=\n if [ \"$SCCACHE_BUCKET\" != \"\" ]; then"}, {"sha": "28ef53ccb5cb6b50547b5619bd7d5b7af86049c7", "filename": "src/libcore/slice/rotate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibcore%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibcore%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Frotate.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -48,7 +48,6 @@ impl<T> RawArray<T> {\n /// # Safety\n ///\n /// The specified range must be valid for reading and writing.\n-/// The type `T` must have non-zero size.\n ///\n /// # Algorithm\n ///\n@@ -73,6 +72,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mid: *mut T, mut right: usize) {\n     loop {\n         let delta = cmp::min(left, right);\n         if delta <= RawArray::<T>::cap() {\n+            // We will always hit this immediately for ZST.\n             break;\n         }\n "}, {"sha": "f2f7f95426ab827e977cab992111d409df00bfa5", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -51,6 +51,12 @@ impl MaybeFnLike for ast::Item {\n     }\n }\n \n+impl MaybeFnLike for ast::ImplItem {\n+    fn is_fn_like(&self) -> bool {\n+        match self.node { ast::ImplItemKind::Method(..) => true, _ => false, }\n+    }\n+}\n+\n impl MaybeFnLike for ast::TraitItem {\n     fn is_fn_like(&self) -> bool {\n         match self.node {\n@@ -141,7 +147,7 @@ impl<'a> FnLikeNode<'a> {\n         let fn_like = match node {\n             map::NodeItem(item) => item.is_fn_like(),\n             map::NodeTraitItem(tm) => tm.is_fn_like(),\n-            map::NodeImplItem(_) => true,\n+            map::NodeImplItem(it) => it.is_fn_like(),\n             map::NodeExpr(e) => e.is_fn_like(),\n             _ => false\n         };"}, {"sha": "60b5cf2ec765134f4d95ca629e34a574acf825d1", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -759,20 +759,6 @@ impl ThinModule {\n         cgcx.save_temp_bitcode(&module, \"thin-lto-after-pm\");\n         timeline.record(\"thin-done\");\n \n-        // FIXME: this is a hack around a bug in LLVM right now. Discovered in\n-        // #46910 it was found out that on 32-bit MSVC LLVM will hit a codegen\n-        // error if there's an available_externally function in the LLVM module.\n-        // Typically we don't actually use these functions but ThinLTO makes\n-        // heavy use of them when inlining across modules.\n-        //\n-        // Tracked upstream at https://bugs.llvm.org/show_bug.cgi?id=35736 this\n-        // function call (and its definition on the C++ side of things)\n-        // shouldn't be necessary eventually and we can safetly delete these few\n-        // lines.\n-        llvm::LLVMRustThinLTORemoveAvailableExternally(llmod);\n-        cgcx.save_temp_bitcode(&module, \"thin-lto-after-rm-ae\");\n-        timeline.record(\"no-ae\");\n-\n         Ok(module)\n     }\n }"}, {"sha": "e4acb2ad4b161d2d684a403acc62605b48099e8f", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -13,7 +13,7 @@\n use llvm;\n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{Opcode, IntPredicate, RealPredicate, False, OperandBundleDef};\n-use llvm::{ValueRef, BasicBlockRef, BuilderRef, ModuleRef};\n+use llvm::{ValueRef, BasicBlockRef, BuilderRef};\n use common::*;\n use type_::Type;\n use value::Value;\n@@ -1157,23 +1157,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn trap(&self) {\n-        unsafe {\n-            let bb: BasicBlockRef = llvm::LLVMGetInsertBlock(self.llbuilder);\n-            let fn_: ValueRef = llvm::LLVMGetBasicBlockParent(bb);\n-            let m: ModuleRef = llvm::LLVMGetGlobalParent(fn_);\n-            let p = \"llvm.trap\\0\".as_ptr();\n-            let t: ValueRef = llvm::LLVMGetNamedFunction(m, p as *const _);\n-            assert!((t as isize != 0));\n-            let args: &[ValueRef] = &[];\n-            self.count_insn(\"trap\");\n-            llvm::LLVMRustBuildCall(self.llbuilder, t,\n-                                    args.as_ptr(), args.len() as c_uint,\n-                                    ptr::null_mut(),\n-                                    noname());\n-        }\n-    }\n-\n     pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,\n                        num_clauses: usize) -> ValueRef {\n         self.count_insn(\"landingpad\");"}, {"sha": "8d04438eea29000edf06fbeb0b26af50010d19e2", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -1791,7 +1791,6 @@ extern \"C\" {\n                                            CU1: *mut *mut c_void,\n                                            CU2: *mut *mut c_void);\n     pub fn LLVMRustThinLTOPatchDICompileUnit(M: ModuleRef, CU: *mut c_void);\n-    pub fn LLVMRustThinLTORemoveAvailableExternally(M: ModuleRef);\n \n     pub fn LLVMRustLinkerNew(M: ModuleRef) -> LinkerRef;\n     pub fn LLVMRustLinkerAdd(linker: LinkerRef,"}, {"sha": "d64f3de8daa97491bc045ded1e81964ed02e121a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -240,6 +240,13 @@ impl Invocation {\n             InvocationKind::Derive { ref path, .. } => path.span,\n         }\n     }\n+\n+    pub fn attr_id(&self) -> Option<ast::AttrId> {\n+        match self.kind {\n+            InvocationKind::Attr { attr: Some(ref attr), .. } => Some(attr.id),\n+            _ => None,\n+        }\n+    }\n }\n \n pub struct MacroExpander<'a, 'b:'a> {\n@@ -331,10 +338,20 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n             let scope =\n                 if self.monotonic { invoc.expansion_data.mark } else { orig_expansion_data.mark };\n+            let attr_id_before = invoc.attr_id();\n             let ext = match self.cx.resolver.resolve_invoc(&mut invoc, scope, force) {\n                 Ok(ext) => Some(ext),\n                 Err(Determinacy::Determined) => None,\n                 Err(Determinacy::Undetermined) => {\n+                    // Sometimes attributes which we thought were invocations\n+                    // end up being custom attributes for custom derives. If\n+                    // that's the case our `invoc` will have changed out from\n+                    // under us. If this is the case we're making progress so we\n+                    // want to flag it as such, and we test this by looking if\n+                    // the `attr_id()` method has been changing over time.\n+                    if invoc.attr_id() != attr_id_before {\n+                        progress = true;\n+                    }\n                     undetermined_invocations.push(invoc);\n                     continue\n                 }"}, {"sha": "2f28c5b32fb88de32c0e490a1df7301dc55a5dcc", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -1228,15 +1228,6 @@ LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod, DICompileUnit *Unit) {\n   MD->addOperand(Unit);\n }\n \n-extern \"C\" void\n-LLVMRustThinLTORemoveAvailableExternally(LLVMModuleRef Mod) {\n-  Module *M = unwrap(Mod);\n-  for (Function &F : M->functions()) {\n-    if (F.hasAvailableExternallyLinkage())\n-      F.deleteBody();\n-  }\n-}\n-\n #else\n \n extern \"C\" bool\n@@ -1328,9 +1319,4 @@ LLVMRustThinLTOPatchDICompileUnit(LLVMModuleRef Mod) {\n   report_fatal_error(\"ThinLTO not available\");\n }\n \n-extern \"C\" void\n-LLVMRustThinLTORemoveAvailableExternally(LLVMModuleRef Mod) {\n-  report_fatal_error(\"ThinLTO not available\");\n-}\n-\n #endif // LLVM_VERSION_GE(4, 0)"}, {"sha": "d02edb50fb2b5ae27099334e464bc7e2ca64e2e0", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-two-attrs.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-two-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-two-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-two-attrs.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_derive(A, attributes(b))]\n+pub fn foo(_x: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}"}, {"sha": "6a0a3b3a9416a1a22e297932de600fad62dd64d6", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-two-attrs.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-two-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-two-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-two-attrs.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:derive-two-attrs.rs\n+\n+#![feature(use_extern_macros)]\n+\n+extern crate derive_two_attrs as foo;\n+\n+use foo::A;\n+\n+#[derive(A)]\n+#[b]\n+#[b]\n+struct B;\n+\n+fn main() {}"}, {"sha": "e6f191ea9522f4e33a59c7b1f2d7d049de919e5c", "filename": "src/test/run-pass/const-block.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -39,13 +39,6 @@ static BLOCK_FN: fn(usize) -> usize = { foo::<usize> };\n \n static BLOCK_ENUM_CONSTRUCTOR: fn(usize) -> Option<usize> = { Some };\n \n-// FIXME #13972\n-// static BLOCK_UNSAFE_SAFE_PTR: &'static isize = unsafe { &*(0xdeadbeef as *const isize) };\n-// static BLOCK_UNSAFE_SAFE_PTR_2: &'static isize = unsafe {\n-//     const X: *const isize = 0xdeadbeef as *const isize;\n-//     &*X\n-// };\n-\n pub fn main() {\n     assert_eq!(BLOCK_INTEGRAL, 1);\n     assert_eq!(BLOCK_EXPLICIT_UNIT, ());\n@@ -58,7 +51,4 @@ pub fn main() {\n     assert_eq!(BLOCK_FN_INFERRED(300), 300);\n     assert_eq!(BLOCK_FN(300), 300);\n     assert_eq!(BLOCK_ENUM_CONSTRUCTOR(200), Some(200));\n-    // FIXME #13972\n-    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR as *const isize as usize, 0xdeadbeef);\n-    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR_2 as *const isize as usize, 0xdeadbeef);\n }"}, {"sha": "8d73f4db7d234c23a715800748652b41a44bfd0b", "filename": "src/test/run-pass/sepcomp-lib-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass%2Fsepcomp-lib-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24/src%2Ftest%2Frun-pass%2Fsepcomp-lib-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-lib-lto.rs?ref=ee8d23d54445f8d3e62a5e2bd6fde9ac3ff2cf24", "patch": "@@ -14,7 +14,6 @@\n // aux-build:sepcomp_lib.rs\n // compile-flags: -C lto -g\n // no-prefer-dynamic\n-// ignore-android FIXME #18800\n \n extern crate sepcomp_lib;\n use sepcomp_lib::a::one;"}]}