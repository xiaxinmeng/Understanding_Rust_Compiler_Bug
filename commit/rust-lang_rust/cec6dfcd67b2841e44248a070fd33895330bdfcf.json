{"sha": "cec6dfcd67b2841e44248a070fd33895330bdfcf", "node_id": "C_kwDOAAsO6NoAKGNlYzZkZmNkNjdiMjg0MWU0NDI0OGEwNzBmZDMzODk1MzMwYmRmY2Y", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-23T16:47:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-23T16:47:08Z"}, "message": "explain how to turn integers into fn ptrs\n\n(with an intermediate raw ptr, not a direct transmute)", "tree": {"sha": "4244fb5592ca0f1a1752ce3c943317d3f25e00d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4244fb5592ca0f1a1752ce3c943317d3f25e00d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec6dfcd67b2841e44248a070fd33895330bdfcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec6dfcd67b2841e44248a070fd33895330bdfcf", "html_url": "https://github.com/rust-lang/rust/commit/cec6dfcd67b2841e44248a070fd33895330bdfcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec6dfcd67b2841e44248a070fd33895330bdfcf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ea21343a432a4c51b363d6f53bed694f81ea3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ea21343a432a4c51b363d6f53bed694f81ea3a", "html_url": "https://github.com/rust-lang/rust/commit/09ea21343a432a4c51b363d6f53bed694f81ea3a"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "6ba359f6edcd872810a1352972630ae895da30e5", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cec6dfcd67b2841e44248a070fd33895330bdfcf/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec6dfcd67b2841e44248a070fd33895330bdfcf/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=cec6dfcd67b2841e44248a070fd33895330bdfcf", "patch": "@@ -930,6 +930,9 @@ extern \"rust-intrinsic\" {\n     /// fn foo() -> i32 {\n     ///     0\n     /// }\n+    /// // Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer.\n+    /// // This avoids an integer-to-pointer `transmute`, which can be problematic.\n+    /// // Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine.\n     /// let pointer = foo as *const ();\n     /// let function = unsafe {\n     ///     std::mem::transmute::<*const (), fn() -> i32>(pointer)"}, {"sha": "147312b9720d4b33a4edd8d6f2ef08f4e31ae868", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cec6dfcd67b2841e44248a070fd33895330bdfcf/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec6dfcd67b2841e44248a070fd33895330bdfcf/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=cec6dfcd67b2841e44248a070fd33895330bdfcf", "patch": "@@ -1338,6 +1338,32 @@ mod prim_ref {}\n /// is a reference to the function-specific ZST. `&bar` is basically never what you\n /// want when `bar` is a function.\n ///\n+/// ### Casting to and from integers\n+///\n+/// You cast function pointers directly to integers:\n+///\n+/// ```rust\n+/// let fnptr: fn(i32) -> i32 = |x| x+2;\n+/// let fnptr_addr = fnptr as usize;\n+/// ```\n+///\n+/// However, a direct cast back is not possible. You need to use `transmute`:\n+///\n+/// ```rust\n+/// # let fnptr: fn(i32) -> i32 = |x| x+2;\n+/// # let fnptr_addr = fnptr as usize;\n+/// let fnptr = fnptr_addr as *const ();\n+/// let fnptr: fn(i32) -> i32 = unsafe { std::mem::transmute(fnptr) };\n+/// assert_eq!(fnptr(40), 42);\n+/// ```\n+///\n+/// Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer.\n+/// This avoids an integer-to-pointer `transmute`, which can be problematic.\n+/// Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine.\n+///\n+/// Note that all of this is not portable to platforms where function pointers and data pointers\n+/// have different sizes.\n+///\n /// ### Traits\n ///\n /// Function pointers implement the following traits:"}]}