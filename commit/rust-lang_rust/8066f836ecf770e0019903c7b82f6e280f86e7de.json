{"sha": "8066f836ecf770e0019903c7b82f6e280f86e7de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNjZmODM2ZWNmNzcwZTAwMTk5MDNjN2I4MmY2ZTI4MGY4NmU3ZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T08:23:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T08:23:21Z"}, "message": "Auto merge of #7282 - camsteffen:lint-stmt-expr, r=flip1995\n\nFix allow on some statement lints\n\nchangelog: Fix `#[allow(..)]` over statements for [`needless_collect`], [`short_circuit_statement`] and [`unnecessary_operation`]\n\nFixes #7171\nFixes #7202", "tree": {"sha": "318ad657e74314972b785bef2ae063d2147f1c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318ad657e74314972b785bef2ae063d2147f1c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8066f836ecf770e0019903c7b82f6e280f86e7de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8066f836ecf770e0019903c7b82f6e280f86e7de", "html_url": "https://github.com/rust-lang/rust/commit/8066f836ecf770e0019903c7b82f6e280f86e7de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8066f836ecf770e0019903c7b82f6e280f86e7de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c4651f2eeedc6f17f970d05699706c527c7a658", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c4651f2eeedc6f17f970d05699706c527c7a658", "html_url": "https://github.com/rust-lang/rust/commit/9c4651f2eeedc6f17f970d05699706c527c7a658"}, {"sha": "f3e77a454aef617998a016ca70c8dc0d281f208a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e77a454aef617998a016ca70c8dc0d281f208a", "html_url": "https://github.com/rust-lang/rust/commit/f3e77a454aef617998a016ca70c8dc0d281f208a"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "eb82c9c27c3e192306bb34e502f9b41556ba2468", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=8066f836ecf770e0019903c7b82f6e280f86e7de", "patch": "@@ -1,5 +1,5 @@\n use super::NEEDLESS_COLLECT;\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n@@ -116,9 +116,10 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n                     let mut span = MultiSpan::from_span(collect_span);\n                     span.push_span_label(iter_call.span, \"the iterator could be used here instead\".into());\n-                    span_lint_and_then(\n+                    span_lint_hir_and_then(\n                         cx,\n                         super::NEEDLESS_COLLECT,\n+                        init_expr.hir_id,\n                         span,\n                         NEEDLESS_COLLECT_MSG,\n                         |diag| {"}, {"sha": "5976b060ad2f2da3a728aa8a52407b8ce506ff11", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=8066f836ecf770e0019903c7b82f6e280f86e7de", "patch": "@@ -355,8 +355,10 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n             if binop.node == BinOpKind::And || binop.node == BinOpKind::Or;\n             if let Some(sugg) = Sugg::hir_opt(cx, a);\n             then {\n-                span_lint_and_then(cx,\n+                span_lint_hir_and_then(\n+                    cx,\n                     SHORT_CIRCUIT_STATEMENT,\n+                    expr.hir_id,\n                     stmt.span,\n                     \"boolean short circuit operator in statement may be clearer using an explicit test\",\n                     |diag| {"}, {"sha": "b2206a822088e01e9d6798a451585e533a0b1b6f", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=8066f836ecf770e0019903c7b82f6e280f86e7de", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint_hir, span_lint_hir_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::has_drop;\n use rustc_errors::Applicability;\n@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for NoEffect {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if let StmtKind::Semi(expr) = stmt.kind {\n             if has_no_effect(cx, expr) {\n-                span_lint(cx, NO_EFFECT, stmt.span, \"statement with no effect\");\n+                span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n             } else if let Some(reduced) = reduce_expression(cx, expr) {\n                 let mut snippet = String::new();\n                 for e in reduced {\n@@ -106,14 +106,15 @@ impl<'tcx> LateLintPass<'tcx> for NoEffect {\n                         return;\n                     }\n                 }\n-                span_lint_and_sugg(\n+                span_lint_hir_and_then(\n                     cx,\n                     UNNECESSARY_OPERATION,\n+                    expr.hir_id,\n                     stmt.span,\n                     \"statement can be reduced\",\n-                    \"replace it with\",\n-                    snippet,\n-                    Applicability::MachineApplicable,\n+                    |diag| {\n+                        diag.span_suggestion(stmt.span, \"replace it with\", snippet, Applicability::MachineApplicable);\n+                    },\n                 );\n             }\n         }"}, {"sha": "7c94474cb35d2f8cbee0a217b491df2a13be515a", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8066f836ecf770e0019903c7b82f6e280f86e7de/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=8066f836ecf770e0019903c7b82f6e280f86e7de", "patch": "@@ -167,7 +167,7 @@ pub fn span_lint_hir_and_then(\n     cx: &LateContext<'_>,\n     lint: &'static Lint,\n     hir_id: HirId,\n-    sp: Span,\n+    sp: impl Into<MultiSpan>,\n     msg: &str,\n     f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n ) {"}, {"sha": "2c94235b8f533279ba502e12a95c88c1372fb9c9", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8066f836ecf770e0019903c7b82f6e280f86e7de/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8066f836ecf770e0019903c7b82f6e280f86e7de/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=8066f836ecf770e0019903c7b82f6e280f86e7de", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::{BinaryHeap, HashMap, LinkedList, VecDeque};\n+use std::collections::{BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n \n fn main() {\n     let sample = [1; 5];\n@@ -75,3 +75,9 @@ mod issue7110 {\n         buffer.len()\n     }\n }\n+\n+fn allow_test() {\n+    #[allow(clippy::needless_collect)]\n+    let v = [1].iter().collect::<Vec<_>>();\n+    v.into_iter().collect::<HashSet<_>>();\n+}"}, {"sha": "7ec845adfaacf6d290e4d4be2011f3b0917d2621", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8066f836ecf770e0019903c7b82f6e280f86e7de/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8066f836ecf770e0019903c7b82f6e280f86e7de/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=8066f836ecf770e0019903c7b82f6e280f86e7de", "patch": "@@ -91,6 +91,9 @@ fn main() {\n     let s: String = \"foo\".into();\n     FooString { s: s };\n \n+    #[allow(clippy::no_effect)]\n+    0;\n+\n     // Do not warn\n     get_number();\n     unsafe { unsafe_fn() };"}]}