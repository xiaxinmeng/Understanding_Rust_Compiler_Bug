{"sha": "485c5e67173e444bcb8eeef14c413a7030f6b875", "node_id": "C_kwDOAAsO6NoAKDQ4NWM1ZTY3MTczZTQ0NGJjYjhlZWVmMTRjNDEzYTcwMzBmNmI4NzU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-23T17:43:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-23T17:44:35Z"}, "message": "internal: remove unused dollars", "tree": {"sha": "260fce9381ef0b8ecc221513ba2498df4e05fb81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/260fce9381ef0b8ecc221513ba2498df4e05fb81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/485c5e67173e444bcb8eeef14c413a7030f6b875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/485c5e67173e444bcb8eeef14c413a7030f6b875", "html_url": "https://github.com/rust-lang/rust/commit/485c5e67173e444bcb8eeef14c413a7030f6b875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/485c5e67173e444bcb8eeef14c413a7030f6b875/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a83d1be666102767379fdaa53f1ffe95bd2b363", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a83d1be666102767379fdaa53f1ffe95bd2b363", "html_url": "https://github.com/rust-lang/rust/commit/5a83d1be666102767379fdaa53f1ffe95bd2b363"}], "stats": {"total": 58, "additions": 5, "deletions": 53}, "files": [{"sha": "640caa07780a94b6fdaab0768a2116078d1cdf19", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=485c5e67173e444bcb8eeef14c413a7030f6b875", "patch": "@@ -39,7 +39,6 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T!['('],\n         T!['{'],\n         T!['['],\n-        L_DOLLAR,\n         T![|],\n         T![move],\n         T![box],\n@@ -59,7 +58,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         LIFETIME_IDENT,\n     ]));\n \n-const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[T![let], R_DOLLAR]);\n+const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[T![let]]);\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     if let Some(m) = literal(p) {\n@@ -72,7 +71,6 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n     let done = match p.current() {\n         T!['('] => tuple_expr(p),\n         T!['['] => array_expr(p),\n-        L_DOLLAR => meta_var_expr(p),\n         T![|] => closure_expr(p),\n         T![move] if la == T![|] => closure_expr(p),\n         T![async] if la == T![|] || (la == T![move] && p.nth(2) == T![|]) => closure_expr(p),\n@@ -622,27 +620,3 @@ fn box_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     }\n     m.complete(p, BOX_EXPR)\n }\n-\n-/// Expression from `$var` macro expansion, wrapped in dollars\n-fn meta_var_expr(p: &mut Parser) -> CompletedMarker {\n-    assert!(p.at(L_DOLLAR));\n-    let m = p.start();\n-    p.bump(L_DOLLAR);\n-    let expr = expr_bp(p, None, Restrictions { forbid_structs: false, prefer_stmt: false }, 1);\n-\n-    match (expr, p.current()) {\n-        (Some((cm, _)), R_DOLLAR) => {\n-            p.bump(R_DOLLAR);\n-            // FIXME: this leaves the dollar hanging in the air...\n-            m.abandon(p);\n-            cm\n-        }\n-        _ => {\n-            while !p.at(R_DOLLAR) {\n-                p.bump_any();\n-            }\n-            p.bump(R_DOLLAR);\n-            m.complete(p, ERROR)\n-        }\n-    }\n-}"}, {"sha": "05c1aea5c4b56fb775885f675a1694d2cd5aca3a", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=485c5e67173e444bcb8eeef14c413a7030f6b875", "patch": "@@ -19,7 +19,6 @@ pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(TokenSet::new(&[\n const TYPE_RECOVERY_SET: TokenSet = TokenSet::new(&[\n     T![')'],\n     T![,],\n-    L_DOLLAR,\n     // test_err struct_field_recover\n     // struct S { f pub g: () }\n     T![pub],"}, {"sha": "5820ffd77d4f5419edebc5e32c296e822b04c495", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=485c5e67173e444bcb8eeef14c413a7030f6b875", "patch": "@@ -7,7 +7,7 @@ use drop_bomb::DropBomb;\n use crate::{\n     event::Event,\n     ParseError,\n-    SyntaxKind::{self, EOF, ERROR, L_DOLLAR, R_DOLLAR, TOMBSTONE},\n+    SyntaxKind::{self, EOF, ERROR, TOMBSTONE},\n     TokenSet, TokenSource, T,\n };\n \n@@ -215,23 +215,13 @@ impl<'t> Parser<'t> {\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_and_bump(&mut self, message: &str) {\n-        match self.current() {\n-            L_DOLLAR | R_DOLLAR => {\n-                let m = self.start();\n-                self.error(message);\n-                self.bump_any();\n-                m.complete(self, ERROR);\n-            }\n-            _ => {\n-                self.err_recover(message, TokenSet::EMPTY);\n-            }\n-        }\n+        self.err_recover(message, TokenSet::EMPTY);\n     }\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_recover(&mut self, message: &str, recovery: TokenSet) {\n         match self.current() {\n-            T!['{'] | T!['}'] | L_DOLLAR | R_DOLLAR => {\n+            T!['{'] | T!['}'] => {\n                 self.error(message);\n                 return;\n             }"}, {"sha": "99e7651906acd85b329faac8d64743315e015249", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=485c5e67173e444bcb8eeef14c413a7030f6b875", "patch": "@@ -120,8 +120,6 @@ pub enum SyntaxKind {\n     LIFETIME_IDENT,\n     COMMENT,\n     SHEBANG,\n-    L_DOLLAR,\n-    R_DOLLAR,\n     SOURCE_FILE,\n     STRUCT,\n     UNION,"}, {"sha": "c0f1d5ef565238420b750bb50911ee45b463724e", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485c5e67173e444bcb8eeef14c413a7030f6b875/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=485c5e67173e444bcb8eeef14c413a7030f6b875", "patch": "@@ -72,16 +72,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n     literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n-    tokens: &[\n-        \"ERROR\",\n-        \"IDENT\",\n-        \"WHITESPACE\",\n-        \"LIFETIME_IDENT\",\n-        \"COMMENT\",\n-        \"SHEBANG\",\n-        \"L_DOLLAR\",\n-        \"R_DOLLAR\",\n-    ],\n+    tokens: &[\"ERROR\", \"IDENT\", \"WHITESPACE\", \"LIFETIME_IDENT\", \"COMMENT\", \"SHEBANG\"],\n     nodes: &[\n         \"SOURCE_FILE\",\n         \"STRUCT\","}]}