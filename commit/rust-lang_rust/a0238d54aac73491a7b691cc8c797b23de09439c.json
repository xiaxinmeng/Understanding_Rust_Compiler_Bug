{"sha": "a0238d54aac73491a7b691cc8c797b23de09439c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMjM4ZDU0YWFjNzM0OTFhN2I2OTFjYzhjNzk3YjIzZGUwOTQzOWM=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-30T18:19:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T18:50:23Z"}, "message": "Use byte strings throughout examples. Add an example that was missed in the last commit.", "tree": {"sha": "8effe2509c947dc89d74fb48613d01324cc95df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8effe2509c947dc89d74fb48613d01324cc95df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0238d54aac73491a7b691cc8c797b23de09439c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0238d54aac73491a7b691cc8c797b23de09439c", "html_url": "https://github.com/rust-lang/rust/commit/a0238d54aac73491a7b691cc8c797b23de09439c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0238d54aac73491a7b691cc8c797b23de09439c/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9956aff18a1220bc4293bc2958cd2fa9b7bb04fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9956aff18a1220bc4293bc2958cd2fa9b7bb04fd", "html_url": "https://github.com/rust-lang/rust/commit/9956aff18a1220bc4293bc2958cd2fa9b7bb04fd"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "7ce6e9b70494d2b404aff7337c5a01dd11ee687b", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a0238d54aac73491a7b691cc8c797b23de09439c/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0238d54aac73491a7b691cc8c797b23de09439c/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=a0238d54aac73491a7b691cc8c797b23de09439c", "patch": "@@ -165,7 +165,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: &[u8] = ['f' as u8, 'o' as u8, 'o' as u8, 0];\n+    /// let x: &[u8] = b\"foo\\0\";\n     /// assert!(Path::new_opt(x).is_none());\n     /// ```\n     #[inline]\n@@ -197,7 +197,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// ```\n     /// let p = Path::new(\"abc/def\");\n-    /// assert_eq!(p.as_vec(), &[97, 98, 99, 47, 100, 101, 102]);\n+    /// assert_eq!(p.as_vec(), b\"abc/def\");\n     /// ```\n     fn as_vec<'a>(&'a self) -> &'a [u8];\n \n@@ -207,7 +207,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// ```\n     /// let p = Path::new(\"abc/def\");\n-    /// assert_eq!(p.into_vec(), vec!(97, 98, 99, 47, 100, 101, 102));\n+    /// assert_eq!(p.into_vec(), b\"abc/def\".to_vec());\n     /// // attempting to use p now results in \"error: use of moved value\"\n     /// ```\n     fn into_vec(self) -> Vec<u8>;\n@@ -245,7 +245,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// ```\n     /// let p = Path::new(\"abc/def/ghi\");\n-    /// assert_eq!(p.dirname(), &[97, 98, 99, 47, 100, 101, 102]);\n+    /// assert_eq!(p.dirname(), b\"abc/def\");\n     /// ```\n     fn dirname<'a>(&'a self) -> &'a [u8];\n \n@@ -271,7 +271,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// ```\n     /// let p = Path::new(\"abc/def/ghi\");\n-    /// assert_eq!(p.filename(), Some(&[103, 104, 105]));\n+    /// assert_eq!(p.filename(), Some(b\"ghi\"));\n     /// ```\n     fn filename<'a>(&'a self) -> Option<&'a [u8]>;\n \n@@ -297,7 +297,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// ```\n     /// let p = Path::new(\"/abc/def.txt\");\n-    /// assert_eq!(p.filestem(), Some(&[100, 101, 102]));\n+    /// assert_eq!(p.filestem(), Some(b\"def\"));\n     /// ```\n     fn filestem<'a>(&'a self) -> Option<&'a [u8]> {\n         match self.filename() {\n@@ -336,7 +336,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// ```\n     /// let p = Path::new(\"abc/def.txt\");\n-    /// assert_eq!(p.extension(), Some(&[116, 120, 116]));\n+    /// assert_eq!(p.extension(), Some(b\"txt\"));\n     /// ```\n     fn extension<'a>(&'a self) -> Option<&'a [u8]> {\n         match self.filename() {\n@@ -458,6 +458,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// byte vector or string.\n     /// See `set_extension` for details.\n     ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut p = Path::new(\"abc/def.txt\");\n+    /// assert!(p.with_extension(\"csv\") == Path::new(\"abc/def.csv\"));\n+    /// ```\n+    ///\n     /// # Failure\n     ///\n     /// Fails the task if the extension contains a NUL."}]}