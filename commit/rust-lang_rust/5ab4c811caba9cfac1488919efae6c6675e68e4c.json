{"sha": "5ab4c811caba9cfac1488919efae6c6675e68e4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYjRjODExY2FiYTljZmFjMTQ4ODkxOWVmYWU2YzY2NzVlNjhlNGM=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-30T11:36:27Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-04-30T11:36:27Z"}, "message": "str/slice: factor out overflow error messages", "tree": {"sha": "9cacb8f7dacc4f8646c017a8bb5fa89ae8377c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cacb8f7dacc4f8646c017a8bb5fa89ae8377c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab4c811caba9cfac1488919efae6c6675e68e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab4c811caba9cfac1488919efae6c6675e68e4c", "html_url": "https://github.com/rust-lang/rust/commit/5ab4c811caba9cfac1488919efae6c6675e68e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab4c811caba9cfac1488919efae6c6675e68e4c/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbc4d881da41782233f8e0993e7613cee73d57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbc4d881da41782233f8e0993e7613cee73d57b", "html_url": "https://github.com/rust-lang/rust/commit/7fbc4d881da41782233f8e0993e7613cee73d57b"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "93ebc23ac0b0e33f45d3e6ed87519a57902be728", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ab4c811caba9cfac1488919efae6c6675e68e4c/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab4c811caba9cfac1488919efae6c6675e68e4c/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5ab4c811caba9cfac1488919efae6c6675e68e4c", "patch": "@@ -2262,6 +2262,12 @@ fn slice_index_order_fail(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n+#[inline(never)]\n+#[cold]\n+fn slice_index_overflow_fail() -> ! {\n+    panic!(\"attempted to index slice up to maximum usize\");\n+}\n+\n /// A helper trait used for indexing operations.\n #[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n #[rustc_on_unimplemented = \"slice indices are of type `usize` or ranges of `usize`\"]\n@@ -2538,15 +2544,13 @@ impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n \n     #[inline]\n     fn index(self, slice: &[T]) -> &[T] {\n-        assert!(self.end != usize::max_value(),\n-            \"attempted to index slice up to maximum usize\");\n+        if self.end == usize::max_value() { slice_index_overflow_fail(); }\n         (self.start..self.end + 1).index(slice)\n     }\n \n     #[inline]\n     fn index_mut(self, slice: &mut [T]) -> &mut [T] {\n-        assert!(self.end != usize::max_value(),\n-            \"attempted to index slice up to maximum usize\");\n+        if self.end == usize::max_value() { slice_index_overflow_fail(); }\n         (self.start..self.end + 1).index_mut(slice)\n     }\n }"}, {"sha": "f7555700ebc20cbdd5233c3cc9ee7cc7b8f6d3c4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ab4c811caba9cfac1488919efae6c6675e68e4c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab4c811caba9cfac1488919efae6c6675e68e4c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=5ab4c811caba9cfac1488919efae6c6675e68e4c", "patch": "@@ -1849,6 +1849,12 @@ mod traits {\n         }\n     }\n \n+    #[inline(never)]\n+    #[cold]\n+    fn str_index_overflow_fail() -> ! {\n+        panic!(\"attempted to index str up to maximum usize\");\n+    }\n+\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     impl SliceIndex<str> for ops::RangeFull {\n         type Output = str;\n@@ -2053,14 +2059,12 @@ mod traits {\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n-            assert!(self.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n+            if self.end == usize::max_value() { str_index_overflow_fail(); }\n             (self.start..self.end+1).index(slice)\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n-            assert!(self.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n+            if self.end == usize::max_value() { str_index_overflow_fail(); }\n             (self.start..self.end+1).index_mut(slice)\n         }\n     }\n@@ -2098,14 +2102,12 @@ mod traits {\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n-            assert!(self.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n+            if self.end == usize::max_value() { str_index_overflow_fail(); }\n             (..self.end+1).index(slice)\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n-            assert!(self.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n+            if self.end == usize::max_value() { str_index_overflow_fail(); }\n             (..self.end+1).index_mut(slice)\n         }\n     }"}]}