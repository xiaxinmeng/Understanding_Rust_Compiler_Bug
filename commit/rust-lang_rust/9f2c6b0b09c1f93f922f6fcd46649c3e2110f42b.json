{"sha": "9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "node_id": "C_kwDOAAsO6NoAKDlmMmM2YjBiMDljMWY5M2Y5MjJmNmZjZDQ2NjQ5YzNlMjExMGY0MmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-29T13:04:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-29T18:42:23Z"}, "message": "Sanity check computed value for feeable queries.", "tree": {"sha": "6a8625ddd4cb0647e5ddb3501dfa7540fc06a98e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8625ddd4cb0647e5ddb3501dfa7540fc06a98e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "html_url": "https://github.com/rust-lang/rust/commit/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee7a9a8641b79329ed4c221a2ae0e1e0c3d3d75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7a9a8641b79329ed4c221a2ae0e1e0c3d3d75d", "html_url": "https://github.com/rust-lang/rust/commit/ee7a9a8641b79329ed4c221a2ae0e1e0c3d3d75d"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "4047969724aa93bcca3ea9e9a9a54f45f2b26e9d", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "patch": "@@ -359,6 +359,15 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         });\n \n         if modifiers.feedable.is_some() {\n+            assert!(modifiers.anon.is_none(), \"Query {name} cannot be both `feedable` and `anon`.\");\n+            assert!(\n+                modifiers.eval_always.is_none(),\n+                \"Query {name} cannot be both `feedable` and `eval_always`.\"\n+            );\n+            assert!(\n+                modifiers.no_hash.is_none(),\n+                \"Query {name} cannot be both `feedable` and `no_hash`.\"\n+            );\n             feedable_queries.extend(quote! {\n                 #(#doc_comments)*\n                 [#attribute_stream] fn #name(#arg) #result,"}, {"sha": "8d5d84c5db48a17d553e6b532fa5a8b775f3ebce", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "patch": "@@ -252,6 +252,18 @@ macro_rules! depth_limit {\n     };\n }\n \n+macro_rules! feedable {\n+    ([]) => {{\n+        false\n+    }};\n+    ([(feedable) $($rest:tt)*]) => {{\n+        true\n+    }};\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        feedable!([$($modifiers)*])\n+    };\n+}\n+\n macro_rules! hash_result {\n     ([]) => {{\n         Some(dep_graph::hash_result)\n@@ -491,6 +503,7 @@ macro_rules! define_queries {\n                     anon: is_anon!([$($modifiers)*]),\n                     eval_always: is_eval_always!([$($modifiers)*]),\n                     depth_limit: depth_limit!([$($modifiers)*]),\n+                    feedable: feedable!([$($modifiers)*]),\n                     dep_kind: dep_graph::DepKind::$name,\n                     hash_result: hash_result!([$($modifiers)*]),\n                     handle_cycle_error: handle_cycle_error!([$($modifiers)*]),"}, {"sha": "7d1b62ab10237d176ecf25aae385bc6376eaacfc", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "patch": "@@ -15,8 +15,8 @@ pub trait QueryConfig<Qcx: QueryContext> {\n     const NAME: &'static str;\n \n     type Key: Eq + Hash + Clone + Debug;\n-    type Value;\n-    type Stored: Clone;\n+    type Value: Debug;\n+    type Stored: Debug + Clone + std::borrow::Borrow<Self::Value>;\n \n     type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n \n@@ -45,6 +45,7 @@ pub struct QueryVTable<Qcx: QueryContext, K, V> {\n     pub dep_kind: Qcx::DepKind,\n     pub eval_always: bool,\n     pub depth_limit: bool,\n+    pub feedable: bool,\n \n     pub compute: fn(Qcx::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,"}, {"sha": "848fa67e3df25f4e1643b9ca06a004747ae092a7", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=9f2c6b0b09c1f93f922f6fcd46649c3e2110f42b", "patch": "@@ -20,6 +20,7 @@ use rustc_data_structures::sync::Lock;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, FatalError};\n use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n+use std::borrow::Borrow;\n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n@@ -370,11 +371,26 @@ where\n     C: QueryCache,\n     C::Key: Clone + DepNodeParams<Qcx::DepContext>,\n     C::Value: Value<Qcx::DepContext>,\n+    C::Stored: Debug + std::borrow::Borrow<C::Value>,\n     Qcx: QueryContext,\n {\n     match JobOwner::<'_, C::Key>::try_start(&qcx, state, span, key.clone()) {\n         TryGetJob::NotYetStarted(job) => {\n-            let (result, dep_node_index) = execute_job(qcx, key, dep_node, query, job.id);\n+            let (result, dep_node_index) = execute_job(qcx, key.clone(), dep_node, query, job.id);\n+            if query.feedable {\n+                // We may have put a value inside the cache from inside the execution.\n+                // Verify that it has the same hash as what we have now, to ensure consistency.\n+                let _ = cache.lookup(&key, |cached_result, _| {\n+                    let hasher = query.hash_result.expect(\"feedable forbids no_hash\");\n+                    let old_hash = qcx.dep_context().with_stable_hashing_context(|mut hcx| hasher(&mut hcx, cached_result.borrow()));\n+                    let new_hash = qcx.dep_context().with_stable_hashing_context(|mut hcx| hasher(&mut hcx, &result));\n+                    debug_assert_eq!(\n+                        old_hash, new_hash,\n+                        \"Computed query value for {:?}({:?}) is inconsistent with fed value,\\ncomputed={:#?}\\nfed={:#?}\",\n+                        query.dep_kind, key, result, cached_result,\n+                    );\n+                });\n+            }\n             let result = job.complete(cache, result, dep_node_index);\n             (result, Some(dep_node_index))\n         }"}]}