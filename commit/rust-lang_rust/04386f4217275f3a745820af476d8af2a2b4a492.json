{"sha": "04386f4217275f3a745820af476d8af2a2b4a492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Mzg2ZjQyMTcyNzVmM2E3NDU4MjBhZjQ3NmQ4YWYyYTJiNGE0OTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-19T20:07:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-21T15:49:37Z"}, "message": "Prune unused parameters.", "tree": {"sha": "3cb5e35612fa4361d5d5dfc903cf69b7143d5ccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb5e35612fa4361d5d5dfc903cf69b7143d5ccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04386f4217275f3a745820af476d8af2a2b4a492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04386f4217275f3a745820af476d8af2a2b4a492", "html_url": "https://github.com/rust-lang/rust/commit/04386f4217275f3a745820af476d8af2a2b4a492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04386f4217275f3a745820af476d8af2a2b4a492/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "html_url": "https://github.com/rust-lang/rust/commit/b69cd73b7bd448dbfde4cf074b73a4b8384cad38"}], "stats": {"total": 44, "additions": 14, "deletions": 30}, "files": [{"sha": "9399c3a475a3c778a0252f78c58b01fb3cead2d0", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04386f4217275f3a745820af476d8af2a2b4a492/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04386f4217275f3a745820af476d8af2a2b4a492/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=04386f4217275f3a745820af476d8af2a2b4a492", "patch": "@@ -174,9 +174,7 @@ pub fn lookup_in_trait<'a, 'tcx>(\n         m_name: ast::Name,                  // The name `b`.\n         trait_did: DefId,                   // The trait to limit the lookup to.\n         self_ty: ty::t,                     // The type of `a`.\n-        supplied_tps: &'a [ty::t],          // The list of types X, Y, ... .\n-        autoderef_receiver: AutoderefReceiverFlag,\n-        report_statics: StaticMethodsFlag)\n+        supplied_tps: &'a [ty::t])          // The list of types X, Y, ... .\n      -> Option<MethodCallee> {\n     let mut lcx = LookupContext {\n         fcx: fcx,\n@@ -189,8 +187,8 @@ pub fn lookup_in_trait<'a, 'tcx>(\n         extension_candidates: Vec::new(),\n         deref_args: check::DoDerefArgs,\n         check_traits: CheckTraitsOnly,\n-        autoderef_receiver: autoderef_receiver,\n-        report_statics: report_statics,\n+        autoderef_receiver: DontAutoderefReceiver,\n+        report_statics: IgnoreStaticMethods,\n     };\n \n     debug!(\"method lookup_in_trait(self_ty={}, self_expr={})\","}, {"sha": "ebd3754028134428f0ca65a95fdb9edd5be54342", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/04386f4217275f3a745820af476d8af2a2b4a492/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04386f4217275f3a745820af476d8af2a2b4a492/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=04386f4217275f3a745820af476d8af2a2b4a492", "patch": "@@ -2117,9 +2117,7 @@ fn try_overloaded_call<'a>(fcx: &FnCtxt,\n                 method_name,\n                 function_trait,\n                 callee_type,\n-                [],\n-                DontAutoderefReceiver,\n-                IgnoreStaticMethods) {\n+                []) {\n             None => continue,\n             Some(method_callee) => method_callee,\n         };\n@@ -2160,7 +2158,7 @@ fn try_overloaded_deref(fcx: &FnCtxt,\n         (PreferMutLvalue, Some(trait_did)) => {\n             method::lookup_in_trait(fcx, span, base_expr.map(|x| &*x),\n                                     token::intern(\"deref_mut\"), trait_did,\n-                                    base_ty, [], DontAutoderefReceiver, IgnoreStaticMethods)\n+                                    base_ty, [])\n         }\n         _ => None\n     };\n@@ -2170,7 +2168,7 @@ fn try_overloaded_deref(fcx: &FnCtxt,\n         (None, Some(trait_did)) => {\n             method::lookup_in_trait(fcx, span, base_expr.map(|x| &*x),\n                                     token::intern(\"deref\"), trait_did,\n-                                    base_ty, [], DontAutoderefReceiver, IgnoreStaticMethods)\n+                                    base_ty, [])\n         }\n         (method, _) => method\n     };\n@@ -2231,9 +2229,7 @@ fn try_overloaded_slice(fcx: &FnCtxt,\n                                         token::intern(method_name),\n                                         trait_did,\n                                         base_ty,\n-                                        [],\n-                                        DontAutoderefReceiver,\n-                                        IgnoreStaticMethods)\n+                                        [])\n             }\n             _ => None,\n         }\n@@ -2256,9 +2252,7 @@ fn try_overloaded_slice(fcx: &FnCtxt,\n                                         token::intern(method_name),\n                                         trait_did,\n                                         base_ty,\n-                                        [],\n-                                        DontAutoderefReceiver,\n-                                        IgnoreStaticMethods)\n+                                        [])\n             }\n             _ => None,\n         }\n@@ -2314,9 +2308,7 @@ fn try_overloaded_index(fcx: &FnCtxt,\n                                     token::intern(\"index_mut\"),\n                                     trait_did,\n                                     base_ty,\n-                                    [],\n-                                    DontAutoderefReceiver,\n-                                    IgnoreStaticMethods)\n+                                    [])\n         }\n         _ => None,\n     };\n@@ -2330,9 +2322,7 @@ fn try_overloaded_index(fcx: &FnCtxt,\n                                     token::intern(\"index\"),\n                                     trait_did,\n                                     base_ty,\n-                                    [],\n-                                    DontAutoderefReceiver,\n-                                    IgnoreStaticMethods)\n+                                    [])\n         }\n         (method, _) => method,\n     };\n@@ -2376,9 +2366,7 @@ fn lookup_method_for_for_loop(fcx: &FnCtxt,\n                                          token::intern(\"next\"),\n                                          trait_did,\n                                          expr_type,\n-                                         [],\n-                                         DontAutoderefReceiver,\n-                                         IgnoreStaticMethods);\n+                                         []);\n \n     // Regardless of whether the lookup succeeds, check the method arguments\n     // so that we have *some* type for each argument.\n@@ -3069,13 +3057,11 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                   trait_did: Option<ast::DefId>,\n                                   lhs: &'a ast::Expr,\n                                   rhs: Option<&P<ast::Expr>>,\n-                                  autoderef_receiver: AutoderefReceiverFlag,\n                                   unbound_method: ||) -> ty::t {\n         let method = match trait_did {\n             Some(trait_did) => {\n                 method::lookup_in_trait(fcx, op_ex.span, Some(lhs), opname,\n-                                        trait_did, lhs_ty, &[], autoderef_receiver,\n-                                        IgnoreStaticMethods)\n+                                        trait_did, lhs_ty, &[])\n             }\n             None => None\n         };\n@@ -3249,7 +3235,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             }\n         };\n         lookup_op_method(fcx, ex, lhs_resolved_t, token::intern(name),\n-                         trait_did, lhs_expr, Some(rhs), DontAutoderefReceiver, || {\n+                         trait_did, lhs_expr, Some(rhs), || {\n             fcx.type_error_message(ex.span, |actual| {\n                 format!(\"binary operation `{}` cannot be applied to type `{}`\",\n                         ast_util::binop_to_string(op),\n@@ -3266,7 +3252,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                        rhs_expr: &ast::Expr,\n                        rhs_t: ty::t) -> ty::t {\n        lookup_op_method(fcx, ex, rhs_t, token::intern(mname),\n-                        trait_did, rhs_expr, None, DontAutoderefReceiver, || {\n+                        trait_did, rhs_expr, None, || {\n             fcx.type_error_message(ex.span, |actual| {\n                 format!(\"cannot apply unary operator `{}` to type `{}`\",\n                         op_str, actual)"}]}