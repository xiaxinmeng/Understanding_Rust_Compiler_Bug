{"sha": "ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYjA1NGFlZTg5OGRkNzQyNjFmYThmNTBmZTBjNjU0MWU1Y2VhZjM=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-08-27T19:53:43Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-09-01T01:41:13Z"}, "message": "Fix `-Z instrument-coverage` on MSVC\n\nFound that -C link-dead-code (which was enabled automatically\nunder -Z instrument-coverage) was causing the linking error that\nresulted in segmentation faults in coverage instrumented binaries. Link\ndead code is now disabled under MSVC, allowing `-Z instrument-coverage`\nto be enabled under MSVC for the first time.\n\nMore details are included in Issue #76038.\n\n(This PR was broken out from PR #75828)", "tree": {"sha": "a5d8f94dec6ae400ecebc76c50eae8b992152642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d8f94dec6ae400ecebc76c50eae8b992152642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "html_url": "https://github.com/rust-lang/rust/commit/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "270c8250e19812f11702c427a6b1401e1bca44a4", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "patch": "@@ -1668,7 +1668,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // FIXME: Order dependent, applies to the following objects. Where should it be placed?\n     // Try to strip as much out of the generated object by removing unused\n     // sections if possible. See more comments in linker.rs\n-    if sess.opts.cg.link_dead_code != Some(true) {\n+    if !sess.link_dead_code() {\n         let keep_metadata = crate_type == CrateType::Dylib;\n         cmd.gc_sections(keep_metadata);\n     }"}, {"sha": "12bf988ab2dfeb6d16abbd0fc74a468603463457", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> MonoItem<'tcx> {\n             .debugging_opts\n             .inline_in_all_cgus\n             .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-            && tcx.sess.opts.cg.link_dead_code != Some(true);\n+            && !tcx.sess.link_dead_code();\n \n         match *self {\n             MonoItem::Fn(ref instance) => {"}, {"sha": "b7638204c09b49c7382692bec7c7c659f7978f68", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "patch": "@@ -190,7 +190,7 @@ pub fn partition<'tcx>(\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n-    if tcx.sess.opts.cg.link_dead_code != Some(true) {\n+    if !tcx.sess.link_dead_code() {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n         partitioner.internalize_symbols(tcx, &mut post_inlining, inlining_map);\n     }\n@@ -327,7 +327,7 @@ fn collect_and_partition_mono_items<'tcx>(\n             }\n         }\n         None => {\n-            if tcx.sess.opts.cg.link_dead_code == Some(true) {\n+            if tcx.sess.link_dead_code() {\n                 MonoItemCollectionMode::Eager\n             } else {\n                 MonoItemCollectionMode::Lazy"}, {"sha": "0a2a535598a2ff8c66da875f209c14cc9f5fba79", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "patch": "@@ -1718,20 +1718,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             );\n         }\n \n-        // `-Z instrument-coverage` implies:\n-        //   * `-Z symbol-mangling-version=v0` - to ensure consistent and reversible name mangling.\n-        //     Note, LLVM coverage tools can analyze coverage over multiple runs, including some\n-        //     changes to source code; so mangled names must be consistent across compilations.\n-        //   * `-C link-dead-code` - so unexecuted code is still counted as zero, rather than be\n-        //     optimized out. Note that instrumenting dead code can be explicitly disabled with:\n-        //         `-Z instrument-coverage -C link-dead-code=no`.\n+        // `-Z instrument-coverage` implies `-Z symbol-mangling-version=v0` - to ensure consistent\n+        // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n+        // multiple runs, including some changes to source code; so mangled names must be consistent\n+        // across compilations.\n         debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n-        if cg.link_dead_code == None {\n-            // FIXME(richkadel): Investigate if the `instrument-coverage` implementation can\n-            // inject [\"zero counters\"](https://llvm.org/docs/CoverageMappingFormat.html#counter)\n-            // in the coverage map when \"dead code\" is removed, rather than forcing `link-dead-code`.\n-            cg.link_dead_code = Some(true);\n-        }\n     }\n \n     if !cg.embed_bitcode {"}, {"sha": "988d3d39bd5d7d0a0488d425acc4ee75bcc5656e", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "patch": "@@ -885,9 +885,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"instrument the generated code to support LLVM source-based code coverage \\\n         reports (note, the compiler build config must include `profiler = true`, \\\n         and is mutually exclusive with `-C profile-generate`/`-C profile-use`); \\\n-        implies `-C link-dead-code` (unless explicitly disabled)` and \\\n-        `-Z symbol-mangling-version=v0`; and disables/overrides some optimization \\\n-        options (default: no)\"),\n+        implies `-C link-dead-code` (unless targeting MSVC, or explicitly disabled) \\\n+        and `-Z symbol-mangling-version=v0`; disables/overrides some Rust \\\n+        optimizations (default: no)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "e007c321d3d7705f11f0d3a1c1e153e44d26be41", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb054aee898dd74261fa8f50fe0c6541e5ceaf3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=ddb054aee898dd74261fa8f50fe0c6541e5ceaf3", "patch": "@@ -1021,6 +1021,40 @@ impl Session {\n         || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY)\n     }\n \n+    pub fn link_dead_code(&self) -> bool {\n+        match self.opts.cg.link_dead_code {\n+            Some(explicitly_set) => explicitly_set,\n+            None => {\n+                self.opts.debugging_opts.instrument_coverage\n+                    && !self.target.target.options.is_like_msvc\n+                // Issue #76038: (rustc `-Clink-dead-code` causes MSVC linker to produce invalid\n+                // binaries when LLVM InstrProf counters are enabled). As described by this issue,\n+                // the \"link dead code\" option produces incorrect binaries when compiled and linked\n+                // under MSVC. The resulting Rust programs typically crash with a segmentation\n+                // fault, or produce an empty \"*.profraw\" file (profiling counter results normally\n+                // generated during program exit).\n+                //\n+                // If not targeting MSVC, `-Z instrument-coverage` implies `-C link-dead-code`, so\n+                // unexecuted code is still counted as zero, rather than be optimized out. Note that\n+                // instrumenting dead code can be explicitly disabled with:\n+                //\n+                //     `-Z instrument-coverage -C link-dead-code=no`.\n+                //\n+                // FIXME(richkadel): Investigate if `instrument-coverage` implementation can inject\n+                // [zero counters](https://llvm.org/docs/CoverageMappingFormat.html#counter) in the\n+                // coverage map when \"dead code\" is removed, rather than forcing `link-dead-code`.\n+                // This may not be possible, however, if (as it seems to appear) the \"dead code\"\n+                // that would otherwise not be linked is only identified as \"dead\" by the native\n+                // linker. If that's the case, I believe it is too late for the Rust compiler to\n+                // leverage any information it might be able to get from the linker regarding what\n+                // code is dead, to be able to add those counters.\n+                //\n+                // On the other hand, if any Rust compiler passes are optimizing out dead code blocks\n+                // we should inject \"zero\" counters for those code regions.\n+            }\n+        }\n+    }\n+\n     pub fn mark_attr_known(&self, attr: &Attribute) {\n         self.known_attrs.lock().mark(attr)\n     }\n@@ -1428,20 +1462,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         );\n     }\n \n-    // FIXME(richkadel): See `src/test/run-make-fulldeps/instrument-coverage/Makefile`. After\n-    // compiling with `-Zinstrument-coverage`, the resulting binary generates a segfault during\n-    // the program's exit process (likely while attempting to generate the coverage stats in\n-    // the \"*.profraw\" file). An investigation to resolve the problem on Windows is ongoing,\n-    // but until this is resolved, the option is disabled on Windows, and the test is skipped\n-    // when targeting `MSVC`.\n-    if sess.opts.debugging_opts.instrument_coverage && sess.target.target.options.is_like_msvc {\n-        sess.warn(\n-            \"Rust source-based code coverage instrumentation (with `-Z instrument-coverage`) \\\n-            is not yet supported on Windows when targeting MSVC. The resulting binaries will \\\n-            still be instrumented for experimentation purposes, but may not execute correctly.\",\n-        );\n-    }\n-\n     const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n         \"aarch64-fuchsia\",\n         \"aarch64-unknown-linux-gnu\","}]}