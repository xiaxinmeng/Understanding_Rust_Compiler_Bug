{"sha": "d1caaa47c0a72534f8c417ff28e61b39137dd6b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxY2FhYTQ3YzBhNzI1MzRmOGM0MTdmZjI4ZTYxYjM5MTM3ZGQ2YjA=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-04T19:39:28Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-04T19:39:28Z"}, "message": "s/you/we; One more checklist item", "tree": {"sha": "b739dd3a0c588d2f7759ffe3170a85b45eb40ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b739dd3a0c588d2f7759ffe3170a85b45eb40ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1caaa47c0a72534f8c417ff28e61b39137dd6b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlx9fwIACgkQtvoGpuDi\nZluDABAAgX0wh31vifHqltLL/4KyTu6uzSRXwqTwmeI9+NCiFcUsC1EuQyGV2ISv\nIdmQRRa3SbDwSnhM5KtivosKoB7fcP1GrwsELztOaw2FicATSwuvKEE1t7Hth/NG\nPjo+Ewn7URdBXDtkWWLcBY2varNWiQfrBjgu2PuGuIOwNtQuXDitLS+L9DPj5eQ1\n9Id9phPbEyP1LuxkN0OmBPlrOu8xSBs6wGk69GvyVD1rR4pyec6sn2Wuzm5Jy7GV\nKnNeoku3vSgW5v2QxjlUZmhDHAGvYrHjDDWTm9x0akqodP6CFPuqjv/d/fxDqW2a\nHjpJN8gnehJ7qYXA9nntkdzoi9oB04sYJX2m1LE06vgg2SenCm7PeZJ/m+bnPlP9\nX89VDf0Y+NQKuSd2r3f3pnBJbXQCP70w82+C0TDSnTN0KsiH6+Mey4KRNSRpvQta\nPywFJRuK9/4j7kOHqnDbHYa4Ci2YJVcDHDBm9cVJ3BUEI05p1lD6N1uXpwRhNiYG\nzg5gB0pxguPPwq9u/1AcaEw4IWvBSQK9dRr2WBIfUOyYi0mRXoQsQF8MtC2XhsR0\nYNbFvEwlZCCeEFJvagQED0J9w50RW+sLGLahZrEOItPejXurAv0j8MU7Ua17JFnR\nYoj2DGJx6RA5REt3oxOnHIKVVVbGcVPUyi8EdDFYz2XcPP0xDds=\n=2m+Y\n-----END PGP SIGNATURE-----", "payload": "tree b739dd3a0c588d2f7759ffe3170a85b45eb40ab2\nparent 8d2cbb94d468bb0e354c9a211b5b1c174d76cdb2\nauthor Philipp Hansch <dev@phansch.net> 1551728368 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551728368 +0100\n\ns/you/we; One more checklist item\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1caaa47c0a72534f8c417ff28e61b39137dd6b0", "html_url": "https://github.com/rust-lang/rust/commit/d1caaa47c0a72534f8c417ff28e61b39137dd6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1caaa47c0a72534f8c417ff28e61b39137dd6b0/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2cbb94d468bb0e354c9a211b5b1c174d76cdb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2cbb94d468bb0e354c9a211b5b1c174d76cdb2", "html_url": "https://github.com/rust-lang/rust/commit/8d2cbb94d468bb0e354c9a211b5b1c174d76cdb2"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "ca285f37bf8d74bbd57b1d48d870a51eb0b0ab45", "filename": "doc/adding_lints.md", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d1caaa47c0a72534f8c417ff28e61b39137dd6b0/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1caaa47c0a72534f8c417ff28e61b39137dd6b0/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=d1caaa47c0a72534f8c417ff28e61b39137dd6b0", "patch": "@@ -38,11 +38,11 @@ we want to check. The output of Clippy is compared against a `.stderr` file.\n Note that you don't have to create this file yourself, we'll get to\n generating the `.stderr` files further down.\n \n-Let's create the test file at `tests/ui/foo_functions.rs`. It doesn't really\n-matter what the file is called, but it's a good convention to name it after the\n-lint it is testing, so `foo_functions.rs` it is.\n+We start by creating the test file at `tests/ui/foo_functions.rs`. It doesn't\n+really matter what the file is called, but it's a good convention to name it\n+after the lint it is testing, so `foo_functions.rs` it is.\n \n-Inside we put some examples to get started:\n+Inside the file we put some examples to get started:\n \n ```rust\n #![warn(clippy::foo_functions)]\n@@ -80,13 +80,13 @@ Now we can run the test with `TESTNAME=ui/foo_functions cargo uitest`.\n Currently this test will fail. If you go through the output you will see that we\n are told that `clippy::foo_functions` is an unknown lint, which is expected.\n \n-While you are working on implementing your lint, you can keep running the UI\n-test. That allows you to check if the output is turning into what you want.\n+While we are working on implementing our lint, we can keep running the UI\n+test. That allows us to check if the output is turning into what we want.\n \n-Once you are satisfied with the output, you need to run\n-`tests/ui/update-all-references.sh` to update the `.stderr` file for your lint.\n-Running `TESTNAME=ui/foo_functions cargo uitest` should pass then. When you\n-commit your lint, be sure to commit the `.stderr` files, too.\n+Once we are satisfied with the output, we need to run\n+`tests/ui/update-all-references.sh` to update the `.stderr` file for our lint.\n+Running `TESTNAME=ui/foo_functions cargo uitest` should pass then. When we\n+commit our lint, we need to commit the generated `.stderr` files, too.\n \n ### Rustfix tests\n \n@@ -139,8 +139,8 @@ state the thing that is being checked for and read well when used with\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-With our lint declaration done, we will now make sure that our lint declaration\n-is assigned to a lint pass:\n+With our lint declaration done, we will now make sure that it is assigned to a\n+lint pass:\n \n ```rust\n // clippy_lints/src/foo_functions.rs\n@@ -166,10 +166,10 @@ impl LintPass for FooFunctionsPass {\n Don't worry about the `name` method here. As long as it includes the name of the\n lint pass it should be fine.\n \n-Next you should run `util/dev update_lints` to register the lint in various\n+Next we need to run `util/dev update_lints` to register the lint in various\n places, mainly in `clippy_lints/src/lib.rs`.\n \n-While `update_lints` automates some things, it doesn't automate everything. You\n+While `update_lints` automates some things, it doesn't automate everything. We\n will have to register our lint pass manually in the `register_plugins` function\n in `clippy_lints/src/lib.rs`:\n \n@@ -251,7 +251,7 @@ Running our UI test should now produce output that contains the lint message.\n \n ### Adding the lint logic\n \n-Writing the logic for our lint will most likely be different from this example,\n+Writing the logic for your lint will most likely be different from our example,\n so this section is kept rather short.\n \n Using the [`check_fn`][check_fn] method gives us access to [`FnKind`][fn_kind]\n@@ -295,7 +295,7 @@ fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n }\n ```\n \n-Now you'll want to also run the full test suite with `cargo test`. At this point\n+Now we should also run the full test suite with `cargo test`. At this point\n running `cargo test` should produce the expected output. Remember to run\n `tests/ui/update-all-references.sh` to update the `.stderr` file.\n \n@@ -386,6 +386,7 @@ Before submitting your PR make sure you followed all of the basic requirements:\n - [ ] Followed [lint naming conventions][lint_naming]\n - [ ] Added passing UI tests (including committed `.stderr` file)\n - [ ] `cargo test` passes locally\n+- [ ] Executed `util/dev update_lints`\n - [ ] Added lint documentation\n \n ### Cheatsheet"}]}