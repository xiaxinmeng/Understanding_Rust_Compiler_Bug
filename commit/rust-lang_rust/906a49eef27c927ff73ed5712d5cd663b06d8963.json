{"sha": "906a49eef27c927ff73ed5712d5cd663b06d8963", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNmE0OWVlZjI3YzkyN2ZmNzNlZDU3MTJkNWNkNjYzYjA2ZDg5NjM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-03T10:09:52Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Document unsafe rules with comments and `bug!` calls", "tree": {"sha": "86345bd45966aeda7f4710b941da4b5803bf138b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86345bd45966aeda7f4710b941da4b5803bf138b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/906a49eef27c927ff73ed5712d5cd663b06d8963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/906a49eef27c927ff73ed5712d5cd663b06d8963", "html_url": "https://github.com/rust-lang/rust/commit/906a49eef27c927ff73ed5712d5cd663b06d8963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/906a49eef27c927ff73ed5712d5cd663b06d8963/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e", "html_url": "https://github.com/rust-lang/rust/commit/f2ae7b78d63695c1b9ff7bdf4079c7a02e77f73e"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "0547e4476cbe448369e2c89aab8c0e8088362cbe", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/906a49eef27c927ff73ed5712d5cd663b06d8963/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906a49eef27c927ff73ed5712d5cd663b06d8963/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=906a49eef27c927ff73ed5712d5cd663b06d8963", "patch": "@@ -284,10 +284,10 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                            unsafe_blocks: &[(ast::NodeId, bool)]) {\n         let safety = self.source_scope_local_data[self.source_info.scope].safety;\n         let within_unsafe = match (safety, self.min_const_fn) {\n-            // FIXME: erring on the safe side here and disallowing builtin unsafety in const fn\n+            // Erring on the safe side, pun intended\n             (Safety::BuiltinUnsafe, true) |\n-            // `unsafe` blocks are required even in `const unsafe fn`\n-            (Safety::FnUnsafe, true) |\n+            // mir building encodes const fn bodies as safe, even for `const unsafe fn`\n+            (Safety::FnUnsafe, true) => bug!(\"const unsafe fn body treated as inherently unsafe\"),\n             // `unsafe` blocks are required in safe code\n             (Safety::Safe, _) => {\n                 for violation in violations {\n@@ -305,8 +305,10 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 false\n             }\n+            // regular `unsafe` function bodies allow unsafe without additional unsafe blocks\n             (Safety::BuiltinUnsafe, false) | (Safety::FnUnsafe, false) => true,\n             (Safety::ExplicitUnsafe(node_id), _) => {\n+                // mark unsafe block as used if there are any unsafe operations inside\n                 if !violations.is_empty() {\n                     self.used_unsafe.insert(node_id);\n                 }\n@@ -316,6 +318,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                         match violation.kind {\n                             // these are allowed\n                             UnsafetyViolationKind::MinConstFn\n+                                // if `#![feature(min_const_unsafe_fn)]` is active\n                                 if self.tcx.sess.features_untracked().min_const_unsafe_fn => {},\n                             _ => {\n                                 let mut violation = violation.clone();"}]}