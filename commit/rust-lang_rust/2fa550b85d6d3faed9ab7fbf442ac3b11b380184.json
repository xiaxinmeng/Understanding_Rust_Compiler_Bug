{"sha": "2fa550b85d6d3faed9ab7fbf442ac3b11b380184", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTU1MGI4NWQ2ZDNmYWVkOWFiN2ZiZjQ0MmFjM2IxMWIzODAxODQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-19T02:15:23Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-03-21T11:02:12Z"}, "message": "Fix ICE caused by truncating a negative ZST enum discriminant", "tree": {"sha": "35430bfe86aeb47e3c88428abbee565c3f75e459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35430bfe86aeb47e3c88428abbee565c3f75e459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa550b85d6d3faed9ab7fbf442ac3b11b380184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa550b85d6d3faed9ab7fbf442ac3b11b380184", "html_url": "https://github.com/rust-lang/rust/commit/2fa550b85d6d3faed9ab7fbf442ac3b11b380184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa550b85d6d3faed9ab7fbf442ac3b11b380184/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f509b26a7730d721ef87423a72b3fdf8724b4afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f509b26a7730d721ef87423a72b3fdf8724b4afa", "html_url": "https://github.com/rust-lang/rust/commit/f509b26a7730d721ef87423a72b3fdf8724b4afa"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "245df0846b583cc8c77ad0140d6b09250a8bbcfb", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fa550b85d6d3faed9ab7fbf442ac3b11b380184/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa550b85d6d3faed9ab7fbf442ac3b11b380184/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=2fa550b85d6d3faed9ab7fbf442ac3b11b380184", "patch": "@@ -293,7 +293,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 if let Some(discr) =\n                                     operand.layout.ty.discriminant_for_variant(bx.tcx(), index)\n                                 {\n-                                    let discr_val = bx.cx().const_uint_big(ll_t_out, discr.val);\n+                                    let discr_layout = bx.cx().layout_of(discr.ty);\n+                                    let discr_t = bx.cx().immediate_backend_type(discr_layout);\n+                                    let discr_val = bx.cx().const_uint_big(discr_t, discr.val);\n+                                    let discr_val =\n+                                        bx.intcast(discr_val, ll_t_out, discr.ty.is_signed());\n+\n                                     return (\n                                         bx,\n                                         OperandRef {"}, {"sha": "df63127f368b83c3a11c35e364ba900eb492388d", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa550b85d6d3faed9ab7fbf442ac3b11b380184/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa550b85d6d3faed9ab7fbf442ac3b11b380184/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=2fa550b85d6d3faed9ab7fbf442ac3b11b380184", "patch": "@@ -3,6 +3,7 @@ use rustc::ty::layout::{self, Size, TyLayout};\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_ast::ast::FloatTy;\n use rustc_span::symbol::sym;\n+use rustc_target::abi::LayoutOf;\n \n use rustc::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc::mir::CastKind;\n@@ -134,7 +135,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             layout::Variants::Single { index } => {\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n-                    return Ok(Scalar::from_uint(discr.val, dest_layout.size).into());\n+                    let discr_layout = self.layout_of(discr.ty)?;\n+                    return Ok(self.cast_from_int(discr.val, discr_layout, dest_layout)?.into());\n                 }\n             }\n             layout::Variants::Multiple { .. } => {}"}, {"sha": "a77258120111e70d668e6e87694f83a1a0dbfe88", "filename": "src/test/ui/consts/cast-discriminant-zst-enum.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2fa550b85d6d3faed9ab7fbf442ac3b11b380184/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa550b85d6d3faed9ab7fbf442ac3b11b380184/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs?ref=2fa550b85d6d3faed9ab7fbf442ac3b11b380184", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+// Test a ZST enum whose dicriminant is ~0i128. This caused an ICE when casting to a i32.\n+\n+#[derive(Copy, Clone)]\n+enum Nums {\n+    NegOne = -1,\n+}\n+\n+const NEG_ONE_I8: i8 = Nums::NegOne as i8;\n+const NEG_ONE_I16: i16 = Nums::NegOne as i16;\n+const NEG_ONE_I32: i32 = Nums::NegOne as i32;\n+const NEG_ONE_I64: i64 = Nums::NegOne as i64;\n+const NEG_ONE_I128: i128 = Nums::NegOne as i128;\n+\n+#[inline(never)]\n+fn identity<T>(t: T) -> T { t }\n+\n+fn test_as_arg(n: Nums) {\n+    assert_eq!(-1i8, n as i8);\n+    assert_eq!(-1i16, n as i16);\n+    assert_eq!(-1i32, n as i32);\n+    assert_eq!(-1i64, n as i64);\n+    assert_eq!(-1i128, n as i128);\n+}\n+\n+fn main() {\n+    let kind = Nums::NegOne;\n+    assert_eq!(-1i8, kind as i8);\n+    assert_eq!(-1i16, kind as i16);\n+    assert_eq!(-1i32, kind as i32);\n+    assert_eq!(-1i64, kind as i64);\n+    assert_eq!(-1i128, kind as i128);\n+\n+    assert_eq!(-1i8, identity(kind) as i8);\n+    assert_eq!(-1i16, identity(kind) as i16);\n+    assert_eq!(-1i32, identity(kind) as i32);\n+    assert_eq!(-1i64, identity(kind) as i64);\n+    assert_eq!(-1i128, identity(kind) as i128);\n+\n+    test_as_arg(Nums::NegOne);\n+\n+    assert_eq!(-1i8, NEG_ONE_I8);\n+    assert_eq!(-1i16, NEG_ONE_I16);\n+    assert_eq!(-1i32, NEG_ONE_I32);\n+    assert_eq!(-1i64, NEG_ONE_I64);\n+    assert_eq!(-1i128, NEG_ONE_I128);\n+}"}]}