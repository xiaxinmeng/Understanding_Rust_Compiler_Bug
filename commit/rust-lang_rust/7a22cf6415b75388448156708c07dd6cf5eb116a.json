{"sha": "7a22cf6415b75388448156708c07dd6cf5eb116a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjJjZjY0MTViNzUzODg0NDgxNTY3MDhjMDdkZDZjZjVlYjExNmE=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-04-13T14:25:15Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-04-13T14:25:15Z"}, "message": "Add examples to Pattern docs", "tree": {"sha": "e7099637e862176f389dbcc7d5569a4d1e135c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7099637e862176f389dbcc7d5569a4d1e135c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a22cf6415b75388448156708c07dd6cf5eb116a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a22cf6415b75388448156708c07dd6cf5eb116a", "html_url": "https://github.com/rust-lang/rust/commit/7a22cf6415b75388448156708c07dd6cf5eb116a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a22cf6415b75388448156708c07dd6cf5eb116a/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe96b04ad9a7109febac47e660d993b45542c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe96b04ad9a7109febac47e660d993b45542c1f", "html_url": "https://github.com/rust-lang/rust/commit/cbe96b04ad9a7109febac47e660d993b45542c1f"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "86e09b7be2d2d6233ddee6ee2efe759b08cae1b4", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a22cf6415b75388448156708c07dd6cf5eb116a/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a22cf6415b75388448156708c07dd6cf5eb116a/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=7a22cf6415b75388448156708c07dd6cf5eb116a", "patch": "@@ -1828,6 +1828,12 @@ impl<'a> Extend<Cow<'a, str>> for String {\n }\n \n /// A convenience impl that delegates to the impl for `&str`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(String::from(\"Hello world\").find(\"world\"), Some(6));\n+/// ```\n #[unstable(\n     feature = \"pattern\",\n     reason = \"API not fully fleshed out and ready to be stabilized\","}, {"sha": "708e4e5560ecd34106736aec2d166bb3fdd57b7b", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a22cf6415b75388448156708c07dd6cf5eb116a/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a22cf6415b75388448156708c07dd6cf5eb116a/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=7a22cf6415b75388448156708c07dd6cf5eb116a", "patch": "@@ -452,6 +452,12 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n /// Searches for chars that are equal to a given `char`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find('o'), Some(4));\n+/// ```\n impl<'a> Pattern<'a> for char {\n     type Searcher = CharSearcher<'a>;\n \n@@ -697,6 +703,13 @@ unsafe impl<'a, 'b> ReverseSearcher<'a> for CharSliceSearcher<'a, 'b> {\n impl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n \n /// Searches for chars that are equal to any of the chars in the array.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(&['l', 'l'] as &[_]), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['l', 'l'][..]), Some(2));\n+/// ```\n impl<'a, 'b> Pattern<'a> for &'b [char] {\n     pattern_methods!(CharSliceSearcher<'a, 'b>, MultiCharEqPattern, CharSliceSearcher);\n }\n@@ -739,6 +752,13 @@ where\n impl<'a, F> DoubleEndedSearcher<'a> for CharPredicateSearcher<'a, F> where F: FnMut(char) -> bool {}\n \n /// Searches for chars that match the given predicate.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(char::is_uppercase), Some(0));\n+/// assert_eq!(\"Hello world\".find(|c| \"aeiou\".contains(c)), Some(1));\n+/// ```\n impl<'a, F> Pattern<'a> for F\n where\n     F: FnMut(char) -> bool,\n@@ -763,6 +783,12 @@ impl<'a, 'b, 'c> Pattern<'a> for &'c &'b str {\n ///\n /// Will handle the pattern `\"\"` as returning empty matches at each character\n /// boundary.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(\"world\"), Some(6));\n+/// ```\n impl<'a, 'b> Pattern<'a> for &'b str {\n     type Searcher = StrSearcher<'a, 'b>;\n "}]}