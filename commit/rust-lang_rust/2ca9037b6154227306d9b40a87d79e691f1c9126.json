{"sha": "2ca9037b6154227306d9b40a87d79e691f1c9126", "node_id": "C_kwDOAAsO6NoAKDJjYTkwMzdiNjE1NDIyNzMwNmQ5YjQwYTg3ZDc5ZTY5MWYxYzkxMjY", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-06T21:28:58Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-02T16:46:07Z"}, "message": "Set `LintExpectationId` in level and collect fulfilled ones (RFC-2383)\n\n* Collect lint expectations and set expectation ID in level (RFC-2383)\n* Collect IDs of fulfilled lint expectations from diagnostics (RFC 2383)", "tree": {"sha": "eb09c4b3292e8d8195719aab9c80d4e9b84da6d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb09c4b3292e8d8195719aab9c80d4e9b84da6d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca9037b6154227306d9b40a87d79e691f1c9126", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmIfn08ACgkQ/Ny/Ka9k\n1gHHGw//Zc7eAl1fyR0qEvREoTr8zEoF1n8ijaJc4+bbWeLg8bLm1xfXg5Kdgb38\nMqQAtSMRUiCNvolk0pZuUoL49Co7w/grz1X38WJJg7OdLuAHFvPEac8hjjYQojht\nl8Jh5bSXGhWOFZlG8Q08ehSxUqlTAsDfQRQTFLS2f9kakEq6UoCH9orO8IzTSpWd\n6tYF1nX9EVZz5jKw/9vBFkU+Q4zMDXLz0ZNtaKcf5Og006W0FxT/1PD8mBowCXVr\nL/B3ZRWxwFySjEDZTU8h2DFeqCsNq1kNV+bOrjYlj3BFgNRe1HFkAMjGasbjnd7L\nOjiH20s9v5GHewOwWR8NUtY8udyJQNkuQfphDbEXm0mPMZNoCfnI5iP1mxbjUlMb\n6ZGzSlMKMX5YNcJUim0D41vyUN2ClkvjPwucqoFXq2dDQDRgxP6314T1Pwc7APqx\nzLsP86HK52HIQkaZtOzp5PTSZnIUb/RY28MDnlQuS9O4hXwKkjlEWkkX5L0n7ANd\n0As5vHW8oygydAQiZJzKK/Psnb4KTTrng6yuK73yswMD4Vhrw6RLjRETvITOJMnJ\naBMW/H2lNZMV2knodDZPyt6GrzIfTsxH1ihinislETgoWL1QzkGVtpph2xj1GXa1\no0oWNjSxk5kVRMnp36RUl0SQJBbMkABMDmFPXhZ4KdXQJnfLPiw=\n=E6SY\n-----END PGP SIGNATURE-----", "payload": "tree eb09c4b3292e8d8195719aab9c80d4e9b84da6d2\nparent f467a58b7bdc330a5af3962df40ad11fe2f05165\nauthor xFrednet <xFrednet@gmail.com> 1628285338 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1646239567 +0100\n\nSet `LintExpectationId` in level and collect fulfilled ones (RFC-2383)\n\n* Collect lint expectations and set expectation ID in level (RFC-2383)\n* Collect IDs of fulfilled lint expectations from diagnostics (RFC 2383)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca9037b6154227306d9b40a87d79e691f1c9126", "html_url": "https://github.com/rust-lang/rust/commit/2ca9037b6154227306d9b40a87d79e691f1c9126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca9037b6154227306d9b40a87d79e691f1c9126/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f467a58b7bdc330a5af3962df40ad11fe2f05165", "url": "https://api.github.com/repos/rust-lang/rust/commits/f467a58b7bdc330a5af3962df40ad11fe2f05165", "html_url": "https://github.com/rust-lang/rust/commit/f467a58b7bdc330a5af3962df40ad11fe2f05165"}], "stats": {"total": 121, "additions": 102, "deletions": 19}, "files": [{"sha": "a59d91ea789001db3feabf73598a1cd4a234770f", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=2ca9037b6154227306d9b40a87d79e691f1c9126", "patch": "@@ -133,11 +133,7 @@ impl Diagnostic {\n             | Level::Error { .. }\n             | Level::FailureNote => true,\n \n-            Level::Warning\n-            | Level::Note\n-            | Level::Help\n-            | Level::Allow\n-            | Level::Expect(_) => false,\n+            Level::Warning | Level::Note | Level::Help | Level::Allow | Level::Expect(_) => false,\n         }\n     }\n "}, {"sha": "83e52e002ae2ab2791a289d59505be115a24c570", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=2ca9037b6154227306d9b40a87d79e691f1c9126", "patch": "@@ -451,6 +451,15 @@ struct HandlerInner {\n     deduplicated_warn_count: usize,\n \n     future_breakage_diagnostics: Vec<Diagnostic>,\n+\n+    /// Lint [`Diagnostic`]s can be expected as described in [RFC-2383]. An\n+    /// expected diagnostic will have the level `Expect` which additionally\n+    /// carries the [`LintExpectationId`] of the expectation that can be\n+    /// marked as fulfilled. This is a collection of all [`LintExpectationId`]s\n+    /// that have been marked as fulfilled this way.\n+    ///\n+    /// [RFC-2383]: https://rust-lang.github.io/rfcs/2383-lint-reasons.html\n+    fulfilled_expectations: FxHashSet<LintExpectationId>,\n }\n \n /// A key denoting where from a diagnostic was stashed.\n@@ -571,6 +580,7 @@ impl Handler {\n                 emitted_diagnostics: Default::default(),\n                 stashed_diagnostics: Default::default(),\n                 future_breakage_diagnostics: Vec::new(),\n+                fulfilled_expectations: Default::default(),\n             }),\n         }\n     }\n@@ -912,6 +922,12 @@ impl Handler {\n     pub fn emit_unused_externs(&self, lint_level: &str, unused_externs: &[&str]) {\n         self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n     }\n+\n+    /// This methods steals all [`LintExpectationId`]s that are stored inside\n+    /// [`HandlerInner`] and indicate that the linked expectation has been fulfilled.\n+    pub fn steal_fulfilled_expectation_ids(&self) -> FxHashSet<LintExpectationId> {\n+        std::mem::take(&mut self.inner.borrow_mut().fulfilled_expectations)\n+    }\n }\n \n impl HandlerInner {\n@@ -959,7 +975,8 @@ impl HandlerInner {\n \n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n-        if let Level::Expect(_) = diagnostic.level {\n+        if let Level::Expect(expectation_id) = diagnostic.level {\n+            self.fulfilled_expectations.insert(expectation_id);\n             return;\n         } else if diagnostic.level == Allow {\n             return;"}, {"sha": "a876e35c0a8d78202b7718b8270af4579cf76463", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=2ca9037b6154227306d9b40a87d79e691f1c9126", "patch": "@@ -7,17 +7,15 @@ use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::lint::LevelAndSource;\n-use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n-    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet, LintStackIndex,\n-    COMMAND_LINE,\n+    struct_lint_level, LevelAndSource, LintDiagnosticBuilder, LintExpectation, LintLevelMap,\n+    LintLevelSets, LintLevelSource, LintSet, LintStackIndex, COMMAND_LINE,\n };\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    Level, Lint, LintId,\n+    Level, Lint, LintExpectationId, LintId,\n };\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -44,6 +42,7 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n \n pub struct LintLevelsBuilder<'s> {\n     sess: &'s Session,\n+    lint_expectations: FxHashMap<LintExpectationId, LintExpectation>,\n     sets: LintLevelSets,\n     id_to_set: FxHashMap<HirId, LintStackIndex>,\n     cur: LintStackIndex,\n@@ -66,6 +65,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     ) -> Self {\n         let mut builder = LintLevelsBuilder {\n             sess,\n+            lint_expectations: Default::default(),\n             sets: LintLevelSets::new(),\n             cur: COMMAND_LINE,\n             id_to_set: Default::default(),\n@@ -231,7 +231,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for attr in attrs {\n-            let Some(level) = Level::from_symbol(attr.name_or_empty()) else {\n+            let Some(level) = Level::from_symbol(attr.name_or_empty(), attr.id.as_u32()) else {\n                 continue\n             };\n \n@@ -476,6 +476,26 @@ impl<'s> LintLevelsBuilder<'s> {\n                     }\n                 }\n             }\n+\n+            if !specs.is_empty() {\n+                // Only lints that are currently registered in the lint store\n+                // have been found and added to `specs`. Creating the expectation\n+                // here ensures that it can be fulfilled during this compilation\n+                // session.\n+                if let Level::Expect(expect_id) = level {\n+                    let has_lints = specs\n+                        .values()\n+                        .any(|(lvl, _src)| matches!(lvl, Level::Expect(check_id) if check_id.eq(&expect_id)));\n+\n+                    if has_lints {\n+                        let lint = builtin::UNFULFILLED_LINT_EXPECTATIONS;\n+                        let (lvl, src) =\n+                            self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                        let expectation = LintExpectation::new(reason, attr.span, lvl, src);\n+                        self.lint_expectations.insert(expect_id, expectation);\n+                    }\n+                }\n+            }\n         }\n \n         if !is_crate_node {\n@@ -563,7 +583,11 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n \n     pub fn build_map(self) -> LintLevelMap {\n-        LintLevelMap { sets: self.sets, id_to_set: self.id_to_set }\n+        LintLevelMap {\n+            sets: self.sets,\n+            id_to_set: self.id_to_set,\n+            lint_expectations: self.lint_expectations,\n+        }\n     }\n }\n "}, {"sha": "6fca39b2c6bb52e6e7eeaa56ad7200d5b94c998d", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=2ca9037b6154227306d9b40a87d79e691f1c9126", "patch": "@@ -133,10 +133,10 @@ impl Level {\n     }\n \n     /// Converts a symbol to a level.\n-    pub fn from_symbol(x: Symbol) -> Option<Level> {\n+    pub fn from_symbol(x: Symbol, possible_lint_expect_id: u32) -> Option<Level> {\n         match x {\n             sym::allow => Some(Level::Allow),\n-            sym::expect => Some(Level::Expect(LintExpectationId::from(0u32))),\n+            sym::expect => Some(Level::Expect(LintExpectationId::from(possible_lint_expect_id))),\n             sym::warn => Some(Level::Warn),\n             sym::deny => Some(Level::Deny),\n             sym::forbid => Some(Level::Forbid),"}, {"sha": "9eb7aca13c0ef1625f029f2d71d67adf99190f69", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=2ca9037b6154227306d9b40a87d79e691f1c9126", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n+use rustc_session::lint::LintExpectationId;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     FutureIncompatibilityReason, Level, Lint, LintId,\n@@ -153,6 +154,13 @@ impl LintLevelSets {\n \n #[derive(Debug)]\n pub struct LintLevelMap {\n+    /// This is a collection of lint expectations as described in RFC 2383, that\n+    /// can be fulfilled during this compilation session. This means that at least\n+    /// one expected lint is currently registered in the lint store.\n+    ///\n+    /// The [`LintExpectationId`] is stored as a part of the [`Expect`](Level::Expect)\n+    /// lint level.\n+    pub lint_expectations: FxHashMap<LintExpectationId, LintExpectation>,\n     pub sets: LintLevelSets,\n     pub id_to_set: FxHashMap<HirId, LintStackIndex>,\n }\n@@ -178,14 +186,42 @@ impl LintLevelMap {\n impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let LintLevelMap { ref sets, ref id_to_set } = *self;\n+        let LintLevelMap { ref sets, ref id_to_set, ref lint_expectations } = *self;\n \n         id_to_set.hash_stable(hcx, hasher);\n+        lint_expectations.hash_stable(hcx, hasher);\n \n         hcx.while_hashing_spans(true, |hcx| sets.hash_stable(hcx, hasher))\n     }\n }\n \n+/// This struct represents a lint expectation and holds all required information\n+/// to emit the `unfulfilled_lint_expectations` lint if it is unfulfilled after\n+/// the `LateLintPass` has completed.\n+#[derive(Clone, Debug, HashStable)]\n+pub struct LintExpectation {\n+    /// The reason for this expectation that can optionally be added as part of\n+    /// the attribute. It will be displayed as part of the lint message.\n+    pub reason: Option<Symbol>,\n+    /// The [`Span`] of the attribute that this expectation originated from.\n+    pub emission_span: Span,\n+    /// The [`Level`] that this lint diagnostic should be emitted if unfulfilled.\n+    pub emission_level: Level,\n+    /// The [`LintLevelSource`] information needed for [`struct_lint_level`].\n+    pub emission_level_source: LintLevelSource,\n+}\n+\n+impl LintExpectation {\n+    pub fn new(\n+        reason: Option<Symbol>,\n+        attr_span: Span,\n+        emission_level: Level,\n+        emission_level_source: LintLevelSource,\n+    ) -> Self {\n+        Self { reason, emission_span: attr_span, emission_level, emission_level_source }\n+    }\n+}\n+\n pub struct LintDiagnosticBuilder<'a>(DiagnosticBuilder<'a, ()>);\n \n impl<'a> LintDiagnosticBuilder<'a> {\n@@ -225,7 +261,9 @@ pub fn explain_lint_level_source(\n                 Level::Forbid => \"-F\",\n                 Level::Allow => \"-A\",\n                 Level::ForceWarn => \"--force-warn\",\n-                Level::Expect(_) => unreachable!(\"the expect level does not have a commandline flag\"),\n+                Level::Expect(_) => {\n+                    unreachable!(\"the expect level does not have a commandline flag\")\n+                }\n             };\n             let hyphen_case_lint_name = name.replace('_', \"-\");\n             if lint_flag_val.as_str() == name {"}, {"sha": "bd48a9867f9eb8a43d8692c1bcf9d06b4154fc76", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2ca9037b6154227306d9b40a87d79e691f1c9126", "patch": "@@ -2755,7 +2755,11 @@ impl<'tcx> TyCtxt<'tcx> {\n                 return bound;\n             }\n \n-            if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {\n+            if hir\n+                .attrs(id)\n+                .iter()\n+                .any(|attr| Level::from_symbol(attr.name_or_empty(), attr.id.as_u32()).is_some())\n+            {\n                 return id;\n             }\n             let next = hir.get_parent_node(id);"}, {"sha": "4a7e7e267a2e57fe07cd5308193fcee8e75c24fd", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca9037b6154227306d9b40a87d79e691f1c9126/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=2ca9037b6154227306d9b40a87d79e691f1c9126", "patch": "@@ -331,7 +331,11 @@ impl Session {\n     pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n-    pub fn struct_expect(&self, msg: &str, id: lint::LintExpectationId) -> DiagnosticBuilder<'_, ()> {\n+    pub fn struct_expect(\n+        &self,\n+        msg: &str,\n+        id: lint::LintExpectationId,\n+    ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     pub fn struct_span_err<S: Into<MultiSpan>>("}]}