{"sha": "d1682b347333996d078de9e93281814cddf98751", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjgyYjM0NzMzMzk5NmQwNzhkZTllOTMyODE4MTRjZGRmOTg3NTE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-14T21:19:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-14T21:19:18Z"}, "message": "Merge pull request #1510 from fintelia/better-filelines\n\nBetter file_lines", "tree": {"sha": "97edbc52dd17988bb9a60aaf8b47c2c5e3176ed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97edbc52dd17988bb9a60aaf8b47c2c5e3176ed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1682b347333996d078de9e93281814cddf98751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1682b347333996d078de9e93281814cddf98751", "html_url": "https://github.com/rust-lang/rust/commit/d1682b347333996d078de9e93281814cddf98751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1682b347333996d078de9e93281814cddf98751/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb26db68b0456c424556c02dda1fa528f2ef4a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb26db68b0456c424556c02dda1fa528f2ef4a4", "html_url": "https://github.com/rust-lang/rust/commit/ebb26db68b0456c424556c02dda1fa528f2ef4a4"}, {"sha": "4d2f6a29a7ef56140d50638d47e307bb1abcd58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2f6a29a7ef56140d50638d47e307bb1abcd58c", "html_url": "https://github.com/rust-lang/rust/commit/4d2f6a29a7ef56140d50638d47e307bb1abcd58c"}], "stats": {"total": 183, "additions": 144, "deletions": 39}, "files": [{"sha": "a31fe72511ce1271ae4715614134f8d5e37d5a52", "filename": "src/file_lines.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -115,34 +115,41 @@ impl FileLines {\n         Files(self.0.as_ref().map(MultiMap::keys))\n     }\n \n-    /// Returns true if `range` is fully contained in `self`.\n-    pub fn contains(&self, range: &LineRange) -> bool {\n+    /// Returns true if `self` includes all lines in all files. Otherwise runs `f` on all ranges in\n+    /// the designated file (if any) and returns true if `f` ever does.\n+    fn file_range_matches<F>(&self, file_name: &str, f: F) -> bool\n+        where F: FnMut(&Range) -> bool\n+    {\n         let map = match self.0 {\n             // `None` means \"all lines in all files\".\n             None => return true,\n             Some(ref map) => map,\n         };\n \n-        match canonicalize_path_string(range.file_name())\n-                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n-            Ok(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n+        match canonicalize_path_string(file_name).and_then(|file| map.get_vec(&file).ok_or(())) {\n+            Ok(ranges) => ranges.iter().any(f),\n             Err(_) => false,\n         }\n     }\n \n+    /// Returns true if `range` is fully contained in `self`.\n+    pub fn contains(&self, range: &LineRange) -> bool {\n+        self.file_range_matches(range.file_name(), |r| r.contains(Range::from(range)))\n+    }\n+\n     /// Returns true if any lines in `range` are in `self`.\n     pub fn intersects(&self, range: &LineRange) -> bool {\n-        let map = match self.0 {\n-            // `None` means \"all lines in all files\".\n-            None => return true,\n-            Some(ref map) => map,\n-        };\n+        self.file_range_matches(range.file_name(), |r| r.intersects(Range::from(range)))\n+    }\n \n-        match canonicalize_path_string(range.file_name())\n-                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n-            Ok(ranges) => ranges.iter().any(|r| r.intersects(Range::from(range))),\n-            Err(_) => false,\n-        }\n+    /// Returns true if `line` from `file_name` is in `self`.\n+    pub fn contains_line(&self, file_name: &str, line: usize) -> bool {\n+        self.file_range_matches(file_name, |r| r.lo <= line && r.hi >= line)\n+    }\n+\n+    /// Returns true if any of the lines between `lo` and `hi` from `file_name` are in `self`.\n+    pub fn intersects_range(&self, file_name: &str, lo: usize, hi: usize) -> bool {\n+        self.file_range_matches(file_name, |r| r.intersects(Range::new(lo, hi)))\n     }\n }\n "}, {"sha": "99054b23712ce7340b4bf7eb298a7b9e685a61fb", "filename": "src/lib.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -480,27 +480,35 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n             continue;\n         }\n \n-        // Add warnings for bad todos/ fixmes\n-        if let Some(issue) = issue_seeker.inspect(c) {\n-            errors.push(FormattingError {\n-                            line: cur_line,\n-                            kind: ErrorKind::BadIssue(issue),\n-                        });\n-        }\n+        let format_line = config.file_lines.contains_line(name, cur_line as usize);\n \n-        if c == '\\n' {\n-            // Check for (and record) trailing whitespace.\n-            if let Some(lw) = last_wspace {\n-                trims.push((cur_line, lw, b));\n-                line_len -= 1;\n-            }\n-            // Check for any line width errors we couldn't correct.\n-            if config.error_on_line_overflow && line_len > config.max_width {\n+        if format_line {\n+            // Add warnings for bad todos/ fixmes\n+            if let Some(issue) = issue_seeker.inspect(c) {\n                 errors.push(FormattingError {\n                                 line: cur_line,\n-                                kind: ErrorKind::LineOverflow(line_len, config.max_width),\n+                                kind: ErrorKind::BadIssue(issue),\n                             });\n             }\n+        }\n+\n+        if c == '\\n' {\n+            if format_line {\n+                // Check for (and record) trailing whitespace.\n+                if let Some(lw) = last_wspace {\n+                    trims.push((cur_line, lw, b));\n+                    line_len -= 1;\n+                }\n+\n+                // Check for any line width errors we couldn't correct.\n+                if config.error_on_line_overflow && line_len > config.max_width {\n+                    errors.push(FormattingError {\n+                                    line: cur_line,\n+                                    kind: ErrorKind::LineOverflow(line_len, config.max_width),\n+                                });\n+                }\n+            }\n+\n             line_len = 0;\n             cur_line += 1;\n             newline_count += 1;"}, {"sha": "aef158199bab02919a35faa35dbf169aab6ab9f1", "filename": "src/missed_spans.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -83,17 +83,18 @@ impl<'a> FmtVisitor<'a> {\n         let big_snippet = &local_begin.fm.src.as_ref().unwrap()[start_index..end_index];\n \n         let big_diff = (span.lo - big_span_lo).to_usize();\n-        let snippet = self.snippet(span);\n+        let snippet = self.snippet(span.clone());\n \n         debug!(\"write_snippet `{}`\", snippet);\n \n-        self.write_snippet_inner(big_snippet, big_diff, &snippet, process_last_snippet);\n+        self.write_snippet_inner(big_snippet, big_diff, &snippet, span, process_last_snippet);\n     }\n \n     fn write_snippet_inner<F>(&mut self,\n                               big_snippet: &str,\n                               big_diff: usize,\n                               old_snippet: &str,\n+                              span: Span,\n                               process_last_snippet: F)\n         where F: Fn(&mut FmtVisitor, &str, &str)\n     {\n@@ -104,6 +105,10 @@ impl<'a> FmtVisitor<'a> {\n         let mut last_wspace = None;\n         let mut rewrite_next_comment = true;\n \n+        let char_pos = self.codemap.lookup_char_pos(span.lo);\n+        let file_name = &char_pos.file.name;\n+        let mut cur_line = char_pos.line;\n+\n         fn replace_chars(string: &str) -> String {\n             string\n                 .chars()\n@@ -129,6 +134,15 @@ impl<'a> FmtVisitor<'a> {\n \n                 let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n \n+                let subslice_num_lines = subslice.chars().filter(|c| *c == '\\n').count();\n+\n+                if rewrite_next_comment &&\n+                   !self.config\n+                        .file_lines\n+                        .intersects_range(file_name, cur_line, cur_line + subslice_num_lines) {\n+                    rewrite_next_comment = false;\n+                }\n+\n                 if rewrite_next_comment {\n                     if fix_indent {\n                         if let Some('{') = last_char {\n@@ -172,6 +186,7 @@ impl<'a> FmtVisitor<'a> {\n                         }\n                     }\n \n+                    cur_line += subslice_num_lines;\n                     continue;\n                 } else {\n                     rewrite_next_comment = false;\n@@ -182,13 +197,18 @@ impl<'a> FmtVisitor<'a> {\n                 i += offset;\n \n                 if c == '\\n' {\n+                    if !self.config.file_lines.contains_line(file_name, cur_line) {\n+                        last_wspace = None;\n+                    }\n+\n                     if let Some(lw) = last_wspace {\n                         self.buffer.push_str(&snippet[line_start..lw]);\n                         self.buffer.push_str(\"\\n\");\n                     } else {\n                         self.buffer.push_str(&snippet[line_start..i + 1]);\n                     }\n \n+                    cur_line += 1;\n                     line_start = i + 1;\n                     last_wspace = None;\n                     rewrite_next_comment = rewrite_next_comment || kind == CodeCharKind::Normal;"}, {"sha": "36b632c7df0af88189cad0fb0feeca5d15d3d679", "filename": "tests/source/file-lines-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/tests%2Fsource%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/tests%2Fsource%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-4.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -11,10 +11,10 @@ fn floaters() {\n     let y = if cond {\n                 val1\n             } else {\n-                val2\n+                val2\t\n             }\n                 .method_call();\n-\n+                                                                                              // aaaaaaaaaaaaa\n     {\n         match x {\n             PushParam => {\n@@ -24,6 +24,6 @@ fn floaters() {\n                                         }]\n                                .clone());\n             }\n-        }\n+        }    \n     }\n }"}, {"sha": "8ec2c67bc4446cbd5b86a668ccaa372ba7fce040", "filename": "tests/source/file-lines-5.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/tests%2Fsource%2Ffile-lines-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/tests%2Fsource%2Ffile-lines-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-5.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-5.rs\",\"range\":[3,5]}]\n+\n+struct A {\n+t: i64,     \n+}\n+\n+mod foo {\n+    fn bar() {\n+                         // test\n+                             let i = 12;\n+                                 // test\n+    }\n+    // aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    fn baz() {\n+        let j = 15;     \n+    }\n+}"}, {"sha": "2eacc8a0e75226ce4313f7fd1472dd1557986818", "filename": "tests/source/file-lines-6.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/tests%2Fsource%2Ffile-lines-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/tests%2Fsource%2Ffile-lines-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-6.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-6.rs\",\"range\":[9,10]}]\n+\n+struct A {\n+    t: i64,\n+}\n+\n+mod foo {\n+    fn bar() {\n+                         // test\t\n+                             let i = 12;\n+                                 // test\n+    }\n+\n+    fn baz() {\n+///\n+        let j = 15;     \n+    }\n+}"}, {"sha": "36b632c7df0af88189cad0fb0feeca5d15d3d679", "filename": "tests/target/file-lines-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/tests%2Ftarget%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/tests%2Ftarget%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-4.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -11,10 +11,10 @@ fn floaters() {\n     let y = if cond {\n                 val1\n             } else {\n-                val2\n+                val2\t\n             }\n                 .method_call();\n-\n+                                                                                              // aaaaaaaaaaaaa\n     {\n         match x {\n             PushParam => {\n@@ -24,6 +24,6 @@ fn floaters() {\n                                         }]\n                                .clone());\n             }\n-        }\n+        }    \n     }\n }"}, {"sha": "3966dc06303cc4cb9b5691c9329128927bfbd046", "filename": "tests/target/file-lines-5.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/tests%2Ftarget%2Ffile-lines-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/tests%2Ftarget%2Ffile-lines-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-5.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-5.rs\",\"range\":[3,5]}]\n+\n+struct A {\n+    t: i64,\n+}\n+\n+mod foo {\n+    fn bar() {\n+                         // test\n+                             let i = 12;\n+                                 // test\n+    }\n+    // aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+    fn baz() {\n+        let j = 15;     \n+    }\n+}"}, {"sha": "8a092df869a6fc14cee60e6aa14cd0242cf87fcf", "filename": "tests/target/file-lines-6.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1682b347333996d078de9e93281814cddf98751/tests%2Ftarget%2Ffile-lines-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1682b347333996d078de9e93281814cddf98751/tests%2Ftarget%2Ffile-lines-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-6.rs?ref=d1682b347333996d078de9e93281814cddf98751", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-6.rs\",\"range\":[9,10]}]\n+\n+struct A {\n+    t: i64,\n+}\n+\n+mod foo {\n+    fn bar() {\n+        // test\n+        let i = 12;\n+                                 // test\n+    }\n+\n+    fn baz() {\n+///\n+        let j = 15;     \n+    }\n+}"}]}