{"sha": "f9de964ccf767498ed7b1b4a879aaca1777a9d3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZGU5NjRjY2Y3Njc0OThlZDdiMWI0YTg3OWFhY2ExNzc3YTlkM2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-29T23:07:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-01T16:35:54Z"}, "message": "msvc: Enable landing pads by default\n\nThis commit turns on landing pads for MSVC by default, which means that we'll\nnow be running cleanups for values on the stack when an exception is thrown.\nThis commit \"fixes\" the previously seen LLVM abort by attaching the `noinline`\nattribute to all generated drop glue to prevent landing pads from being inlined\ninto other landing pads.\n\nThe performance of MSVC is highly likely to decrease from this commit, but there\nare various routes we can taken in the future if this ends up staying for quite\na while, such as generating a shim function only called from landing pads which\ncalls the actual drop glue, and this shim is marked noinline.\n\nFor now, however, this patch enables MSVC to successfully bootstrap itself!", "tree": {"sha": "9a90e44f7b3c0e9b0738c41d1b360b5b4d139607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a90e44f7b3c0e9b0738c41d1b360b5b4d139607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9de964ccf767498ed7b1b4a879aaca1777a9d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9de964ccf767498ed7b1b4a879aaca1777a9d3d", "html_url": "https://github.com/rust-lang/rust/commit/f9de964ccf767498ed7b1b4a879aaca1777a9d3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9de964ccf767498ed7b1b4a879aaca1777a9d3d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fe2a00276fa14a526409ccaee740ba01a17f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fe2a00276fa14a526409ccaee740ba01a17f3e", "html_url": "https://github.com/rust-lang/rust/commit/d4fe2a00276fa14a526409ccaee740ba01a17f3e"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "b829a9c6ec449c56d67913fadf6712d32c7b5762", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9de964ccf767498ed7b1b4a879aaca1777a9d3d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9de964ccf767498ed7b1b4a879aaca1777a9d3d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=f9de964ccf767498ed7b1b4a879aaca1777a9d3d", "patch": "@@ -751,12 +751,7 @@ pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n }\n \n pub fn need_invoke(bcx: Block) -> bool {\n-    // FIXME(#25869) currently unwinding is not implemented for MSVC and our\n-    //               normal unwinding infrastructure ends up just causing linker\n-    //               errors with the current LLVM implementation, so landing\n-    //               pads are disabled entirely for MSVC targets\n-    if bcx.sess().no_landing_pads() ||\n-       bcx.sess().target.target.options.is_like_msvc {\n+    if bcx.sess().no_landing_pads() {\n         return false;\n     }\n "}, {"sha": "be8510c8e968b5a0f830c7136ae26eeafdfc5c44", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f9de964ccf767498ed7b1b4a879aaca1777a9d3d/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9de964ccf767498ed7b1b4a879aaca1777a9d3d/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=f9de964ccf767498ed7b1b4a879aaca1777a9d3d", "patch": "@@ -22,8 +22,9 @@ use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst;\n use middle::subst::{Subst, Substs};\n use middle::ty::{self, Ty};\n-use trans::adt;\n use trans::adt::GetDtorType; // for tcx.dtor_type()\n+use trans::adt;\n+use trans::attributes;\n use trans::base::*;\n use trans::build::*;\n use trans::callee;\n@@ -43,6 +44,7 @@ use trans::type_::Type;\n use arena::TypedArena;\n use libc::c_uint;\n use syntax::ast;\n+use syntax::attr::InlineAttr;\n \n pub fn trans_exchange_free_dyn<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                            v: ValueRef,\n@@ -250,6 +252,25 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     update_linkage(ccx, llfn, None, OriginalTranslation);\n \n+    // FIXME: Currently LLVM has a bug where if an SSA value is created in one\n+    //        landing pad and then used in another it will abort during\n+    //        compilation. The compiler never actually generates nested landing\n+    //        pads, but this often arises when destructors are inlined into\n+    //        other functions. To prevent this inlining from happening (and thus\n+    //        preventing the LLVM abort) we mark all drop glue as inline(never)\n+    //        on MSVC.\n+    //\n+    //        For more information about the bug, see:\n+    //\n+    //            https://llvm.org/bugs/show_bug.cgi?id=23884\n+    //\n+    //        This is clearly not the ideal solution to the problem (due to the\n+    //        perf hits), so this should be removed once the upstream bug is\n+    //        fixed.\n+    if ccx.sess().target.target.options.is_like_msvc {\n+        attributes::inline(llfn, InlineAttr::Never);\n+    }\n+\n     ccx.stats().n_glues_created.set(ccx.stats().n_glues_created.get() + 1);\n     // All glue functions take values passed *by alias*; this is a\n     // requirement since in many contexts glue is invoked indirectly and"}]}