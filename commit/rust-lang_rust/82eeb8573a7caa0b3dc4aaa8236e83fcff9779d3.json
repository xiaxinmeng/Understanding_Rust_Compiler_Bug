{"sha": "82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZWViODU3M2E3Y2FhMGIzZGM0YWFhODIzNmU4M2ZjZmY5Nzc5ZDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-05T07:54:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T02:19:50Z"}, "message": "prepare for moving BuiltinLintDiagnostics to rustc_session", "tree": {"sha": "5508d01f211fee2292763e4b9eb2ae2672231472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5508d01f211fee2292763e4b9eb2ae2672231472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "html_url": "https://github.com/rust-lang/rust/commit/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d247ac4c0d64b278d80296a0dab801238fa3c66b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d247ac4c0d64b278d80296a0dab801238fa3c66b", "html_url": "https://github.com/rust-lang/rust/commit/d247ac4c0d64b278d80296a0dab801238fa3c66b"}], "stats": {"total": 146, "additions": 71, "deletions": 75}, "files": [{"sha": "de4992d8e706ea2c21bc65775f15d6fc217e8730", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 70, "deletions": 74, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "patch": "@@ -514,8 +514,10 @@ declare_lint_pass! {\n     ]\n }\n \n-// this could be a closure, but then implementing derive traits\n-// becomes hacky (and it gets allocated)\n+impl LateLintPass<'_, '_> for HardwiredLints {}\n+\n+// This could be a closure, but then implementing derive trait\n+// becomes hacky (and it gets allocated).\n #[derive(PartialEq)]\n pub enum BuiltinLintDiagnostics {\n     Normal,\n@@ -572,86 +574,80 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     );\n }\n \n-impl BuiltinLintDiagnostics {\n-    pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder<'_>) {\n-        match self {\n-            BuiltinLintDiagnostics::Normal => (),\n-            BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                    Ok(ref s) if is_global => {\n-                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n-                    }\n-                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                db.span_suggestion(span, \"use `dyn`\", sugg, app);\n-            }\n-            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n-                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                    Ok(ref s) => {\n-                        // FIXME(Manishearth) ideally the emitting code\n-                        // can tell us whether or not this is global\n-                        let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n-\n-                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n-                    }\n-                    Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n-                };\n-                db.span_suggestion(span, \"use `crate`\", sugg, app);\n-            }\n-            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n-                db.span_label(\n-                    span,\n-                    \"names from parent modules are not \\\n-                                     accessible without an explicit import\",\n-                );\n-            }\n-            BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n-                db.span_note(span_def, \"the macro is defined here\");\n-            }\n-            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+pub fn run_builtin_lint_diagnostics(\n+    this: BuiltinLintDiagnostics,\n+    sess: &Session,\n+    db: &mut DiagnosticBuilder<'_>,\n+) {\n+    match this {\n+        BuiltinLintDiagnostics::Normal => (),\n+        BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n+            let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                Ok(s) if is_global => (format!(\"dyn ({})\", s), Applicability::MachineApplicable),\n+                Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n+            };\n+            db.span_suggestion(span, \"use `dyn`\", sugg, app);\n+        }\n+        BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n+            let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                Ok(ref s) => {\n+                    // FIXME(Manishearth) ideally the emitting code\n+                    // can tell us whether or not this is global\n+                    let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n+\n+                    (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n+                }\n+                Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n+            };\n+            db.span_suggestion(span, \"use `crate`\", sugg, app);\n+        }\n+        BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n+            db.span_label(\n+                span,\n+                \"names from parent modules are not accessible without an explicit import\",\n+            );\n+        }\n+        BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n+            db.span_note(span_def, \"the macro is defined here\");\n+        }\n+        BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+            n,\n+            path_span,\n+            incl_angl_brckt,\n+            insertion_span,\n+            anon_lts,\n+        ) => {\n+            add_elided_lifetime_in_path_suggestion(\n+                sess,\n+                db,\n                 n,\n                 path_span,\n                 incl_angl_brckt,\n                 insertion_span,\n                 anon_lts,\n-            ) => {\n-                add_elided_lifetime_in_path_suggestion(\n-                    sess,\n-                    db,\n-                    n,\n-                    path_span,\n-                    incl_angl_brckt,\n-                    insertion_span,\n-                    anon_lts,\n+            );\n+        }\n+        BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n+            db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n+        }\n+        BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n+            if !replaces.is_empty() {\n+                db.tool_only_multipart_suggestion(\n+                    &message,\n+                    replaces,\n+                    Applicability::MachineApplicable,\n                 );\n             }\n-            BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n-                db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n-            }\n-            BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n-                if !replaces.is_empty() {\n-                    db.tool_only_multipart_suggestion(\n-                        &message,\n-                        replaces,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n-            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n-                for (span, is_imported) in spans {\n-                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n-                    db.span_label(\n-                        span,\n-                        format!(\"the item `{}` is already {} here\", ident, introduced),\n-                    );\n-                }\n-            }\n-            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n-                stability::deprecation_suggestion(db, suggestion, span)\n+        }\n+        BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n+            for (span, is_imported) in spans {\n+                let introduced = if is_imported { \"imported\" } else { \"defined\" };\n+                db.span_label(span, format!(\"the item `{}` is already {} here\", ident, introduced));\n             }\n         }\n+        BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n+            stability::deprecation_suggestion(db, suggestion, span)\n+        }\n     }\n }\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HardwiredLints {}"}, {"sha": "90575f71ff57396eb4b7c5ba0d1bc501ac6d12d2", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "patch": "@@ -495,7 +495,7 @@ pub trait LintContext: Sized {\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         let mut db = self.lookup(lint, span, msg);\n-        diagnostic.run(self.sess(), &mut db);\n+        super::builtin::run_builtin_lint_diagnostics(diagnostic, self.sess(), &mut db);\n         db.emit();\n     }\n "}]}