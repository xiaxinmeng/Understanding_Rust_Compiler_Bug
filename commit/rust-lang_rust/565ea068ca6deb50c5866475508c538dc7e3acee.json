{"sha": "565ea068ca6deb50c5866475508c538dc7e3acee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NWVhMDY4Y2E2ZGViNTBjNTg2NjQ3NTUwOGM1MzhkYzdlM2FjZWU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-13T00:23:24Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-13T00:51:07Z"}, "message": "Add type parameters when checking wildcard patterns\n\nFor some reason, wildcard patterns were never getting type parameter\nsubstitutions attached. This would cause an assertion failure when\nchecking a wildcard pattern that matches against a tag with\npolymorphic type (not sure why this didn't come up before). Fixed it.\n(The diff and test case may be easier to understand than this note\n:P)\n\nCloses #1503.", "tree": {"sha": "50588ed6241d1970e10faf04bf1d3653ff7d1327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50588ed6241d1970e10faf04bf1d3653ff7d1327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565ea068ca6deb50c5866475508c538dc7e3acee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565ea068ca6deb50c5866475508c538dc7e3acee", "html_url": "https://github.com/rust-lang/rust/commit/565ea068ca6deb50c5866475508c538dc7e3acee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565ea068ca6deb50c5866475508c538dc7e3acee/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8818f42b19efbf8832c856058519644a8657b04c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8818f42b19efbf8832c856058519644a8657b04c", "html_url": "https://github.com/rust-lang/rust/commit/8818f42b19efbf8832c856058519644a8657b04c"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "e3718933caade55b0a328ea7e34959f1975b2bf1", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/565ea068ca6deb50c5866475508c538dc7e3acee/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565ea068ca6deb50c5866475508c538dc7e3acee/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=565ea068ca6deb50c5866475508c538dc7e3acee", "patch": "@@ -1264,7 +1264,18 @@ fn valid_range_bounds(from: @ast::expr, to: @ast::expr) -> bool {\n fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n              expected: ty::t) {\n     alt pat.node {\n-      ast::pat_wild. { write::ty_only_fixup(fcx, pat.id, expected); }\n+      ast::pat_wild. {\n+          alt structure_of(fcx, pat.span, expected) {\n+                  ty::ty_tag(_, expected_tps) {\n+                      let path_tpt = {substs: some(expected_tps),\n+                                      ty: expected};\n+                      write::ty_fixup(fcx, pat.id, path_tpt);\n+                  }\n+                  _ {\n+                      write::ty_only_fixup(fcx, pat.id, expected);\n+                  }\n+              }\n+      }\n       ast::pat_lit(lt) {\n         check_expr_with(fcx, lt, expected);\n         write::ty_only_fixup(fcx, pat.id, expr_ty(fcx.ccx.tcx, lt));"}, {"sha": "4d89679e70ee0c92b561588ba82c15c30555bc49", "filename": "src/test/run-fail/alt-wildcards.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/565ea068ca6deb50c5866475508c538dc7e3acee/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565ea068ca6deb50c5866475508c538dc7e3acee/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-wildcards.rs?ref=565ea068ca6deb50c5866475508c538dc7e3acee", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern:squirrelcupcake\n+fn cmp() -> int {\n+    alt(option::some('a'), option::none::<char>) {\n+        (option::some(_), _) { fail \"squirrelcupcake\"; }\n+        (_, option::some(_)) { fail; }\n+    }\n+}\n+\n+fn main() { log(error, cmp()); }"}]}