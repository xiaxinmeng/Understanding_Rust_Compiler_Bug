{"sha": "a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "node_id": "C_kwDOAAsO6NoAKGE4ZjhmNzQ2ZmMwNDZhMDI1ZDFiOGM0NjRjZTI4ZjZiODI4ZjMyZTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-05T14:04:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-05T14:04:20Z"}, "message": "Rollup merge of #91437 - dtolnay:emptybrace, r=nagisa\n\nPretty print empty blocks as {}\n\n**Example:**\n\n```rust\nmacro_rules! p {\n    ($e:expr) => {\n        println!(\"{}\", stringify!($e));\n    };\n    ($i:item) => {\n        println!(\"{}\", stringify!($i));\n    };\n}\n\nfn main() {\n    p!(if true {});\n    p!(struct S {});\n}\n```\n\n**Before:**\n\n```console\nif true { }\nstruct S {\n}\n```\n\n**After:**\n\n```console\nif true {}\nstruct S {}\n```\n\nThis affects [`dbg!`](https://doc.rust-lang.org/std/macro.dbg.html), as well as ecosystem uses of stringify such as in [`anyhow::ensure!`](https://docs.rs/anyhow/1/anyhow/macro.ensure.html). Printing a `{ }` in today's heavily rustfmt'd world comes out looking jarring/sloppy.", "tree": {"sha": "162c91c875293c2c5b332f5fca640ea38c515956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162c91c875293c2c5b332f5fca640ea38c515956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhrMblCRBK7hj4Ov3rIwAAKooIAF66+oYSPqCCPm80uw4uMfe+\nI14uUy/s6qEtw3I+DIGObHcBX+00xGgvueSnr8tuXxCeaKYOvM4it2zftqoqFKoJ\nXT/9Rd/5cwzw5cmPTKuVWYQuj1Lh3PdcYSOKQIkDTkc9iwFbnKO0MJpRo5/gqJ7E\nAlJ7gvC54Vpcd1RuboPg8eI6KrftKeqwjgUl6yWLUigKXzQhCl2K/oNAl4mzd9rn\nUMJUVXuaQinFBE4G9BpwtHxOI8VQrn2btheV+wcxGBvC9sP018f4vyFPLyRASmsj\ngSX3owjMyRB+sOSzKCt7chl6cMS5S2HrWz0P1aGI40U73QehECDngOhUxQHLTlc=\n=3Qpm\n-----END PGP SIGNATURE-----\n", "payload": "tree 162c91c875293c2c5b332f5fca640ea38c515956\nparent 214b2a126bc6654bf60108aea2e8dce94b096b4b\nparent b516a8c5cbcde670e509182592547072a723875a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638713060 +0100\ncommitter GitHub <noreply@github.com> 1638713060 +0100\n\nRollup merge of #91437 - dtolnay:emptybrace, r=nagisa\n\nPretty print empty blocks as {}\n\n**Example:**\n\n```rust\nmacro_rules! p {\n    ($e:expr) => {\n        println!(\"{}\", stringify!($e));\n    };\n    ($i:item) => {\n        println!(\"{}\", stringify!($i));\n    };\n}\n\nfn main() {\n    p!(if true {});\n    p!(struct S {});\n}\n```\n\n**Before:**\n\n```console\nif true { }\nstruct S {\n}\n```\n\n**After:**\n\n```console\nif true {}\nstruct S {}\n```\n\nThis affects [`dbg!`](https://doc.rust-lang.org/std/macro.dbg.html), as well as ecosystem uses of stringify such as in [`anyhow::ensure!`](https://docs.rs/anyhow/1/anyhow/macro.ensure.html). Printing a `{ }` in today's heavily rustfmt'd world comes out looking jarring/sloppy.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "html_url": "https://github.com/rust-lang/rust/commit/a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214b2a126bc6654bf60108aea2e8dce94b096b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/214b2a126bc6654bf60108aea2e8dce94b096b4b", "html_url": "https://github.com/rust-lang/rust/commit/214b2a126bc6654bf60108aea2e8dce94b096b4b"}, {"sha": "b516a8c5cbcde670e509182592547072a723875a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b516a8c5cbcde670e509182592547072a723875a", "html_url": "https://github.com/rust-lang/rust/commit/b516a8c5cbcde670e509182592547072a723875a"}], "stats": {"total": 346, "additions": 182, "deletions": 164}, "files": [{"sha": "593dca1b405d85f0df8a77bbcff4eb2756eb7836", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -263,14 +263,17 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         self.strsep(\",\", false, b, elts, op)\n     }\n \n-    fn maybe_print_comment(&mut self, pos: BytePos) {\n+    fn maybe_print_comment(&mut self, pos: BytePos) -> bool {\n+        let mut has_comment = false;\n         while let Some(ref cmnt) = self.next_comment() {\n             if cmnt.pos < pos {\n+                has_comment = true;\n                 self.print_comment(cmnt);\n             } else {\n                 break;\n             }\n         }\n+        has_comment\n     }\n \n     fn print_comment(&mut self, cmnt: &Comment) {\n@@ -570,7 +573,10 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         self.print_tts(tts, convert_dollar_crate);\n         self.end();\n         match delim {\n-            DelimToken::Brace => self.bclose(span),\n+            DelimToken::Brace => {\n+                let empty = tts.is_empty();\n+                self.bclose(span, empty);\n+            }\n             _ => {\n                 let token_str = self.token_kind_to_string(&token::CloseDelim(delim));\n                 self.word(token_str)\n@@ -642,17 +648,20 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         self.end(); // Close the head-box.\n     }\n \n-    fn bclose_maybe_open(&mut self, span: rustc_span::Span, close_box: bool) {\n-        self.maybe_print_comment(span.hi());\n-        self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n+    fn bclose_maybe_open(&mut self, span: rustc_span::Span, empty: bool, close_box: bool) {\n+        let has_comment = self.maybe_print_comment(span.hi());\n+        if !empty || has_comment {\n+            self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n+        }\n         self.word(\"}\");\n         if close_box {\n             self.end(); // Close the outer-box.\n         }\n     }\n \n-    fn bclose(&mut self, span: rustc_span::Span) {\n-        self.bclose_maybe_open(span, true)\n+    fn bclose(&mut self, span: rustc_span::Span, empty: bool) {\n+        let close_box = true;\n+        self.bclose_maybe_open(span, empty, close_box)\n     }\n \n     fn break_offset_if_not_bol(&mut self, n: usize, off: isize) {\n@@ -1196,7 +1205,8 @@ impl<'a> State<'a> {\n                         for item in items {\n                             self.print_item(item);\n                         }\n-                        self.bclose(item.span);\n+                        let empty = item.attrs.is_empty() && items.is_empty();\n+                        self.bclose(item.span, empty);\n                     }\n                     ModKind::Unloaded => {\n                         self.s.word(\";\");\n@@ -1216,7 +1226,8 @@ impl<'a> State<'a> {\n                 }\n                 self.bopen();\n                 self.print_foreign_mod(nmod, &item.attrs);\n-                self.bclose(item.span);\n+                let empty = item.attrs.is_empty() && nmod.items.is_empty();\n+                self.bclose(item.span, empty);\n             }\n             ast::ItemKind::GlobalAsm(ref asm) => {\n                 self.head(visibility_qualified(&item.vis, \"global_asm!\"));\n@@ -1291,7 +1302,8 @@ impl<'a> State<'a> {\n                 for impl_item in items {\n                     self.print_assoc_item(impl_item);\n                 }\n-                self.bclose(item.span);\n+                let empty = item.attrs.is_empty() && items.is_empty();\n+                self.bclose(item.span, empty);\n             }\n             ast::ItemKind::Trait(box ast::Trait {\n                 is_auto,\n@@ -1326,7 +1338,8 @@ impl<'a> State<'a> {\n                 for trait_item in items {\n                     self.print_assoc_item(trait_item);\n                 }\n-                self.bclose(item.span);\n+                let empty = item.attrs.is_empty() && items.is_empty();\n+                self.bclose(item.span, empty);\n             }\n             ast::ItemKind::TraitAlias(ref generics, ref bounds) => {\n                 self.head(\"\");\n@@ -1410,7 +1423,8 @@ impl<'a> State<'a> {\n             self.end();\n             self.maybe_print_trailing_comment(v.span, None);\n         }\n-        self.bclose(span)\n+        let empty = variants.is_empty();\n+        self.bclose(span, empty)\n     }\n \n     crate fn print_visibility(&mut self, vis: &ast::Visibility) {\n@@ -1441,20 +1455,24 @@ impl<'a> State<'a> {\n     crate fn print_record_struct_body(&mut self, fields: &[ast::FieldDef], span: rustc_span::Span) {\n         self.nbsp();\n         self.bopen();\n-        self.hardbreak_if_not_bol();\n \n-        for field in fields {\n+        let empty = fields.is_empty();\n+        if !empty {\n             self.hardbreak_if_not_bol();\n-            self.maybe_print_comment(field.span.lo());\n-            self.print_outer_attributes(&field.attrs);\n-            self.print_visibility(&field.vis);\n-            self.print_ident(field.ident.unwrap());\n-            self.word_nbsp(\":\");\n-            self.print_type(&field.ty);\n-            self.s.word(\",\");\n+\n+            for field in fields {\n+                self.hardbreak_if_not_bol();\n+                self.maybe_print_comment(field.span.lo());\n+                self.print_outer_attributes(&field.attrs);\n+                self.print_visibility(&field.vis);\n+                self.print_ident(field.ident.unwrap());\n+                self.word_nbsp(\":\");\n+                self.print_type(&field.ty);\n+                self.s.word(\",\");\n+            }\n         }\n \n-        self.bclose(span)\n+        self.bclose(span, empty);\n     }\n \n     crate fn print_struct(\n@@ -1633,7 +1651,8 @@ impl<'a> State<'a> {\n             }\n         }\n \n-        self.bclose_maybe_open(blk.span, close_box);\n+        let empty = attrs.is_empty() && blk.stmts.is_empty();\n+        self.bclose_maybe_open(blk.span, empty, close_box);\n         self.ann.post(self, AnnNode::Block(blk))\n     }\n \n@@ -2010,7 +2029,8 @@ impl<'a> State<'a> {\n                 for arm in arms {\n                     self.print_arm(arm);\n                 }\n-                self.bclose(expr.span);\n+                let empty = attrs.is_empty() && arms.is_empty();\n+                self.bclose(expr.span, empty);\n             }\n             ast::ExprKind::Closure(\n                 capture_clause,"}, {"sha": "449430a7d28ef77c044b740c631be3844efffab9", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -2174,7 +2174,7 @@ impl<'a> State<'a> {\n         match decl.output {\n             hir::FnRetTy::Return(ref ty) => {\n                 self.print_type(&ty);\n-                self.maybe_print_comment(ty.span.lo())\n+                self.maybe_print_comment(ty.span.lo());\n             }\n             hir::FnRetTy::DefaultReturn(..) => unreachable!(),\n         }\n@@ -2368,7 +2368,7 @@ impl<'a> State<'a> {\n         self.end();\n \n         if let hir::FnRetTy::Return(ref output) = decl.output {\n-            self.maybe_print_comment(output.span.lo())\n+            self.maybe_print_comment(output.span.lo());\n         }\n     }\n "}, {"sha": "c80bce2d140b9228df0a755509d450404fbf6d0b", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,6 +1,6 @@\n // pp-exact\n \n-fn main() { }\n+fn main() {}\n \n #[cfg(FALSE)]\n fn syntax() {\n@@ -117,7 +117,7 @@ fn syntax() {\n     let _ = #[attr] foo!(#! [attr]);\n     let _ = #[attr] foo![];\n     let _ = #[attr] foo![#! [attr]];\n-    let _ = #[attr] foo! { };\n+    let _ = #[attr] foo! {};\n     let _ = #[attr] foo! { #! [attr] };\n     let _ = #[attr] Foo{bar: baz,};\n     let _ = #[attr] Foo{..foo};\n@@ -135,7 +135,7 @@ fn syntax() {\n         foo!();\n \n         #[attr]\n-        foo! { }\n+        foo! {}\n \n         #[attr]\n         foo![];\n@@ -170,6 +170,6 @@ fn syntax() {\n     {\n \n         #[attr]\n-        foo! { }\n+        foo! {}\n     }\n }"}, {"sha": "0eb403c6bc843aeb4703cdf708a0e442200caad8", "filename": "src/test/pretty/attr-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fattr-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fattr-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-derive.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -29,4 +29,4 @@ enum Enum {\n     Qwerty,\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "c3c47cff5eda9a600dfcff80fab4aa10956d0502", "filename": "src/test/pretty/auto-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fauto-trait.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -2,8 +2,8 @@\n \n // pp-exact\n \n-auto trait MyTrait { }\n+auto trait MyTrait {}\n \n-unsafe auto trait UnsafeMyTrait { }\n+unsafe auto trait UnsafeMyTrait {}\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "e53d51e34cefa8d3942eb09f8c52c7d0d1319f3b", "filename": "src/test/pretty/block-comment-trailing-whitespace2.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fblock-comment-trailing-whitespace2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fblock-comment-trailing-whitespace2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-trailing-whitespace2.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,9 +1,8 @@\n // compile-flags: --crate-type=lib\n \n // pp-exact\n-fn f() {\n-} /*\n-  The next line should not be indented.\n+fn f() {} /*\n+          The next line should not be indented.\n \n-  That one. It shouldn't have been indented.\n-  */\n+          That one. It shouldn't have been indented.\n+          */"}, {"sha": "1eba1e6bdec3f4f0507d606b975d9628ff4b71b0", "filename": "src/test/pretty/closure-reform-pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -3,14 +3,14 @@\n \n // pp-exact\n \n-fn call_it(f: Box<FnMut(String) -> String>) { }\n+fn call_it(f: Box<FnMut(String) -> String>) {}\n \n-fn call_this<F>(f: F) where F: Fn(&str) + Send { }\n+fn call_this<F>(f: F) where F: Fn(&str) + Send {}\n \n-fn call_that<F>(f: F) where F: for<'a> Fn(&'a isize, &'a isize) -> isize { }\n+fn call_that<F>(f: F) where F: for<'a> Fn(&'a isize, &'a isize) -> isize {}\n \n-fn call_extern(f: fn() -> isize) { }\n+fn call_extern(f: fn() -> isize) {}\n \n-fn call_abid_extern(f: extern \"C\" fn() -> isize) { }\n+fn call_abid_extern(f: extern \"C\" fn() -> isize) {}\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "734f9fa123eea2c420947d12f3c162b92f7aa5a4", "filename": "src/test/pretty/disamb-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -7,4 +7,4 @@\n fn id<F>(f: F) -> isize where F: Fn() -> isize { f() }\n \n fn wsucc(_n: isize) -> isize { id(|| { 1 }) - 0 }\n-fn main() { }\n+fn main() {}"}, {"sha": "fc646c2956c4f74b8e25c920cac036c7b91a9988", "filename": "src/test/pretty/enum-variant-vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fenum-variant-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fenum-variant-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fenum-variant-vis.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -2,7 +2,7 @@\n \n // Check that the visibility is printed on an enum variant.\n \n-fn main() { }\n+fn main() {}\n \n #[cfg(FALSE)]\n enum Foo { pub V, }"}, {"sha": "8df74e8e1f9c871247264f335b576916915b616e", "filename": "src/test/pretty/example1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexample1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexample1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexample1.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,3 +1,3 @@\n // pp-exact\n \n-fn main() { }\n+fn main() {}"}, {"sha": "3f7129afde26d3c5f0530da24e950b745cee84a4", "filename": "src/test/pretty/example2.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexample2.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexample2.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexample2.pp?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,3 +1,3 @@\n // pp-exact:example2.pp\n \n-fn main() { }\n+fn main() {}"}, {"sha": "3f7129afde26d3c5f0530da24e950b745cee84a4", "filename": "src/test/pretty/example2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexample2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexample2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexample2.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,3 +1,3 @@\n // pp-exact:example2.pp\n \n-fn main() { }\n+fn main() {}"}, {"sha": "8385c5fa8c91a75d30224568e3f1852754ef2899", "filename": "src/test/pretty/expanded-and-path-remap-80832.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexpanded-and-path-remap-80832.pp?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -10,4 +10,4 @@\n // pp-exact:expanded-and-path-remap-80832.pp\n // compile-flags: --remap-path-prefix {{src-base}}=the/src\n \n-fn main() { }\n+fn main() {}"}, {"sha": "b932e83aaf10fd7f0a5e0bbc56abb1659771cab3", "filename": "src/test/pretty/fn-return.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ffn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ffn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-return.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,7 +1,7 @@\n // pp-exact\n \n-// Check that `fn f() -> () { }` does not print as `fn f() { }`.\n+// Check that `fn f() -> () {}` does not print as `fn f() {}`.\n \n-fn f() -> () { }\n+fn f() -> () {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f012763c3f606f61cc04615f1c953c7dbd9c680e", "filename": "src/test/pretty/fn-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-types.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,5 +1,5 @@\n // pp-exact\n \n-fn from_foreign_fn(_x: fn()) { }\n-fn from_stack_closure<F>(_x: F) where F: Fn() { }\n-fn main() { }\n+fn from_foreign_fn(_x: fn()) {}\n+fn from_stack_closure<F>(_x: F) where F: Fn() {}\n+fn main() {}"}, {"sha": "59e477cfa8ecba76fa24692ccdad2ad0331802ec", "filename": "src/test/pretty/fn-variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ffn-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ffn-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-variadic.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -12,4 +12,4 @@ pub unsafe extern \"C\" fn bar(_: i32, mut ap: ...) -> usize {\n     ap.arg::<usize>()\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "7b90b0becacbaf38e3b1dc2e8b4ae624489564f6", "filename": "src/test/pretty/if-attr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fif-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fif-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fif-attr.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -4,34 +4,34 @@\n fn simple_attr() {\n \n     #[attr]\n-    if true { }\n+    if true {}\n \n     #[allow_warnings]\n-    if true { }\n+    if true {}\n }\n \n #[cfg(FALSE)]\n fn if_else_chain() {\n \n     #[first_attr]\n-    if true { } else if false { } else { }\n+    if true {} else if false {} else {}\n }\n \n #[cfg(FALSE)]\n fn if_let() {\n \n     #[attr]\n-    if let Some(_) = Some(true) { }\n+    if let Some(_) = Some(true) {}\n }\n \n #[cfg(FALSE)]\n fn let_attr_if() {\n-    let _ = #[attr] if let _ = 0 { };\n-    let _ = #[attr] if true { };\n+    let _ = #[attr] if let _ = 0 {};\n+    let _ = #[attr] if true {};\n \n-    let _ = #[attr] if let _ = 0 { } else { };\n-    let _ = #[attr] if true { } else { };\n+    let _ = #[attr] if let _ = 0 {} else {};\n+    let _ = #[attr] if true {} else {};\n }\n \n \n-fn main() { }\n+fn main() {}"}, {"sha": "3c88f5cb8a41c13012e883c78fb847d49687b77b", "filename": "src/test/pretty/issue-12590-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-12590-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-12590-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-12590-a.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -6,4 +6,4 @@\n #[path = \"issue-12590-b.rs\"]\n mod issue_12590_b;\n \n-fn main() { }\n+fn main() {}"}, {"sha": "07b3f5653d36b076eddccde7dd4afd0189fbcb91", "filename": "src/test/pretty/issue-12590-c.pp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-12590-c.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-12590-c.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-12590-c.pp?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -13,7 +13,7 @@\n #[path = \"issue-12590-b.rs\"]\n mod issue_12590_b {\n \n-    fn b() { }\n-    fn main() { }\n+    fn b() {}\n+    fn main() {}\n }\n-fn main() { }\n+fn main() {}"}, {"sha": "0ec05f9a8051ba6e1f87471c91c1b5b8466756b6", "filename": "src/test/pretty/issue-12590-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-12590-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-12590-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-12590-c.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -7,4 +7,4 @@\n #[path = \"issue-12590-b.rs\"]\n mod issue_12590_b;\n \n-fn main() { }\n+fn main() {}"}, {"sha": "0d2702804d12db379962dbf2ccea1cde7c33d5d5", "filename": "src/test/pretty/issue-19077.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-19077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-19077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-19077.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -4,8 +4,8 @@\n fn main() {\n     match true {\n         true if true => (),\n-        false if false => unsafe { },\n-        true => { }\n+        false if false => unsafe {},\n+        true => {}\n         false => (),\n     }\n }"}, {"sha": "607cbebee170c124737f0034f58ca2ad7f0a1fce", "filename": "src/test/pretty/issue-30731.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-30731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-30731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-30731.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -5,4 +5,4 @@\n // pretty-compare-only\n // pp-exact\n \n-fn main() { b! { } c }\n+fn main() { b! {} c }"}, {"sha": "ed7879001d5598df74797deeb9d6ac73db3a5b01", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,6 +1,6 @@\n // pp-exact\n \n-fn main() { }\n+fn main() {}\n \n struct C {\n     field: u8,"}, {"sha": "34eae849be45eab5f215752a5884023699a23ae5", "filename": "src/test/pretty/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Flifetime.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,5 +1,5 @@\n // pp-exact\n \n-fn f1<'a, 'b, 'c>(_x: &'a u32, _y: &'b u32, _z: &'c u32) where 'c: 'a + 'b { }\n+fn f1<'a, 'b, 'c>(_x: &'a u32, _y: &'b u32, _z: &'c u32) where 'c: 'a + 'b {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "b88ae703950baec310a26f0deeee62a05372c0f1", "filename": "src/test/pretty/macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -4,4 +4,4 @@\n \n pub(crate) macro mac { ($arg : expr) => { $arg + $arg } }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "fb66e4a7758420962926977cb859dcfc997243b5", "filename": "src/test/pretty/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro_rules.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,19 +1,19 @@\n // pp-exact\n \n-macro_rules! brace { () => { } ; }\n+macro_rules! brace { () => {} ; }\n \n-macro_rules! bracket[() => { } ;];\n+macro_rules! bracket[() => {} ;];\n \n-macro_rules! paren(() => { } ;);\n+macro_rules! paren(() => {} ;);\n \n macro_rules! matcher_brackets {\n-    (paren) => { } ; (bracket) => { } ; (brace) => { } ;\n+    (paren) => {} ; (bracket) => {} ; (brace) => {} ;\n }\n \n macro_rules! all_fragments {\n     ($b : block, $e : expr, $i : ident, $it : item, $l : lifetime, $lit :\n      literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n-     $vis : vis) => { } ;\n+     $vis : vis) => {} ;\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f46c0e3f1bc629fe38753079d6e1672d5c282066", "filename": "src/test/pretty/nested-item-vis-defaultness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -2,7 +2,7 @@\n \n // pp-exact\n \n-fn main() { }\n+fn main() {}\n \n #[cfg(FALSE)]\n extern \"C\" {"}, {"sha": "f1970de6feb4b14581aa65c4f7fc4a55195e41b8", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -2,9 +2,9 @@\n \n \n trait Tr {\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }\n-impl Tr for isize { }\n+impl Tr for isize {}\n \n fn foo<'a>(x: Box<Tr + Sync + 'a>) -> Box<Tr + Sync + 'a> { x }\n "}, {"sha": "67a5d1dd8ec664db2d54205a7fa1d3a8202e2312", "filename": "src/test/pretty/qpath-associated-type-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fqpath-associated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fqpath-associated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fqpath-associated-type-bound.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -8,9 +8,9 @@ mod m {\n }\n \n trait Tu {\n-    fn dummy() { }\n+    fn dummy() {}\n }\n \n fn foo<T: m::Tr>() { <T as m::Tr>::Ts::dummy(); }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "12204c8cd30ed825e454c8f314aa04a468ea1250", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -4,7 +4,7 @@\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n \n-fn main() { }\n+fn main() {}\n \n fn _0() {\n \n@@ -35,7 +35,7 @@ fn _2() {\n fn _3() {\n \n     #[rustc_dummy]\n-    match () { _ => { } }\n+    match () { _ => {} }\n }\n \n fn _4() {\n@@ -117,13 +117,13 @@ fn _9() {\n     stmt_mac!();\n \n     #[rustc_dummy]\n-    stmt_mac! { };\n+    stmt_mac! {};\n \n     #[rustc_dummy]\n     stmt_mac![];\n \n     #[rustc_dummy]\n-    stmt_mac! { }\n+    stmt_mac! {}\n \n     let _ = ();\n }\n@@ -133,7 +133,7 @@ macro_rules! expr_mac { () => { () } }\n fn _10() {\n     let _ = #[rustc_dummy] expr_mac!();\n     let _ = #[rustc_dummy] expr_mac![];\n-    let _ = #[rustc_dummy] expr_mac! { };\n+    let _ = #[rustc_dummy] expr_mac! {};\n }\n \n fn _11() {\n@@ -235,7 +235,7 @@ fn _11() {\n     || #[rustc_dummy] return;\n     let _ = #[rustc_dummy] expr_mac!();\n     let _ = #[rustc_dummy] expr_mac![];\n-    let _ = #[rustc_dummy] expr_mac! { };\n+    let _ = #[rustc_dummy] expr_mac! {};\n     let _ = #[rustc_dummy] Foo{data: (),};\n     let _ = #[rustc_dummy] Foo{..s};\n     let _ = #[rustc_dummy] Foo{data: (), ..s};\n@@ -258,6 +258,6 @@ fn _12() {\n     }\n }\n \n-fn foo() { }\n-fn foo3(_: i32, _: (), _: ()) { }\n-fn qux(_: i32) { }\n+fn foo() {}\n+fn foo3(_: i32, _: (), _: ()) {}\n+fn qux(_: i32) {}"}, {"sha": "d53f6e4b52850b8a6d0b9317f64b5bc6c8c5ed24", "filename": "src/test/pretty/tag-blank-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftag-blank-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftag-blank-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftag-blank-lines.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -5,4 +5,4 @@ enum foo {\n     baz,\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "6cb0e4136b62cc2eddfe3f8ca44303010823d62c", "filename": "src/test/pretty/trait-inner-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftrait-inner-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftrait-inner-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-inner-attr.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -4,4 +4,4 @@ trait Foo {\n     #![allow(bar)]\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "310506eabca17a2250833a99b89b7ee10d8af02d", "filename": "src/test/pretty/trait-polarity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-polarity.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -4,6 +4,6 @@\n \n struct Test;\n \n-impl !Send for Test { }\n+impl !Send for Test {}\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "c4ae7606946badce71e41784f8afd4ca3b6ef754", "filename": "src/test/pretty/trait-safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-safety.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -5,11 +5,11 @@ unsafe trait UnsafeTrait {\n }\n \n unsafe impl UnsafeTrait for isize {\n-    fn foo(&self) { }\n+    fn foo(&self) {}\n }\n \n pub unsafe trait PubUnsafeTrait {\n     fn foo(&self);\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "5614a81b0eb410f0d7afe97ed090e244a296428f", "filename": "src/test/pretty/where-clauses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fwhere-clauses.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -2,4 +2,4 @@\n \n fn f<'a, 'b, T>(t: T) -> isize where T: 'a, 'a: 'b, T: Eq { 0 }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "6f980e606645149fadfca22d1dfee4dd4061544d", "filename": "src/test/ui/async-await/issues/issue-60674.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,3 +1,3 @@\n-async fn f(mut x : u8) { }\n-async fn g((mut x, y, mut z) : (u8, u8, u8)) { }\n-async fn g(mut x : u8, (a, mut b, c) : (u8, u8, u8), y : u8) { }\n+async fn f(mut x : u8) {}\n+async fn g((mut x, y, mut z) : (u8, u8, u8)) {}\n+async fn g(mut x : u8, (a, mut b, c) : (u8, u8, u8), y : u8) {}"}, {"sha": "2718b65108cdd24c9d4a940e5928ead26ceddf85", "filename": "src/test/ui/attributes/issue-90873.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -8,7 +8,7 @@ LL | #![u=||{static d=||1;}]\n    |      ^^^^^^^^^^^^^^^^^\n \n error: unexpected token: `{\n-           impl std::ops::Neg for i8 { }\n+           impl std::ops::Neg for i8 {}\n        }`\n   --> $DIR/issue-90873.rs:7:6\n    |"}, {"sha": "9f65b8f25baaf85781800339386494aea82e6cb8", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -11,9 +11,9 @@ use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n \n-trait Foo<const KIND : bool = true> { }\n+trait Foo<const KIND : bool = true> {}\n \n-fn foo<const SIZE : usize = 5>() { }\n+fn foo<const SIZE : usize = 5>() {}\n \n struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n              FROM>;"}, {"sha": "51c21043db8888d616bf8ff6302f620cfdde49f8", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -15,7 +15,7 @@ fn bar /* 0#0 */() {\n     y /* 0#1 */ + x /* 0#0 */\n }\n \n-fn y /* 0#0 */() { }\n+fn y /* 0#0 */() {}\n \n /*\n Expansions:"}, {"sha": "4f81ee8b7e6bb59422b2849ace99552762492020", "filename": "src/test/ui/lint/issue-87308.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-87308.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -11,4 +11,4 @@ extern crate std;\n \n macro_rules! foo { () => { break 'x ; } }\n \n-pub fn main() { loop { } }\n+pub fn main() { loop {} }"}, {"sha": "84fffe44d6a55a4d6a5b88ba0f7da7ebd6a1f9ac", "filename": "src/test/ui/macros/nonterminal-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -16,7 +16,7 @@ macro complex_nonterminal($nt_item: item) {\n         struct S;\n     }\n \n-    n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n+    n!(a $nt_item b); //~ ERROR no rules expected the token `enum E {}`\n }\n \n simple_nonterminal!(a, 'a, (x, y, z)); // OK"}, {"sha": "585f2355321f5fac9da3a9ad0933e5d365519e25", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,4 +1,4 @@\n-error: no rules expected the token `enum E { }`\n+error: no rules expected the token `enum E {}`\n   --> $DIR/nonterminal-matching.rs:19:10\n    |\n LL |     macro n(a $nt_item b) {"}, {"sha": "091862de30f7f032462c0e2d1f45c42080ceb0b5", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -14,7 +14,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/allowed-attr-stmt-expr.rs:49:20: 49:21 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Foo { }\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Foo {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -140,7 +140,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/allowed-attr-stmt-expr.rs:61:28: 61:29 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): second_make_stmt! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt! (#[allow(dead_code)] struct Bar {}) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\",\n@@ -201,7 +201,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/allowed-attr-stmt-expr.rs:64:57: 64:58 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar { }\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -257,7 +257,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/allowed-attr-stmt-expr.rs:64:54: 64:56 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',"}, {"sha": "fc69a13ddb9b417f7dae9d356f1394d5c6e0e648", "filename": "src/test/ui/proc-macro/attr-complex-fn.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): fn foo < T : MyTrait < MyStruct < { true } >> > () { }\n+PRINT-ATTR INPUT (DISPLAY): fn foo < T : MyTrait < MyStruct < { true } >> > () {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\","}, {"sha": "f9b2305c7359bb07bbcc0a85a2923527f2e0d7ee", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Foo { }\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Foo {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -124,7 +124,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/attr-stmt-expr.rs:53:28: 53:29 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): second_make_stmt! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt! (#[allow(dead_code)] struct Bar {}) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"second_make_stmt\",\n@@ -185,7 +185,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/attr-stmt-expr.rs:56:57: 56:58 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar { }\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[allow(dead_code)] struct Bar {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -241,7 +241,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/attr-stmt-expr.rs:56:54: 56:56 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',"}, {"sha": "1b17d60476a8445765dcbc0ec725e68f41a83444", "filename": "src/test/ui/proc-macro/attribute-after-derive.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -83,7 +83,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/attribute-after-derive.rs:16:24: 19:2 (#0),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): struct AttributeDerive { }\n+PRINT-DERIVE INPUT (DISPLAY): struct AttributeDerive {}\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -99,7 +99,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         span: $DIR/attribute-after-derive.rs:16:24: 19:2 (#0),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): #[print_attr] struct DeriveAttribute { }\n+PRINT-DERIVE INPUT (DISPLAY): #[print_attr] struct DeriveAttribute {}\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',"}, {"sha": "5f76a4484e1a425ffde371c0947dba4345b5b9e3", "filename": "src/test/ui/proc-macro/auxiliary/attr-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-args.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -15,7 +15,7 @@ pub fn attr_with_args(args: TokenStream, input: TokenStream) -> TokenStream {\n \n     let input = input.to_string();\n \n-    assert_eq!(input, \"fn foo() { }\");\n+    assert_eq!(input, \"fn foo() {}\");\n \n     r#\"\n         fn foo() -> &'static str { \"Hello, world!\" }"}, {"sha": "3787b8eeccc40b5151d895783db34c97fd1a77a3", "filename": "src/test/ui/proc-macro/auxiliary/attr-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -10,6 +10,6 @@ use proc_macro::TokenStream;\n #[proc_macro_attribute]\n pub fn foo(attr: TokenStream, item: TokenStream) -> TokenStream {\n     drop(attr);\n-    assert_eq!(item.to_string(), \"fn foo() { }\");\n+    assert_eq!(item.to_string(), \"fn foo() {}\");\n     \"fn foo(&self);\".parse().unwrap()\n }"}, {"sha": "debbad57a86994f644431d00ced7a18e8cdaa068", "filename": "src/test/ui/proc-macro/cfg-eval-inner.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -3,7 +3,7 @@ PRINT-ATTR INPUT (DISPLAY): impl Foo <\n  {\n      #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n      { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n- }] > { #! [rustc_dummy(evaluated_attr)] fn bar() { } }\n+ }] > { #! [rustc_dummy(evaluated_attr)] fn bar() {} }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}, {"sha": "dffbbf1494b9ae9d5ed9c1a04209e1f3369e0d74", "filename": "src/test/ui/proc-macro/derive-expand-order.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fderive-expand-order.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fderive-expand-order.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-expand-order.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,5 +1,5 @@\n-Derive First: #[derive(Second)] #[derive(Third, Fourth)] #[derive(Fifth)] pub struct Foo { }\n-Derive Second: #[derive(Third, Fourth)] #[derive(Fifth)] pub struct Foo { }\n-Derive Third: #[derive(Fifth)] pub struct Foo { }\n-Derive Fourth: #[derive(Fifth)] pub struct Foo { }\n-Derive Fifth: pub struct Foo { }\n+Derive First: #[derive(Second)] #[derive(Third, Fourth)] #[derive(Fifth)] pub struct Foo {}\n+Derive Second: #[derive(Third, Fourth)] #[derive(Fifth)] pub struct Foo {}\n+Derive Third: #[derive(Fifth)] pub struct Foo {}\n+Derive Fourth: #[derive(Fifth)] pub struct Foo {}\n+Derive Fifth: pub struct Foo {}"}, {"sha": "686d53e8876608a322b87badfbd6f4cd5b0b580f", "filename": "src/test/ui/proc-macro/expr-stmt-nonterminal-tokens.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -202,7 +202,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         span: #8 bytes(430..483),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { { } } ; 0 }, }\n+PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { {} } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\","}, {"sha": "eaa8882d6a6cb6d60365cba92c941b67791ce09c", "filename": "src/test/ui/proc-macro/inner-attrs.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -269,7 +269,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:20:30: 20:36 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): fn foo() { }\n+PRINT-ATTR INPUT (DISPLAY): fn foo() {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\",\n@@ -552,7 +552,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:27:30: 27:40 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): mod inline_mod { }\n+PRINT-ATTR INPUT (DISPLAY): mod inline_mod {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"mod\",\n@@ -933,7 +933,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/inner-attrs.rs:82:42: 82:47 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): fn weird_extern() { }\n+PRINT-ATTR INPUT (DISPLAY): fn weird_extern() {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\","}, {"sha": "44baa37577cfa25facbf015750f4abe8520638ae", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -53,7 +53,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: #4 bytes(432..433),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): struct A { }\n+PRINT-DERIVE INPUT (DISPLAY): struct A {}\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "0fda6654ff37051f9a4c3c18d72256ee430fb547", "filename": "src/test/ui/proc-macro/issue-75734-pp-paren.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): fn main() { & | _ : u8 | { } ; mul_2! (1 + 1) ; }\n+PRINT-ATTR INPUT (DISPLAY): fn main() { & | _ : u8 | {} ; mul_2! (1 + 1) ; }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\","}, {"sha": "fdd178a52292f5d27df6d410295c6b3e54e5b5f4", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -8,8 +8,8 @@ struct Foo < #[cfg(FALSE)] A, B >\n          #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n          #[cfg(FALSE)] let a = 25 ; match true\n          {\n-             #[cfg(FALSE)] true => { },\n-             #[cfg_attr(not(FALSE), allow(warnings))] false => { }, _ => { }\n+             #[cfg(FALSE)] true => {},\n+             #[cfg_attr(not(FALSE), allow(warnings))] false => {}, _ => {}\n          } ; #[print_helper(should_be_removed)] fn removed_fn()\n          { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn\n          kept_fn() { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n@@ -1278,7 +1278,7 @@ PRINT-DERIVE INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[print_hel\n     [u8 ;\n      {\n          #[cfg(not(FALSE))] struct Inner ; match true\n-         { #[allow(warnings)] false => { }, _ => { } } ; #[print_helper(c)]\n+         { #[allow(warnings)] false => {}, _ => {} } ; #[print_helper(c)]\n          #[cfg(not(FALSE))] fn kept_fn()\n          { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n          { Foo(#[cfg(not(FALSE))] i32, u8) } struct"}, {"sha": "3c001e9954b5e440eed0175e791d2761e01cc2ad", "filename": "src/test/ui/proc-macro/issue-81007-item-attrs.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81007-item-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81007-item-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81007-item-attrs.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): #[doc = r\" A doc comment\"] struct Foo { }\n+PRINT-ATTR INPUT (DISPLAY): #[doc = r\" A doc comment\"] struct Foo {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n@@ -40,7 +40,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/issue-81007-item-attrs.rs:22:16: 22:18 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[doc = r\" Another comment comment\"] struct Bar { }\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] #[doc = r\" Another comment comment\"] struct Bar {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',"}, {"sha": "68f30c23a8d284c57cea13612137d995dbcdb154", "filename": "src/test/ui/proc-macro/nested-macro-rules.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -11,7 +11,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         span: $DIR/auxiliary/nested-macro-rules.rs:9:30: 9:35 (#6),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct FirstAttrStruct { }\n+PRINT-ATTR INPUT (DISPLAY): struct FirstAttrStruct {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -46,7 +46,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         span: $DIR/auxiliary/nested-macro-rules.rs:9:30: 9:35 (#15),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct SecondAttrStruct { }\n+PRINT-ATTR INPUT (DISPLAY): struct SecondAttrStruct {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "c08e5308138c966deb834cceb151ad98e058099f", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -64,7 +64,7 @@ macro inner /* 0#4 */ { () => { print_bang! { struct S; } } }\n struct S /* 0#5 */;\n // OK, not a duplicate definition of `S`\n \n-fn main /* 0#0 */() { }\n+fn main /* 0#0 */() {}\n \n /*\n Expansions:"}, {"sha": "b90057cd6d5201819b7a03a231e5427ad18b385a", "filename": "src/test/ui/proc-macro/trailing-plus.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Ftrailing-plus.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Ftrailing-plus.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Ftrailing-plus.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): fn foo < T > () where T : Copy + { }\n+PRINT-ATTR INPUT (DISPLAY): fn foo < T > () where T : Copy + {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"fn\","}, {"sha": "9bf5622173458b22660df683ba00d4fdf65ecd7d", "filename": "src/test/ui/proc-macro/weird-braces.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -445,7 +445,7 @@ PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n         span: $DIR/weird-braces.rs:20:30: 20:42 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } > { }\n+PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } > {}\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}, {"sha": "aaf3993538acf1c7fecd52ab8d6ba76c76a0e79e", "filename": "src/test/ui/repr/issue-83921-pretty.pretty.stdout", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -13,7 +13,6 @@ extern crate std;\n // [pretty]compile-flags: -Zunpretty=everybody_loops\n // [pretty]check-pass\n #[repr(\"C\")]\n-struct A {\n-}\n+struct A {}\n \n-fn main() { loop { } }\n+fn main() { loop {} }"}, {"sha": "6052ea95d0f85fe37666e2688ad1082b5f0ecb44", "filename": "src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-pretty-check.stdout?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -7,4 +7,4 @@ extern crate std;\n // build-pass (FIXME(62277): could be check-pass?)\n // compile-flags: -Z unpretty=expanded\n \n-fn main() { if let 0 = 1 { } }\n+fn main() { if let 0 = 1 {} }"}, {"sha": "8800d3e66f9e42909fba8c00c93f17eafbb6d944", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f8f746fc046a025d1b8c464ce28f6b828f32e9/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=a8f8f746fc046a025d1b8c464ce28f6b828f32e9", "patch": "@@ -18,14 +18,14 @@ macro_rules! checker {\n }\n \n checker!(attr_extern, r#\"extern \"C\" { fn ffi(#[a1] arg1 : i32, #[a2] ...) ; }\"#);\n-checker!(attr_extern_cvar, r#\"unsafe extern \"C\" fn cvar(arg1 : i32, #[a1] mut args : ...) { }\"#);\n+checker!(attr_extern_cvar, r#\"unsafe extern \"C\" fn cvar(arg1 : i32, #[a1] mut args : ...) {}\"#);\n checker!(attr_alias, \"type Alias = fn(#[a1] u8, #[a2] ...) ;\");\n checker!(attr_free, \"fn free(#[a1] arg1 : u8) { let lam = | #[a2] W(x), #[a3] y | () ; }\");\n-checker!(attr_inherent_1, \"fn inherent1(#[a1] self, #[a2] arg1 : u8) { }\");\n-checker!(attr_inherent_2, \"fn inherent2(#[a1] & self, #[a2] arg1 : u8) { }\");\n-checker!(attr_inherent_3, \"fn inherent3 < 'a > (#[a1] & 'a mut self, #[a2] arg1 : u8) { }\");\n-checker!(attr_inherent_4, \"fn inherent4 < 'a > (#[a1] self : Box < Self >, #[a2] arg1 : u8) { }\");\n-checker!(attr_inherent_issue_64682, \"fn inherent5(#[a1] #[a2] arg1 : u8, #[a3] arg2 : u8) { }\");\n+checker!(attr_inherent_1, \"fn inherent1(#[a1] self, #[a2] arg1 : u8) {}\");\n+checker!(attr_inherent_2, \"fn inherent2(#[a1] & self, #[a2] arg1 : u8) {}\");\n+checker!(attr_inherent_3, \"fn inherent3 < 'a > (#[a1] & 'a mut self, #[a2] arg1 : u8) {}\");\n+checker!(attr_inherent_4, \"fn inherent4 < 'a > (#[a1] self : Box < Self >, #[a2] arg1 : u8) {}\");\n+checker!(attr_inherent_issue_64682, \"fn inherent5(#[a1] #[a2] arg1 : u8, #[a3] arg2 : u8) {}\");\n checker!(attr_trait_1, \"fn trait1(#[a1] self, #[a2] arg1 : u8) ;\");\n checker!(attr_trait_2, \"fn trait2(#[a1] & self, #[a2] arg1 : u8) ;\");\n checker!(attr_trait_3, \"fn trait3 < 'a > (#[a1] & 'a mut self, #[a2] arg1 : u8) ;\");\n@@ -35,9 +35,9 @@ checker!(attr_trait_issue_64682, \"fn trait5(#[a1] #[a2] arg1 : u8, #[a3] arg2 :\n checker!(rename_params, r#\"impl Foo\n {\n     fn hello(#[angery(true)] a : i32, #[a2] b : i32, #[what = \"how\"] c : u32)\n-    { } fn\n+    {} fn\n     hello2(#[a1] #[a2] a : i32, #[what = \"how\"] b : i32, #[angery(true)] c :\n-           u32) { } fn\n+           u32) {} fn\n     hello_self(#[a1] #[a2] & self, #[a1] #[a2] a : i32, #[what = \"how\"] b :\n-               i32, #[angery(true)] c : u32) { }\n+               i32, #[angery(true)] c : u32) {}\n }\"#);"}]}