{"sha": "8943c2cb9766f6b2d31900c8f6e878488b344e23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NDNjMmNiOTc2NmY2YjJkMzE5MDBjOGY2ZTg3ODQ4OGIzNDRlMjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-01T16:35:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-01T16:35:16Z"}, "message": "Merge #5178\n\n5178: Fold multiline calls r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a83a139eeedbe374d49e61c7c5539216fa46d654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a83a139eeedbe374d49e61c7c5539216fa46d654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8943c2cb9766f6b2d31900c8f6e878488b344e23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/LtECRBK7hj4Ov3rIwAAdHIIAII3db5zGVTDCNckGubTzq2S\n8GzA3IE7OO0OUjvYKe67nKSIEUnjA3jT06zLb538XaOu9Fed9vnxrHMyio6/XBC2\nzJuj+9e/OI4pW6dAsfn8N3gnZl/eUUTuvVBFkVYWjzZprACp/AY1Xv/+tA2c/0g9\nGl/s+vRfaO1r/E3/Kfx59SN6EfCeTv/2fAhLxrwi0ueSNfSRlTGYHzFiHoWA0zcR\n+hZA7uVzxE7LWhSm6mQQTCt5Uo+z0+7B0sDhVpXP1Zxea+4JbFVAJH1I47jYn9sB\nQGDO9uoeqZm4w//ESfI2z3B2wadX6fhpkOCV4I9KDbGlAH1UX6+G79Qp9XfNRQo=\n=hJsg\n-----END PGP SIGNATURE-----\n", "payload": "tree a83a139eeedbe374d49e61c7c5539216fa46d654\nparent 87d24e7caa13ca73d699550a5989b75215c1a41c\nparent 8295dc42a0fc9e8641606f75a5ba2a46fe48379c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593621316 +0000\ncommitter GitHub <noreply@github.com> 1593621316 +0000\n\nMerge #5178\n\n5178: Fold multiline calls r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8943c2cb9766f6b2d31900c8f6e878488b344e23", "html_url": "https://github.com/rust-lang/rust/commit/8943c2cb9766f6b2d31900c8f6e878488b344e23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8943c2cb9766f6b2d31900c8f6e878488b344e23/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87d24e7caa13ca73d699550a5989b75215c1a41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/87d24e7caa13ca73d699550a5989b75215c1a41c", "html_url": "https://github.com/rust-lang/rust/commit/87d24e7caa13ca73d699550a5989b75215c1a41c"}, {"sha": "8295dc42a0fc9e8641606f75a5ba2a46fe48379c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8295dc42a0fc9e8641606f75a5ba2a46fe48379c", "html_url": "https://github.com/rust-lang/rust/commit/8295dc42a0fc9e8641606f75a5ba2a46fe48379c"}], "stats": {"total": 647, "additions": 329, "deletions": 318}, "files": [{"sha": "c22a5d17b34b7ad0eb3670d6bb56632bf1aca4b0", "filename": "crates/ra_ide/src/display/structure.rs", "status": "modified", "additions": 215, "deletions": 213, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs?ref=8943c2cb9766f6b2d31900c8f6e878488b344e23", "patch": "@@ -173,12 +173,19 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n \n #[cfg(test)]\n mod tests {\n+    use expect::{expect, Expect};\n+\n     use super::*;\n-    use insta::assert_debug_snapshot;\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let file = SourceFile::parse(ra_fixture).ok().unwrap();\n+        let structure = file_structure(&file);\n+        expect.assert_debug_eq(&structure)\n+    }\n \n     #[test]\n     fn test_file_structure() {\n-        let file = SourceFile::parse(\n+        check(\n             r#\"\n struct Foo {\n     x: i32\n@@ -223,216 +230,211 @@ fn obsolete() {}\n #[deprecated(note = \"for awhile\")]\n fn very_obsolete() {}\n \"#,\n-        )\n-        .ok()\n-        .unwrap();\n-        let structure = file_structure(&file);\n-        assert_debug_snapshot!(structure,\n-        @r###\"\n-        [\n-            StructureNode {\n-                parent: None,\n-                label: \"Foo\",\n-                navigation_range: 8..11,\n-                node_range: 1..26,\n-                kind: STRUCT_DEF,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: Some(\n-                    0,\n-                ),\n-                label: \"x\",\n-                navigation_range: 18..19,\n-                node_range: 18..24,\n-                kind: RECORD_FIELD_DEF,\n-                detail: Some(\n-                    \"i32\",\n-                ),\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"m\",\n-                navigation_range: 32..33,\n-                node_range: 28..158,\n-                kind: MODULE,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: Some(\n-                    2,\n-                ),\n-                label: \"bar1\",\n-                navigation_range: 43..47,\n-                node_range: 40..52,\n-                kind: FN_DEF,\n-                detail: Some(\n-                    \"fn()\",\n-                ),\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: Some(\n-                    2,\n-                ),\n-                label: \"bar2\",\n-                navigation_range: 60..64,\n-                node_range: 57..81,\n-                kind: FN_DEF,\n-                detail: Some(\n-                    \"fn<T>(t: T) -> T\",\n-                ),\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: Some(\n-                    2,\n-                ),\n-                label: \"bar3\",\n-                navigation_range: 89..93,\n-                node_range: 86..156,\n-                kind: FN_DEF,\n-                detail: Some(\n-                    \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n-                ),\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"E\",\n-                navigation_range: 165..166,\n-                node_range: 160..180,\n-                kind: ENUM_DEF,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: Some(\n-                    6,\n-                ),\n-                label: \"X\",\n-                navigation_range: 169..170,\n-                node_range: 169..170,\n-                kind: ENUM_VARIANT,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: Some(\n-                    6,\n-                ),\n-                label: \"Y\",\n-                navigation_range: 172..173,\n-                node_range: 172..178,\n-                kind: ENUM_VARIANT,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"T\",\n-                navigation_range: 186..187,\n-                node_range: 181..193,\n-                kind: TYPE_ALIAS_DEF,\n-                detail: Some(\n-                    \"()\",\n-                ),\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"S\",\n-                navigation_range: 201..202,\n-                node_range: 194..213,\n-                kind: STATIC_DEF,\n-                detail: Some(\n-                    \"i32\",\n-                ),\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"C\",\n-                navigation_range: 220..221,\n-                node_range: 214..232,\n-                kind: CONST_DEF,\n-                detail: Some(\n-                    \"i32\",\n-                ),\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"impl E\",\n-                navigation_range: 239..240,\n-                node_range: 234..243,\n-                kind: IMPL_DEF,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"impl fmt::Debug for E\",\n-                navigation_range: 265..266,\n-                node_range: 245..269,\n-                kind: IMPL_DEF,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"mc\",\n-                navigation_range: 284..286,\n-                node_range: 271..303,\n-                kind: MACRO_CALL,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"mcexp\",\n-                navigation_range: 334..339,\n-                node_range: 305..356,\n-                kind: MACRO_CALL,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"mcexp\",\n-                navigation_range: 387..392,\n-                node_range: 358..409,\n-                kind: MACRO_CALL,\n-                detail: None,\n-                deprecated: false,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"obsolete\",\n-                navigation_range: 428..436,\n-                node_range: 411..441,\n-                kind: FN_DEF,\n-                detail: Some(\n-                    \"fn()\",\n-                ),\n-                deprecated: true,\n-            },\n-            StructureNode {\n-                parent: None,\n-                label: \"very_obsolete\",\n-                navigation_range: 481..494,\n-                node_range: 443..499,\n-                kind: FN_DEF,\n-                detail: Some(\n-                    \"fn()\",\n-                ),\n-                deprecated: true,\n-            },\n-        ]\n-        \"###\n-                );\n+            expect![[r#\"\n+                [\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"Foo\",\n+                        navigation_range: 8..11,\n+                        node_range: 1..26,\n+                        kind: STRUCT_DEF,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            0,\n+                        ),\n+                        label: \"x\",\n+                        navigation_range: 18..19,\n+                        node_range: 18..24,\n+                        kind: RECORD_FIELD_DEF,\n+                        detail: Some(\n+                            \"i32\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"m\",\n+                        navigation_range: 32..33,\n+                        node_range: 28..158,\n+                        kind: MODULE,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            2,\n+                        ),\n+                        label: \"bar1\",\n+                        navigation_range: 43..47,\n+                        node_range: 40..52,\n+                        kind: FN_DEF,\n+                        detail: Some(\n+                            \"fn()\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            2,\n+                        ),\n+                        label: \"bar2\",\n+                        navigation_range: 60..64,\n+                        node_range: 57..81,\n+                        kind: FN_DEF,\n+                        detail: Some(\n+                            \"fn<T>(t: T) -> T\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            2,\n+                        ),\n+                        label: \"bar3\",\n+                        navigation_range: 89..93,\n+                        node_range: 86..156,\n+                        kind: FN_DEF,\n+                        detail: Some(\n+                            \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"E\",\n+                        navigation_range: 165..166,\n+                        node_range: 160..180,\n+                        kind: ENUM_DEF,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            6,\n+                        ),\n+                        label: \"X\",\n+                        navigation_range: 169..170,\n+                        node_range: 169..170,\n+                        kind: ENUM_VARIANT,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            6,\n+                        ),\n+                        label: \"Y\",\n+                        navigation_range: 172..173,\n+                        node_range: 172..178,\n+                        kind: ENUM_VARIANT,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"T\",\n+                        navigation_range: 186..187,\n+                        node_range: 181..193,\n+                        kind: TYPE_ALIAS_DEF,\n+                        detail: Some(\n+                            \"()\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"S\",\n+                        navigation_range: 201..202,\n+                        node_range: 194..213,\n+                        kind: STATIC_DEF,\n+                        detail: Some(\n+                            \"i32\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"C\",\n+                        navigation_range: 220..221,\n+                        node_range: 214..232,\n+                        kind: CONST_DEF,\n+                        detail: Some(\n+                            \"i32\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"impl E\",\n+                        navigation_range: 239..240,\n+                        node_range: 234..243,\n+                        kind: IMPL_DEF,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"impl fmt::Debug for E\",\n+                        navigation_range: 265..266,\n+                        node_range: 245..269,\n+                        kind: IMPL_DEF,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"mc\",\n+                        navigation_range: 284..286,\n+                        node_range: 271..303,\n+                        kind: MACRO_CALL,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"mcexp\",\n+                        navigation_range: 334..339,\n+                        node_range: 305..356,\n+                        kind: MACRO_CALL,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"mcexp\",\n+                        navigation_range: 387..392,\n+                        node_range: 358..409,\n+                        kind: MACRO_CALL,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"obsolete\",\n+                        navigation_range: 428..436,\n+                        node_range: 411..441,\n+                        kind: FN_DEF,\n+                        detail: Some(\n+                            \"fn()\",\n+                        ),\n+                        deprecated: true,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"very_obsolete\",\n+                        navigation_range: 481..494,\n+                        node_range: 443..499,\n+                        kind: FN_DEF,\n+                        detail: Some(\n+                            \"fn()\",\n+                        ),\n+                        deprecated: true,\n+                    },\n+                ]\n+            \"#]],\n+        );\n     }\n }"}, {"sha": "5cec689f8bad11f12a632265f82f079ee7d8e9d3", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 81, "deletions": 80, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=8943c2cb9766f6b2d31900c8f6e878488b344e23", "patch": "@@ -15,6 +15,7 @@ pub enum FoldKind {\n     Imports,\n     Mods,\n     Block,\n+    ArgList,\n }\n \n #[derive(Debug)]\n@@ -83,6 +84,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n         COMMENT => Some(FoldKind::Comment),\n         USE_ITEM => Some(FoldKind::Imports),\n+        ARG_LIST => Some(FoldKind::ArgList),\n         RECORD_FIELD_DEF_LIST\n         | RECORD_FIELD_PAT_LIST\n         | ITEM_LIST\n@@ -196,180 +198,179 @@ fn contiguous_range_for_comment(\n \n #[cfg(test)]\n mod tests {\n+    use test_utils::extract_tags;\n+\n     use super::*;\n-    use test_utils::extract_ranges;\n \n-    fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n-        let (ranges, text) = extract_ranges(text, \"fold\");\n+    fn check(ra_fixture: &str) {\n+        let (ranges, text) = extract_tags(ra_fixture, \"fold\");\n+\n         let parse = SourceFile::parse(&text);\n         let folds = folding_ranges(&parse.tree());\n-\n         assert_eq!(\n             folds.len(),\n             ranges.len(),\n             \"The amount of folds is different than the expected amount\"\n         );\n-        assert_eq!(\n-            folds.len(),\n-            fold_kinds.len(),\n-            \"The amount of fold kinds is different than the expected amount\"\n-        );\n-        for ((fold, range), fold_kind) in\n-            folds.iter().zip(ranges.into_iter()).zip(fold_kinds.iter())\n-        {\n+\n+        for (fold, (range, attr)) in folds.iter().zip(ranges.into_iter()) {\n             assert_eq!(fold.range.start(), range.start());\n             assert_eq!(fold.range.end(), range.end());\n-            assert_eq!(&fold.kind, fold_kind);\n+\n+            let kind = match fold.kind {\n+                FoldKind::Comment => \"comment\",\n+                FoldKind::Imports => \"imports\",\n+                FoldKind::Mods => \"mods\",\n+                FoldKind::Block => \"block\",\n+                FoldKind::ArgList => \"arglist\",\n+            };\n+            assert_eq!(kind, &attr.unwrap());\n         }\n     }\n \n     #[test]\n     fn test_fold_comments() {\n-        let text = r#\"\n-<fold>// Hello\n+        check(\n+            r#\"\n+<fold comment>// Hello\n // this is a multiline\n // comment\n //</fold>\n \n // But this is not\n \n-fn main() <fold>{\n-    <fold>// We should\n+fn main() <fold block>{\n+    <fold comment>// We should\n     // also\n     // fold\n     // this one.</fold>\n-    <fold>//! But this one is different\n+    <fold comment>//! But this one is different\n     //! because it has another flavor</fold>\n-    <fold>/* As does this\n+    <fold comment>/* As does this\n     multiline comment */</fold>\n-}</fold>\"#;\n-\n-        let fold_kinds = &[\n-            FoldKind::Comment,\n-            FoldKind::Block,\n-            FoldKind::Comment,\n-            FoldKind::Comment,\n-            FoldKind::Comment,\n-        ];\n-        do_check(text, fold_kinds);\n+}</fold>\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fold_imports() {\n-        let text = r#\"\n-<fold>use std::<fold>{\n+        check(\n+            r#\"\n+<fold imports>use std::<fold block>{\n     str,\n     vec,\n     io as iop\n }</fold>;</fold>\n \n-fn main() <fold>{\n-}</fold>\"#;\n-\n-        let folds = &[FoldKind::Imports, FoldKind::Block, FoldKind::Block];\n-        do_check(text, folds);\n+fn main() <fold block>{\n+}</fold>\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fold_mods() {\n-        let text = r#\"\n+        check(\n+            r#\"\n \n pub mod foo;\n-<fold>mod after_pub;\n+<fold mods>mod after_pub;\n mod after_pub_next;</fold>\n \n-<fold>mod before_pub;\n+<fold mods>mod before_pub;\n mod before_pub_next;</fold>\n pub mod bar;\n \n mod not_folding_single;\n pub mod foobar;\n pub not_folding_single_next;\n \n-<fold>#[cfg(test)]\n+<fold mods>#[cfg(test)]\n mod with_attribute;\n mod with_attribute_next;</fold>\n \n-fn main() <fold>{\n-}</fold>\"#;\n-\n-        let folds = &[FoldKind::Mods, FoldKind::Mods, FoldKind::Mods, FoldKind::Block];\n-        do_check(text, folds);\n+fn main() <fold block>{\n+}</fold>\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fold_import_groups() {\n-        let text = r#\"\n-<fold>use std::str;\n+        check(\n+            r#\"\n+<fold imports>use std::str;\n use std::vec;\n use std::io as iop;</fold>\n \n-<fold>use std::mem;\n+<fold imports>use std::mem;\n use std::f64;</fold>\n \n use std::collections::HashMap;\n // Some random comment\n use std::collections::VecDeque;\n \n-fn main() <fold>{\n-}</fold>\"#;\n-\n-        let folds = &[FoldKind::Imports, FoldKind::Imports, FoldKind::Block];\n-        do_check(text, folds);\n+fn main() <fold block>{\n+}</fold>\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fold_import_and_groups() {\n-        let text = r#\"\n-<fold>use std::str;\n+        check(\n+            r#\"\n+<fold imports>use std::str;\n use std::vec;\n use std::io as iop;</fold>\n \n-<fold>use std::mem;\n+<fold imports>use std::mem;\n use std::f64;</fold>\n \n-<fold>use std::collections::<fold>{\n+<fold imports>use std::collections::<fold block>{\n     HashMap,\n     VecDeque,\n }</fold>;</fold>\n // Some random comment\n \n-fn main() <fold>{\n-}</fold>\"#;\n-\n-        let folds = &[\n-            FoldKind::Imports,\n-            FoldKind::Imports,\n-            FoldKind::Imports,\n-            FoldKind::Block,\n-            FoldKind::Block,\n-        ];\n-        do_check(text, folds);\n+fn main() <fold block>{\n+}</fold>\"#,\n+        );\n     }\n \n     #[test]\n     fn test_folds_macros() {\n-        let text = r#\"\n-macro_rules! foo <fold>{\n+        check(\n+            r#\"\n+macro_rules! foo <fold block>{\n     ($($tt:tt)*) => { $($tt)* }\n }</fold>\n-\"#;\n-\n-        let folds = &[FoldKind::Block];\n-        do_check(text, folds);\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_fold_match_arms() {\n-        let text = r#\"\n-fn main() <fold>{\n-    match 0 <fold>{\n+        check(\n+            r#\"\n+fn main() <fold block>{\n+    match 0 <fold block>{\n         0 => 0,\n         _ => 1,\n     }</fold>\n-}</fold>\"#;\n+}</fold>\"#,\n+        );\n+    }\n \n-        let folds = &[FoldKind::Block, FoldKind::Block];\n-        do_check(text, folds);\n+    #[test]\n+    fn fold_big_calls() {\n+        check(\n+            r#\"\n+fn main() <fold block>{\n+    frobnicate<fold arglist>(\n+        1,\n+        2,\n+        3,\n+    )</fold>\n+}</fold>\n+        \"#,\n+        )\n     }\n }"}, {"sha": "95dd8e408d0d8ec41eb38a257dffa0f1c1c05f7f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=8943c2cb9766f6b2d31900c8f6e878488b344e23", "patch": "@@ -352,7 +352,7 @@ pub(crate) fn folding_range(\n     let kind = match fold.kind {\n         FoldKind::Comment => Some(lsp_types::FoldingRangeKind::Comment),\n         FoldKind::Imports => Some(lsp_types::FoldingRangeKind::Imports),\n-        FoldKind::Mods | FoldKind::Block => None,\n+        FoldKind::Mods | FoldKind::Block | FoldKind::ArgList => None,\n     };\n \n     let range = range(line_index, fold.range);\n@@ -685,32 +685,27 @@ pub(crate) fn runnable(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::extract_ranges;\n+    use ra_ide::Analysis;\n \n     use super::*;\n \n     #[test]\n     fn conv_fold_line_folding_only_fixup() {\n-        let text = r#\"<fold>mod a;\n+        let text = r#\"mod a;\n mod b;\n-mod c;</fold>\n+mod c;\n \n-fn main() <fold>{\n-    if cond <fold>{\n+fn main() {\n+    if cond {\n         a::do_a();\n-    }</fold> else <fold>{\n+    } else {\n         b::do_b();\n-    }</fold>\n-}</fold>\"#;\n-\n-        let (ranges, text) = extract_ranges(text, \"fold\");\n-        assert_eq!(ranges.len(), 4);\n-        let folds = vec![\n-            Fold { range: ranges[0], kind: FoldKind::Mods },\n-            Fold { range: ranges[1], kind: FoldKind::Block },\n-            Fold { range: ranges[2], kind: FoldKind::Block },\n-            Fold { range: ranges[3], kind: FoldKind::Block },\n-        ];\n+    }\n+}\"#;\n+\n+        let (analysis, file_id) = Analysis::from_single_file(text.to_string());\n+        let folds = analysis.folding_ranges(file_id).unwrap();\n+        assert_eq!(folds.len(), 4);\n \n         let line_index = LineIndex::new(&text);\n         let converted: Vec<lsp_types::FoldingRange> ="}, {"sha": "e4aa894ace3ec49686de0d0c59b78fe5fe265bb9", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8943c2cb9766f6b2d31900c8f6e878488b344e23/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=8943c2cb9766f6b2d31900c8f6e878488b344e23", "patch": "@@ -118,8 +118,8 @@ pub fn extract_range_or_offset(text: &str) -> (RangeOrOffset, String) {\n }\n \n /// Extracts ranges, marked with `<tag> </tag>` pairs from the `text`\n-pub fn extract_ranges(mut text: &str, tag: &str) -> (Vec<TextRange>, String) {\n-    let open = format!(\"<{}>\", tag);\n+pub fn extract_tags(mut text: &str, tag: &str) -> (Vec<(TextRange, Option<String>)>, String) {\n+    let open = format!(\"<{}\", tag);\n     let close = format!(\"</{}>\", tag);\n     let mut ranges = Vec::new();\n     let mut res = String::new();\n@@ -134,22 +134,35 @@ pub fn extract_ranges(mut text: &str, tag: &str) -> (Vec<TextRange>, String) {\n                 res.push_str(&text[..i]);\n                 text = &text[i..];\n                 if text.starts_with(&open) {\n-                    text = &text[open.len()..];\n+                    let close_open = text.find('>').unwrap();\n+                    let attr = text[open.len()..close_open].trim();\n+                    let attr = if attr.is_empty() { None } else { Some(attr.to_string()) };\n+                    text = &text[close_open + '>'.len_utf8()..];\n                     let from = TextSize::of(&res);\n-                    stack.push(from);\n+                    stack.push((from, attr));\n                 } else if text.starts_with(&close) {\n                     text = &text[close.len()..];\n-                    let from = stack.pop().unwrap_or_else(|| panic!(\"unmatched </{}>\", tag));\n+                    let (from, attr) =\n+                        stack.pop().unwrap_or_else(|| panic!(\"unmatched </{}>\", tag));\n                     let to = TextSize::of(&res);\n-                    ranges.push(TextRange::new(from, to));\n+                    ranges.push((TextRange::new(from, to), attr));\n+                } else {\n+                    res.push('<');\n+                    text = &text['<'.len_utf8()..];\n                 }\n             }\n         }\n     }\n     assert!(stack.is_empty(), \"unmatched <{}>\", tag);\n-    ranges.sort_by_key(|r| (r.start(), r.end()));\n+    ranges.sort_by_key(|r| (r.0.start(), r.0.end()));\n     (ranges, res)\n }\n+#[test]\n+fn test_extract_tags() {\n+    let (tags, text) = extract_tags(r#\"<tag fn>fn <tag>main</tag>() {}</tag>\"#, \"tag\");\n+    let actual = tags.into_iter().map(|(range, attr)| (&text[range], attr)).collect::<Vec<_>>();\n+    assert_eq!(actual, vec![(\"fn main() {}\", Some(\"fn\".into())), (\"main\", None),]);\n+}\n \n /// Inserts `<|>` marker into the `text` at `offset`.\n pub fn add_cursor(text: &str, offset: TextSize) -> String {"}]}