{"sha": "4533be947b011c9bde4871ae93e6553b24cc5ec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MzNiZTk0N2IwMTFjOWJkZTQ4NzFhZTkzZTY1NTNiMjRjYzVlYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T22:06:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T22:06:51Z"}, "message": "Auto merge of #87569 - JohnTitor:rollup-7ydfetw, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #81050 (Stabilize core::task::ready!)\n - #81363 (Remove P: Unpin bound on impl Future for Pin)\n - #86839 (Add doc aliases to fs.rs)\n - #87435 (fix example code for E0617)\n - #87451 (Add support for tuple struct field documentation)\n - #87491 (Integrate context into the memorial to Anna)\n - #87521 (Add long explanation for E0498)\n - #87527 (Don't run MIR unsafeck at all when using `-Zthir-unsafeck`)\n - #87550 (Add `CI_ONLY_WHEN_CHANNEL` and run `x86_64-gnu-stable` only on nightly)\n - #87565 (Use backticks when referring to `core::future::Ready` in panic message)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d1bd663bae749b9558279f77063a36e0a7c47686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1bd663bae749b9558279f77063a36e0a7c47686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4533be947b011c9bde4871ae93e6553b24cc5ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4533be947b011c9bde4871ae93e6553b24cc5ec6", "html_url": "https://github.com/rust-lang/rust/commit/4533be947b011c9bde4871ae93e6553b24cc5ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4533be947b011c9bde4871ae93e6553b24cc5ec6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70888601af92f6cdc0364abab3446e418b91d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70888601af92f6cdc0364abab3446e418b91d36", "html_url": "https://github.com/rust-lang/rust/commit/b70888601af92f6cdc0364abab3446e418b91d36"}, {"sha": "6c4888a74ec6b3b6dafa9f5ca0ce82628455e423", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4888a74ec6b3b6dafa9f5ca0ce82628455e423", "html_url": "https://github.com/rust-lang/rust/commit/6c4888a74ec6b3b6dafa9f5ca0ce82628455e423"}], "stats": {"total": 271, "additions": 202, "deletions": 69}, "files": [{"sha": "fe67a14c0fe456fc761a0a5de8869239e833c94c", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -263,6 +263,7 @@ jobs:\n             env:\n               IMAGE: x86_64-gnu\n               RUST_CI_OVERRIDE_RELEASE_CHANNEL: stable\n+              CI_ONLY_WHEN_CHANNEL: nightly\n             os: ubuntu-latest-xl\n           - name: x86_64-gnu-aux\n             os: ubuntu-latest-xl"}, {"sha": "65999ba707c857a21650ea482719fc992afebe5e", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -248,6 +248,7 @@ E0493: include_str!(\"./error_codes/E0493.md\"),\n E0495: include_str!(\"./error_codes/E0495.md\"),\n E0496: include_str!(\"./error_codes/E0496.md\"),\n E0497: include_str!(\"./error_codes/E0497.md\"),\n+E0498: include_str!(\"./error_codes/E0498.md\"),\n E0499: include_str!(\"./error_codes/E0499.md\"),\n E0500: include_str!(\"./error_codes/E0500.md\"),\n E0501: include_str!(\"./error_codes/E0501.md\"),\n@@ -604,7 +605,6 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n //  E0488, // lifetime of variable does not enclose its declaration\n //  E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n-    E0498,  // malformed plugin attribute\n     E0514, // metadata version mismatch\n     E0519, // local crate and dependency have same (crate-name, disambiguator)\n     // two dependencies have same (crate-name, disambiguator) but different SVH"}, {"sha": "c9ea4a7947f6ca2cd630599516c020c949207f6a", "filename": "compiler/rustc_error_codes/src/error_codes/E0498.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0498.md", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0498.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0498.md?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -0,0 +1,22 @@\n+The `plugin` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0498\n+#![feature(plugin)]\n+#![plugin(foo(args))] // error: invalid argument\n+#![plugin(bar=\"test\")] // error: invalid argument\n+```\n+\n+The `#[plugin]` attribute should take a single argument: the name of the plugin.\n+\n+For example, for the plugin `foo`:\n+\n+```ignore (requires external plugin crate)\n+#![feature(plugin)]\n+#![plugin(foo)] // ok!\n+```\n+\n+See the [`plugin` feature] section of the Unstable book for more details.\n+\n+[`plugin` feature]: https://doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html"}, {"sha": "eed384b4959466b7af28b47b94c189bf686dd875", "filename": "compiler/rustc_error_codes/src/error_codes/E0617.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0617.md", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0617.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0617.md?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -3,12 +3,13 @@ Attempted to pass an invalid type of variable into a variadic function.\n Erroneous code example:\n \n ```compile_fail,E0617\n+# use std::os::raw::{c_char, c_int};\n extern \"C\" {\n-    fn printf(c: *const i8, ...);\n+    fn printf(format: *const c_char, ...) -> c_int;\n }\n \n unsafe {\n-    printf(::std::ptr::null(), 0f32);\n+    printf(\"%f\\n\\0\".as_ptr() as _, 0f32);\n     // error: cannot pass an `f32` to variadic function, cast to `c_double`\n }\n ```\n@@ -21,10 +22,12 @@ to import from `std::os::raw`).\n In this case, `c_double` has the same size as `f64` so we can use it directly:\n \n ```no_run\n+# use std::os::raw::{c_char, c_int};\n # extern \"C\" {\n-#     fn printf(c: *const i8, ...);\n+#     fn printf(format: *const c_char, ...) -> c_int;\n # }\n+\n unsafe {\n-    printf(::std::ptr::null(), 0f64); // ok!\n+    printf(\"%f\\n\\0\".as_ptr() as _, 0f64); // ok!\n }\n ```"}, {"sha": "e58a7d903082ee2ee45735811890dd5ab04c3434", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -259,10 +259,12 @@ fn mir_const<'tcx>(\n     }\n \n     // Unsafety check uses the raw mir, so make sure it is run.\n-    if let Some(param_did) = def.const_param_did {\n-        tcx.ensure().unsafety_check_result_for_const_arg((def.did, param_did));\n-    } else {\n-        tcx.ensure().unsafety_check_result(def.did);\n+    if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n+        if let Some(param_did) = def.const_param_did {\n+            tcx.ensure().unsafety_check_result_for_const_arg((def.did, param_did));\n+        } else {\n+            tcx.ensure().unsafety_check_result(def.did);\n+        }\n     }\n \n     let mut body = tcx.mir_built(def).steal();"}, {"sha": "7cd0ce9d2efe0fab67dfeedc8a405effffd04ba4", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -111,11 +111,11 @@ impl<F: ?Sized + Future + Unpin> Future for &mut F {\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<P> Future for Pin<P>\n where\n-    P: Unpin + ops::DerefMut<Target: Future>,\n+    P: ops::DerefMut<Target: Future>,\n {\n     type Output = <<P as ops::Deref>::Target as Future>::Output;\n \n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-        Pin::get_mut(self).as_mut().poll(cx)\n+        <P::Target as Future>::poll(self.as_deref_mut(), cx)\n     }\n }"}, {"sha": "cc905d288f9e0111ef9940c8e4e55f90a76438d9", "filename": "library/core/src/future/ready.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -20,7 +20,7 @@ impl<T> Future for Ready<T> {\n \n     #[inline]\n     fn poll(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<T> {\n-        Poll::Ready(self.0.take().expect(\"Ready polled after completion\"))\n+        Poll::Ready(self.0.take().expect(\"`Ready` polled after completion\"))\n     }\n }\n "}, {"sha": "f7d48a91396fff38c181ad5aab9c13cef299d371", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -128,6 +128,7 @@\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(auto_traits)]\n+#![feature(pin_deref_mut)]\n #![feature(prelude_import)]\n #![feature(ptr_metadata)]\n #![feature(repr_simd, platform_intrinsics)]"}, {"sha": "6b1a12ed18c0fa6351adbd70a1106dfb8420fde0", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -802,6 +802,44 @@ impl<T: ?Sized> Pin<&'static T> {\n     }\n }\n \n+impl<'a, P: DerefMut> Pin<&'a mut Pin<P>> {\n+    /// Gets a pinned mutable reference from this nested pinned pointer.\n+    ///\n+    /// This is a generic method to go from `Pin<&mut Pin<Pointer<T>>>` to `Pin<&mut T>`. It is\n+    /// safe because the existence of a `Pin<Pointer<T>>` ensures that the pointee, `T`, cannot\n+    /// move in the future, and this method does not enable the pointee to move. \"Malicious\"\n+    /// implementations of `P::DerefMut` are likewise ruled out by the contract of\n+    /// `Pin::new_unchecked`.\n+    #[unstable(feature = \"pin_deref_mut\", issue = \"86918\")]\n+    #[inline(always)]\n+    pub fn as_deref_mut(self) -> Pin<&'a mut P::Target> {\n+        // SAFETY: What we're asserting here is that going from\n+        //\n+        //     Pin<&mut Pin<P>>\n+        //\n+        // to\n+        //\n+        //     Pin<&mut P::Target>\n+        //\n+        // is safe.\n+        //\n+        // We need to ensure that two things hold for that to be the case:\n+        //\n+        // 1) Once we give out a `Pin<&mut P::Target>`, an `&mut P::Target` will not be given out.\n+        // 2) By giving out a `Pin<&mut P::Target>`, we do not risk of violating `Pin<&mut Pin<P>>`\n+        //\n+        // The existence of `Pin<P>` is sufficient to guarantee #1: since we already have a\n+        // `Pin<P>`, it must already uphold the pinning guarantees, which must mean that\n+        // `Pin<&mut P::Target>` does as well, since `Pin::as_mut` is safe. We do not have to rely\n+        // on the fact that P is _also_ pinned.\n+        //\n+        // For #2, we need to ensure that code given a `Pin<&mut P::Target>` cannot cause the\n+        // `Pin<P>` to move? That is not possible, since `Pin<&mut P::Target>` no longer retains\n+        // any access to the `P` itself, much less the `Pin<P>`.\n+        unsafe { self.get_unchecked_mut() }.as_mut()\n+    }\n+}\n+\n impl<T: ?Sized> Pin<&'static mut T> {\n     /// Get a pinned mutable reference from a static mutable reference.\n     ///"}, {"sha": "5f077f77bbc9f9285dabbc8419f5e5c4ee646b5c", "filename": "library/core/src/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -11,5 +11,5 @@ mod wake;\n pub use self::wake::{Context, RawWaker, RawWakerVTable, Waker};\n \n mod ready;\n-#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n+#[stable(feature = \"ready_macro\", since = \"1.56.0\")]\n pub use ready::ready;"}, {"sha": "2834ca5fe2224e0bc4383b253062351c9158f659", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -8,8 +8,6 @@\n /// # Examples\n ///\n /// ```\n-/// #![feature(ready_macro)]\n-///\n /// use std::task::{ready, Context, Poll};\n /// use std::future::{self, Future};\n /// use std::pin::Pin;\n@@ -29,8 +27,6 @@\n /// The `ready!` call expands to:\n ///\n /// ```\n-/// # #![feature(ready_macro)]\n-/// #\n /// # use std::task::{Context, Poll};\n /// # use std::future::{self, Future};\n /// # use std::pin::Pin;\n@@ -49,7 +45,7 @@\n ///     # Poll::Ready(())\n /// # }\n /// ```\n-#[unstable(feature = \"ready_macro\", issue = \"70922\")]\n+#[stable(feature = \"ready_macro\", since = \"1.56.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro ready($e:expr) {\n     match $e {"}, {"sha": "f72f88bb05c9d6e4acab9d464a77f8a95e397f42", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -1912,6 +1912,7 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///     Ok(())\n /// }\n /// ```\n+#[doc(alias = \"mkdir\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     DirBuilder::new().create(path.as_ref())\n@@ -1991,6 +1992,7 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n+#[doc(alias = \"rmdir\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::rmdir(path.as_ref())"}, {"sha": "9cbaa06562a55ee93bc7a7adfbe27b409740aa4a", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -304,7 +304,6 @@\n #![feature(pin_static_ref)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n-#![feature(ready_macro)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]\n #![feature(shrink_to)]"}, {"sha": "128897e580b68603dfe63be00b8d69ba8ce6b7bc", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -416,6 +416,10 @@ jobs:\n             env:\n               IMAGE: x86_64-gnu\n               RUST_CI_OVERRIDE_RELEASE_CHANNEL: stable\n+              # Only run this job on the nightly channel. Running this on beta\n+              # could cause failures when `dev: 1` in `stage0.txt`, and running\n+              # this on stable is useless.\n+              CI_ONLY_WHEN_CHANNEL: nightly\n             <<: *job-linux-xl\n \n           - name: x86_64-gnu-aux"}, {"sha": "bb48fcb5a216eaaef3da799ed4865186a2b3f6d1", "filename": "src/ci/scripts/should-skip-this.sh", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fshould-skip-this.sh?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -8,31 +8,43 @@ IFS=$'\\n\\t'\n \n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n-if [[ -z \"${CI_ONLY_WHEN_SUBMODULES_CHANGED+x}\" ]]; then\n-    echo \"Executing the job since there is no skip rule in effect\"\n-    exit 0\n+if [[ -n \"${CI_ONLY_WHEN_SUBMODULES_CHANGED-}\" ]]; then\n+    git fetch \"https://github.com/$GITHUB_REPOSITORY\" \"$GITHUB_BASE_REF\"\n+    BASE_COMMIT=\"$(git merge-base FETCH_HEAD HEAD)\"\n+\n+    echo \"Searching for toolstate changes between $BASE_COMMIT and $(git rev-parse HEAD)\"\n+\n+    if git diff \"$BASE_COMMIT\" | grep --quiet \"^index .* 160000\"; then\n+        # Submodules pseudo-files inside git have the 160000 permissions, so when\n+        # those files are present in the diff a submodule was updated.\n+        echo \"Submodules were updated\"\n+    elif ! git diff --quiet \"$BASE_COMMIT\" -- src/tools/clippy src/tools/rustfmt; then\n+        # There is not an easy blanket search for subtrees. For now, manually list\n+        # the subtrees.\n+        echo \"Clippy or rustfmt subtrees were updated\"\n+    elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n+             src/test/rustdoc-gui \\\n+             src/librustdoc \\\n+             src/tools/rustdoc-gui); then\n+        # There was a change in either rustdoc or in its GUI tests.\n+        echo \"Rustdoc was updated\"\n+    else\n+        echo \"Not executing this job since no submodules nor subtrees were updated\"\n+        ciCommandSetEnv SKIP_JOB 1\n+        exit 0\n+    fi\n fi\n \n-git fetch \"https://github.com/$GITHUB_REPOSITORY\" \"$GITHUB_BASE_REF\"\n-BASE_COMMIT=\"$(git merge-base FETCH_HEAD HEAD)\"\n-\n-echo \"Searching for toolstate changes between $BASE_COMMIT and $(git rev-parse HEAD)\"\n-\n-if git diff \"$BASE_COMMIT\" | grep --quiet \"^index .* 160000\"; then\n-    # Submodules pseudo-files inside git have the 160000 permissions, so when\n-    # those files are present in the diff a submodule was updated.\n-    echo \"Executing the job since submodules are updated\"\n-elif ! git diff --quiet \"$BASE_COMMIT\" -- src/tools/clippy src/tools/rustfmt; then\n-    # There is not an easy blanket search for subtrees. For now, manually list\n-    # the subtrees.\n-    echo \"Executing the job since clippy or rustfmt subtree was updated\"\n-elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n-         src/test/rustdoc-gui \\\n-         src/librustdoc \\\n-         src/tools/rustdoc-gui); then\n-    # There was a change in either rustdoc or in its GUI tests.\n-    echo \"Executing the job since rustdoc was updated\"\n-else\n-    echo \"Not executing this job since no submodules nor subtrees were updated\"\n-    ciCommandSetEnv SKIP_JOB 1\n+if [[ -n \"${CI_ONLY_WHEN_CHANNEL-}\" ]]; then\n+    if [[ \"${CI_ONLY_WHEN_CHANNEL}\" = \"$(cat src/ci/channel)\" ]]; then\n+        echo \"The channel is the expected one\"\n+    else\n+        echo \"Not executing this job as the channel is not the expected one\"\n+        ciCommandSetEnv SKIP_JOB 1\n+        exit 0\n+    fi\n fi\n+\n+\n+echo \"Executing the job since there is no skip rule preventing the execution\"\n+exit 0"}, {"sha": "fd79292477cab9c371c11c8423cfbc9953cf34d6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -1730,9 +1730,13 @@ impl Clean<Variant> for hir::VariantData<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Variant {\n         match self {\n             hir::VariantData::Struct(..) => Variant::Struct(self.clean(cx)),\n-            hir::VariantData::Tuple(..) => {\n-                Variant::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n-            }\n+            // Important note here: `Variant::Tuple` is used on tuple structs which are not in an\n+            // enum (so where converting from `ty::VariantDef`). In case we are in an enum, the kind\n+            // is provided by the `Variant` wrapper directly, and since we need the fields' name\n+            // (even for a tuple struct variant!), it's simpler to just store it as a\n+            // `Variant::Struct` instead of a `Variant::Tuple` (otherwise it would force us to make\n+            // a lot of changes when rendering them to generate the name as well).\n+            hir::VariantData::Tuple(..) => Variant::Struct(self.clean(cx)),\n             hir::VariantData::Unit(..) => Variant::CLike,\n         }\n     }"}, {"sha": "c05ea81ac1f36ca772e81e9362de6163beeef3bd", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -2007,6 +2007,9 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n             }\n \n             sidebar.push_str(\"</div>\");\n+        } else if let CtorKind::Fn = s.struct_type {\n+            sidebar\n+                .push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Tuple Fields</a></h3>\");\n         }\n     }\n "}, {"sha": "5c30d8bbd173ceb46249add58f346fd9fec05ad4", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -1037,8 +1037,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 write!(w, \"<div class=\\\"sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n                 write!(\n                     w,\n-                    \"<h3>Fields of <b>{name}</b></h3><div>\",\n-                    name = variant.name.as_ref().unwrap()\n+                    \"<h3>{extra}Fields of <b>{name}</b></h3><div>\",\n+                    extra = if s.struct_type == CtorKind::Fn { \"Tuple \" } else { \"\" },\n+                    name = variant.name.as_ref().unwrap(),\n                 );\n                 for field in &s.fields {\n                     use crate::clean::StructFieldItem;\n@@ -1176,21 +1177,21 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             _ => None,\n         })\n         .peekable();\n-    if let CtorKind::Fictive = s.struct_type {\n+    if let CtorKind::Fictive | CtorKind::Fn = s.struct_type {\n         if fields.peek().is_some() {\n             write!(\n                 w,\n                 \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\\\n-                       Fields{}<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a></h2>\",\n+                     {}{}<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a>\\\n+                 </h2>\",\n+                if let CtorKind::Fictive = s.struct_type { \"Fields\" } else { \"Tuple Fields\" },\n                 document_non_exhaustive_header(it)\n             );\n             document_non_exhaustive(w, it);\n-            for (field, ty) in fields {\n-                let id = cx.derive_id(format!(\n-                    \"{}.{}\",\n-                    ItemType::StructField,\n-                    field.name.as_ref().unwrap()\n-                ));\n+            for (index, (field, ty)) in fields.enumerate() {\n+                let field_name =\n+                    field.name.map_or_else(|| index.to_string(), |sym| (*sym.as_str()).to_string());\n+                let id = cx.derive_id(format!(\"{}.{}\", ItemType::StructField, field_name));\n                 write!(\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n@@ -1199,7 +1200,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n                      </span>\",\n                     item_type = ItemType::StructField,\n                     id = id,\n-                    name = field.name.as_ref().unwrap(),\n+                    name = field_name,\n                     ty = ty.print(cx)\n                 );\n                 document(w, cx, field, Some(it));\n@@ -1507,7 +1508,10 @@ fn render_struct(\n             if let Some(g) = g {\n                 write!(w, \"{}\", print_where_clause(g, cx, 0, false),)\n             }\n-            w.write_str(\";\");\n+            // We only want a \";\" when we are displaying a tuple struct, not a variant tuple struct.\n+            if structhead {\n+                w.write_str(\";\");\n+            }\n         }\n         CtorKind::Const => {\n             // Needed for PhantomData."}, {"sha": "414d60c86d3083b80d9558f659823b01d7ec106a", "filename": "src/test/rustdoc-ui/coverage/enums.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -1,7 +1,7 @@\n +-------------------------------------+------------+------------+------------+------------+\n | File                                | Documented | Percentage |   Examples | Percentage |\n +-------------------------------------+------------+------------+------------+------------+\n-| ...est/rustdoc-ui/coverage/enums.rs |          6 |      75.0% |          0 |       0.0% |\n+| ...est/rustdoc-ui/coverage/enums.rs |          6 |      66.7% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+\n-| Total                               |          6 |      75.0% |          0 |       0.0% |\n+| Total                               |          6 |      66.7% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+"}, {"sha": "ae871e79d7f6b0b62e24abed3d2c667962c03683", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -81,8 +81,8 @@ pub enum EnumStructVariant {\n }\n \n // @has 'toggle_item_contents/enum.LargeEnum.html'\n-// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 13 variants'\n+// @count - '//*[@class=\"rust enum\"]//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//*[@class=\"rust enum\"]//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 13 variants'\n pub enum LargeEnum {\n     A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n }"}, {"sha": "f3d8e39ea2d266824e0695b2046d02926c383458", "filename": "src/test/rustdoc/tuple-struct-fields-doc.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -0,0 +1,36 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Foo.html\n+// @has - '//h2[@id=\"fields\"]' 'Tuple Fields'\n+// @has - '//h3[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Tuple Fields'\n+// @has - '//*[@id=\"structfield.0\"]' '0: u32'\n+// @has - '//*[@id=\"main\"]/div[@class=\"docblock\"]' 'hello'\n+// @!has - '//*[@id=\"structfield.1\"]'\n+// @has - '//*[@id=\"structfield.2\"]' '2: char'\n+// @has - '//*[@id=\"structfield.3\"]' '3: i8'\n+// @has - '//*[@id=\"main\"]/div[@class=\"docblock\"]' 'not hello'\n+pub struct Foo(\n+    /// hello\n+    pub u32,\n+    char,\n+    pub char,\n+    /// not hello\n+    pub i8,\n+);\n+\n+// @has foo/enum.Bar.html\n+// @has - '//pre[@class=\"rust enum\"]' 'BarVariant(String),'\n+// @matches - '//*[@id=\"variant.BarVariant.fields\"]/h3' '^Tuple Fields of BarVariant$'\n+// @has - '//*[@id=\"variant.BarVariant.field.0\"]' '0: String'\n+// @has - '//*[@id=\"variant.BarVariant.fields\"]//*[@class=\"docblock\"]' 'Hello docs'\n+// @matches - '//*[@id=\"variant.FooVariant.fields\"]/h3' '^Fields of FooVariant$'\n+pub enum Bar {\n+    BarVariant(\n+        /// Hello docs\n+        String\n+    ),\n+    FooVariant {\n+       /// hello\n+       x: u32,\n+    },\n+}"}, {"sha": "177f33005c8cb9a897f3f15f051ffd45e63035c4", "filename": "src/test/ui-fulldeps/plugin-args.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -14,3 +14,4 @@ LL | #![plugin(empty_plugin(args))]\n \n error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0498`."}, {"sha": "e12857008a5e0e44c6a7bc4c5dcd8a0bf3495419", "filename": "src/test/ui/bastion-of-the-turbofish.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbastion-of-the-turbofish.rs?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -20,20 +20,24 @@\n // in permitting generic arguments to be provided without the consent of the\n // Great Turbofish. Should you be so na\u00efve as to try to revolt against its\n // mighty clutches, here shall its wrath be indomitably displayed. This\n-// program must pass for all eternity, fundamentally at odds with an impetuous\n-// rebellion against the Turbofish.\n+// program must pass for all eternity: forever watched by the guardian angel\n+// which gave this beast its name, and stands fundamentally at odds with the\n+// impetuous rebellion against the Turbofish.\n //\n // My heart aches in sorrow, for I know I am defeated. Let this be a warning\n-// to all those who come after. Here stands the bastion of the Turbofish.\n+// to all those who come after: for they too must overcome the impassible\n+// hurdle of defeating the great beast, championed by a resolute winged\n+// guardian.\n //\n-// RIP Anna Harren, Guardian Angel of the Hallowed Turbofish. <3\n+// Here stands the Bastion of the Turbofish, a memorial to Anna Harren,\n+// Guardian Angel of these Hallowed Grounds. <3\n \n // See https://github.com/rust-lang/rust/pull/53562\n // and https://github.com/rust-lang/rfcs/pull/2527\n // and https://twitter.com/garblefart/status/1393236602856611843\n // for context.\n \n fn main() {\n-    let (oh, woe, is, me) = (\"the\", \"Turbofish\", \"remains\", \"undefeated\");\n-    let _: (bool, bool) = (oh<woe, is>(me));\n+    let (the, guardian, stands, resolute) = (\"the\", \"Turbofish\", \"remains\", \"undefeated\");\n+    let _: (bool, bool) = (the<guardian, stands>(resolute));\n }"}, {"sha": "64cb429ea745bb4c03a9921b77ba39d52da52826", "filename": "src/test/ui/malformed/malformed-plugin-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4533be947b011c9bde4871ae93e6553b24cc5ec6/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr?ref=4533be947b011c9bde4871ae93e6553b24cc5ec6", "patch": "@@ -14,3 +14,4 @@ LL | #![plugin(foo=\"bleh\")]\n \n error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0498`."}]}