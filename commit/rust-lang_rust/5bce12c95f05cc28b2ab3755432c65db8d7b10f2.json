{"sha": "5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViY2UxMmM5NWYwNWNjMjhiMmFiMzc1NTQzMmM2NWRiOGQ3YjEwZjI=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-11-18T16:11:18Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2016-12-12T14:00:04Z"}, "message": "[LLVM 4.0] Move debuginfo alignment argument\n\nAlignment was removed from createBasicType and moved to\n\n- createGlobalVariable\n- createAutoVariable\n- createStaticMemberType (unused in Rust)\n- createTempGlobalVariableFwdDecl (unused in Rust)\n\nhttps://github.com/llvm-mirror/llvm/commit/e69c459a6e9756ca1ff3acb1dcfc434843aee80f", "tree": {"sha": "38699d87c6935d907c31b6ef63fb6463d1426280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38699d87c6935d907c31b6ef63fb6463d1426280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "html_url": "https://github.com/rust-lang/rust/commit/5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eae43e4d00ca6697da59b84c7cdf1c8ea83ea00", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eae43e4d00ca6697da59b84c7cdf1c8ea83ea00", "html_url": "https://github.com/rust-lang/rust/commit/0eae43e4d00ca6697da59b84c7cdf1c8ea83ea00"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "f3d4c17654dcc7a0f650ff0c849ad539eccd631a", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "patch": "@@ -1417,7 +1417,8 @@ extern \"C\" {\n                                                  Ty: DIType,\n                                                  isLocalToUnit: bool,\n                                                  Val: ValueRef,\n-                                                 Decl: DIDescriptor)\n+                                                 Decl: DIDescriptor,\n+                                                 AlignInBits: u64)\n                                                  -> DIGlobalVariable;\n \n     pub fn LLVMRustDIBuilderCreateVariable(Builder: DIBuilderRef,\n@@ -1429,7 +1430,8 @@ extern \"C\" {\n                                            Ty: DIType,\n                                            AlwaysPreserve: bool,\n                                            Flags: DIFlags,\n-                                           ArgNo: c_uint)\n+                                           ArgNo: c_uint,\n+                                           AlignInBits: u64)\n                                            -> DIVariable;\n \n     pub fn LLVMRustDIBuilderCreateArrayType(Builder: DIBuilderRef,"}, {"sha": "5022e0750e38ef00db79519fbfdc293dc9cdbeb3", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "patch": "@@ -1763,6 +1763,10 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n \n     let var_name = CString::new(var_name).unwrap();\n     let linkage_name = CString::new(linkage_name).unwrap();\n+\n+    let ty = cx.tcx().item_type(node_def_id);\n+    let global_align = type_of::align_of(cx, ty);\n+\n     unsafe {\n         llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(cx),\n                                                     var_scope,\n@@ -1773,7 +1777,9 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n                                                     type_metadata,\n                                                     is_local_to_unit,\n                                                     global,\n-                                                    ptr::null_mut());\n+                                                    ptr::null_mut(),\n+                                                    global_align as u64,\n+        );\n     }\n }\n "}, {"sha": "4e511c05840d1aeb1ac09e9cdd355c26c351ce24", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "patch": "@@ -462,6 +462,7 @@ pub fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         LocalVariable    |\n         CapturedVariable => (0, DW_TAG_auto_variable)\n     };\n+    let align = ::type_of::align_of(cx, variable_type);\n \n     let name = CString::new(variable_name.as_str().as_bytes()).unwrap();\n     match (variable_access, &[][..]) {\n@@ -478,7 +479,9 @@ pub fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     type_metadata,\n                     cx.sess().opts.optimize != config::OptLevel::No,\n                     DIFlags::FlagZero,\n-                    argument_index)\n+                    argument_index,\n+                    align as u64,\n+                )\n             };\n             source_loc::set_debug_location(cx, None,\n                 InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()));"}, {"sha": "85749d883d2f303ed3330a02ad3acac98416493e", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5bce12c95f05cc28b2ab3755432c65db8d7b10f2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=5bce12c95f05cc28b2ab3755432c65db8d7b10f2", "patch": "@@ -552,8 +552,13 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateBasicType(\n     uint64_t AlignInBits,\n     unsigned Encoding) {\n     return wrap(Builder->createBasicType(\n-        Name, SizeInBits,\n-        AlignInBits, Encoding));\n+        Name,\n+        SizeInBits,\n+#if LLVM_VERSION_LE(3, 9)\n+        AlignInBits,\n+#endif\n+        Encoding\n+    ));\n }\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(\n@@ -645,16 +650,23 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n     LLVMRustMetadataRef Ty,\n     bool isLocalToUnit,\n     LLVMValueRef Val,\n-    LLVMRustMetadataRef Decl = NULL) {\n-    return wrap(Builder->createGlobalVariable(unwrapDI<DIDescriptor>(Context),\n+    LLVMRustMetadataRef Decl = NULL,\n+    uint64_t AlignInBits = 0)\n+{\n+    return wrap(Builder->createGlobalVariable(\n+        unwrapDI<DIDescriptor>(Context),\n         Name,\n         LinkageName,\n         unwrapDI<DIFile>(File),\n         LineNo,\n         unwrapDI<DIType>(Ty),\n         isLocalToUnit,\n         cast<Constant>(unwrap(Val)),\n-        unwrapDIptr<MDNode>(Decl)));\n+        unwrapDIptr<MDNode>(Decl)\n+#if LLVM_VERSION_GE(4, 0)\n+        , AlignInBits\n+#endif\n+    ));\n }\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n@@ -667,14 +679,23 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n     LLVMRustMetadataRef Ty,\n     bool AlwaysPreserve,\n     LLVMRustDIFlags Flags,\n-    unsigned ArgNo) {\n+    unsigned ArgNo,\n+    uint64_t AlignInBits)\n+{\n #if LLVM_VERSION_GE(3, 8)\n     if (Tag == 0x100) { // DW_TAG_auto_variable\n         return wrap(Builder->createAutoVariable(\n-            unwrapDI<DIDescriptor>(Scope), Name,\n+            unwrapDI<DIDescriptor>(Scope),\n+            Name,\n             unwrapDI<DIFile>(File),\n             LineNo,\n-            unwrapDI<DIType>(Ty), AlwaysPreserve, from_rust(Flags)));\n+            unwrapDI<DIType>(Ty),\n+            AlwaysPreserve,\n+            from_rust(Flags)\n+#if LLVM_VERSION_GE(4,0)\n+            , AlignInBits\n+#endif\n+        ));\n     } else {\n         return wrap(Builder->createParameterVariable(\n             unwrapDI<DIDescriptor>(Scope), Name, ArgNo,"}]}