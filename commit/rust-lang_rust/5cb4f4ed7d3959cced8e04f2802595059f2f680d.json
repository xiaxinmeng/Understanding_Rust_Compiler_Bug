{"sha": "5cb4f4ed7d3959cced8e04f2802595059f2f680d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYjRmNGVkN2QzOTU5Y2NlZDhlMDRmMjgwMjU5NTA1OWYyZjY4MGQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-07-04T15:20:24Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-14T16:34:32Z"}, "message": "Fix ui fulldeps tests", "tree": {"sha": "18dcf0360dea8a98bf09ce7c5c10451246d10503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18dcf0360dea8a98bf09ce7c5c10451246d10503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cb4f4ed7d3959cced8e04f2802595059f2f680d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb4f4ed7d3959cced8e04f2802595059f2f680d", "html_url": "https://github.com/rust-lang/rust/commit/5cb4f4ed7d3959cced8e04f2802595059f2f680d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cb4f4ed7d3959cced8e04f2802595059f2f680d/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "html_url": "https://github.com/rust-lang/rust/commit/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5"}], "stats": {"total": 163, "additions": 75, "deletions": 88}, "files": [{"sha": "1299d82d9c4b9c1503207669858fec75fc1a9351", "filename": "src/test/ui-fulldeps/derive-no-std-not-supported.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Ftest%2Fui-fulldeps%2Fderive-no-std-not-supported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5/src%2Ftest%2Fui-fulldeps%2Fderive-no-std-not-supported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderive-no-std-not-supported.rs?ref=e46c58fa7e092eb7316bee958d4ad99e5ec0a9c5", "patch": "@@ -1,22 +0,0 @@\n-// run-pass\n-\n-#![allow(dead_code)]\n-#![feature(rustc_private)]\n-#![no_std]\n-\n-extern crate rustc_serialize;\n-\n-#[derive(RustcEncodable)]\n-struct Bar {\n-    x: u32,\n-}\n-\n-#[derive(RustcDecodable)]\n-struct Baz {\n-    x: u32,\n-}\n-\n-fn main() {\n-    Bar { x: 0 };\n-    Baz { x: 0 };\n-}"}, {"sha": "119fa3d6fa8efcf9ad60ab93805879dce4061812", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -1,16 +1,17 @@\n // run-pass\n \n #![allow(unused_imports)]\n-\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n \n+extern crate rustc_macros;\n extern crate rustc_serialize;\n \n-use rustc_serialize::{Encodable, Decodable};\n+use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::json;\n+use rustc_serialize::{Decodable, Encodable};\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Encodable, Decodable)]\n struct A {\n     foo: Box<[bool]>,\n }"}, {"sha": "9dedf990f25ece259c2f8925cd78ab6a28fe8555", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -3,32 +3,29 @@\n #![allow(unused_imports)]\n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n-\n-\n #![feature(rustc_private)]\n \n+extern crate rustc_macros;\n extern crate rustc_serialize;\n \n-use std::cell::{Cell, RefCell};\n-use rustc_serialize::{Encodable, Decodable};\n+use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::json;\n+use rustc_serialize::{Decodable, Encodable};\n+use std::cell::{Cell, RefCell};\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Encodable, Decodable)]\n struct A {\n-    baz: isize\n+    baz: isize,\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Encodable, Decodable)]\n struct B {\n     foo: Cell<bool>,\n     bar: RefCell<A>,\n }\n \n fn main() {\n-    let obj = B {\n-        foo: Cell::new(true),\n-        bar: RefCell::new( A { baz: 2 } )\n-    };\n+    let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n     let s = json::encode(&obj).unwrap();\n     let obj2: B = json::decode(&s).unwrap();\n     assert_eq!(obj.foo.get(), obj2.foo.get());"}, {"sha": "921767af981ad6e10062da418868ba91ad99a3c9", "filename": "src/test/ui-fulldeps/deriving-global.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-global.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -2,33 +2,29 @@\n \n #![feature(rustc_private)]\n \n+extern crate rustc_macros;\n extern crate rustc_serialize;\n \n mod submod {\n+    use rustc_macros::{Decodable, Encodable};\n+\n     // if any of these are implemented without global calls for any\n     // function calls, then being in a submodule will (correctly)\n     // cause errors about unrecognised module `std` (or `extra`)\n-    #[derive(PartialEq, PartialOrd, Eq, Ord,\n-               Hash,\n-               Clone,\n-               Debug,\n-               RustcEncodable, RustcDecodable)]\n-    enum A { A1(usize), A2(isize) }\n+    #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone, Debug, Encodable, Decodable)]\n+    enum A {\n+        A1(usize),\n+        A2(isize),\n+    }\n \n-    #[derive(PartialEq, PartialOrd, Eq, Ord,\n-               Hash,\n-               Clone,\n-               Debug,\n-               RustcEncodable, RustcDecodable)]\n-    struct B { x: usize, y: isize }\n+    #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone, Debug, Encodable, Decodable)]\n+    struct B {\n+        x: usize,\n+        y: isize,\n+    }\n \n-    #[derive(PartialEq, PartialOrd, Eq, Ord,\n-               Hash,\n-               Clone,\n-               Debug,\n-               RustcEncodable, RustcDecodable)]\n+    #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone, Debug, Encodable, Decodable)]\n     struct C(usize, isize);\n-\n }\n \n pub fn main() {}"}, {"sha": "8486b8b6e481a3e300696e90f800fd962100a0cc", "filename": "src/test/ui-fulldeps/deriving-hygiene.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-hygiene.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -2,17 +2,19 @@\n \n #![allow(non_upper_case_globals)]\n #![feature(rustc_private)]\n+extern crate rustc_macros;\n extern crate rustc_serialize;\n \n+use rustc_macros::{Decodable, Encodable};\n+\n pub const other: u8 = 1;\n pub const f: u8 = 1;\n pub const d: u8 = 1;\n pub const s: u8 = 1;\n pub const state: u8 = 1;\n pub const cmp: u8 = 1;\n \n-#[derive(Ord,Eq,PartialOrd,PartialEq,Debug,RustcDecodable,RustcEncodable,Hash)]\n+#[derive(Ord, Eq, PartialOrd, PartialEq, Debug, Decodable, Encodable, Hash)]\n struct Foo {}\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "6e5eb54629ccde87b9ce5437b39fd819197e2657", "filename": "src/test/ui-fulldeps/empty-struct-braces-derive.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fempty-struct-braces-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fempty-struct-braces-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fempty-struct-braces-derive.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -3,18 +3,18 @@\n \n #![feature(rustc_private)]\n \n+extern crate rustc_macros;\n extern crate rustc_serialize;\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         Default, Debug, RustcEncodable, RustcDecodable)]\n+use rustc_macros::{Decodable, Encodable};\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default, Debug, Encodable, Decodable)]\n struct S {}\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         Default, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default, Debug, Encodable, Decodable)]\n struct Z();\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n enum E {\n     V {},\n     U,"}, {"sha": "6d64aeeda7e117ce26ca4227b4ebfb52f2acc35a", "filename": "src/test/ui-fulldeps/issue-11881.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-11881.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -3,26 +3,27 @@\n #![allow(unused_must_use)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n-\n #![feature(rustc_private)]\n \n+extern crate rustc_macros;\n extern crate rustc_serialize;\n \n-use std::io::Cursor;\n-use std::io::prelude::*;\n use std::fmt;\n+use std::io::prelude::*;\n+use std::io::Cursor;\n use std::slice;\n \n-use rustc_serialize::{Encodable, Encoder};\n+use rustc_macros::Encodable;\n use rustc_serialize::json;\n use rustc_serialize::opaque;\n+use rustc_serialize::{Encodable, Encoder};\n \n-#[derive(RustcEncodable)]\n+#[derive(Encodable)]\n struct Foo {\n     baz: bool,\n }\n \n-#[derive(RustcEncodable)]\n+#[derive(Encodable)]\n struct Bar {\n     froboz: usize,\n }\n@@ -33,19 +34,19 @@ enum WireProtocol {\n     // ...\n }\n \n-fn encode_json<T: Encodable>(val: &T, wr: &mut Cursor<Vec<u8>>) {\n+fn encode_json<T: for<'a> Encodable<json::Encoder<'a>>>(val: &T, wr: &mut Cursor<Vec<u8>>) {\n     write!(wr, \"{}\", json::as_json(val));\n }\n-fn encode_opaque<T: Encodable>(val: &T, wr: Vec<u8>) {\n+fn encode_opaque<T: Encodable<opaque::Encoder>>(val: &T, wr: Vec<u8>) {\n     let mut encoder = opaque::Encoder::new(wr);\n     val.encode(&mut encoder);\n }\n \n pub fn main() {\n-    let target = Foo{baz: false,};\n+    let target = Foo { baz: false };\n     let proto = WireProtocol::JSON;\n     match proto {\n         WireProtocol::JSON => encode_json(&target, &mut Cursor::new(Vec::new())),\n-        WireProtocol::Opaque => encode_opaque(&target, Vec::new())\n+        WireProtocol::Opaque => encode_opaque(&target, Vec::new()),\n     }\n }"}, {"sha": "be88a593962cc0f969c7b88e584b52744eb90e17", "filename": "src/test/ui-fulldeps/issue-14021.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -4,12 +4,14 @@\n #![allow(unused_imports)]\n #![feature(rustc_private)]\n \n+extern crate rustc_macros;\n extern crate rustc_serialize;\n \n-use rustc_serialize::{Encodable, Decodable};\n+use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::json;\n+use rustc_serialize::{Decodable, Encodable};\n \n-#[derive(RustcEncodable, RustcDecodable, PartialEq, Debug)]\n+#[derive(Encodable, Decodable, PartialEq, Debug)]\n struct UnitLikeStruct;\n \n pub fn main() {"}, {"sha": "5adc2c482f5e8977d55ccd1fda82aaad09e214e0", "filename": "src/test/ui-fulldeps/issue-15924.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-15924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-15924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15924.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -3,20 +3,19 @@\n #![allow(unused_imports)]\n #![allow(unused_must_use)]\n // pretty-expanded FIXME #23616\n-\n #![feature(rustc_private)]\n \n extern crate rustc_serialize;\n \n-use std::fmt;\n-use rustc_serialize::{Encoder, Encodable};\n use rustc_serialize::json;\n+use rustc_serialize::{Encodable, Encoder};\n+use std::fmt;\n \n-struct Foo<T: Encodable> {\n+struct Foo<T: for<'a> Encodable<json::Encoder<'a>>> {\n     v: T,\n }\n \n-impl<T: Encodable> Drop for Foo<T> {\n+impl<T: for<'a> Encodable<json::Encoder<'a>>> Drop for Foo<T> {\n     fn drop(&mut self) {\n         json::encode(&self.v);\n     }"}, {"sha": "044a0c5000e31a80308eb120cdf82861e9880742", "filename": "src/test/ui-fulldeps/issue-24972.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-24972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-24972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-24972.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -5,11 +5,18 @@\n \n extern crate rustc_serialize;\n \n-use rustc_serialize::{Encodable, Decodable};\n+use rustc_serialize::{json, Decodable, Encodable};\n use std::fmt::Display;\n \n-pub trait Entity : Decodable + Encodable + Sized {\n-    type Key: Clone + Decodable + Encodable + ToString + Display + Eq + Ord + Sized;\n+pub trait Entity: Decodable<json::Decoder> + for<'a> Encodable<json::Encoder<'a>> + Sized {\n+    type Key: Clone\n+        + Decodable<json::Decoder>\n+        + for<'a> Encodable<json::Encoder<'a>>\n+        + ToString\n+        + Display\n+        + Eq\n+        + Ord\n+        + Sized;\n \n     fn id(&self) -> Self::Key;\n \n@@ -20,7 +27,10 @@ pub struct DbRef<E: Entity> {\n     pub id: E::Key,\n }\n \n-impl<E> DbRef<E> where E: Entity {\n+impl<E> DbRef<E>\n+where\n+    E: Entity,\n+{\n     fn get(self) -> Option<E> {\n         E::find_by_id(self.id)\n     }"}, {"sha": "4fd192497a0a322965a6aa40fb908a811d49ad92", "filename": "src/test/ui-fulldeps/issue-4016.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-4016.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -1,14 +1,13 @@\n // run-pass\n \n #![allow(dead_code)]\n-\n #![feature(rustc_private)]\n \n extern crate rustc_serialize;\n \n use rustc_serialize::{json, Decodable};\n \n-trait JD : Decodable {}\n+trait JD: Decodable<json::Decoder> {}\n \n fn exec<T: JD>() {\n     let doc = json::from_str(\"\").unwrap();"}, {"sha": "452110a65e4aa18ac966be2213c89c5b4a921696", "filename": "src/test/ui-fulldeps/rustc_encodable_hygiene.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Frustc_encodable_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb4f4ed7d3959cced8e04f2802595059f2f680d/src%2Ftest%2Fui-fulldeps%2Frustc_encodable_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Frustc_encodable_hygiene.rs?ref=5cb4f4ed7d3959cced8e04f2802595059f2f680d", "patch": "@@ -2,11 +2,13 @@\n \n #![feature(rustc_private)]\n \n+extern crate rustc_macros;\n #[allow(dead_code)]\n-\n extern crate rustc_serialize;\n \n-#[derive(RustcDecodable, RustcEncodable,Debug)]\n+use rustc_macros::{Decodable, Encodable};\n+\n+#[derive(Decodable, Encodable, Debug)]\n struct A {\n     a: String,\n }"}]}