{"sha": "ec2043a0820cc0fa0f7341f752342428aec6bde9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMjA0M2EwODIwY2MwZmEwZjczNDFmNzUyMzQyNDI4YWVjNmJkZTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T21:14:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T21:14:20Z"}, "message": "minor: parser cleanup", "tree": {"sha": "c888d7eeba440393648831c6a547edd0fa3a31de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c888d7eeba440393648831c6a547edd0fa3a31de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec2043a0820cc0fa0f7341f752342428aec6bde9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec2043a0820cc0fa0f7341f752342428aec6bde9", "html_url": "https://github.com/rust-lang/rust/commit/ec2043a0820cc0fa0f7341f752342428aec6bde9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec2043a0820cc0fa0f7341f752342428aec6bde9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c72a30af630cb023ee6a47b10e44cf33e2f9bfe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c72a30af630cb023ee6a47b10e44cf33e2f9bfe1", "html_url": "https://github.com/rust-lang/rust/commit/c72a30af630cb023ee6a47b10e44cf33e2f9bfe1"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "58e182d68c654b04bb6cce544cad22d464b19cc0", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=ec2043a0820cc0fa0f7341f752342428aec6bde9", "patch": "@@ -183,6 +183,7 @@ fn opt_visibility(p: &mut Parser) -> bool {\n                 }\n             }\n             m.complete(p, VISIBILITY);\n+            true\n         }\n         // test crate_keyword_vis\n         // crate fn main() { }\n@@ -197,10 +198,10 @@ fn opt_visibility(p: &mut Parser) -> bool {\n             let m = p.start();\n             p.bump(T![crate]);\n             m.complete(p, VISIBILITY);\n+            true\n         }\n-        _ => return false,\n+        _ => false,\n     }\n-    true\n }\n \n fn opt_rename(p: &mut Parser) {"}, {"sha": "5fdffc4f96bd00bfb8e53e68339f9c56dc3dc7e4", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=ec2043a0820cc0fa0f7341f752342428aec6bde9", "patch": "@@ -135,27 +135,25 @@ pub(super) fn opt_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n                 p.bump_remap(T![default]);\n                 has_mods = true;\n             }\n-            T![unsafe] => {\n-                // test default_unsafe_item\n-                // default unsafe impl T for Foo {\n-                //     default unsafe fn foo() {}\n-                // }\n-                if matches!(p.nth(2), T![impl] | T![fn]) {\n-                    p.bump_remap(T![default]);\n-                    p.bump(T![unsafe]);\n-                    has_mods = true;\n-                }\n+            // test default_unsafe_item\n+            // default unsafe impl T for Foo {\n+            //     default unsafe fn foo() {}\n+            // }\n+            T![unsafe] if matches!(p.nth(2), T![impl] | T![fn]) => {\n+                p.bump_remap(T![default]);\n+                p.bump(T![unsafe]);\n+                has_mods = true;\n             }\n+            // test default_async_fn\n+            // impl T for Foo {\n+            //     default async fn foo() {}\n+            // }\n+\n+            // test default_async_unsafe_fn\n+            // impl T for Foo {\n+            //     default async unsafe fn foo() {}\n+            // }\n             T![async] => {\n-                // test default_async_fn\n-                // impl T for Foo {\n-                //     default async fn foo() {}\n-                // }\n-\n-                // test default_async_unsafe_fn\n-                // impl T for Foo {\n-                //     default async unsafe fn foo() {}\n-                // }\n                 let mut maybe_fn = p.nth(2);\n                 let is_unsafe = if matches!(maybe_fn, T![unsafe]) {\n                     maybe_fn = p.nth(3);"}]}