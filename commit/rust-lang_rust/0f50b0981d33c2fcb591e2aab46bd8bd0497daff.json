{"sha": "0f50b0981d33c2fcb591e2aab46bd8bd0497daff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNTBiMDk4MWQzM2MyZmNiNTkxZTJhYWI0NmJkOGJkMDQ5N2RhZmY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T18:14:02Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T18:14:02Z"}, "message": "Check for pattern use in FOR_KV_MAP", "tree": {"sha": "fda0ec77e93514ca39b04563192fcaa4444aab9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda0ec77e93514ca39b04563192fcaa4444aab9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f50b0981d33c2fcb591e2aab46bd8bd0497daff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f50b0981d33c2fcb591e2aab46bd8bd0497daff", "html_url": "https://github.com/rust-lang/rust/commit/0f50b0981d33c2fcb591e2aab46bd8bd0497daff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f50b0981d33c2fcb591e2aab46bd8bd0497daff/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431c446746a7893ca6c78048adebc55f2f308979", "url": "https://api.github.com/repos/rust-lang/rust/commits/431c446746a7893ca6c78048adebc55f2f308979", "html_url": "https://github.com/rust-lang/rust/commit/431c446746a7893ca6c78048adebc55f2f308979"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "22dfef55ec15f247cc4bf7f07cae77fe546eb6f6", "filename": "src/loops.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0f50b0981d33c2fcb591e2aab46bd8bd0497daff/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f50b0981d33c2fcb591e2aab46bd8bd0497daff/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=0f50b0981d33c2fcb591e2aab46bd8bd0497daff", "patch": "@@ -289,7 +289,7 @@ fn check_for_loop(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &E\n     check_for_loop_reverse_range(cx, arg, expr);\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n-    check_for_loop_over_map_kv(cx, pat, arg, expr);\n+    check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n }\n \n /// Check for looping over a range and then indexing a sequence with it.\n@@ -520,12 +520,13 @@ fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, ex\n }\n \n // Check for the FOR_KV_MAP lint.\n-fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n+fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n     if let PatTup(ref pat) = pat.node {\n         if pat.len() == 2 {\n+\n             let (pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n-                (key, _) if pat_is_wild(key) => (&pat[1].span, \"values\"),\n-                (_, value) if pat_is_wild(value) => (&pat[0].span, \"keys\"),\n+                (key, _) if pat_is_wild(key, body) => (&pat[1].span, \"values\"),\n+                (_, value) if pat_is_wild(value, body) => (&pat[0].span, \"keys\"),\n                 _ => return\n             };\n \n@@ -558,14 +559,39 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Ex\n }\n \n // Return true if the pattern is a `PatWild` or an ident prefixed with '_'.\n-fn pat_is_wild(pat: &Pat_) -> bool {\n+fn pat_is_wild(pat: &Pat_, body: &Expr) -> bool {\n     match *pat {\n         PatWild => true,\n-        PatIdent(_, ident, None) if ident.node.name.as_str().starts_with('_') => true,\n+        PatIdent(_, ident, None) if ident.node.name.as_str().starts_with('_') => {\n+            let mut visitor = UsedVisitor {\n+                var: ident.node,\n+                used: false,\n+            };\n+            walk_expr(&mut visitor, body);\n+            !visitor.used\n+        },\n         _ => false,\n     }\n }\n \n+struct UsedVisitor {\n+    var: Ident, // var to look for\n+    used: bool, // has the var been used otherwise?\n+}\n+\n+impl<'a> Visitor<'a> for UsedVisitor {\n+    fn visit_expr(&mut self, expr: &Expr) {\n+        if let ExprPath(None, ref path) = expr.node {\n+            if path.segments.len() == 1 && path.segments[0].identifier == self.var {\n+                self.used = true;\n+                return\n+            }\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+}\n+\n /// Recover the essential nodes of a desugared for loop:\n /// `for pat in arg { body }` becomes `(pat, arg, body)`.\n fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {"}, {"sha": "e361ebe777f478da482656697745537f738827d8", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f50b0981d33c2fcb591e2aab46bd8bd0497daff/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f50b0981d33c2fcb591e2aab46bd8bd0497daff/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=0f50b0981d33c2fcb591e2aab46bd8bd0497daff", "patch": "@@ -290,10 +290,23 @@ fn main() {\n     }\n \n     let rm = &m;\n-    for (k, _values) in rm {\n+    for (k, _value) in rm {\n         //~^ you seem to want to iterate on a map's keys\n         //~| HELP use the corresponding method\n         //~| SUGGESTION for k in rm.keys()\n         let _k = k;\n     }\n+\n+    test_for_kv_map();\n+}\n+\n+#[allow(used_underscore_binding)]\n+fn test_for_kv_map() {\n+    let m : HashMap<u64, u64> = HashMap::new();\n+\n+    // No error, _value is actually used\n+    for (k, _value) in &m {\n+        let _ = _value;\n+        let _k = k;\n+    }\n }"}]}