{"sha": "163c207fc28cadff4de1808848a93e3e5f2d1941", "node_id": "C_kwDOAAsO6NoAKDE2M2MyMDdmYzI4Y2FkZmY0ZGUxODA4ODQ4YTkzZTNlNWYyZDE5NDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-09T02:17:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-09T02:17:58Z"}, "message": "Auto merge of #94750 - cuviper:dirent64_min, r=joshtriplett\n\nunix: reduce the size of DirEntry\n\nOn platforms where we call `readdir` instead of `readdir_r`, we store\nthe name as an allocated `CString` for variable length. There's no point\ncarrying around a full `dirent64` with its fixed-length `d_name` too.", "tree": {"sha": "85ba92c4bc888fefa3da555c462cd4f866458ce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85ba92c4bc888fefa3da555c462cd4f866458ce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/163c207fc28cadff4de1808848a93e3e5f2d1941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/163c207fc28cadff4de1808848a93e3e5f2d1941", "html_url": "https://github.com/rust-lang/rust/commit/163c207fc28cadff4de1808848a93e3e5f2d1941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/163c207fc28cadff4de1808848a93e3e5f2d1941/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "803a7593044457cc8436847196752405cf023fb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/803a7593044457cc8436847196752405cf023fb5", "html_url": "https://github.com/rust-lang/rust/commit/803a7593044457cc8436847196752405cf023fb5"}, {"sha": "e8b9ba84be772b6888f17c940ecdab0fdcdcb3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b9ba84be772b6888f17c940ecdab0fdcdcb3c5", "html_url": "https://github.com/rust-lang/rust/commit/e8b9ba84be772b6888f17c940ecdab0fdcdcb3c5"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "a3e6b081936b67bb6f824b85b401edf3cf896c91", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/163c207fc28cadff4de1808848a93e3e5f2d1941/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163c207fc28cadff4de1808848a93e3e5f2d1941/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=163c207fc28cadff4de1808848a93e3e5f2d1941", "patch": "@@ -228,23 +228,54 @@ struct Dir(*mut libc::DIR);\n unsafe impl Send for Dir {}\n unsafe impl Sync for Dir {}\n \n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"solaris\",\n+    target_os = \"illumos\",\n+    target_os = \"fuchsia\",\n+    target_os = \"redox\"\n+))]\n pub struct DirEntry {\n-    entry: dirent64,\n     dir: Arc<InnerReadDir>,\n+    entry: dirent64_min,\n     // We need to store an owned copy of the entry name on platforms that use\n     // readdir() (not readdir_r()), because a) struct dirent may use a flexible\n     // array to store the name, b) it lives only until the next readdir() call.\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"linux\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-        target_os = \"fuchsia\",\n-        target_os = \"redox\"\n-    ))]\n     name: CString,\n }\n \n+// Define a minimal subset of fields we need from `dirent64`, especially since\n+// we're not using the immediate `d_name` on these targets. Keeping this as an\n+// `entry` field in `DirEntry` helps reduce the `cfg` boilerplate elsewhere.\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"solaris\",\n+    target_os = \"illumos\",\n+    target_os = \"fuchsia\",\n+    target_os = \"redox\"\n+))]\n+struct dirent64_min {\n+    d_ino: u64,\n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n+    d_type: u8,\n+}\n+\n+#[cfg(not(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"solaris\",\n+    target_os = \"illumos\",\n+    target_os = \"fuchsia\",\n+    target_os = \"redox\"\n+)))]\n+pub struct DirEntry {\n+    dir: Arc<InnerReadDir>,\n+    // The full entry includes a fixed-length `d_name`.\n+    entry: dirent64,\n+}\n+\n #[derive(Clone, Debug)]\n pub struct OpenOptions {\n     // generic\n@@ -501,8 +532,14 @@ impl Iterator for ReadDir {\n                 let entry_name = entry_bytes.add(name_offset);\n                 ptr::copy_nonoverlapping(entry_bytes, copy_bytes, name_offset);\n \n+                let entry = dirent64_min {\n+                    d_ino: copy.d_ino as u64,\n+                    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n+                    d_type: copy.d_type as u8,\n+                };\n+\n                 let ret = DirEntry {\n-                    entry: copy,\n+                    entry,\n                     // d_name is guaranteed to be null-terminated.\n                     name: CStr::from_ptr(entry_name as *const _).to_owned(),\n                     dir: Arc::clone(&self.inner),"}]}