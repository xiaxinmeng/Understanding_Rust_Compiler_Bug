{"sha": "65707dfc001b4dea745a040c2ecc61847ccba608", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NzA3ZGZjMDAxYjRkZWE3NDVhMDQwYzJlY2M2MTg0N2NjYmE2MDg=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2015-12-05T08:18:24Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2015-12-05T10:11:20Z"}, "message": "Use a struct instead of a tuple for inline asm output operands", "tree": {"sha": "164a1736ee4a1e3609cab2d0f8acd248cee590a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/164a1736ee4a1e3609cab2d0f8acd248cee590a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65707dfc001b4dea745a040c2ecc61847ccba608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65707dfc001b4dea745a040c2ecc61847ccba608", "html_url": "https://github.com/rust-lang/rust/commit/65707dfc001b4dea745a040c2ecc61847ccba608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65707dfc001b4dea745a040c2ecc61847ccba608/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce5b0351a57dcf335ea214de3ff59466e9b929d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5b0351a57dcf335ea214de3ff59466e9b929d9", "html_url": "https://github.com/rust-lang/rust/commit/ce5b0351a57dcf335ea214de3ff59466e9b929d9"}], "stats": {"total": 139, "additions": 87, "deletions": 52}, "files": [{"sha": "f17c865dc902bd8b9b5f3ee19096d834c8c71072", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -368,8 +368,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 }), pred);\n                 let post_outputs = self.exprs(outputs.map(|a| {\n                     debug!(\"cfg::construct InlineAsm id:{} output:{:?}\", expr.id, a);\n-                    let &(_, ref expr, _, _) = a;\n-                    &**expr\n+                    &*a.expr\n                 }), post_inputs);\n                 self.add_ast_node(expr.id, &[post_outputs])\n             }"}, {"sha": "58f6972277703c44f22f74086c87836cb8062051", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -458,12 +458,12 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                     self.consume_expr(&**input);\n                 }\n \n-                for &(_, ref output, is_rw, is_indirect) in &ia.outputs {\n-                    if is_indirect {\n-                        self.consume_expr(&**output);\n+                for output in &ia.outputs {\n+                    if output.is_indirect {\n+                        self.consume_expr(&*output.expr);\n                     } else {\n-                        self.mutate_expr(expr, &**output,\n-                                           if is_rw { WriteAndRead } else { JustWrite });\n+                        self.mutate_expr(expr, &*output.expr,\n+                                         if output.is_rw { WriteAndRead } else { JustWrite });\n                     }\n                 }\n             }"}, {"sha": "30061212a8526d5f2c7c626b3aec43f01dd37112", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -1167,15 +1167,15 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprInlineAsm(ref ia) => {\n \n             let succ = ia.outputs.iter().rev().fold(succ,\n-                |succ, &(_, ref expr, is_rw, is_indirect)| {\n+                |succ, out| {\n                     // see comment on lvalues\n                     // in propagate_through_lvalue_components()\n-                    if is_indirect {\n-                        self.propagate_through_expr(&**expr, succ)\n+                    if out.is_indirect {\n+                        self.propagate_through_expr(&*out.expr, succ)\n                     } else {\n-                        let acc = if is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n-                        let succ = self.write_lvalue(&**expr, succ, acc);\n-                        self.propagate_through_lvalue_components(&**expr, succ)\n+                        let acc = if out.is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n+                        let succ = self.write_lvalue(&*out.expr, succ, acc);\n+                        self.propagate_through_lvalue_components(&*out.expr, succ)\n                     }\n                 }\n             );\n@@ -1423,11 +1423,11 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n         }\n \n         // Output operands must be lvalues\n-        for &(_, ref out, _, is_indirect) in &ia.outputs {\n-          if !is_indirect {\n-            this.check_lvalue(&**out);\n+        for out in &ia.outputs {\n+          if !out.is_indirect {\n+            this.check_lvalue(&*out.expr);\n           }\n-          this.visit_expr(&**out);\n+          this.visit_expr(&*out.expr);\n         }\n \n         intravisit::walk_expr(this, expr);"}, {"sha": "aa73871d84e8f045567fd0f589300ea67aab64ea", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -1127,8 +1127,13 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n                 expn_id,\n             }) => ExprInlineAsm(InlineAsm {\n                 inputs: inputs.move_map(|(c, input)| (c, folder.fold_expr(input))),\n-                outputs: outputs.move_map(|(c, out, is_rw, is_indirect)| {\n-                    (c, folder.fold_expr(out), is_rw, is_indirect)\n+                outputs: outputs.move_map(|out| {\n+                    InlineAsmOutput {\n+                        constraint: out.constraint,\n+                        expr: folder.fold_expr(out.expr),\n+                        is_rw: out.is_rw,\n+                        is_indirect: out.is_indirect,\n+                    }\n                 }),\n                 asm: asm,\n                 asm_str_style: asm_str_style,"}, {"sha": "192209b8f7628fc44bb290b3329f67290972acf0", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -887,11 +887,19 @@ pub enum Ty_ {\n     TyInfer,\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct InlineAsmOutput {\n+    pub constraint: InternedString,\n+    pub expr: P<Expr>,\n+    pub is_rw: bool,\n+    pub is_indirect: bool,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<(InternedString, P<Expr>, bool, bool)>,\n+    pub outputs: Vec<InlineAsmOutput>,\n     pub inputs: Vec<(InternedString, P<Expr>)>,\n     pub clobbers: Vec<InternedString>,\n     pub volatile: bool,"}, {"sha": "bf77301b03a778df0bb2fe6f6a84c1c5912885d5", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -803,8 +803,8 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             for &(_, ref input) in &ia.inputs {\n                 visitor.visit_expr(&input)\n             }\n-            for &(_, ref output, _, _) in &ia.outputs {\n-                visitor.visit_expr(&output)\n+            for output in &ia.outputs {\n+                visitor.visit_expr(&output.expr)\n             }\n         }\n     }"}, {"sha": "2baee3f52837d1bf726c63ddd765ea6462033fbe", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -1202,8 +1202,13 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                               .map(|&(ref c, ref input)| (c.clone(), lower_expr(lctx, input)))\n                               .collect(),\n                 outputs: outputs.iter()\n-                                .map(|&(ref c, ref out, is_rw, is_indirect)| {\n-                                    (c.clone(), lower_expr(lctx, out), is_rw, is_indirect)\n+                                .map(|out| {\n+                                    hir::InlineAsmOutput {\n+                                        constraint: out.constraint.clone(),\n+                                        expr: lower_expr(lctx, &out.expr),\n+                                        is_rw: out.is_rw,\n+                                        is_indirect: out.is_indirect,\n+                                    }\n                                 })\n                                 .collect(),\n                 asm: asm.clone(),"}, {"sha": "d4cd70df38a495c48fed16c30b69bb48364b55e8", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -1502,15 +1502,15 @@ impl<'a> State<'a> {\n                 try!(self.print_string(&a.asm, a.asm_str_style));\n                 try!(self.word_space(\":\"));\n \n-                try!(self.commasep(Inconsistent, &a.outputs, |s, &(ref co, ref o, is_rw, _)| {\n-                    match co.slice_shift_char() {\n-                        Some(('=', operand)) if is_rw => {\n+                try!(self.commasep(Inconsistent, &a.outputs, |s, out| {\n+                    match out.constraint.slice_shift_char() {\n+                        Some(('=', operand)) if out.is_rw => {\n                             try!(s.print_string(&format!(\"+{}\", operand), ast::CookedStr))\n                         }\n-                        _ => try!(s.print_string(&co, ast::CookedStr)),\n+                        _ => try!(s.print_string(&out.constraint, ast::CookedStr)),\n                     }\n                     try!(s.popen());\n-                    try!(s.print_expr(&**o));\n+                    try!(s.print_expr(&*out.expr));\n                     try!(s.pclose());\n                     Ok(())\n                 }));"}, {"sha": "ea0397c690c1d4396a831ddad617b5ba296e8210", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -41,27 +41,27 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n     // Prepare the output operands\n     let mut outputs = Vec::new();\n     let mut inputs = Vec::new();\n-    for (i, &(ref c, ref out, is_rw, is_indirect)) in ia.outputs.iter().enumerate() {\n-        constraints.push((*c).clone());\n+    for (i, out) in ia.outputs.iter().enumerate() {\n+        constraints.push(out.constraint.clone());\n \n-        let out_datum = unpack_datum!(bcx, expr::trans(bcx, &**out));\n-        if is_indirect {\n+        let out_datum = unpack_datum!(bcx, expr::trans(bcx, &*out.expr));\n+        if out.is_indirect {\n             bcx = callee::trans_arg_datum(bcx,\n-                                          expr_ty(bcx, &**out),\n+                                          expr_ty(bcx, &*out.expr),\n                                           out_datum,\n                                           cleanup::CustomScope(temp_scope),\n                                           callee::DontAutorefArg,\n                                           &mut inputs);\n-            if is_rw {\n+            if out.is_rw {\n                 ext_inputs.push(*inputs.last().unwrap());\n                 ext_constraints.push(i.to_string());\n             }\n         } else {\n             output_types.push(type_of::type_of(bcx.ccx(), out_datum.ty));\n             outputs.push(out_datum.val);\n-            if is_rw {\n+            if out.is_rw {\n                 bcx = callee::trans_arg_datum(bcx,\n-                                              expr_ty(bcx, &**out),\n+                                              expr_ty(bcx, &*out.expr),\n                                               out_datum,\n                                               cleanup::CustomScope(temp_scope),\n                                               callee::DontAutorefArg,"}, {"sha": "c9bcfe23aea967982ae0f5348ebc436dd67e0bc9", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -480,8 +480,8 @@ fn walk_expr(cx: &CrateContext,\n                 walk_expr(cx, &**exp, scope_stack, scope_map);\n             }\n \n-            for &(_, ref exp, _, _) in outputs {\n-                walk_expr(cx, &**exp, scope_stack, scope_map);\n+            for out in outputs {\n+                walk_expr(cx, &*out.expr, scope_stack, scope_map);\n             }\n         }\n     }"}, {"sha": "e3439b6cf7fdeb4bd9362ac175d4bc47d6e1e17e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -3393,8 +3393,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n           for &(_, ref input) in &ia.inputs {\n               check_expr(fcx, &**input);\n           }\n-          for &(_, ref out, _, _) in &ia.outputs {\n-              check_expr(fcx, &**out);\n+          for out in &ia.outputs {\n+              check_expr(fcx, &*out.expr);\n           }\n           fcx.write_nil(id);\n       }"}, {"sha": "46110a3bee9b1a5263b19d9090337eb646a1df84", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -1458,11 +1458,19 @@ pub enum AsmDialect {\n     Intel,\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct InlineAsmOutput {\n+    pub constraint: InternedString,\n+    pub expr: P<Expr>,\n+    pub is_rw: bool,\n+    pub is_indirect: bool,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<(InternedString, P<Expr>, bool, bool)>,\n+    pub outputs: Vec<InlineAsmOutput>,\n     pub inputs: Vec<(InternedString, P<Expr>)>,\n     pub clobbers: Vec<InternedString>,\n     pub volatile: bool,"}, {"sha": "b4f29f837263fdcef85b80945e45a5d57e7ab653", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -126,7 +126,12 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n                     let is_rw = output.is_some();\n                     let is_indirect = constraint.contains(\"*\");\n-                    outputs.push((output.unwrap_or(constraint), out, is_rw, is_indirect));\n+                    outputs.push(ast::InlineAsmOutput {\n+                        constraint: output.unwrap_or(constraint),\n+                        expr: out,\n+                        is_rw: is_rw,\n+                        is_indirect: is_indirect,\n+                    });\n                 }\n             }\n             Inputs => {"}, {"sha": "c637813f07e5b1270496e086c64b750ce386f95f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -1303,8 +1303,13 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 inputs: inputs.move_map(|(c, input)| {\n                     (c, folder.fold_expr(input))\n                 }),\n-                outputs: outputs.move_map(|(c, out, is_rw, is_indirect)| {\n-                    (c, folder.fold_expr(out), is_rw, is_indirect)\n+                outputs: outputs.move_map(|out| {\n+                    InlineAsmOutput {\n+                        constraint: out.constraint,\n+                        expr: folder.fold_expr(out.expr),\n+                        is_rw: out.is_rw,\n+                        is_indirect: out.is_indirect,\n+                    }\n                 }),\n                 asm: asm,\n                 asm_str_style: asm_str_style,"}, {"sha": "a96908e23dba8f83ccd18b4c081459e853c8e2e5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -2221,16 +2221,16 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\":\"));\n \n                 try!(self.commasep(Inconsistent, &a.outputs,\n-                                   |s, &(ref co, ref o, is_rw, _)| {\n-                    match co.slice_shift_char() {\n-                        Some(('=', operand)) if is_rw => {\n+                                   |s, out| {\n+                    match out.constraint.slice_shift_char() {\n+                        Some(('=', operand)) if out.is_rw => {\n                             try!(s.print_string(&format!(\"+{}\", operand),\n                                                 ast::CookedStr))\n                         }\n-                        _ => try!(s.print_string(&co, ast::CookedStr))\n+                        _ => try!(s.print_string(&out.constraint, ast::CookedStr))\n                     }\n                     try!(s.popen());\n-                    try!(s.print_expr(&**o));\n+                    try!(s.print_expr(&*out.expr));\n                     try!(s.pclose());\n                     Ok(())\n                 }));"}, {"sha": "22bf135f4f9779750e136ac6c5e6b8a2d96ad66e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65707dfc001b4dea745a040c2ecc61847ccba608/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=65707dfc001b4dea745a040c2ecc61847ccba608", "patch": "@@ -786,8 +786,8 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             for &(_, ref input) in &ia.inputs {\n                 visitor.visit_expr(&input)\n             }\n-            for &(_, ref output, _, _) in &ia.outputs {\n-                visitor.visit_expr(&output)\n+            for output in &ia.outputs {\n+                visitor.visit_expr(&output.expr)\n             }\n         }\n     }"}]}