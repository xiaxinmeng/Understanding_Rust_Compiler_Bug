{"sha": "f4a9d9a00f0462bce92ddbac24cb91825c8ab192", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTlkOWEwMGYwNDYyYmNlOTJkZGJhYzI0Y2I5MTgyNWM4YWIxOTI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-09T15:33:49Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-09T15:33:49Z"}, "message": "Address review comments", "tree": {"sha": "8bc162b698b7a4f156f1d030b064e0fd4a28f72e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc162b698b7a4f156f1d030b064e0fd4a28f72e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a9d9a00f0462bce92ddbac24cb91825c8ab192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a9d9a00f0462bce92ddbac24cb91825c8ab192", "html_url": "https://github.com/rust-lang/rust/commit/f4a9d9a00f0462bce92ddbac24cb91825c8ab192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a9d9a00f0462bce92ddbac24cb91825c8ab192/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984b6889ebeb0cb2e29fb893f5168a9b6de2842f", "url": "https://api.github.com/repos/rust-lang/rust/commits/984b6889ebeb0cb2e29fb893f5168a9b6de2842f", "html_url": "https://github.com/rust-lang/rust/commit/984b6889ebeb0cb2e29fb893f5168a9b6de2842f"}], "stats": {"total": 69, "additions": 29, "deletions": 40}, "files": [{"sha": "510c80b904edde71a5f0427a8a8cccec630cb140", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4a9d9a00f0462bce92ddbac24cb91825c8ab192/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f4a9d9a00f0462bce92ddbac24cb91825c8ab192/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f4a9d9a00f0462bce92ddbac24cb91825c8ab192", "patch": "@@ -1104,6 +1104,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"chalk-solve\",\n  \"ena\",\n+ \"expect\",\n  \"insta\",\n  \"itertools\",\n  \"log\","}, {"sha": "ce257dc0bb58d6d295261d6fda9c297139e06090", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4a9d9a00f0462bce92ddbac24cb91825c8ab192/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4a9d9a00f0462bce92ddbac24cb91825c8ab192/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=f4a9d9a00f0462bce92ddbac24cb91825c8ab192", "patch": "@@ -32,3 +32,4 @@ chalk-ir = { version = \"0.15.0\" }\n \n [dev-dependencies]\n insta = \"0.16.0\"\n+expect = { path = \"../expect\" }"}, {"sha": "6f34aaf170c28d842199571d7132ba1e1c3f8c50", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 27, "deletions": 40, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f4a9d9a00f0462bce92ddbac24cb91825c8ab192/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a9d9a00f0462bce92ddbac24cb91825c8ab192/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=f4a9d9a00f0462bce92ddbac24cb91825c8ab192", "patch": "@@ -151,16 +151,15 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     fn validate_call(&mut self, db: &dyn HirDatabase, call_id: ExprId, expr: &Expr) -> Option<()> {\n         // Check that the number of arguments matches the number of parameters.\n \n-        // Due to shortcomings in the current type system implementation, only emit this diagnostic\n-        // if there are no type mismatches in the containing function.\n+        // FIXME: Due to shortcomings in the current type system implementation, only emit this\n+        // diagnostic if there are no type mismatches in the containing function.\n         if self.infer.type_mismatches.iter().next().is_some() {\n             return Some(());\n         }\n \n-        let is_method_call;\n+        let is_method_call = matches!(expr, Expr::MethodCall { .. });\n         let (callee, args) = match expr {\n             Expr::Call { callee, args } => {\n-                is_method_call = false;\n                 let callee = &self.infer.type_of_expr[*callee];\n                 let (callable, _) = callee.as_callable()?;\n                 let callee = match callable {\n@@ -173,7 +172,6 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 (callee, args.clone())\n             }\n             Expr::MethodCall { receiver, args, .. } => {\n-                is_method_call = true;\n                 let callee = self.infer.method_resolution(call_id)?;\n                 let mut args = args.clone();\n                 args.insert(0, *receiver);\n@@ -389,13 +387,14 @@ pub fn record_pattern_missing_fields(\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_snapshot;\n+    use expect::{expect, Expect};\n     use ra_db::fixture::WithFixture;\n \n     use crate::{diagnostics::MismatchedArgCount, test_db::TestDB};\n \n-    fn check_diagnostic_message(ra_fixture: &str) -> String {\n-        TestDB::with_single_file(ra_fixture).0.diagnostic::<MismatchedArgCount>().0\n+    fn check_diagnostic(ra_fixture: &str, expect: Expect) {\n+        let msg = TestDB::with_single_file(ra_fixture).0.diagnostic::<MismatchedArgCount>().0;\n+        expect.assert_eq(&msg);\n     }\n \n     fn check_no_diagnostic(ra_fixture: &str) {\n@@ -407,55 +406,43 @@ mod tests {\n \n     #[test]\n     fn simple_free_fn_zero() {\n-        assert_snapshot!(check_diagnostic_message(\n+        check_diagnostic(\n             r\"\n             fn zero() {}\n-\n-            fn f() {\n-                zero(1);\n-            }\n-            \"\n-        ),\n-        @\"\\\"zero(1)\\\": Expected 0 arguments, found 1\\n\");\n+            fn f() { zero(1); }\n+            \",\n+            expect![[\"\\\"zero(1)\\\": Expected 0 arguments, found 1\\n\"]],\n+        );\n \n         check_no_diagnostic(\n             r\"\n             fn zero() {}\n-\n-            fn f() {\n-                zero();\n-            }\n+            fn f() { zero(); }\n             \",\n         );\n     }\n \n     #[test]\n     fn simple_free_fn_one() {\n-        assert_snapshot!(check_diagnostic_message(\n+        check_diagnostic(\n             r\"\n             fn one(arg: u8) {}\n-\n-            fn f() {\n-                one();\n-            }\n-            \"\n-        ),\n-        @\"\\\"one()\\\": Expected 1 argument, found 0\\n\");\n+            fn f() { one(); }\n+            \",\n+            expect![[\"\\\"one()\\\": Expected 1 argument, found 0\\n\"]],\n+        );\n \n         check_no_diagnostic(\n             r\"\n             fn one(arg: u8) {}\n-\n-            fn f() {\n-                one(1);\n-            }\n+            fn f() { one(1); }\n             \",\n         );\n     }\n \n     #[test]\n     fn method_as_fn() {\n-        assert_snapshot!(check_diagnostic_message(\n+        check_diagnostic(\n             r\"\n             struct S;\n             impl S {\n@@ -465,9 +452,9 @@ mod tests {\n             fn f() {\n                 S::method();\n             }\n-            \"\n-        ),\n-        @\"\\\"S::method()\\\": Expected 1 argument, found 0\\n\");\n+            \",\n+            expect![[\"\\\"S::method()\\\": Expected 1 argument, found 0\\n\"]],\n+        );\n \n         check_no_diagnostic(\n             r\"\n@@ -486,7 +473,7 @@ mod tests {\n \n     #[test]\n     fn method_with_arg() {\n-        assert_snapshot!(check_diagnostic_message(\n+        check_diagnostic(\n             r\"\n             struct S;\n             impl S {\n@@ -496,9 +483,9 @@ mod tests {\n             fn f() {\n                 S.method();\n             }\n-            \"\n-        ),\n-        @\"\\\"S.method()\\\": Expected 1 argument, found 0\\n\");\n+            \",\n+            expect![[\"\\\"S.method()\\\": Expected 1 argument, found 0\\n\"]],\n+        );\n \n         check_no_diagnostic(\n             r\""}]}