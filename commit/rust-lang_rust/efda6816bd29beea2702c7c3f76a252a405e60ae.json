{"sha": "efda6816bd29beea2702c7c3f76a252a405e60ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGE2ODE2YmQyOWJlZWEyNzAyYzdjM2Y3NmEyNTJhNDA1ZTYwYWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-18T12:31:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-18T12:31:05Z"}, "message": "Allow evaluating trivial drop glue in constants", "tree": {"sha": "c00141747fd2000905b27e2aa2da3793232e6152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00141747fd2000905b27e2aa2da3793232e6152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efda6816bd29beea2702c7c3f76a252a405e60ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efda6816bd29beea2702c7c3f76a252a405e60ae", "html_url": "https://github.com/rust-lang/rust/commit/efda6816bd29beea2702c7c3f76a252a405e60ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efda6816bd29beea2702c7c3f76a252a405e60ae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc4e417fa2a73d5ffa24428df6b7d4dbbf41f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc4e417fa2a73d5ffa24428df6b7d4dbbf41f4a", "html_url": "https://github.com/rust-lang/rust/commit/1dc4e417fa2a73d5ffa24428df6b7d4dbbf41f4a"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "f6ecf7c9436a2277060f33488fd23912a518bac6", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/efda6816bd29beea2702c7c3f76a252a405e60ae/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda6816bd29beea2702c7c3f76a252a405e60ae/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=efda6816bd29beea2702c7c3f76a252a405e60ae", "patch": "@@ -391,19 +391,22 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         ret: Option<mir::BasicBlock>,\n     ) -> EvalResult<'tcx, Option<&'mir mir::Mir<'tcx>>> {\n         debug!(\"eval_fn_call: {:?}\", instance);\n-        // Execution might have wandered off into other crates, so we cannot to a stability-\n-        // sensitive check here.  But we can at least rule out functions that are not const\n-        // at all.\n-        if !ecx.tcx.is_const_fn_raw(instance.def_id()) {\n-            // Some functions we support even if they are non-const -- but avoid testing\n-            // that for const fn!  We certainly do *not* want to actually call the fn\n-            // though, so be sure we return here.\n-            return if ecx.hook_fn(instance, args, dest)? {\n-                ecx.goto_block(ret)?; // fully evaluated and done\n-                Ok(None)\n-            } else {\n-                err!(MachineError(format!(\"calling non-const function `{}`\", instance)))\n-            };\n+        // Only check non-glue functions\n+        if let ty::InstanceDef::Item(def_id) = instance.def {\n+            // Execution might have wandered off into other crates, so we cannot to a stability-\n+            // sensitive check here.  But we can at least rule out functions that are not const\n+            // at all.\n+            if !ecx.tcx.is_const_fn_raw(def_id) {\n+                // Some functions we support even if they are non-const -- but avoid testing\n+                // that for const fn!  We certainly do *not* want to actually call the fn\n+                // though, so be sure we return here.\n+                return if ecx.hook_fn(instance, args, dest)? {\n+                    ecx.goto_block(ret)?; // fully evaluated and done\n+                    Ok(None)\n+                } else {\n+                    err!(MachineError(format!(\"calling non-const function `{}`\", instance)))\n+                };\n+            }\n         }\n         // This is a const fn. Call it.\n         Ok(Some(match ecx.load_mir(instance.def) {"}, {"sha": "86a197ffb993ece641d6e19edd1f54e652eb32db", "filename": "src/test/ui/consts/drop_none.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efda6816bd29beea2702c7c3f76a252a405e60ae/src%2Ftest%2Fui%2Fconsts%2Fdrop_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda6816bd29beea2702c7c3f76a252a405e60ae/src%2Ftest%2Fui%2Fconsts%2Fdrop_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_none.rs?ref=efda6816bd29beea2702c7c3f76a252a405e60ae", "patch": "@@ -0,0 +1,13 @@\n+// compile-pass\n+#![allow(dead_code)]\n+struct A;\n+impl Drop for A {\n+    fn drop(&mut self) {}\n+}\n+\n+const FOO: Option<A> = None;\n+\n+const BAR: () = (FOO, ()).1;\n+\n+\n+fn main() {}"}]}