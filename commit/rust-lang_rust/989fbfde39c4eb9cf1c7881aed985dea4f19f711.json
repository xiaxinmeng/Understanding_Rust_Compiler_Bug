{"sha": "989fbfde39c4eb9cf1c7881aed985dea4f19f711", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OWZiZmRlMzljNGViOWNmMWM3ODgxYWVkOTg1ZGVhNGYxOWY3MTE=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-21T11:09:44Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-22T08:56:10Z"}, "message": "Make fmt_metrics() part of the impl.", "tree": {"sha": "20b7a16181aa60c9284e5901b34ba49e82308f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b7a16181aa60c9284e5901b34ba49e82308f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989fbfde39c4eb9cf1c7881aed985dea4f19f711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989fbfde39c4eb9cf1c7881aed985dea4f19f711", "html_url": "https://github.com/rust-lang/rust/commit/989fbfde39c4eb9cf1c7881aed985dea4f19f711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989fbfde39c4eb9cf1c7881aed985dea4f19f711/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6a129aec86341a2b066a338a78b9e5509137c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6a129aec86341a2b066a338a78b9e5509137c5", "html_url": "https://github.com/rust-lang/rust/commit/8a6a129aec86341a2b066a338a78b9e5509137c5"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "3412e61ff153f99e3b2dcad2172421fddddd5b73", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/989fbfde39c4eb9cf1c7881aed985dea4f19f711/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fbfde39c4eb9cf1c7881aed985dea4f19f711/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=989fbfde39c4eb9cf1c7881aed985dea4f19f711", "patch": "@@ -544,7 +544,7 @@ impl<T: Writer> ConsoleTestState<T> {\n             TrIgnored => self.write_ignored(),\n             TrMetrics(ref mm) => {\n                 try!(self.write_metric());\n-                self.write_plain(format!(\": {}\", fmt_metrics(mm)).as_slice())\n+                self.write_plain(format!(\": {}\", mm.fmt_metrics()).as_slice())\n             }\n             TrBench(ref bs) => {\n                 try!(self.write_bench());\n@@ -587,7 +587,7 @@ impl<T: Writer> ConsoleTestState<T> {\n                         TrOk => \"ok\".to_string(),\n                         TrFailed => \"failed\".to_string(),\n                         TrIgnored => \"ignored\".to_string(),\n-                        TrMetrics(ref mm) => fmt_metrics(mm),\n+                        TrMetrics(ref mm) => mm.fmt_metrics(),\n                         TrBench(ref bs) => fmt_bench_samples(bs)\n                     }, test.name.as_slice());\n                 o.write(s.as_bytes())\n@@ -645,15 +645,6 @@ impl<T: Writer> ConsoleTestState<T> {\n     }\n }\n \n-pub fn fmt_metrics(mm: &MetricMap) -> String {\n-    let MetricMap(ref mm) = *mm;\n-    let v : Vec<String> = mm.iter()\n-        .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n-                             v.value as f64, v.noise as f64))\n-        .collect();\n-    v.connect(\", \")\n-}\n-\n pub fn fmt_bench_samples(bs: &BenchSamples) -> String {\n     if bs.mb_s != 0 {\n         format!(\"{:>9} ns/iter (+/- {}) = {} MB/s\",\n@@ -1010,6 +1001,15 @@ impl MetricMap {\n         let MetricMap(ref mut map) = *self;\n         map.insert(name.to_string(), m);\n     }\n+\n+    pub fn fmt_metrics(&self) -> String {\n+        let MetricMap(ref mm) = *self;\n+        let v : Vec<String> = mm.iter()\n+            .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n+                                 v.value as f64, v.noise as f64))\n+            .collect();\n+        v.connect(\", \")\n+    }\n }\n \n "}]}