{"sha": "d4e7b083ceae25f15f1639cb432d466656aecd77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTdiMDgzY2VhZTI1ZjE1ZjE2MzljYjQzMmQ0NjY2NTZhZWNkNzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-30T14:45:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-20T11:21:40Z"}, "message": "Move cg_llvm/debuginfo/type_names.rs to cg_ssa", "tree": {"sha": "ac5726d882b1196c7ea01d6eeca0331ca643844b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac5726d882b1196c7ea01d6eeca0331ca643844b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e7b083ceae25f15f1639cb432d466656aecd77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e7b083ceae25f15f1639cb432d466656aecd77", "html_url": "https://github.com/rust-lang/rust/commit/d4e7b083ceae25f15f1639cb432d466656aecd77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e7b083ceae25f15f1639cb432d466656aecd77/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4566f5118c20889ca778565ba14a065a368dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4566f5118c20889ca778565ba14a065a368dc6", "html_url": "https://github.com/rust-lang/rust/commit/dd4566f5118c20889ca778565ba14a065a368dc6"}], "stats": {"total": 86, "additions": 41, "deletions": 45}, "files": [{"sha": "31348b99c5af0983f52883d4f1242bc1ff42124f", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=d4e7b083ceae25f15f1639cb432d466656aecd77", "patch": "@@ -376,7 +376,7 @@ fn vec_slice_metadata(\n \n     return_if_metadata_created_in_meantime!(cx, unique_type_id);\n \n-    let slice_type_name = compute_debuginfo_type_name(cx, slice_ptr_type, true);\n+    let slice_type_name = compute_debuginfo_type_name(cx.tcx, slice_ptr_type, true);\n \n     let (pointer_size, pointer_align) = cx.size_and_align_of(data_ptr_type);\n     let (usize_size, usize_align) = cx.size_and_align_of(cx.tcx.types.usize);\n@@ -479,7 +479,7 @@ fn trait_pointer_metadata(\n \n     let trait_object_type = trait_object_type.unwrap_or(trait_type);\n     let trait_type_name =\n-        compute_debuginfo_type_name(cx, trait_object_type, false);\n+        compute_debuginfo_type_name(cx.tcx, trait_object_type, false);\n \n     let file_metadata = unknown_file_metadata(cx);\n \n@@ -866,7 +866,7 @@ fn foreign_type_metadata(\n ) -> &'ll DIType {\n     debug!(\"foreign_type_metadata: {:?}\", t);\n \n-    let name = compute_debuginfo_type_name(cx, t, false);\n+    let name = compute_debuginfo_type_name(cx.tcx, t, false);\n     create_struct_stub(cx, t, &name, unique_type_id, NO_SCOPE_METADATA)\n }\n \n@@ -876,7 +876,7 @@ fn pointer_type_metadata(\n     pointee_type_metadata: &'ll DIType,\n ) -> &'ll DIType {\n     let (pointer_size, pointer_align) = cx.size_and_align_of(pointer_type);\n-    let name = compute_debuginfo_type_name(cx, pointer_type, false);\n+    let name = compute_debuginfo_type_name(cx.tcx, pointer_type, false);\n     let name = SmallCStr::new(&name);\n     unsafe {\n         llvm::LLVMRustDIBuilderCreatePointerType(\n@@ -1072,7 +1072,7 @@ fn prepare_struct_metadata(\n     unique_type_id: UniqueTypeId,\n     span: Span,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n-    let struct_name = compute_debuginfo_type_name(cx, struct_type, false);\n+    let struct_name = compute_debuginfo_type_name(cx.tcx, struct_type, false);\n \n     let (struct_def_id, variant) = match struct_type.sty {\n         ty::Adt(def, _) => (def.did, def.non_enum_variant()),\n@@ -1138,7 +1138,7 @@ fn prepare_tuple_metadata(\n     unique_type_id: UniqueTypeId,\n     span: Span,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n-    let tuple_name = compute_debuginfo_type_name(cx, tuple_type, false);\n+    let tuple_name = compute_debuginfo_type_name(cx.tcx, tuple_type, false);\n \n     let struct_stub = create_struct_stub(cx,\n                                          tuple_type,\n@@ -1194,7 +1194,7 @@ fn prepare_union_metadata(\n     unique_type_id: UniqueTypeId,\n     span: Span,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n-    let union_name = compute_debuginfo_type_name(cx, union_type, false);\n+    let union_name = compute_debuginfo_type_name(cx.tcx, union_type, false);\n \n     let (union_def_id, variant) = match union_type.sty {\n         ty::Adt(def, _) => (def.did, def.non_enum_variant()),\n@@ -1607,7 +1607,7 @@ fn prepare_enum_metadata(\n     unique_type_id: UniqueTypeId,\n     span: Span,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n-    let enum_name = compute_debuginfo_type_name(cx, enum_type, false);\n+    let enum_name = compute_debuginfo_type_name(cx.tcx, enum_type, false);\n \n     let containing_scope = get_namespace_for_item(cx, enum_def_id);\n     // FIXME: This should emit actual file metadata for the enum, but we"}, {"sha": "ae498673c1d845e4e244242e03fa17801a7df498", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=d4e7b083ceae25f15f1639cb432d466656aecd77", "patch": "@@ -29,7 +29,7 @@ use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_codegen_ssa::debuginfo::{FunctionDebugContext, MirDebugScope, VariableAccess,\n-    VariableKind, FunctionDebugContextData};\n+    VariableKind, FunctionDebugContextData, type_names};\n \n use libc::c_uint;\n use std::cell::RefCell;\n@@ -44,7 +44,6 @@ use rustc_codegen_ssa::traits::*;\n pub mod gdb;\n mod utils;\n mod namespace;\n-mod type_names;\n pub mod metadata;\n mod create_scope_map;\n mod source_loc;\n@@ -422,7 +421,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 let actual_type =\n                     cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), actual_type);\n                 // Add actual type name to <...> clause of function name\n-                let actual_type_name = compute_debuginfo_type_name(cx,\n+                let actual_type_name = compute_debuginfo_type_name(cx.tcx(),\n                                                                    actual_type,\n                                                                    true);\n                 name_to_append_suffix_to.push_str(&actual_type_name[..]);"}, {"sha": "d60a2e0cb1358e0f67ad22722ff89f87215a2364", "filename": "src/librustc_codegen_ssa/debuginfo/mod.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs?ref=d4e7b083ceae25f15f1639cb432d466656aecd77", "patch": "@@ -1,6 +1,8 @@\n use syntax_pos::{BytePos, Span};\n use rustc::hir::def_id::CrateNum;\n \n+pub mod type_names;\n+\n pub enum FunctionDebugContext<D> {\n     RegularContext(FunctionDebugContextData<D>),\n     DebugInfoDisabled,", "previous_filename": "src/librustc_codegen_ssa/debuginfo.rs"}, {"sha": "fee6c5b04d0d13d9c028627fc2e787c1b1232e35", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "renamed", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e7b083ceae25f15f1639cb432d466656aecd77/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=d4e7b083ceae25f15f1639cb432d466656aecd77", "patch": "@@ -1,39 +1,34 @@\n // Type Names for Debug Info.\n \n-use crate::common::CodegenCx;\n-use rustc::hir::def_id::DefId;\n-use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, Ty};\n-use rustc_codegen_ssa::traits::*;\n+use rustc::hir::{self, def_id::DefId};\n+use rustc::ty::{self, Ty, TyCtxt, subst::SubstsRef};\n use rustc_data_structures::fx::FxHashSet;\n \n-use rustc::hir;\n-\n // Compute the name of the type as it should be stored in debuginfo. Does not do\n // any caching, i.e., calling the function twice with the same type will also do\n // the work twice. The `qualified` parameter only affects the first level of the\n // type name, further levels (i.e., type parameters) are always fully qualified.\n-pub fn compute_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n+pub fn compute_debuginfo_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              t: Ty<'tcx>,\n                                              qualified: bool)\n                                              -> String {\n     let mut result = String::with_capacity(64);\n     let mut visited = FxHashSet::default();\n-    push_debuginfo_type_name(cx, t, qualified, &mut result, &mut visited);\n+    push_debuginfo_type_name(tcx, t, qualified, &mut result, &mut visited);\n     result\n }\n \n // Pushes the name of the type as it should be stored in debuginfo on the\n // `output` String. See also compute_debuginfo_type_name().\n-pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n+pub fn push_debuginfo_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                           t: Ty<'tcx>,\n                                           qualified: bool,\n                                           output: &mut String,\n                                           visited: &mut FxHashSet<Ty<'tcx>>) {\n \n     // When targeting MSVC, emit C++ style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n-    let cpp_like_names = cx.sess().target.target.options.is_like_msvc;\n+    let cpp_like_names = tcx.sess.target.target.options.is_like_msvc;\n \n     match t.sty {\n         ty::Bool => output.push_str(\"bool\"),\n@@ -43,15 +38,15 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::Int(int_ty) => output.push_str(int_ty.ty_to_string()),\n         ty::Uint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n         ty::Float(float_ty) => output.push_str(float_ty.ty_to_string()),\n-        ty::Foreign(def_id) => push_item_name(cx, def_id, qualified, output),\n+        ty::Foreign(def_id) => push_item_name(tcx, def_id, qualified, output),\n         ty::Adt(def, substs) => {\n-            push_item_name(cx, def.did, qualified, output);\n-            push_type_params(cx, substs, output, visited);\n+            push_item_name(tcx, def.did, qualified, output);\n+            push_type_params(tcx, substs, output, visited);\n         },\n         ty::Tuple(component_types) => {\n             output.push('(');\n             for &component_type in component_types {\n-                push_debuginfo_type_name(cx, component_type, true, output, visited);\n+                push_debuginfo_type_name(tcx, component_type, true, output, visited);\n                 output.push_str(\", \");\n             }\n             if !component_types.is_empty() {\n@@ -69,7 +64,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 hir::MutMutable => output.push_str(\"mut \"),\n             }\n \n-            push_debuginfo_type_name(cx, inner_type, true, output, visited);\n+            push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n \n             if cpp_like_names {\n                 output.push('*');\n@@ -83,16 +78,16 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 output.push_str(\"mut \");\n             }\n \n-            push_debuginfo_type_name(cx, inner_type, true, output, visited);\n+            push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n \n             if cpp_like_names {\n                 output.push('*');\n             }\n         },\n         ty::Array(inner_type, len) => {\n             output.push('[');\n-            push_debuginfo_type_name(cx, inner_type, true, output, visited);\n-            output.push_str(&format!(\"; {}\", len.unwrap_usize(cx.tcx)));\n+            push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n+            output.push_str(&format!(\"; {}\", len.unwrap_usize(tcx)));\n             output.push(']');\n         },\n         ty::Slice(inner_type) => {\n@@ -102,7 +97,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 output.push('[');\n             }\n \n-            push_debuginfo_type_name(cx, inner_type, true, output, visited);\n+            push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n \n             if cpp_like_names {\n                 output.push('>');\n@@ -112,12 +107,12 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         },\n         ty::Dynamic(ref trait_data, ..) => {\n             if let Some(principal) = trait_data.principal() {\n-                let principal = cx.tcx.normalize_erasing_late_bound_regions(\n+                let principal = tcx.normalize_erasing_late_bound_regions(\n                     ty::ParamEnv::reveal_all(),\n                     &principal,\n                 );\n-                push_item_name(cx, principal.def_id, false, output);\n-                push_type_params(cx, principal.substs, output, visited);\n+                push_item_name(tcx, principal.def_id, false, output);\n+                push_type_params(tcx, principal.substs, output, visited);\n             } else {\n                 output.push_str(\"dyn '_\");\n             }\n@@ -142,24 +137,24 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             }\n \n \n-            let sig = t.fn_sig(cx.tcx);\n+            let sig = t.fn_sig(tcx);\n             if sig.unsafety() == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");\n             }\n \n             let abi = sig.abi();\n-            if abi != crate::abi::Abi::Rust {\n+            if abi != rustc_target::spec::abi::Abi::Rust {\n                 output.push_str(\"extern \\\"\");\n                 output.push_str(abi.name());\n                 output.push_str(\"\\\" \");\n             }\n \n             output.push_str(\"fn(\");\n \n-            let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+            let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n             if !sig.inputs().is_empty() {\n                 for &parameter_type in sig.inputs() {\n-                    push_debuginfo_type_name(cx, parameter_type, true, output, visited);\n+                    push_debuginfo_type_name(tcx, parameter_type, true, output, visited);\n                     output.push_str(\", \");\n                 }\n                 output.pop();\n@@ -178,7 +173,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n             if !sig.output().is_unit() {\n                 output.push_str(\" -> \");\n-                push_debuginfo_type_name(cx, sig.output(), true, output, visited);\n+                push_debuginfo_type_name(tcx, sig.output(), true, output, visited);\n             }\n \n \n@@ -213,18 +208,18 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n     }\n \n-    fn push_item_name(cx: &CodegenCx<'_, '_>,\n+    fn push_item_name(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                       def_id: DefId,\n                       qualified: bool,\n                       output: &mut String) {\n         if qualified {\n-            output.push_str(&cx.tcx.crate_name(def_id.krate).as_str());\n-            for path_element in cx.tcx.def_path(def_id).data {\n+            output.push_str(&tcx.crate_name(def_id.krate).as_str());\n+            for path_element in tcx.def_path(def_id).data {\n                 output.push_str(\"::\");\n                 output.push_str(&path_element.data.as_interned_str().as_str());\n             }\n         } else {\n-            output.push_str(&cx.tcx.item_name(def_id).as_str());\n+            output.push_str(&tcx.item_name(def_id).as_str());\n         }\n     }\n \n@@ -233,7 +228,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     // reconstructed for items from non-local crates. For local crates, this\n     // would be possible but with inlining and LTO we have to use the least\n     // common denominator - otherwise we would run into conflicts.\n-    fn push_type_params<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n+    fn push_type_params<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   substs: SubstsRef<'tcx>,\n                                   output: &mut String,\n                                   visited: &mut FxHashSet<Ty<'tcx>>) {\n@@ -244,7 +239,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         output.push('<');\n \n         for type_parameter in substs.types() {\n-            push_debuginfo_type_name(cx, type_parameter, true, output, visited);\n+            push_debuginfo_type_name(tcx, type_parameter, true, output, visited);\n             output.push_str(\", \");\n         }\n ", "previous_filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs"}]}