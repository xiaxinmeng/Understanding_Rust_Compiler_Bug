{"sha": "9bdd7f00401c0002011ab20b70b405a15fa9128c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGQ3ZjAwNDAxYzAwMDIwMTFhYjIwYjcwYjQwNWExNWZhOTEyOGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-05T06:59:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-13T01:24:34Z"}, "message": "Thread a id to `Obligation`", "tree": {"sha": "4c485e8acf9ff140f86035461a3c54b2e0bfbf56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c485e8acf9ff140f86035461a3c54b2e0bfbf56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bdd7f00401c0002011ab20b70b405a15fa9128c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdd7f00401c0002011ab20b70b405a15fa9128c", "html_url": "https://github.com/rust-lang/rust/commit/9bdd7f00401c0002011ab20b70b405a15fa9128c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bdd7f00401c0002011ab20b70b405a15fa9128c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efaddf7c96743c087861ba15bd9b48a2200ddfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efaddf7c96743c087861ba15bd9b48a2200ddfd", "html_url": "https://github.com/rust-lang/rust/commit/4efaddf7c96743c087861ba15bd9b48a2200ddfd"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "9aa258c16aa16f7715dd40d70a9b63b5c5519ba6", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -36,7 +36,7 @@ use util::nodemap::NodeSet;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::visit::Visitor;\n-use syntax::codemap::{DUMMY_SP, Span};\n+use syntax::codemap::Span;\n use syntax::visit;\n \n #[deriving(Eq, PartialEq)]\n@@ -119,7 +119,7 @@ impl<'a, 'tcx> CheckStaticVisitor<'a, 'tcx> {\n         let ty = ty::node_id_to_type(self.tcx, e.id);\n         let infcx = infer::new_infer_ctxt(self.tcx);\n         let mut fulfill_cx = traits::FulfillmentContext::new();\n-        let cause = traits::ObligationCause::misc(DUMMY_SP);\n+        let cause = traits::ObligationCause::dummy();\n         let obligation = traits::obligation_for_builtin_bound(self.tcx, cause, ty,\n                                                               ty::BoundSync);\n         fulfill_cx.register_obligation(self.tcx, obligation.unwrap());"}, {"sha": "822979c86017b22aa2fc81af6c0ffcda5d59d032", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -11,7 +11,7 @@\n //! See `doc.rs` for high-level documentation\n \n use super::SelectionContext;\n-use super::Obligation;\n+use super::{Obligation, ObligationCause};\n use super::util;\n \n use middle::subst;\n@@ -48,7 +48,7 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n     // same types.\n     let param_env = ty::empty_parameter_environment();\n     let mut selcx = SelectionContext::intercrate(infcx, &param_env, infcx.tcx);\n-    let obligation = Obligation::misc(DUMMY_SP, impl1_trait_ref);\n+    let obligation = Obligation::new(ObligationCause::dummy(), impl1_trait_ref);\n     debug!(\"impl_can_satisfy(obligation={})\", obligation.repr(infcx.tcx));\n     selcx.evaluate_impl(impl2_def_id, &obligation)\n }"}, {"sha": "2600640a17daf77a22ea064e27c83229092fe6e2", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -59,6 +59,10 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, Rc<ty::TraitRef<'tcx>>>;\n #[deriving(Copy, Clone)]\n pub struct ObligationCause<'tcx> {\n     pub span: Span,\n+\n+    // the id of XXX\n+    pub scope_id: ast::NodeId,\n+\n     pub code: ObligationCauseCode<'tcx>\n }\n \n@@ -303,8 +307,8 @@ impl<'tcx,O> Obligation<'tcx,O> {\n                      trait_ref: trait_ref }\n     }\n \n-    pub fn misc(span: Span, trait_ref: O) -> Obligation<'tcx, O> {\n-        Obligation::new(ObligationCause::misc(span), trait_ref)\n+    pub fn misc(span: Span, scope_id: ast::NodeId, trait_ref: O) -> Obligation<'tcx, O> {\n+        Obligation::new(ObligationCause::misc(span, scope_id), trait_ref)\n     }\n }\n \n@@ -315,17 +319,19 @@ impl<'tcx> Obligation<'tcx,Rc<ty::TraitRef<'tcx>>> {\n }\n \n impl<'tcx> ObligationCause<'tcx> {\n-    pub fn new(span: Span, code: ObligationCauseCode<'tcx>)\n+    pub fn new(span: Span,\n+               scope_id: ast::NodeId,\n+               code: ObligationCauseCode<'tcx>)\n                -> ObligationCause<'tcx> {\n-        ObligationCause { span: span, code: code }\n+        ObligationCause { span: span, scope_id: scope_id, code: code }\n     }\n \n-    pub fn misc(span: Span) -> ObligationCause<'tcx> {\n-        ObligationCause { span: span, code: MiscObligation }\n+    pub fn misc(span: Span, scope_id: ast::NodeId) -> ObligationCause<'tcx> {\n+        ObligationCause { span: span, scope_id: scope_id, code: MiscObligation }\n     }\n \n     pub fn dummy() -> ObligationCause<'tcx> {\n-        ObligationCause { span: DUMMY_SP, code: MiscObligation }\n+        ObligationCause { span: DUMMY_SP, scope_id: 0, code: MiscObligation }\n     }\n }\n "}, {"sha": "ee13fc5e3460079393c80370c036b643547b563d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -78,7 +78,7 @@ use std::rc::Rc;\n use std::collections::hash_map::{HashMap, Occupied, Vacant};\n use arena::TypedArena;\n use syntax::abi;\n-use syntax::ast::{CrateNum, DefId, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n+use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n use syntax::ast::{MutImmutable, MutMutable, Name, NamedField, NodeId};\n use syntax::ast::{Onceness, StmtExpr, StmtSemi, StructField, UnnamedField};\n use syntax::ast::{Visibility};\n@@ -3158,9 +3158,15 @@ pub fn type_moves_by_default<'tcx>(cx: &ctxt<'tcx>,\n \n     let infcx = infer::new_infer_ctxt(cx);\n     let mut fulfill_cx = traits::FulfillmentContext::new();\n+\n+    // we can use dummy values here because we won't report any errors\n+    // that result nor will we pay any mind to region obligations that arise\n+    // (there shouldn't really be any anyhow)\n+    let cause = ObligationCause::misc(DUMMY_SP, DUMMY_NODE_ID);\n+\n     let obligation = traits::obligation_for_builtin_bound(\n         cx,\n-        ObligationCause::misc(DUMMY_SP),\n+        cause,\n         ty,\n         ty::BoundCopy).unwrap();\n     fulfill_cx.register_obligation(cx, obligation);\n@@ -5846,7 +5852,7 @@ pub fn empty_parameter_environment<'tcx>() -> ParameterEnvironment<'tcx> {\n /// See `ParameterEnvironment` struct def'n for details\n pub fn construct_parameter_environment<'tcx>(\n     tcx: &ctxt<'tcx>,\n-    span: Span,\n+    _span: Span,\n     generics: &ty::Generics<'tcx>,\n     free_id: ast::NodeId)\n     -> ParameterEnvironment<'tcx>\n@@ -5884,7 +5890,7 @@ pub fn construct_parameter_environment<'tcx>(\n     let bounds = generics.to_bounds(tcx, &free_substs);\n     let bounds = liberate_late_bound_regions(tcx, free_id_scope, &bind(bounds)).value;\n     let obligations = traits::obligations_for_generics(tcx,\n-                                                       traits::ObligationCause::misc(span),\n+                                                       traits::ObligationCause::dummy(),\n                                                        &bounds,\n                                                        &free_substs.types);\n     let type_bounds = bounds.types.subst(tcx, &free_substs);"}, {"sha": "da6aa84cfa118e32cb1422a3d7059b73f5cb21ac", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -793,7 +793,8 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // Do the initial selection for the obligation. This yields the\n     // shallow result we are looking for -- that is, what specific impl.\n     let mut selcx = traits::SelectionContext::new(&infcx, &param_env, tcx);\n-    let obligation = traits::Obligation::misc(span, trait_ref.clone());\n+    let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n+                                             trait_ref.clone());\n     let selection = match selcx.select(&obligation) {\n         Ok(Some(selection)) => selection,\n         Ok(None) => {"}, {"sha": "7b43b97a4bb36f00fcc2464047561fc581df0b2f", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -462,7 +462,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                method_bounds.repr(self.tcx()));\n \n         self.fcx.add_obligations_for_parameters(\n-            traits::ObligationCause::misc(self.span),\n+            traits::ObligationCause::misc(self.span, self.fcx.body_id),\n             method_bounds_substs,\n             method_bounds);\n "}, {"sha": "1ab76740962bde00d6c8a1b919f4560bf99009aa", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -169,7 +169,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     let trait_ref = Rc::new(ty::TraitRef::new(trait_def_id, substs));\n \n     // Construct an obligation\n-    let obligation = traits::Obligation::misc(span, trait_ref.clone());\n+    let obligation = traits::Obligation::misc(span, fcx.body_id, trait_ref.clone());\n \n     // Now we want to know if this can be matched\n     let mut selcx = traits::SelectionContext::new(fcx.infcx(),\n@@ -219,7 +219,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     let method_bounds = method_ty.generics.to_bounds(fcx.tcx(), &trait_ref.substs);\n     assert!(!method_bounds.has_escaping_regions());\n     fcx.add_obligations_for_parameters(\n-        traits::ObligationCause::misc(span),\n+        traits::ObligationCause::misc(span, fcx.body_id),\n         &trait_ref.substs,\n         &method_bounds);\n "}, {"sha": "3d7590db748efc9010db77bdd8f03afd35ff65f7", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -804,7 +804,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     let obligations =\n                         traits::obligations_for_generics(\n                             self.tcx(),\n-                            traits::ObligationCause::misc(self.span),\n+                            traits::ObligationCause::misc(self.span, self.fcx.body_id),\n                             &impl_bounds,\n                             &substs.types);\n                     debug!(\"impl_obligations={}\", obligations.repr(self.tcx()));"}, {"sha": "265766029b50536a529bb884f1be0574daab5bc4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -1790,6 +1790,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.add_obligations_for_parameters(\n             traits::ObligationCause::new(\n                 span,\n+                self.body_id,\n                 traits::ItemObligation(def_id)),\n             &substs,\n             &bounds);\n@@ -1817,7 +1818,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         let obligation = traits::obligation_for_builtin_bound(\n             self.tcx(),\n-            traits::ObligationCause::new(span, code),\n+            traits::ObligationCause::new(span, self.body_id, code),\n             ty,\n             bound);\n         if let Ok(ob) = obligation {\n@@ -5197,7 +5198,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     debug!(\"after late-bounds have been replaced: bounds={}\", bounds.repr(fcx.tcx()));\n \n     fcx.add_obligations_for_parameters(\n-        traits::ObligationCause::new(span, traits::ItemObligation(def.def_id())),\n+        traits::ObligationCause::new(span, fcx.body_id, traits::ItemObligation(def.def_id())),\n         &substs,\n         &bounds);\n "}, {"sha": "c53ad34a6d22cfb82a43ad01caf536107d3abb48", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -938,7 +938,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n             // Check that the type meets the criteria of the existential bounds:\n             for builtin_bound in bounds.builtin_bounds.iter() {\n                 let code = traits::ClosureCapture(var_node_id, expr.span);\n-                let cause = traits::ObligationCause::new(freevar.span, code);\n+                let cause = traits::ObligationCause::new(freevar.span, rcx.fcx.body_id, code);\n                 let obligation = traits::obligation_for_builtin_bound(rcx.tcx(), cause,\n                                                                       var_ty, builtin_bound);\n                 if let Ok(obligation) = obligation {"}, {"sha": "17651b9bfb61c18a9fb3e07272a0e8c435ad5f78", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -252,7 +252,7 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let sized_obligation =\n         traits::obligation_for_builtin_bound(\n             fcx.tcx(),\n-            traits::ObligationCause::new(span, traits::ObjectSized),\n+            traits::ObligationCause::new(span, fcx.body_id, traits::ObjectSized),\n             referent_ty,\n             ty::BoundSized);\n     match sized_obligation {\n@@ -287,6 +287,7 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let object_obligation =\n         Obligation::new(\n             ObligationCause::new(span,\n+                                 fcx.body_id,\n                                  traits::ObjectCastObligation(object_trait_ty)),\n             object_trait_ref.clone());\n     fcx.register_obligation(object_obligation);\n@@ -299,6 +300,7 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             let obligation = obligation_for_builtin_bound(\n                 fcx.tcx(),\n                 ObligationCause::new(span,\n+                                     fcx.body_id,\n                                      traits::ObjectCastObligation(object_trait_ty)),\n                 referent_ty,\n                 builtin_bound);"}, {"sha": "23db98b317583b81b196de4d5366102955d3847e", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdd7f00401c0002011ab20b70b405a15fa9128c/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=9bdd7f00401c0002011ab20b70b405a15fa9128c", "patch": "@@ -122,7 +122,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 // For DST, all intermediate types must be sized.\n                 if variant.fields.len() > 0 {\n                     for field in variant.fields.init().iter() {\n-                        let cause = traits::ObligationCause::new(field.span, traits::FieldSized);\n+                        let cause = traits::ObligationCause::new(field.span,\n+                                                                 fcx.body_id,\n+                                                                 traits::FieldSized);\n                         let obligation = traits::obligation_for_builtin_bound(fcx.tcx(),\n                                                                               cause,\n                                                                               field.ty,\n@@ -223,6 +225,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             let cause =\n                 traits::ObligationCause::new(\n                     item.span,\n+                    fcx.body_id,\n                     traits::ItemObligation(trait_ref.def_id));\n \n             // Find the supertrait bounds. This will add `int:Bar`.\n@@ -291,6 +294,7 @@ impl<'cx,'tcx> BoundsChecker<'cx,'tcx> {\n         self.fcx.add_obligations_for_parameters(\n             traits::ObligationCause::new(\n                 self.span,\n+                self.fcx.body_id,\n                 traits::ItemObligation(trait_ref.def_id)),\n             &trait_ref.substs,\n             &bounds);\n@@ -341,6 +345,7 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n                 if self.binding_count == 0 {\n                     self.fcx.add_obligations_for_parameters(\n                         traits::ObligationCause::new(self.span,\n+                                                     self.fcx.body_id,\n                                                      traits::ItemObligation(type_id)),\n                         substs,\n                         &polytype.generics.to_bounds(self.tcx(), substs));\n@@ -369,6 +374,7 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n                     // that will require an RFC. -nmatsakis)\n                     self.fcx.add_trait_obligations_for_generics(\n                         traits::ObligationCause::new(self.span,\n+                                                     self.fcx.body_id,\n                                                      traits::ItemObligation(type_id)),\n                         substs,\n                         &polytype.generics.to_bounds(self.tcx(), substs));\n@@ -469,7 +475,7 @@ fn check_struct_safe_for_destructor<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     if !struct_tpt.generics.has_type_params(subst::TypeSpace)\n         && !struct_tpt.generics.has_region_params(subst::TypeSpace)\n     {\n-        let cause = traits::ObligationCause::new(span, traits::DropTrait);\n+        let cause = traits::ObligationCause::new(span, fcx.body_id, traits::DropTrait);\n         let obligation = traits::obligation_for_builtin_bound(fcx.tcx(),\n                                                               cause,\n                                                               self_ty,"}]}