{"sha": "9fa3171015c63edc541d45583f2a24af3fa4d2bc", "node_id": "C_kwDOAAsO6NoAKDlmYTMxNzEwMTVjNjNlZGM1NDFkNDU1ODNmMmEyNGFmM2ZhNGQyYmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-18T17:08:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-18T18:51:04Z"}, "message": "interpret: expose generate_stacktrace without full InterpCx", "tree": {"sha": "c571709b657777b602d35994d8638880b26e48cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c571709b657777b602d35994d8638880b26e48cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa3171015c63edc541d45583f2a24af3fa4d2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa3171015c63edc541d45583f2a24af3fa4d2bc", "html_url": "https://github.com/rust-lang/rust/commit/9fa3171015c63edc541d45583f2a24af3fa4d2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa3171015c63edc541d45583f2a24af3fa4d2bc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a29f341a8ac4e9325a5e37027b4215f50a76d06f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a29f341a8ac4e9325a5e37027b4215f50a76d06f", "html_url": "https://github.com/rust-lang/rust/commit/a29f341a8ac4e9325a5e37027b4215f50a76d06f"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "3177537fee25ec8e04a05a43bdf4984955d895f3", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fa3171015c63edc541d45583f2a24af3fa4d2bc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa3171015c63edc541d45583f2a24af3fa4d2bc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=9fa3171015c63edc541d45583f2a24af3fa4d2bc", "patch": "@@ -929,11 +929,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     #[must_use]\n-    pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n+    pub fn generate_stacktrace_from_stack(\n+        stack: &[Frame<'mir, 'tcx, M::Provenance, M::FrameExtra>],\n+    ) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n         // This deliberately does *not* honor `requires_caller_location` since it is used for much\n         // more than just panics.\n-        for frame in self.stack().iter().rev() {\n+        for frame in stack.iter().rev() {\n             let lint_root = frame.current_source_info().and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n@@ -947,6 +949,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"generate stacktrace: {:#?}\", frames);\n         frames\n     }\n+\n+    #[must_use]\n+    pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n+        Self::generate_stacktrace_from_stack(self.stack())\n+    }\n }\n \n #[doc(hidden)]"}]}