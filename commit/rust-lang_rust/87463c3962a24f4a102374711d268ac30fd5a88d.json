{"sha": "87463c3962a24f4a102374711d268ac30fd5a88d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDYzYzM5NjJhMjRmNGExMDIzNzQ3MTFkMjY4YWMzMGZkNWE4OGQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T22:16:15Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T22:16:15Z"}, "message": "Improve some comments", "tree": {"sha": "2ecabf8b42633b5447f0e99a8ba5047023e7d1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ecabf8b42633b5447f0e99a8ba5047023e7d1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87463c3962a24f4a102374711d268ac30fd5a88d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87463c3962a24f4a102374711d268ac30fd5a88d", "html_url": "https://github.com/rust-lang/rust/commit/87463c3962a24f4a102374711d268ac30fd5a88d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87463c3962a24f4a102374711d268ac30fd5a88d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798b9ff9d5b74a2f78e81cb3a2528a477f425d9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/798b9ff9d5b74a2f78e81cb3a2528a477f425d9e", "html_url": "https://github.com/rust-lang/rust/commit/798b9ff9d5b74a2f78e81cb3a2528a477f425d9e"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "39cc9e049f424bb3e3527af855e864a07c5047ae", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87463c3962a24f4a102374711d268ac30fd5a88d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87463c3962a24f4a102374711d268ac30fd5a88d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=87463c3962a24f4a102374711d268ac30fd5a88d", "patch": "@@ -796,6 +796,9 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n /// For example, the pattern `-128...127i8` is encoded as `0..=255`.\n /// This makes comparisons and arithmetic on interval endpoints much more\n /// straightforward. See `signed_bias` for details.\n+///\n+/// `IntRange` is never used to encode an empty range or a \"range\" that wraps\n+/// around the (offset) space: i.e. `range.lo <= range.hi`.\n struct IntRange<'tcx> {\n     pub range: RangeInclusive<u128>,\n     pub ty: Ty<'tcx>,\n@@ -882,10 +885,8 @@ impl<'tcx> IntRange<'tcx> {\n         }\n     }\n \n-    /// Given an `IntRange` corresponding to a pattern in a `match` and a collection of\n-    /// ranges corresponding to the domain of values of a type (say, an integer), return\n-    /// a new collection of ranges corresponding to the original ranges minus the ranges\n-    /// covered by the `IntRange`.\n+    /// Return a collection of ranges that spans the values covered by `ranges`, subtracted\n+    /// by the values covered by `self`: i.e. `ranges \\ self` (in set notation).\n     fn subtract_from(self,\n                      tcx: TyCtxt<'_, 'tcx, 'tcx>,\n                      ranges: Vec<Constructor<'tcx>>)\n@@ -930,7 +931,7 @@ impl<'tcx> IntRange<'tcx> {\n     }\n }\n \n-// Find those constructors that are not matched by any non-wildcard patterns in the current column.\n+// Return a set of constructors equivalent to `all_ctors \\ used_ctors`.\n fn compute_missing_ctors<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     all_ctors: &Vec<Constructor<'tcx>>,\n@@ -1079,6 +1080,9 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         // be a privately-empty enum is when the exhaustive_patterns\n         // feature flag is not present, so this is only\n         // needed for that case.\n+\n+        // Find those constructors that are not matched by any non-wildcard patterns in the\n+        // current column.\n         let missing_ctors = compute_missing_ctors(cx.tcx, &all_ctors, &used_ctors);\n \n         let is_privately_empty = all_ctors.is_empty() && !cx.is_uninhabited(pcx.ty);"}]}