{"sha": "e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZjFlODg4M2FmNWVmYWUyZWFmMTJmN2IyNWUzYmZlNTU3M2JhNDc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-19T22:13:25Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-28T19:43:25Z"}, "message": "Improve lang item generated docs\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/146229-wg-secure-code/topic/Is.20.60core.60.20part.20of.20the.20compiler.3F/near/226738260", "tree": {"sha": "bd56297965b3849ccf83ad9bb1b967bbdc8da0b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd56297965b3849ccf83ad9bb1b967bbdc8da0b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47", "html_url": "https://github.com/rust-lang/rust/commit/e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b471a3f5fe57e5c6e08acf665f2094422415a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b471a3f5fe57e5c6e08acf665f2094422415a3d", "html_url": "https://github.com/rust-lang/rust/commit/9b471a3f5fe57e5c6e08acf665f2094422415a3d"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "cc168fc07a0b880e42433ef95fb3fc2da763d1db", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=e5f1e8883af5efae2eaf12f7b25e3bfe5573ba47", "patch": "@@ -45,20 +45,25 @@ macro_rules! language_item_table {\n             /// A representation of all the valid language items in Rust.\n             #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable)]\n             pub enum LangItem {\n-                $($variant,)*\n+                $(\n+                    #[doc = concat!(\"The `\", stringify!($name), \"` lang item.\")]\n+                    $variant,\n+                )*\n             }\n         }\n \n         impl LangItem {\n             /// Returns the `name` symbol in `#[lang = \"$name\"]`.\n-            /// For example, `LangItem::EqTraitLangItem`,\n-            /// that is `#[lang = \"eq\"]` would result in `sym::eq`.\n+            /// For example, [`LangItem::PartialEq`]`.name()`\n+            /// would result in [`sym::eq`] since it is `#[lang = \"eq\"]`.\n             pub fn name(self) -> Symbol {\n                 match self {\n                     $( LangItem::$variant => $name, )*\n                 }\n             }\n \n+            /// The [group](LangItemGroup) that this lang item belongs to,\n+            /// or `None` if it doesn't belong to a group.\n             pub fn group(self) -> Option<LangItemGroup> {\n                 use LangItemGroup::*;\n                 match self {\n@@ -67,15 +72,16 @@ macro_rules! language_item_table {\n             }\n         }\n \n+        /// All of the language items in the current crate, defined or not.\n         #[derive(HashStable_Generic, Debug)]\n         pub struct LanguageItems {\n-            /// Mappings from lang items to their possibly found `DefId`s.\n-            /// The index corresponds to the order in `LangItem`.\n+            /// Mappings from lang items to their possibly found [`DefId`]s.\n+            /// The index corresponds to the order in [`LangItem`].\n             pub items: Vec<Option<DefId>>,\n             /// Lang items that were not found during collection.\n             pub missing: Vec<LangItem>,\n-            /// Mapping from `LangItemGroup` discriminants to all\n-            /// `DefId`s of lang items in that group.\n+            /// Mapping from [`LangItemGroup`] discriminants to all\n+            /// [`DefId`]s of lang items in that group.\n             pub groups: [Vec<DefId>; NUM_GROUPS],\n         }\n \n@@ -103,13 +109,13 @@ macro_rules! language_item_table {\n                 self.items[it as usize].ok_or_else(|| format!(\"requires `{}` lang_item\", it.name()))\n             }\n \n+            /// Returns the [`DefId`]s of all lang items in a group.\n             pub fn group(&self, group: LangItemGroup) -> &[DefId] {\n                 self.groups[group as usize].as_ref()\n             }\n \n             $(\n-                /// Returns the corresponding `DefId` for the lang item if it\n-                /// exists.\n+                #[doc = concat!(\"Returns the [`DefId`] of the `\", stringify!($name), \"` lang item if it is defined.\")]\n                 #[allow(dead_code)]\n                 pub fn $method(&self) -> Option<DefId> {\n                     self.items[LangItem::$variant as usize]\n@@ -140,7 +146,7 @@ impl<CTX> HashStable<CTX> for LangItem {\n ///\n /// About the `check_name` argument: passing in a `Session` would be simpler,\n /// because then we could call `Session::check_name` directly. But we want to\n-/// avoid the need for `librustc_hir` to depend on `librustc_session`, so we\n+/// avoid the need for `rustc_hir` to depend on `rustc_session`, so we\n /// use a closure instead.\n pub fn extract<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<(Symbol, Span)>\n where"}]}