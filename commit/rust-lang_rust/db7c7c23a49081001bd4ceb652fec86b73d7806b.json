{"sha": "db7c7c23a49081001bd4ceb652fec86b73d7806b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiN2M3YzIzYTQ5MDgxMDAxYmQ0Y2ViNjUyZmVjODZiNzNkNzgwNmI=", "commit": {"author": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2014-08-29T00:03:30Z"}, "committer": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2014-08-29T01:09:12Z"}, "message": "doc: Clarify slice failure conditions.", "tree": {"sha": "626bc00a3156427f69abbc2f62a1a4c1115d325e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/626bc00a3156427f69abbc2f62a1a4c1115d325e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7c7c23a49081001bd4ceb652fec86b73d7806b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7c7c23a49081001bd4ceb652fec86b73d7806b", "html_url": "https://github.com/rust-lang/rust/commit/db7c7c23a49081001bd4ceb652fec86b73d7806b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7c7c23a49081001bd4ceb652fec86b73d7806b/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba39b50943aa55790f79ccdebc446b0f7e6d0d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba39b50943aa55790f79ccdebc446b0f7e6d0d3f", "html_url": "https://github.com/rust-lang/rust/commit/ba39b50943aa55790f79ccdebc446b0f7e6d0d3f"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "774365366cc39ac08a8ea295b551938e47ba867e", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/db7c7c23a49081001bd4ceb652fec86b73d7806b/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7c7c23a49081001bd4ceb652fec86b73d7806b/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=db7c7c23a49081001bd4ceb652fec86b73d7806b", "patch": "@@ -57,31 +57,31 @@ use raw::Slice as RawSlice;\n // Extension traits\n //\n \n-/// Extension methods for vectors\n+/// Extension methods for immutable slices.\n #[unstable = \"may merge with other traits; region parameter may disappear\"]\n pub trait ImmutableSlice<'a, T> {\n-    /**\n-     * Returns a slice of self spanning the interval [`start`, `end`).\n-     *\n-     * Fails when the slice (or part of it) is outside the bounds of self,\n-     * or when `start` > `end`.\n-     */\n+    /// Returns a subslice spanning the interval [`start`, `end`).\n+    ///\n+    /// Fails when the end of the new slice lies beyond the end of the\n+    /// original slice (i.e. when `end > self.len()`) or when `start > end`.\n+    ///\n+    /// Slicing with `start` equal to `end` yields an empty slice.\n     #[unstable]\n     fn slice(&self, start: uint, end: uint) -> &'a [T];\n \n-    /**\n-     * Returns a slice of self from `start` to the end of the vec.\n-     *\n-     * Fails when `start` points outside the bounds of self.\n-     */\n+    /// Returns a subslice from `start` to the end of the slice.\n+    ///\n+    /// Fails when `start` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing from `self.len()` yields an empty slice.\n     #[unstable]\n     fn slice_from(&self, start: uint) -> &'a [T];\n \n-    /**\n-     * Returns a slice of self from the start of the vec to `end`.\n-     *\n-     * Fails when `end` points outside the bounds of self.\n-     */\n+    /// Returns a subslice from the start of the slice to `end`.\n+    ///\n+    /// Fails when `end` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing to `0` yields an empty slice.\n     #[unstable]\n     fn slice_to(&self, end: uint) -> &'a [T];\n \n@@ -486,21 +486,26 @@ pub trait MutableSlice<'a, T> {\n     /// Primarily intended for getting a &mut [T] from a [T, ..N].\n     fn as_mut_slice(self) -> &'a mut [T];\n \n-    /// Return a slice that points into another slice.\n+    /// Returns a mutable subslice spanning the interval [`start`, `end`).\n+    ///\n+    /// Fails when the end of the new slice lies beyond the end of the\n+    /// original slice (i.e. when `end > self.len()`) or when `start > end`.\n+    ///\n+    /// Slicing with `start` equal to `end` yields an empty slice.\n     fn mut_slice(self, start: uint, end: uint) -> &'a mut [T];\n \n-    /**\n-     * Returns a slice of self from `start` to the end of the vec.\n-     *\n-     * Fails when `start` points outside the bounds of self.\n-     */\n+    /// Returns a mutable subslice from `start` to the end of the slice.\n+    ///\n+    /// Fails when `start` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing from `self.len()` yields an empty slice.\n     fn mut_slice_from(self, start: uint) -> &'a mut [T];\n \n-    /**\n-     * Returns a slice of self from the start of the vec to `end`.\n-     *\n-     * Fails when `end` points outside the bounds of self.\n-     */\n+    /// Returns a mutable subslice from the start of the slice to `end`.\n+    ///\n+    /// Fails when `end` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing to `0` yields an empty slice.\n     fn mut_slice_to(self, end: uint) -> &'a mut [T];\n \n     /// Returns an iterator that allows modifying each value"}]}