{"sha": "5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzY1N2ZhZmI2MmI4MWViNjhjYjYzYjJhNDJlN2I3N2FiOWZjZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-17T00:10:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-17T00:10:17Z"}, "message": "Distinguish zero-size types from those that we return as void", "tree": {"sha": "881800d0aed063e1717547c3741c8c7024640580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/881800d0aed063e1717547c3741c8c7024640580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "html_url": "https://github.com/rust-lang/rust/commit/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c90283ce9de476357abf9a5fed79e86a2f1f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c90283ce9de476357abf9a5fed79e86a2f1f53", "html_url": "https://github.com/rust-lang/rust/commit/76c90283ce9de476357abf9a5fed79e86a2f1f53"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "ef40629946df0dadf42c63daaea45aa91fcb4a52", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -1320,7 +1320,7 @@ pub fn init_function<'a>(\n         }\n     };\n \n-    if !type_is_voidish(fcx.ccx, substd_output_type) {\n+    if !return_type_is_void(fcx.ccx, substd_output_type) {\n         // If the function returns nil/bot, there is no real return\n         // value, so do not set `llretptr`.\n         if !skip_retptr || fcx.caller_expects_out_pointer {\n@@ -1539,7 +1539,7 @@ pub fn trans_closure(ccx: @CrateContext,\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n-    if body.expr.is_none() || type_is_voidish(bcx.ccx(), block_ty) {\n+    if body.expr.is_none() || type_is_zero_size(bcx.ccx(), block_ty) {\n         bcx = controlflow::trans_block(bcx, body, expr::Ignore);\n     } else {\n         let dest = expr::SaveIn(fcx.llretptr.get().unwrap());\n@@ -1679,7 +1679,7 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: @CrateContext,\n \n     let bcx = fcx.entry_bcx.get().unwrap();\n \n-    if !type_is_voidish(fcx.ccx, result_ty) {\n+    if !type_is_zero_size(fcx.ccx, result_ty) {\n         let repr = adt::represent_type(ccx, result_ty);\n         adt::trans_start_init(bcx, repr, fcx.llretptr.get().unwrap(), disr);\n         for (i, arg_datum) in arg_datums.move_iter().enumerate() {"}, {"sha": "27903e74e07a583281e8056d7c967a8ec707d3d4", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -667,7 +667,7 @@ pub fn trans_call_inner<'a>(\n         }\n         Some(expr::SaveIn(dst)) => Some(dst),\n         Some(expr::Ignore) => {\n-            if !type_is_voidish(ccx, ret_ty) {\n+            if !type_is_zero_size(ccx, ret_ty) {\n                 Some(alloc_ty(bcx, ret_ty, \"__llret\"))\n             } else {\n                 let llty = type_of::type_of(ccx, ret_ty);\n@@ -736,7 +736,7 @@ pub fn trans_call_inner<'a>(\n         match opt_llretslot {\n             Some(llretslot) => {\n                 if !type_of::return_uses_outptr(bcx.ccx(), ret_ty) &&\n-                    !type_is_voidish(bcx.ccx(), ret_ty)\n+                    !type_is_zero_size(bcx.ccx(), ret_ty)\n                 {\n                     Store(bcx, llret, llretslot);\n                 }"}, {"sha": "e466e4da38d72f779eb5c0f00c681d8dde0667fa", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -75,19 +75,33 @@ pub fn type_is_immediate(ccx: &CrateContext, ty: ty::t) -> bool {\n             let llty = sizing_type_of(ccx, ty);\n             llsize_of_alloc(ccx, llty) <= llsize_of_alloc(ccx, ccx.int_type)\n         }\n-        _ => type_is_voidish(ccx, ty)\n+        _ => type_is_zero_size(ccx, ty)\n     }\n }\n \n-pub fn type_is_voidish(ccx: &CrateContext, ty: ty::t) -> bool {\n-    //! Identify types like `()`, bottom, or empty structs, which\n-    //! contain no information at all.\n+pub fn type_is_zero_size(ccx: &CrateContext, ty: ty::t) -> bool {\n+    /*!\n+     * Identify types which have size zero at runtime.\n+     */\n+\n     use middle::trans::machine::llsize_of_alloc;\n     use middle::trans::type_of::sizing_type_of;\n     let llty = sizing_type_of(ccx, ty);\n     llsize_of_alloc(ccx, llty) == 0\n }\n \n+pub fn return_type_is_void(ccx: &CrateContext, ty: ty::t) -> bool {\n+    /*!\n+     * Identifies types which we declare to be equivalent to `void`\n+     * in C for the purpose of function return types. These are\n+     * `()`, bot, and uninhabited enums. Note that all such types\n+     * are also zero-size, but not all zero-size types use a `void`\n+     * return type (in order to aid with C ABI compatibility).\n+     */\n+\n+    ty::type_is_nil(ty) || ty::type_is_bot(ty) || ty::type_is_empty(ccx.tcx, ty)\n+}\n+\n pub fn gensym_name(name: &str) -> (Ident, PathElem) {\n     let name = token::gensym(name);\n     let ident = Ident::new(name);"}, {"sha": "467501449b8d5c8b8488c44c4a5440eb1cba0a17", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -171,7 +171,7 @@ pub fn appropriate_rvalue_mode(ccx: &CrateContext, ty: ty::t) -> RvalueMode {\n      * on whether type is immediate or not.\n      */\n \n-    if type_is_voidish(ccx, ty) {\n+    if type_is_zero_size(ccx, ty) {\n         ByValue\n     } else if type_is_immediate(ccx, ty) {\n         ByValue\n@@ -583,7 +583,7 @@ fn load<'a>(bcx: &'a Block<'a>, llptr: ValueRef, ty: ty::t) -> ValueRef {\n      * what we are loading.\n      */\n \n-    if type_is_voidish(bcx.ccx(), ty) {\n+    if type_is_zero_size(bcx.ccx(), ty) {\n         C_undef(type_of::type_of(bcx.ccx(), ty))\n     } else if ty::type_is_bool(ty) {\n         LoadRangeAssert(bcx, llptr, 0, 2, lib::llvm::True)\n@@ -638,7 +638,7 @@ impl<K:KindOps> Datum<K> {\n \n         let _icx = push_ctxt(\"copy_to_no_check\");\n \n-        if type_is_voidish(bcx.ccx(), self.ty) {\n+        if type_is_zero_size(bcx.ccx(), self.ty) {\n             return bcx;\n         }\n "}, {"sha": "36fc927b64c4546ba91468b8e82acab05d648404", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -474,7 +474,7 @@ fn trans_unadjusted<'a>(bcx: &'a Block<'a>,\n \n         ty::RvalueDpsExpr => {\n             let ty = expr_ty(bcx, expr);\n-            if type_is_voidish(bcx.ccx(), ty) {\n+            if type_is_zero_size(bcx.ccx(), ty) {\n                 bcx = trans_rvalue_dps_unadjusted(bcx, expr, Ignore);\n                 nil(bcx, ty)\n             } else {"}, {"sha": "083a1c6988d83a7dead9e3e660293c47efda1739", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -198,7 +198,7 @@ pub fn trans_native_call<'a>(\n         _ => ccx.sess.bug(\"trans_native_call called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig, passed_arg_tys);\n-    let ret_def = !type_is_voidish(bcx.ccx(), fn_sig.output);\n+    let ret_def = !return_type_is_void(bcx.ccx(), fn_sig.output);\n     let fn_type = cabi::compute_abi_info(ccx,\n                                          llsig.llarg_tys,\n                                          llsig.llret_ty,\n@@ -778,7 +778,7 @@ fn foreign_types_for_fn_ty(ccx: &CrateContext,\n         _ => ccx.sess.bug(\"foreign_types_for_fn_ty called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig, fn_sig.inputs);\n-    let ret_def = !type_is_voidish(ccx, fn_sig.output);\n+    let ret_def = !return_type_is_void(ccx, fn_sig.output);\n     let fn_ty = cabi::compute_abi_info(ccx,\n                                        llsig.llarg_tys,\n                                        llsig.llret_ty,"}, {"sha": "1fc749bb6876f734d39b5bd2b85e3ef12f4c70cb", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -317,7 +317,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         \"uninit\" => {\n             // Do nothing, this is effectively a no-op\n             let retty = substs.tys[0];\n-            if type_is_immediate(ccx, retty) && !type_is_voidish(ccx, retty) {\n+            if type_is_immediate(ccx, retty) && !return_type_is_void(ccx, retty) {\n                 unsafe {\n                     Ret(bcx, lib::llvm::llvm::LLVMGetUndef(type_of(ccx, retty).to_ref()));\n                 }\n@@ -356,7 +356,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                                          pluralize(out_type_size)));\n             }\n \n-            if !type_is_voidish(ccx, out_type) {\n+            if !return_type_is_void(ccx, out_type) {\n                 let llsrcval = get_param(decl, first_real_arg);\n                 if type_is_immediate(ccx, in_type) {\n                     match fcx.llretptr.get() {"}, {"sha": "4db89fbeccec7497d20f810f66edf8a4efeb6a8c", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=5e7657fafb62b81eb68cb63b2a42e7b77ab9fce6", "patch": "@@ -68,10 +68,10 @@ pub fn type_of_rust_fn(cx: &CrateContext,\n     atys.push_all(type_of_explicit_args(cx, inputs));\n \n     // Use the output as the actual return value if it's immediate.\n-    if !use_out_pointer && !type_is_voidish(cx, output) {\n-        Type::func(atys, &lloutputtype)\n-    } else {\n+    if use_out_pointer || return_type_is_void(cx, output) {\n         Type::func(atys, &Type::void())\n+    } else {\n+        Type::func(atys, &lloutputtype)\n     }\n }\n "}]}