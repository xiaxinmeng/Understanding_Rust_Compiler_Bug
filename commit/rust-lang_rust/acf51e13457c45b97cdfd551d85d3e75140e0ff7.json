{"sha": "acf51e13457c45b97cdfd551d85d3e75140e0ff7", "node_id": "C_kwDOAAsO6NoAKGFjZjUxZTEzNDU3YzQ1Yjk3Y2RmZDU1MWQ4NWQzZTc1MTQwZTBmZjc", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-15T18:01:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-15T18:02:14Z"}, "message": "linker: Fix weak lang item linking with combination windows-gnu + LLD + LTO", "tree": {"sha": "df3fb0c050d4c9832a79dcb0da87a7009b25249e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df3fb0c050d4c9832a79dcb0da87a7009b25249e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf51e13457c45b97cdfd551d85d3e75140e0ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf51e13457c45b97cdfd551d85d3e75140e0ff7", "html_url": "https://github.com/rust-lang/rust/commit/acf51e13457c45b97cdfd551d85d3e75140e0ff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf51e13457c45b97cdfd551d85d3e75140e0ff7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1", "html_url": "https://github.com/rust-lang/rust/commit/b8c35ca26b191bb9a9ac669a4b3f4d3d52d97fb1"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "a53a15620e197d8729c9319d90cb7dff7d3b7b5e", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf51e13457c45b97cdfd551d85d3e75140e0ff7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf51e13457c45b97cdfd551d85d3e75140e0ff7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=acf51e13457c45b97cdfd551d85d3e75140e0ff7", "patch": "@@ -2690,7 +2690,7 @@ fn relevant_lib(sess: &Session, lib: &NativeLib) -> bool {\n     }\n }\n \n-fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n+pub(crate) fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n     match sess.lto() {\n         config::Lto::Fat => true,\n         config::Lto::Thin => {"}, {"sha": "ff1eee37ad9c04d1f4fcc67772b72f6df5cb4a62", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/acf51e13457c45b97cdfd551d85d3e75140e0ff7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf51e13457c45b97cdfd551d85d3e75140e0ff7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=acf51e13457c45b97cdfd551d85d3e75140e0ff7", "patch": "@@ -1,3 +1,4 @@\n+use crate::back::link::are_upstream_rust_objects_already_included;\n use crate::back::metadata::create_compressed_metadata_file;\n use crate::back::write::{\n     compute_per_cgu_lto_type, start_async_codegen, submit_codegened_module_to_llvm,\n@@ -892,10 +893,14 @@ impl CrateInfo {\n \n         // Handle circular dependencies in the standard library.\n         // See comment before `add_linked_symbol_object` function for the details.\n-        // With msvc-like linkers it's both unnecessary (they support circular dependencies),\n-        // and causes linking issues (when weak lang item symbols are \"privatized\" by LTO).\n+        // If global LTO is enabled then almost everything (*) is glued into a single object file,\n+        // so this logic is not necessary and can cause issues on some targets (due to weak lang\n+        // item symbols being \"privatized\" to that object file), so we disable it.\n+        // (*) Native libs, and `#[compiler_builtins]` and `#[no_builtins]` crates are not glued,\n+        // and we assume that they cannot define weak lang items. This is not currently enforced\n+        // by the compiler, but that's ok because all this stuff is unstable anyway.\n         let target = &tcx.sess.target;\n-        if !target.is_like_msvc {\n+        if !are_upstream_rust_objects_already_included(tcx.sess) {\n             let missing_weak_lang_items: FxHashSet<&Symbol> = info\n                 .used_crates\n                 .iter()"}]}