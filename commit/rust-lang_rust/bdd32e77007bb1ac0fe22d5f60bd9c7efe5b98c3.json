{"sha": "bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZDMyZTc3MDA3YmIxYWMwZmUyMmQ1ZjYwYmQ5YzdlZmU1Yjk4YzM=", "commit": {"author": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-17T12:43:37Z"}, "committer": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-18T10:13:50Z"}, "message": "Implement collapsible_span_lint_calls lint.", "tree": {"sha": "4483867707352bc0c0565b5e0b5069ca51c22428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4483867707352bc0c0565b5e0b5069ca51c22428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "html_url": "https://github.com/rust-lang/rust/commit/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/comments", "author": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891e1a859b52486936e021235fdc36fbdd9b4100", "url": "https://api.github.com/repos/rust-lang/rust/commits/891e1a859b52486936e021235fdc36fbdd9b4100", "html_url": "https://github.com/rust-lang/rust/commit/891e1a859b52486936e021235fdc36fbdd9b4100"}], "stats": {"total": 459, "additions": 452, "deletions": 7}, "files": [{"sha": "19c46476263b07e264715aec7b809b30e02aa1da", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "patch": "@@ -838,6 +838,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap::UNNECESSARY_UNWRAP,\n         &use_self::USE_SELF,\n         &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        &utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n         &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         &utils::internal_lints::DEFAULT_LINT,\n         &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n@@ -1051,6 +1052,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n     store.register_late_pass(|| box dereference::Dereferencing);\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n+    store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1162,6 +1164,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n         LintId::of(&utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n+        LintId::of(&utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::DEFAULT_LINT),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),"}, {"sha": "3dff710bd85c804e9ee618f33e2e1aafb971c738", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "patch": "@@ -166,6 +166,7 @@ pub fn span_lint_hir_and_then(\n ///     |\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// ```\n+#[allow(clippy::collapsible_span_lint_calls)]\n pub fn span_lint_and_sugg<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,"}, {"sha": "a2101234318531b3dae88843a2ddf58672ba6b7a", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 223, "deletions": 7, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "patch": "@@ -1,6 +1,7 @@\n+use crate::utils::SpanlessEq;\n use crate::utils::{\n-    is_expn_of, match_def_path, match_type, method_calls, paths, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    walk_ptrs_ty,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, snippet, span_lint, span_lint_and_help,\n+    span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n@@ -10,13 +11,15 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, Ty, TyKind};\n+use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::SymbolStr;\n \n+use std::borrow::{Borrow, Cow};\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for various things we like to keep tidy in clippy.\n     ///\n@@ -142,6 +145,67 @@ declare_clippy_lint! {\n     \"found 'default lint description' in a lint declaration\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Lints `span_lint_and_then` function calls, where the\n+    /// closure argument has only one statement and that statement is a method\n+    /// call to `span_suggestion`, `span_help`, `span_note` (using the same\n+    /// span), `help` or `note`.\n+    ///\n+    /// These usages of `span_lint_and_then` should be replaced with one of the\n+    /// wrapper functions `span_lint_and_sugg`, span_lint_and_help`, or\n+    /// `span_lint_and_note`.\n+    ///\n+    /// **Why is this bad?** Using the wrapper `span_lint_and_*` functions, is more\n+    /// convenient, readable and less error prone.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// *Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+    ///     db.span_suggestion(\n+    ///         expr.span,\n+    ///         help_msg,\n+    ///         sugg.to_string(),\n+    ///         Applicability::MachineApplicable,\n+    ///     );\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+    ///     db.span_help(expr.span, help_msg);\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+    ///     db.help(help_msg);\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+    ///     db.span_note(expr.span, note_msg);\n+    /// });\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+    ///     db.note(note_msg);\n+    /// });\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// span_lint_and_sugg(\n+    ///     cx,\n+    ///     TEST_LINT,\n+    ///     expr.span,\n+    ///     lint_msg,\n+    ///     help_msg,\n+    ///     sugg.to_string(),\n+    ///     Applicability::MachineApplicable,\n+    /// );\n+    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n+    /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n+    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n+    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n+    /// ```\n+    pub COLLAPSIBLE_SPAN_LINT_CALLS,\n+    internal,\n+    \"found collapsible `span_lint_and_then` calls\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -165,7 +229,7 @@ impl EarlyLintPass for ClippyLintsInternal {\n                                         CLIPPY_LINTS_INTERNAL,\n                                         item.span,\n                                         \"this constant should be before the previous constant due to lexical \\\n-                                         ordering\",\n+                                        ordering\",\n                                     );\n                                 }\n                             }\n@@ -195,8 +259,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n                     if let ExprKind::AddrOf(_, _, ref inner_exp) = expr.kind;\n                     if let ExprKind::Struct(_, ref fields, _) = inner_exp.kind;\n                     let field = fields.iter()\n-                                      .find(|f| f.ident.as_str() == \"desc\")\n-                                      .expect(\"lints must have a description field\");\n+                    .find(|f| f.ident.as_str() == \"desc\")\n+                    .expect(\"lints must have a description field\");\n                     if let ExprKind::Lit(Spanned {\n                         node: LitKind::Str(ref sym, _),\n                         ..\n@@ -332,7 +396,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n             if let Some(sugg) = self.map.get(&*fn_name.as_str());\n             let ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n-                || match_type(cx, ty, &paths::LATE_CONTEXT);\n+            || match_type(cx, ty, &paths::LATE_CONTEXT);\n             then {\n                 span_lint_and_help(\n                     cx,\n@@ -391,3 +455,155 @@ fn is_trigger_fn(fn_kind: FnKind<'_>) -> bool {\n         FnKind::Closure(..) => false,\n     }\n }\n+\n+declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Call(ref func, ref and_then_args) = expr.kind;\n+            if let ExprKind::Path(ref path) = func.kind;\n+            if match_qpath(path, &[\"span_lint_and_then\"]);\n+            if and_then_args.len() == 5;\n+            if let ExprKind::Closure(_, _, body_id, _, _) = &and_then_args[4].kind;\n+            let body = cx.tcx.hir().body(*body_id);\n+            if let ExprKind::Block(block, _) = &body.value.kind;\n+            let stmts = &block.stmts;\n+            if stmts.len() == 1 && block.expr.is_none();\n+            if let StmtKind::Semi(only_expr) = &stmts[0].kind;\n+            if let ExprKind::MethodCall(ref ps, _, ref span_call_args) = &only_expr.kind;\n+            let and_then_snippets = get_and_then_snippets(cx, and_then_args);\n+            let mut sle = SpanlessEq::new(cx).ignore_fn();\n+            then {\n+                match &*ps.ident.as_str() {\n+                    \"span_suggestion\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n+                        suggest_suggestion(cx, expr, &and_then_snippets, &span_suggestion_snippets(cx, span_call_args));\n+                    },\n+                    \"span_help\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n+                        let help_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n+                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow());\n+                    },\n+                    \"span_note\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n+                        let note_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n+                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow());\n+                    },\n+                    \"help\" => {\n+                        let help_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n+                        suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow());\n+                    }\n+                    \"note\" => {\n+                        let note_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n+                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow());\n+                    }\n+                    _  => (),\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+struct AndThenSnippets<'a> {\n+    cx: Cow<'a, str>,\n+    lint: Cow<'a, str>,\n+    span: Cow<'a, str>,\n+    msg: Cow<'a, str>,\n+}\n+\n+fn get_and_then_snippets<'a, 'hir>(\n+    cx: &LateContext<'_, '_>,\n+    and_then_snippets: &'hir [Expr<'hir>],\n+) -> AndThenSnippets<'a> {\n+    let cx_snippet = snippet(cx, and_then_snippets[0].span, \"cx\");\n+    let lint_snippet = snippet(cx, and_then_snippets[1].span, \"..\");\n+    let span_snippet = snippet(cx, and_then_snippets[2].span, \"span\");\n+    let msg_snippet = snippet(cx, and_then_snippets[3].span, r#\"\"...\"\"#);\n+\n+    AndThenSnippets {\n+        cx: cx_snippet,\n+        lint: lint_snippet,\n+        span: span_snippet,\n+        msg: msg_snippet,\n+    }\n+}\n+\n+struct SpanSuggestionSnippets<'a> {\n+    help: Cow<'a, str>,\n+    sugg: Cow<'a, str>,\n+    applicability: Cow<'a, str>,\n+}\n+\n+fn span_suggestion_snippets<'a, 'hir>(\n+    cx: &LateContext<'_, '_>,\n+    span_call_args: &'hir [Expr<'hir>],\n+) -> SpanSuggestionSnippets<'a> {\n+    let help_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n+    let sugg_snippet = snippet(cx, span_call_args[3].span, \"..\");\n+    let applicability_snippet = snippet(cx, span_call_args[4].span, \"Applicability::MachineApplicable\");\n+\n+    SpanSuggestionSnippets {\n+        help: help_snippet,\n+        sugg: sugg_snippet,\n+        applicability: applicability_snippet,\n+    }\n+}\n+\n+fn suggest_suggestion(\n+    cx: &LateContext<'_, '_>,\n+    expr: &Expr<'_>,\n+    and_then_snippets: &AndThenSnippets<'_>,\n+    span_suggestion_snippets: &SpanSuggestionSnippets<'_>,\n+) {\n+    span_lint_and_sugg(\n+        cx,\n+        COLLAPSIBLE_SPAN_LINT_CALLS,\n+        expr.span,\n+        \"this call is collapsible\",\n+        \"collapse into\",\n+        format!(\n+            \"span_lint_and_sugg({}, {}, {}, {}, {}, {}, {})\",\n+            and_then_snippets.cx,\n+            and_then_snippets.lint,\n+            and_then_snippets.span,\n+            and_then_snippets.msg,\n+            span_suggestion_snippets.help,\n+            span_suggestion_snippets.sugg,\n+            span_suggestion_snippets.applicability\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n+fn suggest_help(cx: &LateContext<'_, '_>, expr: &Expr<'_>, and_then_snippets: &AndThenSnippets<'_>, help: &str) {\n+    span_lint_and_sugg(\n+        cx,\n+        COLLAPSIBLE_SPAN_LINT_CALLS,\n+        expr.span,\n+        \"this call is collapsible\",\n+        \"collapse into\",\n+        format!(\n+            \"span_lint_and_help({}, {}, {}, {}, {})\",\n+            and_then_snippets.cx, and_then_snippets.lint, and_then_snippets.span, and_then_snippets.msg, help\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n+fn suggest_note(cx: &LateContext<'_, '_>, expr: &Expr<'_>, and_then_snippets: &AndThenSnippets<'_>, note: &str) {\n+    span_lint_and_sugg(\n+        cx,\n+        COLLAPSIBLE_SPAN_LINT_CALLS,\n+        expr.span,\n+        \"this call is collspible\",\n+        \"collapse into\",\n+        format!(\n+            \"span_lint_and_note({}, {}, {}, {}, {}, {})\",\n+            and_then_snippets.cx,\n+            and_then_snippets.lint,\n+            and_then_snippets.span,\n+            and_then_snippets.msg,\n+            and_then_snippets.span,\n+            note\n+        ),\n+        Applicability::MachineApplicable,\n+    );\n+}"}, {"sha": "19ff69ec66784a9648f48260555e283eb4888a5a", "filename": "tests/ui/collapsible_span_lint_calls.fixed", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.fixed?ref=bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "patch": "@@ -0,0 +1,83 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_ast;\n+extern crate rustc_errors;\n+extern crate rustc_lint;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_ast::ast::Expr;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Lint, LintContext};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n+\n+#[allow(unused_variables)]\n+pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n+where\n+    F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n+{\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_note<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    note_span: Span,\n+    note: &str,\n+) {\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_sugg<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    help: &str,\n+    sugg: String,\n+    applicability: Applicability,\n+) {\n+}\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+\n+impl EarlyLintPass for Pass {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        let lint_msg = \"lint message\";\n+        let help_msg = \"help message\";\n+        let note_msg = \"note message\";\n+        let sugg = \"new_call()\";\n+        let predicate = true;\n+\n+        span_lint_and_sugg(cx, TEST_LINT, expr.span, lint_msg, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n+        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n+        span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg);\n+        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n+        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n+\n+        // This expr shouldn't trigger this lint.\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.note(note_msg);\n+            if predicate {\n+                db.note(note_msg);\n+            }\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "af263fcbea195e86050d16f8a9c70cef01be5964", "filename": "tests/ui/collapsible_span_lint_calls.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.rs?ref=bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "patch": "@@ -0,0 +1,93 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_ast;\n+extern crate rustc_errors;\n+extern crate rustc_lint;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_ast::ast::Expr;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Lint, LintContext};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n+\n+#[allow(unused_variables)]\n+pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n+where\n+    F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n+{\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_note<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    span: Span,\n+    msg: &str,\n+    note_span: Span,\n+    note: &str,\n+) {\n+}\n+\n+#[allow(unused_variables)]\n+fn span_lint_and_sugg<'a, T: LintContext>(\n+    cx: &'a T,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    help: &str,\n+    sugg: String,\n+    applicability: Applicability,\n+) {\n+}\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+\n+impl EarlyLintPass for Pass {\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        let lint_msg = \"lint message\";\n+        let help_msg = \"help message\";\n+        let note_msg = \"note message\";\n+        let sugg = \"new_call()\";\n+        let predicate = true;\n+\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.span_suggestion(expr.span, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.span_help(expr.span, help_msg);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.help(help_msg);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.span_note(expr.span, note_msg);\n+        });\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.note(note_msg);\n+        });\n+\n+        // This expr shouldn't trigger this lint.\n+        span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+            db.note(note_msg);\n+            if predicate {\n+                db.note(note_msg);\n+            }\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fa40c82c9837fc2b08a65f318314a94415dbb2fa", "filename": "tests/ui/collapsible_span_lint_calls.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.stderr?ref=bdd32e77007bb1ac0fe22d5f60bd9c7efe5b98c3", "patch": "@@ -0,0 +1,49 @@\n+error: this call is collapsible\n+  --> $DIR/collapsible_span_lint_calls.rs:67:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.span_suggestion(expr.span, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_sugg(cx, TEST_LINT, expr.span, lint_msg, help_msg, sugg.to_string(), Applicability::MachineApplicable)`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/collapsible_span_lint_calls.rs:2:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::collapsible_span_lint_calls)]` implied by `#[deny(clippy::internal)]`\n+\n+error: this call is collapsible\n+  --> $DIR/collapsible_span_lint_calls.rs:70:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.span_help(expr.span, help_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg)`\n+\n+error: this call is collapsible\n+  --> $DIR/collapsible_span_lint_calls.rs:73:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.help(help_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, help_msg)`\n+\n+error: this call is collspible\n+  --> $DIR/collapsible_span_lint_calls.rs:76:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.span_note(expr.span, note_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg)`\n+\n+error: this call is collspible\n+  --> $DIR/collapsible_span_lint_calls.rs:79:9\n+   |\n+LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n+LL | |             db.note(note_msg);\n+LL | |         });\n+   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg)`\n+\n+error: aborting due to 5 previous errors\n+"}]}