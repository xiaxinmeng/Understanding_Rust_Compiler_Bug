{"sha": "c115b822384501e2814da70fdcb9e22f035a994b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTViODIyMzg0NTAxZTI4MTRkYTcwZmRjYjllMjJmMDM1YTk5NGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T23:52:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T23:52:59Z"}, "message": "core: Clean up crate docs and give all mods a brief description", "tree": {"sha": "b5fc9a880072250dbb88cf5d9af45ba5285f9e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5fc9a880072250dbb88cf5d9af45ba5285f9e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c115b822384501e2814da70fdcb9e22f035a994b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c115b822384501e2814da70fdcb9e22f035a994b", "html_url": "https://github.com/rust-lang/rust/commit/c115b822384501e2814da70fdcb9e22f035a994b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c115b822384501e2814da70fdcb9e22f035a994b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e417395620f6d6ce45761d9ea72376c792ef60a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e417395620f6d6ce45761d9ea72376c792ef60a", "html_url": "https://github.com/rust-lang/rust/commit/5e417395620f6d6ce45761d9ea72376c792ef60a"}], "stats": {"total": 232, "additions": 156, "deletions": 76}, "files": [{"sha": "2cf7fc92f12769d4e0746439a3a50ce8ee7d702a", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,5 @@\n+#[doc(hidden)];\n+\n use libc::{c_char, c_void, intptr_t, uintptr_t};\n use ptr::{mut_null, null, to_unsafe_ptr};\n use repr::BoxRepr;"}, {"sha": "881dd959e8a349db89074e74b7b09c9981e9c7c8", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,4 @@\n+#[doc(hidden)]; // FIXME #3538\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];"}, {"sha": "420d272a2c33a0b35a934f2a5405fae89e7ca887", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,15 @@\n+/*!\n+\n+The `Ord` and `Eq` comparison traits\n+\n+This module contains the definition of both `Ord` and `Eq` which define\n+the common interfaces for doing comparison. Both are language items\n+that the compiler uses to implement the comparison operators. Rust code\n+may implement `Ord` to overload the `<`, `<=`, `>`, and `>=` operators,\n+and `Eq` to overload the `==` and `!=` operators.\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n@@ -30,8 +42,6 @@ trait Ord {\n     pure fn gt(&&other: self) -> bool;\n }\n \n-#[cfg(notest)]\n-#[lang=\"eq\"]\n /**\n  * Trait for values that can be compared for equality\n  * and inequality.\n@@ -40,6 +50,8 @@ trait Ord {\n  * an `eq` method, with the other generated from\n  * a default implementation.\n  */\n+#[cfg(notest)]\n+#[lang=\"eq\"]\n trait Eq {\n     pure fn eq(&&other: self) -> bool;\n     pure fn ne(&&other: self) -> bool;"}, {"sha": "cdf5224a071ea6c39b7d3fae977806d605e739fd", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,31 +1,40 @@\n+/*!\n+\n+Deprecated communication between tasks\n+\n+Communication between tasks is facilitated by ports (in the receiving\n+task), and channels (in the sending task). Any number of channels may\n+feed into a single port.  Ports and channels may only transmit values\n+of unique types; that is, values that are statically guaranteed to be\n+accessed by a single 'owner' at a time.  Unique types include scalars,\n+vectors, strings, and records, tags, tuples and unique boxes (`~T`)\n+thereof. Most notably, shared boxes (`@T`) may not be transmitted\n+across channels.\n+\n+# Example\n+\n+~~~\n+let po = comm::Port();\n+let ch = comm::Chan(po);\n+\n+do task::spawn {\n+    comm::send(ch, \"Hello, World\");\n+}\n+\n+io::println(comm::recv(p));\n+~~~\n+\n+# Note\n+\n+Use of this module is deprecated in favor of `core::pipes`. In the\n+`core::comm` will likely be rewritten with pipes, at which point it\n+will once again be the preferred module for intertask communication.\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n-/*!\n- * Communication between tasks\n- *\n- * Communication between tasks is facilitated by ports (in the receiving\n- * task), and channels (in the sending task). Any number of channels may\n- * feed into a single port.  Ports and channels may only transmit values\n- * of unique types; that is, values that are statically guaranteed to be\n- * accessed by a single 'owner' at a time.  Unique types include scalars,\n- * vectors, strings, and records, tags, tuples and unique boxes (`~T`)\n- * thereof. Most notably, shared boxes (`@T`) may not be transmitted\n- * across channels.\n- *\n- * # Example\n- *\n- * ~~~\n- * let po = comm::Port();\n- * let ch = comm::Chan(po);\n- *\n- * do task::spawn {\n- *     comm::send(ch, \"Hello, World\");\n- * }\n- *\n- * io::println(comm::recv(p));\n- * ~~~\n- */\n \n use either::Either;\n use libc::size_t;"}, {"sha": "96d8db5a1e2e78438ed06ab2614cf90d443be003", "filename": "src/libcore/core.rc", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,27 @@\n+/*!\n+\n+The Rust core library.\n+\n+The Rust core library provides runtime features required by the language,\n+including the task scheduler and memory allocators, as well as library\n+support for Rust built-in types, platform abstractions, and other commonly\n+used features.\n+\n+`core` includes modules corresponding to each of the integer types, each of\n+the floating point types, the `bool` type, tuples, characters, strings,\n+vectors (`vec`), shared boxes (`box`), and unsafe and borrowed pointers\n+(`ptr`).  Additionally, `core` provides very commonly used built-in types\n+and operations, concurrency primitives, platform abstractions, I/O, and\n+complete bindings to the C standard library.\n+\n+`core` is linked to all crates and its contents imported.  Implicitly, all\n+crates behave as if they included the following prologue:\n+\n+    extern mod core;\n+    use core::*;\n+\n+*/\n+\n #[link(name = \"core\",\n        vers = \"0.4\",\n        uuid = \"c70c24a7-5551-4f73-8e37-380b11d80be8\",\n@@ -7,27 +31,6 @@\n #[license = \"MIT\"];\n #[crate_type = \"lib\"];\n \n-/*!\n- * The Rust core library provides functionality that is closely tied to the\n- * Rust built-in types and runtime services, or that is used in nearly every\n- * non-trivial program.\n- *\n- * `core` includes modules corresponding to each of the integer types, each of\n- * the floating point types, the `bool` type, tuples, characters, strings,\n- * vectors (`vec`), shared boxes (`box`), and unsafe pointers (`ptr`).\n- * Additionally, `core` provides very commonly used built-in types and\n- * operations, concurrency primitives, platform abstractions, I/O, and\n- * complete bindings to the C standard library.\n- *\n- * `core` is linked by default to all crates and the contents imported.\n- * Implicitly, all crates behave as if they included the following prologue:\n- *\n- *     use core;\n- *     import core::*;\n- *\n- * This behavior can be disabled with the `#[no_core]` crate attribute.\n- */\n-\n // Don't link to core. We are core.\n #[no_core];\n "}, {"sha": "2feb75a71fa355453f7ce046124c7a089739499b", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -82,6 +82,7 @@ const debug : u32 = 3_u32;\n // A curious inner-module that's not exported that contains the binding\n // 'core' so that macro-expanded references to core::error and such\n // can be resolved within libcore.\n+#[doc(hidden)] // FIXME #3538\n mod core {\n     const error : u32 = 0_u32;\n     const warn : u32 = 1_u32;"}, {"sha": "d0474673f833b10340b2977006b28b0041950fd5", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,13 +1,17 @@\n+/*!\n+\n+A doubly-linked list. Supports O(1) head, tail, count, push, pop, etc.\n+\n+# Safety note\n+\n+Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-/**\n- * A doubly-linked list. Supports O(1) head, tail, count, push, pop, etc.\n- *\n- * Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n- */\n-\n export DList;\n export new_dlist, from_elem, from_vec, extensions;\n "}, {"sha": "482a326b74f698a01e3eb4d02a39031b7941f532", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,14 +1,18 @@\n+/*!\n+\n+Dynamic vector\n+\n+A growable vector that makes use of unique pointers so that the\n+result can be sent between tasks and so forth.\n+\n+Note that recursive use is not permitted.\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-// Dynamic Vector\n-//\n-// A growable vector that makes use of unique pointers so that the\n-// result can be sent between tasks and so forth.\n-//\n-// Note that recursive use is not permitted.\n-\n use cast::reinterpret_cast;\n use ptr::null;\n "}, {"sha": "5f317ee0f070756225e1e06e31b0df84794a662d", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,9 @@\n+/*!\n+\n+Simple compression\n+\n+*/\n+\n use libc::{c_void, size_t, c_int};\n \n extern mod rustrt {"}, {"sha": "6867db7c4316f56d1204bb9346cb177d2d240158", "filename": "src/libcore/from_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffrom_str.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,5 @@\n+//! The trait for types that can be created from strings\n+\n use option::Option;\n \n trait FromStr {"}, {"sha": "b86c9e8278084cd545e6dff35b6cc1dc10b71d81", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,4 +1,4 @@\n-/*! Precise Garbage Collector\n+/*! Precise garbage collector\n \n The precise GC exposes two functions, gc and\n cleanup_stack_for_failure. The gc function is the entry point to the"}, {"sha": "96ef5c5f0014459b9953330d3dfe5ce7ac0c233b", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,7 +1,7 @@\n-/*\n-Module: io\n+/*!\n \n Basic input/output\n+\n */\n \n use result::Result;"}, {"sha": "7bc356ce81229949e1e38ae5c7da84bdf2d27844", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,9 @@\n+/*!\n+\n+The iteration traits and common implementation\n+\n+*/\n+\n use cmp::{Eq, Ord};\n \n /// A function used to initialize the elements of a sequence"}, {"sha": "d5872933953a5b9e86f903e9a7f6c38b76eaee46", "filename": "src/libcore/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,4 +1,4 @@\n-/// An interface for numbers.\n+//! An interface for numeric types\n \n trait Num {\n     // FIXME: Trait composition. (#2616)"}, {"sha": "80dfab3fbef567b1ae530b3f83937a80c2a054ce", "filename": "src/libcore/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,9 @@\n+/*!\n+\n+Cross-platform file path handling\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];"}, {"sha": "b7c718b3420b292b33e7b2f623037426a69e50ef", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,7 +1,8 @@\n /*!\n- * Helper types for interfacing with the `intrinsic::visit_ty`\n- * reflection system.\n- */\n+\n+Runtime type reflection\n+\n+*/\n \n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n use libc::c_void;"}, {"sha": "f779078ed86fbe4b99e541e52ee44ee54164d699", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,9 @@\n+/*!\n+\n+More runtime type reflection\n+\n+*/\n+\n use dvec::DVec;\n use io::{Writer, WriterUtil};\n use libc::c_void;"}, {"sha": "90f0c4020bf4f9c6a92654e2a88a412952a4a26e", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,4 +1,4 @@\n-// NB: Don't rely on other core mods here as this has to move into the rt\n+#[doc(hidden)]; // FIXME #3538\n \n use cast::reinterpret_cast;\n use ptr::offset;"}, {"sha": "0519347e438436979e578abebf700374d2a3c52b", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,9 @@\n+/*!\n+\n+The `ToBytes` and `IterBytes` traits\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];"}, {"sha": "65d9b0e447126b0c9d2040f958442ae578be7c58", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,9 @@\n+/*!\n+\n+The `ToStr` trait for converting to strings\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];"}, {"sha": "2c115fcf44440482646a889ffa5640a21df591d4", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,3 +1,4 @@\n+#[doc(hidden)]; // FIXME #3538\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];"}, {"sha": "23b9a4f3be57ff7125fad29824e30c091e051250", "filename": "src/libcore/unit.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funit.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,6 +1,8 @@\n-/**\n- * Functions for the unit type.\n- */\n+/*!\n+\n+Functions for the unit type.\n+\n+*/\n \n use cmp::{Eq, Ord};\n "}, {"sha": "e27a3cdb18d387e217ee69ebf9f532a2ef0baf42", "filename": "src/libcore/util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c115b822384501e2814da70fdcb9e22f035a994b/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=c115b822384501e2814da70fdcb9e22f035a994b", "patch": "@@ -1,13 +1,15 @@\n+/*!\n+\n+Miscellaneous helpers for common patterns.\n+\n+*/\n+\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n use cmp::Eq;\n \n-/**\n- * Miscellaneous helpers for common patterns.\n- */\n-\n /// The identity function.\n #[inline(always)]\n pure fn id<T>(+x: T) -> T { move x }"}]}