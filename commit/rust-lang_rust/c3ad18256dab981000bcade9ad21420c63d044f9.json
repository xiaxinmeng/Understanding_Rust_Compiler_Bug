{"sha": "c3ad18256dab981000bcade9ad21420c63d044f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWQxODI1NmRhYjk4MTAwMGJjYWRlOWFkMjE0MjBjNjNkMDQ0Zjk=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-26T13:24:01Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-26T14:21:07Z"}, "message": "long closure -> function", "tree": {"sha": "4cc0bf305cdb8012120f01446f096aa73c68909f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc0bf305cdb8012120f01446f096aa73c68909f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ad18256dab981000bcade9ad21420c63d044f9", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYNc30xUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLhplgEAnMk4HH9+eoC/ixf/Lk5zGmQtlrpt\nhEBb7TLiNCNignYBAMJ9IPpdVYft2Dm9COOt2D0pPnL+dyI6/IIc5JCJD8IJ\n=uPz3\n-----END PGP SIGNATURE-----", "payload": "tree 4cc0bf305cdb8012120f01446f096aa73c68909f\nparent 2d17b5a550fd204892ed3e757b044d5cbcb595dd\nauthor hyd-dev <yd-huang@outlook.com> 1624713841 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1624717267 +0800\n\nlong closure -> function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ad18256dab981000bcade9ad21420c63d044f9", "html_url": "https://github.com/rust-lang/rust/commit/c3ad18256dab981000bcade9ad21420c63d044f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ad18256dab981000bcade9ad21420c63d044f9/comments", "author": null, "committer": null, "parents": [{"sha": "2d17b5a550fd204892ed3e757b044d5cbcb595dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d17b5a550fd204892ed3e757b044d5cbcb595dd", "html_url": "https://github.com/rust-lang/rust/commit/2d17b5a550fd204892ed3e757b044d5cbcb595dd"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "c87325614bbeff1a8561cc776bc224bfadfb379d", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c3ad18256dab981000bcade9ad21420c63d044f9/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ad18256dab981000bcade9ad21420c63d044f9/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=c3ad18256dab981000bcade9ad21420c63d044f9", "patch": "@@ -472,6 +472,43 @@ path = \"lib.rs\"\n     }\n }\n \n+/// Detect the target directory by calling `cargo metadata`.\n+fn detect_target_dir() -> PathBuf {\n+    #[derive(Deserialize)]\n+    struct Metadata {\n+        target_directory: PathBuf,\n+    }\n+    let mut cmd = cargo();\n+    // `-Zunstable-options` is required by `--config`.\n+    cmd.args([\"metadata\", \"--no-deps\", \"--format-version=1\", \"-Zunstable-options\"]);\n+    // The `build.target-dir` config can by passed by `--config` flags, so forward them to\n+    // `cargo metadata`.\n+    let config_flag = \"--config\";\n+    for arg in ArgFlagValueWithOtherArgsIter::new(\n+        env::args().skip(3), // skip the program name, \"miri\" and \"run\" / \"test\"\n+        config_flag,\n+    ) {\n+        if let Ok(config) = arg {\n+            cmd.arg(config_flag).arg(config);\n+        }\n+    }\n+    let mut child = cmd\n+        .stdin(Stdio::null())\n+        .stdout(Stdio::piped())\n+        .spawn()\n+        .expect(\"failed ro run `cargo metadata`\");\n+    // Check this `Result` after `status.success()` is checked, so we don't print the error\n+    // to stderr if `cargo metadata` is also printing to stderr.\n+    let metadata: Result<Metadata, _> = serde_json::from_reader(child.stdout.take().unwrap());\n+    let status = child.wait().expect(\"failed to wait `cargo metadata` to exit\");\n+    if !status.success() {\n+        std::process::exit(status.code().unwrap_or(-1));\n+    }\n+    metadata\n+        .unwrap_or_else(|e| show_error(format!(\"invalid `cargo metadata` output: {}\", e)))\n+        .target_directory\n+}\n+\n fn phase_cargo_miri(mut args: env::Args) {\n     // Check for version and help flags even when invoked as `cargo-miri`.\n     if has_arg_flag(\"--help\") || has_arg_flag(\"-h\") {\n@@ -541,41 +578,7 @@ fn phase_cargo_miri(mut args: env::Args) {\n     }\n \n     // Detect the target directory if it's not specified via `--target-dir`.\n-    let target_dir = target_dir.get_or_insert_with(|| {\n-        #[derive(Deserialize)]\n-        struct Metadata {\n-            target_directory: PathBuf,\n-        }\n-        let mut cmd = cargo();\n-        // `-Zunstable-options` is required by `--config`.\n-        cmd.args([\"metadata\", \"--no-deps\", \"--format-version=1\", \"-Zunstable-options\"]);\n-        // The `build.target-dir` config can by passed by `--config` flags, so forward them to\n-        // `cargo metadata`.\n-        let config_flag = \"--config\";\n-        for arg in ArgFlagValueWithOtherArgsIter::new(\n-            env::args().skip(3), // skip the program name, \"miri\" and \"run\" / \"test\"\n-            config_flag,\n-        ) {\n-            if let Ok(config) = arg {\n-                cmd.arg(config_flag).arg(config);\n-            }\n-        }\n-        let mut child = cmd\n-            .stdin(Stdio::null())\n-            .stdout(Stdio::piped())\n-            .spawn()\n-            .expect(\"failed ro run `cargo metadata`\");\n-        // Check this `Result` after `status.success()` is checked, so we don't print the error\n-        // to stderr if `cargo metadata` is also printing to stderr.\n-        let metadata: Result<Metadata, _> = serde_json::from_reader(child.stdout.take().unwrap());\n-        let status = child.wait().expect(\"failed to wait `cargo metadata` to exit\");\n-        if !status.success() {\n-            std::process::exit(status.code().unwrap_or(-1));\n-        }\n-        metadata\n-            .unwrap_or_else(|e| show_error(format!(\"invalid `cargo metadata` output: {}\", e)))\n-            .target_directory\n-    });\n+    let target_dir = target_dir.get_or_insert_with(detect_target_dir);\n \n     // Set `--target-dir` to `miri` inside the original target directory.\n     target_dir.push(\"miri\");"}]}