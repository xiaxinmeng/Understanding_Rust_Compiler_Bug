{"sha": "5c377f37e4281d87b26c33dfdabf2ec1450e5095", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMzc3ZjM3ZTQyODFkODdiMjZjMzNkZmRhYmYyZWMxNDUwZTUwOTU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-18T05:11:42Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-22T00:55:13Z"}, "message": "Reorganize, bless and add tests for const control flow\n\nThis creates a new test directory, `ui/consts/control-flow` to hold\ntests related to control flow in a const context. It also blesses all\nexisting tests with the new error messages, and adds new tests for the\n`const_if_match` feature.", "tree": {"sha": "705dad14179f2a3b6f52a8db3814180f727e2acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705dad14179f2a3b6f52a8db3814180f727e2acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c377f37e4281d87b26c33dfdabf2ec1450e5095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c377f37e4281d87b26c33dfdabf2ec1450e5095", "html_url": "https://github.com/rust-lang/rust/commit/5c377f37e4281d87b26c33dfdabf2ec1450e5095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c377f37e4281d87b26c33dfdabf2ec1450e5095/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d93f35f6965cec7e75099bc775e24c61ca9f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d93f35f6965cec7e75099bc775e24c61ca9f7a", "html_url": "https://github.com/rust-lang/rust/commit/26d93f35f6965cec7e75099bc775e24c61ca9f7a"}], "stats": {"total": 1488, "additions": 1180, "deletions": 308}, "files": [{"sha": "0b66426aa2a0f6150c9516664e4e9bb2a2711ab8", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,11 +1,13 @@\n-error[E0744]: `match` is not allowed in a `static`\n+error[E0658]: `match` is not allowed in a `static`\n   --> $DIR/issue-64453.rs:4:31\n    |\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0744`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "de2624d7f7acf069070a3026631bc4e8f3fd3b5e", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -9,11 +9,14 @@ LL | |\n LL | |         }\n    | |_________^\n \n-error[E0744]: `if` is not allowed in a `const`\n+error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/infinite_loop.rs:9:17\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n warning: Constant evaluating a complex constant, this might take some time\n   --> $DIR/infinite_loop.rs:4:18\n@@ -36,5 +39,5 @@ LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0744.\n+Some errors have detailed explanations: E0080, E0658, E0744.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "d1ad2261dc259b21bc61d4911a8660e0c746e659", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,4 +1,4 @@\n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/match-test-ptr-null.rs:6:9\n    |\n LL | /         match &1 as *const i32 as usize {\n@@ -9,6 +9,9 @@ LL | |             0 => 42,\n LL | |             n => n,\n LL | |         }\n    | |_________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/match-test-ptr-null.rs:6:15\n@@ -27,5 +30,5 @@ LL |         match &1 as *const i32 as usize {\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0658, E0744.\n+Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "94cce60453dcc0178e3e2bb1767f4c1563781abb", "filename": "src/test/ui/consts/const-if.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-if.rs?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,21 +0,0 @@\n-const _: i32 = if true { //~ ERROR `if` is not allowed in a `const`\n-    5\n-} else {\n-    6\n-};\n-\n-const _: i32 = match 1 { //~ ERROR `match` is not allowed in a `const`\n-    2 => 3,\n-    4 => 5,\n-    _ => 0,\n-};\n-\n-const fn foo() -> i32 {\n-    if true { 5 } else { 6 } //~ ERROR `if` is not allowed in a `const fn`\n-}\n-\n-const fn bar() -> i32 {\n-    match 0 { 1 => 2, _ => 0 } //~ ERROR `match` is not allowed in a `const fn`\n-}\n-\n-fn main() {}"}, {"sha": "6fb2a0e150190da8292368b1de4c3b5700fdb0c0", "filename": "src/test/ui/consts/const-if.stderr", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-if.stderr?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,37 +0,0 @@\n-error[E0744]: `if` is not allowed in a `const`\n-  --> $DIR/const-if.rs:1:16\n-   |\n-LL |   const _: i32 = if true {\n-   |  ________________^\n-LL | |     5\n-LL | | } else {\n-LL | |     6\n-LL | | };\n-   | |_^\n-\n-error[E0744]: `match` is not allowed in a `const`\n-  --> $DIR/const-if.rs:7:16\n-   |\n-LL |   const _: i32 = match 1 {\n-   |  ________________^\n-LL | |     2 => 3,\n-LL | |     4 => 5,\n-LL | |     _ => 0,\n-LL | | };\n-   | |_^\n-\n-error[E0744]: `if` is not allowed in a `const fn`\n-  --> $DIR/const-if.rs:14:5\n-   |\n-LL |     if true { 5 } else { 6 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0744]: `match` is not allowed in a `const fn`\n-  --> $DIR/const-if.rs:18:5\n-   |\n-LL |     match 0 { 1 => 2, _ => 0 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0744`."}, {"sha": "b0fe5e320f4a6d759ef3bd9ee11970e80445f90c", "filename": "src/test/ui/consts/const-loop.rs", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,90 +0,0 @@\n-const _: () = loop {}; //~ ERROR `loop` is not allowed in a `const`\n-\n-static FOO: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `static`\n-\n-const fn foo() {\n-    loop {} //~ ERROR `loop` is not allowed in a `const fn`\n-}\n-\n-pub trait Foo {\n-    const BAR: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `const`\n-}\n-\n-impl Foo for () {\n-    const BAR: i32 = loop { break 4; }; //~ ERROR `loop` is not allowed in a `const`\n-}\n-\n-fn non_const_outside() {\n-    const fn const_inside() {\n-        loop {} //~ ERROR `loop` is not allowed in a `const fn`\n-    }\n-}\n-\n-const fn const_outside() {\n-    fn non_const_inside() {\n-        loop {}\n-    }\n-}\n-\n-fn main() {\n-    let x = [0; {\n-        while false {}\n-        //~^ ERROR `while` is not allowed in a `const`\n-        4\n-    }];\n-}\n-\n-const _: i32 = {\n-    let mut x = 0;\n-\n-    while x < 4 { //~ ERROR `while` is not allowed in a `const`\n-        x += 1;\n-    }\n-\n-    while x < 8 { //~ ERROR `while` is not allowed in a `const`\n-        x += 1;\n-    }\n-\n-    x\n-};\n-\n-const _: i32 = {\n-    let mut x = 0;\n-\n-    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n-        x += i;\n-    }\n-\n-    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n-        x += i;\n-    }\n-\n-    x\n-};\n-\n-const _: i32 = {\n-    let mut x = 0;\n-\n-    loop { //~ ERROR `loop` is not allowed in a `const`\n-        x += 1;\n-        if x == 4 { //~ ERROR `if` is not allowed in a `const`\n-            break;\n-        }\n-    }\n-\n-    loop { //~ ERROR `loop` is not allowed in a `const`\n-        x += 1;\n-        if x == 8 { //~ ERROR `if` is not allowed in a `const`\n-            break;\n-        }\n-    }\n-\n-    x\n-};\n-\n-const _: i32 = {\n-    let mut x = 0;\n-    while let None = Some(x) { } //~ ERROR `while let` is not allowed in a `const`\n-    while let None = Some(x) { } //~ ERROR `while let` is not allowed in a `const`\n-    x\n-};"}, {"sha": "4e7713f1422ebe6a5151ca625431901a0bf320d7", "filename": "src/test/ui/consts/const-match-pattern-arm.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-pattern-arm.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,4 +1,4 @@\n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/const-match-pattern-arm.rs:3:17\n    |\n LL |   const x: bool = match Some(true) {\n@@ -7,16 +7,22 @@ LL | |     Some(value) => true,\n LL | |     _ => false\n LL | | };\n    | |_^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/const-match-pattern-arm.rs:9:5\n    |\n LL | /     match Some(true) {\n LL | |         Some(value) => true,\n LL | |         _ => false\n LL | |     }\n    | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0744`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "44769175f0ee9bd25f008b8608b416ad9dc48163", "filename": "src/test/ui/consts/control-flow/assert.both.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,13 @@\n+error: any use of this value will cause an error\n+  --> $DIR/assert.rs:12:15\n+   |\n+LL | const _: () = assert!(false);\n+   | --------------^^^^^^^^^^^^^^-\n+   |               |\n+   |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:12:15\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "9c8963f6c7b286854b95efb8309991f5bef698d1", "filename": "src/test/ui/consts/control-flow/assert.if_match.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,23 @@\n+error[E0658]: panicking in constants is unstable\n+  --> $DIR/assert.rs:8:15\n+   |\n+LL | const _: () = assert!(true);\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0658]: panicking in constants is unstable\n+  --> $DIR/assert.rs:12:15\n+   |\n+LL | const _: () = assert!(false);\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n+   = help: add `#![feature(const_panic)]` to the crate attributes to enable\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "11550bf801ab050ec5e285278edb1f5751c26300", "filename": "src/test/ui/consts/control-flow/assert.panic.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/assert.rs:8:15\n+   |\n+LL | const _: () = assert!(true);\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/assert.rs:12:15\n+   |\n+LL | const _: () = assert!(false);\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2da42d5084bc1737473c533fb5e2057cb56a2c2f", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,17 @@\n+// Test that `assert` works only when both `const_if_match` and `const_panic` are enabled.\n+\n+// revisions: stock if_match panic both\n+\n+#![cfg_attr(any(both, if_match), feature(const_if_match))]\n+#![cfg_attr(any(both, panic), feature(const_panic))]\n+\n+const _: () = assert!(true);\n+//[stock,panic]~^ ERROR `if` is not allowed in a `const`\n+//[if_match]~^^ ERROR panicking in constants is unstable\n+\n+const _: () = assert!(false);\n+//[stock,panic]~^ ERROR `if` is not allowed in a `const`\n+//[if_match]~^^ ERROR panicking in constants is unstable\n+//[both]~^^^ ERROR any use of this value will cause an error\n+\n+fn main() {}"}, {"sha": "11550bf801ab050ec5e285278edb1f5751c26300", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/assert.rs:8:15\n+   |\n+LL | const _: () = assert!(true);\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/assert.rs:12:15\n+   |\n+LL | const _: () = assert!(false);\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8bd1929956fd392f6f9407e728ba4d83f045eca5", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,43 @@\n+// Test basic functionality of `if` and `match` in a const context.\n+\n+// run-pass\n+\n+#![feature(const_panic)]\n+#![feature(const_if_match)]\n+\n+const X: u32 = 4;\n+const Y: u32 = 5;\n+\n+const ABS_DIFF: u32 = if X < Y {\n+    Y - X\n+} else {\n+    X - Y\n+};\n+\n+const fn abs_diff(a: u32, b: u32) -> u32 {\n+    match (a, b) {\n+        (big, little) if big > little => big - little,\n+        (little, big) => big - little,\n+    }\n+}\n+\n+const fn gcd(a: u32, b: u32) -> u32 {\n+    if b == 0 {\n+        return a;\n+    }\n+\n+    gcd(b, a % b)\n+}\n+\n+fn main() {\n+    const _: () = assert!(abs_diff(4, 5) == abs_diff(5, 4));\n+    assert_eq!(abs_diff(4, 5), abs_diff(5, 4));\n+\n+    const _: () = assert!(ABS_DIFF == abs_diff(5, 4));\n+    assert_eq!(ABS_DIFF, abs_diff(5, 4));\n+\n+    const _: () = assert!(gcd(48, 18) == 6);\n+    const _: () = assert!(gcd(18, 48) == 6);\n+    assert_eq!(gcd(48, 18), 6);\n+    assert_eq!(gcd(18, 48), 6);\n+}"}, {"sha": "c6bea89e6e6f779f5e563fcd718b1ecc2f3c44f9", "filename": "src/test/ui/consts/control-flow/drop-failure.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,35 @@\n+#![feature(const_if_match)]\n+\n+// `x` is *not* always moved into the final value may be dropped inside the initializer.\n+const _: Option<Vec<i32>> = {\n+    let y: Option<Vec<i32>> = None;\n+    let x = Some(Vec::new());\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+\n+    if true {\n+        x\n+    } else {\n+        y\n+    }\n+};\n+\n+// We only clear `NeedsDrop` if a local is moved from in entirely. This is a shortcoming of the\n+// existing analysis.\n+const _: Vec<i32> = {\n+    let vec_tuple = (Vec::new(),);\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+\n+    vec_tuple.0\n+};\n+\n+// This applies to single-field enum variants as well.\n+const _: Vec<i32> = {\n+    let x: Result<_, Vec<i32>> = Ok(Vec::new());\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+\n+    match x {\n+        Ok(x) | Err(x) => x,\n+    }\n+};\n+\n+fn main() {}"}, {"sha": "35ceb3b277084407a92c36cc5787d7bcefe5af6c", "filename": "src/test/ui/consts/control-flow/drop-failure.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-failure.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,21 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-failure.rs:6:9\n+   |\n+LL |     let x = Some(Vec::new());\n+   |         ^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-failure.rs:19:9\n+   |\n+LL |     let vec_tuple = (Vec::new(),);\n+   |         ^^^^^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop-failure.rs:27:9\n+   |\n+LL |     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n+   |         ^ constants cannot evaluate destructors\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0493`."}, {"sha": "92b3f6ec92eb5f2e70e47f263b561a6d82ab03ed", "filename": "src/test/ui/consts/control-flow/drop-success.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-success.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+\n+#![feature(const_if_match)]\n+\n+// `x` is always moved into the final value and is not dropped inside the initializer.\n+const _: Option<Vec<i32>> = {\n+    let y: Option<Vec<i32>> = None;\n+    let x = Some(Vec::new());\n+\n+    if true {\n+        x\n+    } else {\n+        x\n+    }\n+};\n+\n+const _: Option<Vec<i32>> = {\n+    let x = Some(Vec::new());\n+    match () {\n+        () => x,\n+    }\n+};\n+\n+fn main() {}"}, {"sha": "21e3f2af15ad6280ce4ca9b38300f7a023126f5f", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.if_match.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.if_match.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,14 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/feature-gate-const-if-match.rs:108:1\n+   |\n+LL | / fn main() {\n+LL | |     let _ = [0; {\n+LL | |         let x = if false { 0 } else { 1 };\n+LL | |\n+...  |\n+LL | |     }];\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "00576d50ac66b46f3af78f3fc08de759b9436ea6", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,118 @@\n+// Ensure that `if`, `if let` and `match` are only allowed in the various const contexts when\n+// `#![feature(const_if_match)]` is enabled. When the feature gate is removed, the `#[rustc_error]`\n+// on `main` should be removed and this test converted to `check-pass`.\n+\n+// revisions: stock if_match\n+\n+#![feature(rustc_attrs)]\n+#![cfg_attr(if_match, feature(const_if_match))]\n+\n+const _: i32 = if true { //[stock]~ ERROR `if` is not allowed in a `const`\n+    5\n+} else {\n+    6\n+};\n+\n+const _: i32 = if let Some(true) = Some(false) { //[stock]~ ERROR `if` is not allowed in a `const`\n+    0\n+} else {\n+    1\n+};\n+\n+const _: i32 = match 1 { //[stock]~ ERROR `match` is not allowed in a `const`\n+    2 => 3,\n+    4 => 5,\n+    _ => 0,\n+};\n+\n+static FOO: i32 = {\n+    let x = if true { 0 } else { 1 };\n+    //[stock]~^ ERROR `if` is not allowed in a `static`\n+    let x = match x { 0 => 1, _ => 0 };\n+    //[stock]~^ ERROR `match` is not allowed in a `static`\n+    if let Some(x) = Some(x) { x } else { 1 }\n+    //[stock]~^ ERROR `if` is not allowed in a `static`\n+};\n+\n+static mut BAR: i32 = {\n+    let x = if true { 0 } else { 1 };\n+    //[stock]~^ ERROR `if` is not allowed in a `static mut`\n+    let x = match x { 0 => 1, _ => 0 };\n+    //[stock]~^ ERROR `match` is not allowed in a `static mut`\n+    if let Some(x) = Some(x) { x } else { 1 }\n+    //[stock]~^ ERROR `if` is not allowed in a `static mut`\n+};\n+\n+const fn if_() -> i32 {\n+    if true { 5 } else { 6 } //[stock]~ ERROR `if` is not allowed in a `const fn`\n+}\n+\n+const fn if_let(a: Option<bool>) -> i32 {\n+    if let Some(true) = a { //[stock]~ ERROR `if` is not allowed in a `const fn`\n+        0\n+    } else {\n+        1\n+    }\n+}\n+\n+const fn match_(i: i32) -> i32 {\n+    match i { //[stock]~ ERROR `match` is not allowed in a `const fn`\n+        i if i > 10 => i,\n+        1 => 2,\n+        _ => 0\n+    }\n+}\n+\n+pub trait Foo {\n+    const IF: i32 = if true { 5 } else { 6 };\n+    //[stock]~^ ERROR `if` is not allowed in a `const`\n+\n+    const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n+    //[stock]~^ ERROR `if` is not allowed in a `const`\n+\n+    const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n+    //[stock]~^ ERROR `match` is not allowed in a `const`\n+}\n+\n+impl Foo for () {\n+    const IF: i32 = if true { 5 } else { 6 };\n+    //[stock]~^ ERROR `if` is not allowed in a `const`\n+\n+    const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n+    //[stock]~^ ERROR `if` is not allowed in a `const`\n+\n+    const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n+    //[stock]~^ ERROR `match` is not allowed in a `const`\n+}\n+\n+fn non_const_outside() {\n+    const fn const_inside(y: bool) -> i32 {\n+        let x = if y { 0 } else { 1 };\n+        //[stock]~^ ERROR `if` is not allowed in a `const fn`\n+        let x = match x { 0 => 1, _ => 0 };\n+        //[stock]~^ ERROR `match` is not allowed in a `const fn`\n+        if let Some(x) = Some(x) { x } else { 1 }\n+        //[stock]~^ ERROR `if` is not allowed in a `const fn`\n+    }\n+}\n+\n+const fn const_outside() {\n+    fn non_const_inside(y: bool) -> i32 {\n+        let x = if y { 0 } else { 1 };\n+        let x = match x { 0 => 1, _ => 0 };\n+        if let Some(x) = Some(x) { x } else { 1 }\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { //[if_match]~ ERROR fatal error triggered by #[rustc_error]\n+    let _ = [0; {\n+        let x = if false { 0 } else { 1 };\n+        //[stock]~^ ERROR `if` is not allowed in a `const`\n+        let x = match x { 0 => 1, _ => 0 };\n+        //[stock]~^ ERROR `match` is not allowed in a `const`\n+        if let Some(x) = Some(x) { x } else { 1 }\n+        //[stock]~^ ERROR `if` is not allowed in a `const`\n+        //[stock]~| ERROR constant contains unimplemented expression type\n+    }];\n+}"}, {"sha": "d3c6a51923ffb54317d6315399c92c61ba520b6e", "filename": "src/test/ui/consts/control-flow/feature-gate-const-if-match.stock.stderr", "status": "added", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ffeature-gate-const-if-match.stock.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,249 @@\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:10:16\n+   |\n+LL |   const _: i32 = if true {\n+   |  ________________^\n+LL | |     5\n+LL | | } else {\n+LL | |     6\n+LL | | };\n+   | |_^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:16:16\n+   |\n+LL |   const _: i32 = if let Some(true) = Some(false) {\n+   |  ________________^\n+LL | |     0\n+LL | | } else {\n+LL | |     1\n+LL | | };\n+   | |_^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:22:16\n+   |\n+LL |   const _: i32 = match 1 {\n+   |  ________________^\n+LL | |     2 => 3,\n+LL | |     4 => 5,\n+LL | |     _ => 0,\n+LL | | };\n+   | |_^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `static`\n+  --> $DIR/feature-gate-const-if-match.rs:29:13\n+   |\n+LL |     let x = if true { 0 } else { 1 };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `static`\n+  --> $DIR/feature-gate-const-if-match.rs:31:13\n+   |\n+LL |     let x = match x { 0 => 1, _ => 0 };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `static`\n+  --> $DIR/feature-gate-const-if-match.rs:33:5\n+   |\n+LL |     if let Some(x) = Some(x) { x } else { 1 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `static mut`\n+  --> $DIR/feature-gate-const-if-match.rs:38:13\n+   |\n+LL |     let x = if true { 0 } else { 1 };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `static mut`\n+  --> $DIR/feature-gate-const-if-match.rs:40:13\n+   |\n+LL |     let x = match x { 0 => 1, _ => 0 };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `static mut`\n+  --> $DIR/feature-gate-const-if-match.rs:42:5\n+   |\n+LL |     if let Some(x) = Some(x) { x } else { 1 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const fn`\n+  --> $DIR/feature-gate-const-if-match.rs:47:5\n+   |\n+LL |     if true { 5 } else { 6 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const fn`\n+  --> $DIR/feature-gate-const-if-match.rs:51:5\n+   |\n+LL | /     if let Some(true) = a {\n+LL | |         0\n+LL | |     } else {\n+LL | |         1\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `const fn`\n+  --> $DIR/feature-gate-const-if-match.rs:59:5\n+   |\n+LL | /     match i {\n+LL | |         i if i > 10 => i,\n+LL | |         1 => 2,\n+LL | |         _ => 0\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const fn`\n+  --> $DIR/feature-gate-const-if-match.rs:90:17\n+   |\n+LL |         let x = if y { 0 } else { 1 };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `const fn`\n+  --> $DIR/feature-gate-const-if-match.rs:92:17\n+   |\n+LL |         let x = match x { 0 => 1, _ => 0 };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const fn`\n+  --> $DIR/feature-gate-const-if-match.rs:94:9\n+   |\n+LL |         if let Some(x) = Some(x) { x } else { 1 }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:110:17\n+   |\n+LL |         let x = if false { 0 } else { 1 };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:112:17\n+   |\n+LL |         let x = match x { 0 => 1, _ => 0 };\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:114:9\n+   |\n+LL |         if let Some(x) = Some(x) { x } else { 1 }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:67:21\n+   |\n+LL |     const IF: i32 = if true { 5 } else { 6 };\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:70:25\n+   |\n+LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:73:24\n+   |\n+LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:78:21\n+   |\n+LL |     const IF: i32 = if true { 5 } else { 6 };\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:81:25\n+   |\n+LL |     const IF_LET: i32 = if let Some(true) = None { 5 } else { 6 };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/feature-gate-const-if-match.rs:84:24\n+   |\n+LL |     const MATCH: i32 = match 0 { 1 => 2, _ => 0 };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/feature-gate-const-if-match.rs:114:21\n+   |\n+LL |         if let Some(x) = Some(x) { x } else { 1 }\n+   |                     ^\n+\n+error: aborting due to 25 previous errors\n+\n+Some errors have detailed explanations: E0019, E0658.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "fcced75fcb04720d3da58b242d2e707902e7b4a6", "filename": "src/test/ui/consts/control-flow/interior-mutability.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,27 @@\n+// Ensure that *any* assignment to the return place of a value with interior mutability\n+// disqualifies it from promotion.\n+\n+#![feature(const_if_match)]\n+\n+use std::cell::Cell;\n+\n+const X: Option<Cell<i32>> = {\n+    let mut x = None;\n+    if false {\n+        x = Some(Cell::new(4));\n+    }\n+    x\n+};\n+\n+const Y: Option<Cell<i32>> = {\n+    let mut y = Some(Cell::new(4));\n+    if true {\n+        y = None;\n+    }\n+    y\n+};\n+\n+fn main() {\n+    let x: &'static _ = &X; //~ ERROR temporary value dropped while borrowed\n+    let y: &'static _ = &Y; //~ ERROR temporary value dropped while borrowed\n+}"}, {"sha": "49e8ea3ade7bafb8d06cc8060892a6f7249b8388", "filename": "src/test/ui/consts/control-flow/interior-mutability.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,24 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/interior-mutability.rs:25:26\n+   |\n+LL |     let x: &'static _ = &X;\n+   |            ----------    ^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     let y: &'static _ = &Y;\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/interior-mutability.rs:26:26\n+   |\n+LL |     let y: &'static _ = &Y;\n+   |            ----------    ^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "4c64d7dee8c0136b370d74f0739d75de9ece63a5", "filename": "src/test/ui/consts/control-flow/issue-46843.if_match.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.if_match.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-46843.rs:11:26\n+   |\n+LL | pub const Q: i32 = match non_const() {\n+   |                          ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "1fc91015ffa702351cd0e8eb345c3f17236e88cf", "filename": "src/test/ui/consts/control-flow/issue-46843.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,18 @@\n+// revisions: stock if_match\n+\n+#![cfg_attr(if_match, feature(const_if_match))]\n+\n+enum Thing { This, That }\n+\n+fn non_const() -> Thing {\n+    Thing::This\n+}\n+\n+pub const Q: i32 = match non_const() {\n+    //[stock]~^ ERROR `match` is not allowed in a `const`\n+    //[if_match]~^^ ERROR calls in constants are limited to constant functions\n+    Thing::This => 1,\n+    Thing::That => 0\n+};\n+\n+fn main() {}"}, {"sha": "b6f38f8ed95e1839e0b0bb5fa0040466623a2422", "filename": "src/test/ui/consts/control-flow/issue-46843.stock.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-46843.stock.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,18 @@\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/issue-46843.rs:11:20\n+   |\n+LL |   pub const Q: i32 = match non_const() {\n+   |  ____________________^\n+LL | |\n+LL | |\n+LL | |     Thing::This => 1,\n+LL | |     Thing::That => 0\n+LL | | };\n+   | |_^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "79572c417024f3fbbb9b68d0d762204799e04cbd", "filename": "src/test/ui/consts/control-flow/issue-50577.if_match.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,16 @@\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/issue-50577.rs:7:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected `()`, found `isize`\n+   |                found here\n+   |\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0317`."}, {"sha": "7906ec4dc68c7703903b6611031ca298abd2a59f", "filename": "src/test/ui/consts/control-flow/issue-50577.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,13 @@\n+// revisions: stock if_match\n+\n+#![cfg_attr(if_match, feature(const_if_match))]\n+\n+fn main() {\n+    enum Foo {\n+        Drop = assert_eq!(1, 1)\n+        //[stock,if_match]~^ ERROR if may be missing an else clause\n+        //[stock]~^^ ERROR `match` is not allowed in a `const`\n+        //[stock]~| ERROR `match` is not allowed in a `const`\n+        //[stock]~| ERROR `if` is not allowed in a `const`\n+    }\n+}"}, {"sha": "13b50954292ea5e72f010c177b0fa96cc78befc0", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "renamed", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,29 +1,35 @@\n-error[E0744]: `match` is not allowed in a `const`\n-  --> $DIR/issue-50577.rs:3:16\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0744]: `if` is not allowed in a `const`\n-  --> $DIR/issue-50577.rs:3:16\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0744]: `match` is not allowed in a `const`\n-  --> $DIR/issue-50577.rs:3:16\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0317]: if may be missing an else clause\n-  --> $DIR/issue-50577.rs:3:16\n+  --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n@@ -37,5 +43,5 @@ LL |         Drop = assert_eq!(1, 1)\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0317, E0744.\n+Some errors have detailed explanations: E0317, E0658.\n For more information about an error, try `rustc --explain E0317`.", "previous_filename": "src/test/ui/issues/issue-50577.stderr"}, {"sha": "15b9eb028611ebf99304e7106cbc62fbd01ada4a", "filename": "src/test/ui/consts/control-flow/loop.if_match.stderr", "status": "renamed", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.if_match.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,67 +1,67 @@\n error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:1:15\n+  --> $DIR/loop.rs:8:15\n    |\n LL | const _: () = loop {};\n    |               ^^^^^^^\n \n error[E0744]: `loop` is not allowed in a `static`\n-  --> $DIR/const-loop.rs:3:19\n+  --> $DIR/loop.rs:10:19\n    |\n LL | static FOO: i32 = loop { break 4; };\n    |                   ^^^^^^^^^^^^^^^^^\n \n error[E0744]: `loop` is not allowed in a `const fn`\n-  --> $DIR/const-loop.rs:6:5\n+  --> $DIR/loop.rs:13:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n \n error[E0744]: `loop` is not allowed in a `const fn`\n-  --> $DIR/const-loop.rs:19:9\n+  --> $DIR/loop.rs:26:9\n    |\n LL |         loop {}\n    |         ^^^^^^^\n \n error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:31:9\n+  --> $DIR/loop.rs:38:9\n    |\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^\n \n error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:40:5\n+  --> $DIR/loop.rs:47:5\n    |\n LL | /     while x < 4 {\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n \n error[E0744]: `while` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:44:5\n+  --> $DIR/loop.rs:51:5\n    |\n LL | /     while x < 8 {\n LL | |         x += 1;\n LL | |     }\n    | |_____^\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:54:5\n+  --> $DIR/loop.rs:61:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:58:5\n+  --> $DIR/loop.rs:65:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:68:5\n+  --> $DIR/loop.rs:75:5\n    |\n LL | /     loop {\n LL | |         x += 1;\n@@ -71,16 +71,8 @@ LL | |         }\n LL | |     }\n    | |_____^\n \n-error[E0744]: `if` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:70:9\n-   |\n-LL | /         if x == 4 {\n-LL | |             break;\n-LL | |         }\n-   | |_________^\n-\n error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:75:5\n+  --> $DIR/loop.rs:82:5\n    |\n LL | /     loop {\n LL | |         x += 1;\n@@ -90,38 +82,30 @@ LL | |         }\n LL | |     }\n    | |_____^\n \n-error[E0744]: `if` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:77:9\n-   |\n-LL | /         if x == 8 {\n-LL | |             break;\n-LL | |         }\n-   | |_________^\n-\n-error[E0744]: `while let` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:87:5\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:94:5\n    |\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0744]: `while let` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:88:5\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:95:5\n    |\n LL |     while let None = Some(x) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:10:22\n+  --> $DIR/loop.rs:17:22\n    |\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0744]: `loop` is not allowed in a `const`\n-  --> $DIR/const-loop.rs:14:22\n+  --> $DIR/loop.rs:21:22\n    |\n LL |     const BAR: i32 = loop { break 4; };\n    |                      ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0744`.", "previous_filename": "src/test/ui/consts/const-loop.stderr"}, {"sha": "4be341f2d38463f7153f200ed17b0b1491fc7886", "filename": "src/test/ui/consts/control-flow/loop.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,97 @@\n+// Ensure that all loops are forbidden in a const context, even if `#![feature(const_if_match)]` is\n+// enabled.\n+\n+// revisions: stock if_match\n+\n+#![cfg_attr(if_match, feature(const_if_match))]\n+\n+const _: () = loop {}; //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+\n+static FOO: i32 = loop { break 4; }; //[stock,if_match]~ ERROR `loop` is not allowed in a `static`\n+\n+const fn foo() {\n+    loop {} //[stock,if_match]~ ERROR `loop` is not allowed in a `const fn`\n+}\n+\n+pub trait Foo {\n+    const BAR: i32 = loop { break 4; }; //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+}\n+\n+impl Foo for () {\n+    const BAR: i32 = loop { break 4; }; //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+}\n+\n+fn non_const_outside() {\n+    const fn const_inside() {\n+        loop {} //[stock,if_match]~ ERROR `loop` is not allowed in a `const fn`\n+    }\n+}\n+\n+const fn const_outside() {\n+    fn non_const_inside() {\n+        loop {}\n+    }\n+}\n+\n+fn main() {\n+    let x = [0; {\n+        while false {}\n+        //[stock,if_match]~^ ERROR `while` is not allowed in a `const`\n+        4\n+    }];\n+}\n+\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    while x < 4 { //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n+        x += 1;\n+    }\n+\n+    while x < 8 { //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n+        x += 1;\n+    }\n+\n+    x\n+};\n+\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    for i in 0..4 { //[stock,if_match]~ ERROR `for` is not allowed in a `const`\n+        x += i;\n+    }\n+\n+    for i in 0..4 { //[stock,if_match]~ ERROR `for` is not allowed in a `const`\n+        x += i;\n+    }\n+\n+    x\n+};\n+\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    loop { //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+        x += 1;\n+        if x == 4 { //[stock]~ ERROR `if` is not allowed in a `const`\n+            break;\n+        }\n+    }\n+\n+    loop { //[stock,if_match]~ ERROR `loop` is not allowed in a `const`\n+        x += 1;\n+        if x == 8 { //[stock]~ ERROR `if` is not allowed in a `const`\n+            break;\n+        }\n+    }\n+\n+    x\n+};\n+\n+const _: i32 = {\n+    let mut x = 0;\n+    while let None = Some(x) { } //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n+    while let None = Some(x) { } //[stock,if_match]~ ERROR `while` is not allowed in a `const`\n+    x\n+};"}, {"sha": "bb651d23179f7538f7552f4064c7a2d9212b9b7b", "filename": "src/test/ui/consts/control-flow/loop.stock.stderr", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,134 @@\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:8:15\n+   |\n+LL | const _: () = loop {};\n+   |               ^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `static`\n+  --> $DIR/loop.rs:10:19\n+   |\n+LL | static FOO: i32 = loop { break 4; };\n+   |                   ^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const fn`\n+  --> $DIR/loop.rs:13:5\n+   |\n+LL |     loop {}\n+   |     ^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const fn`\n+  --> $DIR/loop.rs:26:9\n+   |\n+LL |         loop {}\n+   |         ^^^^^^^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:38:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:47:5\n+   |\n+LL | /     while x < 4 {\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:51:5\n+   |\n+LL | /     while x < 8 {\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n+\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/loop.rs:61:5\n+   |\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n+\n+error[E0744]: `for` is not allowed in a `const`\n+  --> $DIR/loop.rs:65:5\n+   |\n+LL | /     for i in 0..4 {\n+LL | |         x += i;\n+LL | |     }\n+   | |_____^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:75:5\n+   |\n+LL | /     loop {\n+LL | |         x += 1;\n+LL | |         if x == 4 {\n+LL | |             break;\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/loop.rs:77:9\n+   |\n+LL | /         if x == 4 {\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:82:5\n+   |\n+LL | /     loop {\n+LL | |         x += 1;\n+LL | |         if x == 8 {\n+LL | |             break;\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+\n+error[E0658]: `if` is not allowed in a `const`\n+  --> $DIR/loop.rs:84:9\n+   |\n+LL | /         if x == 8 {\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:94:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `while` is not allowed in a `const`\n+  --> $DIR/loop.rs:95:5\n+   |\n+LL |     while let None = Some(x) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:17:22\n+   |\n+LL |     const BAR: i32 = loop { break 4; };\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error[E0744]: `loop` is not allowed in a `const`\n+  --> $DIR/loop.rs:21:22\n+   |\n+LL |     const BAR: i32 = loop { break 4; };\n+   |                      ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n+\n+Some errors have detailed explanations: E0658, E0744.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "8cee2a54f56d3e4c08b1aeeeb272a068e9364959", "filename": "src/test/ui/consts/control-flow/short-circuit-let.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit-let.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,39 @@\n+// `&&` and `||` were previously forbidden in constants alongside let bindings.\n+\n+// run-pass\n+\n+#![feature(const_if_match)]\n+#![feature(const_panic)]\n+\n+const X: i32 = {\n+    let mut x = 0;\n+    let _ = true && { x = 1; false };\n+    x\n+};\n+\n+const Y: bool = {\n+    let x = true && false || true;\n+    x\n+};\n+\n+const fn truthy() -> bool {\n+    let x = true || return false;\n+    x\n+}\n+\n+const fn falsy() -> bool {\n+    let x = true && return false;\n+    x\n+}\n+\n+fn main() {\n+    const _: () = assert!(Y);\n+    assert!(Y);\n+\n+    const _: () = assert!(X == 1);\n+    assert_eq!(X, 1);\n+\n+    const _: () = assert!(truthy());\n+    const _: () = assert!(!falsy());\n+    assert!(truthy() && !falsy());\n+}"}, {"sha": "f6ba28e7b7246e64945af31c6e0a75277d50d445", "filename": "src/test/ui/consts/control-flow/short-circuit.if_match.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.if_match.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/short-circuit.rs:14:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f5e54a69d4a6f72e52a9924a162b86dc3a000966", "filename": "src/test/ui/consts/control-flow/short-circuit.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,14 @@\n+// Test that both `&&` and `||` actually short-circuit when the `const_if_match` feature flag is\n+// enabled. Without the feature flag, both sides are evaluated unconditionally.\n+\n+// revisions: stock if_match\n+\n+#![feature(rustc_attrs)]\n+#![feature(const_panic)]\n+#![cfg_attr(if_match, feature(const_if_match))]\n+\n+const _: bool = true || panic!();  //[stock]~ ERROR any use of this value will cause an error\n+const _: bool = false && panic!(); //[stock]~ ERROR any use of this value will cause an error\n+\n+#[rustc_error]\n+fn main() {} //[if_match]~ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "cf0de929593dba7e13f76c0fb101a2475ef40cdc", "filename": "src/test/ui/consts/control-flow/short-circuit.stock.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,23 @@\n+error: any use of this value will cause an error\n+  --> $DIR/short-circuit.rs:10:25\n+   |\n+LL | const _: bool = true || panic!();\n+   | ------------------------^^^^^^^^-\n+   |                         |\n+   |                         the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:10:25\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/short-circuit.rs:11:26\n+   |\n+LL | const _: bool = false && panic!();\n+   | -------------------------^^^^^^^^-\n+   |                          |\n+   |                          the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:11:26\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "823605ff034f10c8ca1c25bb2b53c6da78c021c8", "filename": "src/test/ui/consts/control-flow/single_variant_match_ice.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle_variant_match_ice.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+#![feature(const_if_match)]\n+\n+enum Foo {\n+    Prob,\n+}\n+\n+const FOO: u32 = match Foo::Prob {\n+    Foo::Prob => 42,\n+};\n+\n+const BAR: u32 = match Foo::Prob {\n+    x => 42,\n+};\n+\n+impl Foo {\n+    pub const fn as_val(&self) -> u8 {\n+        use self::Foo::*;\n+\n+        match *self {\n+            Prob => 0x1,\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "31fe09d4f69624e3885bbf32f25277b284ac4d9d", "filename": "src/test/ui/consts/control-flow/try.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,12 @@\n+// The `?` operator is still not const-evaluatable because it calls `From::from` on the error\n+// variant.\n+\n+#![feature(const_if_match)]\n+\n+const fn opt() -> Option<i32> {\n+    let x = Some(2);\n+    x?; //~ ERROR `?` is not allowed in a `const fn`\n+    None\n+}\n+\n+fn main() {}"}, {"sha": "60a386ef6c870fc7bf9d4c8d9f5d4da306206856", "filename": "src/test/ui/consts/control-flow/try.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Ftry.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -0,0 +1,9 @@\n+error[E0744]: `?` is not allowed in a `const fn`\n+  --> $DIR/try.rs:8:5\n+   |\n+LL |     x?;\n+   |     ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "80a92c4c96558fa5cd295bae68507a7fdfd89c0b", "filename": "src/test/ui/consts/single_variant_match_ice.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.rs?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,23 +0,0 @@\n-enum Foo {\n-    Prob,\n-}\n-\n-const FOO: u32 = match Foo::Prob { //~ ERROR `match` is not allowed in a `const`\n-    Foo::Prob => 42,\n-};\n-\n-const BAR: u32 = match Foo::Prob { //~ ERROR `match` is not allowed in a `const`\n-    x => 42,\n-};\n-\n-impl Foo {\n-    pub const fn as_val(&self) -> u8 {\n-        use self::Foo::*;\n-\n-        match *self { //~ ERROR `match` is not allowed in a `const fn`\n-            Prob => 0x1,\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "780dd0dcddf492e89af118cf39defdb1949b4da6", "filename": "src/test/ui/consts/single_variant_match_ice.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,29 +0,0 @@\n-error[E0744]: `match` is not allowed in a `const`\n-  --> $DIR/single_variant_match_ice.rs:5:18\n-   |\n-LL |   const FOO: u32 = match Foo::Prob {\n-   |  __________________^\n-LL | |     Foo::Prob => 42,\n-LL | | };\n-   | |_^\n-\n-error[E0744]: `match` is not allowed in a `const`\n-  --> $DIR/single_variant_match_ice.rs:9:18\n-   |\n-LL |   const BAR: u32 = match Foo::Prob {\n-   |  __________________^\n-LL | |     x => 42,\n-LL | | };\n-   | |_^\n-\n-error[E0744]: `match` is not allowed in a `const fn`\n-  --> $DIR/single_variant_match_ice.rs:17:9\n-   |\n-LL | /         match *self {\n-LL | |             Prob => 0x1,\n-LL | |         }\n-   | |_________^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0744`."}, {"sha": "8d2cdf34f373e83e317330cbe6751a833932ce87", "filename": "src/test/ui/enum-discriminant/niche.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,8 +1,7 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you -Awarnings\n // run-pass\n \n-// miri unleashed warnings are not useful and change frequently, so they are silenced above.\n #![feature(const_panic)]\n+#![feature(const_if_match)]\n \n //! Make sure that we read and write enum discriminants correctly for corner cases caused\n //! by layout optimizations.", "previous_filename": "src/test/ui/consts/miri_unleashed/enum_discriminants.rs"}, {"sha": "e5b271367393d14c7b39fe509d1dd92a4bd9a8e5", "filename": "src/test/ui/issues/issue-46843.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46843.rs?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,13 +0,0 @@\n-enum Thing { This, That }\n-\n-fn non_const() -> Thing {\n-    Thing::This\n-}\n-\n-pub const Q: i32 = match non_const() {\n-    //~^ ERROR `match` is not allowed in a `const`\n-    Thing::This => 1,\n-    Thing::That => 0\n-};\n-\n-fn main() {}"}, {"sha": "9d5332978644ed813cf2916f57c02c8bd6441c5b", "filename": "src/test/ui/issues/issue-46843.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46843.stderr?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,14 +0,0 @@\n-error[E0744]: `match` is not allowed in a `const`\n-  --> $DIR/issue-46843.rs:7:20\n-   |\n-LL |   pub const Q: i32 = match non_const() {\n-   |  ____________________^\n-LL | |\n-LL | |     Thing::This => 1,\n-LL | |     Thing::That => 0\n-LL | | };\n-   | |_^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0744`."}, {"sha": "f3f680e7b8ecdebe9342018e9066aaadd8d13ac3", "filename": "src/test/ui/issues/issue-50577.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d93f35f6965cec7e75099bc775e24c61ca9f7a/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs?ref=26d93f35f6965cec7e75099bc775e24c61ca9f7a", "patch": "@@ -1,9 +0,0 @@\n-fn main() {\n-    enum Foo {\n-        Drop = assert_eq!(1, 1)\n-        //~^ ERROR if may be missing an else clause\n-        //~| ERROR `match` is not allowed in a `const`\n-        //~| ERROR `match` is not allowed in a `const`\n-        //~| ERROR `if` is not allowed in a `const`\n-    }\n-}"}, {"sha": "782037a1fe5d4642483103adac351fb2f27e9807", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -10,5 +10,5 @@ fn main() {\n \n     [(); return while let Some(n) = Some(0) {}];\n     //~^ ERROR return statement outside of function body\n-    //~| ERROR `while let` is not allowed in a `const`\n+    //~| ERROR `while` is not allowed in a `const`\n }"}, {"sha": "001928c3b2f317e92e9510f17bc7b3caa01c81db", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,4 +1,4 @@\n-error[E0744]: `while let` is not allowed in a `const`\n+error[E0744]: `while` is not allowed in a `const`\n   --> $DIR/issue-51714.rs:11:17\n    |\n LL |     [(); return while let Some(n) = Some(0) {}];"}, {"sha": "c4fb68c02784ee5304a980d45e1103e99db48de9", "filename": "src/test/ui/loops/loop-break-value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -33,19 +33,19 @@ fn main() {\n     }\n \n     while let Some(_) = Some(()) {\n-        if break () { //~ ERROR `break` with value from a `while let` loop\n+        if break () { //~ ERROR `break` with value from a `while` loop\n         }\n     }\n \n     while let Some(_) = Some(()) {\n         break None;\n-        //~^ ERROR `break` with value from a `while let` loop\n+        //~^ ERROR `break` with value from a `while` loop\n     }\n \n     'while_let_loop: while let Some(_) = Some(()) {\n         loop {\n             break 'while_let_loop \"nope\";\n-            //~^ ERROR `break` with value from a `while let` loop\n+            //~^ ERROR `break` with value from a `while` loop\n             break 33;\n         };\n     }"}, {"sha": "1f2d81ff03f0af2a2880c11a1ec4e70b37e1aedb", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -28,35 +28,35 @@ help: instead, use `break` on its own without a value inside this `while` loop\n LL |             break;\n    |             ^^^^^\n \n-error[E0571]: `break` with value from a `while let` loop\n+error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:36:12\n    |\n LL |         if break () {\n    |            ^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while let` loop\n+help: instead, use `break` on its own without a value inside this `while` loop\n    |\n LL |         if break {\n    |            ^^^^^\n \n-error[E0571]: `break` with value from a `while let` loop\n+error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:41:9\n    |\n LL |         break None;\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while let` loop\n+help: instead, use `break` on its own without a value inside this `while` loop\n    |\n LL |         break;\n    |         ^^^^^\n \n-error[E0571]: `break` with value from a `while let` loop\n+error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:47:13\n    |\n LL |             break 'while_let_loop \"nope\";\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while let` loop\n+help: instead, use `break` on its own without a value inside this `while` loop\n    |\n LL |             break;\n    |             ^^^^^"}, {"sha": "8b8e961b726d7ba5068f224d8efaf7c14c24ed41", "filename": "src/test/ui/return/return-match-array-const.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -1,20 +1,29 @@\n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/return-match-array-const.rs:2:17\n    |\n LL |     [(); return match 0 { n => n }];\n    |                 ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/return-match-array-const.rs:6:17\n    |\n LL |     [(); return match 0 { 0 => 0 }];\n    |                 ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/return-match-array-const.rs:10:17\n    |\n LL |     [(); return match () { 'a' => 0, _ => 0 }];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0572]: return statement outside of function body\n   --> $DIR/return-match-array-const.rs:2:10\n@@ -36,5 +45,5 @@ LL |     [(); return match () { 'a' => 0, _ => 0 }];\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0572, E0744.\n+Some errors have detailed explanations: E0572, E0658.\n For more information about an error, try `rustc --explain E0572`."}, {"sha": "f24ea0505e785143933e5cbeadf2b67dc78cf797", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c377f37e4281d87b26c33dfdabf2ec1450e5095/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=5c377f37e4281d87b26c33dfdabf2ec1450e5095", "patch": "@@ -513,23 +513,32 @@ warning: the feature `let_chains` is incomplete and may cause the compiler to cr\n LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n    |            ^^^^^^^^^^\n \n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/disallowed-positions.rs:218:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/disallowed-positions.rs:223:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n-error[E0744]: `match` is not allowed in a `const`\n+error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/disallowed-positions.rs:228:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:32:8\n@@ -952,5 +961,5 @@ LL |         let 0 = 0?;\n \n error: aborting due to 106 previous errors\n \n-Some errors have detailed explanations: E0277, E0308, E0600, E0614, E0744.\n+Some errors have detailed explanations: E0277, E0308, E0600, E0614, E0658.\n For more information about an error, try `rustc --explain E0277`."}]}