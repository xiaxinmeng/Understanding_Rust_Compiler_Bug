{"sha": "c5fee33e7aa71d7cfc5abd8848a81924cafd2b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZmVlMzNlN2FhNzFkN2NmYzVhYmQ4ODQ4YTgxOTI0Y2FmZDJiMTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-20T09:49:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T17:54:16Z"}, "message": "rustc_metadata: Remove `RwLock` from `CStore`", "tree": {"sha": "3f500021171d4ad9b3717a610a6f85d229f2fd33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f500021171d4ad9b3717a610a6f85d229f2fd33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15", "html_url": "https://github.com/rust-lang/rust/commit/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3534ca8f4985afad9b8dfe93ab570b721b80210e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3534ca8f4985afad9b8dfe93ab570b721b80210e", "html_url": "https://github.com/rust-lang/rust/commit/3534ca8f4985afad9b8dfe93ab570b721b80210e"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "420595a690d5e0233d76a093d04f0676a16ae29d", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c5fee33e7aa71d7cfc5abd8848a81924cafd2b15", "patch": "@@ -179,7 +179,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn register_crate(\n-        &self,\n+        &mut self,\n         host_lib: Option<Library>,\n         root: Option<&CratePaths>,\n         span: Span,\n@@ -319,7 +319,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn resolve_crate<'b>(\n-        &'b self,\n+        &'b mut self,\n         name: Symbol,\n         span: Span,\n         dep_kind: DepKind,\n@@ -329,7 +329,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn maybe_resolve_crate<'b>(\n-        &'b self,\n+        &'b mut self,\n         name: Symbol,\n         span: Span,\n         mut dep_kind: DepKind,\n@@ -458,7 +458,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     // Go through the crate metadata and load any crates that it references\n-    fn resolve_crate_deps(&self,\n+    fn resolve_crate_deps(&mut self,\n                           root: &CratePaths,\n                           crate_root: &CrateRoot<'_>,\n                           metadata: &MetadataBlob,\n@@ -519,7 +519,7 @@ impl<'a> CrateLoader<'a> {\n         decls\n     }\n \n-    fn inject_panic_runtime(&self, krate: &ast::Crate) {\n+    fn inject_panic_runtime(&mut self, krate: &ast::Crate) {\n         // If we're only compiling an rlib, then there's no need to select a\n         // panic runtime, so we just skip this section entirely.\n         let any_non_rlib = self.sess.crate_types.borrow().iter().any(|ct| {\n@@ -600,7 +600,7 @@ impl<'a> CrateLoader<'a> {\n                                   &|data| data.root.needs_panic_runtime);\n     }\n \n-    fn inject_sanitizer_runtime(&self) {\n+    fn inject_sanitizer_runtime(&mut self) {\n         if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n             // Sanitizers can only be used on some tested platforms with\n             // executables linked to `std`\n@@ -698,7 +698,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn inject_profiler_runtime(&self) {\n+    fn inject_profiler_runtime(&mut self) {\n         if self.sess.opts.debugging_opts.profile ||\n            self.sess.opts.cg.profile_generate.enabled()\n         {\n@@ -852,7 +852,7 @@ impl<'a> CrateLoader<'a> {\n         });\n     }\n \n-    pub fn postprocess(&self, krate: &ast::Crate) {\n+    pub fn postprocess(&mut self, krate: &ast::Crate) {\n         self.inject_sanitizer_runtime();\n         self.inject_profiler_runtime();\n         self.inject_allocator_crate(krate);\n@@ -863,7 +863,11 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    pub fn process_extern_crate(&self, item: &ast::Item, definitions: &Definitions) -> CrateNum {\n+    pub fn process_extern_crate(\n+        &mut self,\n+        item: &ast::Item,\n+        definitions: &Definitions,\n+    ) -> CrateNum {\n         match item.kind {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\"resolving extern crate stmt. ident: {} orig_name: {:?}\",\n@@ -902,7 +906,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    pub fn process_path_extern(&self, name: Symbol, span: Span) -> CrateNum {\n+    pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> CrateNum {\n         let cnum = self.resolve_crate(name, span, DepKind::Explicit, None).0;\n \n         self.update_extern_crate(\n@@ -920,7 +924,7 @@ impl<'a> CrateLoader<'a> {\n         cnum\n     }\n \n-    pub fn maybe_process_path_extern(&self, name: Symbol, span: Span) -> Option<CrateNum> {\n+    pub fn maybe_process_path_extern(&mut self, name: Symbol, span: Span) -> Option<CrateNum> {\n         let cnum = self.maybe_resolve_crate(name, span, DepKind::Explicit, None).ok()?.0;\n \n         self.update_extern_crate("}, {"sha": "a0589b1f3bd3e5e7e27f97577429626178006354", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fee33e7aa71d7cfc5abd8848a81924cafd2b15/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=c5fee33e7aa71d7cfc5abd8848a81924cafd2b15", "patch": "@@ -97,7 +97,7 @@ crate struct CrateMetadata {\n \n #[derive(Clone)]\n pub struct CStore {\n-    metas: RwLock<IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>>,\n+    metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n }\n \n pub enum LoadedMacro {\n@@ -112,34 +112,31 @@ impl Default for CStore {\n             // order to make array indices in `metas` match with the\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n-            metas: RwLock::new(IndexVec::from_elem_n(None, 1)),\n+            metas: IndexVec::from_elem_n(None, 1),\n         }\n     }\n }\n \n impl CStore {\n-    crate fn alloc_new_crate_num(&self) -> CrateNum {\n-        let mut metas = self.metas.borrow_mut();\n-        let cnum = CrateNum::new(metas.len());\n-        metas.push(None);\n-        cnum\n+    crate fn alloc_new_crate_num(&mut self) -> CrateNum {\n+        self.metas.push(None);\n+        CrateNum::new(self.metas.len() - 1)\n     }\n \n     crate fn get_crate_data(&self, cnum: CrateNum) -> Lrc<CrateMetadata> {\n-        self.metas.borrow()[cnum].clone()\n+        self.metas[cnum].clone()\n             .unwrap_or_else(|| panic!(\"Failed to get crate data for {:?}\", cnum))\n     }\n \n-    crate fn set_crate_data(&self, cnum: CrateNum, data: Lrc<CrateMetadata>) {\n-        let mut metas = self.metas.borrow_mut();\n-        assert!(metas[cnum].is_none(), \"Overwriting crate metadata entry\");\n-        metas[cnum] = Some(data);\n+    crate fn set_crate_data(&mut self, cnum: CrateNum, data: Lrc<CrateMetadata>) {\n+        assert!(self.metas[cnum].is_none(), \"Overwriting crate metadata entry\");\n+        self.metas[cnum] = Some(data);\n     }\n \n     crate fn iter_crate_data<I>(&self, mut i: I)\n         where I: FnMut(CrateNum, &Lrc<CrateMetadata>)\n     {\n-        for (k, v) in self.metas.borrow().iter_enumerated() {\n+        for (k, v) in self.metas.iter_enumerated() {\n             if let &Some(ref v) = v {\n                 i(k, v);\n             }\n@@ -170,7 +167,7 @@ impl CStore {\n \n     crate fn do_postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n         let mut ordering = Vec::new();\n-        for (num, v) in self.metas.borrow().iter_enumerated() {\n+        for (num, v) in self.metas.iter_enumerated() {\n             if let &Some(_) = v {\n                 self.push_dependencies_in_postorder(&mut ordering, num);\n             }"}]}