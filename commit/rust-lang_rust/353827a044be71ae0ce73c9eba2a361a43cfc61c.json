{"sha": "353827a044be71ae0ce73c9eba2a361a43cfc61c", "node_id": "C_kwDOAAsO6NoAKDM1MzgyN2EwNDRiZTcxYWUwY2U3M2M5ZWJhMmEzNjFhNDNjZmM2MWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-24T06:32:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-24T06:32:45Z"}, "message": "Rollup merge of #108391 - sunfishcode:sunfishcode/is-terminal-file-length, r=ChrisDenton\n\nFix `is_terminal`'s handling of long paths on Windows.\n\nAs reported in sunfishcode/is-terminal#18, there are situations where `GetFileInformationByHandleEx` can write a file name length that is longer than the provided buffer. To avoid deferencing memory past the end of the buffer, use a bounds-checked function to form a slice to the buffer and handle the out-of-bounds case.\n\nThis ports the fix from sunfishcode/is-terminal#19 to std's `is_terminal` implementation.", "tree": {"sha": "fc865750d4e4a2be4bee71fdc28ea4e408d890d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc865750d4e4a2be4bee71fdc28ea4e408d890d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/353827a044be71ae0ce73c9eba2a361a43cfc61c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+FoNCRBK7hj4Ov3rIwAAnWUIAF6jLzqkYRH4uCcYz6JxJc+x\nTChlFMOo5WeQ4ZzSfPGzGJVSewhSSETWrr+thtfVuSP9ftUoSWMrzo3z6iN1sQ3o\nkQtmvox0Tb3Xi6nszilcSp51KSLHITVmeaLlf27CaFfCpKcQWreIcBeApAGX6FQ6\nE682cdl9ICVtdvxU861B3866n9KgDxbNnSNYK+N0uKlxcGyAVVofHt7PFXks7FEb\n9CNpBPtobFG299hVmpDEid248TjxobZPXQBzT9tBOdu3/EsLDT/KJR62RZhbZDMK\ns7MeWYCmAylN4MiEenZsanlvEPmqMl0A/dMa+u6oebBAufbqcyO1hJAYiimgUWY=\n=DynB\n-----END PGP SIGNATURE-----\n", "payload": "tree fc865750d4e4a2be4bee71fdc28ea4e408d890d1\nparent 8acbfe27d62b40186a0566f0e2bc8dbe3da5b407\nparent c0c1925774bc07a25bd6a3f07f75abf274183cfb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677220365 +0530\ncommitter GitHub <noreply@github.com> 1677220365 +0530\n\nRollup merge of #108391 - sunfishcode:sunfishcode/is-terminal-file-length, r=ChrisDenton\n\nFix `is_terminal`'s handling of long paths on Windows.\n\nAs reported in sunfishcode/is-terminal#18, there are situations where `GetFileInformationByHandleEx` can write a file name length that is longer than the provided buffer. To avoid deferencing memory past the end of the buffer, use a bounds-checked function to form a slice to the buffer and handle the out-of-bounds case.\n\nThis ports the fix from sunfishcode/is-terminal#19 to std's `is_terminal` implementation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/353827a044be71ae0ce73c9eba2a361a43cfc61c", "html_url": "https://github.com/rust-lang/rust/commit/353827a044be71ae0ce73c9eba2a361a43cfc61c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/353827a044be71ae0ce73c9eba2a361a43cfc61c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8acbfe27d62b40186a0566f0e2bc8dbe3da5b407", "url": "https://api.github.com/repos/rust-lang/rust/commits/8acbfe27d62b40186a0566f0e2bc8dbe3da5b407", "html_url": "https://github.com/rust-lang/rust/commit/8acbfe27d62b40186a0566f0e2bc8dbe3da5b407"}, {"sha": "c0c1925774bc07a25bd6a3f07f75abf274183cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c1925774bc07a25bd6a3f07f75abf274183cfb", "html_url": "https://github.com/rust-lang/rust/commit/c0c1925774bc07a25bd6a3f07f75abf274183cfb"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "1d0ab7727394a73864ff92a676436e35493a5545", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/353827a044be71ae0ce73c9eba2a361a43cfc61c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353827a044be71ae0ce73c9eba2a361a43cfc61c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=353827a044be71ae0ce73c9eba2a361a43cfc61c", "patch": "@@ -539,14 +539,6 @@ pub struct SYMBOLIC_LINK_REPARSE_BUFFER {\n     pub PathBuffer: WCHAR,\n }\n \n-/// NB: Use carefully! In general using this as a reference is likely to get the\n-/// provenance wrong for the `PathBuffer` field!\n-#[repr(C)]\n-pub struct FILE_NAME_INFO {\n-    pub FileNameLength: DWORD,\n-    pub FileName: [WCHAR; 1],\n-}\n-\n #[repr(C)]\n pub struct MOUNT_POINT_REPARSE_BUFFER {\n     pub SubstituteNameOffset: c_ushort,"}, {"sha": "7fdd1f702e2fdbb80d58c1f4ddeb7e66dfbfa5bc", "filename": "library/std/src/sys/windows/io.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/353827a044be71ae0ce73c9eba2a361a43cfc61c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353827a044be71ae0ce73c9eba2a361a43cfc61c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs?ref=353827a044be71ae0ce73c9eba2a361a43cfc61c", "patch": "@@ -2,8 +2,7 @@ use crate::marker::PhantomData;\n use crate::mem::size_of;\n use crate::os::windows::io::{AsHandle, AsRawHandle, BorrowedHandle};\n use crate::slice;\n-use crate::sys::{c, Align8};\n-use core;\n+use crate::sys::c;\n use libc;\n \n #[derive(Copy, Clone)]\n@@ -125,22 +124,33 @@ unsafe fn msys_tty_on(handle: c::HANDLE) -> bool {\n         return false;\n     }\n \n-    const SIZE: usize = size_of::<c::FILE_NAME_INFO>() + c::MAX_PATH * size_of::<c::WCHAR>();\n-    let mut name_info_bytes = Align8([0u8; SIZE]);\n+    /// Mirrors [`FILE_NAME_INFO`], giving it a fixed length that we can stack\n+    /// allocate\n+    ///\n+    /// [`FILE_NAME_INFO`]: https://learn.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_name_info\n+    #[repr(C)]\n+    #[allow(non_snake_case)]\n+    struct FILE_NAME_INFO {\n+        FileNameLength: u32,\n+        FileName: [u16; c::MAX_PATH as usize],\n+    }\n+    let mut name_info = FILE_NAME_INFO { FileNameLength: 0, FileName: [0; c::MAX_PATH as usize] };\n+    // Safety: buffer length is fixed.\n     let res = c::GetFileInformationByHandleEx(\n         handle,\n         c::FileNameInfo,\n-        name_info_bytes.0.as_mut_ptr() as *mut libc::c_void,\n-        SIZE as u32,\n+        &mut name_info as *mut _ as *mut libc::c_void,\n+        size_of::<FILE_NAME_INFO>() as u32,\n     );\n     if res == 0 {\n         return false;\n     }\n-    let name_info: &c::FILE_NAME_INFO = &*(name_info_bytes.0.as_ptr() as *const c::FILE_NAME_INFO);\n-    let name_len = name_info.FileNameLength as usize / 2;\n-    // Offset to get the `FileName` field.\n-    let name_ptr = name_info_bytes.0.as_ptr().offset(size_of::<c::DWORD>() as isize).cast::<u16>();\n-    let s = core::slice::from_raw_parts(name_ptr, name_len);\n+\n+    // Use `get` because `FileNameLength` can be out of range.\n+    let s = match name_info.FileName.get(..name_info.FileNameLength as usize / 2) {\n+        None => return false,\n+        Some(s) => s,\n+    };\n     let name = String::from_utf16_lossy(s);\n     // Get the file name only.\n     let name = name.rsplit('\\\\').next().unwrap_or(&name);"}]}