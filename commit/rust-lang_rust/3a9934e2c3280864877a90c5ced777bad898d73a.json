{"sha": "3a9934e2c3280864877a90c5ced777bad898d73a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTkzNGUyYzMyODA4NjQ4NzdhOTBjNWNlZDc3N2JhZDg5OGQ3M2E=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-10T21:34:29Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-13T19:10:46Z"}, "message": "Keep track of crate edition", "tree": {"sha": "b37994dc169b216a2d11a11bbe91503526d9b2dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b37994dc169b216a2d11a11bbe91503526d9b2dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9934e2c3280864877a90c5ced777bad898d73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9934e2c3280864877a90c5ced777bad898d73a", "html_url": "https://github.com/rust-lang/rust/commit/3a9934e2c3280864877a90c5ced777bad898d73a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9934e2c3280864877a90c5ced777bad898d73a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1526eb25c98fd16a9c0d114d0ed44e8fec1cc19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1526eb25c98fd16a9c0d114d0ed44e8fec1cc19c", "html_url": "https://github.com/rust-lang/rust/commit/1526eb25c98fd16a9c0d114d0ed44e8fec1cc19c"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "76998ea303be4a13f957653647cb2d6b20790760", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -56,15 +56,22 @@ pub struct CyclicDependencies;\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum Edition {\n+    Edition2018,\n+    Edition2015,\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n struct CrateData {\n     file_id: FileId,\n+    edition: Edition,\n     dependencies: Vec<Dependency>,\n }\n \n impl CrateData {\n-    fn new(file_id: FileId) -> CrateData {\n-        CrateData { file_id, dependencies: Vec::new() }\n+    fn new(file_id: FileId, edition: Edition) -> CrateData {\n+        CrateData { file_id, edition, dependencies: Vec::new() }\n     }\n \n     fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n@@ -85,9 +92,9 @@ impl Dependency {\n }\n \n impl CrateGraph {\n-    pub fn add_crate_root(&mut self, file_id: FileId) -> CrateId {\n+    pub fn add_crate_root(&mut self, file_id: FileId, edition: Edition) -> CrateId {\n         let crate_id = CrateId(self.arena.len() as u32);\n-        let prev = self.arena.insert(crate_id, CrateData::new(file_id));\n+        let prev = self.arena.insert(crate_id, CrateData::new(file_id, edition));\n         assert!(prev.is_none());\n         crate_id\n     }\n@@ -159,14 +166,14 @@ impl CrateGraph {\n \n #[cfg(test)]\n mod tests {\n-    use super::{CrateGraph, FileId, SmolStr};\n+    use super::{CrateGraph, FileId, SmolStr, Edition::Edition2018};\n \n     #[test]\n-    fn it_should_painc_because_of_cycle_dependencies() {\n+    fn it_should_panic_because_of_cycle_dependencies() {\n         let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32));\n-        let crate2 = graph.add_crate_root(FileId(2u32));\n-        let crate3 = graph.add_crate_root(FileId(3u32));\n+        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018);\n+        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018);\n+        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018);\n         assert!(graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2).is_ok());\n         assert!(graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3).is_ok());\n         assert!(graph.add_dep(crate3, SmolStr::new(\"crate1\"), crate1).is_err());\n@@ -175,9 +182,9 @@ mod tests {\n     #[test]\n     fn it_works() {\n         let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32));\n-        let crate2 = graph.add_crate_root(FileId(2u32));\n-        let crate3 = graph.add_crate_root(FileId(3u32));\n+        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018);\n+        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018);\n+        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018);\n         assert!(graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2).is_ok());\n         assert!(graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3).is_ok());\n     }"}, {"sha": "e006c6d275e3bbda5635a41a766ea2700f1ff04c", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -14,7 +14,7 @@ pub use ::salsa as salsa;\n pub use crate::{\n     cancellation::Canceled,\n     input::{\n-        FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency,\n+        FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency, Edition,\n     },\n     loc2id::LocationIntener,\n };"}, {"sha": "145ed39a1f6853de1a27b1539acaa884ea87816c", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -3,6 +3,7 @@ use std::{sync::Arc, panic};\n use parking_lot::Mutex;\n use ra_db::{\n     FilePosition, FileId, CrateGraph, SourceRoot, SourceRootId, SourceDatabase, salsa,\n+    Edition,\n };\n use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n@@ -60,7 +61,7 @@ impl MockDatabase {\n         let mut crate_graph = CrateGraph::default();\n         for (crate_name, (crate_root, _)) in graph.0.iter() {\n             let crate_root = self.file_id_of(&crate_root);\n-            let crate_id = crate_graph.add_crate_root(crate_root);\n+            let crate_id = crate_graph.add_crate_root(crate_root, Edition::Edition2018);\n             ids.insert(crate_name, crate_id);\n         }\n         for (crate_name, (_, deps)) in graph.0.iter() {\n@@ -144,7 +145,7 @@ impl MockDatabase {\n \n         if is_crate_root {\n             let mut crate_graph = CrateGraph::default();\n-            crate_graph.add_crate_root(file_id);\n+            crate_graph.add_crate_root(file_id, Edition::Edition2018);\n             self.set_crate_graph(Arc::new(crate_graph));\n         }\n         file_id"}, {"sha": "d77a56ce805c23a5aa2fe9b42b70271cff0309b1", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -62,7 +62,8 @@ pub use ra_ide_api_light::{\n     LineIndex, LineCol, translate_offset_with_edit,\n };\n pub use ra_db::{\n-    Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, SourceRootId\n+    Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, SourceRootId,\n+    Edition\n };\n pub use hir::Documentation;\n "}, {"sha": "550d69641759debab912612d727611d27b1c2747", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n use relative_path::RelativePathBuf;\n use test_utils::{extract_offset, extract_range, parse_fixture, CURSOR_MARKER};\n \n-use crate::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, FilePosition, FileRange, SourceRootId};\n+use crate::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, FilePosition, FileRange, SourceRootId, Edition::Edition2018};\n \n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n@@ -89,9 +89,9 @@ impl MockAnalysis {\n             let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n             let file_id = FileId(i as u32 + 1);\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n-                root_crate = Some(crate_graph.add_crate_root(file_id));\n+                root_crate = Some(crate_graph.add_crate_root(file_id, Edition2018));\n             } else if path.ends_with(\"/lib.rs\") {\n-                let other_crate = crate_graph.add_crate_root(file_id);\n+                let other_crate = crate_graph.add_crate_root(file_id, Edition2018);\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n                 if let Some(root_crate) = root_crate {\n                     crate_graph.add_dep(root_crate, crate_name.into(), other_crate).unwrap();"}, {"sha": "0526f758453bdac9898ca8d214fe92d454512284", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -1,7 +1,7 @@\n use insta::assert_debug_snapshot_matches;\n use ra_ide_api::{\n     mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n-    AnalysisChange, CrateGraph, FileId, Query, NavigationTarget,\n+    AnalysisChange, CrateGraph, Edition::Edition2018, FileId, Query, NavigationTarget\n };\n use ra_syntax::{TextRange, SmolStr};\n \n@@ -36,7 +36,7 @@ fn test_resolve_crate_root() {\n     assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n \n     let mut crate_graph = CrateGraph::default();\n-    let crate_id = crate_graph.add_crate_root(root_file);\n+    let crate_id = crate_graph.add_crate_root(root_file, Edition2018);\n     let mut change = AnalysisChange::new();\n     change.set_crate_graph(crate_graph);\n     host.apply_change(change);"}, {"sha": "e28aca259a96cffd3b52c04ee9b778a17426ca6d", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -35,6 +35,7 @@ struct PackageData {\n     targets: Vec<Target>,\n     is_member: bool,\n     dependencies: Vec<PackageDependency>,\n+    edition: String,\n }\n \n #[derive(Debug, Clone)]\n@@ -84,6 +85,9 @@ impl Package {\n     pub fn root(self, ws: &CargoWorkspace) -> &Path {\n         ws.packages[self].manifest.parent().unwrap()\n     }\n+    pub fn edition(self, ws: &CargoWorkspace) -> &str {\n+        &ws.packages[self].edition\n+    }\n     pub fn targets<'a>(self, ws: &'a CargoWorkspace) -> impl Iterator<Item = Target> + 'a {\n         ws.packages[self].targets.iter().cloned()\n     }\n@@ -135,6 +139,7 @@ impl CargoWorkspace {\n                 manifest: meta_pkg.manifest_path.clone(),\n                 targets: Vec::new(),\n                 is_member,\n+                edition: meta_pkg.edition,\n                 dependencies: Vec::new(),\n             });\n             let pkg_data = &mut packages[pkg];"}, {"sha": "e5c93fd856f37891d7467e8d51899158fc03b8d0", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9934e2c3280864877a90c5ced777bad898d73a/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=3a9934e2c3280864877a90c5ced777bad898d73a", "patch": "@@ -6,7 +6,7 @@ use std::path::{Path, PathBuf};\n use failure::bail;\n use rustc_hash::FxHashMap;\n \n-use ra_db::{CrateGraph, FileId};\n+use ra_db::{CrateGraph, FileId, Edition};\n \n pub use crate::{\n     cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n@@ -36,7 +36,8 @@ impl ProjectWorkspace {\n         let mut sysroot_crates = FxHashMap::default();\n         for krate in self.sysroot.crates() {\n             if let Some(file_id) = load(krate.root(&self.sysroot)) {\n-                sysroot_crates.insert(krate, crate_graph.add_crate_root(file_id));\n+                sysroot_crates\n+                    .insert(krate, crate_graph.add_crate_root(file_id, Edition::Edition2015));\n             }\n         }\n         for from in self.sysroot.crates() {\n@@ -62,7 +63,12 @@ impl ProjectWorkspace {\n             for tgt in pkg.targets(&self.cargo) {\n                 let root = tgt.root(&self.cargo);\n                 if let Some(file_id) = load(root) {\n-                    let crate_id = crate_graph.add_crate_root(file_id);\n+                    let edition = if pkg.edition(&self.cargo) == \"2015\" {\n+                        Edition::Edition2015\n+                    } else {\n+                        Edition::Edition2018\n+                    };\n+                    let crate_id = crate_graph.add_crate_root(file_id, edition);\n                     if tgt.kind(&self.cargo) == TargetKind::Lib {\n                         lib_tgt = Some(crate_id);\n                         pkg_to_lib_crate.insert(pkg, crate_id);"}]}