{"sha": "11e81951bb514b55fab0057442a168e81d6f37cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTgxOTUxYmI1MTRiNTVmYWIwMDU3NDQyYTE2OGU4MWQ2ZjM3Y2M=", "commit": {"author": {"name": "Gareth Daniel Smith", "email": "garethdanielsmith@gmail.com", "date": "2012-05-17T18:52:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T00:38:04Z"}, "message": "separate the rand::rng gen_* methods out into an iface-less-impl so that the gen_* methods can be reused with different rng implementations (for https://github.com/mozilla/rust/issues/2379)", "tree": {"sha": "0a178f651746282190bbf4a73c0322da129066d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a178f651746282190bbf4a73c0322da129066d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e81951bb514b55fab0057442a168e81d6f37cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e81951bb514b55fab0057442a168e81d6f37cc", "html_url": "https://github.com/rust-lang/rust/commit/11e81951bb514b55fab0057442a168e81d6f37cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e81951bb514b55fab0057442a168e81d6f37cc/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4da0364f9c6f5b7e88d00ee563e0f0b2e0da4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4da0364f9c6f5b7e88d00ee563e0f0b2e0da4e7", "html_url": "https://github.com/rust-lang/rust/commit/b4da0364f9c6f5b7e88d00ee563e0f0b2e0da4e7"}], "stats": {"total": 105, "additions": 62, "deletions": 43}, "files": [{"sha": "4b07e2b29b7b639319d4747f32ea34373056f097", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11e81951bb514b55fab0057442a168e81d6f37cc/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e81951bb514b55fab0057442a168e81d6f37cc/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=11e81951bb514b55fab0057442a168e81d6f37cc", "patch": "@@ -11,6 +11,7 @@ import vec_iter::extensions;\n import option::extensions;\n import option_iter::extensions;\n import ptr::extensions;\n+import rand::extensions;\n \n export path, option, some, none, unreachable;\n export extensions;"}, {"sha": "30ec17990921633ea0bb292bf0b3a198b62dc6a0", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 61, "deletions": 43, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/11e81951bb514b55fab0057442a168e81d6f37cc/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e81951bb514b55fab0057442a168e81d6f37cc/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=11e81951bb514b55fab0057442a168e81d6f37cc", "patch": "@@ -1,6 +1,6 @@\n #[doc = \"Random number generation\"];\n \n-export rng;\n+export rng, extensions;\n \n enum rctx {}\n \n@@ -15,55 +15,56 @@ native mod rustrt {\n iface rng {\n     #[doc = \"Return the next random integer\"]\n     fn next() -> u32;\n+}\n+\n+#[doc = \"Extension methods for random number generators\"]\n+impl extensions for rng {\n \n-    #[doc = \"Return the next random float\"]\n-    fn next_float() -> float;\n+    #[doc = \"Return a random float\"]\n+    fn gen_float() -> float {\n+          let u1 = self.next() as float;\n+          let u2 = self.next() as float;\n+          let u3 = self.next() as float;\n+          let scale = u32::max_value as float;\n+          ret ((u1 / scale + u2) / scale + u3) / scale;\n+    }\n \n     #[doc = \"Return a random string composed of A-Z, a-z, 0-9.\"]\n-    fn gen_str(len: uint) -> str;\n+    fn gen_str(len: uint) -> str {\n+        let charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n+                      \"abcdefghijklmnopqrstuvwxyz\" +\n+                      \"0123456789\";\n+        let mut s = \"\";\n+        let mut i = 0u;\n+        while (i < len) {\n+            let n = self.next() as uint % charset.len();\n+            s = s + str::from_char(str::char_at(charset, n));\n+            i += 1u;\n+        }\n+        s\n+    }\n \n     #[doc = \"Return a random byte string.\"]\n-    fn gen_bytes(len: uint) -> [u8];\n+    fn gen_bytes(len: uint) -> [u8] {\n+        let mut v = [];\n+        let mut i = 0u;\n+        while i < len {\n+            let n = self.next() as uint;\n+            v += [(n % (u8::max_value as uint)) as u8];\n+            i += 1u;\n+        }\n+        v\n+    }\n }\n \n-resource rand_res(c: *rctx) { rustrt::rand_free(c); }\n-\n #[doc = \"Create a random number generator\"]\n fn rng() -> rng {\n+    resource rand_res(c: *rctx) { rustrt::rand_free(c); }\n+\n     impl of rng for @rand_res {\n         fn next() -> u32 { ret rustrt::rand_next(**self); }\n-        fn next_float() -> float {\n-          let u1 = rustrt::rand_next(**self) as float;\n-          let u2 = rustrt::rand_next(**self) as float;\n-          let u3 = rustrt::rand_next(**self) as float;\n-          let scale = u32::max_value as float;\n-          ret ((u1 / scale + u2) / scale + u3) / scale;\n-        }\n-        fn gen_str(len: uint) -> str {\n-            let charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n-                          \"abcdefghijklmnopqrstuvwxyz\" +\n-                          \"0123456789\";\n-            let mut s = \"\";\n-            let mut i = 0u;\n-            while (i < len) {\n-                let n = rustrt::rand_next(**self) as uint %\n-                    str::len(charset);\n-                s = s + str::from_char(str::char_at(charset, n));\n-                i += 1u;\n-            }\n-            s\n-        }\n-        fn gen_bytes(len: uint) -> [u8] {\n-            let mut v = [];\n-            let mut i = 0u;\n-            while i < len {\n-                let n = rustrt::rand_next(**self) as uint;\n-                v += [(n % (u8::max_value as uint)) as u8];\n-                i += 1u;\n-            }\n-            v\n-        }\n     }\n+\n     @rand_res(rustrt::rand_new()) as rng\n }\n \n@@ -72,7 +73,7 @@ mod tests {\n \n     #[test]\n     fn test() {\n-        let r1: rand::rng = rand::rng();\n+        let r1 = rand::rng();\n         log(debug, r1.next());\n         log(debug, r1.next());\n         {\n@@ -95,13 +96,30 @@ mod tests {\n     }\n \n     #[test]\n-    fn genstr() {\n-        let r: rand::rng = rand::rng();\n+    fn gen_float() {\n+        let r = rand::rng();\n+        let a = r.gen_float();\n+        let b = r.gen_float();\n+        log(debug, (a, b));\n+    }\n+\n+    #[test]\n+    fn gen_str() {\n+        let r = rand::rng();\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));\n         log(debug, r.gen_str(10u));\n-        assert(str::len(r.gen_str(10u)) == 10u);\n-        assert(str::len(r.gen_str(16u)) == 16u);\n+        assert r.gen_str(0u).len() == 0u;\n+        assert r.gen_str(10u).len() == 10u;\n+        assert r.gen_str(16u).len() == 16u;\n+    }\n+\n+    #[test]\n+    fn gen_bytes() {\n+        let r = rand::rng();\n+        assert r.gen_bytes(0u).len() == 0u;\n+        assert r.gen_bytes(10u).len() == 10u;\n+        assert r.gen_bytes(16u).len() == 16u;\n     }\n }\n "}]}