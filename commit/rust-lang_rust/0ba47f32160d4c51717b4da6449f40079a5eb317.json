{"sha": "0ba47f32160d4c51717b4da6449f40079a5eb317", "node_id": "C_kwDOAAsO6NoAKDBiYTQ3ZjMyMTYwZDRjNTE3MTdiNGRhNjQ0OWY0MDA3OWE1ZWIzMTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-02T02:16:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-02T02:16:25Z"}, "message": "Make `SearchPathFile::file_name_str` non-optional.\n\nCurrently, it can be `None` if the conversion from `OsString` fails, in\nwhich case all searches will skip over the `SearchPathFile`.\n\nThe commit changes things so that the `SearchPathFile` just doesn't get\ncreated in the first place. Same behaviour, but slightly simpler code.", "tree": {"sha": "a470dc615528e53bac5cf48394e6862429b37403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a470dc615528e53bac5cf48394e6862429b37403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba47f32160d4c51717b4da6449f40079a5eb317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba47f32160d4c51717b4da6449f40079a5eb317", "html_url": "https://github.com/rust-lang/rust/commit/0ba47f32160d4c51717b4da6449f40079a5eb317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba47f32160d4c51717b4da6449f40079a5eb317/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b61ea09f03060ceac3d0a1779dbb4152b6fddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b61ea09f03060ceac3d0a1779dbb4152b6fddd", "html_url": "https://github.com/rust-lang/rust/commit/89b61ea09f03060ceac3d0a1779dbb4152b6fddd"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "caa544284c914b074c17dcc09028021838b91296", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ba47f32160d4c51717b4da6449f40079a5eb317/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba47f32160d4c51717b4da6449f40079a5eb317/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=0ba47f32160d4c51717b4da6449f40079a5eb317", "patch": "@@ -399,10 +399,7 @@ impl<'a> CrateLocator<'a> {\n             for spf in search_path.files.iter() {\n                 debug!(\"testing {}\", spf.path.display());\n \n-                let file = match &spf.file_name_str {\n-                    None => continue,\n-                    Some(file) => file,\n-                };\n+                let file = &spf.file_name_str;\n                 let (hash, found_kind) = if file.starts_with(&rlib_prefix)\n                     && file.ends_with(\".rlib\")\n                 {"}, {"sha": "b6bde28233d243bc2ad86c0e5619111f3bc1d6d7", "filename": "compiler/rustc_session/src/search_paths.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0ba47f32160d4c51717b4da6449f40079a5eb317/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba47f32160d4c51717b4da6449f40079a5eb317/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs?ref=0ba47f32160d4c51717b4da6449f40079a5eb317", "patch": "@@ -15,22 +15,15 @@ pub struct SearchPath {\n /// doable, but very slow, because it involves calls to `file_name` and\n /// `extension` that are themselves slow.\n ///\n-/// This type augments the `PathBuf` with an `Option<String>` containing the\n+/// This type augments the `PathBuf` with an `String` containing the\n /// `PathBuf`'s filename. The prefix and suffix checking is much faster on the\n-/// `Option<String>` than the `PathBuf`. (It's an `Option` because\n-/// `Path::file_name` can fail; if that happens then all subsequent checking\n-/// will also fail, which is fine.)\n+/// `String` than the `PathBuf`. (The filename must be valid UTF-8. If it's\n+/// not, the entry should be skipped, because all Rust output files are valid\n+/// UTF-8, and so a non-UTF-8 filename couldn't be one we're looking for.)\n #[derive(Clone, Debug)]\n pub struct SearchPathFile {\n     pub path: PathBuf,\n-    pub file_name_str: Option<String>,\n-}\n-\n-impl SearchPathFile {\n-    fn new(path: PathBuf) -> SearchPathFile {\n-        let file_name_str = path.file_name().and_then(|f| f.to_str()).map(|s| s.to_string());\n-        SearchPathFile { path, file_name_str }\n-    }\n+    pub file_name_str: String,\n }\n \n #[derive(PartialEq, Clone, Copy, Debug, Hash, Eq, Encodable, Decodable)]\n@@ -85,7 +78,14 @@ impl SearchPath {\n         // Get the files within the directory.\n         let files = match std::fs::read_dir(&dir) {\n             Ok(files) => files\n-                .filter_map(|e| e.ok().map(|e| SearchPathFile::new(e.path())))\n+                .filter_map(|e| {\n+                    e.ok().and_then(|e| {\n+                        e.file_name().to_str().map(|s| SearchPathFile {\n+                            path: e.path(),\n+                            file_name_str: s.to_string(),\n+                        })\n+                    })\n+                })\n                 .collect::<Vec<_>>(),\n             Err(..) => vec![],\n         };"}]}