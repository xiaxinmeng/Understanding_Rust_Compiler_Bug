{"sha": "6ca2756a82b69eb849f73588754c3ccdeb04d93b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYTI3NTZhODJiNjllYjg0OWY3MzU4ODc1NGMzY2NkZWIwNGQ5M2I=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-01T20:00:28Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-01T20:00:28Z"}, "message": "Merge pull request #238 from nrc/fn-decl\n\nCustomisation of function decls", "tree": {"sha": "425117732d0b1b378c049604dc781a4cbb247391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/425117732d0b1b378c049604dc781a4cbb247391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ca2756a82b69eb849f73588754c3ccdeb04d93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca2756a82b69eb849f73588754c3ccdeb04d93b", "html_url": "https://github.com/rust-lang/rust/commit/6ca2756a82b69eb849f73588754c3ccdeb04d93b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ca2756a82b69eb849f73588754c3ccdeb04d93b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0264d926bed0449f8b6f233075e8453899546d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/0264d926bed0449f8b6f233075e8453899546d00", "html_url": "https://github.com/rust-lang/rust/commit/0264d926bed0449f8b6f233075e8453899546d00"}, {"sha": "8d81aa1991a92bc23c8629f1ef79b9c5dc13ff93", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d81aa1991a92bc23c8629f1ef79b9c5dc13ff93", "html_url": "https://github.com/rust-lang/rust/commit/8d81aa1991a92bc23c8629f1ef79b9c5dc13ff93"}], "stats": {"total": 419, "additions": 400, "deletions": 19}, "files": [{"sha": "1119f92bd62624e61f3f71e2738995570126289c", "filename": "src/config.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -11,7 +11,7 @@\n extern crate toml;\n \n use {NewlineStyle, BraceStyle, ReturnIndent, StructLitStyle};\n-use lists::SeparatorTactic;\n+use lists::{SeparatorTactic, ListTactic};\n use issues::ReportTactic;\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n@@ -26,6 +26,25 @@ pub enum BlockIndentStyle {\n \n impl_enum_decodable!(BlockIndentStyle, Inherit, Tabbed, Visual);\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum Density {\n+    // Fit as much on one line as possible.\n+    Compressed,\n+    // Use more lines.\n+    Tall,\n+}\n+\n+impl_enum_decodable!(Density, Compressed, Tall);\n+\n+impl Density {\n+    pub fn to_list_tactic(self) -> ListTactic {\n+        match self {\n+            Density::Compressed => ListTactic::Mixed,\n+            Density::Tall => ListTactic::HorizontalVertical,\n+        }\n+    }\n+}\n+\n macro_rules! create_config {\n     ($($i:ident: $ty:ty),+ $(,)*) => (\n         #[derive(RustcDecodable, Clone)]\n@@ -70,6 +89,14 @@ create_config! {\n     fn_brace_style: BraceStyle,\n     fn_return_indent: ReturnIndent,\n     fn_args_paren_newline: bool,\n+    fn_args_layout: Density,\n+    fn_arg_indent: BlockIndentStyle,\n+    where_density: Density, // Should we at least try to put the where clause on the same line as\n+                            // the rest of the function decl?\n+    where_indent: BlockIndentStyle, // Visual will be treated like Tabbed\n+    where_layout: ListTactic,\n+    where_pred_indent: BlockIndentStyle,\n+    generics_indent: BlockIndentStyle,\n     struct_trailing_comma: SeparatorTactic,\n     struct_lit_trailing_comma: SeparatorTactic,\n     struct_lit_style: StructLitStyle,\n@@ -95,6 +122,13 @@ impl Default for Config {\n             fn_brace_style: BraceStyle::SameLineWhere,\n             fn_return_indent: ReturnIndent::WithArgs,\n             fn_args_paren_newline: true,\n+            fn_args_layout: Density::Tall,\n+            fn_arg_indent: BlockIndentStyle::Visual,\n+            where_density: Density::Tall,\n+            where_indent: BlockIndentStyle::Tabbed,\n+            where_layout: ListTactic::Vertical,\n+            where_pred_indent: BlockIndentStyle::Visual,\n+            generics_indent: BlockIndentStyle::Visual,\n             struct_trailing_comma: SeparatorTactic::Vertical,\n             struct_lit_trailing_comma: SeparatorTactic::Vertical,\n             struct_lit_style: StructLitStyle::BlockIndent,"}, {"sha": "cc431792c102665efe3fee7e9574e469e97b1ee7", "filename": "src/items.rs", "status": "modified", "additions": 75, "deletions": 18, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -18,7 +18,7 @@ use expr::rewrite_assign_rhs;\n use comment::FindUncommented;\n use visitor::FmtVisitor;\n use rewrite::Rewrite;\n-use config::Config;\n+use config::{Config, BlockIndentStyle, Density};\n \n use syntax::{ast, abi};\n use syntax::codemap::{self, Span, BytePos};\n@@ -99,7 +99,7 @@ impl<'a> FmtVisitor<'a> {\n                       vis: ast::Visibility,\n                       span: Span)\n                       -> String {\n-        let newline_brace = self.newline_for_brace(&generics.where_clause);\n+        let mut newline_brace = self.newline_for_brace(&generics.where_clause);\n \n         let mut result = self.rewrite_fn_base(indent,\n                                               ident,\n@@ -113,6 +113,10 @@ impl<'a> FmtVisitor<'a> {\n                                               span,\n                                               newline_brace);\n \n+        if self.config.fn_brace_style != BraceStyle::AlwaysNextLine && !result.contains('\\n') {\n+            newline_brace = false;\n+        }\n+\n         // Prepare for the function body by possibly adding a newline and\n         // indent.\n         // FIXME we'll miss anything between the end of the signature and the\n@@ -196,6 +200,7 @@ impl<'a> FmtVisitor<'a> {\n         // Generics.\n         let generics_indent = indent + result.len();\n         result.push_str(&self.rewrite_generics(generics,\n+                                               indent,\n                                                generics_indent,\n                                                codemap::mk_sp(span.lo,\n                                                               span_for_return(&fd.output).lo)));\n@@ -237,6 +242,7 @@ impl<'a> FmtVisitor<'a> {\n                                            explicit_self,\n                                            one_line_budget,\n                                            multi_line_budget,\n+                                           indent,\n                                            arg_indent,\n                                            args_span));\n         result.push(')');\n@@ -279,10 +285,18 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n+        let where_density = if self.config.where_density == Density::Compressed &&\n+                               !result.contains('\\n') {\n+            Density::Compressed\n+        } else {\n+            Density::Tall\n+        };\n+\n         // Where clause.\n         result.push_str(&self.rewrite_where_clause(where_clause,\n                                                    self.config,\n                                                    indent,\n+                                                   where_density,\n                                                    span.hi));\n \n         result\n@@ -293,6 +307,7 @@ impl<'a> FmtVisitor<'a> {\n                     explicit_self: Option<&ast::ExplicitSelf>,\n                     one_line_budget: usize,\n                     multi_line_budget: usize,\n+                    indent: usize,\n                     arg_indent: usize,\n                     span: Span)\n                     -> String {\n@@ -341,11 +356,17 @@ impl<'a> FmtVisitor<'a> {\n             item.item = arg;\n         }\n \n+        let indent = match self.config.fn_arg_indent {\n+            BlockIndentStyle::Inherit => indent,\n+            BlockIndentStyle::Tabbed => indent + self.config.tab_spaces,\n+            BlockIndentStyle::Visual => arg_indent,\n+        };\n+\n         let fmt = ListFormatting {\n-            tactic: ListTactic::HorizontalVertical,\n+            tactic: self.config.fn_args_layout.to_list_tactic(),\n             separator: \",\",\n             trailing_separator: SeparatorTactic::Never,\n-            indent: arg_indent,\n+            indent: indent,\n             h_width: one_line_budget,\n             v_width: multi_line_budget,\n             ends_with_newline: false,\n@@ -424,6 +445,7 @@ impl<'a> FmtVisitor<'a> {\n         let body_start = span.lo + BytePos(enum_snippet.find_uncommented(\"{\").unwrap() as u32 + 1);\n         let generics_str = self.format_generics(generics,\n                                                 \" {\",\n+                                                self.block_indent,\n                                                 self.block_indent + self.config.tab_spaces,\n                                                 codemap::mk_sp(span.lo,\n                                                                body_start));\n@@ -565,6 +587,7 @@ impl<'a> FmtVisitor<'a> {\n         let generics_str = match generics {\n             Some(g) => self.format_generics(g,\n                                             opener,\n+                                            offset,\n                                             offset + header_str.len(),\n                                             codemap::mk_sp(span.lo,\n                                                            struct_def.fields[0].span.lo)),\n@@ -662,14 +685,16 @@ impl<'a> FmtVisitor<'a> {\n                        generics: &ast::Generics,\n                        opener: &str,\n                        offset: usize,\n+                       generics_offset: usize,\n                        span: Span)\n                        -> String {\n-        let mut result = self.rewrite_generics(generics, offset, span);\n+        let mut result = self.rewrite_generics(generics, offset, generics_offset, span);\n \n         if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n             result.push_str(&self.rewrite_where_clause(&generics.where_clause,\n                                                        self.config,\n                                                        self.block_indent,\n+                                                       Density::Tall,\n                                                        span.hi));\n             result.push_str(&make_indent(self.block_indent));\n             result.push('\\n');\n@@ -714,7 +739,12 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn rewrite_generics(&self, generics: &ast::Generics, offset: usize, span: Span) -> String {\n+    fn rewrite_generics(&self,\n+                        generics: &ast::Generics,\n+                        offset: usize,\n+                        generics_offset: usize,\n+                        span: Span)\n+                        -> String {\n         // FIXME convert bounds to where clauses where they get too big or if\n         // there is a where clause at all.\n         let lifetimes: &[_] = &generics.lifetimes;\n@@ -723,18 +753,24 @@ impl<'a> FmtVisitor<'a> {\n             return String::new();\n         }\n \n-        let budget = self.config.max_width - offset - 2;\n+        let offset = match self.config.generics_indent {\n+            BlockIndentStyle::Inherit => offset,\n+            BlockIndentStyle::Tabbed => offset + self.config.tab_spaces,\n+            // 1 = <\n+            BlockIndentStyle::Visual => generics_offset + 1,\n+        };\n+\n+        let h_budget = self.config.max_width - generics_offset - 2;\n         // TODO might need to insert a newline if the generics are really long\n \n         // Strings for the generics.\n-        // 1 = <\n         let context = self.get_context();\n         // FIXME: don't unwrap\n         let lt_strs = lifetimes.iter().map(|lt| {\n-            lt.rewrite(&context, budget, offset + 1).unwrap()\n+            lt.rewrite(&context, h_budget, offset).unwrap()\n         });\n         let ty_strs = tys.iter().map(|ty_param| {\n-            ty_param.rewrite(&context, budget, offset + 1).unwrap()\n+            ty_param.rewrite(&context, h_budget, offset).unwrap()\n         });\n \n         // Extract comments between generics.\n@@ -762,7 +798,7 @@ impl<'a> FmtVisitor<'a> {\n             item.item = ty;\n         }\n \n-        let fmt = ListFormatting::for_fn(budget, offset + 1);\n+        let fmt = ListFormatting::for_fn(h_budget, offset);\n \n         format!(\"<{}>\", write_list(&items, &fmt))\n     }\n@@ -771,15 +807,29 @@ impl<'a> FmtVisitor<'a> {\n                             where_clause: &ast::WhereClause,\n                             config: &Config,\n                             indent: usize,\n+                            density: Density,\n                             span_end: BytePos)\n                             -> String {\n         if where_clause.predicates.is_empty() {\n             return String::new();\n         }\n \n+        let extra_indent = match self.config.where_indent {\n+            BlockIndentStyle::Inherit => 0,\n+            BlockIndentStyle::Tabbed | BlockIndentStyle::Visual => config.tab_spaces,\n+        };\n+\n         let context = self.get_context();\n-        // 6 = \"where \".len()\n-        let offset = indent + config.tab_spaces + 6;\n+\n+        let offset = match self.config.where_pred_indent {\n+            BlockIndentStyle::Inherit => indent + extra_indent,\n+            BlockIndentStyle::Tabbed => indent + extra_indent + config.tab_spaces,\n+            // 6 = \"where \".len()\n+            BlockIndentStyle::Visual => indent + extra_indent + 6,\n+        };\n+        // FIXME: if where_pred_indent != Visual, then the budgets below might\n+        // be out by a char or two.\n+\n         let budget = self.config.ideal_width + self.config.leeway - offset;\n         let span_start = span_for_where_pred(&where_clause.predicates[0]).lo;\n         let items = itemize_list(self.codemap,\n@@ -795,18 +845,25 @@ impl<'a> FmtVisitor<'a> {\n                                  span_end);\n \n         let fmt = ListFormatting {\n-            tactic: ListTactic::Vertical,\n+            tactic: self.config.where_layout,\n             separator: \",\",\n             trailing_separator: SeparatorTactic::Never,\n             indent: offset,\n             h_width: budget,\n             v_width: budget,\n             ends_with_newline: true,\n         };\n-\n-        format!(\"\\n{}where {}\",\n-                make_indent(indent + config.tab_spaces),\n-                write_list(&items.collect::<Vec<_>>(), &fmt))\n+        let preds_str = write_list(&items.collect::<Vec<_>>(), &fmt);\n+\n+        // 9 = \" where \".len() + \" {\".len()\n+        if density == Density::Tall || preds_str.contains('\\n') ||\n+           indent + 9 + preds_str.len() > self.config.max_width {\n+            format!(\"\\n{}where {}\",\n+                    make_indent(indent + extra_indent),\n+                    preds_str)\n+        } else {\n+            format!(\" where {}\", preds_str)\n+        }\n     }\n \n     fn rewrite_return(&self, ret: &ast::FunctionRetTy) -> String {"}, {"sha": "3b9bb3f4af23898ce27d612531d8808ee6f01765", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -28,6 +28,8 @@ pub enum ListTactic {\n     Mixed,\n }\n \n+impl_enum_decodable!(ListTactic, Vertical, Horizontal, HorizontalVertical, Mixed);\n+\n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n pub enum SeparatorTactic {\n     Always,"}, {"sha": "4c220dbc5d2e8afda620835910793eb72df2af0e", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -6,6 +6,13 @@ newline_style = \"Unix\"\n fn_brace_style = \"SameLineWhere\"\n fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n+fn_args_layout = \"Tall\"\n+fn_arg_indent = \"Visual\"\n+where_density = \"Tall\"\n+where_indent = \"Tabbed\"\n+where_layout = \"Vertical\"\n+where_pred_indent = \"Visual\"\n+generics_indent = \"Visual\"\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\"\n struct_lit_style = \"BlockIndent\""}, {"sha": "a45f5501ea7828f8b0c371e41a5f079506cc7e4d", "filename": "tests/source/fn-custom-2.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-2.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,39 @@\n+// rustfmt-fn_arg_indent: Inherit\n+// rustfmt-generics_indent: Tabbed\n+// rustfmt-where_indent: Inherit\n+// rustfmt-where_layout: Mixed\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+fn baz() where X: TTTTTTTT {\n+    baz();\n+}\n+\n+fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}\n+\n+impl Foo {\n+    fn foo(self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }    \n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+\n+    fn baz() where X: TTTTTTTT {\n+        baz();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUU, VVVVVVVVVVVVVVVVVVVVVVVVVVV, WWWWWWWWWWWWWWWWWWWWWWWW> {\n+    foo: Foo,\n+}"}, {"sha": "e63b642d19caa2a8ed21932604deb61139137a4c", "filename": "tests/source/fn-custom-3.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-3.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,34 @@\n+// rustfmt-fn_arg_indent: Tabbed\n+// rustfmt-generics_indent: Inherit\n+// rustfmt-where_layout: HorizontalVertical\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}\n+\n+fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}\n+\n+impl Foo {\n+    fn foo(self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }    \n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb, TTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>(a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT, UUUUUUUUUUUUUUUUUUUUUU, VVVVVVVVVVVVVVVVVVVVVVVVVVV, WWWWWWWWWWWWWWWWWWWWWWWW> {\n+    foo: Foo,\n+}"}, {"sha": "7b3e4c4a163ebe921c6da35194baa48c4993777e", "filename": "tests/source/fn-custom-4.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-4.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-where_pred_indent: Tabbed\n+// rustfmt-where_density: Compressed\n+// Test different indents.\n+\n+fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}\n+\n+fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}\n+\n+fn qux(a: Aaaaaaaaaaaaaaaaa) where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}"}, {"sha": "98f11a72eab65cdf9e7966a8ab6ff7a7b5c062a5", "filename": "tests/source/fn-custom-5.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-5.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-where_pred_indent: Inherit\n+// Test different indents.\n+\n+fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}"}, {"sha": "77ced4c5e0e101cbf7f11f799efdc736ccae183d", "filename": "tests/source/fn-custom.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Fsource%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-fn_args_layout: Compressed\n+// Test some of the ways function signatures can be customised.\n+\n+// Test compressed layout of args.\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+impl Foo {\n+    fn foo(self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }    \n+}"}, {"sha": "acac301fa530ab8c4e1af0bd1953e83145ca6a7b", "filename": "tests/target/fn-custom-2.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-2.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,65 @@\n+// rustfmt-fn_arg_indent: Inherit\n+// rustfmt-generics_indent: Tabbed\n+// rustfmt-where_indent: Inherit\n+// rustfmt-where_layout: Mixed\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa,\n+b: Bbbbbbbbbbbbbbbb,\n+c: Ccccccccccccccccc,\n+d: Ddddddddddddddddddddddddd,\n+e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    TTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+    (a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+fn baz()\n+where X: TTTTTTTT\n+{\n+    baz();\n+}\n+\n+fn qux()\n+where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+      X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+{\n+    baz();\n+}\n+\n+impl Foo {\n+    fn foo(self,\n+    a: Aaaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbbbb,\n+    c: Ccccccccccccccccc,\n+    d: Ddddddddddddddddddddddddd,\n+    e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }\n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+        TTTTTTTTTTTTT,\n+        UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+        (a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+\n+    fn baz()\n+    where X: TTTTTTTT\n+    {\n+        baz();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUUUU,\n+    VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n+    WWWWWWWWWWWWWWWWWWWWWWWW>\n+{\n+    foo: Foo,\n+}"}, {"sha": "110fcf367147eebfc76355fc38ae5bca83c01792", "filename": "tests/target/fn-custom-3.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-3.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,60 @@\n+// rustfmt-fn_arg_indent: Tabbed\n+// rustfmt-generics_indent: Inherit\n+// rustfmt-where_layout: HorizontalVertical\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbbbb,\n+    c: Ccccccccccccccccc,\n+    d: Ddddddddddddddddddddddddd,\n+    e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+TTTTTTTTTTTTT,\n+UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+    (a: Aaaaaaaaaaaaaaa) {\n+    bar();\n+}\n+\n+fn qux()\n+    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT, X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+{\n+    baz();\n+}\n+\n+fn qux()\n+    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+          X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+          X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+          X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+{\n+    baz();\n+}\n+\n+impl Foo {\n+    fn foo(self,\n+        a: Aaaaaaaaaaaaaaa,\n+        b: Bbbbbbbbbbbbbbbb,\n+        c: Ccccccccccccccccc,\n+        d: Ddddddddddddddddddddddddd,\n+        e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }\n+\n+    fn bar<'a: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb,\n+    TTTTTTTTTTTTT,\n+    UUUUUUUUUUUUUUUUUUUU: WWWWWWWWWWWWWWWWWWWWWWWW>\n+        (a: Aaaaaaaaaaaaaaa) {\n+        bar();\n+    }\n+}\n+\n+struct Foo<TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+UUUUUUUUUUUUUUUUUUUUUU,\n+VVVVVVVVVVVVVVVVVVVVVVVVVVV,\n+WWWWWWWWWWWWWWWWWWWWWWWW>\n+{\n+    foo: Foo,\n+}"}, {"sha": "70ec49f34bcb6e5340604639ff715d7c42d96e58", "filename": "tests/target/fn-custom-4.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-4.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,23 @@\n+// rustfmt-where_pred_indent: Tabbed\n+// rustfmt-where_density: Compressed\n+// Test different indents.\n+\n+fn qux()\n+    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+{\n+    baz();\n+}\n+\n+fn qux() where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT {\n+    baz();\n+}\n+\n+fn qux(a: Aaaaaaaaaaaaaaaaa)\n+    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+        X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+{\n+    baz();\n+}"}, {"sha": "08c717538f2aba223b36dcce76f9a7d4873cc2e5", "filename": "tests/target/fn-custom-5.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-5.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-where_pred_indent: Inherit\n+// Test different indents.\n+\n+fn qux()\n+    where X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT,\n+    X: TTTTTTTTTTTTTTTTTTTTTTTTTTTT\n+{\n+    baz();\n+}"}, {"sha": "01abeaebb9e668c75fd68b5a30072e02ac30794a", "filename": "tests/target/fn-custom.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca2756a82b69eb849f73588754c3ccdeb04d93b/tests%2Ftarget%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom.rs?ref=6ca2756a82b69eb849f73588754c3ccdeb04d93b", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-fn_args_layout: Compressed\n+// Test some of the ways function signatures can be customised.\n+\n+// Test compressed layout of args.\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n+       d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+    foo();\n+}\n+\n+impl Foo {\n+    fn foo(self, a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n+           d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n+        foo();\n+    }\n+}"}]}