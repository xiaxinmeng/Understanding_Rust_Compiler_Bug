{"sha": "2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODlmZWE4OGE0ODlhMDFiM2UyMjQzYmI4NGIwZWMyMGI4YTBlMjg=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-22T12:57:03Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T18:35:30Z"}, "message": "mir: `unused_generic_params` query\n\nThis commit implements the `unused_generic_params` query, an initial\nversion of polymorphization which detects when an item does not use\ngeneric parameters and is being needlessly monomorphized as a result.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "3fc7bedb5e5c8531c204b79510f7d61dd33f1e65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fc7bedb5e5c8531c204b79510f7d61dd33f1e65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8V4/IACgkQJZLnbIc4\nH9m7OA/+L67OHoSbqBooChXf0hkROmvd1MV7FN1qG+CdH2rzaR/k/jIEWMUUz7CH\n7vjQ25PaNbwvZOBj+uZsfGdB8x17QlHFqhF9YRCXVQDdFzixGEs0wQJ9obqoG3fZ\nfSkbsPXABzlmckPSManSN+Ng9u6QYEN4Hz8v8caKSlvAdSUflK8XsA7S3AX2LUFN\naVX4zJyWQdV5jlIrJeDL+9YB+7iV6D6YNmADe5vLPcfthI3LDQj/LzS1mNhlK9pe\nzyyMV0HJVNC9looKfYHp+9vKY4Z9mLtyLE8vsLOwOgHIkueh6gyUSZOxU89Yi6M/\nmfoJ9q/YCJbaY3ihpkpfIVmgUjCmDXJVbhjLLw+ZxWyWVOSR935rxP3umQ4hv6ZQ\naarzz8fCCrJuqvpuu2+HfEcIoXD4wR8HHvBPFIIch5PnJ/O8OMVauUBuzKOH5D/I\n45GynDTrv9oH1ZRDAZuOTjw0E2puokpukjhYIdHFwRM7AgYw5tU5bnSrEQ9jj7uN\no7F1Cuw5p/R6yNQWG8gWghkvhbzWoUgIdAilioOBK+fM3zxSaoo68omNeCGyb5KH\nkpM4/EmF0EfQxELJeGLZLrjdJ7fg6r+BRWoeEgbroi1ZhFMiD3v+NIS+3tuh5tfM\n05Iae7JWSjfAcvlM3bB1Xj6eEub4Kq+5dY+o4Kg/IooCHz0k//w=\n=SCFm\n-----END PGP SIGNATURE-----", "payload": "tree 3fc7bedb5e5c8531c204b79510f7d61dd33f1e65\nparent 47756bb0faaf49be5c4086fd0fdbdd57f055781b\nauthor David Wood <david@davidtw.co> 1592830623 +0100\ncommitter David Wood <david@davidtw.co> 1595270130 +0100\n\nmir: `unused_generic_params` query\n\nThis commit implements the `unused_generic_params` query, an initial\nversion of polymorphization which detects when an item does not use\ngeneric parameters and is being needlessly monomorphized as a result.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "html_url": "https://github.com/rust-lang/rust/commit/2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47756bb0faaf49be5c4086fd0fdbdd57f055781b", "url": "https://api.github.com/repos/rust-lang/rust/commits/47756bb0faaf49be5c4086fd0fdbdd57f055781b", "html_url": "https://github.com/rust-lang/rust/commit/47756bb0faaf49be5c4086fd0fdbdd57f055781b"}], "stats": {"total": 1711, "additions": 1627, "deletions": 84}, "files": [{"sha": "75b4f2e3ca5a55aa0e4bb6dd79d3ccc6f76f4495", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -13,7 +13,7 @@ use log::debug;\n use rustc_codegen_ssa::traits::*;\n \n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n-use rustc_middle::ty::{Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeFoldable};\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes.\n@@ -29,14 +29,18 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n \n     assert!(!instance.substs.needs_infer());\n     assert!(!instance.substs.has_escaping_bound_vars());\n-    assert!(!instance.substs.has_param_types_or_consts());\n \n     if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;\n     }\n \n     let sym = tcx.symbol_name(instance).name;\n-    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.monomorphic_ty(cx.tcx()), sym);\n+    debug!(\n+        \"get_fn({:?}: {:?}) => {}\",\n+        instance,\n+        instance.ty(cx.tcx(), ty::ParamEnv::reveal_all()),\n+        sym\n+    );\n \n     let fn_abi = FnAbi::of_instance(cx, instance, &[]);\n "}, {"sha": "e8d475405096af3d2e64a6b33831987fe484edee", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -203,7 +203,7 @@ impl CodegenCx<'ll, 'tcx> {\n             def_id\n         );\n \n-        let ty = instance.monomorphic_ty(self.tcx);\n+        let ty = instance.ty(self.tcx, ty::ParamEnv::reveal_all());\n         let sym = self.tcx.symbol_name(instance).name;\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n@@ -361,7 +361,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             };\n \n             let instance = Instance::mono(self.tcx, def_id);\n-            let ty = instance.monomorphic_ty(self.tcx);\n+            let ty = instance.ty(self.tcx, ty::ParamEnv::reveal_all());\n             let llty = self.layout_of(ty).llvm_type(self);\n             let g = if val_llty == llty {\n                 g"}, {"sha": "6ae7c7efaee62b4933c33d8d578493e348a9fa55", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -2481,7 +2481,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     };\n \n     let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n-    let variable_type = Instance::mono(cx.tcx, def_id).monomorphic_ty(cx.tcx);\n+    let variable_type = Instance::mono(cx.tcx, def_id).ty(cx.tcx, ty::ParamEnv::reveal_all());\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = tcx.item_name(def_id).as_str();\n     let linkage_name = mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name;"}, {"sha": "2e5929a433de040cb8b49e0f1e78355a096bf170", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -160,7 +160,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         caller_instance: ty::Instance<'tcx>,\n     ) {\n         let tcx = self.tcx;\n-        let callee_ty = instance.monomorphic_ty(tcx);\n+        let callee_ty = instance.ty(tcx, ty::ParamEnv::reveal_all());\n \n         let (def_id, substs) = match callee_ty.kind {\n             ty::FnDef(def_id, substs) => (def_id, substs),"}, {"sha": "0936deb7bb5a9c26d916e2a088d4e2cf5b98bd82", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n pub use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n use rustc_middle::ty::layout::FnAbiExt;\n-use rustc_middle::ty::{Instance, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, TypeFoldable};\n use rustc_target::abi::LayoutOf;\n \n impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -22,7 +22,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         symbol_name: &str,\n     ) {\n         let instance = Instance::mono(self.tcx, def_id);\n-        let ty = instance.monomorphic_ty(self.tcx);\n+        let ty = instance.ty(self.tcx, ty::ParamEnv::reveal_all());\n         let llty = self.layout_of(ty).llvm_type(self);\n \n         let g = self.define_global(symbol_name, llty).unwrap_or_else(|| {\n@@ -47,7 +47,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         visibility: Visibility,\n         symbol_name: &str,\n     ) {\n-        assert!(!instance.substs.needs_infer() && !instance.substs.has_param_types_or_consts());\n+        assert!(!instance.substs.needs_infer());\n \n         let fn_abi = FnAbi::of_instance(self, instance, &[]);\n         let lldecl = self.declare_fn(symbol_name, &fn_abi);"}, {"sha": "cfa01280e5a97f3812e582b5b74c266cee7f74e9", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -94,7 +94,8 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n                     def_id,\n                     substs,\n                 )\n-                .unwrap(),\n+                .unwrap()\n+                .polymorphize(cx.tcx()),\n             )\n         })\n     });"}, {"sha": "e1de9677f807a4fb312c2c245854583bee726ce4", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -543,7 +543,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 Some(\n                     ty::Instance::resolve(bx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs)\n                         .unwrap()\n-                        .unwrap(),\n+                        .unwrap()\n+                        .polymorphize(bx.tcx()),\n                 ),\n                 None,\n             ),"}, {"sha": "9c108998bc9078928827a8114789a56b0f474e97", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -190,17 +190,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 if bx.cx().tcx().has_attr(def_id, sym::rustc_args_required_const) {\n                                     bug!(\"reifying a fn ptr that requires const arguments\");\n                                 }\n-                                OperandValue::Immediate(\n-                                    bx.get_fn_addr(\n-                                        ty::Instance::resolve_for_fn_ptr(\n-                                            bx.tcx(),\n-                                            ty::ParamEnv::reveal_all(),\n-                                            def_id,\n-                                            substs,\n-                                        )\n-                                        .unwrap(),\n-                                    ),\n+                                let instance = ty::Instance::resolve_for_fn_ptr(\n+                                    bx.tcx(),\n+                                    ty::ParamEnv::reveal_all(),\n+                                    def_id,\n+                                    substs,\n                                 )\n+                                .unwrap()\n+                                .polymorphize(bx.cx().tcx());\n+                                OperandValue::Immediate(bx.get_fn_addr(instance))\n                             }\n                             _ => bug!(\"{} cannot be reified to a fn ptr\", operand.layout.ty),\n                         }\n@@ -213,7 +211,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     def_id,\n                                     substs,\n                                     ty::ClosureKind::FnOnce,\n-                                );\n+                                )\n+                                .polymorphize(bx.cx().tcx());\n                                 OperandValue::Immediate(bx.cx().get_fn_addr(instance))\n                             }\n                             _ => bug!(\"{} cannot be cast to a fn ptr\", operand.layout.ty),"}, {"sha": "0c895cd2a2940a2c9688c64b5a12e84263f0b305", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -1309,6 +1309,13 @@ rustc_queries! {\n         query codegen_unit(_: Symbol) -> &'tcx CodegenUnit<'tcx> {\n             desc { \"codegen_unit\" }\n         }\n+        query unused_generic_params(key: DefId) -> u64 {\n+            cache_on_disk_if { key.is_local() }\n+            desc {\n+                |tcx| \"determining which generic parameters are unused by `{}`\",\n+                    tcx.def_path_str(key)\n+            }\n+        }\n         query backend_optimization_level(_: CrateNum) -> OptLevel {\n             desc { \"optimization level used by backend\" }\n         }"}, {"sha": "9c204ab16fb20309d2fc7ec8e5c6b10fa8500d7e", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -1,5 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n+use crate::ty::subst::InternalSubsts;\n use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n@@ -106,32 +107,9 @@ pub enum InstanceDef<'tcx> {\n }\n \n impl<'tcx> Instance<'tcx> {\n-    /// Returns the `Ty` corresponding to this `Instance`,\n-    /// with generic substitutions applied and lifetimes erased.\n-    ///\n-    /// This method can only be called when the 'substs' for this Instance\n-    /// are fully monomorphic (no `ty::Param`'s are present).\n-    /// This is usually the case (e.g. during codegen).\n-    /// However, during constant evaluation, we may want\n-    /// to try to resolve a `Instance` using generic parameters\n-    /// (e.g. when we are attempting to to do const-propagation).\n-    /// In this case, `Instance.ty_env` should be used to provide\n-    /// the `ParamEnv` for our generic context.\n-    pub fn monomorphic_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        let ty = tcx.type_of(self.def.def_id());\n-        // There shouldn't be any params - if there are, then\n-        // Instance.ty_env should have been used to provide the proper\n-        // ParamEnv\n-        if self.substs.has_param_types_or_consts() {\n-            bug!(\"Instance.ty called for type {:?} with params in substs: {:?}\", ty, self.substs);\n-        }\n-        tcx.subst_and_normalize_erasing_regions(self.substs, ty::ParamEnv::reveal_all(), &ty)\n-    }\n-\n-    /// Like `Instance.ty`, but allows a `ParamEnv` to be specified for use during\n-    /// normalization. This method is only really useful during constant evaluation,\n-    /// where we are dealing with potentially generic types.\n-    pub fn ty_env(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n+    /// Returns the `Ty` corresponding to this `Instance`, with generic substitutions applied and\n+    /// lifetimes erased, allowing a `ParamEnv` to be specified for use during normalization.\n+    pub fn ty(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n         let ty = tcx.type_of(self.def.def_id());\n         tcx.subst_and_normalize_erasing_regions(self.substs, param_env, &ty)\n     }\n@@ -486,6 +464,42 @@ impl<'tcx> Instance<'tcx> {\n             | InstanceDef::VtableShim(..) => Some(self.substs),\n         }\n     }\n+\n+    /// Returns a new `Instance` where generic parameters in `instance.substs` are replaced by\n+    /// identify parameters if they are determined to be unused in `instance.def`.\n+    pub fn polymorphize(self, tcx: TyCtxt<'tcx>) -> Self {\n+        debug!(\"polymorphize: running polymorphization analysis\");\n+        if !tcx.sess.opts.debugging_opts.polymorphize {\n+            return self;\n+        }\n+\n+        if let InstanceDef::Item(def) = self.def {\n+            let results = tcx.unused_generic_params(def.did);\n+\n+            if results == 0 {\n+                // Exit early if every parameter was used.\n+                return self;\n+            }\n+\n+            debug!(\"polymorphize: results={:064b}\", results);\n+            let polymorphized_substs =\n+                InternalSubsts::for_item(tcx, def.did, |param, _| match param.kind {\n+                // If parameter is a const or type parameter..\n+                ty::GenericParamDefKind::Const | ty::GenericParamDefKind::Type { .. } if\n+                    // ..and is within range and unused..\n+                    param.index < 64 && ((results >> param.index) & 1) == 1 =>\n+                        // ..then use the identity for this parameter.\n+                        tcx.mk_param_from_def(param),\n+                // Otherwise, use the parameter as before.\n+                _ => self.substs[param.index as usize],\n+            });\n+\n+            debug!(\"polymorphize: self={:?} polymorphized_substs={:?}\", self, polymorphized_substs);\n+            Self { def: self.def, substs: polymorphized_substs }\n+        } else {\n+            self\n+        }\n+    }\n }\n \n fn needs_fn_once_adapter_shim("}, {"sha": "610a7cd41be2c3ff46bc0902d3cc08fcbddbb743", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -2299,7 +2299,8 @@ impl<'tcx> ty::Instance<'tcx> {\n     // or should go through `FnAbi` instead, to avoid losing any\n     // adjustments `FnAbi::of_instance` might be performing.\n     fn fn_sig_for_fn_abi(&self, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.monomorphic_ty(tcx);\n+        // FIXME(davidtwco,eddyb): A `ParamEnv` should be passed through to this function.\n+        let ty = self.ty(tcx, ty::ParamEnv::reveal_all());\n         match ty.kind {\n             ty::FnDef(..) |\n             // Shims currently have type FnPtr. Not sure this should remain."}, {"sha": "48a62b64604672f59770171ef7b0db34ae17aef5", "filename": "src/librustc_middle/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fnormalize_erasing_regions.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -54,7 +54,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        assert!(!value.needs_subst());\n         let value = self.erase_late_bound_regions(value);\n         self.normalize_erasing_regions(param_env, value)\n     }"}, {"sha": "2ea7cd2a6dc7acb118d8d104ed771bd83515132a", "filename": "src/librustc_middle/ty/print/obsolete.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -144,12 +144,14 @@ impl DefPathBasedNames<'tcx> {\n                 let substs = substs.truncate_to(self.tcx, generics);\n                 self.push_generic_params(substs, iter::empty(), output, debug);\n             }\n+            ty::Param(_) => {\n+                output.push_str(&t.to_string());\n+            }\n             ty::Error(_)\n             | ty::Bound(..)\n             | ty::Infer(_)\n             | ty::Placeholder(..)\n             | ty::Projection(..)\n-            | ty::Param(_)\n             | ty::GeneratorWitness(_)\n             | ty::Opaque(..) => {\n                 if debug {"}, {"sha": "705a1b2ae79e52cda180e97db0cd547a5f245729", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -240,7 +240,7 @@ pub fn const_eval_validated_provider<'tcx>(\n     // We call `const_eval` for zero arg intrinsics, too, in order to cache their value.\n     // Catch such calls and evaluate them instead of trying to load a constant's MIR.\n     if let ty::InstanceDef::Intrinsic(def_id) = key.value.instance.def {\n-        let ty = key.value.instance.ty_env(tcx, key.param_env);\n+        let ty = key.value.instance.ty(tcx, key.param_env);\n         let substs = match ty.kind {\n             ty::FnDef(_, substs) => substs,\n             _ => bug!(\"intrinsic with type {:?}\", ty),"}, {"sha": "663f61b11554c4c384bff82cdb64275c59ec55db", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -221,7 +221,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // ABI check\n         {\n             let callee_abi = {\n-                let instance_ty = instance.ty_env(*self.tcx, self.param_env);\n+                let instance_ty = instance.ty(*self.tcx, self.param_env);\n                 match instance_ty.kind {\n                     ty::FnDef(..) => instance_ty.fn_sig(*self.tcx).abi(),\n                     ty::Closure(..) => Abi::RustCall,"}, {"sha": "49a80ca13457ddb24c042744ca6702bfa50f73ce", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -142,7 +142,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // to determine the type.\n         let drop_instance = self.memory.get_fn(drop_fn)?.as_instance()?;\n         trace!(\"Found drop fn: {:?}\", drop_instance);\n-        let fn_sig = drop_instance.ty_env(*self.tcx, self.param_env).fn_sig(*self.tcx);\n+        let fn_sig = drop_instance.ty(*self.tcx, self.param_env).fn_sig(*self.tcx);\n         let fn_sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, &fn_sig);\n         // The drop function takes `*mut T` where `T` is the type being dropped, so get that.\n         let args = fn_sig.inputs();"}, {"sha": "4e7142a93aedc7c20afbe97eca387192d3764f88", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -51,6 +51,7 @@ pub fn provide(providers: &mut Providers) {\n     shim::provide(providers);\n     transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n+    monomorphize::polymorphize::provide(providers);\n     providers.const_eval_validated = const_eval::const_eval_validated_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;"}, {"sha": "0b5f27fc17a72fd12562c1e304874e7edcc437e1", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -360,7 +360,7 @@ fn collect_items_rec<'tcx>(\n             // Sanity check whether this ended up being collected accidentally\n             debug_assert!(should_codegen_locally(tcx, &instance));\n \n-            let ty = instance.monomorphic_ty(tcx);\n+            let ty = instance.ty(tcx, ty::ParamEnv::reveal_all());\n             visit_drop_use(tcx, ty, true, starting_point.span, &mut neighbors);\n \n             recursion_depth_reset = None;\n@@ -585,7 +585,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                             ty::ClosureKind::FnOnce,\n                         );\n                         if should_codegen_locally(self.tcx, &instance) {\n-                            self.output.push(create_fn_mono_item(instance, span));\n+                            self.output.push(create_fn_mono_item(self.tcx, instance, span));\n                         }\n                     }\n                     _ => bug!(),\n@@ -597,7 +597,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     tcx.require_lang_item(ExchangeMallocFnLangItem, None);\n                 let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n                 if should_codegen_locally(tcx, &instance) {\n-                    self.output.push(create_fn_mono_item(instance, span));\n+                    self.output.push(create_fn_mono_item(self.tcx, instance, span));\n                 }\n             }\n             mir::Rvalue::ThreadLocalRef(def_id) => {\n@@ -748,7 +748,7 @@ fn visit_instance_use<'tcx>(\n         ty::InstanceDef::DropGlue(_, None) => {\n             // Don't need to emit noop drop glue if we are calling directly.\n             if !is_direct_call {\n-                output.push(create_fn_mono_item(instance, source));\n+                output.push(create_fn_mono_item(tcx, instance, source));\n             }\n         }\n         ty::InstanceDef::DropGlue(_, Some(_))\n@@ -758,7 +758,7 @@ fn visit_instance_use<'tcx>(\n         | ty::InstanceDef::Item(..)\n         | ty::InstanceDef::FnPtrShim(..)\n         | ty::InstanceDef::CloneShim(..) => {\n-            output.push(create_fn_mono_item(instance, source));\n+            output.push(create_fn_mono_item(tcx, instance, source));\n         }\n     }\n }\n@@ -781,20 +781,19 @@ fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) ->\n     };\n \n     if tcx.is_foreign_item(def_id) {\n-        // Foreign items are always linked against, there's no way of\n-        // instantiating them.\n+        // Foreign items are always linked against, there's no way of instantiating them.\n         return false;\n     }\n \n     if def_id.is_local() {\n-        // Local items cannot be referred to locally without\n-        // monomorphizing them locally.\n+        // Local items cannot be referred to locally without monomorphizing them locally.\n         return true;\n     }\n \n-    if tcx.is_reachable_non_generic(def_id) || instance.upstream_monomorphization(tcx).is_some() {\n-        // We can link to the item in question, no instance needed\n-        // in this crate.\n+    if tcx.is_reachable_non_generic(def_id)\n+        || instance.polymorphize(tcx).upstream_monomorphization(tcx).is_some()\n+    {\n+        // We can link to the item in question, no instance needed in this crate.\n         return false;\n     }\n \n@@ -903,9 +902,13 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     }\n }\n \n-fn create_fn_mono_item(instance: Instance<'_>, source: Span) -> Spanned<MonoItem<'_>> {\n+fn create_fn_mono_item<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: Instance<'tcx>,\n+    source: Span,\n+) -> Spanned<MonoItem<'tcx>> {\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n-    respan(source, MonoItem::Fn(instance))\n+    respan(source, MonoItem::Fn(instance.polymorphize(tcx)))\n }\n \n /// Creates a `MonoItem` for each method that is referenced by the vtable for\n@@ -917,12 +920,7 @@ fn create_mono_items_for_vtable_methods<'tcx>(\n     source: Span,\n     output: &mut Vec<Spanned<MonoItem<'tcx>>>,\n ) {\n-    assert!(\n-        !trait_ty.needs_subst()\n-            && !trait_ty.has_escaping_bound_vars()\n-            && !impl_ty.needs_subst()\n-            && !impl_ty.has_escaping_bound_vars()\n-    );\n+    assert!(!trait_ty.has_escaping_bound_vars() && !impl_ty.has_escaping_bound_vars());\n \n     if let ty::Dynamic(ref trait_ty, ..) = trait_ty.kind {\n         if let Some(principal) = trait_ty.principal() {\n@@ -945,7 +943,7 @@ fn create_mono_items_for_vtable_methods<'tcx>(\n                     .unwrap()\n                 })\n                 .filter(|&instance| should_codegen_locally(tcx, &instance))\n-                .map(|item| create_fn_mono_item(item, source));\n+                .map(|item| create_fn_mono_item(tcx, item, source));\n             output.extend(methods);\n         }\n \n@@ -997,7 +995,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                         );\n \n                         let ty = Instance::new(def_id.to_def_id(), InternalSubsts::empty())\n-                            .monomorphic_ty(self.tcx);\n+                            .ty(self.tcx, ty::ParamEnv::reveal_all());\n                         visit_drop_use(self.tcx, ty, true, DUMMY_SP, self.output);\n                     }\n                 }\n@@ -1069,7 +1067,7 @@ impl RootCollector<'_, 'v> {\n             debug!(\"RootCollector::push_if_root: found root def_id={:?}\", def_id);\n \n             let instance = Instance::mono(self.tcx, def_id.to_def_id());\n-            self.output.push(create_fn_mono_item(instance, DUMMY_SP));\n+            self.output.push(create_fn_mono_item(self.tcx, instance, DUMMY_SP));\n         }\n     }\n \n@@ -1106,7 +1104,7 @@ impl RootCollector<'_, 'v> {\n         .unwrap()\n         .unwrap();\n \n-        self.output.push(create_fn_mono_item(start_instance, DUMMY_SP));\n+        self.output.push(create_fn_mono_item(self.tcx, start_instance, DUMMY_SP));\n     }\n }\n \n@@ -1163,7 +1161,7 @@ fn create_mono_items_for_default_impls<'tcx>(\n                         .unwrap()\n                         .unwrap();\n \n-                    let mono_item = create_fn_mono_item(instance, DUMMY_SP);\n+                    let mono_item = create_fn_mono_item(tcx, instance, DUMMY_SP);\n                     if mono_item.node.is_instantiable(tcx) && should_codegen_locally(tcx, &instance)\n                     {\n                         output.push(mono_item);\n@@ -1201,7 +1199,7 @@ fn collect_miri<'tcx>(\n         GlobalAlloc::Function(fn_instance) => {\n             if should_codegen_locally(tcx, &fn_instance) {\n                 trace!(\"collecting {:?} with {:#?}\", alloc_id, fn_instance);\n-                output.push(create_fn_mono_item(fn_instance, DUMMY_SP));\n+                output.push(create_fn_mono_item(tcx, fn_instance, DUMMY_SP));\n             }\n         }\n     }"}, {"sha": "15d7b11124071a59b9e0f01eb2abf1791f8ba50f", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -6,6 +6,7 @@ use rustc_hir::lang_items::CoerceUnsizedTraitLangItem;\n \n pub mod collector;\n pub mod partitioning;\n+pub mod polymorphize;\n \n pub fn custom_coerce_unsize_info<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "b06bf061d1f5e7a854e16f3e84fa8320d95239a9", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,298 @@\n+//! Polymorphization Analysis\n+//! =========================\n+//!\n+//! This module implements an analysis of functions, methods and closures to determine which\n+//! generic parameters are unused (and eventually, in what ways generic parameters are used - only\n+//! for their size, offset of a field, etc.).\n+\n+use rustc_hir::{def::DefKind, def_id::DefId};\n+use rustc_middle::mir::{\n+    visit::{TyContext, Visitor},\n+    Local, LocalDecl, Location,\n+};\n+use rustc_middle::ty::{\n+    self,\n+    fold::{TypeFoldable, TypeVisitor},\n+    query::Providers,\n+    Const, Ty, TyCtxt,\n+};\n+use std::convert::TryInto;\n+\n+/// Provide implementations of queries relating to polymorphization analysis.\n+pub fn provide(providers: &mut Providers) {\n+    providers.unused_generic_params = unused_generic_params;\n+}\n+\n+/// Determine which generic parameters are used by the function/method/closure represented by\n+/// `def_id`. Returns a `u64` where a bit is set if the parameter with that index is unused (ie.\n+/// a value of zero indicates that all parameters are used).\n+fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> u64 {\n+    debug!(\"unused_generic_params({:?})\", def_id);\n+\n+    if !tcx.sess.opts.debugging_opts.polymorphize {\n+        // If polymorphization disabled, then all parameters are used.\n+        return 0;\n+    }\n+\n+    let generics = tcx.generics_of(def_id);\n+    debug!(\"unused_generic_params: generics={:?}\", generics);\n+\n+    // Exit early when there are no parameters to be unused.\n+    if generics.count() == 0 {\n+        return 0;\n+    }\n+\n+    // Exit early when there is no MIR available.\n+    if !tcx.is_mir_available(def_id) {\n+        debug!(\"unused_generic_params: (no mir available) def_id={:?}\", def_id);\n+        return 0;\n+    }\n+\n+    // Use a `u64` as a bitset. Starting with all ones, shift left by the number of parameters,\n+    // leaving N zeros for each parameter. When a parameter is marked as used, the bit (from the\n+    // left) corresponding to the parameter index will be flipped. This is the opposite of what\n+    // will be returned.\n+    let generics_count: u32 =\n+        generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n+    let mut used_parameters = u64::max_value().checked_shl(generics_count).unwrap_or(0);\n+    debug!(\"unused_generic_params: (start) used_parameters={:064b}\", used_parameters);\n+    mark_used_by_default_parameters(tcx, def_id, generics, &mut used_parameters);\n+    debug!(\"unused_generic_params: (after default) used_parameters={:064b}\", used_parameters);\n+\n+    // Visit MIR and accumululate used generic parameters.\n+    let body = tcx.optimized_mir(def_id);\n+    let mut vis =\n+        UsedGenericParametersVisitor { tcx, def_id, used_parameters: &mut used_parameters };\n+    vis.visit_body(body);\n+    debug!(\"unused_generic_params: (after visitor) used_parameters={:064b}\", used_parameters);\n+\n+    mark_used_by_predicates(tcx, def_id, &mut used_parameters);\n+    debug!(\"unused_generic_params: (after predicates) used_parameters={:064b}\", used_parameters);\n+\n+    // Invert the u64 so that used is 0 and unused is 1. This makes checking if all parameters are\n+    // used easy - just compare with zero.\n+    debug!(\"unused_generic_params: (end) used_parameters={:064b}\", used_parameters);\n+    let unused_parameters: u64 = !used_parameters;\n+    debug!(\"unused_generic_params: (flipped) unused_parameters={:064b}\", unused_parameters);\n+\n+    // Emit errors for debugging and testing if enabled.\n+    let is_full = unused_parameters == 0;\n+    if tcx.sess.opts.debugging_opts.polymorphize_errors && !is_full {\n+        emit_unused_generic_params_error(tcx, def_id, generics, unused_parameters);\n+    }\n+\n+    unused_parameters\n+}\n+\n+/// Checks if the `param_index`th bit is set (or out-of-range).\n+fn is_bit_set(parameters: u64, param_index: u32) -> bool {\n+    param_index >= 64 || ((parameters.checked_shr(param_index).unwrap_or(1)) & 1) == 1\n+}\n+\n+/// Flips the bit corresponding to the parameter index.\n+fn set_bit(used_parameters: &mut u64, param_index: u32) {\n+    debug!(\"set_bit: used_parameters={:064b} param_index={:?}\", used_parameters, param_index);\n+    *used_parameters |= 1u64.checked_shl(param_index).unwrap_or(0);\n+    debug!(\"set_bit: used_parameters={:064b}\", used_parameters);\n+}\n+\n+/// Some parameters are considered used-by-default, such as non-generic parameters and the dummy\n+/// generic parameters from closures, this function marks them as used. `leaf_is_closure` should\n+/// be `true` if the item that `unused_generic_params` was invoked on is a closure.\n+fn mark_used_by_default_parameters<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    generics: &'tcx ty::Generics,\n+    used_parameters: &mut u64,\n+) {\n+    if !tcx.is_trait(def_id) && (tcx.is_closure(def_id) || tcx.type_of(def_id).is_generator()) {\n+        for param in &generics.params {\n+            debug!(\"mark_used_by_default_parameters: (closure/gen) param={:?}\", param);\n+            set_bit(used_parameters, param.index);\n+        }\n+    } else {\n+        for param in &generics.params {\n+            debug!(\"mark_used_by_default_parameters: (other) param={:?}\", param);\n+            if let ty::GenericParamDefKind::Lifetime = param.kind {\n+                set_bit(used_parameters, param.index);\n+            }\n+        }\n+    }\n+\n+    if let Some(parent) = generics.parent {\n+        mark_used_by_default_parameters(tcx, parent, tcx.generics_of(parent), used_parameters);\n+    }\n+}\n+\n+/// Search the predicates on used generic parameters for any unused generic parameters, and mark\n+/// those as used.\n+fn mark_used_by_predicates<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, used_parameters: &mut u64) {\n+    let def_id = tcx.closure_base_def_id(def_id);\n+\n+    let is_self_ty_used = |used_parameters: &mut u64, self_ty: Ty<'tcx>| {\n+        debug!(\"unused_generic_params: self_ty={:?}\", self_ty);\n+        if let ty::Param(param) = self_ty.kind {\n+            is_bit_set(*used_parameters, param.index)\n+        } else {\n+            false\n+        }\n+    };\n+\n+    let mark_ty = |used_parameters: &mut u64, ty: Ty<'tcx>| {\n+        let mut vis = UsedGenericParametersVisitor { tcx, def_id, used_parameters };\n+        ty.visit_with(&mut vis);\n+    };\n+\n+    let predicates = tcx.explicit_predicates_of(def_id);\n+    debug!(\"mark_parameters_used_in_predicates: predicates_of={:?}\", predicates);\n+    for (predicate, _) in predicates.predicates {\n+        match predicate.kind() {\n+            ty::PredicateKind::Trait(predicate, ..) => {\n+                let trait_ref = predicate.skip_binder().trait_ref;\n+                if is_self_ty_used(used_parameters, trait_ref.self_ty()) {\n+                    for ty in trait_ref.substs.types() {\n+                        debug!(\"unused_generic_params: (trait) ty={:?}\", ty);\n+                        mark_ty(used_parameters, ty);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::Projection(predicate, ..) => {\n+                let self_ty = predicate.skip_binder().projection_ty.self_ty();\n+                if is_self_ty_used(used_parameters, self_ty) {\n+                    let ty = predicate.ty();\n+                    debug!(\"unused_generic_params: (projection) ty={:?}\", ty);\n+                    mark_ty(used_parameters, ty.skip_binder());\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+}\n+\n+/// Emit an error for the function represented by `def_id`, labelling each generic parameter which\n+/// was unused.\n+fn emit_unused_generic_params_error<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    generics: &'tcx ty::Generics,\n+    unused_parameters: u64,\n+) {\n+    debug!(\"emit_unused_generic_params_error: def_id={:?}\", def_id);\n+    if !def_id.is_local() {\n+        return;\n+    }\n+\n+    debug!(\"emit_unused_generic_params_error: unused_parameters={:064b}\", unused_parameters);\n+    let fn_span = match tcx.opt_item_name(def_id) {\n+        Some(ident) => ident.span,\n+        _ => tcx.def_span(def_id),\n+    };\n+\n+    let mut err = tcx.sess.struct_span_err(fn_span, \"item has unused generic parameters\");\n+\n+    let mut next_generics = Some(generics);\n+    while let Some(generics) = next_generics {\n+        for param in &generics.params {\n+            if is_bit_set(unused_parameters, param.index) {\n+                debug!(\"emit_unused_generic_params_error: param={:?}\", param);\n+                let def_span = tcx.def_span(param.def_id);\n+                err.span_label(def_span, &format!(\"generic parameter `{}` is unused\", param.name));\n+            }\n+        }\n+\n+        next_generics = generics.parent.map(|did| tcx.generics_of(did));\n+    }\n+\n+    err.emit();\n+}\n+\n+/// Visitor used to aggregate generic parameter uses.\n+struct UsedGenericParametersVisitor<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    used_parameters: &'a mut u64,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {\n+    fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n+        debug!(\"visit_local_decl: local_decl={:?}\", local_decl);\n+        if local == Local::from_usize(1) {\n+            let def_kind = self.tcx.def_kind(self.def_id);\n+            if matches!(def_kind, DefKind::Closure | DefKind::Generator) {\n+                // Skip visiting the closure/generator that is currently being processed. This only\n+                // happens because the first argument to the closure is a reference to itself and\n+                // that will call `visit_substs`, resulting in each generic parameter captured being\n+                // considered used by default.\n+                debug!(\"visit_local_decl: skipping closure substs\");\n+                return;\n+            }\n+        }\n+\n+        self.super_local_decl(local, local_decl);\n+    }\n+\n+    fn visit_const(&mut self, c: &&'tcx Const<'tcx>, _: Location) {\n+        c.visit_with(self);\n+    }\n+\n+    fn visit_ty(&mut self, ty: Ty<'tcx>, _: TyContext) {\n+        ty.visit_with(self);\n+    }\n+}\n+\n+impl<'a, 'tcx> TypeVisitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> bool {\n+        debug!(\"visit_const: c={:?}\", c);\n+        if !c.has_param_types_or_consts() {\n+            return false;\n+        }\n+\n+        match c.val {\n+            ty::ConstKind::Param(param) => {\n+                debug!(\"visit_const: param={:?}\", param);\n+                set_bit(self.used_parameters, param.index);\n+                false\n+            }\n+            _ => c.super_visit_with(self),\n+        }\n+    }\n+\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+        debug!(\"visit_ty: ty={:?}\", ty);\n+        if !ty.has_param_types_or_consts() {\n+            return false;\n+        }\n+\n+        match ty.kind {\n+            ty::Closure(def_id, substs) | ty::Generator(def_id, substs, ..) => {\n+                debug!(\"visit_ty: def_id={:?}\", def_id);\n+                // Avoid cycle errors with generators.\n+                if def_id == self.def_id {\n+                    return false;\n+                }\n+\n+                // Consider any generic parameters used by any closures/generators as used in the\n+                // parent.\n+                let unused = self.tcx.unused_generic_params(def_id);\n+                debug!(\n+                    \"visit_ty: used_parameters={:064b} unused={:064b}\",\n+                    self.used_parameters, unused\n+                );\n+                for (i, arg) in substs.iter().enumerate() {\n+                    if !is_bit_set(unused, i.try_into().unwrap()) {\n+                        arg.visit_with(self);\n+                    }\n+                }\n+                debug!(\"visit_ty: used_parameters={:064b}\", self.used_parameters);\n+\n+                false\n+            }\n+            ty::Param(param) => {\n+                debug!(\"visit_ty: param={:?}\", param);\n+                set_bit(self.used_parameters, param.index);\n+                false\n+            }\n+            _ => ty.super_visit_with(self),\n+        }\n+    }\n+}"}, {"sha": "11fc40998b1c83daf2151b62b778365a84ebcfa9", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -949,6 +949,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: PLT is disabled if full relro is enabled)\"),\n     polonius: bool = (false, parse_bool, [UNTRACKED],\n         \"enable polonius-based borrow-checker (default: no)\"),\n+    polymorphize: bool = (true, parse_bool, [TRACKED],\n+          \"perform polymorphization analysis\"),\n+    polymorphize_errors: bool = (false, parse_bool, [TRACKED],\n+          \"emit errors from polymorphization analysis for debugging\"),\n     pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n     pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],"}, {"sha": "90c89ea6b0a86243b8be7e564c50abb1a5c139a8", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -116,7 +116,6 @@ fn get_symbol_hash<'tcx>(\n \n         // also include any type parameters (for generic items)\n         assert!(!substs.has_erasable_regions());\n-        assert!(!substs.needs_subst());\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n         if let Some(instantiating_crate) = instantiating_crate {"}, {"sha": "aebccff01fc69bf62017966a2b6248176ca18113", "filename": "src/test/codegen-units/item-collection/static-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -6,7 +6,7 @@ pub static FN : fn() = foo::<i32>;\n \n pub fn foo<T>() { }\n \n-//~ MONO_ITEM fn static_init::foo[0]<i32>\n+//~ MONO_ITEM fn static_init::foo[0]<T>\n //~ MONO_ITEM static static_init::FN[0]\n \n //~ MONO_ITEM fn static_init::start[0]"}, {"sha": "abe2d108eae7d77b21cebde17abf24a03a824eb2", "filename": "src/test/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -27,7 +27,7 @@ impl SomeGenericTrait<u64> for i32 {\n \n     // For the non-generic foo(), we should generate a codegen-item even if it\n     // is not called anywhere\n-    //~ MONO_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::foo[0]<i32, u64>\n+    //~ MONO_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::foo[0]<i32, T1>\n }\n \n // Non-generic impl of generic trait"}, {"sha": "dc2ad0559b34f9c21cdba0be260f057271173d42", "filename": "src/test/codegen-units/polymorphization/unused_type_parameters.rs", "status": "added", "additions": 323, "deletions": 0, "changes": 323, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,323 @@\n+// compile-flags:-Zprint-mono-items=lazy -Copt-level=1\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"rlib\"]\n+\n+// This test checks that the polymorphization analysis correctly reduces the\n+// generated mono items.\n+\n+mod functions {\n+    // Function doesn't have any type parameters to be unused.\n+    pub fn no_parameters() {}\n+\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::no_parameters[0]\n+\n+    // Function has an unused type parameter.\n+    pub fn unused<T>() {\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::unused[0]<T>\n+\n+    // Function uses type parameter in value of a binding.\n+    pub fn used_binding_value<T: Default>() {\n+        let _: T = Default::default();\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_value[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_value[0]<u64>\n+\n+    // Function uses type parameter in type of a binding.\n+    pub fn used_binding_type<T>() {\n+        let _: Option<T> = None;\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_type[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_binding_type[0]<u64>\n+\n+    // Function uses type parameter in argument.\n+    pub fn used_argument<T>(_: T) {\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_argument[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_argument[0]<u64>\n+//\n+    // Function uses type parameter in substitutions to another function.\n+    pub fn used_substs<T>() {\n+        unused::<T>()\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_substs[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::functions[0]::used_substs[0]<u64>\n+}\n+\n+\n+mod closures {\n+    // Function doesn't have any type parameters to be unused.\n+    pub fn no_parameters() {\n+        let _ = || {};\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::no_parameters[0]\n+\n+    // Function has an unused type parameter in parent and closure.\n+    pub fn unused<T>() -> u32 {\n+        let add_one = |x: u32| x + 1;\n+        add_one(3)\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::unused[0]::{{closure}}[0]<T, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::unused[0]<T>\n+\n+    // Function has an unused type parameter in closure, but not in parent.\n+    pub fn used_parent<T: Default>() -> u32 {\n+        let _: T = Default::default();\n+        let add_one = |x: u32| x + 1;\n+        add_one(3)\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_parent[0]::{{closure}}[0]<T, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_parent[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_parent[0]<u64>\n+\n+    // Function uses type parameter in value of a binding in closure.\n+    pub fn used_binding_value<T: Default>() -> T {\n+        let x = || {\n+            let y: T = Default::default();\n+            y\n+        };\n+\n+        x()\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()) -> u64, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_value[0]<u64>\n+\n+    // Function uses type parameter in type of a binding in closure.\n+    pub fn used_binding_type<T>() -> Option<T> {\n+        let x = || {\n+            let y: Option<T> = None;\n+            y\n+        };\n+\n+        x()\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()) -> core::option[0]::Option[0]<u32>, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()) -> core::option[0]::Option[0]<u64>, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_binding_type[0]<u64>\n+\n+    // Function and closure uses type parameter in argument.\n+    pub fn used_argument<T>(t: T) -> u32 {\n+        let x = |_: T| 3;\n+        x(t)\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn((u64)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument[0]<u64>\n+\n+    // Closure uses type parameter in argument.\n+    pub fn used_argument_closure<T: Default>() -> u32 {\n+        let t: T = Default::default();\n+        let x = |_: T| 3;\n+        x(t)\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn((u64)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_argument_closure[0]<u64>\n+\n+    // Closure uses type parameter as upvar.\n+    pub fn used_upvar<T: Default>() -> T {\n+        let x: T = Default::default();\n+        let y = || x;\n+        y()\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]::{{closure}}[0]<u32, i32, extern \"rust-call\" fn(()) -> u32, (u32)>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]::{{closure}}[0]<u64, i32, extern \"rust-call\" fn(()) -> u64, (u64)>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_upvar[0]<u64>\n+\n+    // Closure uses type parameter in substitutions to another function.\n+    pub fn used_substs<T>() {\n+        let x = || super::functions::unused::<T>();\n+        x()\n+    }\n+\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()), ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()), ()>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::closures[0]::used_substs[0]<u64>\n+}\n+\n+mod methods {\n+    pub struct Foo<F>(F);\n+\n+    impl<F: Default> Foo<F> {\n+        // Function has an unused type parameter from impl.\n+        pub fn unused_impl() {\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::unused_impl[0]<F>\n+\n+        // Function has an unused type parameter from impl and fn.\n+        pub fn unused_both<G: Default>() {\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::unused_both[0]<F, G>\n+\n+        // Function uses type parameter from impl.\n+        pub fn used_impl() {\n+            let _: F = Default::default();\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_impl[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_impl[0]<u64>\n+\n+        // Function uses type parameter from impl.\n+        pub fn used_fn<G: Default>() {\n+            let _: G = Default::default();\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_fn[0]<F, u32>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_fn[0]<F, u64>\n+\n+        // Function uses type parameter from impl.\n+        pub fn used_both<G: Default>() {\n+            let _: F = Default::default();\n+            let _: G = Default::default();\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_both[0]<u32, u32>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_both[0]<u64, u64>\n+\n+        // Function uses type parameter in substitutions to another function.\n+        pub fn used_substs() {\n+            super::functions::unused::<F>()\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_substs[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::used_substs[0]<u64>\n+\n+        // Function has an unused type parameter from impl and fn.\n+        pub fn closure_unused_all<G: Default>() -> u32 {\n+            let add_one = |x: u32| x + 1;\n+            add_one(3)\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_unused_all[0]::{{closure}}[0]<F, G, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_unused_all[0]<F, G>\n+\n+        // Function uses type parameter from impl and fn in closure.\n+        pub fn closure_used_both<G: Default>() -> u32 {\n+            let add_one = |x: u32| {\n+                let _: F = Default::default();\n+                let _: G = Default::default();\n+                x + 1\n+            };\n+\n+            add_one(3)\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]::{{closure}}[0]<u32, u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]::{{closure}}[0]<u64, u64, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]<u32, u32>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_both[0]<u64, u64>\n+\n+        // Function uses type parameter from fn in closure.\n+        pub fn closure_used_fn<G: Default>() -> u32 {\n+            let add_one = |x: u32| {\n+                let _: G = Default::default();\n+                x + 1\n+            };\n+\n+            add_one(3)\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]::{{closure}}[0]<F, u32, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]::{{closure}}[0]<F, u64, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]<F, u32>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_fn[0]<F, u64>\n+\n+        // Function uses type parameter from impl in closure.\n+        pub fn closure_used_impl<G: Default>() -> u32 {\n+            let add_one = |x: u32| {\n+                let _: F = Default::default();\n+                x + 1\n+            };\n+\n+            add_one(3)\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]::{{closure}}[0]<u32, G, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]::{{closure}}[0]<u64, G, i8, extern \"rust-call\" fn((u32)) -> u32, ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]<u32, G>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_impl[0]<u64, G>\n+\n+        // Closure uses type parameter in substitutions to another function.\n+        pub fn closure_used_substs() {\n+            let x = || super::functions::unused::<F>();\n+            x()\n+        }\n+\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]::{{closure}}[0]<u32, i8, extern \"rust-call\" fn(()), ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]::{{closure}}[0]<u64, i8, extern \"rust-call\" fn(()), ()>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::methods[0]::{{impl}}[0]::closure_used_substs[0]<u64>\n+    }\n+}\n+\n+\n+\n+fn dispatch<T: Default>() {\n+    functions::no_parameters();\n+    functions::unused::<T>();\n+    functions::used_binding_value::<T>();\n+    functions::used_binding_type::<T>();\n+    functions::used_argument::<T>(Default::default());\n+    functions::used_substs::<T>();\n+\n+    closures::no_parameters();\n+    let _ = closures::unused::<T>();\n+    let _ = closures::used_parent::<T>();\n+    let _ = closures::used_binding_value::<T>();\n+    let _ = closures::used_binding_type::<T>();\n+    let _ = closures::used_argument::<T>(Default::default());\n+    let _ = closures::used_argument_closure::<T>();\n+    let _ = closures::used_upvar::<T>();\n+    let _ = closures::used_substs::<T>();\n+\n+    methods::Foo::<T>::unused_impl();\n+    methods::Foo::<T>::unused_both::<T>();\n+    methods::Foo::<T>::used_impl();\n+    methods::Foo::<T>::used_fn::<T>();\n+    methods::Foo::<T>::used_both::<T>();\n+    methods::Foo::<T>::used_substs();\n+    let _ = methods::Foo::<T>::closure_unused_all::<T>();\n+    let _ = methods::Foo::<T>::closure_used_both::<T>();\n+    let _ = methods::Foo::<T>::closure_used_impl::<T>();\n+    let _ = methods::Foo::<T>::closure_used_fn::<T>();\n+    let _ = methods::Foo::<T>::closure_used_substs();\n+}\n+\n+//~ MONO_ITEM fn unused_type_parameters::dispatch[0]<u32>\n+//~ MONO_ITEM fn unused_type_parameters::dispatch[0]<u64>\n+\n+pub fn foo() {\n+    // Generate two copies of each function to check that where the type parameter is unused,\n+    // there is only a single copy.\n+    dispatch::<u32>();\n+    dispatch::<u64>();\n+}\n+\n+//~ MONO_ITEM fn unused_type_parameters::foo[0] @@ unused_type_parameters-cgu.0[External]\n+\n+// These are all the items that aren't relevant to the test.\n+//~ MONO_ITEM fn core::default[0]::{{impl}}[6]::default[0]\n+//~ MONO_ITEM fn core::default[0]::{{impl}}[7]::default[0]"}, {"sha": "da83cc1bee402eafbcfb4b6b1fcd3876c01e97cf", "filename": "src/test/ui/polymorphization/const_parameters/closures.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,61 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+// This test checks that the polymorphization analysis correctly detects unused const\n+// parameters in closures.\n+\n+// Function doesn't have any generic parameters to be unused.\n+pub fn no_parameters() {\n+    let _ = || {};\n+}\n+\n+// Function has an unused generic parameter in parent and closure.\n+pub fn unused<const T: usize>() -> usize {\n+//~^ ERROR item has unused generic parameters\n+    let add_one = |x: usize| x + 1;\n+//~^ ERROR item has unused generic parameters\n+    add_one(3)\n+}\n+\n+// Function has an unused generic parameter in closure, but not in parent.\n+pub fn used_parent<const T: usize>() -> usize {\n+    let x: usize = T;\n+    let add_one = |x: usize| x + 1;\n+//~^ ERROR item has unused generic parameters\n+    x + add_one(3)\n+}\n+\n+// Function uses generic parameter in value of a binding in closure.\n+pub fn used_binding<const T: usize>() -> usize {\n+    let x = || {\n+        let y: usize = T;\n+        y\n+    };\n+\n+    x()\n+}\n+\n+// Closure uses a value as an upvar, which used the generic parameter.\n+pub fn unused_upvar<const T: usize>() -> usize {\n+    let x: usize = T;\n+    let y = || x;\n+//~^ ERROR item has unused generic parameters\n+    y()\n+}\n+\n+// Closure uses generic parameter in substitutions to another function.\n+pub fn used_substs<const T: usize>() -> usize {\n+    let x = || unused::<T>();\n+    x()\n+}\n+\n+fn main() {\n+    no_parameters();\n+    let _ = unused::<1>();\n+    let _ = used_parent::<1>();\n+    let _ = used_binding::<1>();\n+    let _ = unused_upvar::<1>();\n+    let _ = used_substs::<1>();\n+}"}, {"sha": "73a071f346a1599f2ec1e99385ec2bf72733ea4f", "filename": "src/test/ui/polymorphization/const_parameters/closures.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,44 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/closures.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:17:19\n+   |\n+LL | pub fn unused<const T: usize>() -> usize {\n+   |                     - generic parameter `T` is unused\n+LL |\n+LL |     let add_one = |x: usize| x + 1;\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:15:8\n+   |\n+LL | pub fn unused<const T: usize>() -> usize {\n+   |        ^^^^^^       - generic parameter `T` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:25:19\n+   |\n+LL | pub fn used_parent<const T: usize>() -> usize {\n+   |                          - generic parameter `T` is unused\n+LL |     let x: usize = T;\n+LL |     let add_one = |x: usize| x + 1;\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:43:13\n+   |\n+LL | pub fn unused_upvar<const T: usize>() -> usize {\n+   |                           - generic parameter `T` is unused\n+LL |     let x: usize = T;\n+LL |     let y = || x;\n+   |             ^^^^\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+"}, {"sha": "1c19f9480b4ee31793ea7ae67d7ffe3ba5564a78", "filename": "src/test/ui/polymorphization/const_parameters/functions.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,33 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+// This test checks that the polymorphization analysis correctly detects unused const\n+// parameters in functions.\n+\n+// Function doesn't have any generic parameters to be unused.\n+pub fn no_parameters() {}\n+\n+// Function has an unused generic parameter.\n+pub fn unused<const T: usize>() {\n+//~^ ERROR item has unused generic parameters\n+}\n+\n+// Function uses generic parameter in value of a binding.\n+pub fn used_binding<const T: usize>() -> usize {\n+    let x: usize = T;\n+    x\n+}\n+\n+// Function uses generic parameter in substitutions to another function.\n+pub fn used_substs<const T: usize>() {\n+    unused::<T>()\n+}\n+\n+fn main() {\n+    no_parameters();\n+    unused::<1>();\n+    used_binding::<1>();\n+    used_substs::<1>();\n+}"}, {"sha": "a503ec519427d2a6b8ce41cd7a2aa68add70b4dd", "filename": "src/test/ui/polymorphization/const_parameters/functions.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/functions.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: item has unused generic parameters\n+  --> $DIR/functions.rs:13:8\n+   |\n+LL | pub fn unused<const T: usize>() {\n+   |        ^^^^^^       - generic parameter `T` is unused\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "ce56b7a358861c30d404cd9aa11a6eecd7e454cf", "filename": "src/test/ui/polymorphization/drop_shims/simple.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fdrop_shims%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fdrop_shims%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fdrop_shims%2Fsimple.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+pub struct OnDrop<F: Fn()>(pub F);\n+\n+impl<F: Fn()> Drop for OnDrop<F> {\n+    fn drop(&mut self) { }\n+}\n+\n+fn foo<R, S: FnOnce()>(\n+    _: R,\n+    _: S,\n+) {\n+    let bar = || {\n+        let _ = OnDrop(|| ());\n+    };\n+    let _ = bar();\n+}\n+\n+fn main() {\n+    foo(3u32, || {});\n+}"}, {"sha": "b7ea07b6bc653595cff967c32e345810cbf85f0b", "filename": "src/test/ui/polymorphization/drop_shims/transitive.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fdrop_shims%2Ftransitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fdrop_shims%2Ftransitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fdrop_shims%2Ftransitive.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+pub struct OnDrop<F: Fn()>(pub F);\n+\n+impl<F: Fn()> Drop for OnDrop<F> {\n+    fn drop(&mut self) { }\n+}\n+\n+fn bar<F: FnOnce()>(f: F) {\n+    let _ = OnDrop(|| ());\n+    f()\n+}\n+\n+fn foo<R, S: FnOnce()>(\n+    _: R,\n+    _: S,\n+) {\n+    let bar = || {\n+        bar(|| {})\n+    };\n+    let _ = bar();\n+}\n+\n+fn main() {\n+    foo(3u32, || {});\n+}"}, {"sha": "dd7c3497de2c91c8b37c9bd7dd87f787f9bce3c1", "filename": "src/test/ui/polymorphization/generators.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,88 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+#![feature(const_generics, generators, generator_trait)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+use std::marker::Unpin;\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+\n+enum YieldOrReturn<Y, R> {\n+    Yield(Y),\n+    Return(R),\n+}\n+\n+fn finish<T, Y, R>(mut t: T) -> Vec<YieldOrReturn<Y, R>>\n+where\n+    T: Generator<(), Yield = Y, Return = R> + Unpin,\n+{\n+    let mut results = Vec::new();\n+    loop {\n+        match Pin::new(&mut t).resume(()) {\n+            GeneratorState::Yielded(yielded) => results.push(YieldOrReturn::Yield(yielded)),\n+            GeneratorState::Complete(returned) => {\n+                results.push(YieldOrReturn::Return(returned));\n+                return results;\n+            }\n+        }\n+    }\n+}\n+\n+// This test checks that the polymorphization analysis functions on generators.\n+\n+pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+    //~^ ERROR item has unused generic parameters\n+    || {\n+        //~^ ERROR item has unused generic parameters\n+        yield 1;\n+        2\n+    }\n+}\n+\n+pub fn used_type_in_yield<Y: Default>() -> impl Generator<(), Yield = Y, Return = u32> + Unpin {\n+    || {\n+        yield Y::default();\n+        2\n+    }\n+}\n+\n+pub fn used_type_in_return<R: Default>() -> impl Generator<(), Yield = u32, Return = R> + Unpin {\n+    || {\n+        yield 3;\n+        R::default()\n+    }\n+}\n+\n+pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+    //~^ ERROR item has unused generic parameters\n+    || {\n+        //~^ ERROR item has unused generic parameters\n+        yield 1;\n+        2\n+    }\n+}\n+\n+pub fn used_const_in_yield<const Y: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin\n+{\n+    || {\n+        yield Y;\n+        2\n+    }\n+}\n+\n+pub fn used_const_in_return<const R: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin\n+{\n+    || {\n+        yield 4;\n+        R\n+    }\n+}\n+\n+fn main() {\n+    finish(unused_type::<u32>());\n+    finish(used_type_in_yield::<u32>());\n+    finish(used_type_in_return::<u32>());\n+    finish(unused_const::<1u32>());\n+    finish(used_const_in_yield::<1u32>());\n+    finish(used_const_in_return::<1u32>());\n+}"}, {"sha": "9e3ee130234dadd10b89cb15811bc27b96e0affe", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,49 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/generators.rs:3:12\n+   |\n+LL | #![feature(const_generics, generators, generator_trait)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: item has unused generic parameters\n+  --> $DIR/generators.rs:35:5\n+   |\n+LL |   pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+   |                      - generic parameter `T` is unused\n+LL |\n+LL | /     || {\n+LL | |\n+LL | |         yield 1;\n+LL | |         2\n+LL | |     }\n+   | |_____^\n+\n+error: item has unused generic parameters\n+  --> $DIR/generators.rs:33:8\n+   |\n+LL | pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+   |        ^^^^^^^^^^^ - generic parameter `T` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/generators.rs:58:5\n+   |\n+LL |   pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+   |                             - generic parameter `T` is unused\n+LL |\n+LL | /     || {\n+LL | |\n+LL | |         yield 1;\n+LL | |         2\n+LL | |     }\n+   | |_____^\n+\n+error: item has unused generic parameters\n+  --> $DIR/generators.rs:56:8\n+   |\n+LL | pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n+   |        ^^^^^^^^^^^^       - generic parameter `T` is unused\n+\n+error: aborting due to 4 previous errors; 1 warning emitted\n+"}, {"sha": "873a9c7baaab400aeef344566d44f7caf2449fe7", "filename": "src/test/ui/polymorphization/lifetimes.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,22 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+\n+// This test checks that the polymorphization analysis doesn't break when the\n+// function/closure doesn't just have generic parameters.\n+\n+// Function has an unused generic parameter.\n+pub fn unused<'a, T>(_: &'a u32) {\n+//~^ ERROR item has unused generic parameters\n+}\n+\n+pub fn used<'a, T: Default>(_: &'a u32) -> u32 {\n+    let _: T = Default::default();\n+    let add_one = |x: u32| x + 1;\n+//~^ ERROR item has unused generic parameters\n+    add_one(3)\n+}\n+\n+fn main() {\n+    unused::<u32>(&3);\n+    used::<u32>(&3);\n+}"}, {"sha": "5629857f85e653c14c29fe6c153f63281b1c50a1", "filename": "src/test/ui/polymorphization/lifetimes.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,17 @@\n+error: item has unused generic parameters\n+  --> $DIR/lifetimes.rs:8:8\n+   |\n+LL | pub fn unused<'a, T>(_: &'a u32) {\n+   |        ^^^^^^     - generic parameter `T` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/lifetimes.rs:14:19\n+   |\n+LL | pub fn used<'a, T: Default>(_: &'a u32) -> u32 {\n+   |                 - generic parameter `T` is unused\n+LL |     let _: T = Default::default();\n+LL |     let add_one = |x: u32| x + 1;\n+   |                   ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "49f8668cff810ca0a9cc6cb34ec2a09730c1ee3b", "filename": "src/test/ui/polymorphization/predicates.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,21 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+\n+// This test checks that `T` is considered used in `foo`, because it is used in a predicate for\n+// `I`, which is used.\n+\n+fn bar<I>() {\n+//~^ ERROR item has unused generic parameters\n+}\n+\n+fn foo<I, T>(_: I)\n+where\n+    I: Iterator<Item = T>,\n+{\n+    bar::<I>()\n+}\n+\n+fn main() {\n+    let x = &[2u32];\n+    foo(x.iter());\n+}"}, {"sha": "b7bc2ccce57bf54f925108ca27fb7b7bcddb9f38", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,8 @@\n+error: item has unused generic parameters\n+  --> $DIR/predicates.rs:7:4\n+   |\n+LL | fn bar<I>() {\n+   |    ^^^ - generic parameter `I` is unused\n+\n+error: aborting due to previous error\n+"}, {"sha": "3bb77a1c1e6298371c91d39d72ba676fd8c62e2d", "filename": "src/test/ui/polymorphization/too-many-generic-params.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftoo-many-generic-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftoo-many-generic-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftoo-many-generic-params.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,76 @@\n+// build-pass\n+// compile-flags: -Zpolymorphize-errors\n+\n+// This test checks that the analysis doesn't panic when there are >64 generic parameters, but\n+// instead considers those parameters used.\n+\n+fn bar<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA,\n+       AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW,\n+       AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL>()\n+{\n+    let _: Option<A> = None;\n+    let _: Option<B> = None;\n+    let _: Option<C> = None;\n+    let _: Option<D> = None;\n+    let _: Option<E> = None;\n+    let _: Option<F> = None;\n+    let _: Option<G> = None;\n+    let _: Option<H> = None;\n+    let _: Option<I> = None;\n+    let _: Option<J> = None;\n+    let _: Option<K> = None;\n+    let _: Option<L> = None;\n+    let _: Option<M> = None;\n+    let _: Option<N> = None;\n+    let _: Option<O> = None;\n+    let _: Option<P> = None;\n+    let _: Option<Q> = None;\n+    let _: Option<R> = None;\n+    let _: Option<S> = None;\n+    let _: Option<T> = None;\n+    let _: Option<U> = None;\n+    let _: Option<V> = None;\n+    let _: Option<W> = None;\n+    let _: Option<X> = None;\n+    let _: Option<Y> = None;\n+    let _: Option<Z> = None;\n+    let _: Option<AA> = None;\n+    let _: Option<AB> = None;\n+    let _: Option<AC> = None;\n+    let _: Option<AD> = None;\n+    let _: Option<AE> = None;\n+    let _: Option<AF> = None;\n+    let _: Option<AG> = None;\n+    let _: Option<AH> = None;\n+    let _: Option<AI> = None;\n+    let _: Option<AJ> = None;\n+    let _: Option<AK> = None;\n+    let _: Option<AL> = None;\n+    let _: Option<AM> = None;\n+    let _: Option<AN> = None;\n+    let _: Option<AO> = None;\n+    let _: Option<AP> = None;\n+    let _: Option<AQ> = None;\n+    let _: Option<AR> = None;\n+    let _: Option<AS> = None;\n+    let _: Option<AT> = None;\n+    let _: Option<AU> = None;\n+    let _: Option<AV> = None;\n+    let _: Option<AW> = None;\n+    let _: Option<AX> = None;\n+    let _: Option<AY> = None;\n+    let _: Option<BA> = None;\n+    let _: Option<BB> = None;\n+    let _: Option<BC> = None;\n+    let _: Option<BD> = None;\n+    let _: Option<BE> = None;\n+    let _: Option<BF> = None;\n+    let _: Option<BG> = None;\n+    let _: Option<BH> = None;\n+    let _: Option<BI> = None;\n+    let _: Option<BJ> = None;\n+    let _: Option<BK> = None;\n+    let _: Option<BL> = None;\n+}\n+\n+fn main() { }"}, {"sha": "cf5a4b1cec5f31cb6f736d4d95fa577b49d938a9", "filename": "src/test/ui/polymorphization/type_parameters/closures.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,143 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+\n+// This test checks that the polymorphization analysis correctly detects unused type\n+// parameters in closures.\n+\n+// Function doesn't have any generic parameters to be unused.\n+pub fn no_parameters() {\n+    let _ = || {};\n+}\n+\n+// Function has an unused generic parameter in parent and closure.\n+pub fn unused<T>() -> u32 {\n+//~^ ERROR item has unused generic parameters\n+    let add_one = |x: u32| x + 1;\n+//~^ ERROR item has unused generic parameters\n+    add_one(3)\n+}\n+\n+// Function has an unused generic parameter in closure, but not in parent.\n+pub fn used_parent<T: Default>() -> u32 {\n+    let _: T = Default::default();\n+    let add_one = |x: u32| x + 1;\n+//~^ ERROR item has unused generic parameters\n+    add_one(3)\n+}\n+\n+// Function uses generic parameter in value of a binding in closure.\n+pub fn used_binding_value<T: Default>() -> T {\n+    let x = || {\n+        let y: T = Default::default();\n+        y\n+    };\n+\n+    x()\n+}\n+\n+// Function uses generic parameter in generic of a binding in closure.\n+pub fn used_binding_generic<T>() -> Option<T> {\n+    let x = || {\n+        let y: Option<T> = None;\n+        y\n+    };\n+\n+    x()\n+}\n+\n+// Function and closure uses generic parameter in argument.\n+pub fn used_argument<T>(t: T) -> u32 {\n+    let x = |_: T| 3;\n+    x(t)\n+}\n+\n+// Closure uses generic parameter in argument.\n+pub fn used_argument_closure<T: Default>() -> u32 {\n+    let t: T = Default::default();\n+    let x = |_: T| 3;\n+    x(t)\n+}\n+\n+// Closure uses generic parameter as upvar.\n+pub fn used_upvar<T: Default>() -> T {\n+    let x: T = Default::default();\n+    let y = || x;\n+    y()\n+}\n+\n+// Closure uses generic parameter in substitutions to another function.\n+pub fn used_substs<T>() -> u32 {\n+    let x = || unused::<T>();\n+    x()\n+}\n+\n+struct Foo<F>(F);\n+\n+impl<F: Default> Foo<F> {\n+    // Function has an unused generic parameter from impl and fn.\n+    pub fn unused_all<G: Default>() -> u32 {\n+//~^ ERROR item has unused generic parameters\n+        let add_one = |x: u32| x + 1;\n+//~^ ERROR item has unused generic parameters\n+        add_one(3)\n+    }\n+\n+    // Function uses generic parameter from impl and fn in closure.\n+    pub fn used_both<G: Default>() -> u32 {\n+        let add_one = |x: u32| {\n+            let _: F = Default::default();\n+            let _: G = Default::default();\n+            x + 1\n+        };\n+\n+        add_one(3)\n+    }\n+\n+    // Function uses generic parameter from fn in closure.\n+    pub fn used_fn<G: Default>() -> u32 {\n+//~^ ERROR item has unused generic parameters\n+        let add_one = |x: u32| {\n+//~^ ERROR item has unused generic parameters\n+            let _: G = Default::default();\n+            x + 1\n+        };\n+\n+        add_one(3)\n+    }\n+\n+    // Function uses generic parameter from impl in closure.\n+    pub fn used_impl<G: Default>() -> u32 {\n+//~^ ERROR item has unused generic parameters\n+        let add_one = |x: u32| {\n+//~^ ERROR item has unused generic parameters\n+            let _: F = Default::default();\n+            x + 1\n+        };\n+\n+        add_one(3)\n+    }\n+\n+    // Closure uses generic parameter in substitutions to another function.\n+    pub fn used_substs() -> u32 {\n+        let x = || unused::<F>();\n+        x()\n+    }\n+}\n+\n+fn main() {\n+    no_parameters();\n+    let _ = unused::<u32>();\n+    let _ = used_parent::<u32>();\n+    let _ = used_binding_value::<u32>();\n+    let _ = used_binding_generic::<u32>();\n+    let _ = used_argument(3u32);\n+    let _ = used_argument_closure::<u32>();\n+    let _ = used_upvar::<u32>();\n+    let _ = used_substs::<u32>();\n+\n+    let _ = Foo::<u32>::unused_all::<u32>();\n+    let _ = Foo::<u32>::used_both::<u32>();\n+    let _ = Foo::<u32>::used_impl::<u32>();\n+    let _ = Foo::<u32>::used_fn::<u32>();\n+    let _ = Foo::<u32>::used_substs();\n+}"}, {"sha": "914cb628bd0c22ee3834988edb7f8e32d028065a", "filename": "src/test/ui/polymorphization/type_parameters/closures.stderr", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,90 @@\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:15:19\n+   |\n+LL | pub fn unused<T>() -> u32 {\n+   |               - generic parameter `T` is unused\n+LL |\n+LL |     let add_one = |x: u32| x + 1;\n+   |                   ^^^^^^^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:13:8\n+   |\n+LL | pub fn unused<T>() -> u32 {\n+   |        ^^^^^^ - generic parameter `T` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:23:19\n+   |\n+LL | pub fn used_parent<T: Default>() -> u32 {\n+   |                    - generic parameter `T` is unused\n+LL |     let _: T = Default::default();\n+LL |     let add_one = |x: u32| x + 1;\n+   |                   ^^^^^^^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:80:23\n+   |\n+LL | impl<F: Default> Foo<F> {\n+   |      - generic parameter `F` is unused\n+LL |     // Function has an unused generic parameter from impl and fn.\n+LL |     pub fn unused_all<G: Default>() -> u32 {\n+   |                       - generic parameter `G` is unused\n+LL |\n+LL |         let add_one = |x: u32| x + 1;\n+   |                       ^^^^^^^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:78:12\n+   |\n+LL | impl<F: Default> Foo<F> {\n+   |      - generic parameter `F` is unused\n+LL |     // Function has an unused generic parameter from impl and fn.\n+LL |     pub fn unused_all<G: Default>() -> u32 {\n+   |            ^^^^^^^^^^ - generic parameter `G` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:111:23\n+   |\n+LL |       pub fn used_impl<G: Default>() -> u32 {\n+   |                        - generic parameter `G` is unused\n+LL |\n+LL |           let add_one = |x: u32| {\n+   |  _______________________^\n+LL | |\n+LL | |             let _: F = Default::default();\n+LL | |             x + 1\n+LL | |         };\n+   | |_________^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:109:12\n+   |\n+LL |     pub fn used_impl<G: Default>() -> u32 {\n+   |            ^^^^^^^^^ - generic parameter `G` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:99:23\n+   |\n+LL |   impl<F: Default> Foo<F> {\n+   |        - generic parameter `F` is unused\n+...\n+LL |           let add_one = |x: u32| {\n+   |  _______________________^\n+LL | |\n+LL | |             let _: G = Default::default();\n+LL | |             x + 1\n+LL | |         };\n+   | |_________^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:97:12\n+   |\n+LL | impl<F: Default> Foo<F> {\n+   |      - generic parameter `F` is unused\n+...\n+LL |     pub fn used_fn<G: Default>() -> u32 {\n+   |            ^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "3caf2631a57a3ccd64097c34bf7bd038e568326f", "filename": "src/test/ui/polymorphization/type_parameters/functions.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,84 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+\n+// This test checks that the polymorphization analysis correctly detects unused type\n+// parameters in functions.\n+\n+// Function doesn't have any generic parameters to be unused.\n+pub fn no_parameters() {}\n+\n+// Function has an unused generic parameter.\n+pub fn unused<T>() {\n+//~^ ERROR item has unused generic parameters\n+}\n+\n+// Function uses generic parameter in value of a binding.\n+pub fn used_binding_value<T: Default>() {\n+    let _: T = Default::default();\n+}\n+\n+// Function uses generic parameter in generic of a binding.\n+pub fn used_binding_generic<T>() {\n+    let _: Option<T> = None;\n+}\n+\n+// Function uses generic parameter in argument.\n+pub fn used_argument<T>(_: T) {\n+}\n+\n+// Function uses generic parameter in substitutions to another function.\n+pub fn used_substs<T>() {\n+    unused::<T>()\n+}\n+\n+struct Foo<F>(F);\n+\n+impl<F: Default> Foo<F> {\n+    // Function has an unused generic parameter from impl.\n+    pub fn unused_impl() {\n+//~^ ERROR item has unused generic parameters\n+    }\n+\n+    // Function has an unused generic parameter from impl and fn.\n+    pub fn unused_both<G: Default>() {\n+//~^ ERROR item has unused generic parameters\n+    }\n+\n+    // Function uses generic parameter from impl.\n+    pub fn used_impl() {\n+        let _: F = Default::default();\n+    }\n+\n+    // Function uses generic parameter from impl.\n+    pub fn used_fn<G: Default>() {\n+//~^ ERROR item has unused generic parameters\n+        let _: G = Default::default();\n+    }\n+\n+    // Function uses generic parameter from impl.\n+    pub fn used_both<G: Default>() {\n+        let _: F = Default::default();\n+        let _: G = Default::default();\n+    }\n+\n+    // Function uses generic parameter in substitutions to another function.\n+    pub fn used_substs() {\n+        unused::<F>()\n+    }\n+}\n+\n+fn main() {\n+    no_parameters();\n+    unused::<u32>();\n+    used_binding_value::<u32>();\n+    used_binding_generic::<u32>();\n+    used_argument(3u32);\n+    used_substs::<u32>();\n+\n+    Foo::<u32>::unused_impl();\n+    Foo::<u32>::unused_both::<u32>();\n+    Foo::<u32>::used_impl();\n+    Foo::<u32>::used_fn::<u32>();\n+    Foo::<u32>::used_both::<u32>();\n+    Foo::<u32>::used_substs();\n+}"}, {"sha": "a34e677a7655010507708858e15d510d7edcfecf", "filename": "src/test/ui/polymorphization/type_parameters/functions.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,35 @@\n+error: item has unused generic parameters\n+  --> $DIR/functions.rs:11:8\n+   |\n+LL | pub fn unused<T>() {\n+   |        ^^^^^^ - generic parameter `T` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/functions.rs:38:12\n+   |\n+LL | impl<F: Default> Foo<F> {\n+   |      - generic parameter `F` is unused\n+LL |     // Function has an unused generic parameter from impl.\n+LL |     pub fn unused_impl() {\n+   |            ^^^^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/functions.rs:43:12\n+   |\n+LL | impl<F: Default> Foo<F> {\n+   |      - generic parameter `F` is unused\n+...\n+LL |     pub fn unused_both<G: Default>() {\n+   |            ^^^^^^^^^^^ - generic parameter `G` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/functions.rs:53:12\n+   |\n+LL | impl<F: Default> Foo<F> {\n+   |      - generic parameter `F` is unused\n+...\n+LL |     pub fn used_fn<G: Default>() {\n+   |            ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "3bc25d18981f0010e096d653199920e917c9d846", "filename": "src/test/ui/polymorphization/unsized_cast.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.rs?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,27 @@\n+// build-fail\n+// compile-flags: -Zpolymorphize-errors\n+#![feature(fn_traits, unboxed_closures)]\n+\n+// This test checks that the polymorphization analysis considers a closure\n+// as using all generic parameters if it does an unsizing cast.\n+\n+fn foo<T: Default>() {\n+    let _: T = Default::default();\n+    (|| Box::new(|| {}) as Box<dyn Fn()>)();\n+    //~^ ERROR item has unused generic parameters\n+    //~^^ ERROR item has unused generic parameters\n+}\n+\n+fn foo2<T: Default>() {\n+    let _: T = Default::default();\n+    (|| {\n+        let call: extern \"rust-call\" fn(_, _) = Fn::call;\n+        call(&|| {}, ());\n+        //~^ ERROR item has unused generic parameters\n+    })();\n+}\n+\n+fn main() {\n+    foo::<u32>();\n+    foo2::<u32>();\n+}"}, {"sha": "61fd38841177b50115dc4ca3c037e6eec7c3a31c", "filename": "src/test/ui/polymorphization/unsized_cast.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2989fea88a489a01b3e2243bb84b0ec20b8a0e28/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr?ref=2989fea88a489a01b3e2243bb84b0ec20b8a0e28", "patch": "@@ -0,0 +1,29 @@\n+error: item has unused generic parameters\n+  --> $DIR/unsized_cast.rs:10:18\n+   |\n+LL | fn foo<T: Default>() {\n+   |        - generic parameter `T` is unused\n+LL |     let _: T = Default::default();\n+LL |     (|| Box::new(|| {}) as Box<dyn Fn()>)();\n+   |                  ^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/unsized_cast.rs:10:5\n+   |\n+LL | fn foo<T: Default>() {\n+   |        - generic parameter `T` is unused\n+LL |     let _: T = Default::default();\n+LL |     (|| Box::new(|| {}) as Box<dyn Fn()>)();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/unsized_cast.rs:19:15\n+   |\n+LL | fn foo2<T: Default>() {\n+   |         - generic parameter `T` is unused\n+...\n+LL |         call(&|| {}, ());\n+   |               ^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}