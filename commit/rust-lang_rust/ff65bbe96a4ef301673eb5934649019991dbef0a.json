{"sha": "ff65bbe96a4ef301673eb5934649019991dbef0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNjViYmU5NmE0ZWYzMDE2NzNlYjU5MzQ2NDkwMTk5OTFkYmVmMGE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T11:58:27Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T11:58:27Z"}, "message": "Deny bare trait objects in in src/librustc_data_structures", "tree": {"sha": "79dee8b71096ac7633ff28640fb042cde062192f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79dee8b71096ac7633ff28640fb042cde062192f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff65bbe96a4ef301673eb5934649019991dbef0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff65bbe96a4ef301673eb5934649019991dbef0a", "html_url": "https://github.com/rust-lang/rust/commit/ff65bbe96a4ef301673eb5934649019991dbef0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff65bbe96a4ef301673eb5934649019991dbef0a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5b629efd79de78e6ba7ef493c32857bd7f9cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5b629efd79de78e6ba7ef493c32857bd7f9cf9", "html_url": "https://github.com/rust-lang/rust/commit/ae5b629efd79de78e6ba7ef493c32857bd7f9cf9"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "2cca31f70a092ce82fa07146bad432148d121e10", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff65bbe96a4ef301673eb5934649019991dbef0a/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff65bbe96a4ef301673eb5934649019991dbef0a/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=ff65bbe96a4ef301673eb5934649019991dbef0a", "patch": "@@ -16,6 +16,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "7bd297b1551363d934d027bece82dac772d31430", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff65bbe96a4ef301673eb5934649019991dbef0a/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff65bbe96a4ef301673eb5934649019991dbef0a/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=ff65bbe96a4ef301673eb5934649019991dbef0a", "patch": "@@ -1046,7 +1046,7 @@ unsafe impl<O, T: ?Sized> Send for OwningRefMut<O, T>\n unsafe impl<O, T: ?Sized> Sync for OwningRefMut<O, T>\n     where O: Sync, for<'a> (&'a mut T): Sync {}\n \n-impl Debug for Erased {\n+impl Debug for dyn Erased {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"<Erased>\",)\n     }\n@@ -1166,35 +1166,35 @@ pub type MutexGuardRefMut<'a, T, U = T> = OwningRefMut<MutexGuard<'a, T>, U>;\n pub type RwLockWriteGuardRefMut<'a, T, U = T> = OwningRef<RwLockWriteGuard<'a, T>, U>;\n \n unsafe impl<'a, T: 'a> IntoErased<'a> for Box<T> {\n-    type Erased = Box<Erased + 'a>;\n+    type Erased = Box<dyn Erased + 'a>;\n     fn into_erased(self) -> Self::Erased {\n         self\n     }\n }\n unsafe impl<'a, T: 'a> IntoErased<'a> for Rc<T> {\n-    type Erased = Rc<Erased + 'a>;\n+    type Erased = Rc<dyn Erased + 'a>;\n     fn into_erased(self) -> Self::Erased {\n         self\n     }\n }\n unsafe impl<'a, T: 'a> IntoErased<'a> for Arc<T> {\n-    type Erased = Arc<Erased + 'a>;\n+    type Erased = Arc<dyn Erased + 'a>;\n     fn into_erased(self) -> Self::Erased {\n         self\n     }\n }\n \n unsafe impl<'a, T: Send + 'a> IntoErasedSend<'a> for Box<T> {\n-    type Erased = Box<Erased + Send + 'a>;\n+    type Erased = Box<dyn Erased + Send + 'a>;\n     fn into_erased_send(self) -> Self::Erased {\n         self\n     }\n }\n \n unsafe impl<'a, T: Send + 'a> IntoErasedSendSync<'a> for Box<T> {\n-    type Erased = Box<Erased + Sync + Send + 'a>;\n+    type Erased = Box<dyn Erased + Sync + Send + 'a>;\n     fn into_erased_send_sync(self) -> Self::Erased {\n-        let result: Box<Erased + Send + 'a> = self;\n+        let result: Box<dyn Erased + Send + 'a> = self;\n         // This is safe since Erased can always implement Sync\n         // Only the destructor is available and it takes &mut self\n         unsafe {\n@@ -1204,21 +1204,21 @@ unsafe impl<'a, T: Send + 'a> IntoErasedSendSync<'a> for Box<T> {\n }\n \n unsafe impl<'a, T: Send + Sync + 'a> IntoErasedSendSync<'a> for Arc<T> {\n-    type Erased = Arc<Erased + Send + Sync + 'a>;\n+    type Erased = Arc<dyn Erased + Send + Sync + 'a>;\n     fn into_erased_send_sync(self) -> Self::Erased {\n         self\n     }\n }\n \n /// Typedef of a owning reference that uses an erased `Box` as the owner.\n-pub type ErasedBoxRef<U> = OwningRef<Box<Erased>, U>;\n+pub type ErasedBoxRef<U> = OwningRef<Box<dyn Erased>, U>;\n /// Typedef of a owning reference that uses an erased `Rc` as the owner.\n-pub type ErasedRcRef<U> = OwningRef<Rc<Erased>, U>;\n+pub type ErasedRcRef<U> = OwningRef<Rc<dyn Erased>, U>;\n /// Typedef of a owning reference that uses an erased `Arc` as the owner.\n-pub type ErasedArcRef<U> = OwningRef<Arc<Erased>, U>;\n+pub type ErasedArcRef<U> = OwningRef<Arc<dyn Erased>, U>;\n \n /// Typedef of a mutable owning reference that uses an erased `Box` as the owner.\n-pub type ErasedBoxRefMut<U> = OwningRefMut<Box<Erased>, U>;\n+pub type ErasedBoxRefMut<U> = OwningRefMut<Box<dyn Erased>, U>;\n \n #[cfg(test)]\n mod tests {"}, {"sha": "7668225627f0ef15151c4b1be5f1ae0e3d8e7fd3", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff65bbe96a4ef301673eb5934649019991dbef0a/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff65bbe96a4ef301673eb5934649019991dbef0a/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=ff65bbe96a4ef301673eb5934649019991dbef0a", "patch": "@@ -88,7 +88,7 @@ cfg_if! {\n             t.into_iter()\n         }\n \n-        pub type MetadataRef = OwningRef<Box<Erased>, [u8]>;\n+        pub type MetadataRef = OwningRef<Box<dyn Erased>, [u8]>;\n \n         pub use std::rc::Rc as Lrc;\n         pub use std::rc::Weak as Weak;"}]}