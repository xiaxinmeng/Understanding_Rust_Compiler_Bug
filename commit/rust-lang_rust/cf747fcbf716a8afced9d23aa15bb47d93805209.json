{"sha": "cf747fcbf716a8afced9d23aa15bb47d93805209", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNzQ3ZmNiZjcxNmE4YWZjZWQ5ZDIzYWExNWJiNDdkOTM4MDUyMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-25T01:51:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-25T01:51:35Z"}, "message": "Auto merge of #42212 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 15 pull requests\n\n- Successful merges: #41980, #42071, #42120, #42134, #42141, #42142, #42149, #42150, #42159, #42177, #42186, #42191, #42195, #42198, #42211\n- Failed merges:", "tree": {"sha": "a2215e4dd219883e96acebbdcc24257c99d79133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2215e4dd219883e96acebbdcc24257c99d79133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf747fcbf716a8afced9d23aa15bb47d93805209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf747fcbf716a8afced9d23aa15bb47d93805209", "html_url": "https://github.com/rust-lang/rust/commit/cf747fcbf716a8afced9d23aa15bb47d93805209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf747fcbf716a8afced9d23aa15bb47d93805209/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "html_url": "https://github.com/rust-lang/rust/commit/5b13bff5203c1bdc6ac6dc87f69b5359a9503078"}, {"sha": "d429b495a4bfba26d2c18fd9e140e17a787538d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d429b495a4bfba26d2c18fd9e140e17a787538d8", "html_url": "https://github.com/rust-lang/rust/commit/d429b495a4bfba26d2c18fd9e140e17a787538d8"}], "stats": {"total": 1246, "additions": 603, "deletions": 643}, "files": [{"sha": "e23bdbd9fd87f0788bc930f5cab9fc85389eb1d2", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -151,7 +151,6 @@ dependencies = [\n  \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargotest 0.1.0\",\n- \"chrono 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crates-io 0.9.0\",\n  \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -219,15 +218,6 @@ name = \"cfg-if\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"chrono\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"clap\"\n version = \"2.19.3\"\n@@ -969,11 +959,6 @@ dependencies = [\n  \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"redox_syscall\"\n-version = \"0.1.17\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"regex\"\n version = \"0.1.80\"\n@@ -1844,17 +1829,6 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"time\"\n-version = \"0.1.37\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"toml\"\n version = \"0.1.30\"\n@@ -2048,7 +2022,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum cargo 0.20.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n \"checksum cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de1e760d7b6535af4241fca8bd8adf68e2e7edacc6b29f5d399050c5e48cf88c\"\n-\"checksum chrono 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9123be86fd2a8f627836c235ecdf331fdd067ecf7ac05aa1a68fbcf2429f056\"\n \"checksum clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95b78f3fe0fc94c13c731714363260e04b557a637166f33a4570d3189d642374\"\n \"checksum cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92278eb79412c8f75cfc89e707a1bb3a6490b68f7f2e78d15c774f30fe701122\"\n \"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n@@ -2119,7 +2092,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum racer 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0d72b3afd67882adfca61d609fafb8d7aa5f9e814f12c32fcc6e171995920e8\"\n \"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n-\"checksum redox_syscall 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"29dbdfd4b9df8ab31dec47c6087b7b13cbf4a776f335e4de8efba8288dda075b\"\n \"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n \"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n@@ -2163,7 +2135,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8df7875b676fddfadffd96deea3b1124e5ede707d4884248931077518cf1f773\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n-\"checksum time 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd7ccbf969a892bf83f1e441126968a07a3941c24ff522a26af9f9f4585d1a3\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n \"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n \"checksum toml 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd86ad9ebee246fdedd610e0f6d0587b754a3d81438db930a244d0480ed7878f\""}, {"sha": "0f85ba81d1268c90176e9935ead434cf1fb17daa", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -127,13 +127,13 @@ def unpack(tarball, dst, verbose=False, match=None):\n             shutil.move(tp, fp)\n     shutil.rmtree(os.path.join(dst, fname))\n \n-def run(args, verbose=False, exception=False, cwd=None):\n+def run(args, verbose=False, exception=False, cwd=None, env=None):\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n     sys.stdout.flush()\n     # Use Popen here instead of call() as it apparently allows powershell on\n     # Windows to not lock up waiting for input presumably.\n-    ret = subprocess.Popen(args, cwd=cwd)\n+    ret = subprocess.Popen(args, cwd=cwd, env=env)\n     code = ret.wait()\n     if code != 0:\n         err = \"failed to run: \" + ' '.join(args)\n@@ -385,17 +385,15 @@ def build_bootstrap(self):\n             raise Exception(\"no cargo executable found at `%s`\" % self.cargo())\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n                 os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n+        if self.verbose:\n+            args.append(\"--verbose\")\n+            if self.verbose > 1:\n+                args.append(\"--verbose\")\n         if self.use_locked_deps:\n             args.append(\"--locked\")\n         if self.use_vendored_sources:\n             args.append(\"--frozen\")\n-        self.run(args, env)\n-\n-    def run(self, args, env=None, cwd=None):\n-        proc = subprocess.Popen(args, env=env, cwd=cwd)\n-        ret = proc.wait()\n-        if ret != 0:\n-            sys.exit(ret)\n+        run(args, env=env, verbose=self.verbose)\n \n     def output(self, args, env=None, cwd=None):\n         default_encoding = sys.getdefaultencoding()\n@@ -567,7 +565,7 @@ def update_submodules(self):\n             path = line[1:].split(' ')[1]\n             submodules.append([path, line[0]])\n \n-        self.run([\"git\", \"submodule\", \"sync\"], cwd=self.rust_root)\n+        run([\"git\", \"submodule\", \"sync\"], cwd=self.rust_root)\n \n         for submod in submodules:\n             path, status = submod\n@@ -580,15 +578,15 @@ def update_submodules(self):\n             submod_path = os.path.join(self.rust_root, path)\n \n             if status == ' ':\n-                self.run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n-                self.run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n+                run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n+                run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n             elif status == '+':\n-                self.run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n-                self.run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n-                self.run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n+                run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n+                run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n+                run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n             elif status == '-':\n-                self.run([\"git\", \"submodule\", \"init\", path], cwd=self.rust_root)\n-                self.run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n+                run([\"git\", \"submodule\", \"init\", path], cwd=self.rust_root)\n+                run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n             else:\n                 raise ValueError('unknown submodule status: ' + status)\n \n@@ -620,6 +618,11 @@ def bootstrap():\n     except:\n         pass\n \n+    if '\\nverbose = 2' in rb.config_toml:\n+        rb.verbose = 2\n+    elif '\\nverbose = 1' in rb.config_toml:\n+        rb.verbose = 1\n+\n     rb.use_vendored_sources = '\\nvendor = true' in rb.config_toml or \\\n                               'CFG_ENABLE_VENDOR' in rb.config_mk\n \n@@ -676,7 +679,7 @@ def bootstrap():\n     env[\"BUILD\"] = rb.build\n     env[\"SRC\"] = rb.rust_root\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n-    rb.run(args, env)\n+    run(args, env=env, verbose=rb.verbose)\n \n def main():\n     start_time = time()"}, {"sha": "0a17bd3b5710f6430a2817704b7bbfdc51f95dfd", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -64,6 +64,7 @@ if [ ! -d \"$cache_src_dir/.git\" ]; then\n         git clone https://github.com/rust-lang/rust.git $cache_src_dir\"\n fi\n retry sh -c \"cd $cache_src_dir && git reset --hard && git pull\"\n+(cd $cache_src_dir && git rm src/llvm)\n retry sh -c \"cd $cache_src_dir && \\\n     git submodule deinit -f . && git submodule sync && git submodule update --init\"\n \n@@ -76,6 +77,15 @@ touch \"$cache_valid_file\"\n # http://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository\n modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n for module in $modules; do\n+    if [ \"$module\" = src/llvm ]; then\n+        commit=\"$(git ls-tree HEAD src/llvm | awk '{print $3}')\"\n+        git rm src/llvm\n+        curl -sSL -O \"https://github.com/rust-lang/llvm/archive/$commit.tar.gz\"\n+        tar -C src/ -xf \"$commit.tar.gz\"\n+        rm \"$commit.tar.gz\"\n+        mv \"src/llvm-$commit\" src/llvm\n+        continue\n+    fi\n     if [ ! -d \"$cache_src_dir/$module\" ]; then\n         echo \"WARNING: $module not found in pristine repo\"\n         retry sh -c \"git submodule deinit -f $module && git submodule update --init $module\""}, {"sha": "bc8566e8cbeb375b6b066b0ddd368eb7ee883dfb", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -106,16 +106,10 @@ impl<T> RangeArgument<T> for Range<T> {\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n impl<T> RangeArgument<T> for RangeInclusive<T> {\n     fn start(&self) -> Bound<&T> {\n-        match *self {\n-            RangeInclusive::Empty{ ref at }            => Included(at),\n-            RangeInclusive::NonEmpty { ref start, .. } => Included(start),\n-        }\n+        Included(&self.start)\n     }\n     fn end(&self) -> Bound<&T> {\n-        match *self {\n-            RangeInclusive::Empty{ ref at }            => Excluded(at),\n-            RangeInclusive::NonEmpty { ref end, .. }   => Included(end),\n-        }\n+        Included(&self.end)\n     }\n }\n "}, {"sha": "02d38ccea44eadcb2b95caee0450fbecd7d8d279", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 55, "deletions": 119, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -403,61 +403,35 @@ impl<A: Step + Clone> Iterator for StepBy<A, ops::RangeInclusive<A>> {\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        use ops::RangeInclusive::*;\n-\n-        // this function has a sort of odd structure due to borrowck issues\n-        // we may need to replace self.range, so borrows of start and end need to end early\n-\n-        let (finishing, n) = match self.range {\n-            Empty { .. } => return None, // empty iterators yield no values\n-\n-            NonEmpty { ref mut start, ref mut end } => {\n-                let rev = self.step_by.is_negative();\n-\n-                // march start towards (maybe past!) end and yield the old value\n-                if (rev && start >= end) ||\n-                   (!rev && start <= end)\n-                {\n-                    match start.step(&self.step_by) {\n-                        Some(mut n) => {\n-                            mem::swap(start, &mut n);\n-                            (None, Some(n)) // yield old value, remain non-empty\n-                        },\n-                        None => {\n-                            let mut n = end.clone();\n-                            mem::swap(start, &mut n);\n-                            (None, Some(n)) // yield old value, remain non-empty\n-                        }\n-                    }\n-                } else {\n-                    // found range in inconsistent state (start at or past end), so become empty\n-                    (Some(end.replace_zero()), None)\n-                }\n-            }\n-        };\n+        let rev = self.step_by.is_negative();\n \n-        // turn into an empty iterator if we've reached the end\n-        if let Some(end) = finishing {\n-            self.range = Empty { at: end };\n+        if (rev && self.range.start >= self.range.end) ||\n+           (!rev && self.range.start <= self.range.end)\n+        {\n+            match self.range.start.step(&self.step_by) {\n+                Some(n) => {\n+                    Some(mem::replace(&mut self.range.start, n))\n+                },\n+                None => {\n+                    let last = self.range.start.replace_one();\n+                    self.range.end.replace_zero();\n+                    self.step_by.replace_one();\n+                    Some(last)\n+                },\n+            }\n+        }\n+        else {\n+            None\n         }\n-\n-        n\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        use ops::RangeInclusive::*;\n-\n-        match self.range {\n-            Empty { .. } => (0, Some(0)),\n-\n-            NonEmpty { ref start, ref end } =>\n-                match Step::steps_between(start,\n-                                          end,\n-                                          &self.step_by) {\n-                    Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n-                    None       => (0, None)\n-                }\n+        match Step::steps_between(&self.range.start,\n+                                  &self.range.end,\n+                                  &self.step_by) {\n+            Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n+            None       => (0, None)\n         }\n     }\n }\n@@ -583,56 +557,31 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> where\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        use ops::RangeInclusive::*;\n-\n-        // this function has a sort of odd structure due to borrowck issues\n-        // we may need to replace self, so borrows of self.start and self.end need to end early\n-\n-        let (finishing, n) = match *self {\n-            Empty { .. } => (None, None), // empty iterators yield no values\n-\n-            NonEmpty { ref mut start, ref mut end } => {\n-                if start == end {\n-                    (Some(end.replace_one()), Some(start.replace_one()))\n-                } else if start < end {\n-                    let mut n = start.add_one();\n-                    mem::swap(&mut n, start);\n-\n-                    // if the iterator is done iterating, it will change from\n-                    // NonEmpty to Empty to avoid unnecessary drops or clones,\n-                    // we'll reuse either start or end (they are equal now, so\n-                    // it doesn't matter which) to pull out end, we need to swap\n-                    // something back in\n-\n-                    (if n == *end { Some(end.replace_one()) } else { None },\n-                    // ^ are we done yet?\n-                    Some(n)) // < the value to output\n-                } else {\n-                    (Some(start.replace_one()), None)\n-                }\n-            }\n-        };\n-\n-        // turn into an empty iterator if this is the last value\n-        if let Some(end) = finishing {\n-            *self = Empty { at: end };\n+        use cmp::Ordering::*;\n+\n+        match self.start.partial_cmp(&self.end) {\n+            Some(Less) => {\n+                let n = self.start.add_one();\n+                Some(mem::replace(&mut self.start, n))\n+            },\n+            Some(Equal) => {\n+                let last = self.start.replace_one();\n+                self.end.replace_zero();\n+                Some(last)\n+            },\n+            _ => None,\n         }\n-\n-        n\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        use ops::RangeInclusive::*;\n-\n-        match *self {\n-            Empty { .. } => (0, Some(0)),\n+        if !(self.start <= self.end) {\n+            return (0, Some(0));\n+        }\n \n-            NonEmpty { ref start, ref end } =>\n-                match Step::steps_between_by_one(start, end) {\n-                    Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n-                    None => (0, None),\n-                }\n+        match Step::steps_between_by_one(&self.start, &self.end) {\n+            Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n+            None => (0, None),\n         }\n     }\n }\n@@ -644,33 +593,20 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n-        use ops::RangeInclusive::*;\n-\n-        // see Iterator::next for comments\n-\n-        let (finishing, n) = match *self {\n-            Empty { .. } => return None,\n-\n-            NonEmpty { ref mut start, ref mut end } => {\n-                if start == end {\n-                    (Some(start.replace_one()), Some(end.replace_one()))\n-                } else if start < end {\n-                    let mut n = end.sub_one();\n-                    mem::swap(&mut n, end);\n-\n-                    (if n == *start { Some(start.replace_one()) } else { None },\n-                     Some(n))\n-                } else {\n-                    (Some(end.replace_one()), None)\n-                }\n-            }\n-        };\n-\n-        if let Some(start) = finishing {\n-            *self = Empty { at: start };\n+        use cmp::Ordering::*;\n+\n+        match self.start.partial_cmp(&self.end) {\n+            Some(Less) => {\n+                let n = self.end.sub_one();\n+                Some(mem::replace(&mut self.end, n))\n+            },\n+            Some(Equal) => {\n+                let last = self.end.replace_zero();\n+                self.start.replace_one();\n+                Some(last)\n+            },\n+            _ => None,\n         }\n-\n-        n\n     }\n }\n "}, {"sha": "6602fccd5898282fd59d94450cfa2d07603dd45e", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -120,7 +120,7 @@ pub trait Sized {\n /// [coerceunsized]: ../ops/trait.CoerceUnsized.html\n /// [rc]: ../../std/rc/struct.Rc.html\n /// [RFC982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n-\n+/// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"unsize\", issue = \"27732\")]\n #[lang=\"unsize\"]\n pub trait Unsize<T: ?Sized> {"}, {"sha": "c76cff4dc34d10bf506188bdd29e79de45e5c9a7", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 52, "deletions": 32, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -153,6 +153,13 @@ use marker::Unsize;\n /// The `Drop` trait is used to run some code when a value goes out of scope.\n /// This is sometimes called a 'destructor'.\n ///\n+/// When a value goes out of scope, if it implements this trait, it will have\n+/// its `drop` method called. Then any fields the value contains will also\n+/// be dropped recursively.\n+///\n+/// Because of the recursive dropping, you do not need to implement this trait\n+/// unless your type needs its own destructor logic.\n+///\n /// # Examples\n ///\n /// A trivial implementation of `Drop`. The `drop` method is called when `_x`\n@@ -171,6 +178,43 @@ use marker::Unsize;\n ///     let _x = HasDrop;\n /// }\n /// ```\n+///\n+/// Showing the recursive nature of `Drop`. When `outer` goes out of scope, the\n+/// `drop` method will be called first for `Outer`, then for `Inner`. Therefore\n+/// `main` prints `Dropping Outer!` and then `Dropping Inner!`.\n+///\n+/// ```\n+/// struct Inner;\n+/// struct Outer(Inner);\n+///\n+/// impl Drop for Inner {\n+///     fn drop(&mut self) {\n+///         println!(\"Dropping Inner!\");\n+///     }\n+/// }\n+///\n+/// impl Drop for Outer {\n+///     fn drop(&mut self) {\n+///         println!(\"Dropping Outer!\");\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     let _x = Outer(Inner);\n+/// }\n+/// ```\n+///\n+/// Because variables are dropped in the reverse order they are declared,\n+/// `main` will print `Declared second!` and then `Declared first!`.\n+///\n+/// ```\n+/// struct PrintOnDrop(&'static str);\n+///\n+/// fn main() {\n+///     let _first = PrintOnDrop(\"Declared first!\");\n+///     let _second = PrintOnDrop(\"Declared second!\");\n+/// }\n+/// ```\n #[lang = \"drop\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Drop {\n@@ -2271,7 +2315,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// ```\n /// #![feature(inclusive_range,inclusive_range_syntax)]\n /// fn main() {\n-///     assert_eq!((3...5), std::ops::RangeInclusive::NonEmpty{ start: 3, end: 5 });\n+///     assert_eq!((3...5), std::ops::RangeInclusive{ start: 3, end: 5 });\n ///     assert_eq!(3+4+5, (3...5).sum());\n ///\n ///     let arr = [0, 1, 2, 3];\n@@ -2281,45 +2325,23 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// ```\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-pub enum RangeInclusive<Idx> {\n-    /// Empty range (iteration has finished)\n+pub struct RangeInclusive<Idx> {\n+    /// The lower bound of the range (inclusive).\n     #[unstable(feature = \"inclusive_range\",\n                reason = \"recently added, follows RFC\",\n                issue = \"28237\")]\n-    Empty {\n-        /// The point at which iteration finished\n-        #[unstable(feature = \"inclusive_range\",\n-                   reason = \"recently added, follows RFC\",\n-                   issue = \"28237\")]\n-        at: Idx\n-    },\n-    /// Non-empty range (iteration will yield value(s))\n+    pub start: Idx,\n+    /// The upper bound of the range (inclusive).\n     #[unstable(feature = \"inclusive_range\",\n                reason = \"recently added, follows RFC\",\n                issue = \"28237\")]\n-    NonEmpty {\n-        /// The lower bound of the range (inclusive).\n-        #[unstable(feature = \"inclusive_range\",\n-                   reason = \"recently added, follows RFC\",\n-                   issue = \"28237\")]\n-        start: Idx,\n-        /// The upper bound of the range (inclusive).\n-        #[unstable(feature = \"inclusive_range\",\n-                   reason = \"recently added, follows RFC\",\n-                   issue = \"28237\")]\n-        end: Idx,\n-    },\n+    pub end: Idx,\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        use self::RangeInclusive::*;\n-\n-        match *self {\n-            Empty { ref at } => write!(fmt, \"[empty range @ {:?}]\", at),\n-            NonEmpty { ref start, ref end } => write!(fmt, \"{:?}...{:?}\", start, end),\n-        }\n+        write!(fmt, \"{:?}...{:?}\", self.start, self.end)\n     }\n }\n \n@@ -2341,9 +2363,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// }\n     /// ```\n     pub fn contains(&self, item: Idx) -> bool {\n-        if let &RangeInclusive::NonEmpty{ref start, ref end} = self {\n-            (*start <= item) && (item <= *end)\n-        } else { false }\n+        self.start <= item && item <= self.end\n     }\n }\n "}, {"sha": "cef3682fd94d74859a69f0207b2796555520154a", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 27, "deletions": 40, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -981,95 +981,82 @@ impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n \n     #[inline]\n     fn get(self, slice: &[T]) -> Option<&[T]> {\n-        match self {\n-            ops::RangeInclusive::Empty { .. } => Some(&[]),\n-            ops::RangeInclusive::NonEmpty { end, .. } if end == usize::max_value() => None,\n-            ops::RangeInclusive::NonEmpty { start, end } => (start..end + 1).get(slice),\n-        }\n+        if self.end == usize::max_value() { None }\n+        else { (self.start..self.end + 1).get(slice) }\n     }\n \n     #[inline]\n     fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {\n-        match self {\n-            ops::RangeInclusive::Empty { .. } => Some(&mut []),\n-            ops::RangeInclusive::NonEmpty { end, .. } if end == usize::max_value() => None,\n-            ops::RangeInclusive::NonEmpty { start, end } => (start..end + 1).get_mut(slice),\n-        }\n+        if self.end == usize::max_value() { None }\n+        else { (self.start..self.end + 1).get_mut(slice) }\n     }\n \n     #[inline]\n     unsafe fn get_unchecked(self, slice: &[T]) -> &[T] {\n-        match self {\n-            ops::RangeInclusive::Empty { .. } => &[],\n-            ops::RangeInclusive::NonEmpty { start, end } => (start..end + 1).get_unchecked(slice),\n-        }\n+        (self.start..self.end + 1).get_unchecked(slice)\n     }\n \n     #[inline]\n     unsafe fn get_unchecked_mut(self, slice: &mut [T]) -> &mut [T] {\n-        match self {\n-            ops::RangeInclusive::Empty { .. } => &mut [],\n-            ops::RangeInclusive::NonEmpty { start, end } => {\n-                (start..end + 1).get_unchecked_mut(slice)\n-            }\n-        }\n+        (self.start..self.end + 1).get_unchecked_mut(slice)\n     }\n \n     #[inline]\n     fn index(self, slice: &[T]) -> &[T] {\n-        match self {\n-            ops::RangeInclusive::Empty { .. } => &[],\n-            ops::RangeInclusive::NonEmpty { end, .. } if end == usize::max_value() => {\n-                panic!(\"attempted to index slice up to maximum usize\");\n-            },\n-            ops::RangeInclusive::NonEmpty { start, end } => (start..end + 1).index(slice),\n-        }\n+        assert!(self.end != usize::max_value(),\n+            \"attempted to index slice up to maximum usize\");\n+        (self.start..self.end + 1).index(slice)\n     }\n \n     #[inline]\n     fn index_mut(self, slice: &mut [T]) -> &mut [T] {\n-        match self {\n-            ops::RangeInclusive::Empty { .. } => &mut [],\n-            ops::RangeInclusive::NonEmpty { end, .. } if end == usize::max_value() => {\n-                panic!(\"attempted to index slice up to maximum usize\");\n-            },\n-            ops::RangeInclusive::NonEmpty { start, end } => (start..end + 1).index_mut(slice),\n-        }\n+        assert!(self.end != usize::max_value(),\n+            \"attempted to index slice up to maximum usize\");\n+        (self.start..self.end + 1).index_mut(slice)\n     }\n }\n \n+#[cfg(stage0)] // The bootstrap compiler has a different `...` desugar\n+fn inclusive(start: usize, end: usize) -> ops::RangeInclusive<usize> {\n+    ops::RangeInclusive { start, end }\n+}\n+#[cfg(not(stage0))]\n+fn inclusive(start: usize, end: usize) -> ops::RangeInclusive<usize> {\n+    start...end\n+}\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n     type Output = [T];\n \n     #[inline]\n     fn get(self, slice: &[T]) -> Option<&[T]> {\n-        (0...self.end).get(slice)\n+        inclusive(0, self.end).get(slice)\n     }\n \n     #[inline]\n     fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {\n-        (0...self.end).get_mut(slice)\n+        inclusive(0, self.end).get_mut(slice)\n     }\n \n     #[inline]\n     unsafe fn get_unchecked(self, slice: &[T]) -> &[T] {\n-        (0...self.end).get_unchecked(slice)\n+        inclusive(0, self.end).get_unchecked(slice)\n     }\n \n     #[inline]\n     unsafe fn get_unchecked_mut(self, slice: &mut [T]) -> &mut [T] {\n-        (0...self.end).get_unchecked_mut(slice)\n+        inclusive(0, self.end).get_unchecked_mut(slice)\n     }\n \n     #[inline]\n     fn index(self, slice: &[T]) -> &[T] {\n-        (0...self.end).index(slice)\n+        inclusive(0, self.end).index(slice)\n     }\n \n     #[inline]\n     fn index_mut(self, slice: &mut [T]) -> &mut [T] {\n-        (0...self.end).index_mut(slice)\n+        inclusive(0, self.end).index_mut(slice)\n     }\n }\n "}, {"sha": "547a4899c7118c85e9bf6ceffaaab190401ac988", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 19, "deletions": 40, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -1724,15 +1724,12 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeInclusive<usize>) -> &str {\n-            match index {\n-                ops::RangeInclusive::Empty { .. } => \"\",\n-                ops::RangeInclusive::NonEmpty { end, .. } if end == usize::max_value() =>\n-                    panic!(\"attempted to index slice up to maximum usize\"),\n-                ops::RangeInclusive::NonEmpty { start, end } =>\n-                    self.index(start .. end+1)\n-            }\n+            assert!(index.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n+            self.index(index.start .. index.end+1)\n         }\n     }\n+\n     #[unstable(feature = \"inclusive_range\",\n                reason = \"recently added, follows RFC\",\n                issue = \"28237\")]\n@@ -1741,7 +1738,9 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeToInclusive<usize>) -> &str {\n-            self.index(0...index.end)\n+            assert!(index.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n+            self.index(.. index.end+1)\n         }\n     }\n \n@@ -1751,13 +1750,9 @@ mod traits {\n     impl ops::IndexMut<ops::RangeInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str {\n-            match index {\n-                ops::RangeInclusive::Empty { .. } => &mut self[0..0], // `&mut \"\"` doesn't work\n-                ops::RangeInclusive::NonEmpty { end, .. } if end == usize::max_value() =>\n-                    panic!(\"attempted to index str up to maximum usize\"),\n-                    ops::RangeInclusive::NonEmpty { start, end } =>\n-                        self.index_mut(start .. end+1)\n-            }\n+            assert!(index.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n+            self.index_mut(index.start .. index.end+1)\n         }\n     }\n     #[unstable(feature = \"inclusive_range\",\n@@ -1766,7 +1761,9 @@ mod traits {\n     impl ops::IndexMut<ops::RangeToInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {\n-            self.index_mut(0...index.end)\n+            assert!(index.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n+            self.index_mut(.. index.end+1)\n         }\n     }\n \n@@ -1948,45 +1945,27 @@ mod traits {\n         type Output = str;\n         #[inline]\n         fn get(self, slice: &str) -> Option<&Self::Output> {\n-            match self {\n-                ops::RangeInclusive::Empty { .. } => 0..0,\n-                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n-            }.get(slice)\n+            (self.start..self.end+1).get(slice)\n         }\n         #[inline]\n         fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {\n-            match self {\n-                ops::RangeInclusive::Empty { .. } => 0..0,\n-                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n-            }.get_mut(slice)\n+            (self.start..self.end+1).get_mut(slice)\n         }\n         #[inline]\n         unsafe fn get_unchecked(self, slice: &str) -> &Self::Output {\n-            match self {\n-                ops::RangeInclusive::Empty { .. } => 0..0,\n-                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n-            }.get_unchecked(slice)\n+            (self.start..self.end+1).get_unchecked(slice)\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            match self {\n-                ops::RangeInclusive::Empty { .. } => 0..0,\n-                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n-            }.get_unchecked_mut(slice)\n+            (self.start..self.end+1).get_unchecked_mut(slice)\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n-            match self {\n-                ops::RangeInclusive::Empty { .. } => 0..0,\n-                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n-            }.index(slice)\n+            (self.start..self.end+1).index(slice)\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n-            match self {\n-                ops::RangeInclusive::Empty { .. } => 0..0,\n-                ops::RangeInclusive::NonEmpty { start, end } => start..end+1,\n-            }.index_mut(slice)\n+            (self.start..self.end+1).index_mut(slice)\n         }\n     }\n "}, {"sha": "8c4cd1d0c84583b20e961f9151c0e363686dbcac", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,6 +22,7 @@\n #![feature(fmt_internals)]\n #![feature(iterator_step_by)]\n #![feature(i128_type)]\n+#![feature(inclusive_range)]\n #![feature(iter_rfind)]\n #![feature(libc)]\n #![feature(nonzero)]"}, {"sha": "b81b3878c9d6e1d4c82a117f46107a17cf170b0b", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::ops::{Range, RangeFull, RangeFrom, RangeTo};\n+use core::ops::{Range, RangeFull, RangeFrom, RangeTo, RangeInclusive};\n \n // Test the Range structs without the syntactic sugar.\n \n@@ -47,3 +47,24 @@ fn test_full_range() {\n     // Not much to test.\n     let _ = RangeFull;\n }\n+\n+#[test]\n+fn test_range_inclusive() {\n+    let mut r = RangeInclusive { start: 1i8, end: 2 };\n+    assert_eq!(r.next(), Some(1));\n+    assert_eq!(r.next(), Some(2));\n+    assert_eq!(r.next(), None);\n+\n+    r = RangeInclusive { start: 127i8, end: 127 };\n+    assert_eq!(r.next(), Some(127));\n+    assert_eq!(r.next(), None);\n+\n+    r = RangeInclusive { start: -128i8, end: -128 };\n+    assert_eq!(r.next_back(), Some(-128));\n+    assert_eq!(r.next_back(), None);\n+\n+    // degenerate\n+    r = RangeInclusive { start: 1, end: -1 };\n+    assert_eq!(r.size_hint(), (0, Some(0)));\n+    assert_eq!(r.next(), None);\n+}\n\\ No newline at end of file"}, {"sha": "d359c69d3a092842e8868c63b03d9c3fa43b9d9d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -1934,13 +1934,13 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Range(ref e1, ref e2, lims) => {\n                 use syntax::ast::RangeLimits::*;\n \n-                let (path, variant) = match (e1, e2, lims) {\n-                    (&None, &None, HalfOpen) => (\"RangeFull\", None),\n-                    (&Some(..), &None, HalfOpen) => (\"RangeFrom\", None),\n-                    (&None, &Some(..), HalfOpen) => (\"RangeTo\", None),\n-                    (&Some(..), &Some(..), HalfOpen) => (\"Range\", None),\n-                    (&None, &Some(..), Closed) => (\"RangeToInclusive\", None),\n-                    (&Some(..), &Some(..), Closed) => (\"RangeInclusive\", Some(\"NonEmpty\")),\n+                let path = match (e1, e2, lims) {\n+                    (&None, &None, HalfOpen) => \"RangeFull\",\n+                    (&Some(..), &None, HalfOpen) => \"RangeFrom\",\n+                    (&None, &Some(..), HalfOpen) => \"RangeTo\",\n+                    (&Some(..), &Some(..), HalfOpen) => \"Range\",\n+                    (&None, &Some(..), Closed) => \"RangeToInclusive\",\n+                    (&Some(..), &Some(..), Closed) => \"RangeInclusive\",\n                     (_, &None, Closed) =>\n                         panic!(self.diagnostic().span_fatal(\n                             e.span, \"inclusive range with no end\")),\n@@ -1957,7 +1957,7 @@ impl<'a> LoweringContext<'a> {\n                 let is_unit = fields.is_empty();\n                 let unstable_span = self.allow_internal_unstable(\"...\", e.span);\n                 let struct_path =\n-                    iter::once(\"ops\").chain(iter::once(path)).chain(variant)\n+                    iter::once(\"ops\").chain(iter::once(path))\n                     .collect::<Vec<_>>();\n                 let struct_path = self.std_path(unstable_span, &struct_path, is_unit);\n                 let struct_path = hir::QPath::Resolved(None, P(struct_path));"}, {"sha": "c5f89e861fa131b759ba227ad2b4ac448143783a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -118,8 +118,7 @@ const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/mas\n fn abort_msg(err_count: usize) -> String {\n     match err_count {\n         0 => \"aborting with no errors (maybe a bug?)\".to_owned(),\n-        1 => \"aborting due to previous error\".to_owned(),\n-        e => format!(\"aborting due to {} previous errors\", e),\n+        _ => \"aborting due to previous error(s)\".to_owned(),\n     }\n }\n "}, {"sha": "f7191e49216375c6e21da99d2a94d2805f8c00cc", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -501,10 +501,7 @@ impl Handler {\n \n                 return;\n             }\n-            1 => s = \"aborting due to previous error\".to_string(),\n-            _ => {\n-                s = format!(\"aborting due to {} previous errors\", self.err_count.get());\n-            }\n+            _ => s = \"aborting due to previous error(s)\".to_string(),\n         }\n \n         panic!(self.fatal(&s));"}, {"sha": "a5a1b5e5f09191a62c25e3bd04b95335cb9b3f48", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -247,7 +247,9 @@ impl OsString {\n         self.inner.shrink_to_fit()\n     }\n \n-    /// Converts this `OsString` into a boxed `OsStr`.\n+    /// Converts this `OsString` into a boxed [`OsStr`].\n+    ///\n+    /// [`OsStr`]: struct.OsStr.html\n     ///\n     /// # Examples\n     ///\n@@ -482,12 +484,13 @@ impl OsStr {\n     /// Returns the length of this `OsStr`.\n     ///\n     /// Note that this does **not** return the number of bytes in this string\n-    /// as, for example, OS strings on Windows are encoded as a list of `u16`\n+    /// as, for example, OS strings on Windows are encoded as a list of [`u16`]\n     /// rather than a list of bytes. This number is simply useful for passing to\n     /// other methods like [`OsString::with_capacity`] to avoid reallocations.\n     ///\n     /// See `OsStr` introduction for more information about encoding.\n     ///\n+    /// [`u16`]: ../primitive.u16.html\n     /// [`OsString::with_capacity`]: struct.OsString.html#method.with_capacity\n     ///\n     /// # Examples\n@@ -506,7 +509,10 @@ impl OsStr {\n         self.inner.inner.len()\n     }\n \n-    /// Converts a `Box<OsStr>` into an `OsString` without copying or allocating.\n+    /// Converts a [`Box`]`<OsStr>` into an [`OsString`] without copying or allocating.\n+    ///\n+    /// [`Box`]: ../boxed/struct.Box.html\n+    /// [`OsString`]: struct.OsString.html\n     #[unstable(feature = \"into_boxed_os_str\", issue = \"40380\")]\n     pub fn into_os_string(self: Box<OsStr>) -> OsString {\n         let inner: Box<Slice> = unsafe { mem::transmute(self) };"}, {"sha": "06fd838ea06d966b047f8e1a257d1acd253433cd", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -35,6 +35,8 @@ fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {\n     use sys_common;\n     use sys_common::thread_info;\n     use thread::Thread;\n+    #[cfg(not(feature = \"backtrace\"))]\n+    use mem;\n \n     sys::init();\n \n@@ -53,9 +55,12 @@ fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n+        #[cfg(feature = \"backtrace\")]\n         let res = panic::catch_unwind(|| {\n             ::sys_common::backtrace::__rust_begin_short_backtrace(main)\n         });\n+        #[cfg(not(feature = \"backtrace\"))]\n+        let res = panic::catch_unwind(mem::transmute::<_, fn()>(main));\n         sys_common::cleanup();\n         res.is_err()\n     };"}, {"sha": "296773d20f6140542cfdcfe8e7b25e4af1ee402a", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -1,29 +1,12 @@\n-/* Copyright (c) 2010-2011 Dmitry Vyukov. All rights reserved.\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- *    1. Redistributions of source code must retain the above copyright notice,\n- *       this list of conditions and the following disclaimer.\n- *\n- *    2. Redistributions in binary form must reproduce the above copyright\n- *       notice, this list of conditions and the following disclaimer in the\n- *       documentation and/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY DMITRY VYUKOV \"AS IS\" AND ANY EXPRESS OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n- * SHALL DMITRY VYUKOV OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\n- * The views and conclusions contained in the software and documentation are\n- * those of the authors and should not be interpreted as representing official\n- * policies, either expressed or implied, of Dmitry Vyukov.\n- */\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n \n //! A mostly lock-free multi-producer, single consumer queue.\n //!"}, {"sha": "1148bc66fbabbaa0d0e998f6af203e1f84277588", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -1,38 +1,21 @@\n-/* Copyright (c) 2010-2011 Dmitry Vyukov. All rights reserved.\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- *    1. Redistributions of source code must retain the above copyright notice,\n- *       this list of conditions and the following disclaimer.\n- *\n- *    2. Redistributions in binary form must reproduce the above copyright\n- *       notice, this list of conditions and the following disclaimer in the\n- *       documentation and/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY DMITRY VYUKOV \"AS IS\" AND ANY EXPRESS OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\n- * SHALL DMITRY VYUKOV OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\n- * The views and conclusions contained in the software and documentation are\n- * those of the authors and should not be interpreted as representing official\n- * policies, either expressed or implied, of Dmitry Vyukov.\n- */\n-\n-// http://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n \n //! A single-producer single-consumer concurrent queue\n //!\n //! This module contains the implementation of an SPSC queue which can be used\n //! concurrently between two threads. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n+// http://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n+\n use alloc::boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;"}, {"sha": "cacd84e21025f5dfaef88eeceec7593311411a17", "filename": "src/libstd/sys/redox/thread_local.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -64,3 +64,8 @@ pub unsafe fn set(key: Key, value: *mut u8) {\n pub unsafe fn destroy(key: Key) {\n     keys().remove(&key);\n }\n+\n+#[inline]\n+pub fn requires_synchronized_create() -> bool {\n+    false\n+}"}, {"sha": "d0e3b00d75fac43fdf2ad5f869e0f1add11be067", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -359,9 +359,12 @@ impl Builder {\n             }\n             unsafe {\n                 thread_info::set(imp::guard::current(), their_thread);\n+                #[cfg(feature = \"backtrace\")]\n                 let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n                     ::sys_common::backtrace::__rust_begin_short_backtrace(f)\n                 }));\n+                #[cfg(not(feature = \"backtrace\"))]\n+                let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n                 *their_packet.get() = Some(try_result);\n             }\n         };\n@@ -394,6 +397,26 @@ impl Builder {\n /// want to specify the stack size or the name of the thread, use this API\n /// instead.\n ///\n+/// As you can see in the signature of `spawn` there are two constraints on\n+/// both the closure given to `spawn` and its return value, let's explain them:\n+///\n+/// - The `'static` constraint means that the closure and its return value\n+///   must have a lifetime of the whole program execution. The reason for this\n+///   is that threads can `detach` and outlive the lifetime they have been\n+///   created in.\n+///   Indeed if the thread, and by extension its return value, can outlive their\n+///   caller, we need to make sure that they will be valid afterwards, and since\n+///   we *can't* know when it will return we need to have them valid as long as\n+///   possible, that is until the end of the program, hence the `'static`\n+///   lifetime.\n+/// - The [`Send`] constraint is because the closure will need to be passed\n+///   *by value* from the thread where it is spawned to the new thread. Its\n+///   return value will need to be passed from the new thread to the thread\n+///   where it is `join`ed.\n+///   As a reminder, the [`Send`] marker trait, expresses that it is safe to be\n+///   passed from thread to thread. [`Sync`] expresses that it is safe to have a\n+///   reference be passed from thread to thread.\n+///\n /// # Panics\n ///\n /// Panics if the OS fails to create a thread; use [`Builder::spawn`]\n@@ -460,6 +483,8 @@ impl Builder {\n /// [`panic`]: ../../std/macro.panic.html\n /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n /// [`Builder`]: ../../std/thread/struct.Builder.html\n+/// [`Send`]: ../../std/marker/trait.Send.html\n+/// [`Sync`]: ../../std/marker/trait.Sync.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static"}, {"sha": "8e63e219c42c19924914ce01bf1661dc9cfb68aa", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -320,7 +320,7 @@ impl Attribute {\n     pub fn parse<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, T>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n-        let mut parser = Parser::new(sess, self.tokens.clone(), None, false);\n+        let mut parser = Parser::new(sess, self.tokens.clone(), None, false, false);\n         let result = f(&mut parser)?;\n         if parser.token != token::Eof {\n             parser.unexpected()?;"}, {"sha": "0b6a2eb536a20d7769721ee16a07f4de716ebefd", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -418,9 +418,13 @@ fn inner_parse_loop(sess: &ParseSess,\n     Success(())\n }\n \n-pub fn parse(sess: &ParseSess, tts: TokenStream, ms: &[TokenTree], directory: Option<Directory>)\n+pub fn parse(sess: &ParseSess,\n+             tts: TokenStream,\n+             ms: &[TokenTree],\n+             directory: Option<Directory>,\n+             recurse_into_modules: bool)\n              -> NamedParseResult {\n-    let mut parser = Parser::new(sess, tts, directory, true);\n+    let mut parser = Parser::new(sess, tts, directory, recurse_into_modules, true);\n     let mut cur_eis = SmallVector::one(initial_matcher_pos(ms.to_owned(), parser.span.lo));\n     let mut next_eis = Vec::new(); // or proceed normally\n "}, {"sha": "73494d47fee9b9a59dee95d448e95e43de1e55ca", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -121,7 +121,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                     path: cx.current_expansion.module.directory.clone(),\n                     ownership: cx.current_expansion.directory_ownership,\n                 };\n-                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), false);\n+                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false);\n                 p.root_module_name = cx.current_expansion.module.mod_path.last()\n                     .map(|id| id.name.as_str().to_string());\n \n@@ -192,7 +192,7 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         ast::ItemKind::MacroDef(ref body) => body.clone().into(),\n         _ => unreachable!(),\n     };\n-    let argument_map = match parse(sess, body, &argument_gram, None) {\n+    let argument_map = match parse(sess, body, &argument_gram, None, true) {\n         Success(m) => m,\n         Failure(sp, tok) => {\n             let s = parse_failure_msg(tok);"}, {"sha": "83a164bdb9693c66b67cd46300331d0839f703a4", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -238,7 +238,7 @@ pub fn check_for_substitution<'a>(reader: &StringReader<'a>,\n         match ASCII_ARRAY.iter().find(|&&(c, _)| c == ascii_char) {\n             Some(&(ascii_char, ascii_name)) => {\n                 let msg =\n-                    format!(\"unicode character '{}' ({}) looks much like '{}' ({}), but it's not\",\n+                    format!(\"unicode character '{}' ({}) looks like '{}' ({}), but it's not\",\n                             ch, u_name, ascii_char, ascii_name);\n                 err.span_help(span, &msg);\n             },"}, {"sha": "3a68a6ba7646c98de89a8cd8354b4db1fab175ef", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -149,7 +149,9 @@ pub fn parse_stream_from_source_str(name: String, source: String, sess: &ParseSe\n // Create a new parser from a source string\n pub fn new_parser_from_source_str(sess: &ParseSess, name: String, source: String)\n                                       -> Parser {\n-    filemap_to_parser(sess, sess.codemap().new_filemap(name, source))\n+    let mut parser = filemap_to_parser(sess, sess.codemap().new_filemap(name, source));\n+    parser.recurse_into_file_modules = false;\n+    parser\n }\n \n /// Create a new parser, handling errors as appropriate\n@@ -218,7 +220,7 @@ pub fn filemap_to_stream(sess: &ParseSess, filemap: Rc<FileMap>) -> TokenStream\n \n /// Given stream and the `ParseSess`, produce a parser\n pub fn stream_to_parser(sess: &ParseSess, stream: TokenStream) -> Parser {\n-    Parser::new(sess, stream, None, false)\n+    Parser::new(sess, stream, None, true, false)\n }\n \n /// Parse a string representing a character literal into its final form.\n@@ -1032,4 +1034,23 @@ mod tests {\n             Err(_) => panic!(\"could not get snippet\"),\n         }\n     }\n+\n+    // This tests that when parsing a string (rather than a file) we don't try\n+    // and read in a file for a module declaration and just parse a stub.\n+    // See `recurse_into_file_modules` in the parser.\n+    #[test]\n+    fn out_of_line_mod() {\n+        let sess = ParseSess::new(FilePathMapping::empty());\n+        let item = parse_item_from_source_str(\n+            \"foo\".to_owned(),\n+            \"mod foo { struct S; mod this_does_not_exist; }\".to_owned(),\n+            &sess,\n+        ).unwrap().unwrap();\n+\n+        if let ast::ItemKind::Mod(ref m) = item.node {\n+            assert!(m.items.len() == 2);\n+        } else {\n+            panic!();\n+        }\n+    }\n }"}, {"sha": "c28f678cb5197a84f62426c4bdfc5f8fdfb3d485", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -179,6 +179,8 @@ pub struct Parser<'a> {\n     pub obsolete_set: HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n     pub directory: Directory,\n+    /// Whether to parse sub-modules in other files.\n+    pub recurse_into_file_modules: bool,\n     /// Name of the root module this parser originated from. If `None`, then the\n     /// name is not known. This does not change while the parser is descending\n     /// into modules, and sub-parsers have new values for this name.\n@@ -190,6 +192,7 @@ pub struct Parser<'a> {\n     pub cfg_mods: bool,\n }\n \n+\n struct TokenCursor {\n     frame: TokenCursorFrame,\n     stack: Vec<TokenCursorFrame>,\n@@ -439,6 +442,7 @@ impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess,\n                tokens: TokenStream,\n                directory: Option<Directory>,\n+               recurse_into_file_modules: bool,\n                desugar_doc_comments: bool)\n                -> Self {\n         let mut parser = Parser {\n@@ -450,6 +454,7 @@ impl<'a> Parser<'a> {\n             prev_token_kind: PrevTokenKind::Other,\n             restrictions: Restrictions::empty(),\n             obsolete_set: HashSet::new(),\n+            recurse_into_file_modules: recurse_into_file_modules,\n             directory: Directory { path: PathBuf::new(), ownership: DirectoryOwnership::Owned },\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n@@ -467,12 +472,14 @@ impl<'a> Parser<'a> {\n         let tok = parser.next_tok();\n         parser.token = tok.tok;\n         parser.span = tok.sp;\n+\n         if let Some(directory) = directory {\n             parser.directory = directory;\n         } else if parser.span != syntax_pos::DUMMY_SP {\n             parser.directory.path = PathBuf::from(sess.codemap().span_to_filename(parser.span));\n             parser.directory.path.pop();\n         }\n+\n         parser.process_potential_macro_variable();\n         parser\n     }\n@@ -3921,6 +3928,7 @@ impl<'a> Parser<'a> {\n                 mem::replace(&mut self.directory.ownership, DirectoryOwnership::UnownedViaBlock);\n             let item = self.parse_item_(attrs.clone(), false, true)?;\n             self.directory.ownership = old_directory_ownership;\n+\n             match item {\n                 Some(i) => Stmt {\n                     id: ast::DUMMY_NODE_ID,\n@@ -5254,7 +5262,7 @@ impl<'a> Parser<'a> {\n         let id = self.parse_ident()?;\n         if self.check(&token::Semi) {\n             self.bump();\n-            if in_cfg {\n+            if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n                 let ModulePathSuccess { path, directory_ownership, warn } =\n                     self.submod_path(id, &outer_attrs, id_span)?;\n@@ -5281,10 +5289,12 @@ impl<'a> Parser<'a> {\n         } else {\n             let old_directory = self.directory.clone();\n             self.push_directory(id, &outer_attrs);\n+\n             self.expect(&token::OpenDelim(token::Brace))?;\n             let mod_inner_lo = self.span;\n             let attrs = self.parse_inner_attributes()?;\n             let module = self.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)?;\n+\n             self.directory = old_directory;\n             Ok((id, ItemKind::Mod(module), Some(attrs)))\n         }\n@@ -5347,7 +5357,8 @@ impl<'a> Parser<'a> {\n     fn submod_path(&mut self,\n                    id: ast::Ident,\n                    outer_attrs: &[ast::Attribute],\n-                   id_sp: Span) -> PResult<'a, ModulePathSuccess> {\n+                   id_sp: Span)\n+                   -> PResult<'a, ModulePathSuccess> {\n         if let Some(path) = Parser::submod_path_from_attr(outer_attrs, &self.directory.path) {\n             return Ok(ModulePathSuccess {\n                 directory_ownership: match path.file_name().and_then(|s| s.to_str()) {"}, {"sha": "339e7c0b628adcf5a9c9298cd93423c138ae20a5", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -109,7 +109,7 @@ impl TokenTree {\n             path: cx.current_expansion.module.directory.clone(),\n             ownership: cx.current_expansion.directory_ownership,\n         };\n-        macro_parser::parse(cx.parse_sess(), tts, mtch, Some(directory))\n+        macro_parser::parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n     }\n \n     /// Check if this TokenTree is equal to the other, regardless of span information."}, {"sha": "eeede4b8aa13c9ed7826b35fe3ceb63f7ca46c27", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-proc_macro.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-proc_macro.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr_proc_macro.rs\n-// gate-test-proc_macro\n #![feature(use_extern_macros)]\n \n extern crate attr_proc_macro;\n@@ -21,4 +20,4 @@ struct Foo;\n \n fn main() {\n     let _ = Foo;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "77f61ba47b005ebe9b077ec302f412ba0a2a2e11", "filename": "src/test/compile-fail/feature-gate-global_asm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fcompile-fail%2Ffeature-gate-global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fcompile-fail%2Ffeature-gate-global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-global_asm.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-global_asm\n-\n global_asm!(\"\"); //~ ERROR `global_asm!` is not stable\n \n fn main() {}"}, {"sha": "1bdeb121a55d5ed555246cdf69d2d4a1448dc694", "filename": "src/test/parse-fail/unicode-chars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fparse-fail%2Funicode-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fparse-fail%2Funicode-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Funicode-chars.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n // compile-flags: -Z parse-only\n-// ignore-tidy-linelength\n \n fn main() {\n     let y = 0\u037e\n     //~^ ERROR unknown start of token: \\u{37e}\n-    //~^^ HELP unicode character '\u037e' (Greek Question Mark) looks much like ';' (Semicolon), but it's not\n+    //~^^ HELP unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), but it's not\n }"}, {"sha": "372d4a8b732acfb44151cd560e3d489653ffd179", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -82,7 +82,7 @@ pub fn main() {\n     short.next();\n     assert_eq!(long.size_hint(), (255, Some(255)));\n     assert_eq!(short.size_hint(), (0, Some(0)));\n-    assert_eq!(short, RangeInclusive::Empty { at: 42 });\n+    assert_eq!(short, 1...0);\n \n     assert_eq!(long.len(), 255);\n     assert_eq!(short.len(), 0);\n@@ -97,28 +97,28 @@ pub fn main() {\n     for i in 3...251 {\n         assert_eq!(long.next(), Some(i));\n     }\n-    assert_eq!(long, RangeInclusive::Empty { at: 251 });\n+    assert_eq!(long, 1...0);\n \n     // check underflow\n     let mut narrow = 1...0;\n     assert_eq!(narrow.next_back(), None);\n-    assert_eq!(narrow, RangeInclusive::Empty { at: 0 });\n+    assert_eq!(narrow, 1...0);\n     let mut zero = 0u8...0;\n     assert_eq!(zero.next_back(), Some(0));\n     assert_eq!(zero.next_back(), None);\n-    assert_eq!(zero, RangeInclusive::Empty { at: 0 });\n+    assert_eq!(zero, 1...0);\n     let mut high = 255u8...255;\n     assert_eq!(high.next_back(), Some(255));\n     assert_eq!(high.next_back(), None);\n-    assert_eq!(high, RangeInclusive::Empty { at: 255 });\n+    assert_eq!(high, 1...0);\n \n     // what happens if you have a nonsense range?\n     let mut nonsense = 10...5;\n     assert_eq!(nonsense.next(), None);\n-    assert_eq!(nonsense, RangeInclusive::Empty { at: 10 });\n+    assert_eq!(nonsense, 10...5);\n \n     // output\n     assert_eq!(format!(\"{:?}\", 0...10), \"0...10\");\n     assert_eq!(format!(\"{:?}\", ...10), \"...10\");\n-    assert_eq!(format!(\"{:?}\", long), \"[empty range @ 251]\");\n+    assert_eq!(format!(\"{:?}\", long), \"1...0\");\n }"}, {"sha": "a30d4cbd64c22e84e4362a5230c496d944c63568", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n 15 |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured outer variable in an `Fn` closure\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a13971d32de084bc50f950fcd466c44074828eb8", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n 21 |         y.into_iter();\n    |         ^ cannot move out of captured outer variable in an `Fn` closure\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "0cb264ff35e4eb0ffd5b491e6611a19b2c38d92d", "filename": "src/test/ui/check_match/issue-35609.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -46,5 +46,5 @@ error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 mor\n 49 |     match Some(A) {\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n \n-error: aborting due to 8 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "cddc7df85ae3e763d8336c0705a015323cb4010d", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error: expected token: `,`\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "1c32ce44109ed2002e047b0bc9414d61a27ef45d", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0592]: duplicate definitions with name `f`\n 15 | impl C { fn f() {} }\n    |          --------- other definition for `f`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "84e6e336b9343dfcad1ff05d48f97dade5f97f01", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`,\n 17 |     unsafe impl Send for &'static Foo { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "059215157ec52ba715e106d6bfecc11c8e6feceb", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: cannot borrow immutable local variable `x` as mutable\n 100 |     let y = &mut x;\n     |                  ^ cannot borrow mutably\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "dcc21672c56323b3c4d6f95505bf9a396463a9a8", "filename": "src/test/ui/codemap_tests/issue-11715.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n 101 | }\n     | - first borrow ends here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "5e611d42a1491236eadd99dfc2f5c75e1edd3640", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: cannot apply unary operator `!` to type `&'static str`\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "e2e0537226a92cff78795cff18bb17bb17c22eef", "filename": "src/test/ui/codemap_tests/one_line.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0499]: cannot borrow `v` as mutable more than once at a time\n    |     |      second mutable borrow occurs here\n    |     first mutable borrow occurs here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "0af8c06cfdae71c0bbaa57991bbde19c68450313", "filename": "src/test/ui/codemap_tests/overlapping_inherent_impls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -25,5 +25,5 @@ error[E0592]: duplicate definitions with name `baz`\n 43 |     fn baz(&self) {}\n    |     ---------------- other definition for `baz`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "9778015766ce55489807c5376526b84e30a1a04c", "filename": "src/test/ui/codemap_tests/overlapping_spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n    |         |    hint: to prevent move, use `ref _s` or `ref mut _s`\n    |         cannot move out of here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a3b76159b463fa9d3de9db2a82740d40d286e192", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0425]: cannot find value `bar` in this scope\n 14 | \\tbar;\n    | \\t^^^ not found in this scope\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a6e3cf8b869f06b587906907e2102018ba1918df", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, aapcs\n 11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "28a99e58eca89d954f8aedb62625a15eb96ea9ac", "filename": "src/test/ui/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion-missing-tail-expected-type.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -15,5 +15,5 @@ help: consider removing this semicolon:\n 14 |     x + 1;\n    |          ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "63c48ffe26b28478f36a2149c9dc29b26c5e3411", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ error[E0276]: impl has stricter requirements than trait\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "7adcc66d75c892b2eee2c83344b9ddc2eef7e855", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0276]: impl has stricter requirements than trait\n 22 | |     }\n    | |_____^ impl has extra requirement `'a: 'b`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a29a292ac655656eaa3f1559ff9e0f3d0fbf9adb", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0276]: impl has stricter requirements than trait\n 22 |     fn foo() where 'a: 'b { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "04de54cd05de215017b8fcf7d49680cab1eb33b9", "filename": "src/test/ui/compare-method/region-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ error[E0276]: impl has stricter requirements than trait\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "b5e9c89f2f591293daaac81bc912b65b7a01fea8", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0053]: method `b` has an incompatible type for trait\n    = note: expected type `fn(&E, F) -> F`\n               found type `fn(&E, G) -> G`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "c4a4921289b3b56100d0da4946316f603b470af2", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0276]: impl has stricter requirements than trait\n 25 |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() } //~ ERROR E0276\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: std::marker::Sync`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "6374b83e7946a10402671a5cec8b74832a48d3a0", "filename": "src/test/ui/compare-method/traits-misc-mismatch-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-1.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -61,5 +61,5 @@ error[E0276]: impl has stricter requirements than trait\n 76 |     fn method<G: Getter<usize>>(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `G: Getter<usize>`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "7ff2d93d820dbde51ca05bac13433999749ee20b", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0276]: impl has stricter requirements than trait\n 26 | |     }\n    | |_____^ impl has extra requirement `U: Iterator<B>`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "3642a702a82955838cafc8b01e27df0e3cf247d1", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: invalid reference to argument `0` (no arguments given)\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "bcf00df98323bd96a98b2f463bdc9c16698975ad", "filename": "src/test/ui/did_you_mean/E0178.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> Foo`\n 17 |     z: fn() -> Foo + 'a,\n    |        ^^^^^^^^^^^^^^^^ perhaps you forgot parentheses?\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "73b8e06183b25cf07732cffaae678c30989ff805", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n              <Bar as Foo<i32>>\n              <Bar as Foo<u8>>\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "e1e4e14b215c08617a251ae4253cc5c6b2270c29", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n              <Bar as Foo<u8>>\n            and 2 others\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "1bd8d5128337ac96d6fff5420232e759482a701f", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -15,5 +15,5 @@ error: cannot borrow immutable argument `self` as mutable\n 23 |         (&mut self).bar();\n    |               ^^^^ cannot borrow mutably\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "606d6b2b259861455ce179b65e710d9ef7714cb4", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: cannot borrow immutable argument `self` as mutable\n    |                       try removing `&mut` here\n    |                       cannot reborrow mutably\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "c32fb56f61be0b042878d24d3e67cf2c9f590b1a", "filename": "src/test/ui/did_you_mean/issue-34337.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: cannot borrow immutable local variable `key` as mutable\n    |              try removing `&mut` here\n    |              cannot reborrow mutably\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "09a9b796c6a461824ad6b443fcbc3bcdcf67f4dd", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error: cannot assign to immutable field `s.x`\n 30 |     s.x += 1;\n    |     ^^^^^^^^ cannot mutably borrow immutable field\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ea628f10e0fd615571442c423842dc1586c66bd3", "filename": "src/test/ui/did_you_mean/issue-36798.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: no field `baz` on type `Foo`\n 17 |     f.baz;\n    |       ^^^ did you mean `bar`?\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a9090e3911b07e65464a53c4c9715a45c77fffb1", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: no field `zz` on type `Foo`\n 17 |     f.zz;\n    |       ^^ unknown field\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "acbeaafdf798d66fbc48d4fda09c51a8d6dd1c8b", "filename": "src/test/ui/did_you_mean/issue-37139.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: cannot borrow immutable local variable `x` as mutable\n    |                       try removing `&mut` here\n    |                       cannot reborrow mutably\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "10f5972e36946554f4f304dbcc2cfc9a1ac38982", "filename": "src/test/ui/did_you_mean/issue-38054-do-not-show-unresolved-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38054-do-not-show-unresolved-names.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0432]: unresolved import `Foo1`\n 13 | use Foo1;\n    |     ^^^^ no `Foo1` in the root\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "85eecd037dd7badbe71bfbe844e7a2b8923a39cb", "filename": "src/test/ui/did_you_mean/issue-38147-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0389]: cannot borrow data mutably in a `&` reference\n 27 |         self.s.push('x');\n    |         ^^^^^^ assignment into an immutable reference\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "83d46e3fc47271409a4e3c2dbf43dc9fdf9f7e72", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: cannot borrow immutable borrowed content `*self.s` as mutable\n 17 |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "ca6f376ffd301c9682b0740b6d2767e63d4b98a2", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: cannot borrow immutable borrowed content `*self.s` as mutable\n 17 |         self.s.push('x');\n    |         ^^^^^^ cannot borrow as mutable\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "6fa152c970bdfe2227ff41634a4818cb52170ae3", "filename": "src/test/ui/did_you_mean/issue-38147-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0389]: cannot borrow data mutably in a `&` reference\n 16 |     f.s.push('x');\n    |     ^^^ assignment into an immutable reference\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "9ae240bf420a5bfc176bcba5ef36e3a284d878ea", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -96,5 +96,5 @@ error: cannot assign to immutable borrowed content `*x.0`\n 58 |     *x.0 = 1;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 12 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "6a0e94bf13803d3cd74e02c22a2ace99d1f6384a", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -39,5 +39,5 @@ error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n            and 2 others\n    = note: required by `Foo::bar`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "b1dab01d81ff2637d5b8bdeba494846ba52f6c56", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -64,5 +64,5 @@ error[E0038]: the trait `X` cannot be made into an object\n    |\n    = note: method `xxx` has no receiver\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "daee8df7ed89b219618a15b1321cc2b82837713d", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -30,5 +30,5 @@ error: chained comparison operators require parentheses\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "5718471527d88459b31e6948d0cb45b76d55093c", "filename": "src/test/ui/did_you_mean/issue-40823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: cannot borrow immutable borrowed content `*buf` as mutable\n 13 |     buf.iter_mut();\n    |     ^^^ cannot borrow as mutable\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "4f210bb0b11b2d7ca60a359eb2c83961dee8a07b", "filename": "src/test/ui/did_you_mean/issue-41679.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: `~` can not be used as a unary operator\n    |\n    = help: use `!` instead of `~` if you meant to perform bitwise negation\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "32f9d90ec2d8d5ea39bbeb72f69536e3dcbcae2e", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -17,5 +17,5 @@ error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n    = note: required because it appears within the type `A`\n    = note: required by `is_send`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "ba8d3815181ac84c282682f0f290826d1fe13663", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ error[E0308]: mismatched types\n    = note: expected type `&Bottom`\n               found type `&Top`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "50e296a1bc53758b491bd1f753e670f9ddcf1a43", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -18,5 +18,5 @@ error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "b69b4f9f32117957a7f5861a2ed0e3889aa5bf79", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -42,5 +42,5 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "e1bfb4d8c1e181a4feb734c89e70252c9ad0f0c1", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attri\n 43 | | }\n    | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ddd213dd9ad7088feaefa06af61e1cae46c0da27", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -42,5 +42,5 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "d9d00919b6dcac704d56ef4928822d86f5127e82", "filename": "src/test/ui/dropck/dropck-eyepatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -42,5 +42,5 @@ error: `c` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "2466d2b43b6fcd648f325d5f44b146a2177cfaa4", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error: invalid format string: unmatched `}` found\n    = note: if you intended to print `}`, you can escape it using `}}`\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "91c89e55c54a824d205081ab9c8c44d8557beb5c", "filename": "src/test/ui/fn_once-moved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ffn_once-moved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ffn_once-moved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn_once-moved.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error[E0382]: use of moved value: `debug_dump_dict`\n    |\n    = help: closure was moved because it only implements `FnOnce`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a08e77a2151e210c98916a99200a1848e2b9a60e", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -51,5 +51,5 @@ error[E0308]: mismatched types\n    = note: expected type `impl Foo` (i32)\n               found type `impl Foo` (u32)\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "a444d5f5a40308bbae8a182f8392b831e1db5b5c", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ note: maybe move this module `$DIR/auxiliary/foo/bar.rs` to its own directory vi\n 11 | pub mod baz;\n    |         ^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "62223c553e377a7e9f91cd6adea6c238fb9d82a2", "filename": "src/test/ui/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: reached the type-length limit while instantiating `<T as Foo><(&(&(&(&(&(\n    |\n    = note: consider adding a `#![type_length_limit=\"2097152\"]` attribute to your crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "80f608c1d371040075d466165e1a1b6e75419f88", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0507]: cannot move out of indexed content\n    |             help: consider using a reference instead `&f.v[0]`\n    |             cannot move out of indexed content\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d35800ac1e766f67d9dfca9ad611d5ac56b8ec77", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0507]: cannot move out of indexed content\n    |          |  ...and here (use `ref b` or `ref mut b`)\n    |          hint: to prevent move, use `ref a` or `ref mut a`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a0177e79ac467b4445e94011d51f6d4bb7ba40ba", "filename": "src/test/ui/issue-41652/issue_41652.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: no method named `f` found for type `{integer}` in the current scope\n note: candidate #1 is defined in the trait `issue_41652_b::Tr`\n    = help: to disambiguate the method call, write `issue_41652_b::Tr::f(3)` instead\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "0ab24b0b3e6c417bb035f4df923ad9865b523c85", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ note: ...but the borrowed content is only valid for the anonymous lifetime #1 de\n 13 | | }\n    | |_^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d005eeb40451ad8f9855665c8f10368510bc031d", "filename": "src/test/ui/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0106]: missing lifetime specifier\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "7d0947b364e03ff2318b3aaa4421f460d6667a09", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -21,5 +21,5 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the function\n 17 | | }\n    | |_^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "6380a885f4467ddaf2a783ccb7716c454782fb4e", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -21,5 +21,5 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the f\n 17 | | }\n    | |_^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "b28a3c0c1351da9662f025cbb0f832a961146a13", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -31,5 +31,5 @@ note: ...so that expression is assignable (expected Ref<'b, _>, found Ref<'_, _>\n 17 |     x.push(z);\n    |            ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "dd716bac513d2eab4fceba362c4f54de6983295a", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -33,5 +33,5 @@ note: ...so that expression is assignable (expected &mut std::vec::Vec<Ref<'_, i\n 16 |     let a: &mut Vec<Ref<i32>> = x;\n    |                                 ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "141f5a7c4528b1e55ec504aae50ab10bac9f3f41", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -33,5 +33,5 @@ note: ...so that expression is assignable (expected &mut std::vec::Vec<Ref<'_, i\n 16 |     let a: &mut Vec<Ref<i32>> = x;\n    |                                 ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "768057301d1263dfc79fc1ef70b09786203a5723", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error: borrowed value does not live long enough\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d441702374b74dc42a3b8796a93ea26daf05f801", "filename": "src/test/ui/lint/command-line-lint-group-deny.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-deny.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: variable `_InappropriateCamelCasing` should have a snake case name such a\n    |\n    = note: `-D non-snake-case` implied by `-D bad-style`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "9d4d0b12b187071d0311e4ed3e81faeb3f13ded1", "filename": "src/test/ui/lint/command-line-lint-group-forbid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-forbid.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: variable `_InappropriateCamelCasing` should have a snake case name such a\n    |\n    = note: `-F non-snake-case` implied by `-F bad-style`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "dec44c317e4b2f4c1eafb54251d74d4b443e685e", "filename": "src/test/ui/lint/lint-group-style.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -63,5 +63,5 @@ note: lint level defined here\n 28 |         #![warn(bad_style)]\n    |                 ^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "7a4a9c3f012bf9d082a30af769b45f3614a861cc", "filename": "src/test/ui/loop-break-value-no-repeat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0571]: `break` with value from a `for` loop\n 22 |         break 22\n    |         ^^^^^^^^ can only break with a value inside `loop`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "b8337c81834b89e6efcf9ae2857838405f526216", "filename": "src/test/ui/macros/bad_hello.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: expected a literal\n 12 |     println!(3 + 4);\n    |              ^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a964b92712ddb00711621b6f2eb3c0ef8e9861e3", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -48,5 +48,5 @@ error: named argument never used\n    = help: `$NAME` should be written as `{NAME}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "304d4459e4975dda4306e604f88961676e2b80bc", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -52,5 +52,5 @@ error: attempted tuple index `0` on type `{integer}`, but the type was not a tup\n 56 |     let _ = fake_anon_field_expr!();\n    |             ----------------------- in this macro invocation\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "7835b85eafc0e8821889ec8abb9f7222a50de6ee", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error[E0425]: cannot find value `fake` in this scope\n 28 |     call_nested_expr_sum!();\n    |     ------------------------ in this macro invocation\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "4177240d97696d2693bff7b8824de62c0bca7425", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: invalid reference to argument `0` (no arguments given)\n 28 |     myprintln!(\"{}\");\n    |     ----------------- in this macro invocation\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "2ba2069677e3d9f1cb41225fb6995acbe84e5f88", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error[E0053]: method `bar` has an incompatible type for trait\n    = note: expected type `fn(&Bar)`\n               found type `fn(&mut Bar)`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "fab48e9a740a29ed4de52b1010d09368dde86432", "filename": "src/test/ui/mismatched_types/E0281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error[E0281]: type mismatch: `[closure@$DIR/E0281.rs:14:9: 14:24]` implements th\n    |\n    = note: required by `foo`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "a5f63aca13e2170128675f077be1d1e3a3d588d0", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -15,5 +15,5 @@ error[E0308]: mismatched types\n    = note: expected type `&{integer}`\n               found type `{integer}`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "78b5dcda1d9d24be75b73276e29c1cdc7a77b8ab", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -64,5 +64,5 @@ error[E0308]: mismatched types\n    = note: expected type `X<X<_, std::string::String>, _>`\n               found type `X<X<_, {integer}>, _>`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "d97c78137089ec721e9ee55db27a960e5077f963", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -54,5 +54,5 @@ error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<std::result::Resul\n    |\n    = help: the trait `std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not implemented for `{integer}`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "8d31dd7500a34f81dcb6fb58dc562a8188fd9089", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -236,5 +236,5 @@ help: did you mean `*s`?\n 81 |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>();\n    |                              ^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "cd16e5d70b68b6eb423b26e31ae15d6a116308b3", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -55,5 +55,5 @@ error[E0593]: closure takes 1 argument but 2 arguments are required\n    |               |\n    |               expected closure that takes 2 arguments\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "2c9c918168d0299989fe7b508f10199863f19799", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error[E0281]: type mismatch: `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]` im\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n    = note: required by `baz`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "5f67a66eb325fa7e287cf2537d32f24478fcc813", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0379]: trait fns cannot be declared const\n 21 |     const fn f() -> u32 { 22 }\n    |     ^^^^^ trait fns cannot be const\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "2030ad6c13b56af2ea42f0c0292875a523665914", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -14,5 +14,5 @@ error[E0281]: type mismatch: `fn(&isize) {takes_imm}` implements the trait `for<\n    |\n    = note: required by `apply`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "cbce4f810c5312469d168dd7e31798c42ead8e28", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `*mut Trait`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "dc3764a376cde4d8443f780a649f194146a1a445", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error: non-scalar cast: `{integer}` as `()`\n 38 |     cast!(2);\n    |     --------- in this macro invocation\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "463d9fdf1717b3cac825bc248ad496976f37cf58", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `bool` (type parameter)\n               found type `bool` (bool)\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d72ab326ce644168cdf3a5cb885ce86b034bbf80", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -26,5 +26,5 @@ error[E0281]: type mismatch: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53]` impl\n    |                                requires `for<'r> std::ops::FnOnce<(&'r &str,)>`\n    |                                expected &str, found str\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "76ffa6e50e133d2e58cad02b4802bf75db98b40e", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -32,5 +32,5 @@ error[E0529]: expected an array or slice, found `u32`\n 34 | fn ugh(&[bar]: &u32) {\n    |         ^^^^^ pattern cannot match with input type `u32`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "b4e688e025e52b23ef87cc54223b8a86f3261375", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error[E0308]: mismatched types\n    = note: expected type `u32`\n               found type `()`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "c7a52fea3bc8c3e0219e69ac0927424fcc6269d4", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: no method named `unwrap` found for type `std::result::Result<(), Foo>` in\n    = note: the method `unwrap` exists but the following trait bounds were not satisfied:\n            `Foo : std::fmt::Debug`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "7c644e3a72dcd637e079bb6074c6d3e0c4934d75", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n 45 |     let ans = s(\"burma\", \"shave\");\n    |                 ^^^^^^^^^^^^^^^^ expected 1 parameter\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "9e7f79df35aee136652f733d095930b292dc876f", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `std::boxed::Box<Foo + std::marker::Send + 'static>`\n               found type `std::boxed::Box<Foo + 'static>`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "8741589f8464ed8b9a629ebc8975ff2bb9dcc450", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error[E0053]: method `bar` has an incompatible type for trait\n    = note: expected type `fn(&mut Bar, &mut Bar)`\n               found type `fn(&mut Bar, &Bar)`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "c5bfb6e45e77e468aabcd6086ed53dc4e5ef9e7b", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -26,5 +26,5 @@ error[E0281]: type mismatch: `[closure@$DIR/unboxed-closures-vtable-mismatch.rs:\n    |\n    = note: required by `call_it`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "878544937905d0907f6a10af8510a54e4ea10c32", "filename": "src/test/ui/missing-items/issue-40221.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmissing-items%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmissing-items%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fissue-40221.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0004]: non-exhaustive patterns: `C(QA)` not covered\n 21 |     match proto {\n    |           ^^^^^ pattern `C(QA)` not covered\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "26748d18ffa954ac004fa583d92c45abebce771f", "filename": "src/test/ui/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `met\n    = note: `Type` from trait: `type Type;`\n    = note: `method` from trait: `fn(&Self, std::string::String) -> <Self as m1::X>::Type`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "ce38178bf87bbfcb962ad807b93761e656f73ca2", "filename": "src/test/ui/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0282]: type annotations needed\n 14 |     foo();\n    |     ^^^ cannot infer type for `X`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "94fc8f15c2b9e23346ecd1e71f0d2652051ba2ba", "filename": "src/test/ui/pub/pub-restricted-error-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: unmatched visibility `pub`\n 13 | pub(crate) () fn foo() {}\n    |          ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "eebb2428ba3a5f023d5c2fba73465eefedb7838d", "filename": "src/test/ui/pub/pub-restricted-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: expected identifier, found `(`\n 16 |     pub(crate) () foo: usize,\n    |                ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "865b1d409e131bfa2e86ed0df3b3a25994047f7b", "filename": "src/test/ui/pub/pub-restricted-non-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: expected identifier, found `.`\n 13 | pub (.) fn afn() {}\n    |      ^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "34cc80fcc752796e9f480fbe276d64af615b95df", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -48,5 +48,5 @@ error: visibilities can only be restricted to ancestor modules\n 33 |         pub (in x) non_parent_invalid: usize,\n    |                 ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "cbcbf88d86e7f6c39a3ba88843aee6d4df80ec8a", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ note: lint level defined here\n 13 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "20640c0a897b44c562c8658e7bc9847fa34098c5", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ note: lint level defined here\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "c778aec08108e84c9afd5ec71ca43f3e3be67763", "filename": "src/test/ui/reachable/expr_array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error: unreachable expression\n 25 |     let x: [usize; 2] = [22, return];\n    |                         ^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "9310c000192739124476794271e214c4587f98f9", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error: unreachable expression\n 36 |     *{return; &mut i} = 22;\n    |               ^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ea7b962e190d190c03a7a8237ee776f3e20529c3", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -18,5 +18,5 @@ error: unreachable statement\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ee89104df9e92413bdac699125cbffb35e9f30ac", "filename": "src/test/ui/reachable/expr_box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ note: lint level defined here\n 13 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "5e072ed1dc7abe766ec0e2ef41636a50eda5aba2", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error: unreachable expression\n 28 |     bar(return);\n    |     ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "a8668dc7355c12f6d6ae17d8f06f8f9adf6acbaa", "filename": "src/test/ui/reachable/expr_cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ note: lint level defined here\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "7f901511f7206f281972cdcd1be72ed9cf47926b", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ note: lint level defined here\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "4fb6392f405c218eb4858fe9b6e2ac139aac957c", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -27,5 +27,5 @@ error: unreachable statement\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "387f7900f4948d86d53b3be53adbee9e24472f5a", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -26,5 +26,5 @@ error: unreachable statement\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "68fd4973414151cf00e4c4985146e6cf108b552d", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error: unreachable expression\n 31 |     Foo.bar(return);\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "01b2e1009ee0c5507e2cf6c0d41df7c8a877f003", "filename": "src/test/ui/reachable/expr_repeat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ note: lint level defined here\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "ee958aa9089d8e3350705265f9339b47f153bf80", "filename": "src/test/ui/reachable/expr_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ note: lint level defined here\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "08866bf32b873abf1d4a0437318e12309183b4de", "filename": "src/test/ui/reachable/expr_struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -28,5 +28,5 @@ error: unreachable expression\n 40 |     let x = Foo { a: 22, b: return };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "780fb02f79037861879cc53c5441e81b1217acc5", "filename": "src/test/ui/reachable/expr_tup.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error: unreachable expression\n 25 |     let x: (usize, usize) = (2, return);\n    |                             ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "1216ec2676eefe106e40ca1dec343bfa82e3e8da", "filename": "src/test/ui/reachable/expr_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ note: lint level defined here\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "889e3e01c6daaedd42dcd630cdc4529be745367a", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: cannot apply unary operator `!` to type `!`\n 18 |     let x: ! = ! { return; 22 };\n    |                ^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "3da057f4bbd364ec61a0667518c4ecd378802fc0", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -27,5 +27,5 @@ error: unreachable statement\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "121a50d0eda172dd0e61a0283b61c9bb9b704880", "filename": "src/test/ui/regions-fn-subtyping-return-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error[E0308]: mismatched types\n    = note: lifetime parameter `'b` declared on fn `bar` appears only in the return type, but here is required to be higher-ranked, which means that `'b` must appear in both argument and return types\n    = note: this error is the result of a recent bug fix; for more information, see issue #33685 <https://github.com/rust-lang/rust/issues/33685>\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "03e80046f679cb69140ee979474c762d8ba1b45a", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -25,5 +25,5 @@ error[E0422]: cannot find struct, variant or union type `C` in module `namespace\n help: possible candidate is found in another module, you can import it into scope\n    | use namespaced_enums::Foo::C;\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "8aaad906ea28a477e8c7324b2815ed46e1469ade", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -144,5 +144,5 @@ error[E0425]: cannot find value `bah` in this scope\n \n error: main function not found\n \n-error: aborting due to 25 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "2fbf7d7185da3d3de70cdafcee7a45b43cc8a689", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ help: possible better candidates are found in other modules, you can import them\n    | use std::io::Result;\n    | use std::thread::Result;\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "69eeb178dffcca4abf6b12637628fba7e6bafdc0", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0422]: cannot find struct, variant or union type `E` in this scope\n help: possible candidate is found in another module, you can import it into scope\n    | use SomeEnum::E;\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "225e31010dabbfd4c0665d04df35e013fcc71b3d", "filename": "src/test/ui/resolve/issue-18252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0423]: expected function, found struct variant `Foo::Variant`\n 16 |     let f = Foo::Variant(42);\n    |             ^^^^^^^^^^^^ did you mean `Foo::Variant { /* fields */ }`?\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "25ee3a02146a70f5c614ae3dd6012440955b7962", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0423]: expected value, found struct variant `issue_19452_aux::Homura::Mad\n 22 |     let homura = issue_19452_aux::Homura::Madoka;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `issue_19452_aux::Homura::Madoka { /* fields */ }`?\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "2ca541c161badea97dea7256ca4c1c9a2759c63d", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ note: the cycle begins when processing `<impl at $DIR/issue-23305.rs:15:1: 15:20\n    | ^^^^^^^^^^^^^^^^^^^\n    = note: ...which then again requires processing `<impl at $DIR/issue-23305.rs:15:1: 15:20>`, completing the cycle.\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "559598dd38ae92cbb882a31d38b240e6babd38e6", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -106,5 +106,5 @@ error[E0424]: expected value, found module `self`\n 122 |     self += 1;\n     |     ^^^^ `self` value is only available in methods with `self` parameter\n \n-error: aborting due to 17 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "14a2413feee23265c375b56bda9a2de934a9a09a", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0411]: cannot find type `Self` in this scope\n 11 | fn foo(_: Self) {\n    |           ^^^^ `Self` is only available in traits and impls\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a950075715ac014417aa46f2d1d2cdb57b4b766d", "filename": "src/test/ui/resolve/issue-33876.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0423]: expected value, found trait `Bar`\n 20 |     let any: &Any = &Bar; //~ ERROR expected value, found trait `Bar`\n    |                      ^^^ not a value\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "4e1ef25f8033307f32eb48cf52d41fa3c71a8c34", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n    |\n    = note: method `bar` has no receiver\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "134a4540a8d9e39538814de39db8c61625d6be00", "filename": "src/test/ui/resolve/issue-39226.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0423]: expected value, found struct `Handle`\n    |                 did you mean `handle`?\n    |                 did you mean `Handle { /* fields */ }`?\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "9bdd7ee4fd4b588eff1181c3324aec71b8dd8bf8", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0277]: the trait bound `I + 'static: std::marker::Sized` is not satisfied\n    = help: the trait `std::marker::Sized` is not implemented for `I + 'static`\n    = note: all local variables must have a statically known size\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "620958190caf8f739343e3a38ad13dd1d702da1a", "filename": "src/test/ui/resolve/issue-6702.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0423]: expected function, found struct `Monster`\n 17 |     let _m = Monster(); //~ ERROR expected function, found struct `Monster`\n    |              ^^^^^^^ did you mean `Monster { /* fields */ }`?\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d25c52eeab3ce9cb31b6464e31cbc464c74a970b", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -46,5 +46,5 @@ error[E0425]: cannot find value `second` in module `m`\n 32 |     let b: m::first = m::second; // Misspelled item in module.\n    |                          ^^^^^^ did you mean `Second`?\n \n-error: aborting due to 8 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "b21b10c63b02b7567082762656e09e57253edae6", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -65,5 +65,5 @@ error: tuple struct `Z` is private\n 45 |     xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "c346612a68bb62a04353ef3fb401cacfc5a61a20", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -52,5 +52,5 @@ error[E0425]: cannot find value `method` in this scope\n 52 |         method;\n    |         ^^^^^^ did you mean `self.method(...)`?\n \n-error: aborting due to 9 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "92f13f705b079adf766dee79291467c6319f5986", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0423]: expected function, found macro `assert`\n 12 |     assert(true);\n    |     ^^^^^^ did you mean `assert!(...)`?\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "04c8087ace9ffa5e937fe36d8f6792971afc3621", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error[E0425]: cannot find function `method` in this scope\n 38 |         method();\n    |         ^^^^^^ did you mean `self.method(...)`?\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "24cef694737e05e8cc32825e0954ed7de2504d24", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -74,5 +74,5 @@ error[E0423]: expected function, found module `a::b`\n \n error: main function not found\n \n-error: aborting due to 10 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "7307f19c74de3ecb3347f92f37050a73c9014346", "filename": "src/test/ui/resolve/token-error-correct-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error[E0425]: cannot find value `foo` in this scope\n 14 |     if foo {\n    |        ^^^ not found in this scope\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "d234c8538fe27a23d8128a70fbb317c7b31043d3", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -40,5 +40,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `std::result::Result<bool, std::io::Error>`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "1dd263affd4c3c6f923cf9b58f705fc2abbe2b86", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -52,5 +52,5 @@ error[E0425]: cannot find function `bar` in this scope\n 14 |     foo(bar(;\n    |         ^^^ not found in this scope\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "2fc5979a6065ebc4b42be1f855c6789dfaed7e44", "filename": "src/test/ui/resolve/tuple-struct-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -28,5 +28,5 @@ error[E0532]: expected tuple struct/variant, found type alias `A`\n    |         did you mean `S`?\n    |         did you mean `A { /* fields */ }`?\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ff6bcf2a53205ecb9f5c4b4a8fd153e77712088f", "filename": "src/test/ui/resolve/unresolved_static_type_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0425]: cannot find value `cx` in this scope\n    |           did you mean `self.cx`?\n    |           `self` value is only available in methods with `self` parameter\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "f722908ec108a07099a4db10567e1f27a8f89a96", "filename": "src/test/ui/span/E0046.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0046.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0046]: not all trait items implemented, missing: `foo`\n 18 | impl Foo for Bar {}\n    | ^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "bc3a3908dcaefef6033c4a40114732dc37acda19", "filename": "src/test/ui/span/E0057.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n 15 |     let c = f(2, 3); //~ ERROR E0057\n    |               ^^^^ expected 1 parameter\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "14e6bcb73b02b69c62058b93fc3861924f24afd7", "filename": "src/test/ui/span/E0072.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0072.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error[E0072]: recursive type `ListNode` has infinite size\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ListNode` representable\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "fab2436922dda318fd5f2d16716b69ba17407645", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -34,5 +34,5 @@ error[E0204]: the trait `Copy` may not be implemented for this type\n 31 |     Bar(&'a mut bool),\n    |         ------------- this field does not implement `Copy`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "5f8b57294d548e6aa6fb38133abb7adbc0017ba4", "filename": "src/test/ui/span/E0493.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0493]: constants are not allowed to have destructors\n 27 | const F : Foo = Foo { a : 0 };\n    |                 ^^^^^^^^^^^^^ constants cannot have destructors\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "64c0016085f07c1de13792dfe77ddd532828bbc4", "filename": "src/test/ui/span/E0535.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0535.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0535]: invalid argument\n 11 | #[inline(unknown)] //~ ERROR E0535\n    |          ^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "8a4cf34e565f5016348dd7b7b33efa26b2b42c5b", "filename": "src/test/ui/span/E0536.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0536.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0536]: expected 1 cfg-pattern\n 11 | #[cfg(not())] //~ ERROR E0536\n    |       ^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "1bd54a6a007ed94c2c18c128270da0be691bec71", "filename": "src/test/ui/span/E0537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2FE0537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0537.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0537]: invalid predicate `unknown`\n 11 | #[cfg(unknown())] //~ ERROR E0537\n    |       ^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "7cd9f30f42c1743a8d9d824fc3ca392a578d9785", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -82,5 +82,5 @@ error: cannot borrow immutable borrowed content `*x` as mutable\n 143 |     *x.y_mut() = 3; //~ ERROR cannot borrow\n     |      ^ cannot borrow as mutable\n \n-error: aborting due to 10 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "83c49409049d8610410377c2dc816c6f7153cfad", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -30,5 +30,5 @@ error: cannot borrow immutable borrowed content `*x` as mutable\n 63 |     **x = 3; //~ ERROR cannot borrow\n    |      ^^ cannot borrow as mutable\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "bfb51ba48166287eb8e1550800aadebfeb3ef927", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -47,5 +47,5 @@ error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n 72 |         foo(f);\n    |             ^ cannot move out of captured outer variable in an `FnMut` closure\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "00fa6577545daf13fb1e711e70aa4214ff34c806", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: cannot borrow immutable borrowed content `*x` as mutable\n 27 |     x.h(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "75866b7e45e31236bc6d84e393ffeb1b57007f00", "filename": "src/test/ui/span/borrowck-fn-in-const-b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: cannot borrow immutable borrowed content `*x` as mutable\n 17 |         x.push(format!(\"this is broken\"));\n    |         ^ cannot borrow as mutable\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "fd2a752c4721be2cc3e50b2a26c6edb2415c6ba3", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -48,5 +48,5 @@ error: borrowed value does not live long enough\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "86316d8980d0ccf010e902e4a04b75dcc4d83cfd", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -16,5 +16,5 @@ error: cannot borrow immutable `Box` content `*x` as mutable\n 29 |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "38ce3d398baaf892505db2e982a6105e976464ae", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -12,5 +12,5 @@ error: borrowed value does not live long enough\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "47ede6f2eb1a8a718df6dc5b46835ce37adf7d46", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -47,5 +47,5 @@ error[E0308]: mismatched types\n    = note: expected type `_`\n               found type `std::boxed::Box<_>`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "bf449518ce70c7c0c1ed9fa3ea86ddcbf19389c5", "filename": "src/test/ui/span/destructor-restrictions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: `*a` does not live long enough\n    |     |\n    |     `*a` dropped here while still borrowed\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "f098448527905ee8f83ab99d0038a28160ba31a4", "filename": "src/test/ui/span/dropck-object-cycle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck-object-cycle.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: `*m` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "ea5163cf924729a43d83b81af50f004603291090", "filename": "src/test/ui/span/dropck_arr_cycle_checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -63,5 +63,5 @@ error: `b2` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "d5f22a2665049d802830d49e9b35cf6fc5c2f5d4", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ error: `d1` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "4ad98b429c53b4c3bbdc7067dcc16d1477dcab72", "filename": "src/test/ui/span/dropck_misc_variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_misc_variants.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ error: `v` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "e38c49d6a5c36bed9cb88054305cb3733cfa4944", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -63,5 +63,5 @@ error: `c2` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ca7286f50275b7c3899c281718b8b03cb13ddf74", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -85,5 +85,5 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "18cbf9332301924aeb42a3258177893472d74c59", "filename": "src/test/ui/span/issue-11925.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-11925.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error: `x` does not live long enough\n 23 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d2534388f7255d3212331a80f72deb00bb67fcd5", "filename": "src/test/ui/span/issue-15480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ error: borrowed value does not live long enough\n    |\n    = note: consider using a `let` binding to increase its lifetime\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "bf7c099187ee64aaaf96f9c3d13e861102ebe42e", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -18,5 +18,5 @@ error: `y` does not live long enough\n    |     |\n    |     `y` dropped here while still borrowed\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "d6aed36c8f63f9258323bfb42396d433a7b67ae3", "filename": "src/test/ui/span/issue-23729.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -12,5 +12,5 @@ error[E0046]: not all trait items implemented, missing: `Item`\n    |\n    = note: `Item` from trait: `type Item;`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "a1d3f5c11df34e91c2d7f34c0069b79209a9e568", "filename": "src/test/ui/span/issue-23827.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -12,5 +12,5 @@ error[E0046]: not all trait items implemented, missing: `Output`\n    |\n    = note: `Output` from trait: `type Output;`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "771ea787304b3c29862b4b7c6dc0c0002b776089", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ error[E0046]: not all trait items implemented, missing: `Target`\n    |\n    = note: `Target` from trait: `type Target;`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "598f9f5130781552806f5301153d12ab512f6628", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -32,5 +32,5 @@ note: lint level defined here\n 16 | #![deny(warnings)]\n    |         ^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "8c2254483e03075c29ce2d0948cb7c1748205e0b", "filename": "src/test/ui/span/issue-24805-dropck-child-has-items-via-parent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-child-has-items-via-parent.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: `d1` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "450bc123e60bc9ab0f86171a9416c22c7ff0b778", "filename": "src/test/ui/span/issue-24805-dropck-trait-has-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24805-dropck-trait-has-items.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -28,5 +28,5 @@ error: `d1` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "dfee66ae546cddee245e3dfce9ba3c78d2bf1cb9", "filename": "src/test/ui/span/issue-24895-copy-clone-dropck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24895-copy-clone-dropck.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: `d1` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "17c05557297530d43f53a3e44896e61877ce4aa5", "filename": "src/test/ui/span/issue-25199.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ error: `container` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "1f5c64986c7369f1aaf8f8e7e01667e3d5a51b25", "filename": "src/test/ui/span/issue-26656.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-26656.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: `ticking` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "443595c6d2c764ae4c62a20c0a16dc56758c9375", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched method receiver\n    = note: expected type `&Self`\n               found type `&SomeType`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "2a7e59f0422e64725e1c55d6e30646354f3e8659", "filename": "src/test/ui/span/issue-29106.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29106.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -18,5 +18,5 @@ error: `x` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "4065c4fb85713f3836cf1172c98672a3d1fd5971", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0277]: the trait bound `u8: Tr` is not satisfied\n    |\n    = note: required by `Tr::C`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "38256ec944b9b9c5debf9ed7f4a9cd55f075381a", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error[E0308]: mismatched types\n               found type `std::string::String`\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "48ed0b4ac89aa964e62debf10532383fa2873175", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -45,5 +45,5 @@ error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n 19 |     bar(1, 2, 3);\n    |         ^^^^^^^ expected 2 parameters\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "5dc9bd8b79b19952cd313f6940e421135ea7eb7d", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -14,5 +14,5 @@ error: The attribute `foo` is currently unknown to the compiler and may have mea\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "dbce171dd9b7e5c14f166385f91b43628445e2f3", "filename": "src/test/ui/span/issue-36537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: `a` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "bd271641e7e3cca949f80c52bee1e71a435e3815", "filename": "src/test/ui/span/issue-37767.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -55,5 +55,5 @@ note: candidate #2 is defined in the trait `F`\n    |     ^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `F::foo(a)` instead\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "f0b940cdf3fa9e150e1509ec9562f0dd10734b82", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -15,5 +15,5 @@ error[E0369]: binary operation `+` cannot be applied to type `World`\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `World`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "0d0a07629c49a09309dacb4115d1e6cbafd73f15", "filename": "src/test/ui/span/issue-39698.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-39698.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-39698.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39698.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -38,5 +38,5 @@ error[E0408]: variable `c` is not bound in all patterns\n    |         |             pattern doesn't bind `c`\n    |         pattern doesn't bind `c`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "160f65fd1b9af499e7d842f484e10439bfc06d5e", "filename": "src/test/ui/span/issue-40157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error: `foo` does not live long enough\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "c017e38680826d60fc7ddfb201a5b57dd9add551", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -61,5 +61,5 @@ note: candidate #1 is defined in the trait `ManyImplTrait`\n    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `is_str`, perhaps you need to implement it:\n    = help: candidate #1: `ManyImplTrait`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "06b7f922b684c538f95c8d127c8648ab6b8f13f7", "filename": "src/test/ui/span/issue28498-reject-ex1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ error: `foo.data` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "d166af522478e693afb238c9021ceae83e0368b9", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error: `first_dropped` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "6a02d7015733de3cad307dc50acb402728c2d886", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error: `first_dropped` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "91a410e0f65894ca0c0fa1efd45bdd0ce3a82a3d", "filename": "src/test/ui/span/issue28498-reject-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error: `first_dropped` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "2f5e60a1b3c9d0fbf07bb0899f18db927e6b467c", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -106,5 +106,5 @@ note: because it's nested under this `unsafe` fn\n 44 | | }\n    | |_^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "6095a3b6be5cbd27ab75b128c648bf0b2f203519", "filename": "src/test/ui/span/loan-extend.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Floan-extend.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: `short` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "f76c5b049c4b04c0a65f69885be2573e89c647d3", "filename": "src/test/ui/span/move-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n               found type `[closure@$DIR/move-closure.rs:15:17: 15:27]`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "881c2f5df45a2ffaee2e15f8a26870904589379a", "filename": "src/test/ui/span/multiline-span-E0072.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -12,5 +12,5 @@ error[E0072]: recursive type `ListNode` has infinite size\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ListNode` representable\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "057f8fe6ee274f6e22b6682013bc04be2e3a2488", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -11,5 +11,5 @@ error[E0277]: the trait bound `u32: std::ops::Add<()>` is not satisfied\n    |\n    = help: the trait `std::ops::Add<()>` is not implemented for `u32`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d5e6b62865586a7547e3e5da155759965a34160a", "filename": "src/test/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error: cannot borrow immutable borrowed content `*a` as mutable\n 25 |         a.push_str(\"foo\");\n    |         ^ cannot borrow as mutable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "68dc87d0667e2d2bca63d17034be6b8a683e48be", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: `b` does not live long enough\n 20 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "835b08f890751a853a2407902bdba88e9e702d03", "filename": "src/test/ui/span/pub-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -15,5 +15,5 @@ error[E0124]: field `bar` is already declared\n 17 |     pub(crate) bar: u8,\n    |     ^^^^^^^^^^^^^^^^^^ field already declared\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "4f638562bb8014a2e9045b8db0e2a6961ef3eb7f", "filename": "src/test/ui/span/range-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error: `b` does not live long enough\n 21 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "72177754681f80ea3c516f000cd953ffa76db8a2", "filename": "src/test/ui/span/recursive-type-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -27,5 +27,5 @@ error[E0072]: recursive type `Bar` has infinite size\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "6c5007a570535093109be8b70c2036aec8977e87", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: `c` does not live long enough\n 20 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d6a460d83ab0faa9f054c7b0295aac5485be6bbb", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: borrowed value does not live long enough\n 23 | }\n    | - temporary value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "099f6df27efc69fca1dbed8f6c945b35503aab43", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: `tmp0` does not live long enough\n    |     |\n    |     `tmp0` dropped here while still borrowed\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "09178ce57e8be951b1d86a8197c3d885041536cd", "filename": "src/test/ui/span/regions-escape-loop-via-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error: `x` does not live long enough\n 23 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "006060f342a38e5e934f7d2a0bfec398ffa5f31e", "filename": "src/test/ui/span/regions-escape-loop-via-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -37,5 +37,5 @@ error[E0506]: cannot assign to `x` because it is borrowed\n 24 |         x += 1; //~ ERROR cannot assign\n    |         ^^^^^^ assignment to borrowed `x` occurs here\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "d4dfef36e4afbb6af94fe6a3c549676f01eb1821", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error: `*x` does not live long enough\n 30 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "4a815a58b354da092bd13e4bc06b8483be40fb52", "filename": "src/test/ui/span/send-is-not-static-ensures-scoping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-ensures-scoping.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -24,5 +24,5 @@ error: `y` does not live long enough\n 35 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "815f88022675d21ebfcf20f3e6da685a1160c6e3", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -32,5 +32,5 @@ error: `x` does not live long enough\n 44 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "81f53c7f374eb691a80e7218eb31abe75ba9e069", "filename": "src/test/ui/span/send-is-not-static-std-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -52,5 +52,5 @@ error[E0505]: cannot move out of `y` because it is borrowed\n 49 |     drop(y); //~ ERROR cannot move out\n    |          ^ move out of `y` occurs here\n \n-error: aborting due to 6 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ff6d30d670de1ffb4275770da329950b76dc8697", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: borrowed value does not live long enough\n 19 | }\n    | - temporary value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "b6353c0f6a205084c2b88ec2d12dfa1a0e2924fb", "filename": "src/test/ui/span/suggestion-non-ascii.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: cannot index a value of type `({integer},)`\n 14 |     println!(\"\u2603{}\", tup[0]);\n    |                     ^^^^^^ help: to access tuple elements, use `tup.0`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "afe069e7aa684cad3bc73dfdb92528c209d0210e", "filename": "src/test/ui/span/type-binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Ftype-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Ftype-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-binding.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0220]: associated type `Trget` not found for `std::ops::Deref`\n 16 | fn homura<T: Deref<Trget = i32>>(_: T) {}\n    |                    ^^^^^^^^^^^ associated type `Trget` not found\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "6556e5b4c001e7f92e86d2ec7b76bbdb1166f2f6", "filename": "src/test/ui/span/typo-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0425]: cannot find value `fob` in this scope\n 18 |     println!(\"Hello {}\", fob);\n    |                          ^^^ did you mean `foo`?\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "fad46d5a7d05282242cf3179b58bb8586c1f10fa", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -19,5 +19,5 @@ error: `c1` does not live long enough\n     |\n     = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "c890d4740e6c2aad70316c2b8eca764534d197c4", "filename": "src/test/ui/span/vec_refs_data_with_early_death.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -20,5 +20,5 @@ error: `y` does not live long enough\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "ff1bf47d44d058d198d1c64584c1fc95c138ebb0", "filename": "src/test/ui/span/wf-method-late-bound-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -9,5 +9,5 @@ error: `pointer` does not live long enough\n 33 | }\n    | - borrowed value needs to live until here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "89008828ac5efaf54178e88ed0bca1c847fac0f8", "filename": "src/test/ui/static-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic-lifetime.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0477]: the type `std::borrow::Cow<'a, A>` does not fulfill the required l\n    |\n    = note: type must satisfy the static lifetime\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "0f2097dfb312c0bed8777ba96c79f33cc08d49c2", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: no method named `closure` found for type `Obj<[closure@$DIR/issue-18343.r\n    |\n    = help: use `(o.closure)(...)` if you meant to call the function stored in the `closure` field\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "0191060e837bacef156ace72c52569c12aabc655", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -86,5 +86,5 @@ error: no method named `f3` found for type `FuncContainer` in the current scope\n     |\n     = help: use `((*self.container).f3)(...)` if you meant to call the function stored in the `f3` field\n \n-error: aborting due to 11 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "704b7a37e9553cf18b8acc35f46f48f96a0f8744", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error: no method named `example` found for type `Example` in the current scope\n    |\n    = help: use `(demo.example)(...)` if you meant to call the function stored in the `example` field\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "d827f89cf8d821b6b88684426847726521d76c8b", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -22,5 +22,5 @@ error: no method named `c_fn_ptr` found for type `&D` in the current scope\n    |\n    = help: use `(s.c_fn_ptr)(...)` if you meant to call the function stored in the `c_fn_ptr` field\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "e3c88c1e7bbbd62e07e2397e6ed1a850e123e89b", "filename": "src/test/ui/suggestions/confuse-field-and-method/private-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: no method named `dog_age` found for type `animal::Dog` in the current sco\n 26 |     let dog_age = dog.dog_age();\n    |                       ^^^^^^^ private field, not a method\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "47a1b53cc60e0d95a98f78a4e4d2cafdf02636dd", "filename": "src/test/ui/suggestions/tuple-float-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -7,5 +7,5 @@ error: unexpected token: `1.1`\n    |     |           unexpected token\n    |     help: try parenthesizing the first index `((1, (2, 3)).1).1`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "15e4d4c72bc50d926ddae589d8c319e6601ea35f", "filename": "src/test/ui/token/bounds-obj-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fbounds-obj-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fbounds-obj-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fbounds-obj-parens.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: expected one of `!` or `::`, found `<eof>`\n 15 | FAIL\n    | ^^^^ expected one of `!` or `::` here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "faa30dca94581effc840dcc6ba1f3f9f90b4407e", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -24,5 +24,5 @@ error: expected expression, found `)`\n \n error: main function not found\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "96c2d764e7101f2e76760b84fdd69395ba0b762a", "filename": "src/test/ui/token/issue-41155.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -14,5 +14,5 @@ error[E0412]: cannot find type `S` in this scope\n \n error: main function not found\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "14a7186aab19c2ef249e21d37e062f0270251206", "filename": "src/test/ui/token/macro-incomplete-parse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fmacro-incomplete-parse.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -28,5 +28,5 @@ note: caused by the macro expansion here; the usage of `ignored_pat!` is likely\n 37 |         ignored_pat!() => (), //~ NOTE caused by the macro expansion here\n    |         ^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error(s)\n "}, {"sha": "5fe0b3594f67cc1bd86a856de6972ec7928a51e8", "filename": "src/test/ui/token/trailing-plus-in-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Ftrailing-plus-in-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftoken%2Ftrailing-plus-in-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Ftrailing-plus-in-bounds.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error: expected one of `!` or `::`, found `<eof>`\n 19 | FAIL\n    | ^^^^ expected one of `!` or `::` here\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "007480dc44ff22e7f508008de9ed4d676090620d", "filename": "src/test/ui/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -6,5 +6,5 @@ error[E0282]: type annotations needed\n    |         |\n    |         consider giving `x` a type\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "4650df5411b5bc6abba5ec0a5e396d548db00f00", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error[E0282]: type annotations needed\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "08b5ae4bbb6fa2e7377b3bdf1f289d89077684f0", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -8,5 +8,5 @@ error[E0282]: type annotations needed\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "b3c736c3b685d3722e066c8bab8b7e5d296b0e93", "filename": "src/test/ui/type-check/issue-22897.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fissue-22897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fissue-22897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-22897.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0282]: type annotations needed\n 14 |     [];\n    |     ^^ cannot infer type for `[_; 0]`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "bf03e52369feb8b4a50423ab0be4230d1c039e59", "filename": "src/test/ui/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -10,5 +10,5 @@ error[E0282]: type annotations needed\n 21 | | }\n    | |_^ cannot infer type for `&'a T`\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "200864dfbf77aa0467d3f6e75b25c066a51ca7bc", "filename": "src/test/ui/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftest%2Fui%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Funknown_type_for_closure.stderr?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -4,5 +4,5 @@ error[E0282]: type annotations needed\n 12 |     let x = |_| {    };\n    |              ^ consider giving this closure parameter a type\n \n-error: aborting due to previous error\n+error: aborting due to previous error(s)\n "}, {"sha": "9fcdbb44fec18d10c086b6aba8143bc06a199761", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -1 +1 @@\n-Subproject commit 397359840ecad02d5fe69b2a0cf328e98235ffea\n+Subproject commit 9fcdbb44fec18d10c086b6aba8143bc06a199761"}, {"sha": "791b8d77e0b907f635782f1d7b33dec9ec09ae83", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf747fcbf716a8afced9d23aa15bb47d93805209/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=cf747fcbf716a8afced9d23aa15bb47d93805209", "patch": "@@ -70,7 +70,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n \n         let filen_underscore = filename.replace(\"-\",\"_\").replace(\".rs\",\"\");\n-        test_filen_gate(&filen_underscore, &mut features);\n+        let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n \n         contents.truncate(0);\n         t!(t!(File::open(&file), &file).read_to_string(&mut contents));\n@@ -92,17 +92,20 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 },\n                 None => continue,\n             };\n-            let found_feature = features.get_mut(feature_name)\n-                                        .map(|v| { v.has_gate_test = true; () })\n-                                        .is_some();\n-\n-            let found_lib_feature = features.get_mut(feature_name)\n-                                            .map(|v| { v.has_gate_test = true; () })\n-                                            .is_some();\n-\n-            if !(found_feature || found_lib_feature) {\n-                err(&format!(\"gate-test test found referencing a nonexistent feature '{}'\",\n-                             feature_name));\n+            match features.get_mut(feature_name) {\n+                Some(f) => {\n+                    if filename_is_gate_test {\n+                        err(&format!(\"The file is already marked as gate test \\\n+                                      through its name, no need for a \\\n+                                      'gate-test-{}' comment\",\n+                                     feature_name));\n+                    }\n+                    f.has_gate_test = true;\n+                }\n+                None => {\n+                    err(&format!(\"gate-test test found referencing a nonexistent feature '{}'\",\n+                                 feature_name));\n+                }\n             }\n         }\n     });\n@@ -265,4 +268,4 @@ pub fn collect_lib_features(base_src_path: &Path,\n         }\n     });\n     lib_features\n-}\n\\ No newline at end of file\n+}"}]}