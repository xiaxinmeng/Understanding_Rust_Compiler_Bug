{"sha": "5f3d360844fae27ab3318fd715e81ebcc444c876", "node_id": "C_kwDOAAsO6NoAKDVmM2QzNjA4NDRmYWUyN2FiMzMxOGZkNzE1ZTgxZWJjYzQ0NGM4NzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-13T22:25:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-13T22:25:12Z"}, "message": "Rollup merge of #107942 - compiler-errors:tighter-inherent-impl-bad-spans, r=Nilstrieb\n\nTighter spans for bad inherent `impl` self types\n\nSelf-explanatory", "tree": {"sha": "4841bdf2c82f1c6df6384802c59486ad93954d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4841bdf2c82f1c6df6384802c59486ad93954d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f3d360844fae27ab3318fd715e81ebcc444c876", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6rjICRBK7hj4Ov3rIwAA6GMIACrrLKcCObeMHe2Gt55Jcl/O\nP2nS9gvSQVC+7vwPOjK5pWfvBgpwbkxVWM1fD/7mVQU7TD+Y+3qFwNz6+oGba5hC\nePtAwMiH8o7duvsV3GZzPSB3FD1kXNdT6GxBgbyst/MZ8CW6k5ygB9eQM2qUuf1r\nUPzkSPm+8hLzJDhj+mTs66vIaRaqx28LprIASvOHvxEKDDe6SZjiT5O4jb5s3pIE\nS2n24ccTBKr37IRGfaMnzZOYbn704MWOc9LaXDz3SOunEBftqSizrcu5L8vJg3Nv\nwQm6JWOq9QbPo7QMREV0FbGBMK9nc5cFYfmBOsjyt8NyoKtjV6khfAmWtuNXzZc=\n=6g8Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 4841bdf2c82f1c6df6384802c59486ad93954d46\nparent 5c94f4a112f623541c0a97fc0f6cde98894295cd\nparent e20f6ff1dcfaa90aad841f8d36734d1e70d2e065\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676327112 +0100\ncommitter GitHub <noreply@github.com> 1676327112 +0100\n\nRollup merge of #107942 - compiler-errors:tighter-inherent-impl-bad-spans, r=Nilstrieb\n\nTighter spans for bad inherent `impl` self types\n\nSelf-explanatory\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3d360844fae27ab3318fd715e81ebcc444c876", "html_url": "https://github.com/rust-lang/rust/commit/5f3d360844fae27ab3318fd715e81ebcc444c876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f3d360844fae27ab3318fd715e81ebcc444c876/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c94f4a112f623541c0a97fc0f6cde98894295cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c94f4a112f623541c0a97fc0f6cde98894295cd", "html_url": "https://github.com/rust-lang/rust/commit/5c94f4a112f623541c0a97fc0f6cde98894295cd"}, {"sha": "e20f6ff1dcfaa90aad841f8d36734d1e70d2e065", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20f6ff1dcfaa90aad841f8d36734d1e70d2e065", "html_url": "https://github.com/rust-lang/rust/commit/e20f6ff1dcfaa90aad841f8d36734d1e70d2e065"}], "stats": {"total": 184, "additions": 74, "deletions": 110}, "files": [{"sha": "940a450101ca07dff1a9feb4cf0f237ae9991dc5", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -57,7 +57,7 @@ const ADD_ATTR: &str =\n     \"alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n \n impl<'tcx> InherentCollect<'tcx> {\n-    fn check_def_id(&mut self, item: &hir::Item<'_>, self_ty: Ty<'tcx>, def_id: DefId) {\n+    fn check_def_id(&mut self, item: &hir::Item<'_>, self_ty: Ty<'tcx>, def_id: DefId, span: Span) {\n         let impl_def_id = item.owner_id;\n         if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base\n@@ -76,12 +76,12 @@ impl<'tcx> InherentCollect<'tcx> {\n             if !self.tcx.has_attr(def_id, sym::rustc_has_incoherent_inherent_impls) {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    item.span,\n+                    span,\n                     E0390,\n                     \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                 )\n                 .help(INTO_DEFINING_CRATE)\n-                .span_help(item.span, ADD_ATTR_TO_TY)\n+                .span_help(span, ADD_ATTR_TO_TY)\n                 .emit();\n                 return;\n             }\n@@ -93,12 +93,12 @@ impl<'tcx> InherentCollect<'tcx> {\n                 {\n                     struct_span_err!(\n                         self.tcx.sess,\n-                        item.span,\n+                        span,\n                         E0390,\n                         \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                     )\n                     .help(INTO_DEFINING_CRATE)\n-                    .span_help(impl_item.span, ADD_ATTR)\n+                    .span_help(self.tcx.hir().span(impl_item.id.hir_id()), ADD_ATTR)\n                     .emit();\n                     return;\n                 }\n@@ -112,12 +112,12 @@ impl<'tcx> InherentCollect<'tcx> {\n         } else {\n             struct_span_err!(\n                 self.tcx.sess,\n-                item.span,\n+                span,\n                 E0116,\n                 \"cannot define inherent `impl` for a type outside of the crate \\\n                               where the type is defined\"\n             )\n-            .span_label(item.span, \"impl for type defined outside of crate.\")\n+            .span_label(span, \"impl for type defined outside of crate.\")\n             .note(\"define and implement a trait or new type instead\")\n             .emit();\n         }\n@@ -182,29 +182,30 @@ impl<'tcx> InherentCollect<'tcx> {\n         }\n \n         let item = self.tcx.hir().item(id);\n-        let hir::ItemKind::Impl(hir::Impl { of_trait: None, self_ty: ty, items, .. }) = item.kind else {\n+        let impl_span = self.tcx.hir().span(id.hir_id());\n+        let hir::ItemKind::Impl(hir::Impl { of_trait: None, items, .. }) = item.kind else {\n             return;\n         };\n \n         let self_ty = self.tcx.type_of(item.owner_id);\n         match *self_ty.kind() {\n             ty::Adt(def, _) => {\n-                self.check_def_id(item, self_ty, def.did());\n+                self.check_def_id(item, self_ty, def.did(), impl_span);\n             }\n             ty::Foreign(did) => {\n-                self.check_def_id(item, self_ty, did);\n+                self.check_def_id(item, self_ty, did, impl_span);\n             }\n             ty::Dynamic(data, ..) if data.principal_def_id().is_some() => {\n-                self.check_def_id(item, self_ty, data.principal_def_id().unwrap());\n+                self.check_def_id(item, self_ty, data.principal_def_id().unwrap(), impl_span);\n             }\n             ty::Dynamic(..) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    ty.span,\n+                    impl_span,\n                     E0785,\n                     \"cannot define inherent `impl` for a dyn auto trait\"\n                 )\n-                .span_label(ty.span, \"impl requires at least one non-auto trait\")\n+                .span_label(impl_span, \"impl requires at least one non-auto trait\")\n                 .note(\"define and implement a new trait or type instead\")\n                 .emit();\n             }\n@@ -221,17 +222,17 @@ impl<'tcx> InherentCollect<'tcx> {\n             | ty::Never\n             | ty::FnPtr(_)\n             | ty::Tuple(..) => {\n-                self.check_primitive_impl(item.owner_id.def_id, self_ty, items, ty.span)\n+                self.check_primitive_impl(item.owner_id.def_id, self_ty, items, impl_span)\n             }\n             ty::Alias(..) | ty::Param(_) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n-                    ty.span,\n+                    impl_span,\n                     E0118,\n                     \"no nominal type found for inherent implementation\"\n                 );\n \n-                err.span_label(ty.span, \"impl requires a nominal type\")\n+                err.span_label(impl_span, \"impl requires a nominal type\")\n                     .note(\"either implement a trait on it or create a newtype to wrap it instead\");\n \n                 err.emit();"}, {"sha": "fb6e9976583b26cae3fa6ddd08faa317caa06a07", "filename": "tests/ui/coherence/issue-85026.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fcoherence%2Fissue-85026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fcoherence%2Fissue-85026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fissue-85026.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,16 +1,16 @@\n error[E0785]: cannot define inherent `impl` for a dyn auto trait\n-  --> $DIR/issue-85026.rs:5:6\n+  --> $DIR/issue-85026.rs:5:1\n    |\n LL | impl dyn AutoTrait {}\n-   |      ^^^^^^^^^^^^^ impl requires at least one non-auto trait\n+   | ^^^^^^^^^^^^^^^^^^ impl requires at least one non-auto trait\n    |\n    = note: define and implement a new trait or type instead\n \n error[E0785]: cannot define inherent `impl` for a dyn auto trait\n-  --> $DIR/issue-85026.rs:8:6\n+  --> $DIR/issue-85026.rs:8:1\n    |\n LL | impl dyn Unpin {}\n-   |      ^^^^^^^^^ impl requires at least one non-auto trait\n+   | ^^^^^^^^^^^^^^ impl requires at least one non-auto trait\n    |\n    = note: define and implement a new trait or type instead\n "}, {"sha": "658a8406608760cccda1a77ac541775ae807e6eb", "filename": "tests/ui/const-generics/wrong-normalization.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fwrong-normalization.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,8 +1,8 @@\n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/wrong-normalization.rs:16:6\n+  --> $DIR/wrong-normalization.rs:16:1\n    |\n LL | impl <I8<{i8::MIN}> as Identity>::Identity {\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "8a02768676084c4b871b60b29dc929e4ae0a03e9", "filename": "tests/ui/error-codes/E0116.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ferror-codes%2FE0116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ferror-codes%2FE0116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0116.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -2,7 +2,7 @@ error[E0116]: cannot define inherent `impl` for a type outside of the crate wher\n   --> $DIR/E0116.rs:1:1\n    |\n LL | impl Vec<u8> {}\n-   | ^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n "}, {"sha": "442f8a4f870f22c7ecc69bdab02fc10519c4d0b0", "filename": "tests/ui/error-codes/E0118.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0118.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,8 +1,8 @@\n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/E0118.rs:1:9\n+  --> $DIR/E0118.rs:1:1\n    |\n LL | impl<T> T {\n-   |         ^ impl requires a nominal type\n+   | ^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "ec4b5758c5b786f1d2977a55748766cdf12af84d", "filename": "tests/ui/error-codes/E0390.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0390.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,16 +1,16 @@\n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/E0390.rs:5:6\n+  --> $DIR/E0390.rs:5:1\n    |\n LL | impl *mut Foo {}\n-   |      ^^^^^^^^\n+   | ^^^^^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/E0390.rs:7:6\n+  --> $DIR/E0390.rs:7:1\n    |\n LL | impl fn(Foo) {}\n-   |      ^^^^^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n "}, {"sha": "e3a9caa64602681774d2705bca73baa68f8f3b23", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -303,10 +303,10 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:233:23\n+  --> $DIR/where-allowed.rs:233:1\n    |\n LL | impl <T = impl Debug> T {}\n-   |                       ^ impl requires a nominal type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "f5900afe2dcd1aa70ef820de65ba62e9fc6b198d", "filename": "tests/ui/incoherent-inherent-impls/needs-has-incoherent-impls.stderr", "status": "modified", "additions": 22, "deletions": 56, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,114 +1,80 @@\n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:5:1\n    |\n-LL | / impl extern_crate::StructWithAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructWithAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:7:5\n    |\n LL |     fn foo() {}\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:13:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:13:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:17:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:17:1\n    |\n-LL | / impl extern_crate::StructNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::StructNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:22:1\n    |\n-LL | / impl extern_crate::EnumWithAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumWithAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:24:5\n    |\n LL |     fn foo() {}\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:30:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:30:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     fn foo() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0390]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/needs-has-incoherent-impls.rs:34:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider moving this inherent impl into the crate defining the type if possible\n help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n   --> $DIR/needs-has-incoherent-impls.rs:34:1\n    |\n-LL | / impl extern_crate::EnumNoAttr {\n-LL | |\n-LL | |     #[rustc_allow_incoherent_impl]\n-LL | |     fn bar() {}\n-LL | | }\n-   | |_^\n+LL | impl extern_crate::EnumNoAttr {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6dc1680cf89f88e9c78ae55ece7748667baaea4a", "filename": "tests/ui/incoherent-inherent-impls/no-attr-empty-impl.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -2,39 +2,39 @@ error[E0116]: cannot define inherent `impl` for a type outside of the crate wher\n   --> $DIR/no-attr-empty-impl.rs:4:1\n    |\n LL | impl extern_crate::StructWithAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/no-attr-empty-impl.rs:7:1\n    |\n LL | impl extern_crate::StructNoAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/no-attr-empty-impl.rs:10:1\n    |\n LL | impl extern_crate::EnumWithAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/no-attr-empty-impl.rs:13:1\n    |\n LL | impl extern_crate::EnumNoAttr {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/no-attr-empty-impl.rs:16:6\n+  --> $DIR/no-attr-empty-impl.rs:16:1\n    |\n LL | impl f32 {}\n-   |      ^^^\n+   | ^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n "}, {"sha": "21aac58f1f20bf8f798f9d500b2df300129cc4df", "filename": "tests/ui/kinds-of-primitive-impl.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fkinds-of-primitive-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fkinds-of-primitive-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkinds-of-primitive-impl.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,32 +1,32 @@\n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:1:6\n+  --> $DIR/kinds-of-primitive-impl.rs:1:1\n    |\n LL | impl u8 {\n-   |      ^^\n+   | ^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:6:6\n+  --> $DIR/kinds-of-primitive-impl.rs:6:1\n    |\n LL | impl str {\n-   |      ^^^\n+   | ^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:12:6\n+  --> $DIR/kinds-of-primitive-impl.rs:12:1\n    |\n LL | impl char {\n-   |      ^^^^\n+   | ^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n \n error[E0390]: cannot define inherent `impl` for primitive types\n-  --> $DIR/kinds-of-primitive-impl.rs:21:6\n+  --> $DIR/kinds-of-primitive-impl.rs:21:1\n    |\n LL | impl &MyType {\n-   |      ^^^^^^^\n+   | ^^^^^^^^^^^^\n    |\n    = help: consider using an extension trait instead\n    = note: you could also try moving the reference to uses of `MyType` (such as `self`) within the implementation"}, {"sha": "abc8538e5b330c12bbe9efced869be888ed7237c", "filename": "tests/ui/privacy/private-in-public-ill-formed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-ill-formed.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,16 +1,16 @@\n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/private-in-public-ill-formed.rs:14:10\n+  --> $DIR/private-in-public-ill-formed.rs:14:5\n    |\n LL |     impl <Priv as PrivTr>::AssocAlias {\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/private-in-public-ill-formed.rs:31:10\n+  --> $DIR/private-in-public-ill-formed.rs:31:5\n    |\n LL |     impl <Priv as PrivTr>::AssocAlias {\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type\n    |\n    = note: either implement a trait on it or create a newtype to wrap it instead\n "}, {"sha": "6fd8a03fd8fed49405e2c80ff4a2735d2fac7443", "filename": "tests/ui/traits/trait-or-new-type-instead.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ftraits%2Ftrait-or-new-type-instead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f3d360844fae27ab3318fd715e81ebcc444c876/tests%2Fui%2Ftraits%2Ftrait-or-new-type-instead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-or-new-type-instead.stderr?ref=5f3d360844fae27ab3318fd715e81ebcc444c876", "patch": "@@ -1,11 +1,8 @@\n error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n   --> $DIR/trait-or-new-type-instead.rs:1:1\n    |\n-LL | / impl<T> Option<T> {\n-LL | |\n-LL | |     pub fn foo(&self) { }\n-LL | | }\n-   | |_^ impl for type defined outside of crate.\n+LL | impl<T> Option<T> {\n+   | ^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n    |\n    = note: define and implement a trait or new type instead\n "}]}