{"sha": "ae98a2f570721601c0804f9996dbdf267ca9f193", "node_id": "C_kwDOAAsO6NoAKGFlOThhMmY1NzA3MjE2MDFjMDgwNGY5OTk2ZGJkZjI2N2NhOWYxOTM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-02T15:03:43Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T17:45:59Z"}, "message": "Simplify some code based on newly implemented instructions", "tree": {"sha": "43fc52796913adfc0cf89b99ff76199459af51eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43fc52796913adfc0cf89b99ff76199459af51eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae98a2f570721601c0804f9996dbdf267ca9f193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae98a2f570721601c0804f9996dbdf267ca9f193", "html_url": "https://github.com/rust-lang/rust/commit/ae98a2f570721601c0804f9996dbdf267ca9f193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae98a2f570721601c0804f9996dbdf267ca9f193/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9115eb6471661b8d29826fab4369dca9f79db52", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9115eb6471661b8d29826fab4369dca9f79db52", "html_url": "https://github.com/rust-lang/rust/commit/e9115eb6471661b8d29826fab4369dca9f79db52"}], "stats": {"total": 129, "additions": 28, "deletions": 101}, "files": [{"sha": "540ba1ca79a182f3406a405cfe3150cf220d603a", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ae98a2f570721601c0804f9996dbdf267ca9f193/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ae98a2f570721601c0804f9996dbdf267ca9f193/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ae98a2f570721601c0804f9996dbdf267ca9f193", "patch": "@@ -63,15 +63,15 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"arrayvec\",\n  \"bumpalo\",\n@@ -91,20 +91,20 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n \n [[package]]\n name = \"cranelift-egraph\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"cranelift-entity\",\n  \"fxhash\",\n@@ -117,12 +117,12 @@ dependencies = [\n [[package]]\n name = \"cranelift-entity\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n \n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -133,12 +133,12 @@ dependencies = [\n [[package]]\n name = \"cranelift-isle\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n \n [[package]]\n name = \"cranelift-jit\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -156,7 +156,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-module\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -165,7 +165,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-native\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -175,7 +175,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-object\"\n version = \"0.90.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -310,9 +310,9 @@ checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n \n [[package]]\n name = \"regalloc2\"\n-version = \"0.4.1\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"69025b4a161879ba90719837c06621c3d73cffa147a000aeacf458f6a9572485\"\n+checksum = \"91b2eab54204ea0117fe9a060537e0b07a4e72f7c7d182361ecc346cab2240e5\"\n dependencies = [\n  \"fxhash\",\n  \"log\",\n@@ -391,7 +391,7 @@ checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n [[package]]\n name = \"wasmtime-jit-icache-coherence\"\n version = \"2.0.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime.git#e8f3d03bbe17151530601bac82af912869f09080\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime.git#033758daaf3e7f0af4348e0d996f26de5c6ba4fc\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\","}, {"sha": "12a15fbaee6b3e05de98082d683f473eed7bbf06", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae98a2f570721601c0804f9996dbdf267ca9f193/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae98a2f570721601c0804f9996dbdf267ca9f193/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ae98a2f570721601c0804f9996dbdf267ca9f193", "patch": "@@ -575,12 +575,6 @@ fn codegen_stmt<'tcx>(\n                             _ => unreachable!(\"un op Not for {:?}\", layout.ty),\n                         },\n                         UnOp::Neg => match layout.ty.kind() {\n-                            ty::Int(IntTy::I128) => {\n-                                // FIXME remove this case once ineg.i128 works\n-                                let zero =\n-                                    CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n-                                crate::num::codegen_int_binop(fx, BinOp::Sub, zero, operand)\n-                            }\n                             ty::Int(_) => CValue::by_val(fx.bcx.ins().ineg(val), layout),\n                             ty::Float(_) => CValue::by_val(fx.bcx.ins().fneg(val), layout),\n                             _ => unreachable!(\"un op Neg for {:?}\", layout.ty),"}, {"sha": "76fc399097ad25941928fe0a303f98b57c9e5d5d", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 13, "deletions": 80, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ae98a2f570721601c0804f9996dbdf267ca9f193/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae98a2f570721601c0804f9996dbdf267ca9f193/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=ae98a2f570721601c0804f9996dbdf267ca9f193", "patch": "@@ -197,10 +197,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n         ty => ty,\n     };\n \n-    let val = if int_ty == types::I8 { val } else { fx.bcx.ins().uextend(int_ty, val) };\n-\n-    // FIXME use bmask instead\n-    let mut res = fx.bcx.ins().ineg(val);\n+    let mut res = fx.bcx.ins().bmask(int_ty, val);\n \n     if ty.is_float() {\n         res = fx.bcx.ins().bitcast(ty, res);\n@@ -636,85 +633,21 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, res);\n         }\n         sym::bswap => {\n-            // FIXME(CraneStation/cranelift#794) add bswap instruction to cranelift\n-            fn swap(bcx: &mut FunctionBuilder<'_>, v: Value) -> Value {\n-                match bcx.func.dfg.value_type(v) {\n-                    types::I8 => v,\n-\n-                    // https://code.woboq.org/gcc/include/bits/byteswap.h.html\n-                    types::I16 => {\n-                        let tmp1 = bcx.ins().ishl_imm(v, 8);\n-                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00);\n-\n-                        let tmp2 = bcx.ins().ushr_imm(v, 8);\n-                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF);\n-\n-                        bcx.ins().bor(n1, n2)\n-                    }\n-                    types::I32 => {\n-                        let tmp1 = bcx.ins().ishl_imm(v, 24);\n-                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00_0000);\n-\n-                        let tmp2 = bcx.ins().ishl_imm(v, 8);\n-                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF_0000);\n-\n-                        let tmp3 = bcx.ins().ushr_imm(v, 8);\n-                        let n3 = bcx.ins().band_imm(tmp3, 0x0000_FF00);\n-\n-                        let tmp4 = bcx.ins().ushr_imm(v, 24);\n-                        let n4 = bcx.ins().band_imm(tmp4, 0x0000_00FF);\n-\n-                        let or_tmp1 = bcx.ins().bor(n1, n2);\n-                        let or_tmp2 = bcx.ins().bor(n3, n4);\n-                        bcx.ins().bor(or_tmp1, or_tmp2)\n-                    }\n-                    types::I64 => {\n-                        let tmp1 = bcx.ins().ishl_imm(v, 56);\n-                        let n1 = bcx.ins().band_imm(tmp1, 0xFF00_0000_0000_0000u64 as i64);\n-\n-                        let tmp2 = bcx.ins().ishl_imm(v, 40);\n-                        let n2 = bcx.ins().band_imm(tmp2, 0x00FF_0000_0000_0000u64 as i64);\n-\n-                        let tmp3 = bcx.ins().ishl_imm(v, 24);\n-                        let n3 = bcx.ins().band_imm(tmp3, 0x0000_FF00_0000_0000u64 as i64);\n-\n-                        let tmp4 = bcx.ins().ishl_imm(v, 8);\n-                        let n4 = bcx.ins().band_imm(tmp4, 0x0000_00FF_0000_0000u64 as i64);\n-\n-                        let tmp5 = bcx.ins().ushr_imm(v, 8);\n-                        let n5 = bcx.ins().band_imm(tmp5, 0x0000_0000_FF00_0000u64 as i64);\n-\n-                        let tmp6 = bcx.ins().ushr_imm(v, 24);\n-                        let n6 = bcx.ins().band_imm(tmp6, 0x0000_0000_00FF_0000u64 as i64);\n-\n-                        let tmp7 = bcx.ins().ushr_imm(v, 40);\n-                        let n7 = bcx.ins().band_imm(tmp7, 0x0000_0000_0000_FF00u64 as i64);\n-\n-                        let tmp8 = bcx.ins().ushr_imm(v, 56);\n-                        let n8 = bcx.ins().band_imm(tmp8, 0x0000_0000_0000_00FFu64 as i64);\n-\n-                        let or_tmp1 = bcx.ins().bor(n1, n2);\n-                        let or_tmp2 = bcx.ins().bor(n3, n4);\n-                        let or_tmp3 = bcx.ins().bor(n5, n6);\n-                        let or_tmp4 = bcx.ins().bor(n7, n8);\n-\n-                        let or_tmp5 = bcx.ins().bor(or_tmp1, or_tmp2);\n-                        let or_tmp6 = bcx.ins().bor(or_tmp3, or_tmp4);\n-                        bcx.ins().bor(or_tmp5, or_tmp6)\n-                    }\n-                    types::I128 => {\n-                        let (lo, hi) = bcx.ins().isplit(v);\n-                        let lo = swap(bcx, lo);\n-                        let hi = swap(bcx, hi);\n-                        bcx.ins().iconcat(hi, lo)\n-                    }\n-                    ty => unreachable!(\"bswap {}\", ty),\n-                }\n-            }\n             intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n \n-            let res = CValue::by_val(swap(&mut fx.bcx, val), arg.layout());\n+            let res = match fx.bcx.func.dfg.value_type(val) {\n+                types::I8 => val,\n+                types::I128 => {\n+                    // FIXME(bytecodealliance/wasmtime#1092) bswap.i128 is not yet implemented\n+                    let (lsb, msb) = fx.bcx.ins().isplit(val);\n+                    let lsb_swap = fx.bcx.ins().bswap(lsb);\n+                    let msb_swap = fx.bcx.ins().bswap(msb);\n+                    fx.bcx.ins().iconcat(msb_swap, lsb_swap)\n+                }\n+                _ => fx.bcx.ins().bswap(val),\n+            };\n+            let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n         }\n         sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {"}]}