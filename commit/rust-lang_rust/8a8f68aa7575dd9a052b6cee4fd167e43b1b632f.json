{"sha": "8a8f68aa7575dd9a052b6cee4fd167e43b1b632f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOGY2OGFhNzU3NWRkOWEwNTJiNmNlZTRmZDE2N2U0M2IxYjYzMmY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T17:53:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T17:53:55Z"}, "message": "rustc: Make typeck::instantiate_path() not return an annotation", "tree": {"sha": "e57910d51040d7cf9e9566eafcd1a060530f3eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57910d51040d7cf9e9566eafcd1a060530f3eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a8f68aa7575dd9a052b6cee4fd167e43b1b632f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a8f68aa7575dd9a052b6cee4fd167e43b1b632f", "html_url": "https://github.com/rust-lang/rust/commit/8a8f68aa7575dd9a052b6cee4fd167e43b1b632f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a8f68aa7575dd9a052b6cee4fd167e43b1b632f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae26b775b4ae4a1405effefb015ec44f0311c29f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae26b775b4ae4a1405effefb015ec44f0311c29f", "html_url": "https://github.com/rust-lang/rust/commit/ae26b775b4ae4a1405effefb015ec44f0311c29f"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "8fac7fc3f8070db5e1485d8521d3917b34a476a9", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8a8f68aa7575dd9a052b6cee4fd167e43b1b632f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a8f68aa7575dd9a052b6cee4fd167e43b1b632f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8a8f68aa7575dd9a052b6cee4fd167e43b1b632f", "patch": "@@ -177,10 +177,12 @@ fn ty_param_count_and_ty_for_def(&@fn_ctxt fcx, &ast::span sp, &ast::def defn)\n     }\n }\n \n+type ty_param_substs_opt_and_ty = tup(option::t[vec[ty::t]], ty::t);\n+\n // Instantiates the given path, which must refer to an item with the given\n // number of type parameters and type.\n fn instantiate_path(&@fn_ctxt fcx, &ast::path pth, &ty_param_count_and_ty tpt,\n-                    &span sp, uint ann_tag) -> ast::ann {\n+                    &span sp) -> ty_param_substs_opt_and_ty {\n     auto ty_param_count = tpt._0;\n     auto t = bind_params_in_type(fcx.ccx.tcx, tpt._1);\n \n@@ -211,7 +213,7 @@ fn instantiate_path(&@fn_ctxt fcx, &ast::path pth, &ty_param_count_and_ty tpt,\n         ty_substs_opt = some[vec[ty::t]](ty_substs);\n     }\n \n-    ret ast::ann_type(ann_tag, t, ty_substs_opt, none[@ts_ann]);\n+    ret tup(ty_substs_opt, t);\n }\n \n fn ast_mode_to_mode(ast::mode mode) -> ty::mode {\n@@ -1656,8 +1658,8 @@ fn check_pat(&@fn_ctxt fcx, &@ast::pat pat) -> @ast::pat {\n \n             auto tpt = ty::lookup_item_type(fcx.ccx.sess, fcx.ccx.tcx,\n                                            fcx.ccx.type_cache, vdef._0);\n-            auto ann = instantiate_path(fcx, p, tpt, pat.span,\n-                                        ast::ann_tag(old_ann));\n+\n+            auto path_tpot = instantiate_path(fcx, p, tpt, pat.span);\n \n             alt (struct(fcx.ccx.tcx, t)) {\n                 // N-ary variants have function types.\n@@ -1681,7 +1683,9 @@ fn check_pat(&@fn_ctxt fcx, &@ast::pat pat) -> @ast::pat {\n                         new_subpats += vec(check_pat(fcx, subpat));\n                     }\n \n-                    new_pat = ast::pat_tag(p, new_subpats, ann);\n+                    new_pat = ast::pat_tag(p, new_subpats,\n+                        ast::ann_type(ast::ann_tag(old_ann), path_tpot._1,\n+                                      path_tpot._0, none[@ts_ann]));\n                 }\n \n                 // Nullary variants have tag types.\n@@ -1699,7 +1703,9 @@ fn check_pat(&@fn_ctxt fcx, &@ast::pat pat) -> @ast::pat {\n                         fail;   // TODO: recover\n                     }\n \n-                    new_pat = ast::pat_tag(p, subpats, ann);\n+                    new_pat = ast::pat_tag(p, subpats,\n+                        ast::ann_type(ast::ann_tag(old_ann), path_tpot._1,\n+                                      path_tpot._0, none[@ts_ann]));\n                 }\n             }\n         }\n@@ -1946,10 +1952,11 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n             auto tpt = ty_param_count_and_ty_for_def(fcx, expr.span, defn);\n \n             if (ty::def_has_ty_params(defn)) {\n-                auto ann = instantiate_path(fcx, pth, tpt, expr.span,\n-                                            ast::ann_tag(old_ann));\n+                auto path_tpot = instantiate_path(fcx, pth, tpt, expr.span);\n                 ret @fold::respan[ast::expr_](expr.span,\n-                                            ast::expr_path(pth, ann));\n+                    ast::expr_path(pth,\n+                        ast::ann_type(ast::ann_tag(old_ann), path_tpot._1,\n+                                      path_tpot._0, none[@ts_ann])));\n             }\n \n             // The definition doesn't take type parameters. If the programmer"}]}