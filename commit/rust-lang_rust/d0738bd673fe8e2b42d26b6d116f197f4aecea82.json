{"sha": "d0738bd673fe8e2b42d26b6d116f197f4aecea82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzM4YmQ2NzNmZThlMmI0MmQyNmI2ZDExNmYxOTdmNGFlY2VhODI=", "commit": {"author": {"name": "Nick Torres", "email": "nickrtorres@icloud.com", "date": "2020-04-04T20:53:08Z"}, "committer": {"name": "Nick Torres", "email": "nickrtorres@icloud.com", "date": "2020-04-04T21:16:23Z"}, "message": "result_map_or_into_option: destructure lint tuple or return early", "tree": {"sha": "14c71eee31abfccc29fee4dc06fab4662a300c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14c71eee31abfccc29fee4dc06fab4662a300c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0738bd673fe8e2b42d26b6d116f197f4aecea82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0738bd673fe8e2b42d26b6d116f197f4aecea82", "html_url": "https://github.com/rust-lang/rust/commit/d0738bd673fe8e2b42d26b6d116f197f4aecea82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0738bd673fe8e2b42d26b6d116f197f4aecea82/comments", "author": {"login": "nickrtorres", "id": 9876860, "node_id": "MDQ6VXNlcjk4NzY4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/9876860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickrtorres", "html_url": "https://github.com/nickrtorres", "followers_url": "https://api.github.com/users/nickrtorres/followers", "following_url": "https://api.github.com/users/nickrtorres/following{/other_user}", "gists_url": "https://api.github.com/users/nickrtorres/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickrtorres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickrtorres/subscriptions", "organizations_url": "https://api.github.com/users/nickrtorres/orgs", "repos_url": "https://api.github.com/users/nickrtorres/repos", "events_url": "https://api.github.com/users/nickrtorres/events{/privacy}", "received_events_url": "https://api.github.com/users/nickrtorres/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nickrtorres", "id": 9876860, "node_id": "MDQ6VXNlcjk4NzY4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/9876860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickrtorres", "html_url": "https://github.com/nickrtorres", "followers_url": "https://api.github.com/users/nickrtorres/followers", "following_url": "https://api.github.com/users/nickrtorres/following{/other_user}", "gists_url": "https://api.github.com/users/nickrtorres/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickrtorres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickrtorres/subscriptions", "organizations_url": "https://api.github.com/users/nickrtorres/orgs", "repos_url": "https://api.github.com/users/nickrtorres/repos", "events_url": "https://api.github.com/users/nickrtorres/events{/privacy}", "received_events_url": "https://api.github.com/users/nickrtorres/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a29aedf8db3af19ee0f64dee6f00489812e6cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a29aedf8db3af19ee0f64dee6f00489812e6cb0", "html_url": "https://github.com/rust-lang/rust/commit/3a29aedf8db3af19ee0f64dee6f00489812e6cb0"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "62fcd801bc30d317b282caf35b01b13600ea0983", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 40, "deletions": 34, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d0738bd673fe8e2b42d26b6d116f197f4aecea82/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0738bd673fe8e2b42d26b6d116f197f4aecea82/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d0738bd673fe8e2b42d26b6d116f197f4aecea82", "patch": "@@ -2573,42 +2573,48 @@ fn lint_map_or_none<'a, 'tcx>(\n         false\n     };\n \n-    let mess = if is_option && default_arg_is_none {\n-        let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-        let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-        let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n-                   `and_then(f)` instead\";\n-        Some((\n-            OPTION_MAP_OR_NONE,\n-            msg,\n-            \"try using `and_then` instead\",\n-            format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n-        ))\n-    } else if is_result && f_arg_is_some {\n-        let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n-                   `ok()` instead\";\n-        let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-        Some((\n-            RESULT_MAP_OR_INTO_OPTION,\n-            msg,\n-            \"try using `ok` instead\",\n-            format!(\"{0}.ok()\", self_snippet),\n-        ))\n-    } else {\n-        None\n+    let (lint, msg, instead, hint) = {\n+        if !default_arg_is_none {\n+            // nothing to lint!\n+            return;\n+        }\n+\n+        if is_option {\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n+            let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n+                       `and_then(f)` instead\";\n+            (\n+                OPTION_MAP_OR_NONE,\n+                msg,\n+                \"try using `and_then` instead\",\n+                format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+            )\n+        } else if f_arg_is_some {\n+            let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n+                       `ok()` instead\";\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            (\n+                RESULT_MAP_OR_INTO_OPTION,\n+                msg,\n+                \"try using `ok` instead\",\n+                format!(\"{0}.ok()\", self_snippet),\n+            )\n+        } else {\n+            // nothing to lint!\n+            return;\n+        }\n     };\n \n-    if let Some((lint, msg, instead, hint)) = mess {\n-        span_lint_and_sugg(\n-            cx,\n-            lint,\n-            expr.span,\n-            msg,\n-            instead,\n-            hint,\n-            Applicability::MachineApplicable,\n-        );\n-    }\n+    span_lint_and_sugg(\n+        cx,\n+        lint,\n+        expr.span,\n+        msg,\n+        instead,\n+        hint,\n+        Applicability::MachineApplicable,\n+    );\n }\n \n /// Lint use of `_.and_then(|x| Some(y))` for `Option`s"}, {"sha": "07daf19fa250fa8862f96d6e6461a357ccd665f6", "filename": "tests/ui/result_map_or_into_option.fixed", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0738bd673fe8e2b42d26b6d116f197f4aecea82/tests%2Fui%2Fresult_map_or_into_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d0738bd673fe8e2b42d26b6d116f197f4aecea82/tests%2Fui%2Fresult_map_or_into_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.fixed?ref=d0738bd673fe8e2b42d26b6d116f197f4aecea82", "patch": "@@ -6,9 +6,7 @@ fn main() {\n     let opt: Result<u32, &str> = Ok(1);\n     let _ = opt.ok();\n \n-    let rewrap = |s: u32| -> Option<u32> {\n-        Some(s)\n-    };\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n \n     // A non-Some `f` arg should not emit the lint\n     let opt: Result<u32, &str> = Ok(1);"}]}