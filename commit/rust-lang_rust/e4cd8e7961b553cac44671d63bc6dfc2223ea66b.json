{"sha": "e4cd8e7961b553cac44671d63bc6dfc2223ea66b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Y2Q4ZTc5NjFiNTUzY2FjNDQ2NzFkNjNiYzZkZmMyMjIzZWE2NmI=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-12T20:05:56Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-13T18:35:52Z"}, "message": "Fix ICE caused in unwrap module", "tree": {"sha": "6afc0b883a63c34101cfc63a630814466945d2a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6afc0b883a63c34101cfc63a630814466945d2a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4cd8e7961b553cac44671d63bc6dfc2223ea66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4cd8e7961b553cac44671d63bc6dfc2223ea66b", "html_url": "https://github.com/rust-lang/rust/commit/e4cd8e7961b553cac44671d63bc6dfc2223ea66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4cd8e7961b553cac44671d63bc6dfc2223ea66b/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20a9cd474776277a7ad7435fa0ff7b36f829ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20a9cd474776277a7ad7435fa0ff7b36f829ddf", "html_url": "https://github.com/rust-lang/rust/commit/b20a9cd474776277a7ad7435fa0ff7b36f829ddf"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "8b971e7064b52d9137298169e778a57b23ea7f7e", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4cd8e7961b553cac44671d63bc6dfc2223ea66b/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cd8e7961b553cac44671d63bc6dfc2223ea66b/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=e4cd8e7961b553cac44671d63bc6dfc2223ea66b", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, Path, QPath, UnO\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n@@ -90,6 +91,14 @@ fn collect_unwrap_info<'a, 'tcx>(\n     branch: &'tcx Expr<'_>,\n     invert: bool,\n ) -> Vec<UnwrapInfo<'tcx>> {\n+    fn is_relevant_option_call(cx: &LateContext<'_, '_>, ty: Ty<'_>, method_name: &str) -> bool {\n+        is_type_diagnostic_item(cx, ty, sym!(option_type)) && [\"is_some\", \"is_none\"].contains(&method_name)\n+    }\n+\n+    fn is_relevant_result_call(cx: &LateContext<'_, '_>, ty: Ty<'_>, method_name: &str) -> bool {\n+        is_type_diagnostic_item(cx, ty, sym!(result_type)) && [\"is_ok\", \"is_err\"].contains(&method_name)\n+    }\n+\n     if let ExprKind::Binary(op, left, right) = &expr.kind {\n         match (invert, op.node) {\n             (false, BinOpKind::And) | (false, BinOpKind::BitAnd) | (true, BinOpKind::Or) | (true, BinOpKind::BitOr) => {\n@@ -106,9 +115,8 @@ fn collect_unwrap_info<'a, 'tcx>(\n             if let ExprKind::MethodCall(method_name, _, args) = &expr.kind;\n             if let ExprKind::Path(QPath::Resolved(None, path)) = &args[0].kind;\n             let ty = cx.tables.expr_ty(&args[0]);\n-            if is_type_diagnostic_item(cx, ty, sym!(option_type)) || is_type_diagnostic_item(cx, ty, sym!(result_type));\n             let name = method_name.ident.as_str();\n-            if [\"is_some\", \"is_none\", \"is_ok\", \"is_err\"].contains(&&*name);\n+            if is_relevant_option_call(cx, ty, &name) || is_relevant_result_call(cx, ty, &name);\n             then {\n                 assert!(args.len() == 1);\n                 let unwrappable = match name.as_ref() {"}, {"sha": "49794e0c2419e649b77b5b69c8a43302b33644dc", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4cd8e7961b553cac44671d63bc6dfc2223ea66b/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cd8e7961b553cac44671d63bc6dfc2223ea66b/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=e4cd8e7961b553cac44671d63bc6dfc2223ea66b", "patch": "@@ -78,3 +78,24 @@ fn main() {\n \n     assert!(x.is_ok(), \"{:?}\", x.unwrap_err()); // ok, it's a common test pattern\n }\n+\n+mod issue_5579 {\n+    trait IsErr {\n+        fn is_err(&self, err: &str) -> bool;\n+    }\n+\n+    impl<T> IsErr for Option<T> {\n+        fn is_err(&self, _err: &str) -> bool {\n+            true\n+        }\n+    }\n+\n+    #[allow(unused)]\n+    fn boom() {\n+        let t = Some(1);\n+\n+        if t.is_err(\"\") {\n+            t.unwrap();\n+        }\n+    }\n+}"}]}