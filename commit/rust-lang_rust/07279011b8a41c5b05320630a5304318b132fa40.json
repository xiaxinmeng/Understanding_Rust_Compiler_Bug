{"sha": "07279011b8a41c5b05320630a5304318b132fa40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Mjc5MDExYjhhNDFjNWIwNTMyMDYzMGE1MzA0MzE4YjEzMmZhNDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T00:43:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:32Z"}, "message": "librustc: De-`@mut` the type descriptor info", "tree": {"sha": "216014771f6a0a2e076063d11dd15f86faef5306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216014771f6a0a2e076063d11dd15f86faef5306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07279011b8a41c5b05320630a5304318b132fa40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07279011b8a41c5b05320630a5304318b132fa40", "html_url": "https://github.com/rust-lang/rust/commit/07279011b8a41c5b05320630a5304318b132fa40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07279011b8a41c5b05320630a5304318b132fa40/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b9c828b18647b233f3b20eecb30eb6926a5d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b9c828b18647b233f3b20eecb30eb6926a5d96", "html_url": "https://github.com/rust-lang/rust/commit/e9b9c828b18647b233f3b20eecb30eb6926a5d96"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "104d8f24a368b405cbc37adf11be2b25d7ab8f01", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07279011b8a41c5b05320630a5304318b132fa40/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07279011b8a41c5b05320630a5304318b132fa40/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=07279011b8a41c5b05320630a5304318b132fa40", "patch": "@@ -445,7 +445,7 @@ pub fn get_tydesc_simple(ccx: &CrateContext, t: ty::t) -> ValueRef {\n     get_tydesc(ccx, t).tydesc\n }\n \n-pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> @mut tydesc_info {\n+pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n     {\n         let tydescs = ccx.tydescs.borrow();\n         match tydescs.get().find(&t) {"}, {"sha": "028b3de9d9fb240882835dd9dfeb1b90800fc0c1", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07279011b8a41c5b05320630a5304318b132fa40/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07279011b8a41c5b05320630a5304318b132fa40/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=07279011b8a41c5b05320630a5304318b132fa40", "patch": "@@ -52,7 +52,7 @@ pub struct CrateContext {\n      reachable: @RefCell<HashSet<ast::NodeId>>,\n      item_symbols: RefCell<HashMap<ast::NodeId, ~str>>,\n      link_meta: LinkMeta,\n-     tydescs: RefCell<HashMap<ty::t, @mut tydesc_info>>,\n+     tydescs: RefCell<HashMap<ty::t, @tydesc_info>>,\n      // Set when running emit_tydescs to enforce that no more tydescs are\n      // created.\n      finished_tydescs: Cell<bool>,"}, {"sha": "bcc2c6407a9ea8cc7006f30eb1c4fec53c734e08", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07279011b8a41c5b05320630a5304318b132fa40/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07279011b8a41c5b05320630a5304318b132fa40/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=07279011b8a41c5b05320630a5304318b132fa40", "patch": "@@ -110,7 +110,7 @@ pub fn free_ty_immediate(bcx: @Block, v: ValueRef, t: ty::t) -> @Block {\n }\n \n pub fn lazily_emit_all_tydesc_glue(ccx: @CrateContext,\n-                                   static_ti: @mut tydesc_info) {\n+                                   static_ti: @tydesc_info) {\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_take_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_free_glue, static_ti);\n@@ -176,7 +176,8 @@ pub fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n \n pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n                                           field: uint,\n-                                          ti: &mut tydesc_info) -> bool {\n+                                          ti: &tydesc_info)\n+                                          -> bool {\n     let _icx = push_ctxt(\"lazily_emit_simplified_tydesc_glue\");\n     let simpl = simplified_glue_type(ccx.tcx, field, ti.ty);\n     if simpl != ti.ty {\n@@ -201,7 +202,7 @@ pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n \n pub fn lazily_emit_tydesc_glue(ccx: @CrateContext,\n                                field: uint,\n-                               ti: @mut tydesc_info) {\n+                               ti: @tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_tydesc_glue\");\n     let llfnty = Type::glue_fn(type_of(ccx, ti.ty).ptr_to());\n \n@@ -269,7 +270,7 @@ pub fn call_tydesc_glue_full(bcx: @Block,\n                              v: ValueRef,\n                              tydesc: ValueRef,\n                              field: uint,\n-                             static_ti: Option<@mut tydesc_info>) {\n+                             static_ti: Option<@tydesc_info>) {\n     let _icx = push_ctxt(\"call_tydesc_glue_full\");\n     let ccx = bcx.ccx();\n     // NB: Don't short-circuit even if this block is unreachable because\n@@ -587,7 +588,7 @@ pub fn incr_refcnt_of_boxed(cx: @Block, box_ptr: ValueRef) {\n \n \n // Generates the declaration for (but doesn't emit) a type descriptor.\n-pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @mut tydesc_info {\n+pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n     // If emit_tydescs already ran, then we shouldn't be creating any new\n     // tydescs.\n     assert!(!ccx.finished_tydescs.get());\n@@ -624,7 +625,7 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @mut tydesc_info {\n \n     let ty_name = C_estr_slice(ccx, ppaux::ty_to_str(ccx.tcx, t).to_managed());\n \n-    let inf = @mut tydesc_info {\n+    let inf = @tydesc_info {\n         ty: t,\n         tydesc: gvar,\n         size: llsize,"}]}