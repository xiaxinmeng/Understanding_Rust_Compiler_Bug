{"sha": "68ffe91526510a4640d0d0d718a41f607f49dab3", "node_id": "C_kwDOAAsO6NoAKDY4ZmZlOTE1MjY1MTBhNDY0MGQwZDBkNzE4YTQxZjYwN2Y0OWRhYjM", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-14T12:18:12Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-14T12:18:12Z"}, "message": "Add support for tuple structs", "tree": {"sha": "bf0b3d9cfd668e18d0aa5ae8047649a097f413e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0b3d9cfd668e18d0aa5ae8047649a097f413e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68ffe91526510a4640d0d0d718a41f607f49dab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68ffe91526510a4640d0d0d718a41f607f49dab3", "html_url": "https://github.com/rust-lang/rust/commit/68ffe91526510a4640d0d0d718a41f607f49dab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68ffe91526510a4640d0d0d718a41f607f49dab3/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b6ea8ee868bc6f97b145335d792439449910a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6ea8ee868bc6f97b145335d792439449910a09", "html_url": "https://github.com/rust-lang/rust/commit/8b6ea8ee868bc6f97b145335d792439449910a09"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "ecebc7925116b95796e90cc02661b99c575265cc", "filename": "crates/ide_assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/68ffe91526510a4640d0d0d718a41f607f49dab3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ffe91526510a4640d0d0d718a41f607f49dab3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=68ffe91526510a4640d0d0d718a41f607f49dab3", "patch": "@@ -48,9 +48,21 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let strukt_name = strukt.name()?;\n \n-    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n-    let field_name = field.name()?;\n-    let field_ty = field.ty()?;\n+    let (field_name, field_ty) = match ctx.find_node_at_offset::<ast::RecordField>() {\n+        Some(field) => {\n+            let field_name = field.name()?;\n+            let field_ty = field.ty()?;\n+            (format!(\"{}\", field_name), field_ty)\n+        }\n+        None => {\n+            let field = ctx.find_node_at_offset::<ast::TupleField>()?;\n+            let field_list = ctx.find_node_at_offset::<ast::TupleFieldList>()?;\n+            let field_list_index =\n+                field_list.syntax().children().into_iter().position(|s| &s == field.syntax())?;\n+            let field_ty = field.ty()?;\n+            (format!(\"{}\", field_list_index), field_ty)\n+        }\n+    };\n \n     let sema_field_ty = ctx.sema.resolve_type(&field_ty)?;\n     let krate = sema_field_ty.krate(ctx.db());\n@@ -88,7 +100,7 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n                 let params =\n                     method_source.param_list().unwrap_or_else(|| make::param_list(None, []));\n                 let tail_expr = make::expr_method_call(\n-                    make::ext::field_from_idents([\"self\", &field_name.to_string()]).unwrap(), // This unwrap is ok because we have at least 1 arg in the list\n+                    make::ext::field_from_idents([\"self\", &field_name]).unwrap(), // This unwrap is ok because we have at least 1 arg in the list\n                     make::name_ref(&method_name.to_string()),\n                     make::arg_list([]),\n                 );\n@@ -225,6 +237,37 @@ impl Person {\n         );\n     }\n \n+    #[test]\n+    fn test_generate_delegate_tuple_struct() {\n+        check_assist(\n+            generate_delegate_methods,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+\n+struct Person(A$0ge);\"#,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+\n+struct Person(Age);\n+\n+impl Person {\n+    $0fn age(&self) -> u8 {\n+        self.0.age()\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_generate_delegate_enable_all_attributes() {\n         check_assist("}]}