{"sha": "f54dbe6e3116a475f63b580884f07474239a0b25", "node_id": "C_kwDOAAsO6NoAKGY1NGRiZTZlMzExNmE0NzVmNjNiNTgwODg0ZjA3NDc0MjM5YTBiMjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-24T22:08:35Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-24T22:08:35Z"}, "message": "Revert \"Remove #[alloc_error_handler] from the compiler and library\"\n\nThis reverts commit abc0660118cc95f47445fd33502a11dd448f5968.", "tree": {"sha": "0b806920a4a86480c1a59c8cc126525d38310216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b806920a4a86480c1a59c8cc126525d38310216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54dbe6e3116a475f63b580884f07474239a0b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54dbe6e3116a475f63b580884f07474239a0b25", "html_url": "https://github.com/rust-lang/rust/commit/f54dbe6e3116a475f63b580884f07474239a0b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54dbe6e3116a475f63b580884f07474239a0b25/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33253fa6a42565eeae40e63401a41ac2dcc9e92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/33253fa6a42565eeae40e63401a41ac2dcc9e92f", "html_url": "https://github.com/rust-lang/rust/commit/33253fa6a42565eeae40e63401a41ac2dcc9e92f"}], "stats": {"total": 864, "additions": 842, "deletions": 22}, "files": [{"sha": "fca6012a408c1d0223791027c28ed5348aae64aa", "filename": "compiler/rustc_builtin_macros/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fmessages.ftl?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -4,6 +4,8 @@ builtin_macros_requires_cfg_pattern =\n \n builtin_macros_expected_one_cfg_pattern = expected 1 cfg-pattern\n \n+builtin_macros_alloc_error_must_be_fn = alloc_error_handler must be a function\n+\n builtin_macros_assert_requires_boolean = macro requires a boolean expression as an argument\n     .label = boolean expression required\n "}, {"sha": "82bae9157e79d173e760a685968bafa4fa090a72", "filename": "compiler/rustc_builtin_macros/src/alloc_error_handler.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,97 @@\n+use crate::errors;\n+use crate::util::check_builtin_macro_attribute;\n+\n+use rustc_ast::ptr::P;\n+use rustc_ast::{self as ast, FnHeader, FnSig, Generics, StmtKind};\n+use rustc_ast::{Fn, ItemKind, Stmt, TyKind, Unsafe};\n+use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::Span;\n+use thin_vec::{thin_vec, ThinVec};\n+\n+pub fn expand(\n+    ecx: &mut ExtCtxt<'_>,\n+    _span: Span,\n+    meta_item: &ast::MetaItem,\n+    item: Annotatable,\n+) -> Vec<Annotatable> {\n+    check_builtin_macro_attribute(ecx, meta_item, sym::alloc_error_handler);\n+\n+    let orig_item = item.clone();\n+\n+    // Allow using `#[alloc_error_handler]` on an item statement\n+    // FIXME - if we get deref patterns, use them to reduce duplication here\n+    let (item, is_stmt, sig_span) =\n+        if let Annotatable::Item(item) = &item\n+            && let ItemKind::Fn(fn_kind) = &item.kind\n+        {\n+            (item, false, ecx.with_def_site_ctxt(fn_kind.sig.span))\n+        } else if let Annotatable::Stmt(stmt) = &item\n+            && let StmtKind::Item(item) = &stmt.kind\n+            && let ItemKind::Fn(fn_kind) = &item.kind\n+        {\n+            (item, true, ecx.with_def_site_ctxt(fn_kind.sig.span))\n+        } else {\n+            ecx.sess.parse_sess.span_diagnostic.emit_err(errors::AllocErrorMustBeFn {span: item.span() });\n+            return vec![orig_item];\n+        };\n+\n+    // Generate a bunch of new items using the AllocFnFactory\n+    let span = ecx.with_def_site_ctxt(item.span);\n+\n+    // Generate item statements for the allocator methods.\n+    let stmts = thin_vec![generate_handler(ecx, item.ident, span, sig_span)];\n+\n+    // Generate anonymous constant serving as container for the allocator methods.\n+    let const_ty = ecx.ty(sig_span, TyKind::Tup(ThinVec::new()));\n+    let const_body = ecx.expr_block(ecx.block(span, stmts));\n+    let const_item = ecx.item_const(span, Ident::new(kw::Underscore, span), const_ty, const_body);\n+    let const_item = if is_stmt {\n+        Annotatable::Stmt(P(ecx.stmt_item(span, const_item)))\n+    } else {\n+        Annotatable::Item(const_item)\n+    };\n+\n+    // Return the original item and the new methods.\n+    vec![orig_item, const_item]\n+}\n+\n+// #[rustc_std_internal_symbol]\n+// unsafe fn __rg_oom(size: usize, align: usize) -> ! {\n+//     handler(core::alloc::Layout::from_size_align_unchecked(size, align))\n+// }\n+fn generate_handler(cx: &ExtCtxt<'_>, handler: Ident, span: Span, sig_span: Span) -> Stmt {\n+    let usize = cx.path_ident(span, Ident::new(sym::usize, span));\n+    let ty_usize = cx.ty_path(usize);\n+    let size = Ident::from_str_and_span(\"size\", span);\n+    let align = Ident::from_str_and_span(\"align\", span);\n+\n+    let layout_new = cx.std_path(&[sym::alloc, sym::Layout, sym::from_size_align_unchecked]);\n+    let layout_new = cx.expr_path(cx.path(span, layout_new));\n+    let layout = cx.expr_call(\n+        span,\n+        layout_new,\n+        thin_vec![cx.expr_ident(span, size), cx.expr_ident(span, align)],\n+    );\n+\n+    let call = cx.expr_call_ident(sig_span, handler, thin_vec![layout]);\n+\n+    let never = ast::FnRetTy::Ty(cx.ty(span, TyKind::Never));\n+    let params = thin_vec![cx.param(span, size, ty_usize.clone()), cx.param(span, align, ty_usize)];\n+    let decl = cx.fn_decl(params, never);\n+    let header = FnHeader { unsafety: Unsafe::Yes(span), ..FnHeader::default() };\n+    let sig = FnSig { decl, header, span: span };\n+\n+    let body = Some(cx.block_expr(call));\n+    let kind = ItemKind::Fn(Box::new(Fn {\n+        defaultness: ast::Defaultness::Final,\n+        sig,\n+        generics: Generics::default(),\n+        body,\n+    }));\n+\n+    let attrs = thin_vec![cx.attr_word(sym::rustc_std_internal_symbol, span)];\n+\n+    let item = cx.item(span, Ident::from_str_and_span(\"__rg_oom\", span), attrs, kind);\n+    cx.stmt_item(sig_span, item)\n+}"}, {"sha": "630f9b87bc3ea0bc37f79a488a2854e148619121", "filename": "compiler/rustc_builtin_macros/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -19,6 +19,13 @@ pub(crate) struct OneCfgPattern {\n     pub(crate) span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(builtin_macros_alloc_error_must_be_fn)]\n+pub(crate) struct AllocErrorMustBeFn {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(builtin_macros_assert_requires_boolean)]\n pub(crate) struct AssertRequiresBoolean {"}, {"sha": "8f86ef44aa3ab8f6d07d8a1f19680e27b9d17ebc", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -27,6 +27,7 @@ use rustc_expand::proc_macro::BangProcMacro;\n use rustc_fluent_macro::fluent_messages;\n use rustc_span::symbol::sym;\n \n+mod alloc_error_handler;\n mod assert;\n mod cfg;\n mod cfg_accessible;\n@@ -103,6 +104,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     }\n \n     register_attr! {\n+        alloc_error_handler: alloc_error_handler::expand,\n         bench: test::expand_bench,\n         cfg_accessible: cfg_accessible::Expander,\n         cfg_eval: cfg_eval::expand,"}, {"sha": "4ede2fe4efe82777918ed7cebcefbfe13137872d", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics)]\n+#![feature(start, core_intrinsics, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;\n@@ -22,6 +22,11 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n     core::intrinsics::abort();\n }\n \n+#[alloc_error_handler]\n+fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n+    core::intrinsics::abort();\n+}\n+\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n     let world: Box<&str> = Box::new(\"Hello World!\\0\");"}, {"sha": "2c246ceb37d54fa43940774b79a359f39c346da3", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -6,6 +6,7 @@ use crate::prelude::*;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n+use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -14,14 +15,21 @@ pub(crate) fn codegen(\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n     let Some(kind) = allocator_kind_for_codegen(tcx) else { return false };\n-    codegen_inner(module, unwind_context, kind, tcx.sess.opts.unstable_opts.oom);\n+    codegen_inner(\n+        module,\n+        unwind_context,\n+        kind,\n+        tcx.alloc_error_handler_kind(()).unwrap(),\n+        tcx.sess.opts.unstable_opts.oom,\n+    );\n     true\n }\n \n fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n+    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -63,6 +71,19 @@ fn codegen_inner(\n         );\n     }\n \n+    let sig = Signature {\n+        call_conv: module.target_config().default_call_conv,\n+        params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n+        returns: vec![],\n+    };\n+    crate::common::create_wrapper_function(\n+        module,\n+        unwind_context,\n+        sig,\n+        \"__rust_alloc_error_handler\",\n+        &alloc_error_handler_kind.fn_name(sym::oom),\n+    );\n+\n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n     let mut data_ctx = DataContext::new();\n     data_ctx.set_align(1);"}, {"sha": "754e7931412daa8fe46632a74b3a27b13e2a639b", "filename": "compiler/rustc_codegen_gcc/example/alloc_example.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics, lang_items)]\n+#![feature(start, core_intrinsics, alloc_error_handler, lang_items)]\n #![no_std]\n \n extern crate alloc;\n@@ -21,6 +21,11 @@ fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n     core::intrinsics::abort();\n }\n \n+#[alloc_error_handler]\n+fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n+    core::intrinsics::abort();\n+}\n+\n #[lang = \"eh_personality\"]\n fn eh_personality() -> ! {\n     loop {}"}, {"sha": "4bad33ee879ee4f1c27ba1c2e1352f98c483d9e1", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -5,10 +5,11 @@ use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::OomStrategy;\n+use rustc_span::symbol::sym;\n \n use crate::GccContext;\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind) {\n+pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) {\n     let context = &mods.context;\n     let usize =\n         match tcx.sess.target.pointer_width {\n@@ -86,6 +87,37 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n         // as described in https://github.com/rust-lang/rust/commit/77a96ed5646f7c3ee8897693decc4626fe380643\n     }\n \n+    let types = [usize, usize];\n+    let name = \"__rust_alloc_error_handler\".to_string();\n+    let args: Vec<_> = types.iter().enumerate()\n+        .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n+        .collect();\n+    let func = context.new_function(None, FunctionType::Exported, void, &args, name, false);\n+\n+    if tcx.sess.target.default_hidden_visibility {\n+        #[cfg(feature=\"master\")]\n+        func.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n+    }\n+\n+    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n+    let args: Vec<_> = types.iter().enumerate()\n+        .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n+        .collect();\n+    let callee = context.new_function(None, FunctionType::Extern, void, &args, callee, false);\n+    #[cfg(feature=\"master\")]\n+    callee.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n+\n+    let block = func.new_block(\"entry\");\n+\n+    let args = args\n+        .iter()\n+        .enumerate()\n+        .map(|(i, _)| func.get_param(i as i32).to_rvalue())\n+        .collect::<Vec<_>>();\n+    let _ret = context.new_call(None, callee, &args);\n+    //llvm::LLVMSetTailCall(ret, True);\n+    block.end_with_void_return(None);\n+\n     let name = OomStrategy::SYMBOL.to_string();\n     let global = context.new_global(None, GlobalKind::Exported, i8, name);\n     let value = tcx.sess.opts.unstable_opts.oom.should_panic();"}, {"sha": "1cabb05de975b0fec950fb6ae965ed4de35ade46", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -163,11 +163,11 @@ impl CodegenBackend for GccCodegenBackend {\n }\n \n impl ExtraBackendMethods for GccCodegenBackend {\n-    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind) -> Self::Module {\n+    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) -> Self::Module {\n         let mut mods = GccContext {\n             context: Context::default(),\n         };\n-        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind); }\n+        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, alloc_error_handler_kind); }\n         mods\n     }\n "}, {"sha": "668d929270530023e08c94352b9d7522b3871e75", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -4,6 +4,7 @@ use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{DebugInfo, OomStrategy};\n+use rustc_span::symbol::sym;\n \n use crate::debuginfo;\n use crate::llvm::{self, False, True};\n@@ -14,6 +15,7 @@ pub(crate) unsafe fn codegen(\n     module_llvm: &mut ModuleLlvm,\n     module_name: &str,\n     kind: AllocatorKind,\n+    alloc_error_handler_kind: AllocatorKind,\n ) {\n     let llcx = &*module_llvm.llcx;\n     let llmod = module_llvm.llmod();\n@@ -98,6 +100,52 @@ pub(crate) unsafe fn codegen(\n         llvm::LLVMDisposeBuilder(llbuilder);\n     }\n \n+    // rust alloc error handler\n+    let args = [usize, usize]; // size, align\n+\n+    let ty = llvm::LLVMFunctionType(void, args.as_ptr(), args.len() as c_uint, False);\n+    let name = \"__rust_alloc_error_handler\";\n+    let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n+    // -> ! DIFlagNoReturn\n+    let no_return = llvm::AttributeKind::NoReturn.create_attr(llcx);\n+    attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[no_return]);\n+\n+    if tcx.sess.target.default_hidden_visibility {\n+        llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+    }\n+    if tcx.sess.must_emit_unwind_tables() {\n+        let uwtable = attributes::uwtable_attr(llcx);\n+        attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[uwtable]);\n+    }\n+\n+    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n+    let callee = llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n+    // -> ! DIFlagNoReturn\n+    attributes::apply_to_llfn(callee, llvm::AttributePlace::Function, &[no_return]);\n+    llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n+\n+    let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n+\n+    let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n+    llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n+    let args = args\n+        .iter()\n+        .enumerate()\n+        .map(|(i, _)| llvm::LLVMGetParam(llfn, i as c_uint))\n+        .collect::<Vec<_>>();\n+    let ret = llvm::LLVMRustBuildCall(\n+        llbuilder,\n+        ty,\n+        callee,\n+        args.as_ptr(),\n+        args.len() as c_uint,\n+        [].as_ptr(),\n+        0 as c_uint,\n+    );\n+    llvm::LLVMSetTailCall(ret, True);\n+    llvm::LLVMBuildRetVoid(llbuilder);\n+    llvm::LLVMDisposeBuilder(llbuilder);\n+\n     // __rust_alloc_error_handler_should_panic\n     let name = OomStrategy::SYMBOL;\n     let ll_g = llvm::LLVMRustGetOrInsertGlobal(llmod, name.as_ptr().cast(), name.len(), i8);"}, {"sha": "8305a0a4c286df2c091c91db271c8953c4ca7f5c", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -115,10 +115,11 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         module_name: &str,\n         kind: AllocatorKind,\n+        alloc_error_handler_kind: AllocatorKind,\n     ) -> ModuleLlvm {\n         let mut module_llvm = ModuleLlvm::new_metadata(tcx, module_name);\n         unsafe {\n-            allocator::codegen(tcx, &mut module_llvm, module_name, kind);\n+            allocator::codegen(tcx, &mut module_llvm, module_name, kind, alloc_error_handler_kind);\n         }\n         module_llvm\n     }"}, {"sha": "8f2f829c17c1cd76110180d80c3b2b9331d0eeee", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -219,7 +219,7 @@ fn exported_symbols_provider_local(\n         for symbol_name in ALLOCATOR_METHODS\n             .iter()\n             .map(|method| format!(\"__rust_{}\", method.name))\n-            .chain([OomStrategy::SYMBOL.to_string()])\n+            .chain([\"__rust_alloc_error_handler\".to_string(), OomStrategy::SYMBOL.to_string()])\n         {\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n "}, {"sha": "c5ca7936a2b458cbb9aa5af2d5f71c94c7d7c934", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -635,9 +635,16 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     if let Some(kind) = allocator_kind_for_codegen(tcx) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n-        let module_llvm = tcx\n-            .sess\n-            .time(\"write_allocator_module\", || backend.codegen_allocator(tcx, &llmod_id, kind));\n+        let module_llvm = tcx.sess.time(\"write_allocator_module\", || {\n+            backend.codegen_allocator(\n+                tcx,\n+                &llmod_id,\n+                kind,\n+                // If allocator_kind is Some then alloc_error_handler_kind must\n+                // also be Some.\n+                tcx.alloc_error_handler_kind(()).unwrap(),\n+            )\n+        });\n \n         ongoing_codegen.submit_pre_codegened_module_to_llvm(\n             tcx,"}, {"sha": "64bebe50ddbf23b17a26f5ad3af725a23f803a21", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -123,6 +123,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         tcx: TyCtxt<'tcx>,\n         module_name: &str,\n         kind: AllocatorKind,\n+        alloc_error_handler_kind: AllocatorKind,\n     ) -> Self::Module;\n     /// This generates the codegen unit and returns it along with\n     /// a `u64` giving an estimate of the unit's processing cost."}, {"sha": "48f5bd1cb50488c4085ae32965ea4d0764699da4", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -291,6 +291,8 @@ declare_features! (\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n     /// Allows additional const parameter types, such as `&'static str` or user defined types\n     (incomplete, adt_const_params, \"1.56.0\", Some(95174), None),\n+    /// Allows defining an `#[alloc_error_handler]`.\n+    (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n     /// Allows trait methods with arbitrary self types.\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n     /// Allows using `const` operands in inline assembly."}, {"sha": "876a31abdf882b29f0ce4fd898127026379c61f4", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -47,8 +47,6 @@ declare_features! (\n \n     (removed, advanced_slice_patterns, \"1.0.0\", Some(62254), None,\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n-    /// Allows defining an `#[alloc_error_handler]`.\n-    (removed, alloc_error_handler, \"CURRENT_RUSTC_VERSION\", Some(51540), None, Some(\"now handled by panic handler\")),\n     (removed, allocator, \"1.0.0\", None, None, None),\n     /// Allows a test to fail without failing the whole suite.\n     (removed, allow_fail, \"1.19.0\", Some(46488), None, Some(\"removed due to no clear use cases\")),"}, {"sha": "79b8b417257045a6b60f244acf4f4a0f7acc35d5", "filename": "compiler/rustc_metadata/messages.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fmessages.ftl?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -155,9 +155,19 @@ metadata_no_multiple_global_alloc =\n metadata_prev_global_alloc =\n     previous global allocator defined here\n \n+metadata_no_multiple_alloc_error_handler =\n+    cannot define multiple allocation error handlers\n+    .label = cannot define a new allocation error handler\n+\n+metadata_prev_alloc_error_handler =\n+    previous allocation error handler defined here\n+\n metadata_conflicting_global_alloc =\n     the `#[global_allocator]` in {$other_crate_name} conflicts with global allocator in: {$crate_name}\n \n+metadata_conflicting_alloc_error_handler =\n+    the `#[alloc_error_handler]` in {$other_crate_name} conflicts with allocation error handler in: {$crate_name}\n+\n metadata_global_alloc_required =\n     no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait\n "}, {"sha": "179453238f2ccf776305b4dfee33d827f04ad79a", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -38,8 +38,13 @@ pub struct CStore {\n     /// This crate needs an allocator and either provides it itself, or finds it in a dependency.\n     /// If the above is true, then this field denotes the kind of the found allocator.\n     allocator_kind: Option<AllocatorKind>,\n+    /// This crate needs an allocation error handler and either provides it itself, or finds it in a dependency.\n+    /// If the above is true, then this field denotes the kind of the found allocator.\n+    alloc_error_handler_kind: Option<AllocatorKind>,\n     /// This crate has a `#[global_allocator]` item.\n     has_global_allocator: bool,\n+    /// This crate has a `#[alloc_error_handler]` item.\n+    has_alloc_error_handler: bool,\n \n     /// The interned [StableCrateId]s.\n     pub(crate) stable_crate_ids: StableCrateIdMap,\n@@ -216,10 +221,18 @@ impl CStore {\n         self.allocator_kind\n     }\n \n+    pub(crate) fn alloc_error_handler_kind(&self) -> Option<AllocatorKind> {\n+        self.alloc_error_handler_kind\n+    }\n+\n     pub(crate) fn has_global_allocator(&self) -> bool {\n         self.has_global_allocator\n     }\n \n+    pub(crate) fn has_alloc_error_handler(&self) -> bool {\n+        self.has_alloc_error_handler\n+    }\n+\n     pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n         let json_unused_externs = tcx.sess.opts.json_unused_externs;\n \n@@ -255,7 +268,9 @@ impl CStore {\n             metas: IndexVec::from_iter(iter::once(None)),\n             injected_panic_runtime: None,\n             allocator_kind: None,\n+            alloc_error_handler_kind: None,\n             has_global_allocator: false,\n+            has_alloc_error_handler: false,\n             stable_crate_ids,\n             unused_externs: Vec::new(),\n         }\n@@ -761,6 +776,14 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n             }\n             spans => !spans.is_empty(),\n         };\n+        self.cstore.has_alloc_error_handler = match &*alloc_error_handler_spans(krate) {\n+            [span1, span2, ..] => {\n+                self.sess\n+                    .emit_err(errors::NoMultipleAllocErrorHandler { span2: *span2, span1: *span1 });\n+                true\n+            }\n+            spans => !spans.is_empty(),\n+        };\n \n         // Check to see if we actually need an allocator. This desire comes\n         // about through the `#![needs_allocator]` attribute and is typically\n@@ -801,6 +824,21 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                 }\n             }\n         }\n+        let mut alloc_error_handler =\n+            self.cstore.has_alloc_error_handler.then(|| Symbol::intern(\"this crate\"));\n+        for (_, data) in self.cstore.iter_crate_data() {\n+            if data.has_alloc_error_handler() {\n+                match alloc_error_handler {\n+                    Some(other_crate) => {\n+                        self.sess.emit_err(errors::ConflictingAllocErrorHandler {\n+                            crate_name: data.name(),\n+                            other_crate_name: other_crate,\n+                        });\n+                    }\n+                    None => alloc_error_handler = Some(data.name()),\n+                }\n+            }\n+        }\n \n         if global_allocator.is_some() {\n             self.cstore.allocator_kind = Some(AllocatorKind::Global);\n@@ -816,6 +854,14 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n             }\n             self.cstore.allocator_kind = Some(AllocatorKind::Default);\n         }\n+\n+        if alloc_error_handler.is_some() {\n+            self.cstore.alloc_error_handler_kind = Some(AllocatorKind::Global);\n+        } else {\n+            // The alloc crate provides a default allocation error handler if\n+            // one isn't specified.\n+            self.cstore.alloc_error_handler_kind = Some(AllocatorKind::Default);\n+        }\n     }\n \n     fn inject_dependency_if(\n@@ -991,6 +1037,28 @@ fn global_allocator_spans(krate: &ast::Crate) -> Vec<Span> {\n     f.spans\n }\n \n+fn alloc_error_handler_spans(krate: &ast::Crate) -> Vec<Span> {\n+    struct Finder {\n+        name: Symbol,\n+        spans: Vec<Span>,\n+    }\n+    impl<'ast> visit::Visitor<'ast> for Finder {\n+        fn visit_item(&mut self, item: &'ast ast::Item) {\n+            if item.ident.name == self.name\n+                && attr::contains_name(&item.attrs, sym::rustc_std_internal_symbol)\n+            {\n+                self.spans.push(item.span);\n+            }\n+            visit::walk_item(self, item)\n+        }\n+    }\n+\n+    let name = Symbol::intern(&AllocatorKind::Global.fn_name(sym::oom));\n+    let mut f = Finder { name, spans: Vec::new() };\n+    visit::walk_crate(&mut f, krate);\n+    f.spans\n+}\n+\n // On Windows the compiler would sometimes intermittently fail to open the\n // proc-macro DLL with `Error::LoadLibraryExW`. It is suspected that something in the\n // system still holds a lock on the file, so we retry a few times before calling it"}, {"sha": "51b41b5f6a2148c90e3d81d1e01941ef44b9315b", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -352,13 +352,30 @@ pub struct NoMultipleGlobalAlloc {\n     pub span1: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(metadata_no_multiple_alloc_error_handler)]\n+pub struct NoMultipleAllocErrorHandler {\n+    #[primary_span]\n+    #[label]\n+    pub span2: Span,\n+    #[label(metadata_prev_alloc_error_handler)]\n+    pub span1: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(metadata_conflicting_global_alloc)]\n pub struct ConflictingGlobalAlloc {\n     pub crate_name: Symbol,\n     pub other_crate_name: Symbol,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(metadata_conflicting_alloc_error_handler)]\n+pub struct ConflictingAllocErrorHandler {\n+    pub crate_name: Symbol,\n+    pub other_crate_name: Symbol,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(metadata_global_alloc_required)]\n pub struct GlobalAllocRequired;"}, {"sha": "64245a0460d8f2422b85cd7cd35f43e654e8c811", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -1683,6 +1683,10 @@ impl CrateMetadata {\n         self.root.has_global_allocator\n     }\n \n+    pub(crate) fn has_alloc_error_handler(&self) -> bool {\n+        self.root.has_alloc_error_handler\n+    }\n+\n     pub(crate) fn has_default_lib_allocator(&self) -> bool {\n         self.root.has_default_lib_allocator\n     }"}, {"sha": "141980912b1d6dbaf5085685687ec1280580b28e", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -290,6 +290,7 @@ provide! { tcx, def_id, other, cdata,\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }\n+    has_alloc_error_handler => { cdata.root.has_alloc_error_handler }\n     has_panic_handler => { cdata.root.has_panic_handler }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n     required_panic_strategy => { cdata.root.required_panic_strategy }\n@@ -378,6 +379,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         allocator_kind: |tcx, ()| CStore::from_tcx(tcx).allocator_kind(),\n+        alloc_error_handler_kind: |tcx, ()| CStore::from_tcx(tcx).alloc_error_handler_kind(),\n         is_private_dep: |_tcx, LocalCrate| false,\n         native_library: |tcx, id| {\n             tcx.native_libraries(id.krate)\n@@ -494,6 +496,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n \n         dependency_formats: |tcx, ()| Lrc::new(crate::dependency_format::calculate(tcx)),\n         has_global_allocator: |tcx, LocalCrate| CStore::from_tcx(tcx).has_global_allocator(),\n+        has_alloc_error_handler: |tcx, LocalCrate| CStore::from_tcx(tcx).has_alloc_error_handler(),\n         postorder_cnums: |tcx, ()| {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))"}, {"sha": "17a9daee7d03811d3e531d699e80f6c05628f829", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -676,6 +676,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 panic_in_drop_strategy: tcx.sess.opts.unstable_opts.panic_in_drop,\n                 edition: tcx.sess.edition(),\n                 has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n+                has_alloc_error_handler: tcx.has_alloc_error_handler(LOCAL_CRATE),\n                 has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n                 has_default_lib_allocator: attr::contains_name(&attrs, sym::default_lib_allocator),\n                 proc_macro_data,"}, {"sha": "dd02463e16a077410d96eaefde78649d4f1eb6ee", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -225,6 +225,7 @@ pub(crate) struct CrateRoot {\n     panic_in_drop_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,\n+    has_alloc_error_handler: bool,\n     has_panic_handler: bool,\n     has_default_lib_allocator: bool,\n "}, {"sha": "7109ff95b871060d41b2632d52971162ecb82f99", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -1351,6 +1351,13 @@ rustc_queries! {\n         desc { \"checking if the crate has_global_allocator\" }\n         separate_provide_extern\n     }\n+    query has_alloc_error_handler(_: CrateNum) -> bool {\n+        // This query depends on untracked global state in CStore\n+        eval_always\n+        fatal_cycle\n+        desc { \"checking if the crate has_alloc_error_handler\" }\n+        separate_provide_extern\n+    }\n     query has_panic_handler(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"checking if the crate has_panic_handler\" }\n@@ -1723,6 +1730,10 @@ rustc_queries! {\n         eval_always\n         desc { \"getting the allocator kind for the current crate\" }\n     }\n+    query alloc_error_handler_kind(_: ()) -> Option<AllocatorKind> {\n+        eval_always\n+        desc { \"alloc error handler kind for the current crate\" }\n+    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "08c65a96bc74434bed3708d67ad945e32a160761", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -397,7 +397,7 @@ fn rust_oom(layout: Layout) -> ! {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &core::panic::PanicInfo<'_>) -> !;\n \n-        // This symbol is emitted by rustc .\n+        // This symbol is emitted by rustc next to __rust_alloc_error_handler.\n         // Its value depends on the -Zoom={panic,abort} compiler option.\n         static __rust_alloc_error_handler_should_panic: u8;\n     }\n@@ -426,6 +426,13 @@ fn rust_oom(layout: Layout) -> ! {\n /// Callers of memory allocation APIs wishing to abort computation\n /// in response to an allocation error are encouraged to call this function,\n /// rather than directly invoking `panic!` or similar.\n+///\n+/// The default behavior of this function is to print a message to standard error\n+/// and abort the process.\n+/// It can be replaced with [`set_alloc_error_hook`] and [`take_alloc_error_hook`].\n+///\n+/// [`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html\n+/// [`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[rustc_const_unstable(feature = \"const_alloc_error\", issue = \"92523\")]\n #[cfg(all(not(no_global_oom_handling), not(test)))]\n@@ -446,7 +453,6 @@ pub const fn handle_alloc_error(layout: Layout) -> ! {\n #[cfg(all(not(no_global_oom_handling), test))]\n pub use std::alloc::handle_alloc_error;\n \n-#[cfg(bootstrap)]\n #[cfg(all(not(no_global_oom_handling), not(test)))]\n #[doc(hidden)]\n #[allow(unused_attributes)]"}, {"sha": "7c93c93b4a0199de1473dc2ab6a7196e70fa0a60", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -1531,6 +1531,16 @@ pub(crate) mod builtin {\n         /* compiler built-in */\n     }\n \n+    /// Attribute macro applied to a function to register it as a handler for allocation failure.\n+    ///\n+    /// See also [`std::alloc::handle_alloc_error`](../../../std/alloc/fn.handle_alloc_error.html).\n+    #[unstable(feature = \"alloc_error_handler\", issue = \"51540\")]\n+    #[allow_internal_unstable(rustc_attrs)]\n+    #[rustc_builtin_macro]\n+    pub macro alloc_error_handler($item:item) {\n+        /* compiler built-in */\n+    }\n+\n     /// Keeps the item it's applied to if the passed path is accessible, and removes it otherwise.\n     #[unstable(\n         feature = \"cfg_accessible\","}, {"sha": "10525a16f3a66ebd8970cf8a13afb23351c6d22a", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -76,7 +76,9 @@ pub use crate::macros::builtin::{RustcDecodable, RustcEncodable};\n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use crate::macros::builtin::{bench, derive, global_allocator, test, test_case};\n+pub use crate::macros::builtin::{\n+    alloc_error_handler, bench, derive, global_allocator, test, test_case,\n+};\n \n #[unstable(feature = \"derive_const\", issue = \"none\")]\n pub use crate::macros::builtin::derive_const;"}, {"sha": "c5a5991cc81c47d340a3b7b113c56339671acd7e", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -57,8 +57,9 @@\n #![stable(feature = \"alloc_module\", since = \"1.28.0\")]\n \n use core::intrinsics;\n-use core::ptr;\n use core::ptr::NonNull;\n+use core::sync::atomic::{AtomicPtr, Ordering};\n+use core::{mem, ptr};\n \n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]\n@@ -285,6 +286,76 @@ unsafe impl Allocator for System {\n     }\n }\n \n+static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n+\n+/// Registers a custom allocation error hook, replacing any that was previously registered.\n+///\n+/// The allocation error hook is invoked when an infallible memory allocation fails, before\n+/// the runtime aborts. The default hook prints a message to standard error,\n+/// but this behavior can be customized with the [`set_alloc_error_hook`] and\n+/// [`take_alloc_error_hook`] functions.\n+///\n+/// The hook is provided with a `Layout` struct which contains information\n+/// about the allocation that failed.\n+///\n+/// The allocation error hook is a global resource.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(alloc_error_hook)]\n+///\n+/// use std::alloc::{Layout, set_alloc_error_hook};\n+///\n+/// fn custom_alloc_error_hook(layout: Layout) {\n+///    panic!(\"memory allocation of {} bytes failed\", layout.size());\n+/// }\n+///\n+/// set_alloc_error_hook(custom_alloc_error_hook);\n+/// ```\n+#[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n+pub fn set_alloc_error_hook(hook: fn(Layout)) {\n+    HOOK.store(hook as *mut (), Ordering::SeqCst);\n+}\n+\n+/// Unregisters the current allocation error hook, returning it.\n+///\n+/// *See also the function [`set_alloc_error_hook`].*\n+///\n+/// If no custom hook is registered, the default hook will be returned.\n+#[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n+pub fn take_alloc_error_hook() -> fn(Layout) {\n+    let hook = HOOK.swap(ptr::null_mut(), Ordering::SeqCst);\n+    if hook.is_null() { default_alloc_error_hook } else { unsafe { mem::transmute(hook) } }\n+}\n+\n+fn default_alloc_error_hook(layout: Layout) {\n+    extern \"Rust\" {\n+        // This symbol is emitted by rustc next to __rust_alloc_error_handler.\n+        // Its value depends on the -Zoom={panic,abort} compiler option.\n+        static __rust_alloc_error_handler_should_panic: u8;\n+    }\n+\n+    #[allow(unused_unsafe)]\n+    if unsafe { __rust_alloc_error_handler_should_panic != 0 } {\n+        panic!(\"memory allocation of {} bytes failed\", layout.size());\n+    } else {\n+        rtprintpanic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n+    }\n+}\n+\n+#[cfg(not(test))]\n+#[doc(hidden)]\n+#[alloc_error_handler]\n+#[unstable(feature = \"alloc_internals\", issue = \"none\")]\n+pub fn rust_oom(layout: Layout) -> ! {\n+    let hook = HOOK.load(Ordering::SeqCst);\n+    let hook: fn(Layout) =\n+        if hook.is_null() { default_alloc_error_hook } else { unsafe { mem::transmute(hook) } };\n+    hook(layout);\n+    crate::process::abort()\n+}\n+\n #[cfg(not(test))]\n #[doc(hidden)]\n #[allow(unused_attributes)]"}, {"sha": "31400aa1820586f4b00ae8a4b748ddab35cf96fe", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -236,6 +236,7 @@\n //\n // Language features:\n // tidy-alphabetical-start\n+#![feature(alloc_error_handler)]\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]"}, {"sha": "2aefd7c513dc8d88421600a69b408a23a5b10aa7", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -60,7 +60,9 @@ pub use core::prelude::v1::{RustcDecodable, RustcEncodable};\n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use core::prelude::v1::{bench, derive, global_allocator, test, test_case};\n+pub use core::prelude::v1::{\n+    alloc_error_handler, bench, derive, global_allocator, test, test_case,\n+};\n \n #[unstable(feature = \"derive_const\", issue = \"none\")]\n pub use core::prelude::v1::derive_const;"}, {"sha": "f7c1e683d0d20366df5ba7e87c910934deadca89", "filename": "src/tools/rust-analyzer/crates/hir-def/src/builtin_attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -381,6 +381,10 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    gated!(\n+        alloc_error_handler, Normal, template!(Word), WarnFollowing,\n+        experimental!(alloc_error_handler)\n+    ),\n     gated!(\n         default_lib_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(default_lib_allocator),"}, {"sha": "c93645369928c4dce0ac7dd2399b456687a54f3b", "filename": "tests/run-make/issue-51671/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-51671%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-51671%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-51671%2FMakefile?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -6,3 +6,4 @@ all:\n \t$(RUSTC) --emit=obj app.rs\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_begin_unwind\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_eh_personality\n+\tnm $(TMPDIR)/app.o | $(CGREP) __rg_oom"}, {"sha": "e9dc1e9744fb143a2c406f72de9425a33fde97b8", "filename": "tests/run-make/issue-51671/app.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-51671%2Fapp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-51671%2Fapp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-51671%2Fapp.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"bin\"]\n-#![feature(lang_items)]\n+#![feature(lang_items, alloc_error_handler)]\n #![no_main]\n #![no_std]\n \n@@ -13,3 +13,8 @@ fn panic(_: &PanicInfo) -> ! {\n \n #[lang = \"eh_personality\"]\n fn eh() {}\n+\n+#[alloc_error_handler]\n+fn oom(_: Layout) -> ! {\n+    loop {}\n+}"}, {"sha": "b1229d1b07fc725f4a9bcc5cf8e6166b9d8932c9", "filename": "tests/run-make/issue-69368/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2FMakefile?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,19 @@\n+# ignore-cross-compile\n+include ../tools.mk\n+\n+# Test that previously triggered a linker failure with root cause\n+# similar to one found in the issue #69368.\n+#\n+# The crate that provides oom lang item is missing some other lang\n+# items. Necessary to prevent the use of start-group / end-group.\n+#\n+# The weak lang items are defined in a separate compilation units,\n+# so that linker could omit them if not used.\n+#\n+# The crates that need those weak lang items are dependencies of\n+# crates that provide them.\n+\n+all:\n+\t$(RUSTC) a.rs\n+\t$(RUSTC) b.rs\n+\t$(RUSTC) c.rs"}, {"sha": "a54f429550e7435ed53fd6bc9f6361efceb9ee07", "filename": "tests/run-make/issue-69368/a.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2Fa.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,26 @@\n+#![crate_type = \"rlib\"]\n+#![feature(lang_items)]\n+#![feature(panic_unwind)]\n+#![no_std]\n+\n+extern crate panic_unwind;\n+\n+#[panic_handler]\n+pub fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[no_mangle]\n+extern \"C\" fn __rust_drop_panic() -> ! {\n+    loop {}\n+}\n+\n+#[no_mangle]\n+extern \"C\" fn __rust_foreign_exception() -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {\n+    loop {}\n+}"}, {"sha": "4d6af0266563bddc124cb1e5710bd744ce027e4d", "filename": "tests/run-make/issue-69368/b.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2Fb.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"rlib\"]\n+#![feature(alloc_error_handler)]\n+#![no_std]\n+\n+#[alloc_error_handler]\n+pub fn error_handler(_: core::alloc::Layout) -> ! {\n+    panic!();\n+}"}, {"sha": "729c4249a053a8324b3688223b882284af798e16", "filename": "tests/run-make/issue-69368/c.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fissue-69368%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-69368%2Fc.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,34 @@\n+#![crate_type = \"bin\"]\n+#![feature(start)]\n+#![no_std]\n+\n+extern crate alloc;\n+extern crate a;\n+extern crate b;\n+\n+use alloc::vec::Vec;\n+use core::alloc::*;\n+\n+struct Allocator;\n+\n+unsafe impl GlobalAlloc for Allocator {\n+    unsafe fn alloc(&self, _: Layout) -> *mut u8 {\n+        loop {}\n+    }\n+\n+    unsafe fn dealloc(&self, _: *mut u8, _: Layout) {\n+        loop {}\n+    }\n+}\n+\n+#[global_allocator]\n+static ALLOCATOR: Allocator = Allocator;\n+\n+#[start]\n+fn main(argc: isize, _argv: *const *const u8) -> isize {\n+    let mut v = Vec::new();\n+    for i in 0..argc {\n+        v.push(i);\n+    }\n+    v.iter().sum()\n+}"}, {"sha": "6ffbd3ec6900dc3e1f97255ef1f9b5f508975f1f", "filename": "tests/run-make/wasm-symbols-not-exported/bar.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fwasm-symbols-not-exported%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Frun-make%2Fwasm-symbols-not-exported%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fwasm-symbols-not-exported%2Fbar.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -1,4 +1,4 @@\n-#![feature(panic_handler)]\n+#![feature(panic_handler, alloc_error_handler)]\n #![crate_type = \"cdylib\"]\n #![no_std]\n \n@@ -24,6 +24,11 @@ pub extern fn foo(a: u32) -> u32 {\n     a * 2\n }\n \n+#[alloc_error_handler]\n+fn a(_: core::alloc::Layout) -> ! {\n+    loop {}\n+}\n+\n #[panic_handler]\n fn b(_: &core::panic::PanicInfo) -> ! {\n     loop {}"}, {"sha": "cd06423e3a557279ebb5fe61522922fdf3a0f126", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags:-C panic=abort\n+\n+#![feature(alloc_error_handler)]\n+#![no_std]\n+#![no_main]\n+\n+use core::alloc::Layout;\n+\n+#[alloc_error_handler]\n+fn oom(\n+    info: &Layout, //~^ ERROR mismatched types\n+) -> () //~^^ ERROR mismatched types\n+{\n+    loop {}\n+}\n+\n+#[panic_handler]\n+fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "de92841d7f18e835699495ea9f5e8744ea74cebb", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,44 @@\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:1\n+   |\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL | // fn oom(\n+LL | ||     info: &Layout,\n+LL | || ) -> ()\n+   | ||_______- arguments to this function are incorrect\n+LL | |  {\n+LL | |      loop {}\n+LL | |  }\n+   | |__^ expected `&Layout`, found `Layout`\n+   |\n+note: function defined here\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:4\n+   |\n+LL | fn oom(\n+   |    ^^^\n+LL |     info: &Layout,\n+   |     -------------\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:1\n+   |\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL | // fn oom(\n+LL | ||     info: &Layout,\n+LL | || ) -> ()\n+   | ||_______^ expected `!`, found `()`\n+LL | |  {\n+LL | |      loop {}\n+LL | |  }\n+   | |__- expected `!` because of return type\n+   |\n+   = note:   expected type `!`\n+           found unit type `()`\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4f76257fc726769df8d21c61816611337c032be8", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags:-C panic=abort\n+\n+#![feature(alloc_error_handler)]\n+#![no_std]\n+#![no_main]\n+\n+struct Layout;\n+\n+#[alloc_error_handler]\n+fn oom(\n+    info: Layout, //~^ ERROR mismatched types\n+) { //~^^ ERROR mismatched types\n+    loop {}\n+}\n+\n+#[panic_handler]\n+fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "7a495380f2ba17376e5bf75bdf2e1f387b8035cf", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,50 @@\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:1\n+   |\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL | // fn oom(\n+LL | ||     info: Layout,\n+LL | || ) {\n+   | ||_- arguments to this function are incorrect\n+LL | |      loop {}\n+LL | |  }\n+   | |__^ expected `Layout`, found `core::alloc::Layout`\n+   |\n+   = note: `core::alloc::Layout` and `Layout` have similar names, but are actually distinct types\n+note: `core::alloc::Layout` is defined in crate `core`\n+  --> $SRC_DIR/core/src/alloc/layout.rs:LL:COL\n+note: `Layout` is defined in the current crate\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:7:1\n+   |\n+LL | struct Layout;\n+   | ^^^^^^^^^^^^^\n+note: function defined here\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:4\n+   |\n+LL | fn oom(\n+   |    ^^^\n+LL |     info: Layout,\n+   |     ------------\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:1\n+   |\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL | // fn oom(\n+LL | ||     info: Layout,\n+LL | || ) {\n+   | ||_^ expected `!`, found `()`\n+LL | |      loop {}\n+LL | |  }\n+   | |__- expected `!` because of return type\n+   |\n+   = note:   expected type `!`\n+           found unit type `()`\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ea9ad39a70d81d2b6db694dcc56d406a2dcca461", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags:-C panic=abort\n+\n+#![feature(alloc_error_handler)]\n+#![no_std]\n+#![no_main]\n+\n+struct Layout;\n+\n+#[alloc_error_handler]\n+fn oom() -> ! { //~ ERROR function takes 0 arguments but 1 argument was supplied\n+    loop {}\n+}\n+\n+#[panic_handler]\n+fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "eb739b149a1030083d4727c837f0126cf473fa09", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,21 @@\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/alloc-error-handler-bad-signature-3.rs:10:1\n+   |\n+LL |   #[alloc_error_handler]\n+   |   ---------------------- in this procedural macro expansion\n+LL |   fn oom() -> ! {\n+   |  _-^^^^^^^^^^^^\n+LL | |     loop {}\n+LL | | }\n+   | |_- unexpected argument of type `core::alloc::Layout`\n+   |\n+note: function defined here\n+  --> $DIR/alloc-error-handler-bad-signature-3.rs:10:4\n+   |\n+LL | fn oom() -> ! {\n+   |    ^^^\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "8be09500f4e4ed0ab22a588430abb58f6409a8fe", "filename": "tests/ui/alloc-error/default-alloc-error-hook.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Fdefault-alloc-error-hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Falloc-error%2Fdefault-alloc-error-hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Fdefault-alloc-error-hook.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -2,7 +2,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n \n-use std::alloc::{handle_alloc_error, Layout};\n+use std::alloc::{Layout, handle_alloc_error};\n use std::env;\n use std::process::Command;\n use std::str;\n@@ -24,5 +24,5 @@ fn main() {\n         .strip_suffix(\"qemu: uncaught target signal 6 (Aborted) - core dumped\\n\")\n         .unwrap_or(stderr);\n \n-    assert!(stderr.contains(\"memory allocation of 42 bytes failed\"));\n+    assert_eq!(stderr, \"memory allocation of 42 bytes failed\\n\");\n }"}, {"sha": "28926243390932390a6873f0c85fea9b707e6493", "filename": "tests/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,84 @@\n+// run-pass\n+// ignore-android no libc\n+// ignore-emscripten no libc\n+// ignore-sgx no libc\n+// ignore-wasm32 no libc\n+// only-linux\n+// compile-flags:-C panic=abort\n+// aux-build:helper.rs\n+\n+#![feature(rustc_private, lang_items)]\n+#![feature(alloc_error_handler)]\n+#![no_std]\n+#![no_main]\n+\n+extern crate alloc;\n+extern crate libc;\n+\n+// ARM targets need these symbols\n+#[no_mangle]\n+pub fn __aeabi_unwind_cpp_pr0() {}\n+\n+#[no_mangle]\n+pub fn __aeabi_unwind_cpp_pr1() {}\n+\n+use alloc::boxed::Box;\n+use alloc::string::ToString;\n+use core::alloc::{GlobalAlloc, Layout};\n+use core::ptr::null_mut;\n+\n+extern crate helper;\n+\n+struct MyAllocator;\n+\n+#[alloc_error_handler]\n+fn my_oom(layout: Layout) -> ! {\n+    use alloc::fmt::write;\n+    unsafe {\n+        let size = layout.size();\n+        let mut s = alloc::string::String::new();\n+        write(&mut s, format_args!(\"My OOM: failed to allocate {} bytes!\\n\", size)).unwrap();\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n+        libc::exit(0)\n+    }\n+}\n+\n+unsafe impl GlobalAlloc for MyAllocator {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        if layout.size() < 4096 { libc::malloc(layout.size()) as _ } else { null_mut() }\n+    }\n+    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+}\n+\n+#[global_allocator]\n+static A: MyAllocator = MyAllocator;\n+\n+#[panic_handler]\n+fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n+    unsafe {\n+        let s = panic_info.to_string();\n+        const PSTR: &str = \"panic occurred: \";\n+        const CR: &str = \"\\n\";\n+        libc::write(libc::STDERR_FILENO, PSTR.as_ptr() as *const _, PSTR.len());\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n+        libc::write(libc::STDERR_FILENO, CR.as_ptr() as *const _, CR.len());\n+        libc::exit(1)\n+    }\n+}\n+\n+// Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n+// However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n+// in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n+// unwind. So, for this test case we will define the symbol.\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn rust_eh_personality() {}\n+\n+#[derive(Default, Debug)]\n+struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n+\n+#[no_mangle]\n+fn main(_argc: i32, _argv: *const *const u8) -> isize {\n+    let zero = Box::<Page>::new(Default::default());\n+    helper::work_with(&zero);\n+    1\n+}"}, {"sha": "78d189d20b64d4d9393595cf46190a976404fa9d", "filename": "tests/ui/feature-gates/feature-gate-alloc-error-handler.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags:-C panic=abort\n+\n+#![no_std]\n+#![no_main]\n+\n+use core::alloc::Layout;\n+\n+#[alloc_error_handler] //~ ERROR use of unstable library feature 'alloc_error_handler'\n+fn oom(info: Layout) -> ! {\n+    loop {}\n+}\n+\n+#[panic_handler]\n+fn panic(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "f414eb463dfbcc1f5747aaa70f060a3453dc92c4", "filename": "tests/ui/feature-gates/feature-gate-alloc-error-handler.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'alloc_error_handler'\n+  --> $DIR/feature-gate-alloc-error-handler.rs:8:3\n+   |\n+LL | #[alloc_error_handler]\n+   |   ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51540 <https://github.com/rust-lang/rust/issues/51540> for more information\n+   = help: add `#![feature(alloc_error_handler)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2dc509f2c632da0b599b2be0beacc1a39c0f4594", "filename": "tests/ui/missing/missing-allocator.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Fmissing%2Fmissing-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54dbe6e3116a475f63b580884f07474239a0b25/tests%2Fui%2Fmissing%2Fmissing-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-allocator.rs?ref=f54dbe6e3116a475f63b580884f07474239a0b25", "patch": "@@ -3,10 +3,16 @@\n \n #![no_std]\n #![crate_type = \"staticlib\"]\n+#![feature(alloc_error_handler)]\n \n #[panic_handler]\n fn panic(_: &core::panic::PanicInfo) -> ! {\n     loop {}\n }\n \n+#[alloc_error_handler]\n+fn oom(_: core::alloc::Layout) -> ! {\n+    loop {}\n+}\n+\n extern crate alloc;"}]}