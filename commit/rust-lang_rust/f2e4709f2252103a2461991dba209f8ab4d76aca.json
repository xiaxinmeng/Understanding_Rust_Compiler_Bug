{"sha": "f2e4709f2252103a2461991dba209f8ab4d76aca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZTQ3MDlmMjI1MjEwM2EyNDYxOTkxZGJhMjA5ZjhhYjRkNzZhY2E=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-09T14:31:52Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-09T14:31:52Z"}, "message": "improve comments", "tree": {"sha": "2dec83755c18c7629f78d2d8723059f8393ffe63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dec83755c18c7629f78d2d8723059f8393ffe63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2e4709f2252103a2461991dba209f8ab4d76aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e4709f2252103a2461991dba209f8ab4d76aca", "html_url": "https://github.com/rust-lang/rust/commit/f2e4709f2252103a2461991dba209f8ab4d76aca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2e4709f2252103a2461991dba209f8ab4d76aca/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c838d737ffd30172e394eaf64dd087529a2b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c838d737ffd30172e394eaf64dd087529a2b6f", "html_url": "https://github.com/rust-lang/rust/commit/e1c838d737ffd30172e394eaf64dd087529a2b6f"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "0335aba914460150bff0ca9710e618c5c412e393", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2e4709f2252103a2461991dba209f8ab4d76aca/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2e4709f2252103a2461991dba209f8ab4d76aca/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f2e4709f2252103a2461991dba209f8ab4d76aca", "patch": "@@ -1360,8 +1360,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let min = before.len() as u64 + after.len() as u64;\n                 let (opt_slice_ty, expected) =\n                     self.check_array_pat_len(span, element_ty, expected, slice, len, min);\n-                // opt_slice_ty.is_none() => slice.is_none()\n-                // Note, though, that opt_slice_ty could be Some(error_ty).\n+                // `opt_slice_ty.is_none()` => `slice.is_none()`.\n+                // Note, though, that opt_slice_ty could be `Some(error_ty)`.\n                 assert!(opt_slice_ty.is_some() || slice.is_none());\n                 (element_ty, opt_slice_ty, expected)\n             }\n@@ -1394,7 +1394,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type check the length of an array pattern.\n     ///\n     /// Returns both the type of the variable length pattern (or `None`), and the potentially\n-    /// inferred array type. We should only return `None` for the slice type if `slice.is_none()`.\n+    /// inferred array type. We only return `None` for the slice type if `slice.is_none()`.\n     fn check_array_pat_len(\n         &self,\n         span: Span,"}]}