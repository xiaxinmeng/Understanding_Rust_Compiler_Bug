{"sha": "7b3a7819371cef92a187e9bac8f7810ccde15216", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiM2E3ODE5MzcxY2VmOTJhMTg3ZTliYWM4Zjc4MTBjY2RlMTUyMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-28T13:56:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-28T13:56:32Z"}, "message": "Auto merge of #73964 - jyn514:sane-defaults, r=Mark-Simulacrum\n\nImprove defaults in x.py\n\n- Make the default stage dependent on the subcommand\n- Don't build stage1 rustc artifacts with x.py build --stage 1. If this is what you want, use x.py build --stage 2 instead, which gives you a working libstd.\n- Change default debuginfo when debug = true from 2 to 1\n\nI tried to fix CI to use `--stage 2` everywhere it currently has no stage, but I might have missed a spot.\nThis does not update much of the documentation - most of it is in https://github.com/rust-lang/rustc-dev-guide/ or https://github.com/rust-lang/rust-forge and will need a separate PR.\n\nSee individual commits for a detailed rationale of each change.\nSee also the MCP: https://github.com/rust-lang/compiler-team/issues/326\n\nr? @Mark-Simulacrum , but anyone is free to give an opinion.", "tree": {"sha": "a67620ed2276657f29e99763d4dd4d94dc14be27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a67620ed2276657f29e99763d4dd4d94dc14be27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3a7819371cef92a187e9bac8f7810ccde15216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3a7819371cef92a187e9bac8f7810ccde15216", "html_url": "https://github.com/rust-lang/rust/commit/7b3a7819371cef92a187e9bac8f7810ccde15216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3a7819371cef92a187e9bac8f7810ccde15216/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c28244cf0fc9868f55070e55b8f332d196eaf3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c28244cf0fc9868f55070e55b8f332d196eaf3f", "html_url": "https://github.com/rust-lang/rust/commit/2c28244cf0fc9868f55070e55b8f332d196eaf3f"}, {"sha": "da40cf81e63d04dced9d943743bb2a58801916e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/da40cf81e63d04dced9d943743bb2a58801916e7", "html_url": "https://github.com/rust-lang/rust/commit/da40cf81e63d04dced9d943743bb2a58801916e7"}], "stats": {"total": 1196, "additions": 660, "deletions": 536}, "files": [{"sha": "565c916db5b5d186b6c73c7006a7eed445ed450e", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -406,7 +406,7 @@ jobs:\n             os: windows-latest-xl\n           - name: x86_64-msvc-cargo\n             env:\n-              SCRIPT: python x.py test src/tools/cargotest src/tools/cargo\n+              SCRIPT: python x.py --stage 2 test src/tools/cargotest src/tools/cargo\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --enable-lld\"\n               VCVARS_BAT: vcvars64.bat\n               NO_DEBUG_ASSERTIONS: 1\n@@ -598,7 +598,7 @@ jobs:\n             os: macos-latest\n           - name: x86_64-apple\n             env:\n-              SCRIPT: \"./x.py test\"\n+              SCRIPT: \"./x.py --stage 2 test\"\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.8"}, {"sha": "8ecd8d88d4895a8ddd082c6342efd6e9ffaefc2b", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -341,7 +341,10 @@\n # Debuginfo for tests run with compiletest is not controlled by this option\n # and needs to be enabled separately with `debuginfo-level-tests`.\n #\n-# Defaults to 2 if debug is true\n+# Note that debuginfo-level = 2 generates several gigabytes of debuginfo\n+# and will slow down the linking process significantly.\n+#\n+# Defaults to 1 if debug is true\n #debuginfo-level = 0\n \n # Debuginfo level for the compiler."}, {"sha": "144e146685fb20658d051a1a92a9da41a4e5644a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -232,7 +232,7 @@ impl StepDescription {\n                 }\n \n                 if !attempted_run {\n-                    panic!(\"Error: no rules matched {}.\", path.display());\n+                    panic!(\"error: no rules matched {}\", path.display());\n                 }\n             }\n         }\n@@ -501,16 +501,7 @@ impl<'a> Builder<'a> {\n             _ => return None,\n         };\n \n-        let builder = Builder {\n-            build,\n-            top_stage: build.config.stage.unwrap_or(2),\n-            kind,\n-            cache: Cache::new(),\n-            stack: RefCell::new(Vec::new()),\n-            time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n-            paths: vec![],\n-        };\n-\n+        let builder = Self::new_internal(build, kind, vec![]);\n         let builder = &builder;\n         let mut should_run = ShouldRun::new(builder);\n         for desc in Builder::get_step_descriptions(builder.kind) {\n@@ -535,6 +526,32 @@ impl<'a> Builder<'a> {\n         Some(help)\n     }\n \n+    fn new_internal(build: &Build, kind: Kind, paths: Vec<PathBuf>) -> Builder<'_> {\n+        let top_stage = if let Some(explicit_stage) = build.config.stage {\n+            explicit_stage\n+        } else {\n+            // See https://github.com/rust-lang/compiler-team/issues/326\n+            match kind {\n+                Kind::Doc => 0,\n+                Kind::Build | Kind::Test => 1,\n+                Kind::Bench | Kind::Dist | Kind::Install => 2,\n+                // These are all bootstrap tools, which don't depend on the compiler.\n+                // The stage we pass shouldn't matter, but use 0 just in case.\n+                Kind::Check | Kind::Clippy | Kind::Fix | Kind::Run | Kind::Format => 0,\n+            }\n+        };\n+\n+        Builder {\n+            build,\n+            top_stage,\n+            kind,\n+            cache: Cache::new(),\n+            stack: RefCell::new(Vec::new()),\n+            time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n+            paths,\n+        }\n+    }\n+\n     pub fn new(build: &Build) -> Builder<'_> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n@@ -550,15 +567,20 @@ impl<'a> Builder<'a> {\n             Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n         };\n \n-        Builder {\n-            build,\n-            top_stage: build.config.stage.unwrap_or(2),\n-            kind,\n-            cache: Cache::new(),\n-            stack: RefCell::new(Vec::new()),\n-            time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n-            paths: paths.to_owned(),\n+        let this = Self::new_internal(build, kind, paths.to_owned());\n+\n+        // CI should always run stage 2 builds, unless it specifically states otherwise\n+        #[cfg(not(test))]\n+        if build.config.stage.is_none() && build.ci_env != crate::CiEnv::None {\n+            match kind {\n+                Kind::Test | Kind::Doc | Kind::Build | Kind::Bench | Kind::Dist | Kind::Install => {\n+                    assert_eq!(this.top_stage, 2)\n+                }\n+                Kind::Check | Kind::Clippy | Kind::Fix | Kind::Run | Kind::Format => {}\n+            }\n         }\n+\n+        this\n     }\n \n     pub fn execute_cli(&self) {"}, {"sha": "4293844fcbf9466245055c7336d13ca876639667", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 558, "deletions": 459, "changes": 1017, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -2,8 +2,6 @@ use super::*;\n use crate::config::{Config, TargetSelection};\n use std::thread;\n \n-use pretty_assertions::assert_eq;\n-\n fn configure(host: &[&str], target: &[&str]) -> Config {\n     let mut config = Config::default_opts();\n     // don't save toolstates\n@@ -35,463 +33,564 @@ fn first<A, B>(v: Vec<(A, B)>) -> Vec<A> {\n     v.into_iter().map(|(a, _)| a).collect::<Vec<_>>()\n }\n \n-#[test]\n-fn dist_baseline() {\n-    let build = Build::new(configure(&[], &[]));\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-\n-    assert_eq!(first(builder.cache.all::<dist::Docs>()), &[dist::Docs { host: a },]);\n-    assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[dist::Mingw { host: a },]);\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Rustc>()),\n-        &[dist::Rustc { compiler: Compiler { host: a, stage: 2 } },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Std>()),\n-        &[dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },]\n-    );\n-    assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n-    // Make sure rustdoc is only built once.\n-    assert_eq!(\n-        first(builder.cache.all::<tool::Rustdoc>()),\n-        &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n-    );\n-}\n-\n-#[test]\n-fn dist_with_targets() {\n-    let build = Build::new(configure(&[], &[\"B\"]));\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Docs>()),\n-        &[dist::Docs { host: a }, dist::Docs { host: b },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Mingw>()),\n-        &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Rustc>()),\n-        &[dist::Rustc { compiler: Compiler { host: a, stage: 2 } },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Std>()),\n-        &[\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            dist::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-        ]\n-    );\n-    assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n-}\n-\n-#[test]\n-fn dist_with_hosts() {\n-    let build = Build::new(configure(&[\"B\"], &[]));\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Docs>()),\n-        &[dist::Docs { host: a }, dist::Docs { host: b },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Mingw>()),\n-        &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Rustc>()),\n-        &[\n-            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n-            dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n-        ]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Std>()),\n-        &[\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-        ]\n-    );\n-    assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n-}\n-\n-#[test]\n-fn dist_only_cross_host() {\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-    let mut build = Build::new(configure(&[\"B\"], &[]));\n-    build.config.docs = false;\n-    build.config.extended = true;\n-    build.hosts = vec![b];\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n-\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Rustc>()),\n-        &[dist::Rustc { compiler: Compiler { host: b, stage: 2 } },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Rustc>()),\n-        &[\n-            compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n-            compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n-        ]\n-    );\n-}\n-\n-#[test]\n-fn dist_with_targets_and_hosts() {\n-    let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-    let c = TargetSelection::from_user(\"C\");\n-\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Docs>()),\n-        &[dist::Docs { host: a }, dist::Docs { host: b }, dist::Docs { host: c },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Mingw>()),\n-        &[dist::Mingw { host: a }, dist::Mingw { host: b }, dist::Mingw { host: c },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Rustc>()),\n-        &[\n-            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n-            dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n-        ]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Std>()),\n-        &[\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-            dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-        ]\n-    );\n-    assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n-}\n-\n-#[test]\n-fn dist_with_target_flag() {\n-    let mut config = configure(&[\"B\"], &[\"C\"]);\n-    config.skip_only_host_steps = true; // as-if --target=C was passed\n-    let build = Build::new(config);\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-    let c = TargetSelection::from_user(\"C\");\n-\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Docs>()),\n-        &[dist::Docs { host: a }, dist::Docs { host: b }, dist::Docs { host: c },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Mingw>()),\n-        &[dist::Mingw { host: a }, dist::Mingw { host: b }, dist::Mingw { host: c },]\n-    );\n-    assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[]);\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Std>()),\n-        &[\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-            dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-        ]\n-    );\n-    assert_eq!(first(builder.cache.all::<dist::Src>()), &[]);\n-}\n-\n-#[test]\n-fn dist_with_same_targets_and_hosts() {\n-    let build = Build::new(configure(&[\"B\"], &[\"B\"]));\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Docs>()),\n-        &[dist::Docs { host: a }, dist::Docs { host: b },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Mingw>()),\n-        &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Rustc>()),\n-        &[\n-            dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n-            dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n-        ]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<dist::Std>()),\n-        &[\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-        ]\n-    );\n-    assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Std>()),\n-        &[\n-            compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-        ]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Assemble>()),\n-        &[\n-            compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n-            compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n-            compile::Assemble { target_compiler: Compiler { host: a, stage: 2 } },\n-            compile::Assemble { target_compiler: Compiler { host: b, stage: 2 } },\n-        ]\n-    );\n-}\n-\n-#[test]\n-fn build_default() {\n-    let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-    let c = TargetSelection::from_user(\"C\");\n-\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Std>()),\n-        &[\n-            compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-            compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-            compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-            compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n-        ]\n-    );\n-    assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Rustc>()),\n-        &[\n-            compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n-            compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: a },\n-            compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: a },\n-            compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n-            compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: b },\n-            compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: b },\n-        ]\n-    );\n-}\n-\n-#[test]\n-fn build_with_target_flag() {\n-    let mut config = configure(&[\"B\"], &[\"C\"]);\n-    config.skip_only_host_steps = true;\n-    let build = Build::new(config);\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n-\n-    let a = TargetSelection::from_user(\"A\");\n-    let b = TargetSelection::from_user(\"B\");\n-    let c = TargetSelection::from_user(\"C\");\n-\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Std>()),\n-        &[\n-            compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-            compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n-            compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-            compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n-            compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-            compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n-        ]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Assemble>()),\n-        &[\n-            compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n-            compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n-            compile::Assemble { target_compiler: Compiler { host: a, stage: 2 } },\n-            compile::Assemble { target_compiler: Compiler { host: b, stage: 2 } },\n-        ]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Rustc>()),\n-        &[\n-            compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n-            compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n-            compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n-        ]\n-    );\n-}\n-\n-#[test]\n-fn test_with_no_doc_stage0() {\n-    let mut config = configure(&[], &[]);\n-    config.stage = Some(0);\n-    config.cmd = Subcommand::Test {\n-        paths: vec![\"library/std\".into()],\n-        test_args: vec![],\n-        rustc_args: vec![],\n-        fail_fast: true,\n-        doc_tests: DocTests::No,\n-        bless: false,\n-        compare_mode: None,\n-        rustfix_coverage: false,\n-        pass: None,\n-    };\n-\n-    let build = Build::new(config);\n-    let mut builder = Builder::new(&build);\n-\n-    let host = TargetSelection::from_user(\"A\");\n-\n-    builder\n-        .run_step_descriptions(&[StepDescription::from::<test::Crate>()], &[\"library/std\".into()]);\n-\n-    // Ensure we don't build any compiler artifacts.\n-    assert!(!builder.cache.contains::<compile::Rustc>());\n-    assert_eq!(\n-        first(builder.cache.all::<test::Crate>()),\n-        &[test::Crate {\n-            compiler: Compiler { host, stage: 0 },\n-            target: host,\n-            mode: Mode::Std,\n-            test_kind: test::TestKind::Test,\n-            krate: INTERNER.intern_str(\"std\"),\n-        },]\n-    );\n-}\n-\n-#[test]\n-fn test_exclude() {\n-    let mut config = configure(&[], &[]);\n-    config.exclude = vec![\"src/tools/tidy\".into()];\n-    config.cmd = Subcommand::Test {\n-        paths: Vec::new(),\n-        test_args: Vec::new(),\n-        rustc_args: Vec::new(),\n-        fail_fast: true,\n-        doc_tests: DocTests::No,\n-        bless: false,\n-        compare_mode: None,\n-        rustfix_coverage: false,\n-        pass: None,\n-    };\n-\n-    let build = Build::new(config);\n-    let builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n-\n-    // Ensure we have really excluded tidy\n-    assert!(!builder.cache.contains::<test::Tidy>());\n-\n-    // Ensure other tests are not affected.\n-    assert!(builder.cache.contains::<test::RustdocUi>());\n-}\n-\n-#[test]\n-fn doc_default() {\n-    let mut config = configure(&[], &[]);\n-    config.compiler_docs = true;\n-    config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n-    let build = Build::new(config);\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);\n-    let a = TargetSelection::from_user(\"A\");\n-\n-    // error_index_generator uses stage 1 to share rustdoc artifacts with the\n-    // rustdoc tool.\n-    assert_eq!(\n-        first(builder.cache.all::<doc::ErrorIndex>()),\n-        &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<tool::ErrorIndex>()),\n-        &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n-    );\n-    // This is actually stage 1, but Rustdoc::run swaps out the compiler with\n-    // stage minus 1 if --stage is not 0. Very confusing!\n-    assert_eq!(\n-        first(builder.cache.all::<tool::Rustdoc>()),\n-        &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n-    );\n+mod defaults {\n+    use super::{configure, first};\n+    use crate::builder::*;\n+    use crate::Config;\n+    use pretty_assertions::assert_eq;\n+\n+    #[test]\n+    fn build_default() {\n+        let build = Build::new(configure(&[], &[]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+            ]\n+        );\n+        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        // Make sure rustdoc is only built once.\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            // Recall that rustdoc stages are off-by-one\n+            // - this is the compiler it's _linked_ to, not built with.\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } }],\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+        );\n+    }\n+\n+    #[test]\n+    fn build_stage_0() {\n+        let config = Config { stage: Some(0), ..configure(&[], &[]) };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+        );\n+        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            // This is the beta rustdoc.\n+            // Add an assert here to make sure this is the only rustdoc built.\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 0 } }],\n+        );\n+        assert!(builder.cache.all::<compile::Rustc>().is_empty());\n+    }\n+\n+    #[test]\n+    fn doc_default() {\n+        let mut config = configure(&[], &[]);\n+        config.compiler_docs = true;\n+        config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);\n+        let a = TargetSelection::from_user(\"A\");\n+\n+        // error_index_generator uses stage 0 to share rustdoc artifacts with the\n+        // rustdoc tool.\n+        assert_eq!(\n+            first(builder.cache.all::<doc::ErrorIndex>()),\n+            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<tool::ErrorIndex>()),\n+            &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 0 } }]\n+        );\n+        // docs should be built with the beta compiler, not with the stage0 artifacts.\n+        // recall that rustdoc is off-by-one: `stage` is the compiler rustdoc is _linked_ to,\n+        // not the one it was built by.\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 0 } },]\n+        );\n+    }\n }\n \n-//FIXME(mark-i-m): reinstate this test when things are fixed...\n-//#[test]\n-#[allow(dead_code)]\n-fn test_docs() {\n-    // Behavior of `x.py test` doing various documentation tests.\n-    let mut config = configure(&[], &[]);\n-    config.cmd = Subcommand::Test {\n-        paths: vec![],\n-        test_args: vec![],\n-        rustc_args: vec![],\n-        fail_fast: true,\n-        doc_tests: DocTests::Yes,\n-        bless: false,\n-        compare_mode: None,\n-        rustfix_coverage: false,\n-        pass: None,\n-    };\n-    let build = Build::new(config);\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n-    let a = TargetSelection::from_user(\"A\");\n-\n-    // error_index_generator uses stage 1 to share rustdoc artifacts with the\n-    // rustdoc tool.\n-    assert_eq!(\n-        first(builder.cache.all::<doc::ErrorIndex>()),\n-        &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n-    );\n-    assert_eq!(\n-        first(builder.cache.all::<tool::ErrorIndex>()),\n-        &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n-    );\n-    // Unfortunately rustdoc is built twice. Once from stage1 for compiletest\n-    // (and other things), and once from stage0 for std crates. Ideally it\n-    // would only be built once. If someone wants to fix this, it might be\n-    // worth investigating if it would be possible to test std from stage1.\n-    // Note that the stages here are +1 than what they actually are because\n-    // Rustdoc::run swaps out the compiler with stage minus 1 if --stage is\n-    // not 0.\n-    assert_eq!(\n-        first(builder.cache.all::<tool::Rustdoc>()),\n-        &[\n-            tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } },\n-            tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },\n-        ]\n-    );\n+mod dist {\n+    use super::{first, Config};\n+    use crate::builder::*;\n+    use pretty_assertions::assert_eq;\n+\n+    fn configure(host: &[&str], target: &[&str]) -> Config {\n+        Config { stage: Some(2), ..super::configure(host, target) }\n+    }\n+\n+    #[test]\n+    fn dist_baseline() {\n+        let build = Build::new(configure(&[], &[]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+\n+        assert_eq!(first(builder.cache.all::<dist::Docs>()), &[dist::Docs { host: a },]);\n+        assert_eq!(first(builder.cache.all::<dist::Mingw>()), &[dist::Mingw { host: a },]);\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Rustc>()),\n+            &[dist::Rustc { compiler: Compiler { host: a, stage: 2 } },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Std>()),\n+            &[dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+        );\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        // Make sure rustdoc is only built once.\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n+        );\n+    }\n+\n+    #[test]\n+    fn dist_with_targets() {\n+        let build = Build::new(configure(&[], &[\"B\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Docs>()),\n+            &[dist::Docs { host: a }, dist::Docs { host: b },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Mingw>()),\n+            &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Rustc>()),\n+            &[dist::Rustc { compiler: Compiler { host: a, stage: 2 } },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Std>()),\n+            &[\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                dist::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n+            ]\n+        );\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    }\n+\n+    #[test]\n+    fn dist_with_hosts() {\n+        let build = Build::new(configure(&[\"B\"], &[]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Docs>()),\n+            &[dist::Docs { host: a }, dist::Docs { host: b },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Mingw>()),\n+            &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Rustc>()),\n+            &[\n+                dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+                dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Std>()),\n+            &[\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+            ]\n+        );\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    }\n+\n+    #[test]\n+    fn dist_only_cross_host() {\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+        let mut build = Build::new(configure(&[\"B\"], &[]));\n+        build.config.docs = false;\n+        build.config.extended = true;\n+        build.hosts = vec![b];\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Rustc>()),\n+            &[dist::Rustc { compiler: Compiler { host: b, stage: 2 } },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[\n+                compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n+            ]\n+        );\n+    }\n+\n+    #[test]\n+    fn dist_with_targets_and_hosts() {\n+        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+        let c = TargetSelection::from_user(\"C\");\n+\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Docs>()),\n+            &[dist::Docs { host: a }, dist::Docs { host: b }, dist::Docs { host: c },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Mingw>()),\n+            &[dist::Mingw { host: a }, dist::Mingw { host: b }, dist::Mingw { host: c },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Rustc>()),\n+            &[\n+                dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+                dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Std>()),\n+            &[\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+                dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n+            ]\n+        );\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    }\n+\n+    #[test]\n+    fn dist_with_target_flag() {\n+        let mut config = configure(&[\"B\"], &[\"C\"]);\n+        config.skip_only_host_steps = true; // as-if --target=C was passed\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+        let c = TargetSelection::from_user(\"C\");\n+\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Docs>()),\n+            &[dist::Docs { host: a }, dist::Docs { host: b }, dist::Docs { host: c },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Mingw>()),\n+            &[dist::Mingw { host: a }, dist::Mingw { host: b }, dist::Mingw { host: c },]\n+        );\n+        assert_eq!(first(builder.cache.all::<dist::Rustc>()), &[]);\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Std>()),\n+            &[\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+                dist::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n+            ]\n+        );\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[]);\n+    }\n+\n+    #[test]\n+    fn dist_with_same_targets_and_hosts() {\n+        let build = Build::new(configure(&[\"B\"], &[\"B\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Docs>()),\n+            &[dist::Docs { host: a }, dist::Docs { host: b },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Mingw>()),\n+            &[dist::Mingw { host: a }, dist::Mingw { host: b },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Rustc>()),\n+            &[\n+                dist::Rustc { compiler: Compiler { host: a, stage: 2 } },\n+                dist::Rustc { compiler: Compiler { host: b, stage: 2 } },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Std>()),\n+            &[\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+            ]\n+        );\n+        assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Assemble>()),\n+            &[\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 2 } },\n+                compile::Assemble { target_compiler: Compiler { host: b, stage: 2 } },\n+            ]\n+        );\n+    }\n+\n+    #[test]\n+    fn build_all() {\n+        let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(\n+            &Builder::get_step_descriptions(Kind::Build),\n+            &[\"src/rustc\".into(), \"library/std\".into()],\n+        );\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+        let c = TargetSelection::from_user(\"C\");\n+\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n+                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n+                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n+                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n+            ]\n+        );\n+        assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[\n+                compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: b },\n+                compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: b },\n+            ]\n+        );\n+    }\n+\n+    #[test]\n+    fn build_with_target_flag() {\n+        let mut config = configure(&[\"B\"], &[\"C\"]);\n+        config.skip_only_host_steps = true;\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+        let c = TargetSelection::from_user(\"C\");\n+\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n+                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n+                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n+                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Assemble>()),\n+            &[\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 2 } },\n+                compile::Assemble { target_compiler: Compiler { host: b, stage: 2 } },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[\n+                compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n+            ]\n+        );\n+    }\n+\n+    #[test]\n+    fn test_with_no_doc_stage0() {\n+        let mut config = configure(&[], &[]);\n+        config.stage = Some(0);\n+        config.cmd = Subcommand::Test {\n+            paths: vec![\"library/std\".into()],\n+            test_args: vec![],\n+            rustc_args: vec![],\n+            fail_fast: true,\n+            doc_tests: DocTests::No,\n+            bless: false,\n+            compare_mode: None,\n+            rustfix_coverage: false,\n+            pass: None,\n+        };\n+\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+\n+        let host = TargetSelection::from_user(\"A\");\n+\n+        builder.run_step_descriptions(\n+            &[StepDescription::from::<test::Crate>()],\n+            &[\"library/std\".into()],\n+        );\n+\n+        // Ensure we don't build any compiler artifacts.\n+        assert!(!builder.cache.contains::<compile::Rustc>());\n+        assert_eq!(\n+            first(builder.cache.all::<test::Crate>()),\n+            &[test::Crate {\n+                compiler: Compiler { host, stage: 0 },\n+                target: host,\n+                mode: Mode::Std,\n+                test_kind: test::TestKind::Test,\n+                krate: INTERNER.intern_str(\"std\"),\n+            },]\n+        );\n+    }\n+\n+    #[test]\n+    fn test_exclude() {\n+        let mut config = configure(&[], &[]);\n+        config.exclude = vec![\"src/tools/tidy\".into()];\n+        config.cmd = Subcommand::Test {\n+            paths: Vec::new(),\n+            test_args: Vec::new(),\n+            rustc_args: Vec::new(),\n+            fail_fast: true,\n+            doc_tests: DocTests::No,\n+            bless: false,\n+            compare_mode: None,\n+            rustfix_coverage: false,\n+            pass: None,\n+        };\n+\n+        let build = Build::new(config);\n+        let builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n+\n+        // Ensure we have really excluded tidy\n+        assert!(!builder.cache.contains::<test::Tidy>());\n+\n+        // Ensure other tests are not affected.\n+        assert!(builder.cache.contains::<test::RustdocUi>());\n+    }\n+\n+    #[test]\n+    fn doc_ci() {\n+        let mut config = configure(&[], &[]);\n+        config.compiler_docs = true;\n+        config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);\n+        let a = TargetSelection::from_user(\"A\");\n+\n+        // error_index_generator uses stage 1 to share rustdoc artifacts with the\n+        // rustdoc tool.\n+        assert_eq!(\n+            first(builder.cache.all::<doc::ErrorIndex>()),\n+            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<tool::ErrorIndex>()),\n+            &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n+        );\n+        // This is actually stage 1, but Rustdoc::run swaps out the compiler with\n+        // stage minus 1 if --stage is not 0. Very confusing!\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n+        );\n+    }\n+\n+    //FIXME(mark-i-m): reinstate this test when things are fixed...\n+    //#[test]\n+    #[allow(dead_code)]\n+    fn test_docs() {\n+        // Behavior of `x.py test` doing various documentation tests.\n+        let mut config = configure(&[], &[]);\n+        config.cmd = Subcommand::Test {\n+            paths: vec![],\n+            test_args: vec![],\n+            rustc_args: vec![],\n+            fail_fast: true,\n+            doc_tests: DocTests::Yes,\n+            bless: false,\n+            compare_mode: None,\n+            rustfix_coverage: false,\n+            pass: None,\n+        };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n+        let a = TargetSelection::from_user(\"A\");\n+\n+        // error_index_generator uses stage 1 to share rustdoc artifacts with the\n+        // rustdoc tool.\n+        assert_eq!(\n+            first(builder.cache.all::<doc::ErrorIndex>()),\n+            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<tool::ErrorIndex>()),\n+            &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n+        );\n+        // Unfortunately rustdoc is built twice. Once from stage1 for compiletest\n+        // (and other things), and once from stage0 for std crates. Ideally it\n+        // would only be built once. If someone wants to fix this, it might be\n+        // worth investigating if it would be possible to test std from stage1.\n+        // Note that the stages here are +1 than what they actually are because\n+        // Rustdoc::run swaps out the compiler with stage minus 1 if --stage is\n+        // not 0.\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            &[\n+                tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } },\n+                tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },\n+            ]\n+        );\n+    }\n }"}, {"sha": "373e240cb8e3e456018e8eec30688443d2425d40", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -446,10 +446,10 @@ pub struct Rustc {\n impl Step for Rustc {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n+    const DEFAULT: bool = false;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc-main\")\n+        run.path(\"src/rustc\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "d64ca95d24392ab1221c90d6974eb122bf42d955", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -734,7 +734,7 @@ impl Config {\n \n         let with_defaults = |debuginfo_level_specific: Option<u32>| {\n             debuginfo_level_specific.or(debuginfo_level).unwrap_or(if debug == Some(true) {\n-                2\n+                1\n             } else {\n                 0\n             })"}, {"sha": "56e4f0467cc50967978d2752e7cf99374e460977", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -425,7 +425,7 @@ Arguments:\n     This subcommand accepts a number of paths to tools to build and run. For\n     example:\n \n-        ./x.py run src/tool/expand-yaml-anchors\n+        ./x.py run src/tools/expand-yaml-anchors\n \n     At least a tool needs to be called.\",\n                 );"}, {"sha": "1564cfb06199c7e77292e3b951c20441d4b20387", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -9,8 +9,8 @@ endif\n BOOTSTRAP := $(CFG_PYTHON) $(CFG_SRC_DIR)src/bootstrap/bootstrap.py\n \n all:\n-\t$(Q)$(BOOTSTRAP) build $(BOOTSTRAP_ARGS)\n-\t$(Q)$(BOOTSTRAP) doc $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) build --stage 2 $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) doc --stage 2 $(BOOTSTRAP_ARGS)\n \n help:\n \t$(Q)echo 'Welcome to the rustbuild build system!'\n@@ -31,17 +31,17 @@ rustc-stage2:\n \n docs: doc\n doc:\n-\t$(Q)$(BOOTSTRAP) doc $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) doc --stage 2 $(BOOTSTRAP_ARGS)\n nomicon:\n-\t$(Q)$(BOOTSTRAP) doc src/doc/nomicon $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) doc --stage 2 src/doc/nomicon $(BOOTSTRAP_ARGS)\n book:\n-\t$(Q)$(BOOTSTRAP) doc src/doc/book $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) doc --stage 2 src/doc/book $(BOOTSTRAP_ARGS)\n standalone-docs:\n-\t$(Q)$(BOOTSTRAP) doc src/doc $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) doc --stage 2 src/doc $(BOOTSTRAP_ARGS)\n check:\n-\t$(Q)$(BOOTSTRAP) test $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) test --stage 2 $(BOOTSTRAP_ARGS)\n check-aux:\n-\t$(Q)$(BOOTSTRAP) test \\\n+\t$(Q)$(BOOTSTRAP) test --stage 2 \\\n \t\tsrc/tools/cargo \\\n \t\tsrc/tools/cargotest \\\n \t\t$(BOOTSTRAP_ARGS)\n@@ -51,37 +51,37 @@ dist:\n \t$(Q)$(BOOTSTRAP) dist $(BOOTSTRAP_ARGS)\n distcheck:\n \t$(Q)$(BOOTSTRAP) dist $(BOOTSTRAP_ARGS)\n-\t$(Q)$(BOOTSTRAP) test distcheck $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) test --stage 2 distcheck $(BOOTSTRAP_ARGS)\n install:\n \t$(Q)$(BOOTSTRAP) install $(BOOTSTRAP_ARGS)\n tidy:\n-\t$(Q)$(BOOTSTRAP) test src/tools/tidy $(BOOTSTRAP_ARGS)\n+\t$(Q)$(BOOTSTRAP) test --stage 2 src/tools/tidy $(BOOTSTRAP_ARGS)\n prepare:\n-\t$(Q)$(BOOTSTRAP) build nonexistent/path/to/trigger/cargo/metadata\n+\t$(Q)$(BOOTSTRAP) build --stage 2 nonexistent/path/to/trigger/cargo/metadata\n \n check-stage2-T-arm-linux-androideabi-H-x86_64-unknown-linux-gnu:\n-\t$(Q)$(BOOTSTRAP) test --target arm-linux-androideabi\n+\t$(Q)$(BOOTSTRAP) test --stage 2 --target arm-linux-androideabi\n check-stage2-T-x86_64-unknown-linux-musl-H-x86_64-unknown-linux-gnu:\n-\t$(Q)$(BOOTSTRAP) test --target x86_64-unknown-linux-musl\n+\t$(Q)$(BOOTSTRAP) test --stage 2 --target x86_64-unknown-linux-musl\n \n TESTS_IN_2 := \\\n \tsrc/test/ui \\\n \tsrc/test/compile-fail \\\n \tsrc/tools/linkchecker\n \n ci-subset-1:\n-\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2:%=--exclude %)\n+\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_2:%=--exclude %)\n ci-subset-2:\n-\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_2)\n+\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_2)\n \n TESTS_IN_MINGW_2 := \\\n \tsrc/test/ui \\\n \tsrc/test/compile-fail\n \n ci-mingw-subset-1:\n-\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_MINGW_2:%=--exclude %)\n+\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2:%=--exclude %)\n ci-mingw-subset-2:\n-\t$(Q)$(BOOTSTRAP) test $(TESTS_IN_MINGW_2)\n+\t$(Q)$(BOOTSTRAP) test --stage 2 $(TESTS_IN_MINGW_2)\n \n \n .PHONY: dist"}, {"sha": "2185b0d30dbde350c3ae25708d9388970b408768", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -36,7 +36,7 @@ jobs:\n       # Note that the compiler is compiled to target 10.8 here because the Xcode\n       # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n       x86_64-apple:\n-        SCRIPT: ./x.py test\n+        SCRIPT: ./x.py --stage 2 test\n         INITIAL_RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.8"}, {"sha": "b6cf60a5e15a7b11aa31b4a60fb241ab4d4df2f9", "filename": "src/ci/docker/host-aarch64/aarch64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-aarch64%2Faarch64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-aarch64%2Faarch64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-aarch64%2Faarch64-gnu%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -23,4 +23,4 @@ ENV RUST_CONFIGURE_ARGS \\\n  --enable-sanitizers \\\n  --enable-profiler \\\n  --enable-compiler-docs\n-ENV SCRIPT python3 ../x.py test\n+ENV SCRIPT python3 ../x.py --stage 2 test"}, {"sha": "add2647fa1e65c503abe0514981dd062d02d12de", "filename": "src/ci/docker/host-x86_64/arm-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farm-android%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -31,7 +31,7 @@ ENV TARGETS=arm-linux-androideabi\n \n ENV RUST_CONFIGURE_ARGS --arm-linux-androideabi-ndk=/android/ndk/arm-14\n \n-ENV SCRIPT python3 ../x.py test --target $TARGETS\n+ENV SCRIPT python3 ../x.py --stage 2 test --target $TARGETS\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "1f3092c5513d956c21c9885a9d81c30dbbb30900", "filename": "src/ci/docker/host-x86_64/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -78,6 +78,6 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --qemu-armhf-rootfs=/tmp/rootfs\n-ENV SCRIPT python3 ../x.py test --target arm-unknown-linux-gnueabihf\n+ENV SCRIPT python3 ../x.py --stage 2 test --target arm-unknown-linux-gnueabihf\n \n ENV NO_CHANGE_USER=1"}, {"sha": "a4d9f53ebabef1c3d32a4b07329f1de6e5abd9eb", "filename": "src/ci/docker/host-x86_64/disabled/asmjs/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fasmjs%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -33,7 +33,7 @@ ENV EMCC_CFLAGS=-O1\n # Emscripten installation is user-specific\n ENV NO_CHANGE_USER=1\n \n-ENV SCRIPT python3 ../x.py test --target $TARGETS\n+ENV SCRIPT python3 ../x.py --stage 2 test --target $TARGETS\n \n # This is almost identical to the wasm32-unknown-emscripten target, so\n # running with assertions again is not useful"}, {"sha": "f986c38ea02da913313c0760d701288aba98f81a", "filename": "src/ci/docker/host-x86_64/disabled/dist-armv7-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-armv7-android%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -33,7 +33,7 @@ ENV RUST_CONFIGURE_ARGS \\\n # build to finish we use --warn-unresolved-symbols. Note that the missing\n # symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n ENV SCRIPT \\\n-  python3 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n+  python3 ../x.py --stage 2 build src/llvm --host $HOSTS --target $HOSTS && \\\n   (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n     rm /android/ndk/arm && \\\n     ln -s /android/ndk/arm-14 /android/ndk/arm && \\"}, {"sha": "4dfbc72560783f4d9a6229fd7f222b5cced9f934", "filename": "src/ci/docker/host-x86_64/disabled/dist-i686-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-i686-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-i686-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-i686-android%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -33,7 +33,7 @@ ENV RUST_CONFIGURE_ARGS \\\n # build to finish we use --warn-unresolved-symbols. Note that the missing\n # symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n ENV SCRIPT \\\n-  python3 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n+  python3 ../x.py --stage 2 build src/llvm --host $HOSTS --target $HOSTS && \\\n   (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n     rm /android/ndk/x86 && \\\n     ln -s /android/ndk/x86-14 /android/ndk/x86 && \\"}, {"sha": "e3c35000eb818086cc67c4cd0e77dc83bbc46c91", "filename": "src/ci/docker/host-x86_64/disabled/riscv64gc-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Friscv64gc-linux%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -97,6 +97,6 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --qemu-riscv64-rootfs=/tmp/rootfs\n-ENV SCRIPT python3 ../x.py test --target riscv64gc-unknown-linux-gnu\n+ENV SCRIPT python3 ../x.py --stage 2 test --target riscv64gc-unknown-linux-gnu\n \n ENV NO_CHANGE_USER=1"}, {"sha": "162d7a1345ce1cb64f9b192b292da68f8d76abaf", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -46,5 +46,5 @@ ENV CFLAGS_i586_unknown_linux_musl=-Wa,-mrelax-relocations=no\n ENV TARGETS=i586-unknown-linux-gnu,i686-unknown-linux-musl\n \n ENV SCRIPT \\\n-      python3 ../x.py test --target $TARGETS && \\\n+      python3 ../x.py --stage 2 test --target $TARGETS && \\\n       python3 ../x.py dist --target $TARGETS,i586-unknown-linux-musl"}, {"sha": "fdd777e824ba89c5433e50ea6ff4d85837d6de59", "filename": "src/ci/docker/host-x86_64/dist-various-1/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-1%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -192,7 +192,7 @@ ENV RUST_CONFIGURE_ARGS \\\n       --disable-docs\n \n ENV SCRIPT \\\n-      python3 ../x.py test --target $RUN_MAKE_TARGETS src/test/run-make && \\\n+      python3 ../x.py --stage 2 test --target $RUN_MAKE_TARGETS src/test/run-make && \\\n       python3 ../x.py dist --target $TARGETS\n \n # sccache"}, {"sha": "6a596b3465f20da7e0b22843b63871fb89c1daf9", "filename": "src/ci/docker/host-x86_64/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu-nopt%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -20,7 +20,7 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu --disable-optimize-tests\n-ENV SCRIPT python3 ../x.py test\n+ENV SCRIPT python3 ../x.py --stage 2 test\n \n # FIXME(#59637) takes too long on CI right now\n ENV NO_LLVM_ASSERTIONS=1 NO_DEBUG_ASSERTIONS=1"}, {"sha": "9d319017d7967cbc0c9ccdc18846b561a333a74e", "filename": "src/ci/docker/host-x86_64/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -22,7 +22,7 @@ RUN sh /scripts/sccache.sh\n ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu\n # Exclude some tests that are unlikely to be platform specific, to speed up\n # this slow job.\n-ENV SCRIPT python3 ../x.py test \\\n+ENV SCRIPT python3 ../x.py --stage 2 test \\\n   --exclude src/bootstrap \\\n   --exclude src/test/rustdoc-js \\\n   --exclude src/tools/error_index_generator \\"}, {"sha": "b902eda87bc6ec9bd3c2d7b6b23a129be73f3b31", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -22,10 +22,10 @@ RUN sh /scripts/sccache.sh\n COPY host-x86_64/mingw-check/validate-toolstate.sh /scripts/\n \n ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n-ENV SCRIPT python3 ../x.py test src/tools/expand-yaml-anchors && \\\n+ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            python3 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu && \\\n            python3 ../x.py build --stage 0 src/tools/build-manifest && \\\n            python3 ../x.py test --stage 0 src/tools/compiletest && \\\n-           python3 ../x.py test src/tools/tidy && \\\n+           python3 ../x.py test --stage 2 src/tools/tidy && \\\n            python3 ../x.py doc --stage 0 library/std && \\\n            /scripts/validate-toolstate.sh"}, {"sha": "c55a284e137b34454e4c0914b6ea103167216254", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -40,7 +40,7 @@ ENV RUST_CONFIGURE_ARGS \\\n ENV NO_DEBUG_ASSERTIONS=1\n \n ENV WASM_TARGETS=wasm32-unknown-unknown\n-ENV WASM_SCRIPT python3 /checkout/x.py test --target $WASM_TARGETS \\\n+ENV WASM_SCRIPT python3 /checkout/x.py --stage 2 test --target $WASM_TARGETS \\\n   src/test/run-make \\\n   src/test/ui \\\n   src/test/compile-fail \\\n@@ -49,13 +49,13 @@ ENV WASM_SCRIPT python3 /checkout/x.py test --target $WASM_TARGETS \\\n   library/core\n \n ENV NVPTX_TARGETS=nvptx64-nvidia-cuda\n-ENV NVPTX_SCRIPT python3 /checkout/x.py test --target $NVPTX_TARGETS \\\n+ENV NVPTX_SCRIPT python3 /checkout/x.py --stage 2 test --target $NVPTX_TARGETS \\\n   src/test/run-make \\\n   src/test/assembly\n \n ENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n     CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc \\\n     CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++\n-ENV MUSL_SCRIPT python3 /checkout/x.py test --target $MUSL_TARGETS\n+ENV MUSL_SCRIPT python3 /checkout/x.py --stage 2 test --target $MUSL_TARGETS\n \n ENV SCRIPT $WASM_SCRIPT && $NVPTX_SCRIPT && $MUSL_SCRIPT"}, {"sha": "e00177b4a67c9a979d104d956f98449f5bac7622", "filename": "src/ci/docker/host-x86_64/wasm32/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fwasm32%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -52,7 +52,7 @@ ENV NO_CHANGE_USER=1\n \n # FIXME: Re-enable these tests once https://github.com/rust-lang/cargo/pull/7476\n # is picked up by CI\n-ENV SCRIPT python3 ../x.py test --target $TARGETS \\\n+ENV SCRIPT python3 ../x.py test --stage 2 --target $TARGETS \\\n     --exclude library/core \\\n     --exclude library/alloc \\\n     --exclude library/proc_macro \\"}, {"sha": "c1cb20b631d319d20a4a35845860366ae577588a", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-debug%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -40,5 +40,5 @@ ENV RUST_CONFIGURE_ARGS \\\n       --set target.x86_64-unknown-linux-gnu.cxx=clang++\n \n ENV SCRIPT \\\n-  python3 ../x.py build && \\\n-  python3 ../x.py test src/test/run-make-fulldeps --test-args clang\n+  python3 ../x.py --stage 2 build && \\\n+  python3 ../x.py --stage 2 test src/test/run-make-fulldeps --test-args clang"}, {"sha": "68e89a7bade342b09d849945c053d00f44b95731", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -19,10 +19,10 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --set rust.ignore-git=false\n-ENV SCRIPT python3 ../x.py test distcheck\n+ENV SCRIPT python3 ../x.py --stage 2 test distcheck\n ENV DIST_SRC 1\n \n-# The purpose of this builder is to test that we can `./x.py test` successfully\n+# The purpose of this builder is to test that we can `./x.py --stage 2 test` successfully\n # from a tarball, not to test LLVM/rustc's own set of assertions. These cause a\n # significant hit to CI compile time (over a half hour as observed in #61185),\n # so disable assertions for this builder."}, {"sha": "8648e5ed7a4866e377d0fee584d6fdf189c80e01", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -21,7 +21,7 @@ RUN sh /scripts/sccache.sh\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-full-bootstrap\n-ENV SCRIPT python3 ../x.py build\n+ENV SCRIPT python3 ../x.py --stage 2 build\n \n # In general this just slows down the build and we're just a smoke test that\n # a full bootstrap works in general, so there's not much need to take this"}, {"sha": "5c971c73c97d3485ae5ce4811b603b26f5dfea87", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-8/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-8%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-8%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-8%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -30,7 +30,7 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n \n-ENV SCRIPT python2.7 ../x.py test --exclude src/tools/tidy && \\\n+ENV SCRIPT python2.7 ../x.py --stage 2 test --exclude src/tools/tidy && \\\n            # Run the `mir-opt` tests again but this time for a 32-bit target.\n            # This enforces that tests using `// EMIT_MIR_FOR_EACH_BIT_WIDTH` have\n            # both 32-bit and 64-bit outputs updated by the PR author, before\n@@ -43,7 +43,7 @@ ENV SCRIPT python2.7 ../x.py test --exclude src/tools/tidy && \\\n            # This also requires `--pass=build` because we can't execute the tests\n            # on the `x86_64` host when they're built as `armv5te` binaries.\n            # (we're only interested in the MIR output, so this doesn't matter)\n-           python2.7 ../x.py test src/test/mir-opt --pass=build \\\n+           python2.7 ../x.py --stage 2 test src/test/mir-opt --pass=build \\\n                                   --target=armv5te-unknown-linux-gnueabi && \\\n            # Run the UI test suite again, but in `--pass=check` mode\n            #\n@@ -53,9 +53,9 @@ ENV SCRIPT python2.7 ../x.py test --exclude src/tools/tidy && \\\n            # FIXME: We ideally want to test this in 32-bit mode, but currently\n            # (due to the LLVM problems mentioned above) that isn't readily\n            # possible.\n-           python2.7 ../x.py test src/test/ui --pass=check && \\\n+           python2.7 ../x.py --stage 2 test src/test/ui --pass=check && \\\n            # Run tidy at the very end, after all the other tests.\n-           python2.7 ../x.py test src/tools/tidy\n+           python2.7 ../x.py --stage 2 test src/tools/tidy\n \n # The purpose of this container isn't to test with debug assertions and\n # this is run on all PRs, so let's get speedier builds by disabling these extra"}, {"sha": "fa769cac9c1da8ec7a8241049056dc1a193287fe", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-nopt%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -21,4 +21,4 @@ RUN sh /scripts/sccache.sh\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu \\\n   --disable-optimize-tests \\\n   --set rust.test-compare-mode\n-ENV SCRIPT python3 ../x.py test\n+ENV SCRIPT python3 ../x.py --stage 2 test"}, {"sha": "49a8e5e88a0390d412a115b731cb30dd9bd7d8f3", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -7,7 +7,7 @@ X_PY=\"$1\"\n # Try to test all the tools and store the build/test success in the TOOLSTATE_FILE\n \n set +e\n-python3 \"$X_PY\" test --no-fail-fast \\\n+python3 \"$X_PY\" test --stage 2 --no-fail-fast \\\n     src/doc/book \\\n     src/doc/nomicon \\\n     src/doc/reference \\\n@@ -22,5 +22,5 @@ set -e\n \n # debugging: print out the saved toolstates\n cat /tmp/toolstate/toolstates.json\n-python3 \"$X_PY\" test check-tools\n-python3 \"$X_PY\" test src/tools/clippy\n+python3 \"$X_PY\" test --stage 2 check-tools\n+python3 \"$X_PY\" test --stage 2 src/tools/clippy"}, {"sha": "f8bacf79ac0dccea249b20a2aeaa55ed14e38f9e", "filename": "src/ci/docker/host-x86_64/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu%2FDockerfile?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -23,4 +23,4 @@ ENV RUST_CONFIGURE_ARGS \\\n  --enable-sanitizers \\\n  --enable-profiler \\\n  --enable-compiler-docs\n-ENV SCRIPT python3 ../x.py test\n+ENV SCRIPT python3 ../x.py --stage 2 test"}, {"sha": "a7c1987e8b1c9182ec1ae21a2661b73a2d832d5a", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7b3a7819371cef92a187e9bac8f7810ccde15216/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=7b3a7819371cef92a187e9bac8f7810ccde15216", "patch": "@@ -471,7 +471,7 @@ jobs:\n \n           - name: x86_64-msvc-cargo\n             env:\n-              SCRIPT: python x.py test src/tools/cargotest src/tools/cargo\n+              SCRIPT: python x.py --stage 2 test src/tools/cargotest src/tools/cargo\n               RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-lld\n               VCVARS_BAT: vcvars64.bat\n               # FIXME(#59637)\n@@ -613,7 +613,7 @@ jobs:\n \n           - name: x86_64-apple\n             env:\n-              SCRIPT: ./x.py test\n+              SCRIPT: ./x.py --stage 2 test\n               RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.8"}]}