{"sha": "287de2595a40c03d9ffe81f55c13c731fd01583f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4N2RlMjU5NWE0MGMwM2Q5ZmZlODFmNTVjMTNjNzMxZmQwMTU4M2Y=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-06T23:39:55Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-09T21:20:25Z"}, "message": "Store all generic arguments for method calls in AST", "tree": {"sha": "a905bf090561b54245a31fcc2580b1682c55e522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a905bf090561b54245a31fcc2580b1682c55e522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/287de2595a40c03d9ffe81f55c13c731fd01583f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/287de2595a40c03d9ffe81f55c13c731fd01583f", "html_url": "https://github.com/rust-lang/rust/commit/287de2595a40c03d9ffe81f55c13c731fd01583f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/287de2595a40c03d9ffe81f55c13c731fd01583f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b1271fcdd5b5958c76c43084e544d075d7d5dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1271fcdd5b5958c76c43084e544d075d7d5dfd", "html_url": "https://github.com/rust-lang/rust/commit/8b1271fcdd5b5958c76c43084e544d075d7d5dfd"}], "stats": {"total": 151, "additions": 82, "deletions": 69}, "files": [{"sha": "1e9314cfde32fcc979550ba7b25db015a25e3ba1", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -1844,10 +1844,17 @@ impl<'a> LoweringContext<'a> {\n                 let f = P(self.lower_expr(f));\n                 hir::ExprCall(f, args.iter().map(|x| self.lower_expr(x)).collect())\n             }\n-            ExprKind::MethodCall(i, ref tps, ref args) => {\n+            ExprKind::MethodCall(ref seg, ref args) => {\n+                let tps = match seg.parameters {\n+                    Some(ref params) => match **params {\n+                        PathParameters::AngleBracketed(ref param_data) => &param_data.types[..],\n+                        _ => &[],\n+                    },\n+                    _ => &[],\n+                };\n                 let tps = tps.iter().map(|x| self.lower_ty(x)).collect();\n                 let args = args.iter().map(|x| self.lower_expr(x)).collect();\n-                hir::ExprMethodCall(respan(i.span, self.lower_ident(i.node)), tps, args)\n+                hir::ExprMethodCall(respan(seg.span, self.lower_ident(seg.identifier)), tps, args)\n             }\n             ExprKind::Binary(binop, ref lhs, ref rhs) => {\n                 let binop = self.lower_binop(binop);"}, {"sha": "72c7b92fe6e309e149eed66844ccb2f526a51c4f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -125,6 +125,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ExprKind::Continue(Some(ident)) => {\n                 self.check_label(ident.node, ident.span);\n             }\n+            ExprKind::MethodCall(ref segment, ..) => {\n+                if let Some(ref params) = segment.parameters {\n+                    match **params {\n+                        PathParameters::AngleBracketed(ref param_data) => {\n+                            if !param_data.bindings.is_empty() {\n+                                let binding_span = param_data.bindings[0].span;\n+                                self.err_handler().span_err(binding_span,\n+                                    \"type bindings cannot be used in method calls\");\n+                            }\n+                        }\n+                        PathParameters::Parenthesized(..) => {\n+                            self.err_handler().span_err(expr.span,\n+                                \"parenthesized parameters cannot be used on method calls\");\n+                        }\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n "}, {"sha": "7754cd7366ecfa6932104d056eaa25eb3e205f4d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -2467,9 +2467,9 @@ impl<'a> Resolver<'a> {\n                                                                  path_str, ident.node));\n                             return err;\n                         }\n-                        ExprKind::MethodCall(ident, ..) => {\n+                        ExprKind::MethodCall(ref segment, ..) => {\n                             err.span_label(parent.span, format!(\"did you mean `{}::{}(...)`?\",\n-                                                                 path_str, ident.node));\n+                                                                 path_str, segment.identifier));\n                             return err;\n                         }\n                         _ => {}\n@@ -3145,15 +3145,13 @@ impl<'a> Resolver<'a> {\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));\n             }\n-            ExprKind::MethodCall(_, ref types, ref arguments) => {\n+            ExprKind::MethodCall(ref segment, ref arguments) => {\n                 let mut arguments = arguments.iter();\n                 self.resolve_expr(arguments.next().unwrap(), Some(expr));\n                 for argument in arguments {\n                     self.resolve_expr(argument, None);\n                 }\n-                for ty in types.iter() {\n-                    self.visit_ty(ty);\n-                }\n+                self.visit_path_segment(expr.span, segment);\n             }\n \n             ExprKind::Repeat(ref element, ref count) => {\n@@ -3185,10 +3183,10 @@ impl<'a> Resolver<'a> {\n                 let traits = self.get_traits_containing_item(name.node, ValueNS);\n                 self.trait_map.insert(expr.id, traits);\n             }\n-            ExprKind::MethodCall(name, ..) => {\n+            ExprKind::MethodCall(ref segment, ..) => {\n                 debug!(\"(recording candidate traits for expr) recording traits for {}\",\n                        expr.id);\n-                let traits = self.get_traits_containing_item(name.node, ValueNS);\n+                let traits = self.get_traits_containing_item(segment.identifier, ValueNS);\n                 self.trait_map.insert(expr.id, traits);\n             }\n             _ => {"}, {"sha": "f7d9d532062a99acf62ffcf15a3626a0d6e017ad", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -848,19 +848,16 @@ pub enum ExprKind {\n     /// The first field resolves to the function itself,\n     /// and the second field is the list of arguments\n     Call(P<Expr>, Vec<P<Expr>>),\n-    /// A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)\n+    /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)\n     ///\n-    /// The `SpannedIdent` is the identifier for the method name.\n-    /// The vector of `Ty`s are the ascripted type parameters for the method\n+    /// The `PathSegment` represents the method name and its generic arguments\n     /// (within the angle brackets).\n-    ///\n     /// The first element of the vector of `Expr`s is the expression that evaluates\n     /// to the object on which the method is being called on (the receiver),\n     /// and the remaining elements are the rest of the arguments.\n-    ///\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n-    /// `ExprKind::MethodCall(foo, [Bar, Baz], [x, a, b, c, d])`.\n-    MethodCall(SpannedIdent, Vec<P<Ty>>, Vec<P<Expr>>),\n+    /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    MethodCall(PathSegment, Vec<P<Expr>>),\n     /// A tuple (`(a, b, c ,d)`)\n     Tup(Vec<P<Expr>>),\n     /// A binary operation (For example: `a + b`, `a * b`)"}, {"sha": "2555bf6dea7ab32d591b56685a51b8afb08b0ebf", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -673,9 +673,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                         expr: P<ast::Expr>,\n                         ident: ast::Ident,\n                         mut args: Vec<P<ast::Expr>> ) -> P<ast::Expr> {\n-        let id = Spanned { node: ident, span: span };\n         args.insert(0, expr);\n-        self.expr(span, ast::ExprKind::MethodCall(id, Vec::new(), args))\n+        self.expr(span, ast::ExprKind::MethodCall(ast::PathSegment::from_ident(ident, span), args))\n     }\n     fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr> {\n         self.expr(b.span, ast::ExprKind::Block(b))"}, {"sha": "eaec1eef1722cc3b4d0cb8c78a7460bd3a346a40", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -1151,10 +1151,15 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 ExprKind::Call(folder.fold_expr(f),\n                          folder.fold_exprs(args))\n             }\n-            ExprKind::MethodCall(i, tps, args) => {\n+            ExprKind::MethodCall(seg, args) => {\n                 ExprKind::MethodCall(\n-                    respan(folder.new_span(i.span), folder.fold_ident(i.node)),\n-                    tps.move_map(|x| folder.fold_ty(x)),\n+                    PathSegment {\n+                        identifier: folder.fold_ident(seg.identifier),\n+                        span: folder.new_span(seg.span),\n+                        parameters: seg.parameters.map(|ps| {\n+                            ps.map(|ps| folder.fold_path_parameters(ps))\n+                        }),\n+                    },\n                     folder.fold_exprs(args))\n             }\n             ExprKind::Binary(binop, lhs, rhs) => {"}, {"sha": "093ab0073f0dbef84082fcdde8ab573ef8265f51", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use abi::{self, Abi};\n-use ast::{AttrStyle, BareFnTy};\n+use ast::{AngleBracketedParameterData, AttrStyle, BareFnTy};\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Unsafety;\n use ast::{Mod, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n@@ -1831,11 +1831,7 @@ impl<'a> Parser<'a> {\n             let parameters = if parse_generics && self.eat_lt() {\n                 let (lifetimes, types, bindings) = self.parse_generic_args()?;\n                 self.expect_gt()?;\n-                ast::AngleBracketedParameterData {\n-                    lifetimes: lifetimes,\n-                    types: types,\n-                    bindings: bindings,\n-                }.into()\n+                AngleBracketedParameterData { lifetimes, types, bindings }.into()\n             } else if self.eat(&token::OpenDelim(token::Paren)) {\n                 let lo = self.prev_span;\n \n@@ -1898,11 +1894,7 @@ impl<'a> Parser<'a> {\n                 segments.push(PathSegment {\n                     identifier: identifier,\n                     span: ident_span,\n-                    parameters: ast::AngleBracketedParameterData {\n-                        lifetimes: lifetimes,\n-                        types: types,\n-                        bindings: bindings,\n-                    }.into(),\n+                    parameters: AngleBracketedParameterData { lifetimes, types, bindings }.into(),\n                 });\n \n                 // Consumed `a::b::<T,U>`, check for `::` before proceeding\n@@ -2023,14 +2015,6 @@ impl<'a> Parser<'a> {\n         ExprKind::Call(f, args)\n     }\n \n-    fn mk_method_call(&mut self,\n-                      ident: ast::SpannedIdent,\n-                      tps: Vec<P<Ty>>,\n-                      args: Vec<P<Expr>>)\n-                      -> ast::ExprKind {\n-        ExprKind::MethodCall(ident, tps, args)\n-    }\n-\n     pub fn mk_index(&mut self, expr: P<Expr>, idx: P<Expr>) -> ast::ExprKind {\n         ExprKind::Index(expr, idx)\n     }\n@@ -2460,7 +2444,7 @@ impl<'a> Parser<'a> {\n     // parsing into an expression.\n     fn parse_dot_suffix(&mut self, ident: Ident, ident_span: Span, self_value: P<Expr>, lo: Span)\n                         -> PResult<'a, P<Expr>> {\n-        let (_, tys, bindings) = if self.eat(&token::ModSep) {\n+        let (lifetimes, types, bindings) = if self.eat(&token::ModSep) {\n             self.expect_lt()?;\n             let args = self.parse_generic_args()?;\n             self.expect_gt()?;\n@@ -2469,11 +2453,6 @@ impl<'a> Parser<'a> {\n             (Vec::new(), Vec::new(), Vec::new())\n         };\n \n-        if !bindings.is_empty() {\n-            let prev_span = self.prev_span;\n-            self.span_err(prev_span, \"type bindings are only permitted on trait paths\");\n-        }\n-\n         Ok(match self.token {\n             // expr.f() method call.\n             token::OpenDelim(token::Paren) => {\n@@ -2486,17 +2465,20 @@ impl<'a> Parser<'a> {\n                 let hi = self.prev_span;\n \n                 es.insert(0, self_value);\n-                let id = respan(ident_span.to(ident_span), ident);\n-                let nd = self.mk_method_call(id, tys, es);\n-                self.mk_expr(lo.to(hi), nd, ThinVec::new())\n+                let seg = PathSegment {\n+                    identifier: ident,\n+                    span: ident_span.to(ident_span),\n+                    parameters: AngleBracketedParameterData { lifetimes, types, bindings }.into(),\n+                };\n+                self.mk_expr(lo.to(hi), ExprKind::MethodCall(seg, es), ThinVec::new())\n             }\n             // Field access.\n             _ => {\n-                if !tys.is_empty() {\n-                    let prev_span = self.prev_span;\n-                    self.span_err(prev_span,\n-                                  \"field expressions may not \\\n-                                   have type parameters\");\n+                if let Some(generic_arg_span) = lifetimes.get(0).map(|x| x.span).or_else(||\n+                                                types.get(0).map(|x| x.span)).or_else(||\n+                                                bindings.get(0).map(|x| x.span)) {\n+                    self.span_err(generic_arg_span,\n+                                  \"field expressions may not have generic arguments\");\n                 }\n \n                 let id = respan(ident_span.to(ident_span), ident);"}, {"sha": "51c48f15f2975c442b44e4f05c980dfed19b5dc1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -1951,18 +1951,14 @@ impl<'a> State<'a> {\n     }\n \n     fn print_expr_method_call(&mut self,\n-                              ident: ast::SpannedIdent,\n-                              tys: &[P<ast::Ty>],\n+                              segment: &ast::PathSegment,\n                               args: &[P<ast::Expr>]) -> io::Result<()> {\n         let base_args = &args[1..];\n         self.print_expr(&args[0])?;\n         word(&mut self.s, \".\")?;\n-        self.print_ident(ident.node)?;\n-        if !tys.is_empty() {\n-            word(&mut self.s, \"::<\")?;\n-            self.commasep(Inconsistent, tys,\n-                          |s, ty| s.print_type(ty))?;\n-            word(&mut self.s, \">\")?;\n+        self.print_ident(segment.identifier)?;\n+        if let Some(ref parameters) = segment.parameters {\n+            self.print_path_parameters(parameters, true)?;\n         }\n         self.print_call_post(base_args)\n     }\n@@ -2041,8 +2037,8 @@ impl<'a> State<'a> {\n             ast::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(func, &args[..])?;\n             }\n-            ast::ExprKind::MethodCall(ident, ref tys, ref args) => {\n-                self.print_expr_method_call(ident, &tys[..], &args[..])?;\n+            ast::ExprKind::MethodCall(ref segment, ref args) => {\n+                self.print_expr_method_call(segment, &args[..])?;\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {\n                 self.print_expr_binary(op, lhs, rhs)?;"}, {"sha": "f4ac7e341ce4b6773d201dd38ad90406f570a671", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -674,9 +674,8 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref ident, ref types, ref arguments) => {\n-            visitor.visit_ident(ident.span, ident.node);\n-            walk_list!(visitor, visit_ty, types);\n+        ExprKind::MethodCall(ref segment, ref arguments) => {\n+            visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::Binary(_, ref left_expression, ref right_expression) => {"}, {"sha": "acffb06ebecf2cc4cbfdef6441e2cd8cf9d1190a", "filename": "src/test/compile-fail/method-call-type-binding.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    0.clone::<T = u8>(); //~ ERROR type bindings cannot be used in method calls\n+}"}, {"sha": "e904e8b5447a490876ac9261c7a7e3ef4826de37", "filename": "src/test/parse-fail/type-parameters-in-field-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287de2595a40c03d9ffe81f55c13c731fd01583f/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs?ref=287de2595a40c03d9ffe81f55c13c731fd01583f", "patch": "@@ -21,5 +21,5 @@ fn main() {\n         y: 2,\n     };\n     f.x::<isize>;\n-    //~^ ERROR field expressions may not have type parameters\n+    //~^ ERROR field expressions may not have generic arguments\n }"}]}