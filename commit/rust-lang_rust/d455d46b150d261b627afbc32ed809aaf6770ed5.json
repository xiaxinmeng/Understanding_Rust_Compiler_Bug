{"sha": "d455d46b150d261b627afbc32ed809aaf6770ed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NTVkNDZiMTUwZDI2MWI2MjdhZmJjMzJlZDgwOWFhZjY3NzBlZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T00:27:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:35Z"}, "message": "rustdoc: Remove non-attribute related stuff from attr_parser", "tree": {"sha": "fb68318efc1a706ac66f605d58c089e9dd8679be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb68318efc1a706ac66f605d58c089e9dd8679be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d455d46b150d261b627afbc32ed809aaf6770ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d455d46b150d261b627afbc32ed809aaf6770ed5", "html_url": "https://github.com/rust-lang/rust/commit/d455d46b150d261b627afbc32ed809aaf6770ed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d455d46b150d261b627afbc32ed809aaf6770ed5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87b8202984de9f1a7f9c3f1f13938108022deaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87b8202984de9f1a7f9c3f1f13938108022deaf", "html_url": "https://github.com/rust-lang/rust/commit/c87b8202984de9f1a7f9c3f1f13938108022deaf"}], "stats": {"total": 136, "additions": 60, "deletions": 76}, "files": [{"sha": "c447e0d72b3049ca8a5ae8e6e082661de6b26fa2", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 60, "deletions": 76, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/d455d46b150d261b627afbc32ed809aaf6770ed5/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d455d46b150d261b627afbc32ed809aaf6770ed5/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=d455d46b150d261b627afbc32ed809aaf6770ed5", "patch": "@@ -1,67 +1,52 @@\n import rustc::syntax::ast;\n \n+export fn_attrs, arg_attrs;\n export parse_fn;\n \n-fn parse_fn(\n+type fn_attrs = {\n+    brief: option<str>,\n+    desc: option<str>,\n+    args: [arg_attrs],\n+    return: option<str>\n+};\n+\n+type arg_attrs = {\n     name: str,\n-    id: ast::node_id,\n+    desc: str\n+};\n+\n+fn parse_fn(\n     attrs: [ast::attribute]\n-) -> doc::fndoc {\n-    let _fndoc = none;\n-    for attr: ast::attribute in attrs {\n-        alt attr.node.value.node {\n-            ast::meta_name_value(\n-                \"doc\", {node: ast::lit_str(value), span: _}) {\n-                _fndoc = some(~{\n-                    id: id,\n-                    name: name,\n-                    brief: some(value),\n-                    desc: none,\n-                    return: none,\n-                    args: []\n-                });\n-            }\n-            ast::meta_list(\"doc\", docs) {\n-                _fndoc = some(\n-                    parse_fn_(name, id, docs));\n-            }\n-        }\n-    }\n+) -> fn_attrs {\n \n-    let _fndoc0 = alt _fndoc {\n-        some(_d) { _d }\n-        none. {\n-          ~{\n-              id: id,\n-              name: name,\n-              brief: none,\n-              desc: none,\n-              return: none,\n-              args: []\n+    for attr in attrs {\n+        alt attr.node.value.node {\n+          ast::meta_name_value(\n+              \"doc\", {node: ast::lit_str(value), span: _}) {\n+            ret {\n+                brief: none,\n+                desc: some(value),\n+                args: [],\n+                return: none\n+            };\n+          }\n+          ast::meta_list(\"doc\", docs) {\n+            ret parse_fn_(docs);\n           }\n         }\n-    };\n+    }\n \n-    ret _fndoc0;\n+    {\n+        brief: none,\n+        desc: none,\n+        args: [],\n+        return: none\n+    }\n }\n \n-#[doc(\n-  brief = \"Parses function docs from a complex #[doc] attribute.\",\n-  desc = \"Supported attributes:\n-\n-* `brief`: Brief description\n-* `desc`: Long description\n-* `return`: Description of return value\n-* `args`: List of argname = argdesc pairs\n-\",\n-  args(items = \"Doc attribute contents\"),\n-  return = \"Parsed function docs.\"\n-)]\n fn parse_fn_(\n-    name: str,\n-    id: ast::node_id,\n     items: [@ast::meta_item]\n-) -> doc::fndoc {\n+) -> fn_attrs {\n     let brief = none;\n     let desc = none;\n     let return = none;\n@@ -95,23 +80,22 @@ fn parse_fn_(\n                 alt d.node {\n                   ast::meta_name_value(key, {node: ast::lit_str(value),\n                                              span: _}) {\n-                    argdocs += [(key, value)];\n+                    argdocs += [{\n+                        name: key,\n+                        desc: value\n+                    }];\n                   }\n                 }\n             }\n         }\n     }\n \n-    ~{\n-        id: id,\n-        name: name,\n+    {\n         brief: brief,\n         desc: desc,\n-        return: some({\n-            desc: return,\n-            ty: none,\n-        }),\n-        args: argdocs }\n+        args: argdocs,\n+        return: return\n+    }\n }\n \n #[cfg(test)]\n@@ -138,51 +122,51 @@ mod tests {\n     fn parse_fn_should_handle_undocumented_functions() {\n         let source = \"\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.brief == none;\n-        assert doc.desc == none;\n-        assert doc.return == none;\n-        assert vec::len(doc.args) == 0u;\n+        let attrs = parse_fn(attrs);\n+        assert attrs.brief == none;\n+        assert attrs.desc == none;\n+        assert attrs.return == none;\n+        assert vec::len(attrs.args) == 0u;\n     }\n \n-    #[test]\n+    #[tes]\n     fn parse_fn_should_parse_simple_doc_attributes() {\n         let source = \"#[doc = \\\"basic\\\"]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.brief == some(\"basic\");\n+        let attrs = parse_fn(attrs);\n+        assert attrs.brief == some(\"basic\");\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_brief_description() {\n         let source = \"#[doc(brief = \\\"short\\\")]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.brief == some(\"short\");\n+        let attrs = parse_fn(attrs);\n+        assert attrs.brief == some(\"short\");\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_long_description() {\n         let source = \"#[doc(desc = \\\"description\\\")]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.desc == some(\"description\");\n+        let attrs = parse_fn(attrs);\n+        assert attrs.desc == some(\"description\");\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_return_value_description() {\n         let source = \"#[doc(return = \\\"return value\\\")]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", 0, attrs);\n-        assert option::get(doc.return).desc == some(\"return value\");\n+        let attrs = parse_fn(attrs);\n+        assert attrs.return == some(\"return value\");\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_argument_descriptions() {\n         let source = \"#[doc(args(a = \\\"arg a\\\", b = \\\"arg b\\\"))]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.args[0] == (\"a\", \"arg a\");\n-        assert doc.args[1] == (\"b\", \"arg b\");\n+        let attrs = parse_fn(attrs);\n+        assert attrs.args[0] == {name: \"a\", desc: \"arg a\"};\n+        assert attrs.args[1] == {name: \"b\", desc: \"arg b\"};\n     }\n }\n\\ No newline at end of file"}]}