{"sha": "4644c3a6aa0ff0ad394175a029f5531728ecff31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDRjM2E2YWEwZmYwYWQzOTQxNzVhMDI5ZjU1MzE3MjhlY2ZmMzE=", "commit": {"author": {"name": "hgallagher1993", "email": "hgallagher1993@gmail.com", "date": "2019-03-28T17:54:29Z"}, "committer": {"name": "hgallagher1993", "email": "hgallagher1993@gmail.com", "date": "2019-03-28T17:54:29Z"}, "message": "Add check for when left and right overlap and change span for explanation to point at operator", "tree": {"sha": "2d6694fd210d269419d5f2770f5bbd892cd23bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6694fd210d269419d5f2770f5bbd892cd23bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4644c3a6aa0ff0ad394175a029f5531728ecff31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4644c3a6aa0ff0ad394175a029f5531728ecff31", "html_url": "https://github.com/rust-lang/rust/commit/4644c3a6aa0ff0ad394175a029f5531728ecff31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4644c3a6aa0ff0ad394175a029f5531728ecff31/comments", "author": {"login": "hgallagher1993", "id": 10942523, "node_id": "MDQ6VXNlcjEwOTQyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/10942523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgallagher1993", "html_url": "https://github.com/hgallagher1993", "followers_url": "https://api.github.com/users/hgallagher1993/followers", "following_url": "https://api.github.com/users/hgallagher1993/following{/other_user}", "gists_url": "https://api.github.com/users/hgallagher1993/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgallagher1993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgallagher1993/subscriptions", "organizations_url": "https://api.github.com/users/hgallagher1993/orgs", "repos_url": "https://api.github.com/users/hgallagher1993/repos", "events_url": "https://api.github.com/users/hgallagher1993/events{/privacy}", "received_events_url": "https://api.github.com/users/hgallagher1993/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hgallagher1993", "id": 10942523, "node_id": "MDQ6VXNlcjEwOTQyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/10942523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgallagher1993", "html_url": "https://github.com/hgallagher1993", "followers_url": "https://api.github.com/users/hgallagher1993/followers", "following_url": "https://api.github.com/users/hgallagher1993/following{/other_user}", "gists_url": "https://api.github.com/users/hgallagher1993/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgallagher1993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgallagher1993/subscriptions", "organizations_url": "https://api.github.com/users/hgallagher1993/orgs", "repos_url": "https://api.github.com/users/hgallagher1993/repos", "events_url": "https://api.github.com/users/hgallagher1993/events{/privacy}", "received_events_url": "https://api.github.com/users/hgallagher1993/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d648ce1b936de167260ed4d11f8c3d2f6462ff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d648ce1b936de167260ed4d11f8c3d2f6462ff0", "html_url": "https://github.com/rust-lang/rust/commit/4d648ce1b936de167260ed4d11f8c3d2f6462ff0"}], "stats": {"total": 64, "additions": 17, "deletions": 47}, "files": [{"sha": "d6932094dddb6000b4761dc8f5258030f3d1ec0a", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, true) {\n+                                                            rhs_ty, &mut err, true, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -332,8 +332,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 op.node.as_str(),\n                                 lhs_ty);\n \n-                            err.span_label(lhs_expr.span, lhs_ty.to_string());\n-                            err.span_label(rhs_expr.span, rhs_ty.to_string());\n+                            if !lhs_expr.span.eq(&rhs_expr.span) {\n+                                err.span_label(lhs_expr.span, lhs_ty.to_string());\n+                                err.span_label(rhs_expr.span, rhs_ty.to_string());\n+                            }\n \n                             let mut suggested_deref = false;\n                             if let Ref(_, mut rty, _) = lhs_ty.sty {\n@@ -384,7 +386,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, false) {\n+                                                            rhs_ty, &mut err, false, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -422,6 +424,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         rhs_ty: Ty<'tcx>,\n         err: &mut errors::DiagnosticBuilder<'_>,\n         is_assign: bool,\n+        op: hir::BinOp,\n     ) -> bool {\n         let source_map = self.tcx.sess.source_map();\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n@@ -435,7 +438,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             (&Ref(_, l_ty, _), &Ref(_, r_ty, _))\n             if l_ty.sty == Str && r_ty.sty == Str => {\n                 if !is_assign {\n-                    err.span_label(expr.span,\n+                    err.span_label(op.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n                     match source_map.span_to_snippet(lhs_expr.span) {\n                         Ok(lstring) => err.span_suggestion("}, {"sha": "ed5468cc4dac2d5574da7dfb48ff2fc4c4e5a7c1", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -3,9 +3,6 @@ error[E0369]: binary operation `==` cannot be applied to type `Error`\n    |\n LL |      x: Error\n    |      ^^^^^^^^\n-   |      |\n-   |      Error\n-   |      Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n@@ -14,9 +11,6 @@ error[E0369]: binary operation `!=` cannot be applied to type `Error`\n    |\n LL |      x: Error\n    |      ^^^^^^^^\n-   |      |\n-   |      Error\n-   |      Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n "}, {"sha": "06a88c03f58afbd46560c19725422f59252d22be", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -3,9 +3,6 @@ error[E0369]: binary operation `==` cannot be applied to type `Error`\n    |\n LL |      Error\n    |      ^^^^^\n-   |      |\n-   |      Error\n-   |      Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n@@ -14,9 +11,6 @@ error[E0369]: binary operation `!=` cannot be applied to type `Error`\n    |\n LL |      Error\n    |      ^^^^^\n-   |      |\n-   |      Error\n-   |      Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n "}, {"sha": "b8481048361e5d50a43113f9b4c0c886fdc5eb99", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -3,9 +3,6 @@ error[E0369]: binary operation `==` cannot be applied to type `Error`\n    |\n LL |     x: Error\n    |     ^^^^^^^^\n-   |     |\n-   |     Error\n-   |     Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n@@ -14,9 +11,6 @@ error[E0369]: binary operation `!=` cannot be applied to type `Error`\n    |\n LL |     x: Error\n    |     ^^^^^^^^\n-   |     |\n-   |     Error\n-   |     Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n "}, {"sha": "4398d25212550bcd842811f7168f31426a5a5187", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -3,9 +3,6 @@ error[E0369]: binary operation `==` cannot be applied to type `Error`\n    |\n LL |     Error\n    |     ^^^^^\n-   |     |\n-   |     Error\n-   |     Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n \n@@ -14,9 +11,6 @@ error[E0369]: binary operation `!=` cannot be applied to type `Error`\n    |\n LL |     Error\n    |     ^^^^^\n-   |     |\n-   |     Error\n-   |     Error\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n "}, {"sha": "3206eecbe30e4effe2ce20d4a2eb432f0d42638b", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -3,9 +3,6 @@ error[E0369]: binary operation `==` cannot be applied to type `NoCloneOrEq`\n    |\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n-   |     |\n-   |     NoCloneOrEq\n-   |     NoCloneOrEq\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n \n@@ -14,9 +11,6 @@ error[E0369]: binary operation `!=` cannot be applied to type `NoCloneOrEq`\n    |\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n-   |     |\n-   |     NoCloneOrEq\n-   |     NoCloneOrEq\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n "}, {"sha": "88466131e3144db988a478ad59b6dafd21d7b8b9", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -2,11 +2,10 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n   --> $DIR/issue-47377.rs:4:14\n    |\n LL |      let _a = b + \", World!\";\n-   |               --^-----------\n-   |               |   |\n-   |               |   &str\n+   |               - ^ ---------- &str\n+   |               | |\n+   |               | `+` can't be used to concatenate two `&str` strings\n    |               &str\n-   |               `+` can't be used to concatenate two `&str` strings\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |      let _a = b.to_owned() + \", World!\";"}, {"sha": "d69101eab4c46e2f5bd4e9e0aeb4b67eb55aa6c9", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -2,11 +2,10 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n   --> $DIR/issue-47380.rs:3:35\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n-   |                                      --^-----------\n-   |                                      |   |\n-   |                                      |   &str\n+   |                                      - ^ ---------- &str\n+   |                                      | |\n+   |                                      | `+` can't be used to concatenate two `&str` strings\n    |                                      &str\n-   |                                      `+` can't be used to concatenate two `&str` strings\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";"}, {"sha": "a5b91f090d2c01a62d08fccad35f1a5c89a08935", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4644c3a6aa0ff0ad394175a029f5531728ecff31/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=4644c3a6aa0ff0ad394175a029f5531728ecff31", "patch": "@@ -2,11 +2,10 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n   --> $DIR/issue-39018.rs:2:22\n    |\n LL |     let x = \"Hello \" + \"World!\";\n-   |             ---------^---------\n-   |             |          |\n-   |             |          &str\n+   |             -------- ^ -------- &str\n+   |             |        |\n+   |             |        `+` can't be used to concatenate two `&str` strings\n    |             &str\n-   |             `+` can't be used to concatenate two `&str` strings\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + \"World!\";"}]}