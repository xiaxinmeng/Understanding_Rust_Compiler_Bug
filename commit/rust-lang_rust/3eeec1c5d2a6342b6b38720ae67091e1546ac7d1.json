{"sha": "3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZWVjMWM1ZDJhNjM0MmI2YjM4NzIwYWU2NzA5MWUxNTQ2YWM3ZDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-17T22:49:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T10:52:37Z"}, "message": "Break dependencies between `syntax_ext` and some other crates\n\nMove `source_uitil` macros into `syntax_ext`\nCleanup dependencies of `rustc_driver`", "tree": {"sha": "7131b44140df25efbe0806e429d57370e1df1fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7131b44140df25efbe0806e429d57370e1df1fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "html_url": "https://github.com/rust-lang/rust/commit/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e39897587dca70f0b15093d425a682c392349c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e39897587dca70f0b15093d425a682c392349c", "html_url": "https://github.com/rust-lang/rust/commit/09e39897587dca70f0b15093d425a682c392349c"}], "stats": {"total": 69, "additions": 22, "deletions": 47}, "files": [{"sha": "a8246eed853e450a5e52b75077f85b2fb584cc1c", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -2863,31 +2863,20 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n- \"arena 0.0.0\",\n  \"env_logger 0.5.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_ast_borrowck 0.0.0\",\n  \"rustc_codegen_utils 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_incremental 0.0.0\",\n  \"rustc_interface 0.0.0\",\n- \"rustc_lint 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_mir 0.0.0\",\n- \"rustc_passes 0.0.0\",\n- \"rustc_plugin 0.0.0\",\n- \"rustc_privacy 0.0.0\",\n- \"rustc_resolve 0.0.0\",\n  \"rustc_save_analysis 0.0.0\",\n  \"rustc_target 0.0.0\",\n- \"rustc_traits 0.0.0\",\n- \"rustc_typeck 0.0.0\",\n  \"serialize 0.0.0\",\n- \"smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -3066,7 +3055,6 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n- \"syntax_ext 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n "}, {"sha": "42aa8203cba0eb21882745ff5287fed5bdc557a6", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -10,30 +10,19 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-arena = { path = \"../libarena\" }\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n env_logger = { version = \"0.5\", default-features = false }\n-rayon = { version = \"0.2.0\", package = \"rustc-rayon\" }\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_ast_borrowck = { path = \"../librustc_ast_borrowck\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-rustc_incremental = { path = \"../librustc_incremental\" }\n-rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n-rustc_passes = { path = \"../librustc_passes\" }\n-rustc_plugin = { path = \"../librustc_plugin\" }\n-rustc_privacy = { path = \"../librustc_privacy\" }\n-rustc_resolve = { path = \"../librustc_resolve\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n-rustc_traits = { path = \"../librustc_traits\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n-rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n-smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "5f378dacd25ae71bee9f666fff711ea51a3e5c6b", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -14,6 +14,5 @@ rustc = { path = \"../librustc\" }\n rustc_mir = { path = \"../librustc_mir\"}\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }"}, {"sha": "562865ef55f4cff5a6b2e0d2cc0aad2337bcdbf6", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -14,12 +14,12 @@ use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n use syntax::attr;\n+use syntax::ext::proc_macro::is_proc_macro_attr;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n use syntax::{span_err, struct_span_err, walk_list};\n-use syntax_ext::proc_macro_decls::is_proc_macro_attr;\n use syntax_pos::{Span, MultiSpan};\n use errors::{Applicability, FatalError};\n "}, {"sha": "e53757dce3d3363253a55d291a7b54be5cbf5b40", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -14,7 +14,7 @@ use crate::tokenstream::{self, TokenStream, TokenTree};\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n+use syntax_pos::{FileName, Span, MultiSpan, DUMMY_SP};\n use syntax_pos::hygiene::{ExpnInfo, ExpnKind};\n \n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "3aac79e241aa18a3ae66df1d3f78398966c8a59e", "filename": "src/libsyntax/ext/proc_macro.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro.rs?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -0,0 +1,7 @@\n+use crate::ast::Attribute;\n+use crate::symbol::sym;\n+\n+pub fn is_proc_macro_attr(attr: &Attribute) -> bool {\n+    [sym::proc_macro, sym::proc_macro_attribute, sym::proc_macro_derive]\n+        .iter().any(|kind| attr.check_name(*kind))\n+}"}, {"sha": "7471fb453255349f655c2521dd32627a83e31056", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -37,6 +37,7 @@ const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n // way towards a non-panic!-prone parser. It should be used for fatal parsing\n // errors; eventually we plan to convert all code using panictry to just use\n // normal try.\n+#[macro_export]\n macro_rules! panictry {\n     ($e:expr) => ({\n         use std::result::Result::{Ok, Err};\n@@ -168,7 +169,7 @@ pub mod ext {\n     pub mod derive;\n     pub mod expand;\n     pub mod placeholders;\n-    pub mod source_util;\n+    pub mod proc_macro;\n \n     pub mod tt {\n         pub mod transcribe;"}, {"sha": "2c5a9ab0512c993f1bbfa9ddc83a812b5dd30b54", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -39,6 +39,7 @@ mod global_allocator;\n mod global_asm;\n mod log_syntax;\n mod proc_macro_server;\n+mod source_util;\n mod test;\n mod test_case;\n mod trace_macros;"}, {"sha": "357da6ba3c3aaf1dc6ff6f651f50f712dcb9b24c", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -7,21 +7,15 @@ use syntax::ext::base::{ExtCtxt, MacroKind};\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n use syntax::ext::hygiene::ExpnId;\n+use syntax::ext::proc_macro::is_proc_macro_attr;\n use syntax::mut_visit::MutVisitor;\n use syntax::parse::ParseSess;\n use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n \n-const PROC_MACRO_KINDS: [Symbol; 3] = [\n-    sym::proc_macro_derive,\n-    sym::proc_macro_attribute,\n-    sym::proc_macro\n-];\n-\n struct ProcMacroDerive {\n     trait_name: ast::Name,\n     function_name: Ident,\n@@ -88,10 +82,6 @@ pub fn modify(sess: &ParseSess,\n     krate\n }\n \n-pub fn is_proc_macro_attr(attr: &ast::Attribute) -> bool {\n-    PROC_MACRO_KINDS.iter().any(|kind| attr.check_name(*kind))\n-}\n-\n impl<'a> CollectProcMacros<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n         if self.is_proc_macro_crate && self.in_root && vis.node.is_pub() {"}, {"sha": "8ecfd4ddda7bfe7abc78b1f7f96b9137ca47c532", "filename": "src/libsyntax_ext/source_util.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eeec1c5d2a6342b6b38720ae67091e1546ac7d1/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=3eeec1c5d2a6342b6b38720ae67091e1546ac7d1", "patch": "@@ -1,11 +1,11 @@\n-use crate::ast;\n-use crate::ext::base::{self, *};\n-use crate::ext::build::AstBuilder;\n-use crate::parse::{self, token, DirectoryOwnership};\n-use crate::print::pprust;\n-use crate::ptr::P;\n-use crate::symbol::Symbol;\n-use crate::tokenstream;\n+use syntax::{ast, panictry};\n+use syntax::ext::base::{self, *};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::{self, token, DirectoryOwnership};\n+use syntax::print::pprust;\n+use syntax::ptr::P;\n+use syntax::symbol::Symbol;\n+use syntax::tokenstream;\n \n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n@@ -94,7 +94,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstrea\n             while self.p.token != token::Eof {\n                 match panictry!(self.p.parse_item()) {\n                     Some(item) => ret.push(item),\n-                    None => self.p.diagnostic().span_fatal(self.p.token.span,\n+                    None => self.p.sess.span_diagnostic.span_fatal(self.p.token.span,\n                                                            &format!(\"expected item, found `{}`\",\n                                                                     self.p.this_token_to_string()))\n                                                .raise()", "previous_filename": "src/libsyntax/ext/source_util.rs"}]}