{"sha": "ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2M4Y2I1MTgyYWU1ZmZlZTRjZDQ3ZGJhYmJlOTgxZjg1OWM0MGY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-21T04:59:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-21T04:59:29Z"}, "message": "Rollup merge of #77726 - fusion-engineering-forks:static-pin, r=dtolnay\n\nAdd Pin::static_ref, static_mut.\n\nThis adds `Pin::static_ref` and `Pin::static_mut`, which convert a static reference to a pinned static reference.\n\nStatic references are effectively already pinned, as what they refer to has to live forever and can never be moved.\n\n---\n\nContext: I want to update the `sys` and `sys_common` mutexes/rwlocks/condvars to use `Pin<&self>` in their functions, instead of only warning in the unsafety comments that they may not be moved. That should make them a little bit less dangerous to use. Putting such an object in a `static` (e.g. through `sys_common::StaticMutex`) fulfills the requirements about never moving it, but right now there's no safe way to get a `Pin<&T>` to a `static`. This solves that.", "tree": {"sha": "cf78d624aa0e1e6e1d2c8e91bb6c5f0a000d563a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf78d624aa0e1e6e1d2c8e91bb6c5f0a000d563a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfj8AxCRBK7hj4Ov3rIwAAdHIIABw1hPMPIlMh5ljNYQsQIzW7\niSvq/NSok+KDW/y0cYKJP2WnGQk+l+F2Xi/CSQPO+ZEog86IA1mMHoIqduB13PZU\nLuXDy7RcfI5hANx5vjXHk5GD2ZUE+CH8PIs1hSlUjxF40zhamLJXZQOrZXcbONCh\ns7fHvpdhPPnpGIbNbPtLpinA6+HPI+kvO9eZ0NHtNw4quFpog9+xwccAqEF3XFG3\naFjlzD8uJCHuNHTdLrkwO861Y6oB/eOZ+KY9wZomC9+SSSuBYcMP3bTWxPKpZ0RL\nOThMDl9cB00B1Ekhx/EmbxtQb/t/PSh76+DKXzwG1ZmNftjl8mOM57h9UZKPl40=\n=Lqm8\n-----END PGP SIGNATURE-----\n", "payload": "tree cf78d624aa0e1e6e1d2c8e91bb6c5f0a000d563a\nparent f965120ad3dbe7d4d6b90a16cc7028eb6363b983\nparent df95dcebf5f98cefdc60c9b9d818fb285ac07d5b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603256369 +0900\ncommitter GitHub <noreply@github.com> 1603256369 +0900\n\nRollup merge of #77726 - fusion-engineering-forks:static-pin, r=dtolnay\n\nAdd Pin::static_ref, static_mut.\n\nThis adds `Pin::static_ref` and `Pin::static_mut`, which convert a static reference to a pinned static reference.\n\nStatic references are effectively already pinned, as what they refer to has to live forever and can never be moved.\n\n---\n\nContext: I want to update the `sys` and `sys_common` mutexes/rwlocks/condvars to use `Pin<&self>` in their functions, instead of only warning in the unsafety comments that they may not be moved. That should make them a little bit less dangerous to use. Putting such an object in a `static` (e.g. through `sys_common::StaticMutex`) fulfills the requirements about never moving it, but right now there's no safe way to get a `Pin<&T>` to a `static`. This solves that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f", "html_url": "https://github.com/rust-lang/rust/commit/ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "html_url": "https://github.com/rust-lang/rust/commit/f965120ad3dbe7d4d6b90a16cc7028eb6363b983"}, {"sha": "df95dcebf5f98cefdc60c9b9d818fb285ac07d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df95dcebf5f98cefdc60c9b9d818fb285ac07d5b", "html_url": "https://github.com/rust-lang/rust/commit/df95dcebf5f98cefdc60c9b9d818fb285ac07d5b"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "b73cd046e5a6558baddd1d2d35306c48372937d0", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=ff3c8cb5182ae5ffee4cd47dbabbe981f859c40f", "patch": "@@ -781,6 +781,34 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     }\n }\n \n+impl<T: ?Sized> Pin<&'static T> {\n+    /// Get a pinned reference from a static reference.\n+    ///\n+    /// This is safe, because `T` is borrowed for the `'static` lifetime, which\n+    /// never ends.\n+    #[unstable(feature = \"pin_static_ref\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const fn static_ref(r: &'static T) -> Pin<&'static T> {\n+        // SAFETY: The 'static borrow guarantees the data will not be\n+        // moved/invalidated until it gets dropped (which is never).\n+        unsafe { Pin::new_unchecked(r) }\n+    }\n+}\n+\n+impl<T: ?Sized> Pin<&'static mut T> {\n+    /// Get a pinned mutable reference from a static mutable reference.\n+    ///\n+    /// This is safe, because `T` is borrowed for the `'static` lifetime, which\n+    /// never ends.\n+    #[unstable(feature = \"pin_static_ref\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const fn static_mut(r: &'static mut T) -> Pin<&'static mut T> {\n+        // SAFETY: The 'static borrow guarantees the data will not be\n+        // moved/invalidated until it gets dropped (which is never).\n+        unsafe { Pin::new_unchecked(r) }\n+    }\n+}\n+\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: Deref> Deref for Pin<P> {\n     type Target = P::Target;"}]}