{"sha": "c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f", "node_id": "C_kwDOAAsO6NoAKGM2NzhhY2QzYTI3NWM5YWNkMzRjMmVjZmE5YjdiMDZlMmNhNzg3NGY", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-04-30T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-04-30T21:57:47Z"}, "message": "Leave promoteds untainted by errors when borrowck fails\n\nPreviously, when borrowck failed it would taint all promoteds within the MIR\nbody. An attempt to evaluated the promoteds would subsequently fail with\nspurious \"note: erroneous constant used\". For example:\n\n```console\n...\nnote: erroneous constant used\n --> tests/ui/borrowck/tainted-promoteds.rs:7:9\n  |\n7 |     a = &0 * &1 * &2 * &3;\n  |         ^^\n\nnote: erroneous constant used\n --> tests/ui/borrowck/tainted-promoteds.rs:7:14\n  |\n7 |     a = &0 * &1 * &2 * &3;\n  |              ^^\n\nnote: erroneous constant used\n --> tests/ui/borrowck/tainted-promoteds.rs:7:19\n  |\n7 |     a = &0 * &1 * &2 * &3;\n  |                   ^^\n\nnote: erroneous constant used\n --> tests/ui/borrowck/tainted-promoteds.rs:7:24\n  |\n7 |     a = &0 * &1 * &2 * &3;\n  |                        ^^\n```\n\nBorrowck failure doesn't indicate that there is anything wrong with\npromoteds. Leave them untainted.", "tree": {"sha": "9b805f07e2303b061cedf59f879a57704e2cfd7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b805f07e2303b061cedf59f879a57704e2cfd7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f", "html_url": "https://github.com/rust-lang/rust/commit/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2eb9f85b9b52e6538c3c7fc160725963272d471", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2eb9f85b9b52e6538c3c7fc160725963272d471", "html_url": "https://github.com/rust-lang/rust/commit/f2eb9f85b9b52e6538c3c7fc160725963272d471"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "8d9a22ea30ddfdcfe7f72a96f542fc2ad139f27c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f", "patch": "@@ -616,13 +616,10 @@ fn promoted_mir(tcx: TyCtxt<'_>, def: LocalDefId) -> &IndexVec<Promoted, Body<'_\n         return tcx.arena.alloc(IndexVec::new());\n     }\n \n-    let tainted_by_errors = tcx.mir_borrowck(def).tainted_by_errors;\n+    tcx.ensure_with_value().mir_borrowck(def);\n     let mut promoted = tcx.mir_promoted(def).1.steal();\n \n     for body in &mut promoted {\n-        if let Some(error_reported) = tainted_by_errors {\n-            body.tainted_by_errors = Some(error_reported);\n-        }\n         run_analysis_to_runtime_passes(tcx, body);\n     }\n "}, {"sha": "2b6f0ddbd6c7fc793fddd28bb4d34410313d8ed6", "filename": "tests/ui/borrowck/tainted-promoteds.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f/tests%2Fui%2Fborrowck%2Ftainted-promoteds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f/tests%2Fui%2Fborrowck%2Ftainted-promoteds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ftainted-promoteds.rs?ref=c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for issue #110856, where a borrowck error for a MIR tainted\n+// all promoteds within. This in turn generated a spurious \"erroneous constant\n+// used\" note when trying to evaluate a promoted.\n+\n+pub fn f() -> u32 {\n+    let a = 0;\n+    a = &0 * &1 * &2 * &3;\n+    //~^ ERROR: cannot assign twice to immutable variable\n+    a\n+}\n+\n+fn main() {}"}, {"sha": "b276ea9acebe909dc6dd1651d3241fe290f3e0b9", "filename": "tests/ui/borrowck/tainted-promoteds.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f/tests%2Fui%2Fborrowck%2Ftainted-promoteds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f/tests%2Fui%2Fborrowck%2Ftainted-promoteds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ftainted-promoteds.stderr?ref=c678acd3a275c9acd34c2ecfa9b7b06e2ca7874f", "patch": "@@ -0,0 +1,14 @@\n+error[E0384]: cannot assign twice to immutable variable `a`\n+  --> $DIR/tainted-promoteds.rs:7:5\n+   |\n+LL |     let a = 0;\n+   |         -\n+   |         |\n+   |         first assignment to `a`\n+   |         help: consider making this binding mutable: `mut a`\n+LL |     a = &0 * &1 * &2 * &3;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`."}]}