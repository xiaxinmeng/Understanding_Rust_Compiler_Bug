{"sha": "28ff0df6ede91c8bfadb29d5f966cff15b15c9df", "node_id": "C_kwDOAAsO6NoAKDI4ZmYwZGY2ZWRlOTFjOGJmYWRiMjlkNWY5NjZjZmYxNWIxNWM5ZGY", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-05-20T01:28:30Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-06-16T01:39:23Z"}, "message": "fix box derefs in var debug info", "tree": {"sha": "31aa2d992c184223bc632533fdeea64b2ce4988a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31aa2d992c184223bc632533fdeea64b2ce4988a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ff0df6ede91c8bfadb29d5f966cff15b15c9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ff0df6ede91c8bfadb29d5f966cff15b15c9df", "html_url": "https://github.com/rust-lang/rust/commit/28ff0df6ede91c8bfadb29d5f966cff15b15c9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ff0df6ede91c8bfadb29d5f966cff15b15c9df/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6003c2501c63176dbb7f15293ec91758c82416db", "url": "https://api.github.com/repos/rust-lang/rust/commits/6003c2501c63176dbb7f15293ec91758c82416db", "html_url": "https://github.com/rust-lang/rust/commit/6003c2501c63176dbb7f15293ec91758c82416db"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "a80d2fbd644d486df2769071b1cfd45cafba61f4", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/28ff0df6ede91c8bfadb29d5f966cff15b15c9df/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ff0df6ede91c8bfadb29d5f966cff15b15c9df/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=28ff0df6ede91c8bfadb29d5f966cff15b15c9df", "patch": "@@ -146,6 +146,37 @@ impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n             }\n \n             visitor.patch.apply(body);\n+\n+            for debug_info in body.var_debug_info.iter_mut() {\n+                if let VarDebugInfoContents::Place(place) = &mut debug_info.value {\n+                    let mut new_projections: Option<Vec<_>> = None;\n+                    let mut last_deref = 0;\n+\n+                    for (i, (base, elem)) in place.iter_projections().enumerate() {\n+                        let base_ty = base.ty(&body.local_decls, tcx).ty;\n+\n+                        if elem == PlaceElem::Deref && base_ty.is_box() {\n+                            let new_projections = new_projections.get_or_insert_default();\n+\n+                            let (unique_ty, nonnull_ty, ptr_ty) =\n+                                build_ptr_tys(tcx, base_ty.boxed_ty(), unique_did, nonnull_did);\n+\n+                            new_projections.extend_from_slice(&base.projection[last_deref..]);\n+                            new_projections.extend_from_slice(&build_projection(\n+                                unique_ty, nonnull_ty, ptr_ty,\n+                            ));\n+                            new_projections.push(PlaceElem::Deref);\n+\n+                            last_deref = i;\n+                        }\n+                    }\n+\n+                    if let Some(mut new_projections) = new_projections {\n+                        new_projections.extend_from_slice(&place.projection[last_deref..]);\n+                        place.projection = tcx.intern_place_elems(&new_projections);\n+                    }\n+                }\n+            }\n         } else {\n             // box is not present, this pass doesn't need to do anything\n         }"}]}