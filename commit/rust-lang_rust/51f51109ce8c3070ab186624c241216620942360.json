{"sha": "51f51109ce8c3070ab186624c241216620942360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZjUxMTA5Y2U4YzMwNzBhYjE4NjYyNGMyNDEyMTY2MjA5NDIzNjA=", "commit": {"author": {"name": "Kurtis Nusbaum", "email": "kurtis@uber.com", "date": "2018-04-19T20:56:26Z"}, "committer": {"name": "Kurtis Nusbaum", "email": "kurtis@uber.com", "date": "2018-04-19T20:57:01Z"}, "message": "add --edition option", "tree": {"sha": "74dfdbad9a2699c4db30b14583481fdaad82696f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74dfdbad9a2699c4db30b14583481fdaad82696f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51f51109ce8c3070ab186624c241216620942360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51f51109ce8c3070ab186624c241216620942360", "html_url": "https://github.com/rust-lang/rust/commit/51f51109ce8c3070ab186624c241216620942360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51f51109ce8c3070ab186624c241216620942360/comments", "author": {"login": "klnusbaum", "id": 495570, "node_id": "MDQ6VXNlcjQ5NTU3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klnusbaum", "html_url": "https://github.com/klnusbaum", "followers_url": "https://api.github.com/users/klnusbaum/followers", "following_url": "https://api.github.com/users/klnusbaum/following{/other_user}", "gists_url": "https://api.github.com/users/klnusbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/klnusbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klnusbaum/subscriptions", "organizations_url": "https://api.github.com/users/klnusbaum/orgs", "repos_url": "https://api.github.com/users/klnusbaum/repos", "events_url": "https://api.github.com/users/klnusbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/klnusbaum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klnusbaum", "id": 495570, "node_id": "MDQ6VXNlcjQ5NTU3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/495570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klnusbaum", "html_url": "https://github.com/klnusbaum", "followers_url": "https://api.github.com/users/klnusbaum/followers", "following_url": "https://api.github.com/users/klnusbaum/following{/other_user}", "gists_url": "https://api.github.com/users/klnusbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/klnusbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klnusbaum/subscriptions", "organizations_url": "https://api.github.com/users/klnusbaum/orgs", "repos_url": "https://api.github.com/users/klnusbaum/repos", "events_url": "https://api.github.com/users/klnusbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/klnusbaum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8830a0304327ba8c983555ac5d42cec0569c31bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8830a0304327ba8c983555ac5d42cec0569c31bb", "html_url": "https://github.com/rust-lang/rust/commit/8830a0304327ba8c983555ac5d42cec0569c31bb"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "2d0b4eecf63c629f044837935edc44cbe9035349", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/51f51109ce8c3070ab186624c241216620942360/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f51109ce8c3070ab186624c241216620942360/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=51f51109ce8c3070ab186624c241216620942360", "patch": "@@ -16,6 +16,8 @@ pub use self::CrateType::*;\n pub use self::Passes::*;\n pub use self::DebugInfoLevel::*;\n \n+use std::str::FromStr;\n+\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n@@ -28,7 +30,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n-use syntax::edition::Edition;\n+use syntax::edition::{Edition, ALL_EDITIONS, DEFAULT_EDITION};\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -410,6 +412,7 @@ top_level_options!(\n \n         // Remap source path prefixes in all output (messages, object files, debug, etc)\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\n+        edition: Edition [UNTRACKED],\n     }\n );\n \n@@ -589,6 +592,7 @@ pub fn basic_options() -> Options {\n         cli_forced_codegen_units: None,\n         cli_forced_thinlto_off: false,\n         remap_path_prefix: Vec::new(),\n+        edition: DEFAULT_EDITION,\n     }\n }\n \n@@ -773,16 +777,13 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n-        pub const parse_edition: Option<&'static str> =\n-            Some(\"one of: `2015`, `2018`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n-        use syntax::edition::Edition;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -985,20 +986,6 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_edition(slot: &mut Edition, v: Option<&str>) -> bool {\n-            match v {\n-                Some(s) => {\n-                    let edition = s.parse();\n-                    if let Ok(parsed) = edition {\n-                        *slot = parsed;\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                }\n-                _ => false,\n-            }\n-        }\n     }\n ) }\n \n@@ -1292,10 +1279,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n-    edition: Edition = (Edition::Edition2015, parse_edition, [TRACKED],\n-        \"The edition to build Rust with. Newer editions may include features\n-         that require breaking changes. The default edition is 2015 (the first\n-         edition). Crates compiled with different editions can be linked together.\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n@@ -1656,6 +1639,12 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                   `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n             \"TYPE\",\n         ),\n+        opt::opt_s(\n+            \"\",\n+            \"edition\",\n+            \"Specify which edition of the compiler to use when compiling code.\",\n+            &edition_name_list(),\n+        ),\n         opt::multi_s(\n             \"\",\n             \"remap-path-prefix\",\n@@ -1715,6 +1704,22 @@ pub fn build_session_options_and_crate_config(\n         ),\n     };\n \n+    let edition = match matches.opt_str(\"edition\") {\n+        Some(arg) => match Edition::from_str(&arg){\n+            Ok(edition) => edition,\n+            Err(_) => early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"argument for --edition must be one of: \\\n+                    {}. (instead was `{}`)\",\n+                    edition_name_list(),\n+                    arg\n+                ),\n+            ),\n+        }\n+        None => DEFAULT_EDITION,\n+    };\n+\n     // We need the opts_present check because the driver will send us Matches\n     // with only stable options if no unstable options are used. Since error-format\n     // is unstable, it will not be present. We have to use opts_present not\n@@ -2171,6 +2176,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_codegen_units: codegen_units,\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n+            edition,\n         },\n         cfg,\n     )\n@@ -2300,7 +2306,7 @@ mod dep_tracking {\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n-    use super::{CrateType, DebugInfoLevel, Edition, ErrorOutputType, Lto, OptLevel, OutputTypes,\n+    use super::{CrateType, DebugInfoLevel, ErrorOutputType, Lto, OptLevel, OutputTypes,\n                 Passes, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n@@ -2363,7 +2369,6 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n-    impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n@@ -2422,6 +2427,11 @@ mod dep_tracking {\n     }\n }\n \n+pub fn edition_name_list() -> String {\n+    let names: Vec<String> = ALL_EDITIONS.iter().map(|e| format!(\"{}\", e)).collect();\n+    names.join(\"|\")\n+}\n+\n #[cfg(test)]\n mod tests {\n     use errors;\n@@ -3081,4 +3091,17 @@ mod tests {\n         opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n+\n+    #[test]\n+    fn test_edition_parsing() {\n+        // test default edition\n+        let options = super::basic_options();\n+        assert!(options.edition == Edition::DEFAULT_EDITION);\n+\n+        let matches = optgroups()\n+            .parse(&[\"--edition=2018\".to_string()])\n+            .unwrap();\n+        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n+        assert!(sessopts.edition == Edition::Edition2018)\n+    }\n }"}, {"sha": "5e4dee7fb60ca64bb54cde363b561a1d6431eede", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51f51109ce8c3070ab186624c241216620942360/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f51109ce8c3070ab186624c241216620942360/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=51f51109ce8c3070ab186624c241216620942360", "patch": "@@ -934,11 +934,11 @@ impl Session {\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n-        self.opts.debugging_opts.edition >= Edition::Edition2018\n+        self.opts.edition >= Edition::Edition2018\n     }\n \n     pub fn edition(&self) -> Edition {\n-        self.opts.debugging_opts.edition\n+        self.opts.edition\n     }\n }\n "}, {"sha": "4c1d52d7b076658757babbaf8de6b474473ee6d3", "filename": "src/libsyntax/edition.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51f51109ce8c3070ab186624c241216620942360/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f51109ce8c3070ab186624c241216620942360/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=51f51109ce8c3070ab186624c241216620942360", "patch": "@@ -27,17 +27,13 @@ pub enum Edition {\n     // - the list in the `parse_edition` static in librustc::session::config\n     // - add a `rust_####()` function to the session\n     // - update the enum in Cargo's sources as well\n-    //\n-    // When -Zedition becomes --edition, there will\n-    // also be a check for the edition being nightly-only\n-    // somewhere. That will need to be updated\n-    // whenever we're stabilizing/introducing a new edition\n-    // as well as changing the default Cargo template.\n }\n \n // must be in order from oldest to newest\n pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n+pub const DEFAULT_EDITION: Edition = Edition::Edition2015;\n+\n impl fmt::Display for Edition {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let s = match *self {"}]}