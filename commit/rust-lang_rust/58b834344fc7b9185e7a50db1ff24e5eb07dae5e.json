{"sha": "58b834344fc7b9185e7a50db1ff24e5eb07dae5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjgzNDM0NGZjN2I5MTg1ZTdhNTBkYjFmZjI0ZTVlYjA3ZGFlNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-05T19:11:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-05T19:11:04Z"}, "message": "Auto merge of #67429 - mati865:mingw-ultimate-fix, r=alexcrichton\n\nwindows-gnu: prefer system crt libraries if they are available\n\nThe origin of the issue is the fact Rust ships mingw-w64 libraries but no headers and prefers own libraries over the system ones.\nThis leads to situation when headers aren't compatible with libraries (mingw-w64 doesn't provide any forward compatibility and AFAIK backwards compatibility is guaranteed only within major release series).\n\nIt's easier to understand how this PR works when looking at the linker invocation before and with this PR: https://www.diffchecker.com/GEuYFmzo\nIt adds system libraries path before Rust libraries so the linker will prefer them.\nIt has potential issue when system has files with the same names as Rust but that could be avoided by moving Rust shipped mingw-w64 libraries from `lib/rustlib/x86_64-pc-windows-gnu/lib` to say `lib/rustlib/x86_64-pc-windows-gnu/lib/mingw`. Then adding linker paths in this order: Rust libraries, system libraries, Rust shipped mingw-w64 libraries.\n\nFixes #47048\nFixes #49078\nFixes #53454\nFixes #60912", "tree": {"sha": "0540b3dabbb0a85c859b0e64b3ae869f5b51a607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0540b3dabbb0a85c859b0e64b3ae869f5b51a607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b834344fc7b9185e7a50db1ff24e5eb07dae5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b834344fc7b9185e7a50db1ff24e5eb07dae5e", "html_url": "https://github.com/rust-lang/rust/commit/58b834344fc7b9185e7a50db1ff24e5eb07dae5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eda1a7adfcf6de70afa4ca0a6f709ed0e507516a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda1a7adfcf6de70afa4ca0a6f709ed0e507516a", "html_url": "https://github.com/rust-lang/rust/commit/eda1a7adfcf6de70afa4ca0a6f709ed0e507516a"}, {"sha": "1fad337f79a6a554ae947def38ec2db0e91d864c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fad337f79a6a554ae947def38ec2db0e91d864c", "html_url": "https://github.com/rust-lang/rust/commit/1fad337f79a6a554ae947def38ec2db0e91d864c"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "4f05aac089867ef0f4d7a2133f3036235b6f972c", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=58b834344fc7b9185e7a50db1ff24e5eb07dae5e", "patch": "@@ -968,7 +968,78 @@ pub fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLibrary\n     }\n }\n \n+// Because windows-gnu target is meant to be self-contained for pure Rust code it bundles\n+// own mingw-w64 libraries. These libraries are usually not compatible with mingw-w64\n+// installed in the system. This breaks many cases where Rust is mixed with other languages\n+// (e.g. *-sys crates).\n+// We prefer system mingw-w64 libraries if they are available to avoid this issue.\n+fn get_crt_libs_path(sess: &Session) -> Option<PathBuf> {\n+    fn find_exe_in_path<P>(exe_name: P) -> Option<PathBuf>\n+    where\n+        P: AsRef<Path>,\n+    {\n+        for dir in env::split_paths(&env::var_os(\"PATH\")?) {\n+            let full_path = dir.join(&exe_name);\n+            if full_path.is_file() {\n+                return Some(fix_windows_verbatim_for_gcc(&full_path));\n+            }\n+        }\n+        None\n+    }\n+\n+    fn probe(sess: &Session) -> Option<PathBuf> {\n+        if let (linker, LinkerFlavor::Gcc) = linker_and_flavor(&sess) {\n+            let linker_path = if cfg!(windows) && linker.extension().is_none() {\n+                linker.with_extension(\"exe\")\n+            } else {\n+                linker\n+            };\n+            if let Some(linker_path) = find_exe_in_path(linker_path) {\n+                let mingw_arch = match &sess.target.target.arch {\n+                    x if x == \"x86\" => \"i686\",\n+                    x => x,\n+                };\n+                let mingw_dir = format!(\"{}-w64-mingw32\", mingw_arch);\n+                // Here we have path/bin/gcc but we need path/\n+                let mut path = linker_path;\n+                path.pop();\n+                path.pop();\n+                // Based on Clang MinGW driver\n+                let probe_path = path.join(&mingw_dir).join(\"lib\");\n+                if probe_path.exists() {\n+                    return Some(probe_path);\n+                };\n+                let probe_path = path.join(&mingw_dir).join(\"sys-root/mingw/lib\");\n+                if probe_path.exists() {\n+                    return Some(probe_path);\n+                };\n+            };\n+        };\n+        None\n+    }\n+\n+    let mut system_library_path = sess.system_library_path.borrow_mut();\n+    match &*system_library_path {\n+        Some(Some(compiler_libs_path)) => Some(compiler_libs_path.clone()),\n+        Some(None) => None,\n+        None => {\n+            let path = probe(sess);\n+            *system_library_path = Some(path.clone());\n+            path\n+        }\n+    }\n+}\n+\n pub fn get_file_path(sess: &Session, name: &str) -> PathBuf {\n+    // prefer system {,dll}crt2.o libs, see get_crt_libs_path comment for more details\n+    if sess.target.target.llvm_target.contains(\"windows-gnu\") {\n+        if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n+            let file_path = compiler_libs_path.join(name);\n+            if file_path.exists() {\n+                return file_path;\n+            }\n+        }\n+    }\n     let fs = sess.target_filesearch(PathKind::Native);\n     let file_path = fs.get_lib_path().join(name);\n     if file_path.exists() {\n@@ -1150,6 +1221,13 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(\n     // target descriptor\n     let t = &sess.target.target;\n \n+    // prefer system mingw-w64 libs, see get_crt_libs_path comment for more details\n+    if cfg!(windows) && sess.target.target.llvm_target.contains(\"windows-gnu\") {\n+        if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n+            cmd.include_path(&compiler_libs_path);\n+        }\n+    }\n+\n     cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n \n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {"}, {"sha": "70984917d7ca236a659c4055df4842fdbc02e509", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b834344fc7b9185e7a50db1ff24e5eb07dae5e/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=58b834344fc7b9185e7a50db1ff24e5eb07dae5e", "patch": "@@ -132,6 +132,10 @@ pub struct Session {\n     /// Mapping from ident span to path span for paths that don't exist as written, but that\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: Lock<FxHashMap<Span, Span>>,\n+\n+    /// Path for libraries that will take preference over libraries shipped by Rust.\n+    /// Used by windows-gnu targets to priortize system mingw-w64 libraries.\n+    pub system_library_path: OneThread<RefCell<Option<Option<PathBuf>>>>,\n }\n \n pub struct PerfStats {\n@@ -1068,6 +1072,7 @@ fn build_session_(\n         driver_lint_caps,\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),\n+        system_library_path: OneThread::new(RefCell::new(Default::default())),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}]}