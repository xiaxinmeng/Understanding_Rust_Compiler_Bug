{"sha": "a756c9ad0825d0a113e406adddda8629f2db1214", "node_id": "C_kwDOAAsO6NoAKGE3NTZjOWFkMDgyNWQwYTExM2U0MDZhZGRkZGE4NjI5ZjJkYjEyMTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-07T17:08:05Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-07T17:08:05Z"}, "message": "Fixup comments", "tree": {"sha": "1add9d69d318d42caa08b14b9b98ca43b3002971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1add9d69d318d42caa08b14b9b98ca43b3002971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a756c9ad0825d0a113e406adddda8629f2db1214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a756c9ad0825d0a113e406adddda8629f2db1214", "html_url": "https://github.com/rust-lang/rust/commit/a756c9ad0825d0a113e406adddda8629f2db1214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a756c9ad0825d0a113e406adddda8629f2db1214/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27cd509558a0fd9b47d267e445097363eb9db8ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/27cd509558a0fd9b47d267e445097363eb9db8ff", "html_url": "https://github.com/rust-lang/rust/commit/27cd509558a0fd9b47d267e445097363eb9db8ff"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "fb5313401088d1d0b5eaf35710dc6eff6df4ad2b", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=a756c9ad0825d0a113e406adddda8629f2db1214", "patch": "@@ -95,7 +95,9 @@ pub fn token_tree_to_syntax_node(\n             parser::Step::Token { kind, n_input_tokens: n_raw_tokens } => {\n                 tree_sink.token(kind, n_raw_tokens)\n             }\n-            parser::Step::FloatSplit { has_pseudo_dot } => tree_sink.float_split(has_pseudo_dot),\n+            parser::Step::FloatSplit { ends_in_dot: has_pseudo_dot } => {\n+                tree_sink.float_split(has_pseudo_dot)\n+            }\n             parser::Step::Enter { kind } => tree_sink.start_node(kind),\n             parser::Step::Exit => tree_sink.finish_node(),\n             parser::Step::Error { msg } => tree_sink.error(msg.to_string()),\n@@ -797,6 +799,8 @@ fn delim_to_str(d: tt::DelimiterKind, closing: bool) -> Option<&'static str> {\n }\n \n impl<'a> TtTreeSink<'a> {\n+    /// Parses a float literal as if it was a one to two name ref nodes with a dot inbetween.\n+    /// This occurs when a float literal is used as a field access.\n     fn float_split(&mut self, has_pseudo_dot: bool) {\n         let (text, _span) = match self.cursor.token_tree() {\n             Some(tt::buffer::TokenTreeRef::Leaf(tt::Leaf::Literal(lit), _)) => {"}, {"sha": "051e20b3a3f9c21b0b9efe8983b5f2b872bac307", "filename": "crates/mbe/src/to_parser_input.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fto_parser_input.rs?ref=a756c9ad0825d0a113e406adddda8629f2db1214", "patch": "@@ -47,6 +47,9 @@ pub(crate) fn to_parser_input(buffer: &TokenBuffer<'_>) -> parser::Input {\n                         res.push(kind);\n \n                         if kind == FLOAT_NUMBER && !inner_text.ends_with('.') {\n+                            // Tag the token as joint if it is float with a fractional part\n+                            // we use this jointness to inform the parser about what token split\n+                            // event to emit when we encounter a float literal in a field access\n                             res.was_joint();\n                         }\n                     }"}, {"sha": "577eb0967b4263d4e3814bd0af9a6ccfaa329cad", "filename": "crates/parser/src/event.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fevent.rs?ref=a756c9ad0825d0a113e406adddda8629f2db1214", "patch": "@@ -72,11 +72,14 @@ pub(crate) enum Event {\n     /// `n_raw_tokens = 2` is used to produced a single `>>`.\n     Token {\n         kind: SyntaxKind,\n-        // Consider custom enum here?\n         n_raw_tokens: u8,\n     },\n+    /// When we parse `foo.0.0` or `foo. 0. 0` the lexer will hand us a float literal\n+    /// instead of an integer literal followed by a dot as the lexer has no contextual knowledge.\n+    /// This event instructs whatever consumes the events to split the float literal into\n+    /// the corresponding parts.\n     FloatSplitHack {\n-        has_pseudo_dot: bool,\n+        ends_in_dot: bool,\n     },\n     Error {\n         msg: String,\n@@ -128,8 +131,8 @@ pub(super) fn process(mut events: Vec<Event>) -> Output {\n             Event::Token { kind, n_raw_tokens } => {\n                 res.token(kind, n_raw_tokens);\n             }\n-            Event::FloatSplitHack { has_pseudo_dot } => {\n-                res.float_split_hack(has_pseudo_dot);\n+            Event::FloatSplitHack { ends_in_dot } => {\n+                res.float_split_hack(ends_in_dot);\n                 let ev = mem::replace(&mut events[i + 1], Event::tombstone());\n                 assert!(matches!(ev, Event::Finish), \"{ev:?}\");\n             }"}, {"sha": "8c5aed0232ba3282f841e831ed3b318c1cd66fb3", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=a756c9ad0825d0a113e406adddda8629f2db1214", "patch": "@@ -102,7 +102,9 @@ impl TopEntryPoint {\n                 match step {\n                     Step::Enter { .. } => depth += 1,\n                     Step::Exit => depth -= 1,\n-                    Step::FloatSplit { has_pseudo_dot } => depth -= 1 + !has_pseudo_dot as usize,\n+                    Step::FloatSplit { ends_in_dot: has_pseudo_dot } => {\n+                        depth -= 1 + !has_pseudo_dot as usize\n+                    }\n                     Step::Token { .. } | Step::Error { .. } => (),\n                 }\n             }"}, {"sha": "41d4c68b2d7486c69a969112c4d39ac8ca03ea36", "filename": "crates/parser/src/output.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Foutput.rs?ref=a756c9ad0825d0a113e406adddda8629f2db1214", "patch": "@@ -25,7 +25,7 @@ pub struct Output {\n #[derive(Debug)]\n pub enum Step<'a> {\n     Token { kind: SyntaxKind, n_input_tokens: u8 },\n-    FloatSplit { has_pseudo_dot: bool },\n+    FloatSplit { ends_in_dot: bool },\n     Enter { kind: SyntaxKind },\n     Exit,\n     Error { msg: &'a str },\n@@ -70,7 +70,7 @@ impl Output {\n                 }\n                 Self::EXIT_EVENT => Step::Exit,\n                 Self::SPLIT_EVENT => {\n-                    Step::FloatSplit { has_pseudo_dot: event & Self::N_INPUT_TOKEN_MASK != 0 }\n+                    Step::FloatSplit { ends_in_dot: event & Self::N_INPUT_TOKEN_MASK != 0 }\n                 }\n                 _ => unreachable!(),\n             }\n@@ -84,9 +84,9 @@ impl Output {\n         self.event.push(e)\n     }\n \n-    pub(crate) fn float_split_hack(&mut self, has_pseudo_dot: bool) {\n+    pub(crate) fn float_split_hack(&mut self, ends_in_dot: bool) {\n         let e = (Self::SPLIT_EVENT as u32) << Self::TAG_SHIFT\n-            | ((has_pseudo_dot as u32) << Self::N_INPUT_TOKEN_SHIFT)\n+            | ((ends_in_dot as u32) << Self::N_INPUT_TOKEN_SHIFT)\n             | Self::EVENT_MASK;\n         self.event.push(e);\n     }"}, {"sha": "280416ae7c99462af6c452984297ab4e31d32578", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=a756c9ad0825d0a113e406adddda8629f2db1214", "patch": "@@ -182,7 +182,7 @@ impl<'t> Parser<'t> {\n     }\n \n     /// Advances the parser by one token\n-    pub(crate) fn split_float(&mut self, marker: Marker) -> (bool, Marker) {\n+    pub(crate) fn split_float(&mut self, mut marker: Marker) -> (bool, Marker) {\n         assert!(self.at(SyntaxKind::FLOAT_NUMBER));\n         // we have parse `<something>.`\n         // `<something>`.0.1\n@@ -191,26 +191,23 @@ impl<'t> Parser<'t> {\n         // `<something>`. 0. 1;\n         // here we need to change the follow up parse, the return value will cause us to emulate a dot\n         // the actual splitting happens later\n-        let has_pseudo_dot = !self.inp.is_joint(self.pos);\n-        let marker = if !has_pseudo_dot {\n-            let new_pos = self.start();\n+        let ends_in_dot = !self.inp.is_joint(self.pos);\n+        if !ends_in_dot {\n+            let new_marker = self.start();\n             let idx = marker.pos as usize;\n             match &mut self.events[idx] {\n                 Event::Start { forward_parent, kind } => {\n                     *kind = SyntaxKind::FIELD_EXPR;\n-                    *forward_parent = Some(new_pos.pos - marker.pos);\n+                    *forward_parent = Some(new_marker.pos - marker.pos);\n                 }\n                 _ => unreachable!(),\n             }\n-            // NOTE: This brings the start / finish pairs out of balance!\n-            std::mem::forget(marker);\n-            new_pos\n-        } else {\n-            marker\n+            marker.bomb.defuse();\n+            marker = new_marker;\n         };\n         self.pos += 1 as usize;\n-        self.push_event(Event::FloatSplitHack { has_pseudo_dot });\n-        (has_pseudo_dot, marker)\n+        self.push_event(Event::FloatSplitHack { ends_in_dot });\n+        (ends_in_dot, marker)\n     }\n \n     /// Advances the parser by one token, remapping its kind."}, {"sha": "47e4adcbbe6955acf6f345c81d37fff55f911ecb", "filename": "crates/parser/src/shortcuts.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a756c9ad0825d0a113e406adddda8629f2db1214/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fshortcuts.rs?ref=a756c9ad0825d0a113e406adddda8629f2db1214", "patch": "@@ -43,10 +43,11 @@ impl<'a> LexedStr<'a> {\n                         res.was_joint();\n                     }\n                     res.push(kind);\n-                    // we set jointness for floating point numbers as a hack to inform the\n-                    // parser about whether we have a `0.` or `0.1` style float\n+                    // Tag the token as joint if it is float with a fractional part\n+                    // we use this jointness to inform the parser about what token split\n+                    // event to emit when we encounter a float literal in a field access\n                     if kind == SyntaxKind::FLOAT_NUMBER {\n-                        if !self.text(i).split_once('.').map_or(true, |(_, it)| it.is_empty()) {\n+                        if !self.text(i).ends_with('.') {\n                             res.was_joint();\n                         }\n                     }\n@@ -71,7 +72,9 @@ impl<'a> LexedStr<'a> {\n                 Step::Token { kind, n_input_tokens: n_raw_tokens } => {\n                     builder.token(kind, n_raw_tokens)\n                 }\n-                Step::FloatSplit { has_pseudo_dot } => builder.float_split(has_pseudo_dot),\n+                Step::FloatSplit { ends_in_dot: has_pseudo_dot } => {\n+                    builder.float_split(has_pseudo_dot)\n+                }\n                 Step::Enter { kind } => builder.enter(kind),\n                 Step::Exit => builder.exit(),\n                 Step::Error { msg } => {"}]}