{"sha": "9772d02774534aa4ccd0b328364403d5b6cda1d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzJkMDI3NzQ1MzRhYTRjY2QwYjMyODM2NDQwM2Q1YjZjZGExZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-08T09:56:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-08T09:56:32Z"}, "message": "Auto merge of #56623 - Centril:rollup, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #56248 (Suggest an appropriate token when encountering `pub Ident<'a>`)\n - #56597 (Improve the usage message for `-Z dump-mir`.)\n - #56599 (codegen: Fix va_list - aarch64 iOS/Windows)\n - #56602 (Fix the just-introduced ptr::hash docs)\n - #56620 (resolve: Reduce some clutter in import ambiguity errors)\n - #56621 (Add missing comma in Generators)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2772335186306e975aa4d8f4156cabefd5949b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2772335186306e975aa4d8f4156cabefd5949b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9772d02774534aa4ccd0b328364403d5b6cda1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9772d02774534aa4ccd0b328364403d5b6cda1d0", "html_url": "https://github.com/rust-lang/rust/commit/9772d02774534aa4ccd0b328364403d5b6cda1d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9772d02774534aa4ccd0b328364403d5b6cda1d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ccb5b219d50b1bc96dbb85e82a8473f16422582", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ccb5b219d50b1bc96dbb85e82a8473f16422582", "html_url": "https://github.com/rust-lang/rust/commit/1ccb5b219d50b1bc96dbb85e82a8473f16422582"}, {"sha": "a8cc9166d47afebea15e6079d033fa37ecda3f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8cc9166d47afebea15e6079d033fa37ecda3f7d", "html_url": "https://github.com/rust-lang/rust/commit/a8cc9166d47afebea15e6079d033fa37ecda3f7d"}], "stats": {"total": 280, "additions": 195, "deletions": 85}, "files": [{"sha": "968534e58bd9ebe943565a7452ab29a9ace3fa68", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -149,7 +149,7 @@ closure-like semantics. Namely:\n * Whenever a generator is dropped it will drop all captured environment\n   variables.\n \n-Note that unlike closures generators at this time cannot take any arguments.\n+Note that unlike closures, generators at this time cannot take any arguments.\n That is, generators must always look like `|| { ... }`. This restriction may be\n lifted at a future date, the design is ongoing!\n "}, {"sha": "d7a112eb90df84b124718b6b5182a903b6ef579c", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -45,6 +45,7 @@ impl fmt::Debug for c_void {\n /// Basic implementation of a `va_list`.\n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n               not(target_arch = \"x86_64\")),\n+          all(target_arch = \"aarch4\", target_os = \"ios\"),\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -192,6 +193,7 @@ impl<'a> VaList<'a> {\n             where F: for<'copy> FnOnce(VaList<'copy>) -> R {\n         #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n                       not(target_arch = \"x86_64\")),\n+                  all(target_arch = \"aarch4\", target_os = \"ios\"),\n                   windows))]\n         let mut ap = va_copy(self);\n         #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),"}, {"sha": "b11ae303272264b5b5fe3d43d7702516db845fa9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -2516,8 +2516,11 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n     a == b\n }\n \n-/// Hash the raw pointer address behind a reference, rather than the value\n-/// it points to.\n+/// Hash a raw pointer.\n+///\n+/// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)\n+/// by its address rather than the value it points to\n+/// (which is what the `Hash for &T` implementation does).\n ///\n /// # Examples\n ///"}, {"sha": "750b7f151f585f0b99fa0a2fb59ce05066295918", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -1272,7 +1272,13 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     arg_align_attributes: bool = (false, parse_bool, [TRACKED],\n         \"emit align metadata for reference arguments\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-        \"dump MIR state at various points in transforms\"),\n+        \"dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\"),\n+\n     dump_mir_dir: String = (String::from(\"mir_dump\"), parse_string, [UNTRACKED],\n         \"the directory the MIR is dumped into\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "1e5bb03ddb12b9387622a1ac32ba2bc4e314b9fe", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -105,13 +105,30 @@ pub(super) fn emit_va_arg(\n ) -> &'ll Value {\n     // Determine the va_arg implementation to use. The LLVM va_arg instruction\n     // is lacking in some instances, so we should only use it as a fallback.\n+    let target = &bx.cx.tcx.sess.target.target;\n     let arch = &bx.cx.tcx.sess.target.target.arch;\n-    match (&**arch,\n-           bx.cx.tcx.sess.target.target.options.is_like_windows) {\n+    match (&**arch, target.options.is_like_windows) {\n+        // Windows x86\n         (\"x86\", true) => {\n             emit_ptr_va_arg(bx, addr, target_ty, false,\n                             Align::from_bytes(4).unwrap(), false)\n         }\n+        // Generic x86\n+        (\"x86\", _) => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(4).unwrap(), true)\n+        }\n+        // Windows Aarch64\n+        (\"aarch4\", true) => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(8).unwrap(), false)\n+        }\n+        // iOS Aarch64\n+        (\"aarch4\", _) if target.target_os == \"ios\" => {\n+            emit_ptr_va_arg(bx, addr, target_ty, false,\n+                            Align::from_bytes(8).unwrap(), true)\n+        }\n+        // Windows x86_64\n         (\"x86_64\", true) => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n             let indirect = if target_ty_size > 8 || !target_ty_size.is_power_of_two() {\n@@ -122,15 +139,14 @@ pub(super) fn emit_va_arg(\n             emit_ptr_va_arg(bx, addr, target_ty, indirect,\n                             Align::from_bytes(8).unwrap(), false)\n         }\n-        (\"x86\", false) => {\n-            emit_ptr_va_arg(bx, addr, target_ty, false,\n-                            Align::from_bytes(4).unwrap(), true)\n-        }\n+        // For all other architecture/OS combinations fall back to using\n+        // the LLVM va_arg instruction.\n+        // https://llvm.org/docs/LangRef.html#va-arg-instruction\n         _ => {\n-            let va_list = if (bx.tcx().sess.target.target.arch == \"aarch64\" ||\n-                              bx.tcx().sess.target.target.arch == \"x86_64\" ||\n-                              bx.tcx().sess.target.target.arch == \"powerpc\") &&\n-                             !bx.tcx().sess.target.target.options.is_like_windows {\n+            let va_list = if (target.arch == \"aarch64\" ||\n+                              target.arch == \"x86_64\" ||\n+                              target.arch == \"powerpc\") &&\n+                             !target.options.is_like_windows {\n                 bx.load(addr.immediate(), bx.tcx().data_layout.pointer_align.abi)\n             } else {\n                 addr.immediate()"}, {"sha": "015cd31ac1d76d17d6909dd2011f90ea6a005503", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -843,14 +843,16 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         self.current_module = directive.parent_scope.module;\n \n         let orig_vis = directive.vis.replace(ty::Visibility::Invisible);\n+        let prev_ambiguity_errors_len = self.ambiguity_errors.len();\n         let path_res = self.resolve_path(&directive.module_path, None, &directive.parent_scope,\n                                          true, directive.span, directive.crate_lint());\n+        let no_ambiguity = self.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         directive.vis.set(orig_vis);\n         let module = match path_res {\n             PathResult::Module(module) => {\n                 // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n                 if let Some(initial_module) = directive.imported_module.get() {\n-                    if module != initial_module && self.ambiguity_errors.is_empty() {\n+                    if module != initial_module && no_ambiguity {\n                         span_bug!(directive.span, \"inconsistent resolution for an import\");\n                     }\n                 } else {\n@@ -864,30 +866,32 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 module\n             }\n             PathResult::Failed(span, msg, false) => {\n-                assert!(!self.ambiguity_errors.is_empty() ||\n-                        directive.imported_module.get().is_none());\n-                resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                if no_ambiguity {\n+                    assert!(directive.imported_module.get().is_none());\n+                    resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                }\n                 return None;\n             }\n             PathResult::Failed(span, msg, true) => {\n-                assert!(!self.ambiguity_errors.is_empty() ||\n-                        directive.imported_module.get().is_none());\n-                return if let Some((suggested_path, note)) = self.make_path_suggestion(\n-                    span, directive.module_path.clone(), &directive.parent_scope\n-                ) {\n-                    Some((\n-                        span,\n-                        format!(\"did you mean `{}`?\", Segment::names_to_string(&suggested_path)),\n-                        note,\n-                    ))\n-                } else {\n-                    Some((span, msg, None))\n-                };\n+                if no_ambiguity {\n+                    assert!(directive.imported_module.get().is_none());\n+                    return Some(match self.make_path_suggestion(span, directive.module_path.clone(),\n+                                                                &directive.parent_scope) {\n+                        Some((suggestion, note)) => (\n+                            span,\n+                            format!(\"did you mean `{}`?\", Segment::names_to_string(&suggestion)),\n+                            note,\n+                        ),\n+                        None => (span, msg, None),\n+                    });\n+                }\n+                return None;\n             }\n             PathResult::NonModule(path_res) if path_res.base_def() == Def::Err => {\n+                if no_ambiguity {\n+                    assert!(directive.imported_module.get().is_none());\n+                }\n                 // The error was already reported earlier.\n-                assert!(!self.ambiguity_errors.is_empty() ||\n-                        directive.imported_module.get().is_none());\n                 return None;\n             }\n             PathResult::Indeterminate | PathResult::NonModule(..) => unreachable!(),"}, {"sha": "e3a3454de497fb2d0cd905277645690f94f944c3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -5811,20 +5811,14 @@ impl<'a> Parser<'a> {\n     }\n \n     fn complain_if_pub_macro(&mut self, vis: &VisibilityKind, sp: Span) {\n-        if let Err(mut err) = self.complain_if_pub_macro_diag(vis, sp) {\n-            err.emit();\n-        }\n-    }\n-\n-    fn complain_if_pub_macro_diag(&mut self, vis: &VisibilityKind, sp: Span) -> PResult<'a, ()> {\n         match *vis {\n-            VisibilityKind::Inherited => Ok(()),\n+            VisibilityKind::Inherited => {}\n             _ => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid, _) => sid.name == Symbol::intern(\"macro_rules\"),\n                     _ => false,\n                 };\n-                if is_macro_rules {\n+                let mut err = if is_macro_rules {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n                     err.span_suggestion_with_applicability(\n@@ -5833,13 +5827,14 @@ impl<'a> Parser<'a> {\n                         \"#[macro_export]\".to_owned(),\n                         Applicability::MaybeIncorrect // speculative\n                     );\n-                    Err(err)\n+                    err\n                 } else {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro invocation with `pub`\");\n                     err.help(\"try adjusting the macro to put `pub` inside the invocation\");\n-                    Err(err)\n-                }\n+                    err\n+                };\n+                err.emit();\n             }\n         }\n     }\n@@ -6148,9 +6143,6 @@ impl<'a> Parser<'a> {\n \n     fn consume_block(&mut self, delim: token::DelimToken) {\n         let mut brace_depth = 0;\n-        if !self.eat(&token::OpenDelim(delim)) {\n-            return;\n-        }\n         loop {\n             if self.eat(&token::OpenDelim(delim)) {\n                 brace_depth += 1;\n@@ -6161,7 +6153,7 @@ impl<'a> Parser<'a> {\n                     brace_depth -= 1;\n                     continue;\n                 }\n-            } else if self.eat(&token::Eof) || self.eat(&token::CloseDelim(token::NoDelim)) {\n+            } else if self.token == token::Eof || self.eat(&token::CloseDelim(token::NoDelim)) {\n                 return;\n             } else {\n                 self.bump();\n@@ -7410,17 +7402,27 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n+                self.bump();  // `(`\n+                let kw_name = if let Ok(Some(_)) = self.parse_self_arg() {\n+                    \"method\"\n+                } else {\n+                    \"function\"\n+                };\n                 self.consume_block(token::Paren);\n-                let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) ||\n-                    self.check(&token::OpenDelim(token::Brace))\n-                {\n-                    (\"fn\", \"method\", false)\n+                let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) {\n+                    self.eat_to_tokens(&[&token::OpenDelim(token::Brace)]);\n+                    self.bump();  // `{`\n+                    (\"fn\", kw_name, false)\n+                } else if self.check(&token::OpenDelim(token::Brace)) {\n+                    self.bump();  // `{`\n+                    (\"fn\", kw_name, false)\n                 } else if self.check(&token::Colon) {\n                     let kw = \"struct\";\n                     (kw, kw, false)\n                 } else {\n-                    (\"fn` or `struct\", \"method or struct\", true)\n+                    (\"fn` or `struct\", \"function or struct\", true)\n                 };\n+                self.consume_block(token::Brace);\n \n                 let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n                 let mut err = self.diagnostic().struct_span_err(sp, &msg);\n@@ -7447,6 +7449,32 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 return Err(err);\n+            } else if self.look_ahead(1, |t| *t == token::Lt) {\n+                let ident = self.parse_ident().unwrap();\n+                self.eat_to_tokens(&[&token::Gt]);\n+                self.bump();  // `>`\n+                let (kw, kw_name, ambiguous) = if self.eat(&token::OpenDelim(token::Paren)) {\n+                    if let Ok(Some(_)) = self.parse_self_arg() {\n+                        (\"fn\", \"method\", false)\n+                    } else {\n+                        (\"fn\", \"function\", false)\n+                    }\n+                } else if self.check(&token::OpenDelim(token::Brace)) {\n+                    (\"struct\", \"struct\", false)\n+                } else {\n+                    (\"fn` or `struct\", \"function or struct\", true)\n+                };\n+                let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n+                let mut err = self.diagnostic().struct_span_err(sp, &msg);\n+                if !ambiguous {\n+                    err.span_suggestion_short_with_applicability(\n+                        sp,\n+                        &format!(\"add `{}` here to parse `{}` as a public {}\", kw, ident, kw_name),\n+                        format!(\" {} \", kw),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                return Err(err);\n             }\n         }\n         self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)"}, {"sha": "0327522e4b8d60760f6c3259ca885cf2a0972b79", "filename": "src/test/ui/imports/issue-56125.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -7,13 +7,11 @@\n mod m1 {\n     use issue_56125::last_segment::*;\n     //~^ ERROR `issue_56125` is ambiguous\n-    //~| ERROR unresolved import `issue_56125::last_segment`\n }\n \n mod m2 {\n     use issue_56125::non_last_segment::non_last_segment::*;\n     //~^ ERROR `issue_56125` is ambiguous\n-    //~| ERROR failed to resolve: could not find `non_last_segment` in `issue_56125`\n }\n \n mod m3 {"}, {"sha": "559979e5d51c308e544fcfa71df97857e9532456", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -1,17 +1,5 @@\n-error[E0433]: failed to resolve: could not find `non_last_segment` in `issue_56125`\n-  --> $DIR/issue-56125.rs:14:22\n-   |\n-LL |     use issue_56125::non_last_segment::non_last_segment::*;\n-   |                      ^^^^^^^^^^^^^^^^ could not find `non_last_segment` in `issue_56125`\n-\n-error[E0432]: unresolved import `issue_56125::last_segment`\n-  --> $DIR/issue-56125.rs:8:22\n-   |\n-LL |     use issue_56125::last_segment::*;\n-   |                      ^^^^^^^^^^^^ could not find `last_segment` in `issue_56125`\n-\n error[E0432]: unresolved import `empty::issue_56125`\n-  --> $DIR/issue-56125.rs:21:9\n+  --> $DIR/issue-56125.rs:19:9\n    |\n LL |     use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n    |         ^^^^^^^^^^^^^^^^^^ no `issue_56125` in `m3::empty`\n@@ -32,36 +20,36 @@ LL |     use issue_56125::last_segment::*;\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:14:9\n+  --> $DIR/issue-56125.rs:13:9\n    |\n LL |     use issue_56125::non_last_segment::non_last_segment::*;\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:14:9\n+  --> $DIR/issue-56125.rs:13:9\n    |\n LL |     use issue_56125::non_last_segment::non_last_segment::*;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:22:9\n+  --> $DIR/issue-56125.rs:20:9\n    |\n LL |     use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the unresolved item imported here\n-  --> $DIR/issue-56125.rs:21:9\n+  --> $DIR/issue-56125.rs:19:9\n    |\n LL |     use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n    |         ^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this unresolved item unambiguously\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0432, E0433, E0659.\n+Some errors occurred: E0432, E0659.\n For more information about an error, try `rustc --explain E0432`."}, {"sha": "648b1067add0db25f6e495bf0067335ae828e0e9", "filename": "src/test/ui/pub/pub-ident-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub foo(s: usize) { bar() }\n-//~^ ERROR missing `fn` for method definition\n+//~^ ERROR missing `fn` for function definition\n \n fn main() {\n     foo(2);"}, {"sha": "ed7430fd3941907e3075df330bbb2c62a55cf64b", "filename": "src/test/ui/pub/pub-ident-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -1,9 +1,9 @@\n-error: missing `fn` for method definition\n+error: missing `fn` for function definition\n   --> $DIR/pub-ident-fn-2.rs:11:4\n    |\n LL | pub foo(s: usize) { bar() }\n    |    ^\n-help: add `fn` here to parse `foo` as a public method\n+help: add `fn` here to parse `foo` as a public function\n    |\n LL | pub fn foo(s: usize) { bar() }\n    |     ^^"}, {"sha": "e528e86fbc6e9e99430c361738b8f5d6550a78b2", "filename": "src/test/ui/pub/pub-ident-fn-or-struct-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub S();\n-//~^ ERROR missing `fn` or `struct` for method or struct definition\n+//~^ ERROR missing `fn` or `struct` for function or struct definition\n \n fn main() {}"}, {"sha": "d423b838f051438fbb984f45fbf9f16883796d22", "filename": "src/test/ui/pub/pub-ident-fn-or-struct-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -1,4 +1,4 @@\n-error: missing `fn` or `struct` for method or struct definition\n+error: missing `fn` or `struct` for function or struct definition\n   --> $DIR/pub-ident-fn-or-struct-2.rs:11:4\n    |\n LL | pub S();"}, {"sha": "d5254bf2066c287152b6981a101dee1fb74e7020", "filename": "src/test/ui/pub/pub-ident-fn-or-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub S (foo) bar\n-//~^ ERROR missing `fn` or `struct` for method or struct definition\n+//~^ ERROR missing `fn` or `struct` for function or struct definition\n \n fn main() {}"}, {"sha": "b8b5e8a4bbf74efe6211f68b0015f071bd4a7653", "filename": "src/test/ui/pub/pub-ident-fn-or-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -1,4 +1,4 @@\n-error: missing `fn` or `struct` for method or struct definition\n+error: missing `fn` or `struct` for function or struct definition\n   --> $DIR/pub-ident-fn-or-struct.rs:11:4\n    |\n LL | pub S (foo) bar"}, {"sha": "1ee8c84f13bd3b78f2a753b0bd0dabedb82b621b", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,6 @@\n+pub   bar<'a>(&self, _s: &'a usize) -> bool { true }\n+//~^ ERROR missing `fn` for method definition\n+\n+fn main() {\n+    bar(2);\n+}"}, {"sha": "c403774df8ede0362c014ee566f6e2631bc1ee56", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,12 @@\n+error: missing `fn` for method definition\n+  --> $DIR/pub-ident-fn-with-lifetime-2.rs:1:4\n+   |\n+LL | pub   bar<'a>(&self, _s: &'a usize) -> bool { true }\n+   |    ^^^\n+help: add `fn` here to parse `bar` as a public method\n+   |\n+LL | pub fn bar<'a>(&self, _s: &'a usize) -> bool { true }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "84f7bdc1fb14796d9bd4642eacc072fcb5a86934", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,6 @@\n+pub   foo<'a>(_s: &'a usize) -> bool { true }\n+//~^ ERROR missing `fn` for function definition\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "858238096408f0068c201cd1ac060186a5675248", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,12 @@\n+error: missing `fn` for function definition\n+  --> $DIR/pub-ident-fn-with-lifetime.rs:1:4\n+   |\n+LL | pub   foo<'a>(_s: &'a usize) -> bool { true }\n+   |    ^^^\n+help: add `fn` here to parse `foo` as a public function\n+   |\n+LL | pub fn foo<'a>(_s: &'a usize) -> bool { true }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "667e02114a1a880699bd1eac3c9a8ab5628c26c4", "filename": "src/test/ui/pub/pub-ident-fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.fixed?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n pub fn foo(_s: usize) -> bool { true }\n-//~^ ERROR missing `fn` for method definition\n+//~^ ERROR missing `fn` for function definition\n \n fn main() {\n     foo(2);"}, {"sha": "91bbf58fe77e8cf0b45239be1dd059e72d4e98d4", "filename": "src/test/ui/pub/pub-ident-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n pub   foo(_s: usize) -> bool { true }\n-//~^ ERROR missing `fn` for method definition\n+//~^ ERROR missing `fn` for function definition\n \n fn main() {\n     foo(2);"}, {"sha": "1df6dd85ffec58c4fbc64febe4de8b10488cdbc0", "filename": "src/test/ui/pub/pub-ident-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -1,9 +1,9 @@\n-error: missing `fn` for method definition\n+error: missing `fn` for function definition\n   --> $DIR/pub-ident-fn.rs:13:4\n    |\n LL | pub   foo(_s: usize) -> bool { true }\n    |    ^^^\n-help: add `fn` here to parse `foo` as a public method\n+help: add `fn` here to parse `foo` as a public function\n    |\n LL | pub fn foo(_s: usize) -> bool { true }\n    |     ^^"}, {"sha": "2feb0266070d5283f7051d3708dd73420c1ccb14", "filename": "src/test/ui/pub/pub-ident-struct-with-lifetime.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,4 @@\n+pub S<'a> {\n+//~^ ERROR missing `struct` for struct definition\n+}\n+fn main() {}"}, {"sha": "2bbcf5dfff01098a34c3a1098de7a92f47588dbd", "filename": "src/test/ui/pub/pub-ident-struct-with-lifetime.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,12 @@\n+error: missing `struct` for struct definition\n+  --> $DIR/pub-ident-struct-with-lifetime.rs:1:4\n+   |\n+LL | pub S<'a> {\n+   |    ^\n+help: add `struct` here to parse `S` as a public struct\n+   |\n+LL | pub struct S<'a> {\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c86a9f2fdd655f00f36f69049d0c35f365dc03d9", "filename": "src/test/ui/pub/pub-ident-with-lifetime-incomplete.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+}\n+\n+pub   foo<'a>\n+//~^ ERROR missing `fn` or `struct` for function or struct definition"}, {"sha": "0e0b127054d1d547d366d1e2b77aed1cf3164ae0", "filename": "src/test/ui/pub/pub-ident-with-lifetime-incomplete.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9772d02774534aa4ccd0b328364403d5b6cda1d0/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr?ref=9772d02774534aa4ccd0b328364403d5b6cda1d0", "patch": "@@ -0,0 +1,8 @@\n+error: missing `fn` or `struct` for function or struct definition\n+  --> $DIR/pub-ident-with-lifetime-incomplete.rs:4:4\n+   |\n+LL | pub   foo<'a>\n+   |    ^^^\n+\n+error: aborting due to previous error\n+"}]}