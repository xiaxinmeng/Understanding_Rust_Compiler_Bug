{"sha": "32c360b993d9706d48e1b216b1a35f3bdf422574", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYzM2MGI5OTNkOTcwNmQ0OGUxYjIxNmIxYTM1ZjNiZGY0MjI1NzQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-02-27T22:22:32Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-02-27T22:34:23Z"}, "message": "[perf] Skip attempting to run coerce_unsized on an inference variable\n\nSee the included comment for a detailed explanation of why this is\nsound.", "tree": {"sha": "c083977230b4e4bd95a31ccc4e36e20cde4d0708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c083977230b4e4bd95a31ccc4e36e20cde4d0708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32c360b993d9706d48e1b216b1a35f3bdf422574", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl5YQ/AACgkQtAh+UQ6Y\nsWRbuA/9EVmE4tnUUgI1mw0+nV2shYCNxo3svLD6DYY3tsB2q+mmYPywo7YcOKnc\niDHyLSFWol9s8+0k7F79QD1n32qCe4vUnNkI2ZksxuZW+MU3NSdDnLc3ezB6Oui0\nL+H5J6xRb/H5AIKcmIayr6PPuVF4sK/H9vQOdDrY3IsmQb6p1mKf8pU+LOmkXsmV\nINYQJUQ4yYsF4Y3jaxKargUgFWwquT7B1hEB4eyHZ65lJomCjxILI1yOAsPy+T5h\nd2Eh2dO3WEAWedDos1IXgwFOk1f//fIbtpZ43IRY5HWsSaPkIT7av3d5PENhsWsD\nVSgaUv5SIPhzOIiWXL4azu7FkGk4hexBTtu6zu1gEIohf8uh/vzu6/Sm8JkGQNgH\nslc0yoPZAU6foGg51i0Alv/9aTcbG909Iwvh6KUkoi1sa+gHllLKA0ULq1VxhhGZ\nt9lAkmJ4q2of1t+9bvDKu4xbHvwFhk6J7gvD51K+b63pf5lyqHzJP+dUj90+q71p\nEXIMQWgC9UODSo4ur7417rPzk2mRCTFDflW+Z1S2pbYIzOC6AUH37xYsMU9kddYr\nmG2ND2usB9rV1rakwWRmSv0XEDrC6obdXFATnd3qtvJyC1d42Oj3DrEIm7RWL3vB\n7RyNl/4ozYDRM6lMUdXYRI1piJP2rpAUJaVCogIJkIP2WTlCNdg=\n=g82e\n-----END PGP SIGNATURE-----", "payload": "tree c083977230b4e4bd95a31ccc4e36e20cde4d0708\nparent 6d69caba110c0c2fb90180df1cbc8be5033b91d4\nauthor Aaron Hill <aa1ronham@gmail.com> 1582842152 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1582842863 -0500\n\n[perf] Skip attempting to run coerce_unsized on an inference variable\n\nSee the included comment for a detailed explanation of why this is\nsound.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32c360b993d9706d48e1b216b1a35f3bdf422574", "html_url": "https://github.com/rust-lang/rust/commit/32c360b993d9706d48e1b216b1a35f3bdf422574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32c360b993d9706d48e1b216b1a35f3bdf422574/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d69caba110c0c2fb90180df1cbc8be5033b91d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d69caba110c0c2fb90180df1cbc8be5033b91d4", "html_url": "https://github.com/rust-lang/rust/commit/6d69caba110c0c2fb90180df1cbc8be5033b91d4"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "e99470202a0aa792e94a3f09747d10a18119eeab", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/32c360b993d9706d48e1b216b1a35f3bdf422574/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c360b993d9706d48e1b216b1a35f3bdf422574/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=32c360b993d9706d48e1b216b1a35f3bdf422574", "patch": "@@ -455,6 +455,36 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     fn coerce_unsized(&self, source: Ty<'tcx>, target: Ty<'tcx>) -> CoerceResult<'tcx> {\n         debug!(\"coerce_unsized(source={:?}, target={:?})\", source, target);\n \n+        // These 'if' statements require some explanation.\n+        // The `CoerceUnsized` trait is special - it is only\n+        // possible to write `impl CoerceUnsized<B> for A` where\n+        // A and B have 'matching' fields. This rules out the following\n+        // two types of blanket impls:\n+        //\n+        // `impl<T> CoerceUnsized<T> for SomeType`\n+        // `impl<T> CoerceUnsized<SomeType> for T`\n+        //\n+        // Both of these trigger a special `CoerceUnsized`-related error (E0376)\n+        //\n+        // We can take advantage of this fact to avoid performing unecessary work.\n+        // If either `source` or `target` is a type variable, then any applicable impl\n+        // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)\n+        // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for\n+        // SomeType`).\n+        //\n+        // However, these are exactly the kinds of impls which are forbidden by\n+        // the compiler! Therefore, we can be sure that coercion will always fail\n+        // when either the source or target type is a type variable. This allows us\n+        // to skip performing any trait selection, and immediately bail out.\n+        if self.shallow_resolve(source).is_ty_var() {\n+            debug!(\"coerce_unsized: source is a TyVar, bailing out\");\n+            return Err(TypeError::Mismatch);\n+        }\n+        if self.shallow_resolve(target).is_ty_var() {\n+            debug!(\"coerce_unsized: target is a TyVar, bailing out\");\n+            return Err(TypeError::Mismatch);\n+        }\n+\n         let traits =\n             (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());\n         let (unsize_did, coerce_unsized_did) = if let (Some(u), Some(cu)) = traits {"}]}