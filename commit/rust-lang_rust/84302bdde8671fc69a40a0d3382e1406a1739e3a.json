{"sha": "84302bdde8671fc69a40a0d3382e1406a1739e3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MzAyYmRkZTg2NzFmYzY5YTQwYTBkMzM4MmUxNDA2YTE3MzllM2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-19T18:22:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-19T18:22:30Z"}, "message": "Merge #9638\n\n9638: internal: replace some unwraps with types r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "540602c5d324c03bc37790bda212395d4fa1b62f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/540602c5d324c03bc37790bda212395d4fa1b62f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84302bdde8671fc69a40a0d3382e1406a1739e3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9cLmCRBK7hj4Ov3rIwAAFlAIAHqrHa8ZUz8AdckZFb10uHLr\nglzjYBOS4UirnSTOISyunGwc6dupQNvGSpj/CnDtTdSqZ2X0yS/mKCRtFZzchmN9\nammhLyM4+Tg98fwgzAD66fzGqvtOiMUIN1xTwHR++TDdlW+giL0TGFGJIPwcW2UY\nGcu/zRr9mpsyrdxr0KPL8vjA887ILmD8Q2bxbwio4Vp/I5uwoBGXyaguM5ucgOxM\nATD9JNXnnk/OIiEo3c/xHPcuNprjhMdqDFQ8c4KIBqbYnxuUiWwDD7V4j5psRt67\no2GTT2UQTeOMbQuOQFrm2y7oldFYnG5YPNxoomNeaSDuFMV6/2aEtRg8cyAvTbM=\n=t/8V\n-----END PGP SIGNATURE-----\n", "payload": "tree 540602c5d324c03bc37790bda212395d4fa1b62f\nparent 1dc337645adcc6361c3a1705d15b25f634f4da90\nparent 52a70c392e6099b3475fac5ad0d920fc3e0f5070\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626718950 +0000\ncommitter GitHub <noreply@github.com> 1626718950 +0000\n\nMerge #9638\n\n9638: internal: replace some unwraps with types r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84302bdde8671fc69a40a0d3382e1406a1739e3a", "html_url": "https://github.com/rust-lang/rust/commit/84302bdde8671fc69a40a0d3382e1406a1739e3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84302bdde8671fc69a40a0d3382e1406a1739e3a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc337645adcc6361c3a1705d15b25f634f4da90", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc337645adcc6361c3a1705d15b25f634f4da90", "html_url": "https://github.com/rust-lang/rust/commit/1dc337645adcc6361c3a1705d15b25f634f4da90"}, {"sha": "52a70c392e6099b3475fac5ad0d920fc3e0f5070", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a70c392e6099b3475fac5ad0d920fc3e0f5070", "html_url": "https://github.com/rust-lang/rust/commit/52a70c392e6099b3475fac5ad0d920fc3e0f5070"}], "stats": {"total": 219, "additions": 125, "deletions": 94}, "files": [{"sha": "8e66f240909291dbe994761526ea37f8c86417db", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 20, "deletions": 41, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=84302bdde8671fc69a40a0d3382e1406a1739e3a", "patch": "@@ -1,8 +1,9 @@\n //! See [`CargoWorkspace`].\n \n+use std::convert::TryInto;\n use std::iter;\n use std::path::PathBuf;\n-use std::{convert::TryInto, ops, process::Command};\n+use std::{ops, process::Command};\n \n use anyhow::{Context, Result};\n use base_db::Edition;\n@@ -13,8 +14,8 @@ use rustc_hash::FxHashMap;\n use serde::Deserialize;\n use serde_json::from_value;\n \n-use crate::utf8_stdout;\n use crate::CfgOverrides;\n+use crate::{utf8_stdout, ManifestPath};\n \n /// [`CargoWorkspace`] represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n@@ -108,7 +109,7 @@ pub struct PackageData {\n     /// Name as given in the `Cargo.toml`\n     pub name: String,\n     /// Path containing the `Cargo.toml`\n-    pub manifest: AbsPathBuf,\n+    pub manifest: ManifestPath,\n     /// Targets provided by the crate (lib, bin, example, test, ...)\n     pub targets: Vec<Target>,\n     /// Is this package a member of the current workspace\n@@ -215,12 +216,6 @@ impl TargetKind {\n     }\n }\n \n-impl PackageData {\n-    pub fn root(&self) -> &AbsPath {\n-        self.manifest.parent().unwrap()\n-    }\n-}\n-\n #[derive(Deserialize, Default)]\n // Deserialise helper for the cargo metadata\n struct PackageMetadata {\n@@ -230,10 +225,16 @@ struct PackageMetadata {\n \n impl CargoWorkspace {\n     pub fn fetch_metadata(\n-        cargo_toml: &AbsPath,\n+        cargo_toml: &ManifestPath,\n         config: &CargoConfig,\n         progress: &dyn Fn(String),\n     ) -> Result<cargo_metadata::Metadata> {\n+        let target = config\n+            .target\n+            .clone()\n+            .or_else(|| cargo_config_build_target(cargo_toml))\n+            .or_else(|| rustc_discover_host_triple(cargo_toml));\n+\n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n         meta.manifest_path(cargo_toml.to_path_buf());\n@@ -249,16 +250,8 @@ impl CargoWorkspace {\n                 meta.features(CargoOpt::SomeFeatures(config.features.clone()));\n             }\n         }\n-        if let Some(parent) = cargo_toml.parent() {\n-            meta.current_dir(parent.to_path_buf());\n-        }\n-        let target = if let Some(target) = &config.target {\n-            Some(target.clone())\n-        } else if let stdout @ Some(_) = cargo_config_build_target(cargo_toml) {\n-            stdout\n-        } else {\n-            rustc_discover_host_triple(cargo_toml)\n-        };\n+        meta.current_dir(cargo_toml.parent().as_os_str());\n+\n         if let Some(target) = target {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n         }\n@@ -269,21 +262,7 @@ impl CargoWorkspace {\n         progress(\"metadata\".to_string());\n \n         let meta = meta.exec().with_context(|| {\n-            let cwd: Option<AbsPathBuf> =\n-                std::env::current_dir().ok().and_then(|p| p.try_into().ok());\n-\n-            let workdir = cargo_toml\n-                .parent()\n-                .map(|p| p.to_path_buf())\n-                .or(cwd)\n-                .map(|dir| format!(\" in `{}`\", dir.display()))\n-                .unwrap_or_default();\n-\n-            format!(\n-                \"Failed to run `cargo metadata --manifest-path {}`{}\",\n-                cargo_toml.display(),\n-                workdir\n-            )\n+            format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display(),)\n         })?;\n \n         Ok(meta)\n@@ -312,7 +291,7 @@ impl CargoWorkspace {\n                 id: id.repr.clone(),\n                 name: name.clone(),\n                 version: version.clone(),\n-                manifest: AbsPathBuf::assert(PathBuf::from(&manifest_path)),\n+                manifest: AbsPathBuf::assert(PathBuf::from(&manifest_path)).try_into().unwrap(),\n                 targets: Vec::new(),\n                 is_member,\n                 edition,\n@@ -376,7 +355,7 @@ impl CargoWorkspace {\n     }\n \n     pub fn from_cargo_metadata3(\n-        cargo_toml: &AbsPath,\n+        cargo_toml: &ManifestPath,\n         config: &CargoConfig,\n         progress: &dyn Fn(String),\n     ) -> Result<CargoWorkspace> {\n@@ -412,9 +391,9 @@ impl CargoWorkspace {\n     }\n }\n \n-fn rustc_discover_host_triple(cargo_toml: &AbsPath) -> Option<String> {\n+fn rustc_discover_host_triple(cargo_toml: &ManifestPath) -> Option<String> {\n     let mut rustc = Command::new(toolchain::rustc());\n-    rustc.current_dir(cargo_toml.parent().unwrap()).arg(\"-vV\");\n+    rustc.current_dir(cargo_toml.parent()).arg(\"-vV\");\n     log::debug!(\"Discovering host platform by {:?}\", rustc);\n     match utf8_stdout(rustc) {\n         Ok(stdout) => {\n@@ -435,10 +414,10 @@ fn rustc_discover_host_triple(cargo_toml: &AbsPath) -> Option<String> {\n     }\n }\n \n-fn cargo_config_build_target(cargo_toml: &AbsPath) -> Option<String> {\n+fn cargo_config_build_target(cargo_toml: &ManifestPath) -> Option<String> {\n     let mut cargo_config = Command::new(toolchain::cargo());\n     cargo_config\n-        .current_dir(cargo_toml.parent().unwrap())\n+        .current_dir(cargo_toml.parent())\n         .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n         .env(\"RUSTC_BOOTSTRAP\", \"1\");\n     // if successful we receive `build.target = \"target-triple\"`"}, {"sha": "b0214c3a07c19c0da708cda92c8aec181a49a586", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=84302bdde8671fc69a40a0d3382e1406a1739e3a", "patch": "@@ -15,6 +15,7 @@\n //!   procedural macros).\n //! * Lowering of concrete model to a [`base_db::CrateGraph`]\n \n+mod manifest_path;\n mod cargo_workspace;\n mod cfg_flag;\n mod project_json;\n@@ -24,12 +25,13 @@ mod rustc_cfg;\n mod build_scripts;\n \n use std::{\n+    convert::{TryFrom, TryInto},\n     fs::{self, read_dir, ReadDir},\n     io,\n     process::Command,\n };\n \n-use anyhow::{bail, Context, Result};\n+use anyhow::{bail, format_err, Context, Result};\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashSet;\n \n@@ -39,6 +41,7 @@ pub use crate::{\n         CargoConfig, CargoWorkspace, Package, PackageData, PackageDependency, RustcSource, Target,\n         TargetData, TargetKind,\n     },\n+    manifest_path::ManifestPath,\n     project_json::{ProjectJson, ProjectJsonData},\n     sysroot::Sysroot,\n     workspace::{CfgOverrides, PackageRoot, ProjectWorkspace},\n@@ -48,12 +51,14 @@ pub use proc_macro_api::ProcMacroClient;\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n pub enum ProjectManifest {\n-    ProjectJson(AbsPathBuf),\n-    CargoToml(AbsPathBuf),\n+    ProjectJson(ManifestPath),\n+    CargoToml(ManifestPath),\n }\n \n impl ProjectManifest {\n     pub fn from_manifest_file(path: AbsPathBuf) -> Result<ProjectManifest> {\n+        let path = ManifestPath::try_from(path)\n+            .map_err(|path| format_err!(\"bad manifest path: {}\", path.display()))?;\n         if path.file_name().unwrap_or_default() == \"rust-project.json\" {\n             return Ok(ProjectManifest::ProjectJson(path));\n         }\n@@ -83,38 +88,43 @@ impl ProjectManifest {\n         return find_cargo_toml(path)\n             .map(|paths| paths.into_iter().map(ProjectManifest::CargoToml).collect());\n \n-        fn find_cargo_toml(path: &AbsPath) -> io::Result<Vec<AbsPathBuf>> {\n+        fn find_cargo_toml(path: &AbsPath) -> io::Result<Vec<ManifestPath>> {\n             match find_in_parent_dirs(path, \"Cargo.toml\") {\n                 Some(it) => Ok(vec![it]),\n                 None => Ok(find_cargo_toml_in_child_dir(read_dir(path)?)),\n             }\n         }\n \n-        fn find_in_parent_dirs(path: &AbsPath, target_file_name: &str) -> Option<AbsPathBuf> {\n+        fn find_in_parent_dirs(path: &AbsPath, target_file_name: &str) -> Option<ManifestPath> {\n             if path.file_name().unwrap_or_default() == target_file_name {\n-                return Some(path.to_path_buf());\n+                if let Ok(manifest) = ManifestPath::try_from(path.to_path_buf()) {\n+                    return Some(manifest);\n+                }\n             }\n \n             let mut curr = Some(path);\n \n             while let Some(path) = curr {\n                 let candidate = path.join(target_file_name);\n                 if fs::metadata(&candidate).is_ok() {\n-                    return Some(candidate);\n+                    if let Ok(manifest) = ManifestPath::try_from(candidate) {\n+                        return Some(manifest);\n+                    }\n                 }\n                 curr = path.parent();\n             }\n \n             None\n         }\n \n-        fn find_cargo_toml_in_child_dir(entities: ReadDir) -> Vec<AbsPathBuf> {\n+        fn find_cargo_toml_in_child_dir(entities: ReadDir) -> Vec<ManifestPath> {\n             // Only one level down to avoid cycles the easy way and stop a runaway scan with large projects\n             entities\n                 .filter_map(Result::ok)\n                 .map(|it| it.path().join(\"Cargo.toml\"))\n                 .filter(|it| it.exists())\n                 .map(AbsPathBuf::assert)\n+                .filter_map(|it| it.try_into().ok())\n                 .collect()\n         }\n     }"}, {"sha": "5683bf13b19fb5ff00cb7e466cd5026db1b491ae", "filename": "crates/project_model/src/manifest_path.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fmanifest_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fmanifest_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fmanifest_path.rs?ref=84302bdde8671fc69a40a0d3382e1406a1739e3a", "patch": "@@ -0,0 +1,51 @@\n+//! See [`ManifestPath`].\n+use std::{convert::TryFrom, ops, path::Path};\n+\n+use paths::{AbsPath, AbsPathBuf};\n+\n+/// More or less [`AbsPathBuf`] with non-None parent.\n+///\n+/// We use it to store path to Cargo.toml, as we frequently use the parent dir\n+/// as a working directory to spawn various commands, and its nice to not have\n+/// to `.unwrap()` everywhere.\n+///\n+/// This could have been named `AbsNonRootPathBuf`, as we don't enforce that\n+/// this stores manifest files in particular, but we only use this for manifests\n+/// at the moment in practice.\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n+pub struct ManifestPath {\n+    file: AbsPathBuf,\n+}\n+\n+impl TryFrom<AbsPathBuf> for ManifestPath {\n+    type Error = AbsPathBuf;\n+\n+    fn try_from(file: AbsPathBuf) -> Result<Self, Self::Error> {\n+        if file.parent().is_none() {\n+            Err(file)\n+        } else {\n+            Ok(ManifestPath { file })\n+        }\n+    }\n+}\n+\n+impl ManifestPath {\n+    // Shadow `parent` from `Deref`.\n+    pub fn parent(&self) -> &AbsPath {\n+        self.file.parent().unwrap()\n+    }\n+}\n+\n+impl ops::Deref for ManifestPath {\n+    type Target = AbsPath;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &*self.file\n+    }\n+}\n+\n+impl AsRef<Path> for ManifestPath {\n+    fn as_ref(&self) -> &Path {\n+        self.file.as_ref()\n+    }\n+}"}, {"sha": "2755e5768ff3e773603c61a1c9001880cf78d4e8", "filename": "crates/project_model/src/rustc_cfg.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs?ref=84302bdde8671fc69a40a0d3382e1406a1739e3a", "patch": "@@ -3,11 +3,10 @@\n use std::process::Command;\n \n use anyhow::Result;\n-use paths::AbsPath;\n \n-use crate::{cfg_flag::CfgFlag, utf8_stdout};\n+use crate::{cfg_flag::CfgFlag, utf8_stdout, ManifestPath};\n \n-pub(crate) fn get(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Vec<CfgFlag> {\n+pub(crate) fn get(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Vec<CfgFlag> {\n     let _p = profile::span(\"rustc_cfg::get\");\n     let mut res = Vec::with_capacity(6 * 2 + 1);\n \n@@ -27,12 +26,12 @@ pub(crate) fn get(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Vec<Cfg\n     res\n }\n \n-fn get_rust_cfgs(cargo_toml: Option<&AbsPath>, target: Option<&str>) -> Result<String> {\n+fn get_rust_cfgs(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Result<String> {\n     let cargo_rust_cfgs = match cargo_toml {\n         Some(cargo_toml) => {\n             let mut cargo_config = Command::new(toolchain::cargo());\n             cargo_config\n-                .current_dir(cargo_toml.parent().unwrap())\n+                .current_dir(cargo_toml.parent())\n                 .args(&[\"-Z\", \"unstable-options\", \"rustc\", \"--print\", \"cfg\"])\n                 .env(\"RUSTC_BOOTSTRAP\", \"1\");\n             if let Some(target) = target {"}, {"sha": "fec606e729f04d102b0b8de4233e6b37c55ccb89", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=84302bdde8671fc69a40a0d3382e1406a1739e3a", "patch": "@@ -10,7 +10,7 @@ use anyhow::{format_err, Result};\n use la_arena::{Arena, Idx};\n use paths::{AbsPath, AbsPathBuf};\n \n-use crate::utf8_stdout;\n+use crate::{utf8_stdout, ManifestPath};\n \n #[derive(Default, Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n@@ -22,7 +22,7 @@ pub(crate) type SysrootCrate = Idx<SysrootCrateData>;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct SysrootCrateData {\n     pub name: String,\n-    pub root: AbsPathBuf,\n+    pub root: ManifestPath,\n     pub deps: Vec<SysrootCrate>,\n }\n \n@@ -48,20 +48,17 @@ impl Sysroot {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n \n-    pub fn discover(cargo_toml: &AbsPath) -> Result<Sysroot> {\n-        log::debug!(\"Discovering sysroot for {}\", cargo_toml.display());\n-        let current_dir = cargo_toml.parent().ok_or_else(|| {\n-            format_err!(\"Failed to find the parent directory for {}\", cargo_toml.display())\n-        })?;\n-        let sysroot_dir = discover_sysroot_dir(current_dir)?;\n-        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, current_dir)?;\n+    pub fn discover(dir: &AbsPath) -> Result<Sysroot> {\n+        log::debug!(\"Discovering sysroot for {}\", dir.display());\n+        let sysroot_dir = discover_sysroot_dir(dir)?;\n+        let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir)?;\n         let res = Sysroot::load(&sysroot_src_dir)?;\n         Ok(res)\n     }\n \n-    pub fn discover_rustc(cargo_toml: &AbsPath) -> Option<AbsPathBuf> {\n+    pub fn discover_rustc(cargo_toml: &ManifestPath) -> Option<ManifestPath> {\n         log::debug!(\"Discovering rustc source for {}\", cargo_toml.display());\n-        let current_dir = cargo_toml.parent().unwrap();\n+        let current_dir = cargo_toml.parent();\n         discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n \n@@ -73,6 +70,7 @@ impl Sysroot {\n             let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n                 .iter()\n                 .map(|it| sysroot_src_dir.join(it))\n+                .filter_map(|it| ManifestPath::try_from(it).ok())\n                 .find(|it| fs::metadata(it).is_ok());\n \n             if let Some(root) = root {\n@@ -168,8 +166,9 @@ try installing the Rust source the same way you installed rustc\",\n         })\n }\n \n-fn get_rustc_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n+fn get_rustc_src(sysroot_path: &AbsPath) -> Option<ManifestPath> {\n     let rustc_src = sysroot_path.join(\"lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\");\n+    let rustc_src = ManifestPath::try_from(rustc_src).ok()?;\n     log::debug!(\"Checking for rustc source code: {}\", rustc_src.display());\n     if fs::metadata(&rustc_src).is_ok() {\n         Some(rustc_src)\n@@ -185,12 +184,6 @@ fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     [\"library\", \"src\"].iter().map(|it| rust_src.join(it)).find(|it| fs::metadata(it).is_ok())\n }\n \n-impl SysrootCrateData {\n-    pub fn root_dir(&self) -> &AbsPath {\n-        self.root.parent().unwrap()\n-    }\n-}\n-\n const SYSROOT_CRATES: &str = \"\n alloc\n core"}, {"sha": "41bd668e47681944c90164e8c00f88c1db690866", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=84302bdde8671fc69a40a0d3382e1406a1739e3a", "patch": "@@ -2,7 +2,7 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{collections::VecDeque, fmt, fs, process::Command};\n+use std::{collections::VecDeque, convert::TryFrom, fmt, fs, process::Command};\n \n use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n@@ -18,8 +18,8 @@ use crate::{\n     cfg_flag::CfgFlag,\n     rustc_cfg,\n     sysroot::SysrootCrate,\n-    utf8_stdout, CargoConfig, CargoWorkspace, ProjectJson, ProjectManifest, Sysroot, TargetKind,\n-    WorkspaceBuildScripts,\n+    utf8_stdout, CargoConfig, CargoWorkspace, ManifestPath, ProjectJson, ProjectManifest, Sysroot,\n+    TargetKind, WorkspaceBuildScripts,\n };\n \n pub type CfgOverrides = FxHashMap<String, CfgDiff>;\n@@ -123,7 +123,7 @@ impl ProjectWorkspace {\n                 let data = serde_json::from_str(&file).with_context(|| {\n                     format!(\"Failed to deserialize json file {}\", project_json.display())\n                 })?;\n-                let project_location = project_json.parent().unwrap().to_path_buf();\n+                let project_location = project_json.parent().to_path_buf();\n                 let project_json = ProjectJson::new(&project_location, data);\n                 ProjectWorkspace::load_inline(project_json, config.target.as_deref())?\n             }\n@@ -147,21 +147,18 @@ impl ProjectWorkspace {\n                 let sysroot = if config.no_sysroot {\n                     Sysroot::default()\n                 } else {\n-                    Sysroot::discover(&cargo_toml).with_context(|| {\n+                    Sysroot::discover(cargo_toml.parent()).with_context(|| {\n                         format!(\n                             \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n                             cargo_toml.display()\n                         )\n                     })?\n                 };\n \n-                let rustc_dir = if let Some(rustc_source) = &config.rustc_source {\n-                    match rustc_source {\n-                        RustcSource::Path(path) => Some(path.clone()),\n-                        RustcSource::Discover => Sysroot::discover_rustc(&cargo_toml),\n-                    }\n-                } else {\n-                    None\n+                let rustc_dir = match &config.rustc_source {\n+                    Some(RustcSource::Path(path)) => ManifestPath::try_from(path.clone()).ok(),\n+                    Some(RustcSource::Discover) => Sysroot::discover_rustc(&cargo_toml),\n+                    None => None,\n                 };\n \n                 let rustc = match rustc_dir {\n@@ -206,7 +203,10 @@ impl ProjectWorkspace {\n \n     pub fn load_detached_files(detached_files: Vec<AbsPathBuf>) -> Result<ProjectWorkspace> {\n         let sysroot = Sysroot::discover(\n-            detached_files.first().ok_or_else(|| format_err!(\"No detached files to load\"))?,\n+            detached_files\n+                .first()\n+                .and_then(|it| it.parent())\n+                .ok_or_else(|| format_err!(\"No detached files to load\"))?,\n         )?;\n         let rustc_cfg = rustc_cfg::get(None, None);\n         Ok(ProjectWorkspace::DetachedFiles { files: detached_files, sysroot, rustc_cfg })\n@@ -253,7 +253,7 @@ impl ProjectWorkspace {\n                 .chain(sysroot.as_ref().into_iter().flat_map(|sysroot| {\n                     sysroot.crates().map(move |krate| PackageRoot {\n                         is_member: false,\n-                        include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                        include: vec![sysroot[krate].root.parent().to_path_buf()],\n                         exclude: Vec::new(),\n                     })\n                 }))\n@@ -270,7 +270,7 @@ impl ProjectWorkspace {\n                     .packages()\n                     .map(|pkg| {\n                         let is_member = cargo[pkg].is_member;\n-                        let pkg_root = cargo[pkg].root().to_path_buf();\n+                        let pkg_root = cargo[pkg].manifest.parent().to_path_buf();\n \n                         let mut include = vec![pkg_root.clone()];\n                         include.extend(\n@@ -306,13 +306,13 @@ impl ProjectWorkspace {\n                     })\n                     .chain(sysroot.crates().map(|krate| PackageRoot {\n                         is_member: false,\n-                        include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                        include: vec![sysroot[krate].root.parent().to_path_buf()],\n                         exclude: Vec::new(),\n                     }))\n                     .chain(rustc.into_iter().flat_map(|rustc| {\n                         rustc.packages().map(move |krate| PackageRoot {\n                             is_member: false,\n-                            include: vec![rustc[krate].root().to_path_buf()],\n+                            include: vec![rustc[krate].manifest.parent().to_path_buf()],\n                             exclude: Vec::new(),\n                         })\n                     }))\n@@ -327,7 +327,7 @@ impl ProjectWorkspace {\n                 })\n                 .chain(sysroot.crates().map(|krate| PackageRoot {\n                     is_member: false,\n-                    include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                    include: vec![sysroot[krate].root.parent().to_path_buf()],\n                     exclude: Vec::new(),\n                 }))\n                 .collect(),\n@@ -855,8 +855,7 @@ fn inject_cargo_env(package: &PackageData, env: &mut Env) {\n     // FIXME: Missing variables:\n     // CARGO_BIN_NAME, CARGO_BIN_EXE_<name>\n \n-    let mut manifest_dir = package.manifest.clone();\n-    manifest_dir.pop();\n+    let manifest_dir = package.manifest.parent();\n     env.set(\"CARGO_MANIFEST_DIR\".into(), manifest_dir.as_os_str().to_string_lossy().into_owned());\n \n     // Not always right, but works for common cases."}, {"sha": "4767cca6b52761a87ef05fc60d0017d28b7da404", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84302bdde8671fc69a40a0d3382e1406a1739e3a/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=84302bdde8671fc69a40a0d3382e1406a1739e3a", "patch": "@@ -2,7 +2,7 @@\n \n use cfg::{CfgAtom, CfgExpr};\n use ide::{FileId, RunnableKind, TestId};\n-use project_model::{self, TargetKind};\n+use project_model::{self, ManifestPath, TargetKind};\n use vfs::AbsPathBuf;\n \n use crate::{global_state::GlobalStateSnapshot, Result};\n@@ -14,7 +14,7 @@ use crate::{global_state::GlobalStateSnapshot, Result};\n #[derive(Clone)]\n pub(crate) struct CargoTargetSpec {\n     pub(crate) workspace_root: AbsPathBuf,\n-    pub(crate) cargo_toml: AbsPathBuf,\n+    pub(crate) cargo_toml: ManifestPath,\n     pub(crate) package: String,\n     pub(crate) target: String,\n     pub(crate) target_kind: TargetKind,"}]}