{"sha": "4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMjhhODJjNTkwYWE3N2ZiZDFlNWUwZjhhMGZlNjExYzkzYjVhNzE=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-08-06T15:49:46Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-09-04T16:28:20Z"}, "message": "ty.flags -> ty.flags()", "tree": {"sha": "04cb60880cb368089464df45fd5296345ce5ceda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04cb60880cb368089464df45fd5296345ce5ceda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "html_url": "https://github.com/rust-lang/rust/commit/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "085e4170873f3e411c87ee009572f7d2b5130856", "url": "https://api.github.com/repos/rust-lang/rust/commits/085e4170873f3e411c87ee009572f7d2b5130856", "html_url": "https://github.com/rust-lang/rust/commit/085e4170873f3e411c87ee009572f7d2b5130856"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "871fc4fafe269f02f7bcea52454b2d1c4e2563b8", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -418,7 +418,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Opaque(..) => {\n-                if t.flags.intersects(self.needs_canonical_flags) {\n+                if t.flags().intersects(self.needs_canonical_flags) {\n                     t.super_fold_with(self)\n                 } else {\n                     t"}, {"sha": "aa34dedc4b286b74b02fc5e905e820b7675acc94", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -1828,9 +1828,9 @@ macro_rules! sty_debug_print {\n                         ty::Error(_) => /* unimportant */ continue,\n                         $(ty::$variant(..) => &mut $variant,)*\n                     };\n-                    let lt = t.flags.intersects(ty::TypeFlags::HAS_RE_INFER);\n-                    let ty = t.flags.intersects(ty::TypeFlags::HAS_TY_INFER);\n-                    let ct = t.flags.intersects(ty::TypeFlags::HAS_CT_INFER);\n+                    let lt = t.flags().intersects(ty::TypeFlags::HAS_RE_INFER);\n+                    let ty = t.flags().intersects(ty::TypeFlags::HAS_TY_INFER);\n+                    let ct = t.flags().intersects(ty::TypeFlags::HAS_CT_INFER);\n \n                     variant.total += 1;\n                     total.total += 1;"}, {"sha": "f7871c4fffddbb76154d3102c1f94aa05b0f7c51", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -253,7 +253,7 @@ impl FlagComputation {\n     }\n \n     fn add_ty(&mut self, ty: Ty<'_>) {\n-        self.add_flags(ty.flags);\n+        self.add_flags(ty.flags());\n         self.add_exclusive_binder(ty.outer_exclusive_binder);\n     }\n "}, {"sha": "5e8fb95dc298567c0943fbffb45e8cc5afe78eff", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -352,7 +352,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n                 // We're only interested in types involving regions\n-                if ty.flags.intersects(TypeFlags::HAS_FREE_REGIONS) {\n+                if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n                 } else {\n                     false // keep visiting\n@@ -922,8 +922,13 @@ struct HasTypeFlagsVisitor {\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     fn visit_ty(&mut self, t: Ty<'_>) -> bool {\n-        debug!(\"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\", t, t.flags, self.flags);\n-        t.flags.intersects(self.flags)\n+        debug!(\n+            \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n+            t,\n+            t.flags(),\n+            self.flags\n+        );\n+        t.flags().intersects(self.flags)\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {"}, {"sha": "29fa3f9bb65e05c5824a6141fdaab2fc6c3caa7e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -583,7 +583,9 @@ pub struct TyS<'tcx> {\n     /// This field shouldn't be used directly and may be removed in the future.\n     /// Use `TyS::kind()` instead.\n     kind: TyKind<'tcx>,\n-    pub flags: TypeFlags,\n+    /// This field shouldn't be used directly and may be removed in the future.\n+    /// Use `TyS::flags()` instead.\n+    flags: TypeFlags,\n \n     /// This is a kind of confusing thing: it stores the smallest\n     /// binder such that"}, {"sha": "9f5fc5a2d3fbccc428e429954403ada0e344e791", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -1748,6 +1748,11 @@ impl<'tcx> TyS<'tcx> {\n         &self.kind\n     }\n \n+    #[inline(always)]\n+    pub fn flags(&self) -> TypeFlags {\n+        self.flags\n+    }\n+\n     #[inline]\n     pub fn is_unit(&self) -> bool {\n         match self.kind() {"}, {"sha": "9cf3bbd94e03d4031214d15d25fd3c4dd7ccbc3c", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -708,7 +708,7 @@ where\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         // We're only interested in types involving regions\n-        if !ty.flags.intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n+        if !ty.flags().intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n             return false; // keep visiting\n         }\n "}, {"sha": "73eabd4207e773cbc80a0c003b11e1cc3e204cf5", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=4d28a82c590aa77fbd1e5e0f8a0fe611c93b5a71", "patch": "@@ -128,7 +128,7 @@ fn verify_ty_bound<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, source: Source) {\n                 diag.span_label(const_kw_span, \"make this a static item (maybe with lazy_static)\");\n             },\n             Source::Assoc { ty: ty_span, .. } => {\n-                if ty.flags.intersects(TypeFlags::HAS_FREE_LOCAL_NAMES) {\n+                if ty.flags().intersects(TypeFlags::HAS_FREE_LOCAL_NAMES) {\n                     diag.span_label(ty_span, &format!(\"consider requiring `{}` to be `Copy`\", ty));\n                 }\n             },"}]}