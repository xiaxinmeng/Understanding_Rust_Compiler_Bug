{"sha": "d03a4b0046a27968fc4eeaf1847776b90a48264b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwM2E0YjAwNDZhMjc5NjhmYzRlZWFmMTg0Nzc3NmI5MGE0ODI2NGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-07T04:16:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:52Z"}, "message": "test: Convert statics to constants\n\nAdditionally, add lots of tests for new functionality around statics and\n`static mut`.", "tree": {"sha": "31bda6459d4342df1e457b25e80b7ffe1ffc6fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31bda6459d4342df1e457b25e80b7ffe1ffc6fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d03a4b0046a27968fc4eeaf1847776b90a48264b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d03a4b0046a27968fc4eeaf1847776b90a48264b", "html_url": "https://github.com/rust-lang/rust/commit/d03a4b0046a27968fc4eeaf1847776b90a48264b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d03a4b0046a27968fc4eeaf1847776b90a48264b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c09c9434764127f857a9599b93dc090ac63cc2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c09c9434764127f857a9599b93dc090ac63cc2b", "html_url": "https://github.com/rust-lang/rust/commit/9c09c9434764127f857a9599b93dc090ac63cc2b"}], "stats": {"total": 707, "additions": 535, "deletions": 172}, "files": [{"sha": "945004ede6de84518702b6e889d6027d3f2258a6", "filename": "src/test/auxiliary/cci_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_const.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -11,6 +11,6 @@\n pub extern fn bar() {\n }\n \n-pub static foopy: &'static str = \"hi there\";\n-pub static uint_val: uint = 12;\n-pub static uint_expr: uint = (1 << uint_val) - 1;\n+pub const foopy: &'static str = \"hi there\";\n+pub const uint_val: uint = 12;\n+pub const uint_expr: uint = (1 << uint_val) - 1;"}, {"sha": "3a9d76406e10a1c0d8af35a72468c37fd9d85402", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -17,7 +17,7 @@ pub struct C<'a> {\n }\n \n fn no_op() { }\n-pub static D : C<'static> = C {\n+pub const D : C<'static> = C {\n     k: no_op\n };\n "}, {"sha": "e373421fabfaca1cba11a77d2595fcd4ec23152a", "filename": "src/test/auxiliary/issue-13620-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue-13620-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue-13620-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-13620-1.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -14,6 +14,6 @@ pub struct Foo {\n \n extern fn the_foo() {}\n \n-pub static FOO: Foo = Foo {\n+pub const FOO: Foo = Foo {\n     foo: the_foo\n };"}, {"sha": "3657d39ff77e4824aa4362ab9feebca02eec8945", "filename": "src/test/auxiliary/issue-17718-const-privacy.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17718-const-privacy.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use foo::FOO2;\n+\n+pub const FOO: uint = 3;\n+const BAR: uint = 3;\n+\n+mod foo {\n+    pub const FOO2: uint = 3;\n+}"}, {"sha": "f0b431b1db932c9226a70efae1972c450b919af9", "filename": "src/test/auxiliary/issue-17718.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17718.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sync::atomic;\n+\n+pub const C1: uint = 1;\n+pub const C2: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n+pub const C3: fn() = foo;\n+pub const C4: uint = C1 * C1 + C1 / C1;\n+pub const C5: &'static uint = &C4;\n+\n+pub static S1: uint = 3;\n+pub static S2: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n+\n+fn foo() {}"}, {"sha": "5bd52ef501068c80decef3ebc60fc75b8b8735df", "filename": "src/test/auxiliary/issue13213aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -21,7 +21,7 @@ mod private {\n     pub struct P {\n         p: i32,\n     }\n-    pub static THREE: P = P { p: 3 };\n+    pub const THREE: P = P { p: 3 };\n }\n \n pub static A: S = S { p: private::THREE };"}, {"sha": "e151369ff38ac645a5cc50dabf966fb3bb896b9f", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -45,24 +45,24 @@ use std::io::{stdout, IoResult};\n use std::os;\n use std::slice::bytes::copy_memory;\n \n-static LINE_LEN: uint = 60;\n-static LOOKUP_SIZE: uint = 4 * 1024;\n-static LOOKUP_SCALE: f32 = (LOOKUP_SIZE - 1) as f32;\n+const LINE_LEN: uint = 60;\n+const LOOKUP_SIZE: uint = 4 * 1024;\n+const LOOKUP_SCALE: f32 = (LOOKUP_SIZE - 1) as f32;\n \n // Random number generator constants\n-static IM: u32 = 139968;\n-static IA: u32 = 3877;\n-static IC: u32 = 29573;\n+const IM: u32 = 139968;\n+const IA: u32 = 3877;\n+const IC: u32 = 29573;\n \n-static ALU: &'static str = \"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG\\\n+const ALU: &'static str = \"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG\\\n                             GGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGA\\\n                             GACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAA\\\n                             AATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT\\\n                             CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAAC\\\n                             CCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTG\\\n                             CACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\";\n \n-static NULL_AMINO_ACID: AminoAcid = AminoAcid { c: ' ' as u8, p: 0.0 };\n+const NULL_AMINO_ACID: AminoAcid = AminoAcid { c: ' ' as u8, p: 0.0 };\n \n static IUB: [AminoAcid, ..15] = [\n     AminoAcid { c: 'a' as u8, p: 0.27 },"}, {"sha": "77311edba4e7afbafa9363e542d17f903aabd10c", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -45,8 +45,8 @@ use std::io::{BufferedWriter, File};\n use std::cmp::min;\n use std::os;\n \n-static LINE_LENGTH: uint = 60;\n-static IM: u32 = 139968;\n+const LINE_LENGTH: uint = 60;\n+const IM: u32 = 139968;\n \n struct MyRandom {\n     last: u32"}, {"sha": "66fe52d9ec7ed5e5f8122fa0c68a992ab7205e49", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -49,9 +49,9 @@ use std::os;\n use std::simd::f64x2;\n use std::sync::{Arc, Future};\n \n-static ITER: int = 50;\n-static LIMIT: f64 = 2.0;\n-static WORKERS: uint = 16;\n+const ITER: int = 50;\n+const LIMIT: f64 = 2.0;\n+const WORKERS: uint = 16;\n \n #[inline(always)]\n fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n@@ -144,7 +144,7 @@ fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n fn write_line(init_i: f64, vec_init_r: &[f64], res: &mut Vec<u8>) {\n     let v_init_i : f64x2 = f64x2(init_i, init_i);\n     let v_2 : f64x2 = f64x2(2.0, 2.0);\n-    static LIMIT_SQUARED: f64 = LIMIT * LIMIT;\n+    const LIMIT_SQUARED: f64 = LIMIT * LIMIT;\n \n     for chunk_init_r in vec_init_r.chunks(8) {\n         let mut cur_byte = 0xff;"}, {"sha": "a945e0f7796d18db225d982078611cf41662ed43", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -38,10 +38,10 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-static PI: f64 = 3.141592653589793;\n-static SOLAR_MASS: f64 = 4.0 * PI * PI;\n-static YEAR: f64 = 365.24;\n-static N_BODIES: uint = 5;\n+const PI: f64 = 3.141592653589793;\n+const SOLAR_MASS: f64 = 4.0 * PI * PI;\n+const YEAR: f64 = 365.24;\n+const N_BODIES: uint = 5;\n \n static BODIES: [Planet, ..N_BODIES] = [\n     // Sun"}, {"sha": "2945a05024792411a12333971c128e3b9656c988", "filename": "src/test/compile-fail/check-static-immutable-mut-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -11,6 +11,6 @@\n // Checks that immutable static items can't have mutable slices\n \n static TEST: &'static mut [int] = &mut [];\n-//~^ ERROR static items are not allowed to have mutable slices\n+//~^ ERROR statics are not allowed to have mutable references\n \n pub fn main() { }"}, {"sha": "d23aa317247c08c0a95e9d2d6b06fa2a56dad909", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verifies all possible restrictions for static items values.\n+// Verifies all possible restrictions for statics values.\n \n use std::kinds::marker;\n \n@@ -21,7 +21,7 @@ impl Drop for WithDtor {\n // This enum will be used to test the following rules:\n // 1. Variants are safe for static\n // 2. Expr calls are allowed as long as they arguments are safe\n-// 3. Expr calls with unsafe arguments for static items are rejected\n+// 3. Expr calls with unsafe arguments for statics are rejected\n enum SafeEnum {\n     Variant1,\n     Variant2(int),\n@@ -35,7 +35,7 @@ static STATIC2: SafeEnum = Variant2(0);\n \n // This one should fail\n static STATIC3: SafeEnum = Variant3(WithDtor);\n-//~^ ERROR static items are not allowed to have destructors\n+//~^ ERROR statics are not allowed to have destructors\n \n \n // This enum will be used to test that variants\n@@ -52,9 +52,9 @@ impl Drop for UnsafeEnum {\n \n \n static STATIC4: UnsafeEnum = Variant5;\n-//~^ ERROR static items are not allowed to have destructors\n+//~^ ERROR statics are not allowed to have destructors\n static STATIC5: UnsafeEnum = Variant6(0);\n-//~^ ERROR static items are not allowed to have destructors\n+//~^ ERROR statics are not allowed to have destructors\n \n \n struct SafeStruct {\n@@ -68,7 +68,7 @@ static STATIC6: SafeStruct = SafeStruct{field1: Variant1, field2: Variant2(0)};\n \n // field2 has an unsafe value, hence this should fail\n static STATIC7: SafeStruct = SafeStruct{field1: Variant1, field2: Variant3(WithDtor)};\n-//~^ ERROR static items are not allowed to have destructors\n+//~^ ERROR statics are not allowed to have destructors\n \n // Test variadic constructor for structs. The base struct should be examined\n // as well as every field present in the constructor.\n@@ -79,7 +79,7 @@ static STATIC8: SafeStruct = SafeStruct{field1: Variant1,\n // This example should fail because field1 in the base struct is not safe\n static STATIC9: SafeStruct = SafeStruct{field1: Variant1,\n                                         ..SafeStruct{field1: Variant3(WithDtor), field2: Variant1}};\n-//~^ ERROR static items are not allowed to have destructors\n+//~^ ERROR statics are not allowed to have destructors\n \n struct UnsafeStruct;\n \n@@ -89,44 +89,48 @@ impl Drop for UnsafeStruct {\n \n // Types with destructors are not allowed for statics\n static STATIC10: UnsafeStruct = UnsafeStruct;\n-//~^ ERROR static items are not allowed to have destructor\n+//~^ ERROR statics are not allowed to have destructor\n \n struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n-//~^ ERROR static items are not allowed to have custom pointers\n+//~^ ERROR statics are not allowed to have custom pointers\n \n // The following examples test that mutable structs are just forbidden\n // to have types with destructors\n // These should fail\n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n-//~^ ERROR mutable static items are not allowed to have destructors\n+//~^ ERROR mutable statics are not allowed to have destructors\n+//~^^ ERROR statics are not allowed to have destructors\n \n static mut STATIC13: SafeStruct = SafeStruct{field1: Variant1, field2: Variant3(WithDtor)};\n-//~^ ERROR mutable static items are not allowed to have destructors\n+//~^ ERROR mutable statics are not allowed to have destructors\n+//~^^ ERROR: statics are not allowed to have destructors\n \n static mut STATIC14: SafeStruct = SafeStruct {\n-//~^ ERROR mutable static items are not allowed to have destructors\n+//~^ ERROR mutable statics are not allowed to have destructors\n     field1: Variant1,\n     field2: Variant4(\"str\".to_string())\n };\n \n-static STATIC15: &'static [Box<MyOwned>] = &[box MyOwned, box MyOwned];\n-//~^ ERROR static items are not allowed to have custom pointers\n-//~^^ ERROR static items are not allowed to have custom pointers\n+static STATIC15: &'static [Box<MyOwned>] = &[\n+    box MyOwned, //~ ERROR statics are not allowed to have custom pointers\n+    box MyOwned, //~ ERROR statics are not allowed to have custom pointers\n+];\n \n-static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) =\n-    (&box MyOwned, &box MyOwned);\n-//~^ ERROR static items are not allowed to have custom pointers\n-//~^^ ERROR static items are not allowed to have custom pointers\n+static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n+    &box MyOwned, //~ ERROR statics are not allowed to have custom pointers\n+    &box MyOwned, //~ ERROR statics are not allowed to have custom pointers\n+);\n \n static mut STATIC17: SafeEnum = Variant1;\n-//~^ ERROR mutable static items are not allowed to have destructors\n+//~^ ERROR mutable statics are not allowed to have destructors\n \n-static STATIC19: Box<int> = box 3;\n-//~^ ERROR static items are not allowed to have custom pointers\n+static STATIC19: Box<int> =\n+    box 3;\n+//~^ ERROR statics are not allowed to have custom pointers\n \n pub fn main() {\n     let y = { static x: Box<int> = box 3; x };\n-    //~^ ERROR static items are not allowed to have custom pointers\n+    //~^ ERROR statics are not allowed to have custom pointers\n }"}, {"sha": "6d9657ab28912ef5d3df5528e4618a73f95f1078", "filename": "src/test/compile-fail/issue-15524.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15524.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static N: int = 1;\n+const N: int = 1;\n \n enum Foo {\n     A = 1,"}, {"sha": "aa586e58f7084846c1edaa910528f2183a546a0b", "filename": "src/test/compile-fail/issue-16149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-16149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-16149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16149.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -15,7 +15,7 @@ extern {\n fn main() {\n     let boolValue = match 42 {\n         externalValue => true,\n-        //~^ ERROR extern statics cannot be referenced in patterns\n+        //~^ ERROR static variables cannot be referenced in a pattern\n         _ => false\n     };\n }"}, {"sha": "1f763dbdc9fa642001f8e79a7eef83259e2408fe", "filename": "src/test/compile-fail/issue-17718-borrow-interior.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-borrow-interior.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S { a: uint }\n+static A: S  = S { a: 3 };\n+static B: &'static uint = &A.a;\n+//~^ ERROR: cannot refer to the interior of another static\n+static C: &'static uint = &(A.a);\n+//~^ ERROR: cannot refer to the interior of another static\n+\n+static D: [uint, ..1] = [1];\n+static E: uint = D[0];\n+//~^ ERROR: cannot refer to other statics by value\n+static F: &'static uint = &D[0];\n+//~^ ERROR: cannot refer to the interior of another static\n+\n+fn main() {}"}, {"sha": "6425dbda5c6c9071528e57cdb03987aec0683554", "filename": "src/test/compile-fail/issue-17718-const-bad-values.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-bad-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-bad-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-bad-values.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const C1: &'static mut [uint] = &mut [];\n+//~^ ERROR: constants are not allowed to have mutable references\n+\n+static mut S: uint = 3;\n+const C2: &'static mut uint = &mut S;\n+//~^ ERROR: constants cannot refer to other statics\n+//~^^ ERROR: are not allowed to have mutable references\n+\n+fn main() {}\n+"}, {"sha": "21cc9a757cf19d1b4ca95be0fcee87d2b49aacff", "filename": "src/test/compile-fail/issue-17718-const-borrow.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::UnsafeCell;\n+\n+const A: UnsafeCell<uint> = UnsafeCell { value: 1 };\n+const B: &'static UnsafeCell<uint> = &A;\n+//~^ ERROR: cannot borrow a constant which contains interior mutability\n+\n+struct C { a: UnsafeCell<uint> }\n+const D: C = C { a: UnsafeCell { value: 1 } };\n+const E: &'static UnsafeCell<uint> = &D.a;\n+//~^ ERROR: cannot borrow a constant which contains interior mutability\n+const F: &'static C = &D;\n+//~^ ERROR: cannot borrow a constant which contains interior mutability\n+\n+fn main() {}"}, {"sha": "e888f917741abdd8b13987e55da7ef72ecec1758", "filename": "src/test/compile-fail/issue-17718-const-destructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-destructors.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -14,6 +14,6 @@ impl Drop for A {\n }\n \n const FOO: A = A;\n-//~ ERROR: constants are not allowed to have destructors\n+//~^ ERROR: constants are not allowed to have destructors\n \n fn main() {}"}, {"sha": "046f038847b7bb3435f61b7d0b5840eb13dfa9d9", "filename": "src/test/compile-fail/issue-17718-const-naming.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(warnings)]\n+\n+const foo: int = 3;\n+//~^ ERROR: should have an uppercase name such as\n+\n+fn main() {}"}, {"sha": "d3be9f3dd3f77529fbae1d104c5ecb148b1532ac", "filename": "src/test/compile-fail/issue-17718-const-privacy.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-privacy.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-17718-const-privacy.rs\n+\n+extern crate \"issue-17718-const-privacy\" as other;\n+\n+use a::B; //~ ERROR: const `B` is private\n+use other::{\n+    FOO,\n+    BAR, //~ ERROR: const `BAR` is private\n+    FOO2,\n+};\n+\n+mod a {\n+    const B: uint = 3;\n+}\n+\n+fn main() {}"}, {"sha": "8c51b592054a5f33307b46c24c73140b60a99200", "filename": "src/test/compile-fail/issue-17718-constants-not-static.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-constants-not-static.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const FOO: uint = 3;\n+\n+fn foo() -> &'static uint { &FOO }\n+//~^ ERROR: borrowed value does not live long enough\n+\n+fn main() {\n+}"}, {"sha": "235d1222d81c0d99d2d5b58496f78a82b9c3d5e7", "filename": "src/test/compile-fail/issue-17718-extern-const.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-extern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-extern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-extern-const.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    const FOO: uint; //~ ERROR: unexpected token: `const`\n+}\n+\n+fn main() {}"}, {"sha": "01dfb1b4af93cdc7abc06a9ce2f4792933e1005b", "filename": "src/test/compile-fail/issue-17718-patterns.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static A1: uint = 1;\n+static mut A2: uint = 1;\n+const A3: uint = 1;\n+\n+fn main() {\n+    match 1u {\n+        A1 => {} //~ ERROR: static variables cannot be referenced in a pattern\n+        A2 => {} //~ ERROR: static variables cannot be referenced in a pattern\n+        A3 => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "a13dfe639c12bd5806b184c979cf832f2aa29f34", "filename": "src/test/compile-fail/issue-17718-recursive.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-recursive.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const A: uint = B; //~ ERROR: recursive constant\n+const B: uint = A; //~ ERROR: recursive constant\n+\n+fn main() {}"}, {"sha": "7b272e1610c7fa328d65c8f73b4e93c00db00bd4", "filename": "src/test/compile-fail/issue-17718-references.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-references.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Struct { a: uint }\n+\n+const C: uint = 1;\n+static S: uint = 1;\n+\n+const T1: &'static uint = &C;\n+const T2: &'static uint = &S; //~ ERROR: constants cannot refer to other statics\n+static T3: &'static uint = &C;\n+static T4: &'static uint = &S;\n+\n+const T5: uint = C;\n+const T6: uint = S; //~ ERROR: constants cannot refer to other statics\n+//~^ cannot refer to other statics\n+static T7: uint = C;\n+static T8: uint = S; //~ ERROR: cannot refer to other statics by value\n+\n+const T9: Struct = Struct { a: C };\n+const T10: Struct = Struct { a: S }; //~ ERROR: cannot refer to other statics by value\n+//~^ ERROR: constants cannot refer to other statics\n+static T11: Struct = Struct { a: C };\n+static T12: Struct = Struct { a: S }; //~ ERROR: cannot refer to other statics by value\n+\n+fn main() {}"}, {"sha": "c57df9a3af4a4f88392a6f739f55f689f42fb954", "filename": "src/test/compile-fail/issue-17718-static-move.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-move.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::kinds::marker;\n+\n+struct Foo { nc: marker::NoCopy }\n+const INIT: Foo = Foo { nc: marker::NoCopy };\n+static FOO: Foo = INIT;\n+\n+fn main() {\n+    let _a = FOO; //~ ERROR: cannot move out of static item\n+}"}, {"sha": "2304b18adb63d698af51410f614af52ceeeb2fe4", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::kinds::marker;\n+\n+struct Foo { marker: marker::NoSync }\n+\n+static FOO: uint = 3;\n+static BAR: Foo = Foo { marker: marker::NoSync };\n+//~^ ERROR: shared static items must have a type which implements Sync\n+\n+fn main() {}"}, {"sha": "a181215f4184d799d35b24621fed5969a5a2992e", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test for issue #4968\n \n-static A: (int,int) = (4,2);\n+const A: (int,int) = (4,2);\n fn main() {\n     match 42 { A => () }\n     //~^ ERROR mismatched types: expected `<generic integer #0>`, found `(int,int)`"}, {"sha": "7f0d9ef3b11ec9018f0a7346af66c4ae5b4474a3", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -13,6 +13,7 @@ use std::cell::RefCell;\n \n // Regresion test for issue 7364\n static boxed: Box<RefCell<int>> = box RefCell::new(0);\n-//~^ ERROR static items are not allowed to have custom pointers\n+//~^ ERROR statics are not allowed to have custom pointers\n+//~^^ ERROR: shared static items must have a type which implements Sync\n \n fn main() { }"}, {"sha": "eb3618c9f04081f3ddf451ff95e5113321a3b5d0", "filename": "src/test/compile-fail/issue-9243.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-9243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fissue-9243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9243.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -14,7 +14,7 @@ struct Test {\n     mem: int,\n }\n \n-pub static g_test: Test = Test {mem: 0}; //~ ERROR static items are not allowed to have destructors\n+pub static g_test: Test = Test {mem: 0}; //~ ERROR statics are not allowed to have destructors\n \n impl Drop for Test {\n     fn drop(&mut self) {}"}, {"sha": "a4320b8dc77511ae224910eb7dbdb2cc472916a9", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -13,14 +13,12 @@\n #![allow(non_camel_case_types)]\n #![allow(non_uppercase_statics)]\n #![deny(dead_code)]\n-#![feature(lang_items)]\n \n #![crate_type=\"lib\"]\n \n-pub use foo2::Bar2;\n+extern crate core;\n \n-#[lang=\"sized\"]\n-pub trait Sized {}\n+pub use foo2::Bar2;\n \n mod foo {\n     pub struct Bar; //~ ERROR: struct is never used\n@@ -32,10 +30,10 @@ mod foo2 {\n \n pub static pub_static: int = 0;\n static priv_static: int = 0; //~ ERROR: static item is never used\n-static used_static: int = 0;\n+const used_static: int = 0;\n pub static used_static2: int = used_static;\n-static USED_STATIC: int = 0;\n-static STATIC_USED_IN_ENUM_DISCRIMINANT: int = 10;\n+const USED_STATIC: int = 0;\n+const STATIC_USED_IN_ENUM_DISCRIMINANT: int = 10;\n \n pub type typ = *const UsedStruct4;\n pub struct PubStruct;\n@@ -107,7 +105,3 @@ fn bar() { //~ ERROR: function is never used\n #[allow(dead_code)]\n fn g() { h(); }\n fn h() {}\n-\n-// Similarly, lang items are live\n-#[lang=\"fail\"]\n-fn fail(_: *const u8, _: *const u8, _: uint) -> ! { loop {} }"}, {"sha": "cedc0098c00f54c5d0c2ad3667375d428eadd28d", "filename": "src/test/compile-fail/match-arm-statics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-arm-statics.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -17,7 +17,7 @@ enum Direction {\n     West\n }\n \n-static TRUE_TRUE: (bool, bool) = (true, true);\n+const TRUE_TRUE: (bool, bool) = (true, true);\n \n fn nonexhaustive_1() {\n     match (true, false) {\n@@ -39,8 +39,8 @@ fn unreachable_1() {\n     }\n }\n \n-static NONE: Option<Direction> = None;\n-static EAST: Direction = East;\n+const NONE: Option<Direction> = None;\n+const EAST: Direction = East;\n \n fn nonexhaustive_2() {\n     match Some(Some(North)) {\n@@ -66,13 +66,13 @@ fn unreachable_2() {\n     }\n }\n \n-static NEW_FALSE: NewBool = NewBool(false);\n+const NEW_FALSE: NewBool = NewBool(false);\n struct Foo {\n     bar: Option<Direction>,\n     baz: NewBool\n }\n \n-static STATIC_FOO: Foo = Foo { bar: None, baz: NEW_FALSE };\n+const STATIC_FOO: Foo = Foo { bar: None, baz: NEW_FALSE };\n \n fn nonexhaustive_3() {\n     match (Foo { bar: Some(North), baz: NewBool(true) }) {"}, {"sha": "af7938948a70f10c0e83198b3a27893131dacb04", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -14,7 +14,7 @@\n #![deny(non_uppercase_statics)]\n \n #[allow(non_uppercase_statics)]\n-pub static a : int = 97;\n+pub const a : int = 97;\n \n fn f() {\n     let r = match (0,0) {\n@@ -27,7 +27,7 @@ fn f() {\n \n mod m {\n     #[allow(non_uppercase_statics)]\n-    pub static aha : int = 7;\n+    pub const aha : int = 7;\n }\n \n fn g() {\n@@ -41,7 +41,7 @@ fn g() {\n }\n \n mod n {\n-    pub static OKAY : int = 8;\n+    pub const OKAY : int = 8;\n }\n \n fn h() {"}, {"sha": "84c72de5548a2eb95eda28e8df3e2237a6b3ae11", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,6 +10,7 @@\n \n \n static mut a: Box<int> = box 3;\n-//~^ ERROR mutable static items are not allowed to have owned pointers\n+//~^ ERROR statics are not allowed to have custom pointers\n+//~^^ ERROR mutable statics are not allowed to have owned pointers\n \n fn main() {}"}, {"sha": "b3ffcb0b9896728ba1179959ea08bc568b5c03a0", "filename": "src/test/compile-fail/static-mut-not-pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     // instead of spitting out a custom error about some identifier collisions\n     // (we should allow shadowing)\n     match 4i {\n-        a => {} //~ ERROR mutable static variables cannot be referenced in a pattern\n+        a => {} //~ ERROR static variables cannot be referenced in a pattern\n         _ => {}\n     }\n }\n@@ -32,7 +32,7 @@ enum Direction {\n     South,\n     West\n }\n-static NEW_FALSE: NewBool = NewBool(false);\n+const NEW_FALSE: NewBool = NewBool(false);\n struct Foo {\n     bar: Option<Direction>,\n     baz: NewBool\n@@ -44,7 +44,7 @@ fn mutable_statics() {\n     match (Foo { bar: Some(North), baz: NewBool(true) }) {\n         Foo { bar: None, baz: NewBool(true) } => (),\n         STATIC_MUT_FOO => (),\n-        //~^ ERROR mutable static variables cannot be referenced in a pattern\n+        //~^ ERROR static variables cannot be referenced in a pattern\n         Foo { bar: Some(South), .. } => (),\n         Foo { bar: Some(EAST), .. } => (),\n         Foo { bar: Some(North), baz: NewBool(true) } => (),"}, {"sha": "c0122b8a2a97ac8735462d26b3b1b8b801124fe9", "filename": "src/test/compile-fail/std-uncopyable-atomics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -16,11 +16,11 @@ use std::sync::atomic::*;\n use std::ptr;\n \n fn main() {\n-    let x = INIT_ATOMIC_BOOL; //~ ERROR cannot move out of static item\n+    let x = INIT_ATOMIC_BOOL;\n     let x = *&x; //~ ERROR: cannot move out of dereference\n-    let x = INIT_ATOMIC_INT; //~ ERROR cannot move out of static item\n+    let x = INIT_ATOMIC_INT;\n     let x = *&x; //~ ERROR: cannot move out of dereference\n-    let x = INIT_ATOMIC_UINT; //~ ERROR cannot move out of static item\n+    let x = INIT_ATOMIC_UINT;\n     let x = *&x; //~ ERROR: cannot move out of dereference\n     let x: AtomicPtr<uint> = AtomicPtr::new(ptr::null_mut());\n     let x = *&x; //~ ERROR: cannot move out of dereference"}, {"sha": "c5229f0f9f971a84e5811185998a261f5de76a92", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -25,7 +25,7 @@\n pub fn foo(_: [int, ..(3 as uint)]) { }\n \n pub fn bar() {\n-    static FOO: uint = ((5u as uint) - (4u as uint) as uint);\n+    const FOO: uint = ((5u as uint) - (4u as uint) as uint);\n     let _: [(), ..(FOO as uint)] = ([(() as ())] as [(), ..1]);\n \n     let _: [(), ..(1u as uint)] = ([(() as ())] as [(), ..1]);"}, {"sha": "ad0954e6eabc3f777ddca657b98f3031a76d63b4", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -17,7 +17,7 @@\n pub fn foo(_: [int, ..3]) {}\n \n pub fn bar() {\n-    static FOO: uint = 5u - 4u;\n+    const FOO: uint = 5u - 4u;\n     let _: [(), ..FOO] = [()];\n \n     let _ : [(), ..1u] = [()];"}, {"sha": "65db841b0c0edb5bbbddd57af531fa12f11772b6", "filename": "src/test/run-make/sepcomp-cci-copies/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2FMakefile?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -7,4 +7,3 @@ all:\n \t$(RUSTC) cci_lib.rs\n \t$(RUSTC) foo.rs --emit=ir -C codegen-units=3\n \t[ \"$$(cat \"$(TMPDIR)\"/foo.?.ll | grep -c define\\ .*cci_fn)\" -eq \"2\" ]\n-\t[ \"$$(cat \"$(TMPDIR)\"/foo.?.ll | grep -c CCI_STATIC.*=.*constant)\" -eq \"2\" ]"}, {"sha": "a7cd85db4a2d116cec2883a41b954428bf50e5fd", "filename": "src/test/run-make/sepcomp-cci-copies/cci_lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2Fcci_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2Fcci_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2Fcci_lib.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -14,6 +14,3 @@\n pub fn cci_fn() -> uint {\n     1234\n }\n-\n-#[inline]\n-pub static CCI_STATIC: uint = 2345;"}, {"sha": "b0642b64cdaac8983e7287d3f9b6ecd465d5d495", "filename": "src/test/run-make/sepcomp-cci-copies/foo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-cci-copies%2Ffoo.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n extern crate cci_lib;\n-use cci_lib::{cci_fn, CCI_STATIC};\n+use cci_lib::{cci_fn};\n \n fn call1() -> uint {\n-    cci_fn() + CCI_STATIC\n+    cci_fn()\n }\n \n mod a {\n@@ -23,9 +23,8 @@ mod a {\n }\n \n mod b {\n-    use cci_lib::CCI_STATIC;\n     pub fn call3() -> uint {\n-        CCI_STATIC\n+        0\n     }\n }\n "}, {"sha": "2ce8c40c77183e847e9d32002c76f093afba0e25", "filename": "src/test/run-pass/bytes-macro-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fbytes-macro-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fbytes-macro-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbytes-macro-static.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -11,7 +11,7 @@\n static FOO: &'static [u8] = bytes!(\"hello, world\");\n \n pub fn main() {\n-    let b = match true {\n+    let b: &'static [u8] = match true {\n         true => bytes!(\"test\"),\n         false => unreachable!()\n     };"}, {"sha": "aaffb013ad8c75c93307d28e22fe34c4e0d1aaf2", "filename": "src/test/run-pass/cast-in-array-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-in-array-size.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,7 +10,7 @@\n \n \n // issues #10618 and #16382\n-static SIZE: int = 25;\n+const SIZE: int = 25;\n \n fn main() {\n     let _a: [bool, ..1 as uint];"}, {"sha": "60daedec4c79fe5199ad7b2237a2e958936d82b3", "filename": "src/test/run-pass/check-static-slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -11,12 +11,12 @@\n // Check that the various ways of getting to a reference to a vec (both sized\n // and unsized) work properly.\n \n-static aa: [int, ..3] = [1, 2, 3];\n-static ab: &'static [int, ..3] = &aa;\n-static ac: &'static [int] = ab;\n-static ad: &'static [int] = &aa;\n-static ae: &'static [int, ..3] = &[1, 2, 3];\n-static af: &'static [int] = &[1, 2, 3];\n+const aa: [int, ..3] = [1, 2, 3];\n+const ab: &'static [int, ..3] = &aa;\n+const ac: &'static [int] = ab;\n+const ad: &'static [int] = &aa;\n+const ae: &'static [int, ..3] = &[1, 2, 3];\n+const af: &'static [int] = &[1, 2, 3];\n \n static ca: int = aa[0];\n static cb: int = ab[1];"}, {"sha": "5d8e31f93441109e13d4e12f36bbe88c5714735b", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -12,9 +12,9 @@ extern crate libc;\n \n extern fn foo() {}\n \n-static x: extern \"C\" fn() = foo;\n+const x: extern \"C\" fn() = foo;\n static y: *const libc::c_void = x as *const libc::c_void;\n-static a: &'static int = &10;\n+const a: &'static int = &10;\n static b: *const int = a as *const int;\n \n pub fn main() {"}, {"sha": "ba2947f73679028fc9eac4af5cfb3b0d27491df7", "filename": "src/test/run-pass/const-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-const.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static a: int = 1;\n-static b: int = a + 2;\n+const a: int = 1;\n+const b: int = a + 2;\n \n pub fn main() {\n     assert_eq!(b, 3);"}, {"sha": "480fb50a1ffe5170d19f29e5e724f90c82c68c78", "filename": "src/test/run-pass/const-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-deref.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static C: &'static int = &1000;\n+const C: &'static int = &1000;\n static D: int = *C;\n \n pub fn main() {"}, {"sha": "2a00daa3c038c53ce173f07c5fbaf681f9e524b9", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n enum E { V1(int), V0 }\n-static C: &'static [E] = &[V0, V1(0xDEADBEE)];\n+const C: &'static [E] = &[V0, V1(0xDEADBEE)];\n static C0: E = C[0];\n static C1: E = C[1];\n-static D: &'static [E, ..2] = &[V0, V1(0xDEADBEE)];\n+const D: &'static [E, ..2] = &[V0, V1(0xDEADBEE)];\n static D0: E = C[0];\n static D1: E = C[1];\n "}, {"sha": "317a54e927f31fb40ebbabc75f7f9a0fad49f240", "filename": "src/test/run-pass/const-expr-in-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -13,7 +13,7 @@\n \n pub fn main() {\n \n-    static FOO: uint = 2;\n+    const FOO: uint = 2;\n     let _v: [int, ..FOO*3];\n \n }"}, {"sha": "54386b33dd9dad8b9c89f622da1ef8eac0a2a2f5", "filename": "src/test/run-pass/const-expr-in-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n \n-    static FOO: uint = 2;\n+    const FOO: uint = 2;\n     let _v = [0i, ..FOO*3*2/2];\n \n }"}, {"sha": "fc098ff93574b3d62192a35153a166c824c1f414", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,20 +10,20 @@\n \n extern crate debug;\n \n-static x : [int, ..4] = [1,2,3,4];\n+const x : [int, ..4] = [1,2,3,4];\n static p : int = x[2];\n-static y : &'static [int] = &[1,2,3,4];\n+const y : &'static [int] = &[1,2,3,4];\n static q : int = y[2];\n \n struct S {a: int, b: int}\n \n-static s : S = S {a: 10, b: 20};\n+const s : S = S {a: 10, b: 20};\n static t : int = s.b;\n \n struct K {a: int, b: int, c: D}\n struct D { d: int, e: int }\n \n-static k : K = K {a: 10, b: 20, c: D {d: 30, e: 40}};\n+const k : K = K {a: 10, b: 20, c: D {d: 30, e: 40}};\n static m : int = k.c.e;\n \n pub fn main() {"}, {"sha": "5e417efb4b5838ef2f1ca0ab37ae82e936dc3226", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,8 +10,8 @@\n \n type Big = [u64, ..8];\n struct Pair<'a> { a: int, b: &'a Big }\n-static x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);\n-static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n+const x: &'static Big = &([13, 14, 10, 13, 11, 14, 14, 15]);\n+const y: &'static Pair<'static> = &Pair {a: 15, b: x};\n \n pub fn main() {\n     assert_eq!(x as *const Big, y.b as *const Big);"}, {"sha": "e5d3f0ece0cf5b94a254c8c88363a63ebe345a2f", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,9 +10,9 @@\n \n struct Pair<'a> { a: int, b: &'a int }\n \n-static x: &'static int = &10;\n+const x: &'static int = &10;\n \n-static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n+const y: &'static Pair<'static> = &Pair {a: 15, b: x};\n \n pub fn main() {\n     println!(\"x = {}\", *x);"}, {"sha": "7395a997a05c5e27646cb4fc23fd8fab0ce8290a", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,9 +10,9 @@\n \n use std::{str, string};\n \n-static A: [u8, ..2] = ['h' as u8, 'i' as u8];\n-static B: &'static [u8, ..2] = &A;\n-static C: *const u8 = B as *const u8;\n+const A: [u8, ..2] = ['h' as u8, 'i' as u8];\n+const B: &'static [u8, ..2] = &A;\n+const C: *const u8 = B as *const u8;\n \n pub fn main() {\n     unsafe {"}, {"sha": "f2db119156960d4ba3b663f07c8f71143fed0ac0", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -22,10 +22,10 @@ impl cmp::PartialEq for foo {\n     fn ne(&self, other: &foo) -> bool { !(*self).eq(other) }\n }\n \n-static x : foo = foo { a:1, b:2, c: 3 };\n-static y : foo = foo { b:2, c:3, a: 1 };\n-static z : &'static foo = &foo { a: 10, b: 22, c: 12 };\n-static w : foo = foo { a:5, ..x };\n+const x : foo = foo { a:1, b:2, c: 3 };\n+const y : foo = foo { b:2, c:3, a: 1 };\n+const z : &'static foo = &foo { a: 10, b: 22, c: 12 };\n+const w : foo = foo { a:5, ..x };\n \n pub fn main() {\n     assert_eq!(x.b, 2);"}, {"sha": "87b7fcad38522462531b21c8058bd05d6bad57d7", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static FOO: int = 10;\n-static BAR: int = 3;\n+const FOO: int = 10;\n+const BAR: int = 3;\n \n pub fn main() {\n     let x: int = 3i;"}, {"sha": "d51562d2490deeb914993944101cbef65a61c206", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -12,13 +12,13 @@ enum Flopsy {\n     Bunny = 2\n }\n \n-static BAR:uint = Bunny as uint;\n-static BAR2:uint = BAR;\n+const BAR:uint = Bunny as uint;\n+const BAR2:uint = BAR;\n \n pub fn main() {\n     let _v = [0i, .. Bunny as uint];\n     let _v = [0i, .. BAR];\n     let _v = [0i, .. BAR2];\n-    static BAR3:uint = BAR2;\n+    const BAR3:uint = BAR2;\n     let _v = [0i, .. BAR3];\n }"}, {"sha": "1540679b099b43b45f8fcaeb302ceefb1385fc2d", "filename": "src/test/run-pass/issue-11940.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-11940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-11940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11940.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static TEST_STR: &'static str = \"abcd\";\n+const TEST_STR: &'static str = \"abcd\";\n \n fn main() {\n     let s = \"abcd\";"}, {"sha": "8b2b732415ee0b9f6e2d9c7b09eec2f39da1ea3f", "filename": "src/test/run-pass/issue-13763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13763.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,7 +10,7 @@\n \n use std::u8;\n \n-static NUM: uint = u8::BITS as uint;\n+const NUM: uint = u8::BITS as uint;\n \n struct MyStruct { nums: [uint, ..8] }\n "}, {"sha": "d35c3a587c5a5efde128d301bc1ebc035dda7555", "filename": "src/test/run-pass/issue-17074.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17074.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static X: u64 = -1 as u16 as u64;\n-static Y: u64 = -1 as u32 as u64;\n+static X2: u64 = -1 as u16 as u64;\n+static Y2: u64 = -1 as u32 as u64;\n+const X: u64 = -1 as u16 as u64;\n+const Y: u64 = -1 as u32 as u64;\n \n fn main() {\n     assert_eq!(match 1 {"}, {"sha": "8f76d95c54815bb622aa6555179df32f7aef7b1f", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "renamed", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verify that it is not possible to take the address of\n-// static items with unsafe interior.\n-\n use std::kinds::marker;\n use std::cell::UnsafeCell;\n \n@@ -30,25 +27,22 @@ enum UnsafeEnum<T> {\n static STATIC1: UnsafeEnum<int> = VariantSafe;\n \n static STATIC2: UnsafeCell<int> = UnsafeCell { value: 1 };\n-static STATIC3: MyUnsafe<int> = MyUnsafe{value: STATIC2};\n+const CONST: UnsafeCell<int> = UnsafeCell { value: 1 };\n+static STATIC3: MyUnsafe<int> = MyUnsafe{value: CONST};\n \n static STATIC4: &'static UnsafeCell<int> = &STATIC2;\n-//~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n \n struct Wrap<T> {\n     value: T\n }\n \n static UNSAFE: UnsafeCell<int> = UnsafeCell{value: 1};\n static WRAPPED_UNSAFE: Wrap<&'static UnsafeCell<int>> = Wrap { value: &UNSAFE };\n-//~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n \n fn main() {\n     let a = &STATIC1;\n-    //~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n \n     STATIC3.forbidden()\n-    //~^ ERROR borrow of immutable static items with unsafe interior is not allowed\n }\n \n ", "previous_filename": "src/test/compile-fail/borrowck-forbid-static-unsafe-interior.rs"}, {"sha": "90a102222ba172c31662dc976feaa36f55aee2bb", "filename": "src/test/run-pass/issue-17718.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-17718.rs\n+\n+extern crate \"issue-17718\" as other;\n+\n+use std::sync::atomic;\n+\n+const C1: uint = 1;\n+const C2: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n+const C3: fn() = foo;\n+const C4: uint = C1 * C1 + C1 / C1;\n+const C5: &'static uint = &C4;\n+const C6: uint = {\n+    const C: uint = 3;\n+    C\n+};\n+\n+static S1: uint = 3;\n+static S2: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n+\n+mod test {\n+    static A: uint = 4;\n+    static B: &'static uint = &A;\n+    static C: &'static uint = &(A);\n+}\n+\n+fn foo() {}\n+\n+fn main() {\n+    assert_eq!(C1, 1);\n+    assert_eq!(C3(), ());\n+    assert_eq!(C2.fetch_add(1, atomic::SeqCst), 0);\n+    assert_eq!(C2.fetch_add(1, atomic::SeqCst), 0);\n+    assert_eq!(C4, 2);\n+    assert_eq!(*C5, 2);\n+    assert_eq!(C6, 3);\n+    assert_eq!(S1, 3);\n+    assert_eq!(S2.fetch_add(1, atomic::SeqCst), 0);\n+    assert_eq!(S2.fetch_add(1, atomic::SeqCst), 1);\n+\n+    match 1 {\n+        C1 => {}\n+        _ => unreachable!(),\n+    }\n+\n+    let _a = C1;\n+    let _a = C2;\n+    let _a = C3;\n+    let _a = C4;\n+    let _a = C5;\n+    let _a = C6;\n+    let _a = S1;\n+\n+    assert_eq!(other::C1, 1);\n+    assert_eq!(other::C3(), ());\n+    assert_eq!(other::C2.fetch_add(1, atomic::SeqCst), 0);\n+    assert_eq!(other::C2.fetch_add(1, atomic::SeqCst), 0);\n+    assert_eq!(other::C4, 2);\n+    assert_eq!(*other::C5, 2);\n+    assert_eq!(other::S1, 3);\n+    assert_eq!(other::S2.fetch_add(1, atomic::SeqCst), 0);\n+    assert_eq!(other::S2.fetch_add(1, atomic::SeqCst), 1);\n+\n+    let _a = other::C1;\n+    let _a = other::C2;\n+    let _a = other::C3;\n+    let _a = other::C4;\n+    let _a = other::C5;\n+\n+    match 1 {\n+        other::C1 => {}\n+        _ => unreachable!(),\n+    }\n+}"}, {"sha": "b2ebbf3b148cf79bfef11621af50039104824e12", "filename": "src/test/run-pass/issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2428.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let _foo = 100i;\n-    static quux: int = 5;\n+    const quux: int = 5;\n \n     enum Stuff {\n         Bar = quux"}, {"sha": "1f6493d961c5a847fd4578326f671b7ba7b8f615", "filename": "src/test/run-pass/issue-5353.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-5353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-5353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5353.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static INVALID_ENUM : u32 = 0;\n-static INVALID_VALUE : u32 = 1;\n+const INVALID_ENUM : u32 = 0;\n+const INVALID_VALUE : u32 = 1;\n \n fn gl_err_str(err: u32) -> String\n {"}, {"sha": "65ea895c2c85fb88cc22d3b6bb60fc3f401cf267", "filename": "src/test/run-pass/issue-7222.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-7222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-7222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7222.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    static FOO: f64 = 10.0;\n+    const FOO: f64 = 10.0;\n \n     match 0.0 {\n         0.0 ... FOO => (),"}, {"sha": "b9410ffdb43ec7f63724a71307b7d6a4814ed47c", "filename": "src/test/run-pass/issue-9942.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fissue-9942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9942.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    static S: uint = 23 as uint; [0i, ..S]; ()\n+    const S: uint = 23 as uint; [0i, ..S]; ()\n }"}, {"sha": "29972c0efd0dba0e1005683cc54e50625221445d", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -29,19 +29,19 @@ enum EnumWithStructVariants {\n     }\n }\n \n-static TRUE_TRUE: (bool, bool) = (true, true);\n-static NONE: Option<Direction> = None;\n-static EAST: Direction = East;\n-static NEW_FALSE: NewBool = NewBool(false);\n-static STATIC_FOO: Foo = Foo { bar: Some(South), baz: NEW_FALSE };\n-static VARIANT2_NORTH: EnumWithStructVariants = Variant2 { dir: North };\n+const TRUE_TRUE: (bool, bool) = (true, true);\n+const NONE: Option<Direction> = None;\n+const EAST: Direction = East;\n+const NEW_FALSE: NewBool = NewBool(false);\n+const STATIC_FOO: Foo = Foo { bar: Some(South), baz: NEW_FALSE };\n+const VARIANT2_NORTH: EnumWithStructVariants = Variant2 { dir: North };\n \n pub mod glfw {\n     pub struct InputState(uint);\n \n-    pub static RELEASE  : InputState = InputState(0);\n-    pub static PRESS    : InputState = InputState(1);\n-    pub static REPEAT   : InputState = InputState(2);\n+    pub const RELEASE  : InputState = InputState(0);\n+    pub const PRESS    : InputState = InputState(1);\n+    pub const REPEAT   : InputState = InputState(2);\n }\n \n fn issue_6533() {\n@@ -63,7 +63,7 @@ fn issue_6533() {\n }\n \n fn issue_13626() {\n-    static VAL: [u8, ..1] = [0];\n+    const VAL: [u8, ..1] = [0];\n     match [1] {\n         VAL => unreachable!(),\n         _ => ()\n@@ -72,8 +72,8 @@ fn issue_13626() {\n \n fn issue_14576() {\n     type Foo = (i32, i32);\n-    static ON: Foo = (1, 1);\n-    static OFF: Foo = (0, 0);\n+    const ON: Foo = (1, 1);\n+    const OFF: Foo = (0, 0);\n \n     match (1, 1) {\n         OFF => unreachable!(),\n@@ -82,14 +82,14 @@ fn issue_14576() {\n     }\n \n     enum C { D = 3, E = 4 }\n-    static F : C = D;\n+    const F : C = D;\n \n     assert_eq!(match D { F => 1i, _ => 2, }, 1);\n }\n \n fn issue_13731() {\n     enum A { AA(()) }\n-    static B: A = AA(());\n+    const B: A = AA(());\n \n     match AA(()) {\n         B => ()\n@@ -102,8 +102,8 @@ fn issue_15393() {\n         bits: uint\n     }\n \n-    static FOO: Flags = Flags { bits: 0x01 };\n-    static BAR: Flags = Flags { bits: 0x02 };\n+    const FOO: Flags = Flags { bits: 0x01 };\n+    const BAR: Flags = Flags { bits: 0x02 };\n     match (Flags { bits: 0x02 }) {\n         FOO => unreachable!(),\n         BAR => (),"}, {"sha": "0feeea70221a4aa3dd445f99bd745752cf2fcbd6", "filename": "src/test/run-pass/match-range-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static s: int = 1;\n-static e: int = 42;\n+const s: int = 1;\n+const e: int = 42;\n \n pub fn main() {\n     match 7 {"}, {"sha": "f3fe93650af5ef98ffb944e115ab2fd6937b292a", "filename": "src/test/run-pass/match-static-const-rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-static-const-rename.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -18,7 +18,7 @@\n \n #![deny(non_uppercase_statics)]\n \n-pub static A : int = 97;\n+pub const A : int = 97;\n \n fn f() {\n     let r = match (0,0) {\n@@ -35,7 +35,7 @@ fn f() {\n \n mod m {\n     #[allow(non_uppercase_statics)]\n-    pub static aha : int = 7;\n+    pub const aha : int = 7;\n }\n \n fn g() {"}, {"sha": "8aa12aa3e98ad9973e983ed71b6617f842335351", "filename": "src/test/run-pass/resolve-issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static foo: int = 4 >> 1;\n+const foo: int = 4 >> 1;\n enum bs { thing = foo }\n pub fn main() { assert!((thing as int == foo)); }"}, {"sha": "26a5c4d1c5026cb6b9dd4d0c8e634dfb813be9e8", "filename": "src/test/run-pass/sepcomp-statics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fsepcomp-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fsepcomp-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsepcomp-statics.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -14,7 +14,7 @@\n \n fn pad() -> uint { 0 }\n \n-static ONE: uint = 1;\n+const ONE: uint = 1;\n \n mod b {\n     // Separate compilation always switches to the LLVM module with the fewest\n@@ -28,7 +28,7 @@ mod b {\n mod a {\n     fn pad() -> uint { 0 }\n \n-    pub static TWO: uint = ::ONE + ::ONE;\n+    pub const TWO: uint = ::ONE + ::ONE;\n }\n \n fn main() {"}, {"sha": "1f92677fb6f895e61de0f9478b82a1d78397f613", "filename": "src/test/run-pass/syntax-extension-bytes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -11,15 +11,15 @@\n static static_vec: &'static [u8] = bytes!(\"abc\", 0xFF, '!');\n \n pub fn main() {\n-    let vec = bytes!(\"abc\");\n+    let vec: &'static [u8] = bytes!(\"abc\");\n     let expected: &[u8] = &[97_u8, 98_u8, 99_u8];\n     assert_eq!(vec, expected);\n \n-    let vec = bytes!(\"null\", 0);\n+    let vec: &'static [u8] = bytes!(\"null\", 0);\n     let expected: &[u8] = &[110_u8, 117_u8, 108_u8, 108_u8, 0_u8];\n     assert_eq!(vec, expected);\n \n-    let vec = bytes!(' ', \" \", 32, 32u8);\n+    let vec: &'static [u8] = bytes!(' ', \" \", 32, 32u8);\n     let expected: &[u8] = &[32_u8, 32_u8, 32_u8, 32_u8];\n     assert_eq!(vec, expected);\n "}, {"sha": "a8ab0e48ccf8a2776c4e9ec324145cf19e748478", "filename": "src/test/run-pass/vector-sort-failure-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -11,7 +11,7 @@\n use std::task;\n use std::rand::{task_rng, Rng};\n \n-static MAX_LEN: uint = 20;\n+const MAX_LEN: uint = 20;\n static mut drop_counts: [uint, .. MAX_LEN] = [0, .. MAX_LEN];\n static mut clone_count: uint = 0;\n "}, {"sha": "7eb73968db5ef9e96e8302b3b4208433789d981d", "filename": "src/test/run-pass/xcrate-unit-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fxcrate-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03a4b0046a27968fc4eeaf1847776b90a48264b/src%2Ftest%2Frun-pass%2Fxcrate-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-unit-struct.rs?ref=d03a4b0046a27968fc4eeaf1847776b90a48264b", "patch": "@@ -11,7 +11,7 @@\n // aux-build:xcrate_unit_struct.rs\n extern crate xcrate_unit_struct;\n \n-static s1: xcrate_unit_struct::Struct = xcrate_unit_struct::Struct;\n+const s1: xcrate_unit_struct::Struct = xcrate_unit_struct::Struct;\n static s2: xcrate_unit_struct::Unit = xcrate_unit_struct::UnitVariant;\n static s3: xcrate_unit_struct::Unit =\n                 xcrate_unit_struct::Argument(xcrate_unit_struct::Struct);"}]}