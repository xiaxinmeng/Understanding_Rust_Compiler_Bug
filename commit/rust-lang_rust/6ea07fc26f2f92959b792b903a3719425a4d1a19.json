{"sha": "6ea07fc26f2f92959b792b903a3719425a4d1a19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTA3ZmMyNmYyZjkyOTU5Yjc5MmI5MDNhMzcxOTQyNWE0ZDFhMTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-07T20:16:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-07T20:16:58Z"}, "message": "Merge #9809\n\n9809: internal: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "43f69b367c20b403e078b27ec984465811373ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f69b367c20b403e078b27ec984465811373ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea07fc26f2f92959b792b903a3719425a4d1a19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhDuo6CRBK7hj4Ov3rIwAAIu8IAAe8Rm8RX2VQHn+5vPXSsOkK\nrKsX3FYcjb0RPiT3cVgHsOQ9g2pEh8Wr12X4547bd7s816CaQWKfmSbsZBP84mNI\ns0dFuz+0R/ELXqTtz20rxTo9Z+ooZkq31hA/VFieWyLGRjlQxw601qTgp0KB6pOm\nUpfeoEASJ22Z0an9G1jtbbFcj4IveO8vEeX/nvjaX9myMVuho7VX2xxK6Alp2hvE\nQSSIHwmteAdazew10dSakxG3m4jyKS+y+j4WwUGt5Wlr3aty4+k/87ttKAQluHUU\n6ai7FUDbp9JmvwvFVlepM7gV9zMEd4WX1M3PCgZc6IUdeCzU3kdGjUgvV7oKb8k=\n=cz5h\n-----END PGP SIGNATURE-----\n", "payload": "tree 43f69b367c20b403e078b27ec984465811373ebe\nparent c5bde08f6e71bdd74c1222ddad8926f3487b28ba\nparent c4a119f43323c57cfea8f5bfebfd5946e9e296ae\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628367418 +0000\ncommitter GitHub <noreply@github.com> 1628367418 +0000\n\nMerge #9809\n\n9809: internal: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea07fc26f2f92959b792b903a3719425a4d1a19", "html_url": "https://github.com/rust-lang/rust/commit/6ea07fc26f2f92959b792b903a3719425a4d1a19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea07fc26f2f92959b792b903a3719425a4d1a19/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5bde08f6e71bdd74c1222ddad8926f3487b28ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bde08f6e71bdd74c1222ddad8926f3487b28ba", "html_url": "https://github.com/rust-lang/rust/commit/c5bde08f6e71bdd74c1222ddad8926f3487b28ba"}, {"sha": "c4a119f43323c57cfea8f5bfebfd5946e9e296ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a119f43323c57cfea8f5bfebfd5946e9e296ae", "html_url": "https://github.com/rust-lang/rust/commit/c4a119f43323c57cfea8f5bfebfd5946e9e296ae"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "44d02e4321f5104da7b56b7c4989a28c5b523257", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 body.extracted_function_params(ctx, &container_info, locals_used.iter().copied());\n \n             let fun = Function {\n-                name: \"fun_name\".to_string(),\n+                name: make::name_ref(\"fun_name\"),\n                 self_param,\n                 params,\n                 control_flow,\n@@ -170,7 +170,7 @@ fn extraction_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Fu\n \n #[derive(Debug)]\n struct Function {\n-    name: String,\n+    name: ast::NameRef,\n     self_param: Option<ast::SelfParam>,\n     params: Vec<Param>,\n     control_flow: ControlFlow,\n@@ -1077,11 +1077,12 @@ fn make_call(ctx: &AssistContext, fun: &Function, indent: IndentLevel) -> String\n \n     let args = fun.params.iter().map(|param| param.to_arg(ctx));\n     let args = make::arg_list(args);\n+    let name = fun.name.clone();\n     let call_expr = if fun.self_param.is_some() {\n         let self_arg = make::expr_path(make::ext::ident_path(\"self\"));\n-        make::expr_method_call(self_arg, &fun.name, args)\n+        make::expr_method_call(self_arg, name, args)\n     } else {\n-        let func = make::expr_path(make::ext::ident_path(&fun.name));\n+        let func = make::expr_path(make::path_unqualified(make::path_segment(name)));\n         make::expr_call(func, args)\n     };\n "}, {"sha": "f7f38dffbda2b2d9cb131bc2b03a65c18db9845c", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     }\n \n     // This assist should not apply for if-let.\n-    if expr.condition()?.pat().is_some() {\n+    if expr.condition()?.is_pattern_cond() {\n         return None;\n     }\n "}, {"sha": "e38e9e4524dfc172794cf2fd1e44c60c97f5ece5", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -115,7 +115,7 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n         return None;\n     }\n     // Not support moving if let to arm guard\n-    if cond.pat().is_some() {\n+    if cond.is_pattern_cond() {\n         return None;\n     }\n "}, {"sha": "35a997efc9363fea902f6796087659e90fb02c24", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -248,7 +248,7 @@ fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Opti\n                 \"is_err\" => \"is_ok\",\n                 _ => return None,\n             };\n-            Some(make::expr_method_call(receiver, method, arg_list))\n+            Some(make::expr_method_call(receiver, make::name_ref(method), arg_list))\n         }\n         ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => {\n             if let ast::Expr::ParenExpr(parexpr) = pe.expr()? {"}, {"sha": "06c1f2cf820c5ba77bdadca9e1d4c88f4afbc39d", "filename": "crates/ide_diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -38,7 +38,7 @@ fn fixes(ctx: &DiagnosticsContext, file_id: FileId) -> Option<Vec<Assist>> {\n \n     let source_root = ctx.sema.db.source_root(ctx.sema.db.file_source_root(file_id));\n     let our_path = source_root.path_for_file(&file_id)?;\n-    let module_name = our_path.name_and_extension()?.0;\n+    let (module_name, _) = our_path.name_and_extension()?;\n \n     // Candidates to look for:\n     // - `mod.rs` in the same folder\n@@ -48,26 +48,23 @@ fn fixes(ctx: &DiagnosticsContext, file_id: FileId) -> Option<Vec<Assist>> {\n     let mut paths = vec![parent.join(\"mod.rs\")?, parent.join(\"lib.rs\")?, parent.join(\"main.rs\")?];\n \n     // `submod/bla.rs` -> `submod.rs`\n-    if let Some(newmod) = (|| {\n-        let name = parent.name_and_extension()?.0;\n+    let parent_mod = (|| {\n+        let (name, _) = parent.name_and_extension()?;\n         parent.parent()?.join(&format!(\"{}.rs\", name))\n-    })() {\n-        paths.push(newmod);\n-    }\n+    })();\n+    paths.extend(parent_mod);\n+\n+    for &parent_id in paths.iter().filter_map(|path| source_root.file_for_path(path)) {\n+        for &krate in ctx.sema.db.relevant_crates(parent_id).iter() {\n+            let crate_def_map = ctx.sema.db.crate_def_map(krate);\n+            for (_, module) in crate_def_map.modules() {\n+                if module.origin.is_inline() {\n+                    // We don't handle inline `mod parent {}`s, they use different paths.\n+                    continue;\n+                }\n \n-    for path in &paths {\n-        if let Some(parent_id) = source_root.file_for_path(path) {\n-            for krate in ctx.sema.db.relevant_crates(*parent_id).iter() {\n-                let crate_def_map = ctx.sema.db.crate_def_map(*krate);\n-                for (_, module) in crate_def_map.modules() {\n-                    if module.origin.is_inline() {\n-                        // We don't handle inline `mod parent {}`s, they use different paths.\n-                        continue;\n-                    }\n-\n-                    if module.origin.file_id() == Some(*parent_id) {\n-                        return make_fixes(ctx.sema.db, *parent_id, module_name, file_id);\n-                    }\n+                if module.origin.file_id() == Some(parent_id) {\n+                    return make_fixes(ctx.sema.db, parent_id, module_name, file_id);\n                 }\n             }\n         }"}, {"sha": "01ab562c7ee5936976fb22c057c7da978cc697bd", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -48,7 +48,7 @@ impl ast::Expr {\n     }\n \n     /// Preorder walk all the expression's child expressions preserving events.\n-    /// If the callback returns true the subtree of the expression will be skipped.\n+    /// If the callback returns true on an [`WalkEvent::Enter`], the subtree of the expression will be skipped.\n     /// Note that the subtree may already be skipped due to the context analysis this function does.\n     pub fn preorder(&self, cb: &mut dyn FnMut(WalkEvent<ast::Expr>) -> bool) {\n         let mut preorder = self.syntax().preorder();"}, {"sha": "e5fff983d0c2cdd8e10b60036783ee039dab4aa4", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -304,12 +304,20 @@ pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n pub fn expr_call(f: ast::Expr, arg_list: ast::ArgList) -> ast::Expr {\n     expr_from_text(&format!(\"{}{}\", f, arg_list))\n }\n-pub fn expr_method_call(receiver: ast::Expr, method: &str, arg_list: ast::ArgList) -> ast::Expr {\n+pub fn expr_method_call(\n+    receiver: ast::Expr,\n+    method: ast::NameRef,\n+    arg_list: ast::ArgList,\n+) -> ast::Expr {\n     expr_from_text(&format!(\"{}.{}{}\", receiver, method, arg_list))\n }\n pub fn expr_ref(expr: ast::Expr, exclusive: bool) -> ast::Expr {\n     expr_from_text(&if exclusive { format!(\"&mut {}\", expr) } else { format!(\"&{}\", expr) })\n }\n+pub fn expr_closure(pats: impl IntoIterator<Item = ast::Param>, expr: ast::Expr) -> ast::Expr {\n+    let params = pats.into_iter().join(\", \");\n+    expr_from_text(&format!(\"|{}| {}\", params, expr))\n+}\n pub fn expr_paren(expr: ast::Expr) -> ast::Expr {\n     expr_from_text(&format!(\"({})\", expr))\n }"}, {"sha": "68dcac4b034c3ee027e28c0293cd30bea2328481", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea07fc26f2f92959b792b903a3719425a4d1a19/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=6ea07fc26f2f92959b792b903a3719425a4d1a19", "patch": "@@ -611,6 +611,12 @@ impl ast::Item {\n     }\n }\n \n+impl ast::Condition {\n+    pub fn is_pattern_cond(&self) -> bool {\n+        self.let_token().is_some()\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum FieldKind {\n     Name(ast::NameRef),"}]}