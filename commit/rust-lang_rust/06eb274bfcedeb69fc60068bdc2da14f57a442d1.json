{"sha": "06eb274bfcedeb69fc60068bdc2da14f57a442d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZWIyNzRiZmNlZGViNjlmYzYwMDY4YmRjMmRhMTRmNTdhNDQyZDE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-11T19:28:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-11T19:28:37Z"}, "message": "Rollup merge of #75407 - oliver-giersch:set_ptr_value, r=RalfJung\n\nRequested changes to [*mut T|*const T]::set_ptr_value\n\nThis is a follow-up to PR #74774 (tracking issue #75091), acting on some change requests made after approval:\n\n- adds `#[must_use]` attribute\n- changes type of `val` pointer argument from `()` to `u8`\n- adjusts documentation mentioning pointer provenance", "tree": {"sha": "589c25fa8a5d17377f79bea25b408b5d963950d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589c25fa8a5d17377f79bea25b408b5d963950d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06eb274bfcedeb69fc60068bdc2da14f57a442d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMvFlCRBK7hj4Ov3rIwAAdHIIAC12ddwCyWw2qtujsISP8+P8\njKgOZGFj3rRm2pXTYq/WMKDe6xJWZhXSGwjzXXZuUSfvpG0gWixmyr6nQvt6xjU1\nQ7+hoCfqfbhhGC39M3Zv+9AKFeXCBV4STCCZmXwT9lxmZptQIJKjCu+UUaPY4oDm\nHOwLxdNth5GA8+junFwkXv7G5aNoL9N+Ap+5liPYMWinns3XHq0akyoaB1H6FxEE\nLuFwjOwYdyNmGT4lqO5av/YDKVLC0H7F7xmYXdzZx/k3EvWCxXLqMASRCrKmvJy2\njCZpUCanFw+RZIuesW+z7Y8XQJpvc2GCCwJAzkfB4CKFno9cwLKcUm+sk2+whng=\n=sGVg\n-----END PGP SIGNATURE-----\n", "payload": "tree 589c25fa8a5d17377f79bea25b408b5d963950d2\nparent d38997e4d91b5c9d730e3c00ab00df93bc1412c8\nparent 19c9674966273750c757eaae2b8d7b2246dcbe3f\nauthor Tyler Mandry <tmandry@gmail.com> 1597174117 -0700\ncommitter GitHub <noreply@github.com> 1597174117 -0700\n\nRollup merge of #75407 - oliver-giersch:set_ptr_value, r=RalfJung\n\nRequested changes to [*mut T|*const T]::set_ptr_value\n\nThis is a follow-up to PR #74774 (tracking issue #75091), acting on some change requests made after approval:\n\n- adds `#[must_use]` attribute\n- changes type of `val` pointer argument from `()` to `u8`\n- adjusts documentation mentioning pointer provenance\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06eb274bfcedeb69fc60068bdc2da14f57a442d1", "html_url": "https://github.com/rust-lang/rust/commit/06eb274bfcedeb69fc60068bdc2da14f57a442d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06eb274bfcedeb69fc60068bdc2da14f57a442d1/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38997e4d91b5c9d730e3c00ab00df93bc1412c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38997e4d91b5c9d730e3c00ab00df93bc1412c8", "html_url": "https://github.com/rust-lang/rust/commit/d38997e4d91b5c9d730e3c00ab00df93bc1412c8"}, {"sha": "19c9674966273750c757eaae2b8d7b2246dcbe3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c9674966273750c757eaae2b8d7b2246dcbe3f", "html_url": "https://github.com/rust-lang/rust/commit/19c9674966273750c757eaae2b8d7b2246dcbe3f"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "ac20897d258fb78ffd55060a43f0e33408d9951f", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/06eb274bfcedeb69fc60068bdc2da14f57a442d1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb274bfcedeb69fc60068bdc2da14f57a442d1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=06eb274bfcedeb69fc60068bdc2da14f57a442d1", "patch": "@@ -662,6 +662,11 @@ impl<T: ?Sized> *const T {\n     /// will only affect the pointer part, whereas for (thin) pointers to\n     /// sized types, this has the same effect as a simple assignment.\n     ///\n+    /// The resulting pointer will have provenance of `val`, i.e., for a fat\n+    /// pointer, this operation is semantically the same as creating a new\n+    /// fat pointer with the data pointer value of `val` but the metadata of\n+    /// `self`.\n+    ///\n     /// # Examples\n     ///\n     /// This function is primarily useful for allowing byte-wise pointer\n@@ -673,13 +678,17 @@ impl<T: ?Sized> *const T {\n     /// let arr: [i32; 3] = [1, 2, 3];\n     /// let mut ptr = &arr[0] as *const dyn Debug;\n     /// let thin = ptr as *const u8;\n-    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n-    /// assert_eq!(unsafe { *(ptr as *const i32) }, 3);\n+    /// unsafe {\n+    ///     ptr = ptr.set_ptr_value(thin.add(8));\n+    ///     # assert_eq!(*(ptr as *const i32), 3);\n+    ///     println!(\"{:?}\", &*ptr); // will print \"3\"\n+    /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn set_ptr_value(mut self, val: *const ()) -> Self {\n-        let thin = &mut self as *mut *const T as *mut *const ();\n+    pub fn set_ptr_value(mut self, val: *const u8) -> Self {\n+        let thin = &mut self as *mut *const T as *mut *const u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current\n         // fat pointer layout implementation, the first field of such a"}, {"sha": "df00139118aa4bc0cd98fe6398c9c74816f72f8f", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/06eb274bfcedeb69fc60068bdc2da14f57a442d1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06eb274bfcedeb69fc60068bdc2da14f57a442d1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=06eb274bfcedeb69fc60068bdc2da14f57a442d1", "patch": "@@ -718,6 +718,11 @@ impl<T: ?Sized> *mut T {\n     /// will only affect the pointer part, whereas for (thin) pointers to\n     /// sized types, this has the same effect as a simple assignment.\n     ///\n+    /// The resulting pointer will have provenance of `val`, i.e., for a fat\n+    /// pointer, this operation is semantically the same as creating a new\n+    /// fat pointer with the data pointer value of `val` but the metadata of\n+    /// `self`.\n+    ///\n     /// # Examples\n     ///\n     /// This function is primarily useful for allowing byte-wise pointer\n@@ -729,13 +734,17 @@ impl<T: ?Sized> *mut T {\n     /// let mut arr: [i32; 3] = [1, 2, 3];\n     /// let mut ptr = &mut arr[0] as *mut dyn Debug;\n     /// let thin = ptr as *mut u8;\n-    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n-    /// assert_eq!(unsafe { *(ptr as *mut i32) }, 3);\n+    /// unsafe {\n+    ///     ptr = ptr.set_ptr_value(thin.add(8));\n+    ///     # assert_eq!(*(ptr as *mut i32), 3);\n+    ///     println!(\"{:?}\", &*ptr); // will print \"3\"\n+    /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn set_ptr_value(mut self, val: *mut ()) -> Self {\n-        let thin = &mut self as *mut *mut T as *mut *mut ();\n+    pub fn set_ptr_value(mut self, val: *mut u8) -> Self {\n+        let thin = &mut self as *mut *mut T as *mut *mut u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current\n         // fat pointer layout implementation, the first field of such a"}]}