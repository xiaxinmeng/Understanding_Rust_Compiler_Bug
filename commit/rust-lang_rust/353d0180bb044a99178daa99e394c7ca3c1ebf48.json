{"sha": "353d0180bb044a99178daa99e394c7ca3c1ebf48", "node_id": "C_kwDOAAsO6NoAKDM1M2QwMTgwYmIwNDRhOTkxNzhkYWE5OWUzOTRjN2NhM2MxZWJmNDg", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-17T04:08:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-17T04:08:47Z"}, "message": "Rollup merge of #94927 - c410-f3r:stabilize-let-chains, r=joshtriplett\n\nStabilize `let_chains` in Rust 1.64\n\n# Stabilization proposal\n\nThis PR proposes the stabilization of `#![feature(let_chains)]` in a future-compatibility way that will allow the **possible** addition of the `EXPR is PAT` syntax.\n\nTracking issue: #53667\nVersion: 1.64 (beta => 2022-08-11, stable => 2022-10-22).\n\n## What is stabilized\n\nThe ability to chain let expressions along side local variable declarations or ordinary conditional expressions. For example:\n\n```rust\npub enum Color {\n    Blue,\n    Red,\n    Violet,\n}\n\npub enum Flower {\n    Rose,\n    Tulip,\n    Violet,\n}\n\npub fn roses_are_red_violets_are_blue_printer(\n    (first_flower, first_flower_color): (Flower, Color),\n    (second_flower, second_flower_color): (Flower, Color),\n    pick_up_lines: &[&str],\n) {\n    if let Flower::Rose = first_flower\n        && let Color::Red = first_flower_color\n        && let Flower::Violet = second_flower\n        && let Color::Blue = second_flower_color\n        && let &[first_pick_up_line, ..] = pick_up_lines\n    {\n        println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\n    }\n}\n\nfn main() {\n    roses_are_red_violets_are_blue_printer(\n        (Flower::Rose, Color::Red),\n        (Flower::Violet, Color::Blue),\n        &[\"sugar is sweet and so are you\"],\n    );\n}\n```\n\n## Motivation\n\nThe main motivation for this feature is improving readability, ergonomics and reducing paper cuts.\n\nFor more examples, see the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md).\n\n## What isn't stabilized\n\n* Let chains in match guards (`if_let_guard`)\n\n* Resolution of divergent non-terminal matchers\n\n* The `EXPR is PAT` syntax\n\n## History\n\n* On 2017-12-24, [RFC: if- and while-let-chains](https://github.com/rust-lang/rfcs/pull/2260)\n* On 2018-07-12, [eRFC: if- and while-let-chains, take 2](https://github.com/rust-lang/rfcs/pull/2497)\n* On 2018-08-24, [Tracking issue for eRFC 2497, \"if- and while-let-chains, take 2](https://github.com/rust-lang/rust/issues/53667)\n* On 2019-03-19, [Run branch cleanup after copy prop](https://github.com/rust-lang/rust/pull/59290)\n* On 2019-03-26, [Generalize diagnostic for x = y where bool is the expected type](https://github.com/rust-lang/rust/pull/59439)\n* On 2019-04-24, [Introduce hir::ExprKind::Use and employ in for loop desugaring](https://github.com/rust-lang/rust/pull/60225)\n* On 2019-03-19, [[let_chains, 1/6] Remove hir::ExprKind::If](https://github.com/rust-lang/rust/pull/59288)\n* On 2019-05-15, [[let_chains, 2/6] Introduce Let(..) in AST, remove IfLet + WhileLet and parse let chains](https://github.com/rust-lang/rust/pull/60861)\n* On 2019-06-20, [[let_chains, 3/6] And then there was only Loop](https://github.com/rust-lang/rust/pull/61988)\n* On 2020-11-22, [Reintroduce hir::ExprKind::If](https://github.com/rust-lang/rust/pull/79328)\n* On 2020-12-24, [Introduce hir::ExprKind::Let - Take 2](https://github.com/rust-lang/rust/pull/80357)\n* On 2021-02-19, [Lower condition of if expression before it's \"then\" block](https://github.com/rust-lang/rust/pull/82308)\n* On 2021-09-01, [Fix drop handling for `if let` expressions](https://github.com/rust-lang/rust/pull/88572)\n* On 2021-09-04, [Formally implement let chains](https://github.com/rust-lang/rust/pull/88642)\n* On 2022-01-19, [Add tests to ensure that let_chains works with if_let_guard](https://github.com/rust-lang/rust/pull/93086)\n* On 2022-01-18, [Introduce `enhanced_binary_op` feature](https://github.com/rust-lang/rust/pull/93049)\n* On 2022-01-22, [Fix `let_chains` and `if_let_guard` feature flags](https://github.com/rust-lang/rust/pull/93213)\n* On 2022-02-25, [Initiate the inner usage of `let_chains`](https://github.com/rust-lang/rust/pull/94376)\n* On 2022-01-28, [[WIP] Introduce ast::StmtKind::LetElse to allow the usage of `let_else` with `let_chains`](https://github.com/rust-lang/rust/pull/93437)\n* On 2022-02-26, [1 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94396)\n* On 2022-02-26, [2 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94400)\n* On 2022-02-27, [3 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94420)\n* On 2022-02-28, [4 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94445)\n* On 2022-02-28, [5 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94448)\n* On 2022-02-28, [6 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94465)\n* On 2022-03-01, [7 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94476)\n* On 2022-03-01, [8 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94484)\n* On 2022-03-01, [9 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94498)\n* On 2022-03-08, [Warn users about `||` in let chain expressions](https://github.com/rust-lang/rust/pull/94754)\n\nFrom the first RFC (2017-12-24) to the theoretical future stabilization day (2022-10-22), it can be said that this feature took 4 years, 9 months and 28 days of research, development, discussions, agreements and headaches to be settled.\n\n## Divergent non-terminal matchers\n\nMore specifically, https://github.com/rust-lang/rust/issues/86730.\n\n```rust\nmacro_rules! mac {\n    ($e:expr) => {\n        if $e {\n            true\n        } else {\n            false\n        }\n    };\n}\n\nfn main() {\n    // OK!\n    assert_eq!(mac!(true && let 1 = 1), true);\n\n    // ERROR! Anything starting with `let` is not considered an expression\n    assert_eq!(mac!(let 1 = 1 && true), true);\n}\n```\n\nTo the best of my knowledge, such error or divergence is orthogonal, does not prevent stabilization and can be tackled independently in the near future or effectively in the next Rust 2024 edition. If not, then https://github.com/c410-f3r/rust/tree/let-macro-blah contains a set of changes that will consider `let` an expression.\n\nIt is possible that none of the solutions above satisfies all applicable constraints but I personally don't know of any other plausible answers.\n\n## Alternative syntax\n\nTaking into account the usefulness of this feature and the overwhelming desire to use both now and in the past, `let PAT = EXPR` will be utilized for stabilization but it doesn't or shall create any obstacle for a **possible** future addition of `EXPR is PAT`.\n\nThe introductory snippet would then be written as the following.\n\n```rust\nif first_flower is Flower::Rose\n    && first_flower_color is Color::Red\n    && second_flower is Flower::Violet\n    && second_flower_color is Color::Blue\n    && pick_up_lines is &[first_pick_up_line, ..]\n{\n    println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\n}\n```\n\nJust to reinforce, this PR only unblocks a **possible** future road for `EXPR is PAT` and does emphasize what is better or what is worse.\n\n## Tests\n\n* [Verifies the drop order of let chains and ensures it won't change in the future in an unpredictable way](https://github.com/rust-lang/rust/blob/master/src/test/ui/mir/mir_let_chains_drop_order.rs)\n\n* [AST lowering does not wrap let chains in an `DropTemps` expression](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs)\n\n* [Checks pretty printing output](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.rs)\n\n* [Verifies uninitialized variables due to MIR modifications](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/chains-without-let.rs)\n\n* [A collection of statements where `let` expressions are forbidden](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs)\n\n* [All or at least most of the places where let chains are allowed](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/feature-gate.rs)\n\n* [Ensures that irrefutable lets are allowed in let chains](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs)\n\n* [issue-88498.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-88498.rs), [issue-90722.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-90722.rs), [issue-92145.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-92145.rs) and [issue-93150.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-93150.rs) were bugs found by third parties and fixed overtime.\n\n* [Indexing was triggering a ICE due to a wrongly constructed MIR graph](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/no-double-assigments.rs)\n\n* [Protects the precedence of `&&` in relation to other things](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/protect-precedences.rs)\n\n* [`let_chains`, as well as `if_let_guard`, has a valid MIR graph that evaluates conditional expressions correctly](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/then-else-blocks.rs)\n\nMost of the infra-structure used by let chains is also used by `if` expressions in stable compiler versions since https://github.com/rust-lang/rust/pull/80357 and https://github.com/rust-lang/rust/pull/88572. As a result, no bugs were found since the integration of https://github.com/rust-lang/rust/pull/88642.\n\n## Possible future work\n\n* Let chains in match guards is implemented and working but stabilization is blocked by `if_let_guard`.\n\n* The usage of `let_chains` with `let_else` is possible but not implemented. Regardless, one attempt was introduced and closed in https://github.com/rust-lang/rust/pull/93437.\n\nThanks `@Centril` for creating the RFC and huge thanks (again) to `@matthewjasper` for all the reviews, mentoring and MIR implementations.\n\nFixes #53667", "tree": {"sha": "033c746829bc5c808d9e12c532de81930b66e877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/033c746829bc5c808d9e12c532de81930b66e877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/353d0180bb044a99178daa99e394c7ca3c1ebf48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi04tPCRBK7hj4Ov3rIwAAAH4IAIaII7syT6Ctjz9sGhpqzRIm\nXtOEyDcbr3QyEK/M1a+FYnQ4NIHV0htcG5mYgUyPFXNkFzgoI9VWJUSrHPs92an8\n0mx2e687jM/4YFP2GII7Le5GNWYNEzxK125GpdVL3oOhLKxx8Nvs+M+rH+USKNZQ\nim5pVfJ+c4vzl8/xh+R0vngVT35LHios4h0FER9dtbL0Nj/j6GXXI8dL/Aj85i2C\n0NgBTIZGvIdmMJdZHuN7WkQgRXPArPyl4nBj7soGyFTEuV/fgQXFVklE20zGcVgV\n51+jpGtjgtVuRhsGsvO7MMs1SovclxdxZN+fSW/81pfQsBGsWH31DY3+Iam30/4=\n=rXNg\n-----END PGP SIGNATURE-----\n", "payload": "tree 033c746829bc5c808d9e12c532de81930b66e877\nparent db41351753df840773ca628d8daa040e95d00eef\nparent 326646074940222d602f3683d0559088690830f4\nauthor Yuki Okushi <jtitor@2k36.org> 1658030927 +0900\ncommitter GitHub <noreply@github.com> 1658030927 +0900\n\nRollup merge of #94927 - c410-f3r:stabilize-let-chains, r=joshtriplett\n\nStabilize `let_chains` in Rust 1.64\n\n# Stabilization proposal\n\nThis PR proposes the stabilization of `#![feature(let_chains)]` in a future-compatibility way that will allow the **possible** addition of the `EXPR is PAT` syntax.\n\nTracking issue: #53667\nVersion: 1.64 (beta => 2022-08-11, stable => 2022-10-22).\n\n## What is stabilized\n\nThe ability to chain let expressions along side local variable declarations or ordinary conditional expressions. For example:\n\n```rust\npub enum Color {\n    Blue,\n    Red,\n    Violet,\n}\n\npub enum Flower {\n    Rose,\n    Tulip,\n    Violet,\n}\n\npub fn roses_are_red_violets_are_blue_printer(\n    (first_flower, first_flower_color): (Flower, Color),\n    (second_flower, second_flower_color): (Flower, Color),\n    pick_up_lines: &[&str],\n) {\n    if let Flower::Rose = first_flower\n        && let Color::Red = first_flower_color\n        && let Flower::Violet = second_flower\n        && let Color::Blue = second_flower_color\n        && let &[first_pick_up_line, ..] = pick_up_lines\n    {\n        println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\n    }\n}\n\nfn main() {\n    roses_are_red_violets_are_blue_printer(\n        (Flower::Rose, Color::Red),\n        (Flower::Violet, Color::Blue),\n        &[\"sugar is sweet and so are you\"],\n    );\n}\n```\n\n## Motivation\n\nThe main motivation for this feature is improving readability, ergonomics and reducing paper cuts.\n\nFor more examples, see the [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md).\n\n## What isn't stabilized\n\n* Let chains in match guards (`if_let_guard`)\n\n* Resolution of divergent non-terminal matchers\n\n* The `EXPR is PAT` syntax\n\n## History\n\n* On 2017-12-24, [RFC: if- and while-let-chains](https://github.com/rust-lang/rfcs/pull/2260)\n* On 2018-07-12, [eRFC: if- and while-let-chains, take 2](https://github.com/rust-lang/rfcs/pull/2497)\n* On 2018-08-24, [Tracking issue for eRFC 2497, \"if- and while-let-chains, take 2](https://github.com/rust-lang/rust/issues/53667)\n* On 2019-03-19, [Run branch cleanup after copy prop](https://github.com/rust-lang/rust/pull/59290)\n* On 2019-03-26, [Generalize diagnostic for x = y where bool is the expected type](https://github.com/rust-lang/rust/pull/59439)\n* On 2019-04-24, [Introduce hir::ExprKind::Use and employ in for loop desugaring](https://github.com/rust-lang/rust/pull/60225)\n* On 2019-03-19, [[let_chains, 1/6] Remove hir::ExprKind::If](https://github.com/rust-lang/rust/pull/59288)\n* On 2019-05-15, [[let_chains, 2/6] Introduce Let(..) in AST, remove IfLet + WhileLet and parse let chains](https://github.com/rust-lang/rust/pull/60861)\n* On 2019-06-20, [[let_chains, 3/6] And then there was only Loop](https://github.com/rust-lang/rust/pull/61988)\n* On 2020-11-22, [Reintroduce hir::ExprKind::If](https://github.com/rust-lang/rust/pull/79328)\n* On 2020-12-24, [Introduce hir::ExprKind::Let - Take 2](https://github.com/rust-lang/rust/pull/80357)\n* On 2021-02-19, [Lower condition of if expression before it's \"then\" block](https://github.com/rust-lang/rust/pull/82308)\n* On 2021-09-01, [Fix drop handling for `if let` expressions](https://github.com/rust-lang/rust/pull/88572)\n* On 2021-09-04, [Formally implement let chains](https://github.com/rust-lang/rust/pull/88642)\n* On 2022-01-19, [Add tests to ensure that let_chains works with if_let_guard](https://github.com/rust-lang/rust/pull/93086)\n* On 2022-01-18, [Introduce `enhanced_binary_op` feature](https://github.com/rust-lang/rust/pull/93049)\n* On 2022-01-22, [Fix `let_chains` and `if_let_guard` feature flags](https://github.com/rust-lang/rust/pull/93213)\n* On 2022-02-25, [Initiate the inner usage of `let_chains`](https://github.com/rust-lang/rust/pull/94376)\n* On 2022-01-28, [[WIP] Introduce ast::StmtKind::LetElse to allow the usage of `let_else` with `let_chains`](https://github.com/rust-lang/rust/pull/93437)\n* On 2022-02-26, [1 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94396)\n* On 2022-02-26, [2 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94400)\n* On 2022-02-27, [3 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94420)\n* On 2022-02-28, [4 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94445)\n* On 2022-02-28, [5 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94448)\n* On 2022-02-28, [6 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94465)\n* On 2022-03-01, [7 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94476)\n* On 2022-03-01, [8 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94484)\n* On 2022-03-01, [9 - Make more use of `let_chains`](https://github.com/rust-lang/rust/pull/94498)\n* On 2022-03-08, [Warn users about `||` in let chain expressions](https://github.com/rust-lang/rust/pull/94754)\n\nFrom the first RFC (2017-12-24) to the theoretical future stabilization day (2022-10-22), it can be said that this feature took 4 years, 9 months and 28 days of research, development, discussions, agreements and headaches to be settled.\n\n## Divergent non-terminal matchers\n\nMore specifically, https://github.com/rust-lang/rust/issues/86730.\n\n```rust\nmacro_rules! mac {\n    ($e:expr) => {\n        if $e {\n            true\n        } else {\n            false\n        }\n    };\n}\n\nfn main() {\n    // OK!\n    assert_eq!(mac!(true && let 1 = 1), true);\n\n    // ERROR! Anything starting with `let` is not considered an expression\n    assert_eq!(mac!(let 1 = 1 && true), true);\n}\n```\n\nTo the best of my knowledge, such error or divergence is orthogonal, does not prevent stabilization and can be tackled independently in the near future or effectively in the next Rust 2024 edition. If not, then https://github.com/c410-f3r/rust/tree/let-macro-blah contains a set of changes that will consider `let` an expression.\n\nIt is possible that none of the solutions above satisfies all applicable constraints but I personally don't know of any other plausible answers.\n\n## Alternative syntax\n\nTaking into account the usefulness of this feature and the overwhelming desire to use both now and in the past, `let PAT = EXPR` will be utilized for stabilization but it doesn't or shall create any obstacle for a **possible** future addition of `EXPR is PAT`.\n\nThe introductory snippet would then be written as the following.\n\n```rust\nif first_flower is Flower::Rose\n    && first_flower_color is Color::Red\n    && second_flower is Flower::Violet\n    && second_flower_color is Color::Blue\n    && pick_up_lines is &[first_pick_up_line, ..]\n{\n    println!(\"Roses are red, violets are blue, {}\", first_pick_up_line);\n}\n```\n\nJust to reinforce, this PR only unblocks a **possible** future road for `EXPR is PAT` and does emphasize what is better or what is worse.\n\n## Tests\n\n* [Verifies the drop order of let chains and ensures it won't change in the future in an unpredictable way](https://github.com/rust-lang/rust/blob/master/src/test/ui/mir/mir_let_chains_drop_order.rs)\n\n* [AST lowering does not wrap let chains in an `DropTemps` expression](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs)\n\n* [Checks pretty printing output](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/ast-pretty-check.rs)\n\n* [Verifies uninitialized variables due to MIR modifications](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/chains-without-let.rs)\n\n* [A collection of statements where `let` expressions are forbidden](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs)\n\n* [All or at least most of the places where let chains are allowed](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/feature-gate.rs)\n\n* [Ensures that irrefutable lets are allowed in let chains](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs)\n\n* [issue-88498.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-88498.rs), [issue-90722.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-90722.rs), [issue-92145.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-92145.rs) and [issue-93150.rs](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/issue-93150.rs) were bugs found by third parties and fixed overtime.\n\n* [Indexing was triggering a ICE due to a wrongly constructed MIR graph](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/no-double-assigments.rs)\n\n* [Protects the precedence of `&&` in relation to other things](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/protect-precedences.rs)\n\n* [`let_chains`, as well as `if_let_guard`, has a valid MIR graph that evaluates conditional expressions correctly](https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2497-if-let-chains/then-else-blocks.rs)\n\nMost of the infra-structure used by let chains is also used by `if` expressions in stable compiler versions since https://github.com/rust-lang/rust/pull/80357 and https://github.com/rust-lang/rust/pull/88572. As a result, no bugs were found since the integration of https://github.com/rust-lang/rust/pull/88642.\n\n## Possible future work\n\n* Let chains in match guards is implemented and working but stabilization is blocked by `if_let_guard`.\n\n* The usage of `let_chains` with `let_else` is possible but not implemented. Regardless, one attempt was introduced and closed in https://github.com/rust-lang/rust/pull/93437.\n\nThanks `@Centril` for creating the RFC and huge thanks (again) to `@matthewjasper` for all the reviews, mentoring and MIR implementations.\n\nFixes #53667\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/353d0180bb044a99178daa99e394c7ca3c1ebf48", "html_url": "https://github.com/rust-lang/rust/commit/353d0180bb044a99178daa99e394c7ca3c1ebf48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/353d0180bb044a99178daa99e394c7ca3c1ebf48/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db41351753df840773ca628d8daa040e95d00eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/db41351753df840773ca628d8daa040e95d00eef", "html_url": "https://github.com/rust-lang/rust/commit/db41351753df840773ca628d8daa040e95d00eef"}, {"sha": "326646074940222d602f3683d0559088690830f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/326646074940222d602f3683d0559088690830f4", "html_url": "https://github.com/rust-lang/rust/commit/326646074940222d602f3683d0559088690830f4"}], "stats": {"total": 1203, "additions": 426, "deletions": 777}, "files": [{"sha": "838f77512c5afd42067bee3afc667287e6cac15d", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -14,7 +14,7 @@\n #![feature(const_trait_impl)]\n #![feature(if_let_guard)]\n #![feature(label_break_value)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "7cd360623ec424f6e6995dbd632f3ced0221efa5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -31,7 +31,7 @@\n //! in the HIR, especially for multiple identifiers.\n \n #![feature(box_patterns)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "334326e927fad482dafd179e2197e67a1fe4a004", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -119,33 +119,23 @@ impl<'a> AstValidator<'a> {\n \n     /// Emits an error banning the `let` expression provided in the given location.\n     fn ban_let_expr(&self, expr: &'a Expr, forbidden_let_reason: ForbiddenLetReason) {\n-        let sess = &self.session;\n-        if sess.opts.unstable_features.is_nightly_build() {\n-            let err = \"`let` expressions are not supported here\";\n-            let mut diag = sess.struct_span_err(expr.span, err);\n-            diag.note(\"only supported directly in conditions of `if` and `while` expressions\");\n-            match forbidden_let_reason {\n-                ForbiddenLetReason::GenericForbidden => {}\n-                ForbiddenLetReason::NotSupportedOr(span) => {\n-                    diag.span_note(\n-                        span,\n-                        \"`||` operators are not supported in let chain expressions\",\n-                    );\n-                }\n-                ForbiddenLetReason::NotSupportedParentheses(span) => {\n-                    diag.span_note(\n-                        span,\n-                        \"`let`s wrapped in parentheses are not supported in a context with let \\\n-                        chains\",\n-                    );\n-                }\n+        let err = \"`let` expressions are not supported here\";\n+        let mut diag = self.session.struct_span_err(expr.span, err);\n+        diag.note(\"only supported directly in conditions of `if` and `while` expressions\");\n+        match forbidden_let_reason {\n+            ForbiddenLetReason::GenericForbidden => {}\n+            ForbiddenLetReason::NotSupportedOr(span) => {\n+                diag.span_note(span, \"`||` operators are not supported in let chain expressions\");\n+            }\n+            ForbiddenLetReason::NotSupportedParentheses(span) => {\n+                diag.span_note(\n+                    span,\n+                    \"`let`s wrapped in parentheses are not supported in a context with let \\\n+                    chains\",\n+                );\n             }\n-            diag.emit();\n-        } else {\n-            sess.struct_span_err(expr.span, \"expected expression, found statement (`let`)\")\n-                .note(\"variable declaration using `let` is a statement\")\n-                .emit();\n         }\n+        diag.emit();\n     }\n \n     fn check_gat_where("}, {"sha": "ad0e0384acfface99904c60bd6cceb558bc1eb97", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -738,7 +738,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         \"`if let` guards are experimental\",\n         \"you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\"\n     );\n-    gate_all!(let_chains, \"`let` expressions in this position are unstable\");\n     gate_all!(\n         async_closure,\n         \"async closures are unstable\","}, {"sha": "2e3ac0c60186dadfd2f27d4cb7b17a7391ec735b", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -8,7 +8,7 @@\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n #![feature(iter_is_partitioned)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "afe1d191d10e16d69d8a27647fbdf328f17c7d21", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -4,7 +4,7 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n \n #[macro_use]"}, {"sha": "15c2a9f7aefa00e6b21cbf9951056d27aebf1977", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "0192f3c8ca4f253f77d936911e1b8d397c1fdbbf", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -8,7 +8,7 @@\n #![feature(decl_macro)]\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]"}, {"sha": "25ce1cef9440f465c155861697a083114e003146", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -6,7 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(hash_raw_entry)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(extern_types)]\n #![feature(once_cell)]"}, {"sha": "bba3e99f7b1f8cd72120a9c76d70d436e67d7eb5", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -9,7 +9,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(control_flow_enum)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "6b961eaeb42afaff73ac4df8dcd31edee7110ed3", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,4 +1,4 @@\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "03b75d809a088dae3835cb769ac25bedc4bb7832", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -3,7 +3,7 @@\n #![feature(associated_type_bounds)]\n #![feature(associated_type_defaults)]\n #![feature(if_let_guard)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]"}, {"sha": "2d24101b2d59a2978153ae03a2559a942ffe29dc", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -186,6 +186,8 @@ declare_features! (\n     /// Allows some increased flexibility in the name resolution rules,\n     /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n+    /// Allows `if/while p && let q = r && ...` chains.\n+    (accepted, let_chains, \"1.64.0\", Some(53667), None),\n     /// Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     /// Allows use of `?` as the Kleene \"at most one\" operator in macros."}, {"sha": "1018facebaed9a12506489e26726f4cc0acdfb0f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -424,8 +424,6 @@ declare_features! (\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n     // Allows setting the threshold for the `large_assignments` lint.\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n-    /// Allows `if/while p && let q = r && ...` chains.\n-    (active, let_chains, \"1.37.0\", Some(53667), None),\n     /// Allows `let...else` statements.\n     (active, let_else, \"1.56.0\", Some(87335), None),\n     /// Allows `#[link(..., cfg(..))]`."}, {"sha": "490ba52503fb24a3692e080d11034c5543c5fa36", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -18,7 +18,7 @@\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n #![feature(label_break_value)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "8726d36498bed367a79ad78351f76eec9dcddc4a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -33,7 +33,7 @@\n #![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "e192378bcc3d23cb7a4b535c566d03921766b111", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -4,7 +4,7 @@\n #![feature(generators)]\n #![feature(generic_associated_types)]\n #![feature(iter_from_generator)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]"}, {"sha": "45c6468bc24e577a975432279a924932b73e37d3", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -40,7 +40,7 @@\n #![feature(extern_types)]\n #![feature(new_uninit)]\n #![feature(once_cell)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]"}, {"sha": "a7d8431b6c7a2dd1bf3b2d7d2a354c9f5bc77853", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -5,7 +5,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "40dc9fe9a05bb9964dbed5f24a60160076300b62", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,6 +1,6 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "d56e3773dc7a0da25607642863f4ff59ba9e8f9b", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -3,7 +3,7 @@\n #![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "8e1b279d9b6c243e5da9c93378fe134e8c5695c5", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -2341,16 +2341,9 @@ impl<'a> Parser<'a> {\n \n     /// Parses the condition of a `if` or `while` expression.\n     fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        let cond = self.with_let_management(true, |local_self| {\n+        self.with_let_management(true, |local_self| {\n             local_self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)\n-        })?;\n-\n-        if let ExprKind::Let(..) = cond.kind {\n-            // Remove the last feature gating of a `let` expression since it's stable.\n-            self.sess.gated_spans.ungate_last(sym::let_chains, cond.span);\n-        }\n-\n-        Ok(cond)\n+        })\n     }\n \n     // Checks if `let` is in an invalid position like `let x = let y = 1;` or\n@@ -2389,7 +2382,6 @@ impl<'a> Parser<'a> {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         })?;\n         let span = lo.to(expr.span);\n-        self.sess.gated_spans.gate(sym::let_chains, span);\n         Ok(self.mk_expr(span, ExprKind::Let(pat, expr, span), attrs))\n     }\n \n@@ -2695,15 +2687,11 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {\n         // Used to check the `let_chains` and `if_let_guard` features mostly by scaning\n         // `&&` tokens.\n-        fn check_let_expr(expr: &Expr) -> (bool, bool) {\n+        fn check_let_expr(expr: &Expr) -> bool {\n             match expr.kind {\n-                ExprKind::Binary(_, ref lhs, ref rhs) => {\n-                    let lhs_rslt = check_let_expr(lhs);\n-                    let rhs_rslt = check_let_expr(rhs);\n-                    (lhs_rslt.0 || rhs_rslt.0, false)\n-                }\n-                ExprKind::Let(..) => (true, true),\n-                _ => (false, true),\n+                ExprKind::Binary(_, ref lhs, ref rhs) => check_let_expr(lhs) || check_let_expr(rhs),\n+                ExprKind::Let(..) => true,\n+                _ => false,\n             }\n         }\n         let attrs = self.parse_outer_attributes()?;\n@@ -2718,12 +2706,8 @@ impl<'a> Parser<'a> {\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n                 let cond = this.with_let_management(true, |local_this| local_this.parse_expr())?;\n-                let (has_let_expr, does_not_have_bin_op) = check_let_expr(&cond);\n+                let has_let_expr = check_let_expr(&cond);\n                 if has_let_expr {\n-                    if does_not_have_bin_op {\n-                        // Remove the last feature gating of a `let` expression since it's stable.\n-                        this.sess.gated_spans.ungate_last(sym::let_chains, cond.span);\n-                    }\n                     let span = if_span.to(cond.span);\n                     this.sess.gated_spans.gate(sym::if_let_guard, span);\n                 }"}, {"sha": "defa9d15296e08ac80b70d943c9d83873afc60ac", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -7,7 +7,7 @@\n #![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(iter_intersperse)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "2fcbe1d4c14a565cc7a9a9e4db614c87165b1045", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -10,7 +10,7 @@\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "44cf504864254c3627439e9cf7c60a49d361a24a", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,5 +1,5 @@\n #![feature(if_let_guard)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "c33629192cb2b19e2aca27fee9f450a5d3976a2d", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -17,7 +17,7 @@\n #![feature(drain_filter)]\n #![feature(hash_drain_filter)]\n #![feature(label_break_value)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(if_let_guard)]\n #![feature(never_type)]"}, {"sha": "706b9ee40aa993519f7100d979655e761a7a9628", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -65,7 +65,7 @@ This API is completely unstable and subject to change.\n #![feature(is_sorted)]\n #![feature(iter_intersperse)]\n #![feature(label_break_value)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "9fd426d3ac4e222e9e0f5825b13e60fb0eee591f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -243,7 +243,7 @@\n #![feature(intra_doc_pointers)]\n #![feature(label_break_value)]\n #![feature(lang_items)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(linkage)]\n #![feature(min_specialization)]"}, {"sha": "7429f2b6ab148cd83ff7d26112b1caaa14026147", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -9,7 +9,7 @@\n #![feature(control_flow_enum)]\n #![feature(box_syntax)]\n #![feature(drain_filter)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(test)]\n #![feature(never_type)]"}, {"sha": "d62c2cb403fe850bd91393e0dec15bdbe23af0eb", "filename": "src/test/ui/expr/if/attrs/let-chains-attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(let_chains)]\n-\n #[cfg(FALSE)]\n fn foo() {\n     #[attr]"}, {"sha": "070a5b201286d4e2c15c9787f0c78addeb074493", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -4,7 +4,6 @@\n fn a() {\n     if let x = 1 && i = 2 {}\n     //~^ ERROR cannot find value `i` in this scope\n-    //~| ERROR `let` expressions in this position are unstable\n     //~| ERROR mismatched types\n     //~| ERROR `let` expressions are not supported here\n }"}, {"sha": "9f7a21c7d1ad96fee744617a8a4f5adcbeec2b5f", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -13,7 +13,7 @@ LL |     if let x = 1 && i = 2 {}\n    |                     ^ not found in this scope\n \n error[E0425]: cannot find value `i` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:13:9\n+  --> $DIR/bad-if-let-suggestion.rs:12:9\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n@@ -22,7 +22,7 @@ LL |     if (i + j) = i {}\n    |         ^ help: a function with a similar name exists: `a`\n \n error[E0425]: cannot find value `j` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:13:13\n+  --> $DIR/bad-if-let-suggestion.rs:12:13\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n@@ -31,7 +31,7 @@ LL |     if (i + j) = i {}\n    |             ^ help: a function with a similar name exists: `a`\n \n error[E0425]: cannot find value `i` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:13:18\n+  --> $DIR/bad-if-let-suggestion.rs:12:18\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n@@ -40,30 +40,21 @@ LL |     if (i + j) = i {}\n    |                  ^ help: a function with a similar name exists: `a`\n \n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:20:8\n+  --> $DIR/bad-if-let-suggestion.rs:19:8\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n ...\n LL |     if x[0] = 1 {}\n    |        ^ help: a function with a similar name exists: `a`\n \n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/bad-if-let-suggestion.rs:5:8\n-   |\n-LL |     if let x = 1 && i = 2 {}\n-   |        ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n   --> $DIR/bad-if-let-suggestion.rs:5:8\n    |\n LL |     if let x = 1 && i = 2 {}\n    |        ^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0308, E0425, E0658.\n+Some errors have detailed explanations: E0308, E0425.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "c2827c7e37fcb7b1c95243d176db79060a1f2368", "filename": "src/test/ui/mir/issue-92893.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,6 +1,5 @@\n struct Bug<A = [(); (let a = (), 1).1]> {\n     //~^ `let` expressions are not supported here\n-    //~| `let` expressions in this position are unstable [E0658]\n     //~| expected expression, found `let` statement\n     a: A\n }"}, {"sha": "bd4654edf4b343a520be7cbfe0aca675eefdb463", "filename": "src/test/ui/mir/issue-92893.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -12,15 +12,5 @@ LL | struct Bug<A = [(); (let a = (), 1).1]> {\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/issue-92893.rs:1:22\n-   |\n-LL | struct Bug<A = [(); (let a = (), 1).1]> {\n-   |                      ^^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "21e7b5070af62f403f33bcaa8ce8992f9ca49e17", "filename": "src/test/ui/mir/mir_let_chains_drop_order.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -4,7 +4,6 @@\n \n // See `mir_drop_order.rs` for more information\n \n-#![feature(let_chains)]\n #![allow(irrefutable_let_patterns)]\n \n use std::cell::RefCell;"}, {"sha": "689fdcebbfba4d4391a904bab317954887ee62e3", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -8,47 +8,33 @@ fn _if_let_guard() {\n         //~^ ERROR `if let` guards are experimental\n \n         () if (let 0 = 1) => {}\n-        //~^ ERROR `let` expressions in this position are unstable\n-        //~| ERROR expected expression, found `let` statement\n+        //~^ ERROR expected expression, found `let` statement\n \n         () if (((let 0 = 1))) => {}\n-        //~^ ERROR `let` expressions in this position are unstable\n-        //~| ERROR expected expression, found `let` statement\n+        //~^ ERROR expected expression, found `let` statement\n \n         () if true && let 0 = 1 => {}\n         //~^ ERROR `if let` guards are experimental\n-        //~| ERROR `let` expressions in this position are unstable\n \n         () if let 0 = 1 && true => {}\n         //~^ ERROR `if let` guards are experimental\n-        //~| ERROR `let` expressions in this position are unstable\n \n         () if (let 0 = 1) && true => {}\n-        //~^ ERROR `let` expressions in this position are unstable\n-        //~| ERROR expected expression, found `let` statement\n+        //~^ ERROR expected expression, found `let` statement\n \n         () if true && (let 0 = 1) => {}\n-        //~^ ERROR `let` expressions in this position are unstable\n-        //~| ERROR expected expression, found `let` statement\n+        //~^ ERROR expected expression, found `let` statement\n \n         () if (let 0 = 1) && (let 0 = 1) => {}\n-        //~^ ERROR `let` expressions in this position are unstable\n-        //~| ERROR `let` expressions in this position are unstable\n-        //~| ERROR expected expression, found `let` statement\n+        //~^ ERROR expected expression, found `let` statement\n         //~| ERROR expected expression, found `let` statement\n \n         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n         //~^ ERROR `if let` guards are experimental\n-        //~| ERROR `let` expressions in this position are unstable\n-        //~| ERROR `let` expressions in this position are unstable\n-        //~| ERROR `let` expressions in this position are unstable\n-        //~| ERROR `let` expressions in this position are unstable\n-        //~| ERROR `let` expressions in this position are unstable\n         //~| ERROR expected expression, found `let` statement\n \n         () if let Range { start: _, end: _ } = (true..true) && false => {}\n         //~^ ERROR `if let` guards are experimental\n-        //~| ERROR `let` expressions in this position are unstable\n \n         _ => {}\n     }\n@@ -64,11 +50,9 @@ fn _macros() {\n         }\n     }\n     use_expr!((let 0 = 1 && 0 == 0));\n-    //~^ ERROR `let` expressions in this position are unstable\n-    //~| ERROR expected expression, found `let` statement\n+    //~^ ERROR expected expression, found `let` statement\n     use_expr!((let 0 = 1));\n-    //~^ ERROR `let` expressions in this position are unstable\n-    //~| ERROR expected expression, found `let` statement\n+    //~^ ERROR expected expression, found `let` statement\n     match () {\n         #[cfg(FALSE)]\n         () if let 0 = 1 => {}"}, {"sha": "b61041050a8a1bd7908a5ecb88d207e6b6d0ad8e", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 15, "deletions": 159, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -5,55 +5,55 @@ LL |         () if (let 0 = 1) => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:14:18\n+  --> $DIR/feature-gate.rs:13:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:26:16\n+  --> $DIR/feature-gate.rs:22:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:30:24\n+  --> $DIR/feature-gate.rs:25:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:34:16\n+  --> $DIR/feature-gate.rs:28:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:34:31\n+  --> $DIR/feature-gate.rs:28:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:40:42\n+  --> $DIR/feature-gate.rs:32:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:66:16\n+  --> $DIR/feature-gate.rs:52:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:69:16\n+  --> $DIR/feature-gate.rs:54:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:78:15\n+  --> $DIR/feature-gate.rs:62:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -72,7 +72,7 @@ LL |         () if let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:18:12\n+  --> $DIR/feature-gate.rs:16:12\n    |\n LL |         () if true && let 0 = 1 => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:22:12\n+  --> $DIR/feature-gate.rs:19:12\n    |\n LL |         () if let 0 = 1 && true => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -92,7 +92,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:40:12\n+  --> $DIR/feature-gate.rs:32:12\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -102,7 +102,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:49:12\n+  --> $DIR/feature-gate.rs:36:12\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -112,7 +112,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:74:12\n+  --> $DIR/feature-gate.rs:58:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -121,150 +121,6 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:10:16\n-   |\n-LL |         () if (let 0 = 1) => {}\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:14:18\n-   |\n-LL |         () if (((let 0 = 1))) => {}\n-   |                  ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:18:23\n-   |\n-LL |         () if true && let 0 = 1 => {}\n-   |                       ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:22:15\n-   |\n-LL |         () if let 0 = 1 && true => {}\n-   |               ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:26:16\n-   |\n-LL |         () if (let 0 = 1) && true => {}\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:30:24\n-   |\n-LL |         () if true && (let 0 = 1) => {}\n-   |                        ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:16\n-   |\n-LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:34:31\n-   |\n-LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n-   |                               ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:15\n-   |\n-LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n-   |               ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:28\n-   |\n-LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n-   |                            ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:42\n-   |\n-LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n-   |                                          ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:55\n-   |\n-LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n-   |                                                       ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:40:68\n-   |\n-LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n-   |                                                                    ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:49:15\n-   |\n-LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:66:16\n-   |\n-LL |     use_expr!((let 0 = 1 && 0 == 0));\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:69:16\n-   |\n-LL |     use_expr!((let 0 = 1));\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error: aborting due to 32 previous errors\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "ffe0499fda23a54fc584238c38906fb519441112", "filename": "src/test/ui/rfc-2497-if-let-chains/allowed-syntax.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fallowed-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fallowed-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fallowed-syntax.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![allow(irrefutable_let_patterns)]\n+\n+use std::ops::Range;\n+\n+fn _if() {\n+    if let 0 = 1 {}\n+\n+    if true && let 0 = 1 {}\n+\n+    if let 0 = 1 && true {}\n+\n+    if let Range { start: _, end: _ } = (true..true) && false {}\n+\n+    if let 1 = 1 && let true = { true } && false {\n+    }\n+}\n+\n+fn _while() {\n+    while let 0 = 1 {}\n+\n+    while true && let 0 = 1 {}\n+\n+    while let 0 = 1 && true {}\n+\n+    while let Range { start: _, end: _ } = (true..true) && false {}\n+}\n+\n+fn main() {}"}, {"sha": "82164bda4897db4a25329048ca47046ab27ff417", "filename": "src/test/ui/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(let_chains)]\n #![allow(irrefutable_let_patterns)]\n \n fn main() {"}, {"sha": "a89c58785e3586979dfdb699bf202c206a304fe4", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -17,8 +17,6 @@\n //\n // To that end, we check some positions which is not part of the language above.\n \n-#![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n-\n #![allow(irrefutable_let_patterns)]\n \n use std::ops::Range;\n@@ -100,6 +98,12 @@ fn _macros() {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR expected expression, found `let` statement\n+    use_expr!(true && let 0 = 1);\n+    //~^ ERROR expected expression, found `let` statement\n+\n+    macro_rules! noop_expr { ($e:expr) => {}; }\n+    noop_expr!((let 0 = 1));\n+    //~^ ERROR expected expression, found `let` statement\n }\n \n fn nested_within_if_expr() {\n@@ -467,4 +471,7 @@ fn with_parenthesis() {\n         ([1, 2, 3][let _ = ()])\n         //~^ ERROR expected expression, found `let` statement\n     }\n+\n+    #[cfg(FALSE)] (let 0 = 1);\n+    //~^ ERROR expected expression, found `let` statement\n }"}, {"sha": "5e5289f169331a74a419101ab90b268a82add065", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 281, "deletions": 263, "changes": 544, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,353 +1,353 @@\n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:29:9\n+  --> $DIR/disallowed-positions.rs:27:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:33:11\n+  --> $DIR/disallowed-positions.rs:31:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:37:9\n+  --> $DIR/disallowed-positions.rs:35:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:41:17\n+  --> $DIR/disallowed-positions.rs:39:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:45:9\n+  --> $DIR/disallowed-positions.rs:43:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:45:24\n+  --> $DIR/disallowed-positions.rs:43:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:51:35\n+  --> $DIR/disallowed-positions.rs:49:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:59:12\n+  --> $DIR/disallowed-positions.rs:57:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:63:14\n+  --> $DIR/disallowed-positions.rs:61:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:67:12\n+  --> $DIR/disallowed-positions.rs:65:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:71:20\n+  --> $DIR/disallowed-positions.rs:69:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:75:12\n+  --> $DIR/disallowed-positions.rs:73:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:75:27\n+  --> $DIR/disallowed-positions.rs:73:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:79:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:106:9\n+  --> $DIR/disallowed-positions.rs:110:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:111:9\n+  --> $DIR/disallowed-positions.rs:115:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:114:9\n+  --> $DIR/disallowed-positions.rs:118:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:118:9\n+  --> $DIR/disallowed-positions.rs:122:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:128:9\n+  --> $DIR/disallowed-positions.rs:132:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:134:16\n+  --> $DIR/disallowed-positions.rs:138:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:137:17\n+  --> $DIR/disallowed-positions.rs:141:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:140:25\n+  --> $DIR/disallowed-positions.rs:144:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:147:12\n+  --> $DIR/disallowed-positions.rs:151:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:152:15\n+  --> $DIR/disallowed-positions.rs:156:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:156:11\n+  --> $DIR/disallowed-positions.rs:160:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:160:9\n+  --> $DIR/disallowed-positions.rs:164:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:191:19\n+  --> $DIR/disallowed-positions.rs:195:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:197:12\n+  --> $DIR/disallowed-positions.rs:201:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:202:12\n+  --> $DIR/disallowed-positions.rs:206:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:205:12\n+  --> $DIR/disallowed-positions.rs:209:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:209:12\n+  --> $DIR/disallowed-positions.rs:213:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:219:12\n+  --> $DIR/disallowed-positions.rs:223:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:225:19\n+  --> $DIR/disallowed-positions.rs:229:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:228:20\n+  --> $DIR/disallowed-positions.rs:232:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:231:28\n+  --> $DIR/disallowed-positions.rs:235:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:238:15\n+  --> $DIR/disallowed-positions.rs:242:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:243:18\n+  --> $DIR/disallowed-positions.rs:247:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:247:14\n+  --> $DIR/disallowed-positions.rs:251:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:251:12\n+  --> $DIR/disallowed-positions.rs:255:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:282:22\n+  --> $DIR/disallowed-positions.rs:286:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:298:6\n+  --> $DIR/disallowed-positions.rs:302:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:302:6\n+  --> $DIR/disallowed-positions.rs:306:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:305:6\n+  --> $DIR/disallowed-positions.rs:309:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:309:6\n+  --> $DIR/disallowed-positions.rs:313:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:319:6\n+  --> $DIR/disallowed-positions.rs:323:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:325:13\n+  --> $DIR/disallowed-positions.rs:329:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:328:14\n+  --> $DIR/disallowed-positions.rs:332:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:331:22\n+  --> $DIR/disallowed-positions.rs:335:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:336:9\n+  --> $DIR/disallowed-positions.rs:340:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:340:12\n+  --> $DIR/disallowed-positions.rs:344:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:343:8\n+  --> $DIR/disallowed-positions.rs:347:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:346:6\n+  --> $DIR/disallowed-positions.rs:350:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:350:6\n+  --> $DIR/disallowed-positions.rs:354:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:355:6\n+  --> $DIR/disallowed-positions.rs:359:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:355:17\n+  --> $DIR/disallowed-positions.rs:359:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:362:25\n+  --> $DIR/disallowed-positions.rs:366:25\n    |\n LL |         let x = true && let y = 1;\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:368:19\n+  --> $DIR/disallowed-positions.rs:372:19\n    |\n LL |         [1, 2, 3][let _ = ()]\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:373:6\n+  --> $DIR/disallowed-positions.rs:377:6\n    |\n LL |     &let 0 = 0\n    |      ^^^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:406:9\n+  --> $DIR/disallowed-positions.rs:410:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -358,1048 +358,1066 @@ LL |         { true && let 1 = 1 }\n    |         +                   +\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:415:9\n+  --> $DIR/disallowed-positions.rs:419:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:420:9\n+  --> $DIR/disallowed-positions.rs:424:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:424:9\n+  --> $DIR/disallowed-positions.rs:428:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:424:32\n+  --> $DIR/disallowed-positions.rs:428:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:433:9\n+  --> $DIR/disallowed-positions.rs:437:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:433:31\n+  --> $DIR/disallowed-positions.rs:437:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:439:9\n+  --> $DIR/disallowed-positions.rs:443:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:439:31\n+  --> $DIR/disallowed-positions.rs:443:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:445:9\n+  --> $DIR/disallowed-positions.rs:449:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:462:22\n+  --> $DIR/disallowed-positions.rs:466:22\n    |\n LL |     let x = (true && let y = 1);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:467:20\n+  --> $DIR/disallowed-positions.rs:471:20\n    |\n LL |         ([1, 2, 3][let _ = ()])\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:95:16\n+  --> $DIR/disallowed-positions.rs:475:20\n+   |\n+LL |     #[cfg(FALSE)] (let 0 = 1);\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:93:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:99:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:101:23\n+   |\n+LL |     use_expr!(true && let 0 = 1);\n+   |                       ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/disallowed-positions.rs:105:17\n+   |\n+LL |     noop_expr!((let 0 = 1));\n+   |                 ^^^\n+\n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:29:9\n+  --> $DIR/disallowed-positions.rs:27:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:29:9\n+  --> $DIR/disallowed-positions.rs:27:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:33:11\n+  --> $DIR/disallowed-positions.rs:31:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:33:11\n+  --> $DIR/disallowed-positions.rs:31:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:37:9\n+  --> $DIR/disallowed-positions.rs:35:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:37:9\n+  --> $DIR/disallowed-positions.rs:35:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:41:17\n+  --> $DIR/disallowed-positions.rs:39:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:41:17\n+  --> $DIR/disallowed-positions.rs:39:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:9\n+  --> $DIR/disallowed-positions.rs:43:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:9\n+  --> $DIR/disallowed-positions.rs:43:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:45:24\n+  --> $DIR/disallowed-positions.rs:43:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:45:24\n+  --> $DIR/disallowed-positions.rs:43:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:51:35\n+  --> $DIR/disallowed-positions.rs:49:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:51:35\n+  --> $DIR/disallowed-positions.rs:49:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:51:48\n+  --> $DIR/disallowed-positions.rs:49:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:51:35\n+  --> $DIR/disallowed-positions.rs:49:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:51:61\n+  --> $DIR/disallowed-positions.rs:49:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:51:35\n+  --> $DIR/disallowed-positions.rs:49:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:59:12\n+  --> $DIR/disallowed-positions.rs:57:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:59:12\n+  --> $DIR/disallowed-positions.rs:57:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:63:14\n+  --> $DIR/disallowed-positions.rs:61:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:63:14\n+  --> $DIR/disallowed-positions.rs:61:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:67:12\n+  --> $DIR/disallowed-positions.rs:65:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:67:12\n+  --> $DIR/disallowed-positions.rs:65:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:71:20\n+  --> $DIR/disallowed-positions.rs:69:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:71:20\n+  --> $DIR/disallowed-positions.rs:69:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:75:12\n+  --> $DIR/disallowed-positions.rs:73:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:75:12\n+  --> $DIR/disallowed-positions.rs:73:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:75:27\n+  --> $DIR/disallowed-positions.rs:73:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:75:27\n+  --> $DIR/disallowed-positions.rs:73:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:79:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:79:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:51\n+  --> $DIR/disallowed-positions.rs:79:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:79:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:64\n+  --> $DIR/disallowed-positions.rs:79:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:79:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:95:16\n+  --> $DIR/disallowed-positions.rs:93:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:95:16\n+  --> $DIR/disallowed-positions.rs:93:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:95:16\n+  --> $DIR/disallowed-positions.rs:93:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:95:16\n+  --> $DIR/disallowed-positions.rs:93:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:99:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:99:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:99:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:99:16\n+  --> $DIR/disallowed-positions.rs:97:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:106:9\n+  --> $DIR/disallowed-positions.rs:110:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:111:9\n+  --> $DIR/disallowed-positions.rs:115:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:114:9\n+  --> $DIR/disallowed-positions.rs:118:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:118:9\n+  --> $DIR/disallowed-positions.rs:122:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:128:9\n+  --> $DIR/disallowed-positions.rs:132:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:128:9\n+  --> $DIR/disallowed-positions.rs:132:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:134:16\n+  --> $DIR/disallowed-positions.rs:138:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:134:13\n+  --> $DIR/disallowed-positions.rs:138:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:137:17\n+  --> $DIR/disallowed-positions.rs:141:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:137:14\n+  --> $DIR/disallowed-positions.rs:141:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:140:25\n+  --> $DIR/disallowed-positions.rs:144:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:140:22\n+  --> $DIR/disallowed-positions.rs:144:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:143:25\n+  --> $DIR/disallowed-positions.rs:147:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:143:17\n+  --> $DIR/disallowed-positions.rs:147:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:147:12\n+  --> $DIR/disallowed-positions.rs:151:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:152:15\n+  --> $DIR/disallowed-positions.rs:156:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:152:15\n+  --> $DIR/disallowed-positions.rs:156:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:156:11\n+  --> $DIR/disallowed-positions.rs:160:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:156:11\n+  --> $DIR/disallowed-positions.rs:160:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:160:9\n+  --> $DIR/disallowed-positions.rs:164:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:160:9\n+  --> $DIR/disallowed-positions.rs:164:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:166:8\n+  --> $DIR/disallowed-positions.rs:170:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:170:8\n+  --> $DIR/disallowed-positions.rs:174:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:177:8\n+  --> $DIR/disallowed-positions.rs:181:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:185:8\n+  --> $DIR/disallowed-positions.rs:189:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:191:19\n+  --> $DIR/disallowed-positions.rs:195:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:197:12\n+  --> $DIR/disallowed-positions.rs:201:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:202:12\n+  --> $DIR/disallowed-positions.rs:206:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:205:12\n+  --> $DIR/disallowed-positions.rs:209:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:209:12\n+  --> $DIR/disallowed-positions.rs:213:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:219:12\n+  --> $DIR/disallowed-positions.rs:223:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:219:12\n+  --> $DIR/disallowed-positions.rs:223:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:225:19\n+  --> $DIR/disallowed-positions.rs:229:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:225:16\n+  --> $DIR/disallowed-positions.rs:229:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:228:20\n+  --> $DIR/disallowed-positions.rs:232:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:228:17\n+  --> $DIR/disallowed-positions.rs:232:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:231:28\n+  --> $DIR/disallowed-positions.rs:235:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:231:25\n+  --> $DIR/disallowed-positions.rs:235:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:234:28\n+  --> $DIR/disallowed-positions.rs:238:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:234:20\n+  --> $DIR/disallowed-positions.rs:238:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:238:15\n+  --> $DIR/disallowed-positions.rs:242:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:243:18\n+  --> $DIR/disallowed-positions.rs:247:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:243:18\n+  --> $DIR/disallowed-positions.rs:247:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:247:14\n+  --> $DIR/disallowed-positions.rs:251:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:247:14\n+  --> $DIR/disallowed-positions.rs:251:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:251:12\n+  --> $DIR/disallowed-positions.rs:255:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:251:12\n+  --> $DIR/disallowed-positions.rs:255:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:257:11\n+  --> $DIR/disallowed-positions.rs:261:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:261:11\n+  --> $DIR/disallowed-positions.rs:265:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:268:11\n+  --> $DIR/disallowed-positions.rs:272:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:276:11\n+  --> $DIR/disallowed-positions.rs:280:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:282:22\n+  --> $DIR/disallowed-positions.rs:286:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:298:6\n+  --> $DIR/disallowed-positions.rs:302:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:302:6\n+  --> $DIR/disallowed-positions.rs:306:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:305:6\n+  --> $DIR/disallowed-positions.rs:309:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:309:6\n+  --> $DIR/disallowed-positions.rs:313:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:319:6\n+  --> $DIR/disallowed-positions.rs:323:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:319:6\n+  --> $DIR/disallowed-positions.rs:323:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:325:13\n+  --> $DIR/disallowed-positions.rs:329:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:325:10\n+  --> $DIR/disallowed-positions.rs:329:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:328:14\n+  --> $DIR/disallowed-positions.rs:332:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:328:11\n+  --> $DIR/disallowed-positions.rs:332:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:331:22\n+  --> $DIR/disallowed-positions.rs:335:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:331:19\n+  --> $DIR/disallowed-positions.rs:335:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:336:9\n+  --> $DIR/disallowed-positions.rs:340:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:340:12\n+  --> $DIR/disallowed-positions.rs:344:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:340:12\n+  --> $DIR/disallowed-positions.rs:344:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:343:8\n+  --> $DIR/disallowed-positions.rs:347:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:343:8\n+  --> $DIR/disallowed-positions.rs:347:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:346:6\n+  --> $DIR/disallowed-positions.rs:350:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:346:6\n+  --> $DIR/disallowed-positions.rs:350:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:350:6\n+  --> $DIR/disallowed-positions.rs:354:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:355:6\n+  --> $DIR/disallowed-positions.rs:359:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:355:6\n+  --> $DIR/disallowed-positions.rs:359:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:373:6\n+  --> $DIR/disallowed-positions.rs:377:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:385:17\n+  --> $DIR/disallowed-positions.rs:389:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:390:17\n+  --> $DIR/disallowed-positions.rs:394:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:395:17\n+  --> $DIR/disallowed-positions.rs:399:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:406:17\n+  --> $DIR/disallowed-positions.rs:410:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:415:9\n+  --> $DIR/disallowed-positions.rs:419:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:415:9\n+  --> $DIR/disallowed-positions.rs:419:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:420:9\n+  --> $DIR/disallowed-positions.rs:424:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:420:9\n+  --> $DIR/disallowed-positions.rs:424:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:424:9\n+  --> $DIR/disallowed-positions.rs:428:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:424:9\n+  --> $DIR/disallowed-positions.rs:428:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:424:32\n+  --> $DIR/disallowed-positions.rs:428:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:424:32\n+  --> $DIR/disallowed-positions.rs:428:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:433:9\n+  --> $DIR/disallowed-positions.rs:437:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:433:9\n+  --> $DIR/disallowed-positions.rs:437:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:433:31\n+  --> $DIR/disallowed-positions.rs:437:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:433:31\n+  --> $DIR/disallowed-positions.rs:437:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:439:9\n+  --> $DIR/disallowed-positions.rs:443:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:439:9\n+  --> $DIR/disallowed-positions.rs:443:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:439:31\n+  --> $DIR/disallowed-positions.rs:443:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:439:31\n+  --> $DIR/disallowed-positions.rs:443:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:445:9\n+  --> $DIR/disallowed-positions.rs:449:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:445:9\n+  --> $DIR/disallowed-positions.rs:449:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:106:8\n+  --> $DIR/disallowed-positions.rs:110:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1411,27 +1429,27 @@ LL +     if let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:114:8\n+  --> $DIR/disallowed-positions.rs:118:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:118:8\n+  --> $DIR/disallowed-positions.rs:122:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:128:8\n+  --> $DIR/disallowed-positions.rs:132:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:128:19\n+  --> $DIR/disallowed-positions.rs:132:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -1448,7 +1466,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:147:8\n+  --> $DIR/disallowed-positions.rs:151:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1459,7 +1477,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:152:8\n+  --> $DIR/disallowed-positions.rs:156:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1468,7 +1486,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:156:8\n+  --> $DIR/disallowed-positions.rs:160:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1477,7 +1495,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:160:8\n+  --> $DIR/disallowed-positions.rs:164:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1486,7 +1504,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:166:12\n+  --> $DIR/disallowed-positions.rs:170:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1497,7 +1515,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:166:8\n+  --> $DIR/disallowed-positions.rs:170:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1506,7 +1524,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:170:12\n+  --> $DIR/disallowed-positions.rs:174:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1517,7 +1535,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:170:8\n+  --> $DIR/disallowed-positions.rs:174:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1526,7 +1544,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:177:12\n+  --> $DIR/disallowed-positions.rs:181:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1537,20 +1555,20 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:177:41\n+  --> $DIR/disallowed-positions.rs:181:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:177:41: 177:43]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:181:41: 181:43]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n    |                                         +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:177:8\n+  --> $DIR/disallowed-positions.rs:181:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1559,7 +1577,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:185:12\n+  --> $DIR/disallowed-positions.rs:189:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1570,7 +1588,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:185:44\n+  --> $DIR/disallowed-positions.rs:189:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1582,7 +1600,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:185:8\n+  --> $DIR/disallowed-positions.rs:189:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1591,15 +1609,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:124:20\n+  --> $DIR/disallowed-positions.rs:128:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:197:11\n+  --> $DIR/disallowed-positions.rs:201:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1611,27 +1629,27 @@ LL +     while let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:205:11\n+  --> $DIR/disallowed-positions.rs:209:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:209:11\n+  --> $DIR/disallowed-positions.rs:213:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:219:11\n+  --> $DIR/disallowed-positions.rs:223:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:219:22\n+  --> $DIR/disallowed-positions.rs:223:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -1648,7 +1666,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:238:11\n+  --> $DIR/disallowed-positions.rs:242:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1659,7 +1677,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:243:11\n+  --> $DIR/disallowed-positions.rs:247:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1668,7 +1686,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:247:11\n+  --> $DIR/disallowed-positions.rs:251:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1677,7 +1695,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:251:11\n+  --> $DIR/disallowed-positions.rs:255:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1686,7 +1704,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:257:15\n+  --> $DIR/disallowed-positions.rs:261:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1697,7 +1715,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:257:11\n+  --> $DIR/disallowed-positions.rs:261:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1706,7 +1724,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:261:15\n+  --> $DIR/disallowed-positions.rs:265:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1717,7 +1735,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:261:11\n+  --> $DIR/disallowed-positions.rs:265:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1726,7 +1744,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:268:15\n+  --> $DIR/disallowed-positions.rs:272:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1737,20 +1755,20 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:268:44\n+  --> $DIR/disallowed-positions.rs:272:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:268:44: 268:46]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:272:44: 272:46]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}\n    |                                            +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:268:11\n+  --> $DIR/disallowed-positions.rs:272:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1759,7 +1777,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:276:15\n+  --> $DIR/disallowed-positions.rs:280:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1770,7 +1788,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:276:47\n+  --> $DIR/disallowed-positions.rs:280:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1782,7 +1800,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:276:11\n+  --> $DIR/disallowed-positions.rs:280:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1791,35 +1809,35 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:215:23\n+  --> $DIR/disallowed-positions.rs:219:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:305:5\n+  --> $DIR/disallowed-positions.rs:309:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:309:5\n+  --> $DIR/disallowed-positions.rs:313:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:319:5\n+  --> $DIR/disallowed-positions.rs:323:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:319:16\n+  --> $DIR/disallowed-positions.rs:323:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n@@ -1836,7 +1854,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:350:10\n+  --> $DIR/disallowed-positions.rs:354:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1847,7 +1865,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:373:5\n+  --> $DIR/disallowed-positions.rs:377:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1856,14 +1874,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:315:17\n+  --> $DIR/disallowed-positions.rs:319:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 205 previous errors\n+error: aborting due to 208 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "deef4240d4da703551b71008170958b234585e98", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,4 +1,4 @@\n-#![feature(let_chains, let_else)]\n+#![feature(let_else)]\n \n fn main() {\n     let opt = Some(1i32);"}, {"sha": "2b407ef510c5211a90234a1f5e553d846ef7a2e0", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/db41351753df840773ca628d8daa040e95d00eef/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db41351753df840773ca628d8daa040e95d00eef/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=db41351753df840773ca628d8daa040e95d00eef", "patch": "@@ -1,62 +0,0 @@\n-// gate-test-let_chains\n-\n-// Here we test feature gating for \u00b4let_chains`.\n-// See `disallowed-positions.rs` for the grammar\n-// defining the language for gated allowed positions.\n-\n-#![allow(irrefutable_let_patterns)]\n-\n-use std::ops::Range;\n-\n-fn _if() {\n-    if let 0 = 1 {} // Stable!\n-\n-    if true && let 0 = 1 {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    if let 0 = 1 && true {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    if let Range { start: _, end: _ } = (true..true) && false {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    if let 1 = 1 && let true = { true } && false {\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR `let` expressions in this position are unstable [E0658]\n-    }\n-}\n-\n-fn _while() {\n-    while let 0 = 1 {} // Stable!\n-\n-    while true && let 0 = 1 {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    while let 0 = 1 && true {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-\n-    while let Range { start: _, end: _ } = (true..true) && false {}\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-}\n-\n-fn _macros() {\n-    macro_rules! noop_expr { ($e:expr) => {}; }\n-\n-    noop_expr!((let 0 = 1));\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR expected expression, found `let` statement\n-\n-    macro_rules! use_expr {\n-        ($e:expr) => {\n-            if $e {}\n-            while $e {}\n-        }\n-    }\n-    #[cfg(FALSE)] (let 0 = 1);\n-    //~^ ERROR `let` expressions in this position are unstable [E0658]\n-    //~| ERROR expected expression, found `let` statement\n-    use_expr!(let 0 = 1);\n-    //~^ ERROR no rules expected the token `let`\n-}\n-\n-fn main() {}"}, {"sha": "feea1c254d8da844f8c4fee012e93c21e2c5781f", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/db41351753df840773ca628d8daa040e95d00eef/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db41351753df840773ca628d8daa040e95d00eef/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=db41351753df840773ca628d8daa040e95d00eef", "patch": "@@ -1,114 +0,0 @@\n-error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:55:20\n-   |\n-LL |     #[cfg(FALSE)] (let 0 = 1);\n-   |                    ^^^\n-\n-error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:45:17\n-   |\n-LL |     noop_expr!((let 0 = 1));\n-   |                 ^^^\n-\n-error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:58:15\n-   |\n-LL |     macro_rules! use_expr {\n-   |     --------------------- when calling this macro\n-...\n-LL |     use_expr!(let 0 = 1);\n-   |               ^^^ no rules expected this token in macro call\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:14:16\n-   |\n-LL |     if true && let 0 = 1 {}\n-   |                ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:17:8\n-   |\n-LL |     if let 0 = 1 && true {}\n-   |        ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:20:8\n-   |\n-LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:23:8\n-   |\n-LL |     if let 1 = 1 && let true = { true } && false {\n-   |        ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:23:21\n-   |\n-LL |     if let 1 = 1 && let true = { true } && false {\n-   |                     ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:32:19\n-   |\n-LL |     while true && let 0 = 1 {}\n-   |                   ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:35:11\n-   |\n-LL |     while let 0 = 1 && true {}\n-   |           ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:38:11\n-   |\n-LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:55:20\n-   |\n-LL |     #[cfg(FALSE)] (let 0 = 1);\n-   |                    ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/feature-gate.rs:45:17\n-   |\n-LL |     noop_expr!((let 0 = 1));\n-   |                 ^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error: aborting due to 13 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7bc6d43a7276a90bb16e565a1550946105dcccb9", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_chains)]\n-\n fn main() {\n     let _opt = Some(1i32);\n "}, {"sha": "d1552a0b2d5ad2d3214a6073d95e77b489d5fbad", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,35 +1,35 @@\n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:8:19\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:6:19\n    |\n LL |         let _ = &&let Some(x) = Some(42);\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:47\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:11:47\n    |\n LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n    |                                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:57\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:11:57\n    |\n LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n    |                                                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:23:23\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:21:23\n    |\n LL |             [1, 2, 3][let _ = ()];\n    |                       ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:32:47\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:30:47\n    |\n LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = ()] = 1 {\n    |                                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:40:21\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:38:21\n    |\n LL |             let x = let y = 1;\n    |                     ^^^"}, {"sha": "1ef4bc56e52521b3f569fd81271f1a26dadd0de1", "filename": "src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,7 +1,7 @@\n // revisions: allowed disallowed\n //[allowed] check-pass\n \n-#![feature(if_let_guard, let_chains)]\n+#![feature(if_let_guard)]\n #![cfg_attr(allowed, allow(irrefutable_let_patterns))]\n #![cfg_attr(disallowed, deny(irrefutable_let_patterns))]\n "}, {"sha": "34302ba96d3a2437fbc59824b9818c0847872b1d", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-90722.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(let_chains)]\n-\n fn main() {\n     let x = Some(vec![\"test\"]);\n "}, {"sha": "6938062fa35f04a0d51ae00b0ee2b64b68451e27", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-92145.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(let_chains)]\n-\n fn main() {\n     let opt = Some(\"foo bar\");\n "}, {"sha": "f6de37867d85566b84fb0266c0fe5e5f7101faa9", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-93150.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -2,7 +2,6 @@ fn main() {\n     match true {\n         _ if let true = true && true => {}\n         //~^ ERROR `if let` guards are\n-        //~| ERROR `let` expressions in this\n         _ => {}\n     }\n }"}, {"sha": "0d620df96f6105ec0084baa5ced17c10554f1618", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-93150.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.stderr?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -8,15 +8,6 @@ LL |         _ if let true = true && true => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n-error[E0658]: `let` expressions in this position are unstable\n-  --> $DIR/issue-93150.rs:3:14\n-   |\n-LL |         _ if let true = true && true => {}\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n-   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "beaca33d5636401c0e043576f2529e1ca7556ded", "filename": "src/test/ui/rfc-2497-if-let-chains/then-else-blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(if_let_guard, let_chains)]\n+#![feature(if_let_guard)]\n \n fn check_if_let(opt: Option<Option<Option<i32>>>, value: i32) -> bool {\n     if let Some(first) = opt"}, {"sha": "fe69284ab10e422cc443dc618a5ac235b42ddc6a", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,4 +1,4 @@\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "884baaea0292693193dbaa12edcaada6968824c6", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -4,7 +4,7 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(lint_reasons)]\n #![feature(never_type)]"}, {"sha": "0089e1b64006fa3d4967484faf3f284f86efb429", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,7 +1,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n-#![feature(let_chains)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "4c98e1827bdbbf56f1c1caea2f8ede273ee7ed90", "filename": "src/tools/clippy/tests/ui/needless_late_init.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(let_chains)]\n #![allow(\n     unused,\n     clippy::assign_op_pattern,"}, {"sha": "25e1e0214fb443bd1264042d918c0f9b2ee7a0be", "filename": "src/tools/clippy/tests/ui/needless_late_init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(let_chains)]\n #![allow(\n     unused,\n     clippy::assign_op_pattern,"}, {"sha": "97f0f7019a9df0f24e99c3b3368dd8fa0a9154b2", "filename": "src/tools/clippy/tests/ui/needless_late_init.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/353d0180bb044a99178daa99e394c7ca3c1ebf48/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr?ref=353d0180bb044a99178daa99e394c7ca3c1ebf48", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:23:5\n+  --> $DIR/needless_late_init.rs:22:5\n    |\n LL |     let a;\n    |     ^^^^^^ created here\n@@ -13,7 +13,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:26:5\n+  --> $DIR/needless_late_init.rs:25:5\n    |\n LL |     let b;\n    |     ^^^^^^ created here\n@@ -27,7 +27,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:27:5\n+  --> $DIR/needless_late_init.rs:26:5\n    |\n LL |     let c;\n    |     ^^^^^^ created here\n@@ -41,7 +41,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:31:5\n+  --> $DIR/needless_late_init.rs:30:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^ created here\n@@ -54,7 +54,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:34:5\n+  --> $DIR/needless_late_init.rs:33:5\n    |\n LL |     let e;\n    |     ^^^^^^ created here\n@@ -67,7 +67,7 @@ LL |     let e = format!(\"{}\", d);\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:39:5\n+  --> $DIR/needless_late_init.rs:38:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -88,7 +88,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:48:5\n+  --> $DIR/needless_late_init.rs:47:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -109,7 +109,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:55:5\n+  --> $DIR/needless_late_init.rs:54:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -130,7 +130,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:63:5\n+  --> $DIR/needless_late_init.rs:62:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -151,7 +151,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:70:5\n+  --> $DIR/needless_late_init.rs:69:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -167,7 +167,7 @@ LL +         1 => \"three\",\n    |\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:76:5\n+  --> $DIR/needless_late_init.rs:75:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -187,7 +187,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:84:5\n+  --> $DIR/needless_late_init.rs:83:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -201,7 +201,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:88:5\n+  --> $DIR/needless_late_init.rs:87:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -215,7 +215,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:92:5\n+  --> $DIR/needless_late_init.rs:91:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -229,7 +229,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:111:5\n+  --> $DIR/needless_late_init.rs:110:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -250,7 +250,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:128:5\n+  --> $DIR/needless_late_init.rs:127:5\n    |\n LL |     let a;\n    |     ^^^^^^"}]}