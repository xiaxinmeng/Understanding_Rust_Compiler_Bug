{"sha": "7eefed392f926958233529f6c1307aa007802046", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZWZlZDM5MmY5MjY5NTgyMzM1MjlmNmMxMzA3YWEwMDc4MDIwNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-13T03:04:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-13T03:04:49Z"}, "message": "Auto merge of #44456 - eddyb:stable-drop-const, r=nikomatsakis\n\nStabilize drop_types_in_const.\n\nCloses #33156, stabilizing the new, revised, rules, and improving the error message.\n\nr? @nikomatsakis cc @SergioBenitez", "tree": {"sha": "8a0c1c0eadc78a7d786bc2ccc20c73a1cb6f6988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0c1c0eadc78a7d786bc2ccc20c73a1cb6f6988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eefed392f926958233529f6c1307aa007802046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eefed392f926958233529f6c1307aa007802046", "html_url": "https://github.com/rust-lang/rust/commit/7eefed392f926958233529f6c1307aa007802046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eefed392f926958233529f6c1307aa007802046/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fdccaffe632e316c43224d0fae6fba903333aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdccaffe632e316c43224d0fae6fba903333aa3", "html_url": "https://github.com/rust-lang/rust/commit/2fdccaffe632e316c43224d0fae6fba903333aa3"}, {"sha": "5601ae4b72ff7763735b3881d443a0755005f8eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5601ae4b72ff7763735b3881d443a0755005f8eb", "html_url": "https://github.com/rust-lang/rust/commit/5601ae4b72ff7763735b3881d443a0755005f8eb"}], "stats": {"total": 250, "additions": 39, "deletions": 211}, "files": [{"sha": "4b71a429f847a39c36d73e4679bbbb028be21658", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -431,29 +431,6 @@ Remember this solution is unsafe! You will have to ensure that accesses to the\n cell are synchronized.\n \"##,\n \n-E0493: r##\"\n-A type with a destructor was assigned to an invalid type of variable. Erroneous\n-code example:\n-\n-```compile_fail,E0493\n-struct Foo {\n-    a: u32\n-}\n-\n-impl Drop for Foo {\n-    fn drop(&mut self) {}\n-}\n-\n-const F : Foo = Foo { a : 0 };\n-// error: constants are not allowed to have destructors\n-static S : Foo = Foo { a : 0 };\n-// error: destructors in statics are an unstable feature\n-```\n-\n-To solve this issue, please use a type which does allow the usage of type with\n-destructors.\n-\"##,\n-\n E0494: r##\"\n A reference of an interior static was assigned to another const/static.\n Erroneous code example:\n@@ -991,6 +968,7 @@ fn print_fancy_ref(fancy_ref: &FancyNum){\n }\n \n register_diagnostics! {\n+    E0493, // destructors cannot be evaluated at compile-time\n     E0524, // two closures require unique access to `..` at the same time\n     E0526, // shuffle indices are not constant\n     E0625, // thread-local statics cannot be accessed at compile-time"}, {"sha": "f8c26dc99c633fc062d228676432dff4457ab8ff", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 16, "deletions": 132, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -18,7 +18,6 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::hir;\n-use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::traits::{self, Reveal};\n@@ -197,91 +196,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         self.add(original);\n     }\n \n-    /// Check for NEEDS_DROP (from an ADT or const fn call) and\n-    /// error, unless we're in a function.\n-    fn always_deny_drop(&self) {\n-        self.deny_drop_with_feature_gate_override(false);\n-    }\n-\n-    /// Check for NEEDS_DROP (from an ADT or const fn call) and\n-    /// error, unless we're in a function, or the feature-gate\n-    /// for constant with destructors is enabled.\n-    fn deny_drop(&self) {\n-        self.deny_drop_with_feature_gate_override(true);\n-    }\n-\n-    fn deny_drop_with_feature_gate_override(&self, allow_gate: bool) {\n-        if self.mode == Mode::Fn || !self.qualif.intersects(Qualif::NEEDS_DROP) {\n-            return;\n-        }\n-\n-        // Constants allow destructors, but they're feature-gated.\n-        let msg = if allow_gate {\n-            // Feature-gate for constant with destructors is enabled.\n-            if self.tcx.sess.features.borrow().drop_types_in_const {\n-                return;\n-            }\n-\n-            // This comes from a macro that has #[allow_internal_unstable].\n-            if self.span.allows_unstable() {\n-                return;\n-            }\n-\n-            format!(\"destructors in {}s are an unstable feature\",\n-                    self.mode)\n-        } else {\n-            format!(\"{}s are not allowed to have destructors\",\n-                    self.mode)\n-        };\n-\n-        let mut err =\n-            struct_span_err!(self.tcx.sess, self.span, E0493, \"{}\", msg);\n-\n-        if allow_gate {\n-            help!(&mut err,\n-                  \"in Nightly builds, add `#![feature(drop_types_in_const)]` \\\n-                   to the crate attributes to enable\");\n-        } else {\n-            // FIXME(eddyb) this looks up `self.mir.return_ty`.\n-            // We probably want the actual return type here, if at all.\n-            self.find_drop_implementation_method_span()\n-                .map(|span| err.span_label(span, \"destructor defined here\"));\n-\n-            err.span_label(self.span,\n-                format!(\"{}s cannot have destructors\", self.mode));\n-        }\n-\n-        err.emit();\n-    }\n-\n-    fn find_drop_implementation_method_span(&self) -> Option<Span> {\n-        self.tcx.lang_items()\n-            .drop_trait()\n-            .and_then(|drop_trait_id| {\n-                let mut span = None;\n-\n-                self.tcx\n-                    .for_each_relevant_impl(drop_trait_id, self.mir.return_ty, |impl_did| {\n-                        self.tcx.hir\n-                            .as_local_node_id(impl_did)\n-                            .and_then(|impl_node_id| self.tcx.hir.find(impl_node_id))\n-                            .map(|node| {\n-                                if let hir_map::NodeItem(item) = node {\n-                                    if let hir::ItemImpl(.., ref impl_item_refs) = item.node {\n-                                        span = impl_item_refs.first()\n-                                                             .map(|iiref| {\n-                                                                 self.tcx.hir.impl_item(iiref.id)\n-                                                                             .span\n-                                                             });\n-                                    }\n-                                }\n-                            });\n-                    });\n-\n-                span\n-            })\n-    }\n-\n     /// Check if an Lvalue with the current qualifications could\n     /// be consumed, by either an operand or a Deref projection.\n     fn try_consume(&mut self) -> bool {\n@@ -458,25 +372,17 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             }\n         }\n \n-        let return_ty = mir.return_ty;\n         self.qualif = self.return_qualif.unwrap_or(Qualif::NOT_CONST);\n \n-        match self.mode {\n-            Mode::StaticMut => {\n-                // Check for destructors in static mut.\n-                self.add_type(return_ty);\n-                self.deny_drop();\n-            }\n-            _ => {\n-                // Account for errors in consts by using the\n-                // conservative type qualification instead.\n-                if self.qualif.intersects(Qualif::CONST_ERROR) {\n-                    self.qualif = Qualif::empty();\n-                    self.add_type(return_ty);\n-                }\n-            }\n+        // Account for errors in consts by using the\n+        // conservative type qualification instead.\n+        if self.qualif.intersects(Qualif::CONST_ERROR) {\n+            self.qualif = Qualif::empty();\n+            let return_ty = mir.return_ty;\n+            self.add_type(return_ty);\n         }\n \n+\n         // Collect all the temps we need to promote.\n         let mut promoted_temps = IdxSetBuf::new_empty(self.temp_promotion_state.len());\n \n@@ -640,12 +546,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         // with type parameters, take it into account.\n                         self.qualif.restrict(ty, self.tcx, self.param_env);\n                     }\n-\n-                    // Let `const fn` transitively have destructors,\n-                    // but they do get stopped in `const` or `static`.\n-                    if self.mode != Mode::ConstFn {\n-                        self.deny_drop();\n-                    }\n                 }\n             }\n         }\n@@ -690,12 +590,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     let allow = if self.mode == Mode::StaticMut {\n                         // Inside a `static mut`, &mut [...] is also allowed.\n                         match ty.sty {\n-                            ty::TyArray(..) | ty::TySlice(_) => {\n-                                // Mutating can expose drops, be conservative.\n-                                self.add_type(ty);\n-                                self.deny_drop();\n-                                true\n-                            }\n+                            ty::TyArray(..) | ty::TySlice(_) => true,\n                             _ => false\n                         }\n                     } else if let ty::TyArray(_, len) = ty.sty {\n@@ -798,18 +693,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 if let AggregateKind::Adt(def, ..) = **kind {\n                     if def.has_dtor(self.tcx) {\n                         self.add(Qualif::NEEDS_DROP);\n-                        self.deny_drop();\n                     }\n \n                     if Some(def.did) == self.tcx.lang_items().unsafe_cell_type() {\n                         let ty = rvalue.ty(self.mir, self.tcx);\n                         self.add_type(ty);\n                         assert!(self.qualif.intersects(Qualif::MUTABLE_INTERIOR));\n-                        // Even if the value inside may not need dropping,\n-                        // mutating it would change that.\n-                        if !self.qualif.intersects(Qualif::NOT_CONST) {\n-                            self.deny_drop();\n-                        }\n                     }\n                 }\n             }\n@@ -919,12 +808,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     let ty = dest.ty(self.mir, tcx).to_ty(tcx);\n                     self.qualif = Qualif::empty();\n                     self.add_type(ty);\n-\n-                    // Let `const fn` transitively have destructors,\n-                    // but they do get stopped in `const` or `static`.\n-                    if self.mode != Mode::ConstFn {\n-                        self.deny_drop();\n-                    }\n                 }\n                 self.assign(dest, location);\n             }\n@@ -942,14 +825,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 };\n \n                 if let Some(span) = needs_drop {\n+                    // Double-check the type being dropped, to minimize false positives.\n                     let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n-                    self.add_type(ty);\n-\n-                    // Use the original assignment span to be more precise.\n-                    let old_span = self.span;\n-                    self.span = span;\n-                    self.always_deny_drop();\n-                    self.span = old_span;\n+                    if ty.needs_drop(self.tcx, self.param_env) {\n+                        struct_span_err!(self.tcx.sess, span, E0493,\n+                                         \"destructors cannot be evaluated at compile-time\")\n+                            .span_label(span, format!(\"{}s cannot evaluate destructors\",\n+                                                      self.mode))\n+                            .emit();\n+                    }\n                 }\n             }\n         } else {"}, {"sha": "3d4ded2ae815fd03d0a9bbc7813e57cb267c1c7e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -269,9 +269,6 @@ declare_features! (\n     // impl specialization (RFC 1210)\n     (active, specialization, \"1.7.0\", Some(31844)),\n \n-    // Allow Drop types in statics/const functions (RFC 1440)\n-    (active, drop_types_in_const, \"1.9.0\", Some(33156)),\n-\n     // Allows cfg(target_has_atomic = \"...\").\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976)),\n \n@@ -469,6 +466,8 @@ declare_features! (\n     (accepted, compile_error, \"1.20.0\", Some(40872)),\n     // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n     (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865)),\n+    // Allow Drop types in constants (RFC 1440)\n+    (accepted, drop_types_in_const, \"1.22.0\", Some(33156)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "37f665960c8c821aada4c30e4382363ca050b46d", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -10,8 +10,6 @@\n \n // Verifies all possible restrictions for statics values.\n \n-// gate-test-drop_types_in_const\n-\n #![allow(warnings)]\n #![feature(box_syntax)]\n \n@@ -37,15 +35,8 @@ enum SafeEnum {\n // These should be ok\n static STATIC1: SafeEnum = SafeEnum::Variant1;\n static STATIC2: SafeEnum = SafeEnum::Variant2(0);\n-\n-// This one should fail\n static STATIC3: SafeEnum = SafeEnum::Variant3(WithDtor);\n-//~^ ERROR destructors in statics are an unstable feature\n-\n \n-// This enum will be used to test that variants\n-// are considered unsafe if their enum type implements\n-// a destructor.\n enum UnsafeEnum {\n     Variant5,\n     Variant6(isize)\n@@ -57,9 +48,7 @@ impl Drop for UnsafeEnum {\n \n \n static STATIC4: UnsafeEnum = UnsafeEnum::Variant5;\n-//~^ ERROR destructors in statics are an unstable feature\n static STATIC5: UnsafeEnum = UnsafeEnum::Variant6(0);\n-//~^ ERROR destructors in statics are an unstable feature\n \n \n struct SafeStruct {\n@@ -71,10 +60,8 @@ struct SafeStruct {\n // Struct fields are safe, hence this static should be safe\n static STATIC6: SafeStruct = SafeStruct{field1: SafeEnum::Variant1, field2: SafeEnum::Variant2(0)};\n \n-// field2 has an unsafe value, hence this should fail\n static STATIC7: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n                                         field2: SafeEnum::Variant3(WithDtor)};\n-//~^ ERROR destructors in statics are an unstable feature\n \n // Test variadic constructor for structs. The base struct should be examined\n // as well as every field present in the constructor.\n@@ -86,8 +73,7 @@ static STATIC8: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n // This example should fail because field1 in the base struct is not safe\n static STATIC9: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n                                         ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n-//~^ ERROR destructors in statics are an unstable feature\n-//~| ERROR statics are not allowed to have destructors\n+//~^ ERROR destructors cannot be evaluated at compile-time\n                                                      field2: SafeEnum::Variant1}};\n \n struct UnsafeStruct;\n@@ -96,29 +82,19 @@ impl Drop for UnsafeStruct {\n     fn drop(&mut self) {}\n }\n \n-// Types with destructors are not allowed for statics\n static STATIC10: UnsafeStruct = UnsafeStruct;\n-//~^ ERROR destructors in statics are an unstable feature\n \n struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n //~^ ERROR allocations are not allowed in statics\n \n-// The following examples test that mutable structs are just forbidden\n-// to have types with destructors\n-// These should fail\n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n-//~^ ERROR destructors in statics are an unstable feature\n-//~^^ ERROR destructors in statics are an unstable feature\n \n static mut STATIC13: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n-//~^ ERROR destructors in statics are an unstable feature\n                                              field2: SafeEnum::Variant3(WithDtor)};\n-//~^ ERROR: destructors in statics are an unstable feature\n \n static mut STATIC14: SafeStruct = SafeStruct {\n-//~^ ERROR destructors in statics are an unstable feature\n     field1: SafeEnum::Variant1,\n     field2: SafeEnum::Variant4(\"str\".to_string())\n //~^ ERROR calls in statics are limited to constant functions\n@@ -135,7 +111,6 @@ static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n );\n \n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n-//~^ ERROR destructors in statics are an unstable feature\n \n static STATIC19: Box<isize> =\n     box 3;"}, {"sha": "0fd31454596e645ece7c87be14ea4a34f29f3518", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn, drop_types_in_const)]\n+#![feature(const_fn)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n // On platforms *without* `#[thread_local]`, use"}, {"sha": "f10531e407d621ef1f18c98affbcebed700ba14d", "filename": "src/test/compile-fail/issue-43733.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn, drop_types_in_const)]\n+#![feature(const_fn)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n type Foo = std::cell::RefCell<String>;"}, {"sha": "c96cadece97a5bc50c115d7672f6db6fcf976014", "filename": "src/test/compile-fail/static-drop-scope.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -8,26 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(drop_types_in_const)]\n-\n struct WithDtor;\n \n impl Drop for WithDtor {\n     fn drop(&mut self) {}\n }\n \n static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n-//~^ ERROR statics are not allowed to have destructors\n+//~^ ERROR destructors cannot be evaluated at compile-time\n //~| ERROR borrowed value does not live long enoug\n \n const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n-//~^ ERROR constants are not allowed to have destructors\n+//~^ ERROR destructors cannot be evaluated at compile-time\n //~| ERROR borrowed value does not live long enoug\n \n static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n-//~^ ERROR statics are not allowed to have destructors\n+//~^ ERROR destructors cannot be evaluated at compile-time\n \n const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n-//~^ ERROR constants are not allowed to have destructors\n+//~^ ERROR destructors cannot be evaluated at compile-time\n \n fn main () {}"}, {"sha": "5cc3384f554d3a2e1f29544cce50590a8b039319", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-drop_types_in_const\n-\n #![feature(box_syntax)]\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR destructors in statics are an unstable feature\n //~| WARN: constant evaluation error\n \n fn main() {}"}, {"sha": "ca0b222050e215d15c82cb0578382762375de914", "filename": "src/test/run-pass/issue-17718-const-destructors.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Fissue-17718-const-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Fissue-17718-const-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-const-destructors.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -14,6 +14,5 @@ impl Drop for A {\n }\n \n const FOO: A = A;\n-//~^ ERROR: destructors in constants are an unstable feature\n \n fn main() {}", "previous_filename": "src/test/compile-fail/issue-17718-const-destructors.rs"}, {"sha": "81c455241475269d33f598d7e50575518a83e91e", "filename": "src/test/run-pass/issue-34053.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Fissue-34053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Fissue-34053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34053.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(drop_types_in_const)]\n-\n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n \n static DROP_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;"}, {"sha": "b857465aabc1d150b1ddb9acfee5d8c70b891aaf", "filename": "src/test/run-pass/issue-9243.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Fissue-9243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Fissue-9243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9243.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -15,7 +15,6 @@ pub struct Test {\n }\n \n pub static g_test: Test = Test {mem: 0};\n-//~^ ERROR destructors in statics are an unstable feature\n \n impl Drop for Test {\n     fn drop(&mut self) {}", "previous_filename": "src/test/compile-fail/issue-9243.rs"}, {"sha": "6295c6120c5ba13d73667b686750bf8396e7d3ef", "filename": "src/test/run-pass/union/union-nodrop.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Funion%2Funion-nodrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Frun-pass%2Funion%2Funion-nodrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-nodrop.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -16,9 +16,15 @@\n \n use std::intrinsics::needs_drop;\n \n-// drop types in destructors should not require\n-// drop_types_in_const\n-static X: Option<NoDrop<Box<u8>>> = None;\n+struct NeedDrop;\n+\n+impl Drop for NeedDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+// Constant expressios allow `NoDrop` to go out of scope,\n+// unlike a value of the interior type implementing `Drop`.\n+static X: () = (NoDrop { inner: NeedDrop }, ()).1;\n \n // A union that scrubs the drop glue from its inner type\n union NoDrop<T> {inner: T}"}, {"sha": "7915564cafb0aabc20aec57803afcb942ee4e237", "filename": "src/test/ui/span/E0493.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.rs?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(drop_types_in_const)]\n-\n struct Foo {\n     a: u32\n }"}, {"sha": "d7996eaef3a4b4dd382faf43901c0739bffdbf35", "filename": "src/test/ui/span/E0493.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eefed392f926958233529f6c1307aa007802046/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.stderr?ref=7eefed392f926958233529f6c1307aa007802046", "patch": "@@ -1,11 +1,8 @@\n-error[E0493]: constants are not allowed to have destructors\n-  --> $DIR/E0493.rs:29:17\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/E0493.rs:27:17\n    |\n-18 |     fn drop(&mut self) {}\n-   |     --------------------- destructor defined here\n-...\n-29 | const F : Foo = (Foo { a : 0 }, Foo { a : 1 }).1;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constants cannot have destructors\n+27 | const F : Foo = (Foo { a : 0 }, Foo { a : 1 }).1;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constants cannot evaluate destructors\n \n error: aborting due to previous error\n "}]}