{"sha": "472317c00870c007f552cde1f3c490e04f29919a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjMxN2MwMDg3MGMwMDdmNTUyY2RlMWYzYzQ5MGUwNGYyOTkxOWE=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T04:23:16Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T06:08:59Z"}, "message": "internal: Record mismatches of pattern types.", "tree": {"sha": "455a53dc4116db12573a943519b24741b131cd51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/455a53dc4116db12573a943519b24741b131cd51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472317c00870c007f552cde1f3c490e04f29919a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472317c00870c007f552cde1f3c490e04f29919a", "html_url": "https://github.com/rust-lang/rust/commit/472317c00870c007f552cde1f3c490e04f29919a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472317c00870c007f552cde1f3c490e04f29919a/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "html_url": "https://github.com/rust-lang/rust/commit/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034"}], "stats": {"total": 104, "additions": 93, "deletions": 11}, "files": [{"sha": "a50ad6b09d263f8edcf654da10a14d17a0bc8a05", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=472317c00870c007f552cde1f3c490e04f29919a", "patch": "@@ -211,7 +211,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         // FIXME: Due to shortcomings in the current type system implementation, only emit this\n         // diagnostic if there are no type mismatches in the containing function.\n-        if self.infer.type_mismatches.iter().next().is_some() {\n+        if self.infer.expr_type_mismatches().next().is_some() {\n             return;\n         }\n "}, {"sha": "0ee851a74c79e0b2c8f1707407796478c1d65d9f", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=472317c00870c007f552cde1f3c490e04f29919a", "patch": "@@ -137,8 +137,12 @@ pub struct InferenceResult {\n     assoc_resolutions: FxHashMap<ExprOrPatId, AssocItemId>,\n     diagnostics: Vec<InferenceDiagnostic>,\n     pub type_of_expr: ArenaMap<ExprId, Ty>,\n+    /// For each pattern record the type it resolves to.\n+    ///\n+    /// **Note**: When a pattern type is resolved it may still contain\n+    /// unresolved or missing subpatterns or subpatterns of mismatched types.\n     pub type_of_pat: ArenaMap<PatId, Ty>,\n-    pub(super) type_mismatches: ArenaMap<ExprId, TypeMismatch>,\n+    type_mismatches: FxHashMap<ExprOrPatId, TypeMismatch>,\n     /// Interned Unknown to return references to.\n     standard_types: InternedStandardTypes,\n }\n@@ -163,7 +167,22 @@ impl InferenceResult {\n         self.assoc_resolutions.get(&id.into()).copied()\n     }\n     pub fn type_mismatch_for_expr(&self, expr: ExprId) -> Option<&TypeMismatch> {\n-        self.type_mismatches.get(expr)\n+        self.type_mismatches.get(&expr.into())\n+    }\n+    pub fn type_mismatch_for_pat(&self, pat: PatId) -> Option<&TypeMismatch> {\n+        self.type_mismatches.get(&pat.into())\n+    }\n+    pub fn expr_type_mismatches(&self) -> impl Iterator<Item = (ExprId, &TypeMismatch)> {\n+        self.type_mismatches.iter().filter_map(|(expr_or_pat, mismatch)| match *expr_or_pat {\n+            ExprOrPatId::ExprId(expr) => Some((expr, mismatch)),\n+            _ => None,\n+        })\n+    }\n+    pub fn pat_type_mismatches(&self) -> impl Iterator<Item = (PatId, &TypeMismatch)> {\n+        self.type_mismatches.iter().filter_map(|(expr_or_pat, mismatch)| match *expr_or_pat {\n+            ExprOrPatId::PatId(pat) => Some((pat, mismatch)),\n+            _ => None,\n+        })\n     }\n     pub fn add_diagnostics(\n         &self,"}, {"sha": "7278faeec08299451d84342cb8a8951cb5a7efae", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=472317c00870c007f552cde1f3c490e04f29919a", "patch": "@@ -42,7 +42,7 @@ impl<'a> InferenceContext<'a> {\n         let could_unify = self.unify(&ty, &expected.ty);\n         if !could_unify {\n             self.result.type_mismatches.insert(\n-                tgt_expr,\n+                tgt_expr.into(),\n                 TypeMismatch { expected: expected.ty.clone(), actual: ty.clone() },\n             );\n         }\n@@ -54,9 +54,10 @@ impl<'a> InferenceContext<'a> {\n     pub(super) fn infer_expr_coerce(&mut self, expr: ExprId, expected: &Expectation) -> Ty {\n         let ty = self.infer_expr_inner(expr, &expected);\n         let ty = if !self.coerce(&ty, &expected.coercion_target()) {\n-            self.result\n-                .type_mismatches\n-                .insert(expr, TypeMismatch { expected: expected.ty.clone(), actual: ty.clone() });\n+            self.result.type_mismatches.insert(\n+                expr.into(),\n+                TypeMismatch { expected: expected.ty.clone(), actual: ty.clone() },\n+            );\n             // Return actual type when type mismatch.\n             // This is needed for diagnostic when return type mismatch.\n             ty"}, {"sha": "b15f4977dd950f8789f519014e6c6ba367c22dfb", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=472317c00870c007f552cde1f3c490e04f29919a", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n };\n use hir_expand::name::Name;\n \n-use super::{BindingMode, Expectation, InferenceContext};\n+use super::{BindingMode, Expectation, InferenceContext, TypeMismatch};\n use crate::{\n     lower::lower_to_chalk_mutability, static_lifetime, Interner, Substitution, Ty, TyBuilder,\n     TyExt, TyKind,\n@@ -266,7 +266,10 @@ impl<'a> InferenceContext<'a> {\n         // use a new type variable if we got error type here\n         let ty = self.insert_type_vars_shallow(ty);\n         if !self.unify(&ty, expected) {\n-            // FIXME record mismatch, we need to change the type of self.type_mismatches for that\n+            self.result.type_mismatches.insert(\n+                pat.into(),\n+                TypeMismatch { expected: expected.clone(), actual: ty.clone() },\n+            );\n         }\n         let ty = self.resolve_ty_as_possible(ty);\n         self.write_pat_ty(pat, ty.clone());"}, {"sha": "cc819373c6b8556ef16e1cb9383239e1662b8561", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=472317c00870c007f552cde1f3c490e04f29919a", "patch": "@@ -130,7 +130,10 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                 }\n                 Err(SyntheticSyntax) => continue,\n             };\n-            types.push((syntax_ptr, ty));\n+            types.push((syntax_ptr.clone(), ty));\n+            if let Some(mismatch) = inference_result.type_mismatch_for_pat(pat) {\n+                mismatches.push((syntax_ptr, mismatch));\n+            }\n         }\n \n         for (expr, ty) in inference_result.type_of_expr.iter() {"}, {"sha": "ddbadbe400751b5b6227ef5364c5b873b4bce118", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472317c00870c007f552cde1f3c490e04f29919a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=472317c00870c007f552cde1f3c490e04f29919a", "patch": "@@ -546,7 +546,9 @@ fn infer_const_pattern() {\n             273..276 'Bar': usize\n             280..283 'Bar': usize\n             200..223: expected (), got Foo\n+            211..214: expected (), got Foo\n             262..285: expected (), got usize\n+            273..276: expected (), got usize\n         \"#]],\n     );\n }\n@@ -703,7 +705,7 @@ fn box_pattern() {\n \n #[test]\n fn tuple_ellipsis_pattern() {\n-    check_infer(\n+    check_infer_with_mismatches(\n         r#\"\n fn foo(tuple: (u8, i16, f32)) {\n     match tuple {\n@@ -744,6 +746,8 @@ fn foo(tuple: (u8, i16, f32)) {\n             186..200 '{/*too long*/}': ()\n             209..210 '_': (u8, i16, f32)\n             214..216 '{}': ()\n+            136..142: expected (u8, i16, f32), got (u8, i16)\n+            170..182: expected (u8, i16, f32), got (u8, i16, f32, _)\n         \"#]],\n     );\n }\n@@ -851,3 +855,55 @@ fn f(e: Enum) {\n     \"#,\n     )\n }\n+\n+#[test]\n+fn type_mismatch_in_or_pattern() {\n+    check_infer_with_mismatches(\n+        r#\"\n+fn main() {\n+    match (false,) {\n+        (true | (),) => {}\n+        (() | true,) => {}\n+        (_ | (),) => {}\n+        (() | _,) => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            10..142 '{     ...   } }': ()\n+            16..140 'match ...     }': ()\n+            22..30 '(false,)': (bool,)\n+            23..28 'false': bool\n+            41..53 '(true | (),)': (bool,)\n+            42..46 'true': bool\n+            42..46 'true': bool\n+            42..51 'true | ()': bool\n+            49..51 '()': ()\n+            57..59 '{}': ()\n+            68..80 '(() | true,)': ((),)\n+            69..71 '()': ()\n+            69..78 '() | true': ()\n+            74..78 'true': bool\n+            74..78 'true': bool\n+            84..86 '{}': ()\n+            95..104 '(_ | (),)': (bool,)\n+            96..97 '_': bool\n+            96..102 '_ | ()': bool\n+            100..102 '()': ()\n+            108..110 '{}': ()\n+            119..128 '(() | _,)': ((),)\n+            120..122 '()': ()\n+            120..126 '() | _': ()\n+            125..126 '_': bool\n+            132..134 '{}': ()\n+            49..51: expected bool, got ()\n+            68..80: expected (bool,), got ((),)\n+            69..71: expected bool, got ()\n+            69..78: expected bool, got ()\n+            100..102: expected bool, got ()\n+            119..128: expected (bool,), got ((),)\n+            120..122: expected bool, got ()\n+            120..126: expected bool, got ()\n+        \"#]],\n+    );\n+}"}]}