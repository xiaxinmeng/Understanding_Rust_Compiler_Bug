{"sha": "9e0ff773ad5840af78ef0deeebb7da2f503eca32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMGZmNzczYWQ1ODQwYWY3OGVmMGRlZWViYjdkYTJmNTAzZWNhMzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-08T15:23:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-08T20:23:22Z"}, "message": "std: Use mem::replace in TLS initialization\n\nDue to #30228 it's not currently sound to do `*ptr = Some(value)`, so instead\nuse `mem::replace` which fixes the soundness hole for now.", "tree": {"sha": "a8e6e7f86a160227754bb9d16db59b998560675f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e6e7f86a160227754bb9d16db59b998560675f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0ff773ad5840af78ef0deeebb7da2f503eca32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0ff773ad5840af78ef0deeebb7da2f503eca32", "html_url": "https://github.com/rust-lang/rust/commit/9e0ff773ad5840af78ef0deeebb7da2f503eca32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0ff773ad5840af78ef0deeebb7da2f503eca32/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8864f2c83ac800881da34c3e835c931c081a8785", "url": "https://api.github.com/repos/rust-lang/rust/commits/8864f2c83ac800881da34c3e835c931c081a8785", "html_url": "https://github.com/rust-lang/rust/commit/8864f2c83ac800881da34c3e835c931c081a8785"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "870247f7e82fc722c30bcff15fbecc1163f64643", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ff773ad5840af78ef0deeebb7da2f503eca32/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ff773ad5840af78ef0deeebb7da2f503eca32/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=9e0ff773ad5840af78ef0deeebb7da2f503eca32", "patch": "@@ -13,6 +13,7 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::UnsafeCell;\n+use mem;\n \n // Sure wish we had macro hygiene, no?\n #[doc(hidden)]\n@@ -226,7 +227,21 @@ impl<T: 'static> LocalKey<T> {\n         // just in case initialization fails.\n         let value = (self.init)();\n         let ptr = slot.get();\n-        *ptr = Some(value);\n+\n+        // note that this can in theory just be `*ptr = Some(value)`, but due to\n+        // the compiler will currently codegen that pattern with something like:\n+        //\n+        //      ptr::drop_in_place(ptr)\n+        //      ptr::write(ptr, Some(value))\n+        //\n+        // Due to this pattern it's possible for the destructor of the value in\n+        // `ptr` (e.g. if this is being recursively initialized) to re-access\n+        // TLS, in which case there will be a `&` and `&mut` pointer to the same\n+        // value (an aliasing violation). To avoid setting the \"I'm running a\n+        // destructor\" flag we just use `mem::replace` which should sequence the\n+        // operations a little differently and make this safe to call.\n+        mem::replace(&mut *ptr, Some(value));\n+\n         (*ptr).as_ref().unwrap()\n     }\n "}, {"sha": "195b814492af1e68052c0b321a484b455ec98fe1", "filename": "src/test/run-pass/tls-init-on-init.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9e0ff773ad5840af78ef0deeebb7da2f503eca32/src%2Ftest%2Frun-pass%2Ftls-init-on-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0ff773ad5840af78ef0deeebb7da2f503eca32/src%2Ftest%2Frun-pass%2Ftls-init-on-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftls-init-on-init.rs?ref=9e0ff773ad5840af78ef0deeebb7da2f503eca32", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(thread_local_state)]\n+\n+use std::thread::{self, LocalKeyState};\n+use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+\n+struct Foo { cnt: usize }\n+\n+thread_local!(static FOO: Foo = Foo::init());\n+\n+static CNT: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+impl Foo {\n+    fn init() -> Foo {\n+        let cnt = CNT.fetch_add(1, Ordering::SeqCst);\n+        if cnt == 0 {\n+            FOO.with(|_| {});\n+        }\n+        Foo { cnt: cnt }\n+    }\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        if self.cnt == 1 {\n+            FOO.with(|foo| assert_eq!(foo.cnt, 0));\n+        } else {\n+            assert_eq!(self.cnt, 0);\n+            match FOO.state() {\n+                LocalKeyState::Valid => panic!(\"should not be in valid state\"),\n+                LocalKeyState::Uninitialized |\n+                LocalKeyState::Destroyed => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    thread::spawn(|| {\n+        FOO.with(|_| {});\n+    }).join().unwrap();\n+}"}]}