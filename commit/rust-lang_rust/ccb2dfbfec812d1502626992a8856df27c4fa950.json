{"sha": "ccb2dfbfec812d1502626992a8856df27c4fa950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYjJkZmJmZWM4MTJkMTUwMjYyNjk5MmE4ODU2ZGYyN2M0ZmE5NTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-17T08:35:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-17T16:34:47Z"}, "message": "don't ICE on large files\n\nThis is an extremely marginal error, so the cost of properly threading\n`Handler` everywhere just not seemed justified. However, it's useful\nto panic when we create a file, and not when we slice strings with\noverflown indexes somewhere in the guts of the compiler.\n\nFor this reason, while we provide safe `try_new_source_file`, we don't\nchange the existing public interface and just panic more or less\ncleanly.", "tree": {"sha": "42a95f16caa5f4b40e32e5ce672ddf85d383fece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42a95f16caa5f4b40e32e5ce672ddf85d383fece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb2dfbfec812d1502626992a8856df27c4fa950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb2dfbfec812d1502626992a8856df27c4fa950", "html_url": "https://github.com/rust-lang/rust/commit/ccb2dfbfec812d1502626992a8856df27c4fa950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb2dfbfec812d1502626992a8856df27c4fa950/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70456a6cbd67c0547d22997007afaaed0819767e", "url": "https://api.github.com/repos/rust-lang/rust/commits/70456a6cbd67c0547d22997007afaaed0819767e", "html_url": "https://github.com/rust-lang/rust/commit/70456a6cbd67c0547d22997007afaaed0819767e"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "c0307263387ec6c7e8ec034f33da873f8ad40b8f", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ccb2dfbfec812d1502626992a8856df27c4fa950/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb2dfbfec812d1502626992a8856df27c4fa950/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=ccb2dfbfec812d1502626992a8856df27c4fa950", "patch": "@@ -191,6 +191,18 @@ impl SourceMap {\n     /// If a file already exists in the source_map with the same id, that file is returned\n     /// unmodified\n     pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {\n+        self.try_new_source_file(filename, src)\n+            .unwrap_or_else(|OffsetOverflowError| {\n+                eprintln!(\"fatal error: rustc does not support files larger than 4GB\");\n+                errors::FatalError.raise()\n+            })\n+    }\n+\n+    fn try_new_source_file(\n+        &self,\n+        filename: FileName,\n+        src: String\n+    ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {\n         let start_pos = self.next_start_pos();\n \n         // The path is used to determine the directory for loading submodules and\n@@ -212,7 +224,7 @@ impl SourceMap {\n                                                        was_remapped,\n                                                        Some(&unmapped_path));\n \n-        return match self.source_file_by_stable_id(file_id) {\n+        let lrc_sf = match self.source_file_by_stable_id(file_id) {\n             Some(lrc_sf) => lrc_sf,\n             None => {\n                 let source_file = Lrc::new(SourceFile::new(\n@@ -221,7 +233,7 @@ impl SourceMap {\n                     unmapped_path,\n                     src,\n                     Pos::from_usize(start_pos),\n-                ));\n+                )?);\n \n                 let mut files = self.files.borrow_mut();\n \n@@ -230,7 +242,8 @@ impl SourceMap {\n \n                 source_file\n             }\n-        }\n+        };\n+        Ok(lrc_sf)\n     }\n \n     /// Allocates a new SourceFile representing a source file from an external"}, {"sha": "2dd409bf5bee09b86a734bd60b881b7dcbd72993", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ccb2dfbfec812d1502626992a8856df27c4fa950/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb2dfbfec812d1502626992a8856df27c4fa950/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=ccb2dfbfec812d1502626992a8856df27c4fa950", "patch": "@@ -859,6 +859,9 @@ impl ExternalSource {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct OffsetOverflowError;\n+\n /// A single source in the `SourceMap`.\n #[derive(Clone)]\n pub struct SourceFile {\n@@ -1040,7 +1043,7 @@ impl SourceFile {\n                name_was_remapped: bool,\n                unmapped_path: FileName,\n                mut src: String,\n-               start_pos: BytePos) -> SourceFile {\n+               start_pos: BytePos) -> Result<SourceFile, OffsetOverflowError> {\n         remove_bom(&mut src);\n \n         let src_hash = {\n@@ -1054,11 +1057,14 @@ impl SourceFile {\n             hasher.finish()\n         };\n         let end_pos = start_pos.to_usize() + src.len();\n+        if end_pos > u32::max_value() as usize {\n+            return Err(OffsetOverflowError);\n+        }\n \n         let (lines, multibyte_chars, non_narrow_chars) =\n             analyze_source_file::analyze_source_file(&src[..], start_pos);\n \n-        SourceFile {\n+        Ok(SourceFile {\n             name,\n             name_was_remapped,\n             unmapped_path: Some(unmapped_path),\n@@ -1072,7 +1078,7 @@ impl SourceFile {\n             multibyte_chars,\n             non_narrow_chars,\n             name_hash,\n-        }\n+        })\n     }\n \n     /// Returns the `BytePos` of the beginning of the current line."}]}