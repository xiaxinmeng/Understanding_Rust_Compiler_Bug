{"sha": "6b6a79b19004fa2a62f8d02db2625cd7da547abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNmE3OWIxOTAwNGZhMmE2MmY4ZDAyZGIyNjI1Y2Q3ZGE1NDdhYmY=", "commit": {"author": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2019-09-30T20:43:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-30T20:43:24Z"}, "message": "Simplify `EmitterWriter::get_multispan_max_line_num`", "tree": {"sha": "b5a8f7d92e13af612df399c29e81009535bdea93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a8f7d92e13af612df399c29e81009535bdea93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b6a79b19004fa2a62f8d02db2625cd7da547abf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkmjsCRBK7hj4Ov3rIwAAdHIIAANuJc6tQ7ezfXb/H5mepefE\n+N4tYYGwiXCdYV9OZwibm1jqGcpuelMDzZcsjvDUiK/pZzFCNBX2LwSkPs2MCT7T\nf4C3qVOZps3eP4RPTXLXATLNOmwmKj98llfBG5eT6XKyfWJbrwsdR3N90yX9vrK6\nyuKI40nCF1P/JLSCZeKQnOlrPq2EVnomiWAJPPSlH+sBs7pN4Tmz9Yyv7nmTzI1C\nnHy9vGf1QyyMAuGguCEXXudqGc2XlmdSH9SoA9KYELA2mbKAUxhGEt2IwOfCMRXg\neILuaHfRaGZkTEu4Ui4jVqztMGPUkhfJanz0e0ZHWvEJkrJqmkyu627DcE9voIY=\n=ulxG\n-----END PGP SIGNATURE-----\n", "payload": "tree b5a8f7d92e13af612df399c29e81009535bdea93\nparent 7dc953b493d56f8b24f38d955cc580d9a14c1ae7\nauthor AnthonyMikh <anthony.mikh@yandex.ru> 1569876204 +0300\ncommitter GitHub <noreply@github.com> 1569876204 +0300\n\nSimplify `EmitterWriter::get_multispan_max_line_num`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6a79b19004fa2a62f8d02db2625cd7da547abf", "html_url": "https://github.com/rust-lang/rust/commit/6b6a79b19004fa2a62f8d02db2625cd7da547abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b6a79b19004fa2a62f8d02db2625cd7da547abf/comments", "author": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc953b493d56f8b24f38d955cc580d9a14c1ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc953b493d56f8b24f38d955cc580d9a14c1ae7", "html_url": "https://github.com/rust-lang/rust/commit/7dc953b493d56f8b24f38d955cc580d9a14c1ae7"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "1d060ff1338958a0fbf99f8b915eb93c99dfa203", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b6a79b19004fa2a62f8d02db2625cd7da547abf/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6a79b19004fa2a62f8d02db2625cd7da547abf/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=6b6a79b19004fa2a62f8d02db2625cd7da547abf", "patch": "@@ -997,27 +997,27 @@ impl EmitterWriter {\n     }\n \n     fn get_multispan_max_line_num(&mut self, msp: &MultiSpan) -> usize {\n+        let sm = match self.sm {\n+            Some(ref sm) => sm,\n+            None => return 0,\n+        };\n+        \n         let mut max = 0;\n-        if let Some(ref sm) = self.sm {\n-            for primary_span in msp.primary_spans() {\n-                if !primary_span.is_dummy() {\n-                    let hi = sm.lookup_char_pos(primary_span.hi());\n-                    if hi.line > max {\n-                        max = hi.line;\n-                    }\n-                }\n+        for primary_span in msp.primary_spans() {\n+            if !primary_span.is_dummy() {\n+                let hi = sm.lookup_char_pos(primary_span.hi());\n+                max = max(max, hi.line);\n             }\n-            if !self.short_message {\n-                for span_label in msp.span_labels() {\n-                    if !span_label.span.is_dummy() {\n-                        let hi = sm.lookup_char_pos(span_label.span.hi());\n-                        if hi.line > max {\n-                            max = hi.line;\n-                        }\n-                    }\n+        }\n+        if !self.short_message {\n+            for span_label in msp.span_labels() {\n+                if !span_label.span.is_dummy() {\n+                    let hi = sm.lookup_char_pos(span_label.span.hi());\n+                    max = max(max, hi.line);\n                 }\n             }\n         }\n+        \n         max\n     }\n "}]}