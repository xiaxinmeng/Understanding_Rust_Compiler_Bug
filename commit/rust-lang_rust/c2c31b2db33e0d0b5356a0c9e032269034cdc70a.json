{"sha": "c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzMxYjJkYjMzZTBkMGI1MzU2YTBjOWUwMzIyNjkwMzRjZGM3MGE=", "commit": {"author": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-10T19:08:32Z"}, "committer": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-10T19:08:32Z"}, "message": "Added external crates' sources to FileMap.\n\nThey are now handled in their own member to prevent mutating access to\nthe `src` member. This way, we can safely load external sources, while\nkeeping the mutation of local source strings off-limits.", "tree": {"sha": "4a2ddeafa8e6ff5a359c2bd954831adfbb60663f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a2ddeafa8e6ff5a359c2bd954831adfbb60663f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXezFNCHL3+3lgSPSfvyOxSJN6OwFAlk8RA8ACgkQfvyOxSJN\n6OzjMA/9Fbm5QTpeqhpQD7RAQxr9EJgqfqn0RPsr5FkLJypL6CbzDKg2DGeI1B//\nY+H/AJfoP33bHTYliHnbeVcDZoOVwkneWpdQTe9tDS2to2f4VAoSRieCJ8XNaAeh\nZa+Oi9oIg7F5w2cdZo4bK5TAuFZiWCLG5tF630R1Vtp/pmY6t1oYxJcOuV/Sx4/L\n/PDLgg5hsvzquHcnkELmUhwP3Iowbsl87tXo/wRiQwEl+NyRtCnhAgulmX2cFjEy\nWLkW8ZOrTVnTXA3dhbI5cwppiTmC6qMmrKqNYyy5JSF4NXudkfhIIpPaVEzJZVv1\nSefzAkoZIgj+nhVCTXN6qAjtiJl5jjbX6GhAHT3qIwMyedC1P46xLgpFlT2aIRqo\nGvIp3ewJlqpqGhM3hQ13TzGOmAaqnE87H7bGz9ODGQ8tW+fdYPy3biVpNdZwSjHI\n+7J4ZP8oOUr+GG3V7M0FbpuOyn6NBWrAgrB7kzuP8eAKN8fdZdhVPYRuNel083d9\nNHzIXwWRzIrPwPa8SzCo0QT5r7HAtkCcuMF3mz3Q65IKfa/CSZ3yFjgHyGGhmBDC\nPSNJ6rVNl1na1BkVaAKTsMMQgU8poBObIOtGOqDaNtvBUv4wZVGoReAxugti8Bwd\ngANdK/gmNmyzQOrDb53yNw+H1TJO3Uk8j/O/hTK1Yw0PrdCK+OI=\n=q1aX\n-----END PGP SIGNATURE-----", "payload": "tree 4a2ddeafa8e6ff5a359c2bd954831adfbb60663f\nparent dd8f7cd126403955295c8b0cdbccc5ca5cbef763\nauthor Inokentiy Babushkin <twk@twki.de> 1497121712 +0200\ncommitter Inokentiy Babushkin <twk@twki.de> 1497121712 +0200\n\nAdded external crates' sources to FileMap.\n\nThey are now handled in their own member to prevent mutating access to\nthe `src` member. This way, we can safely load external sources, while\nkeeping the mutation of local source strings off-limits.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "html_url": "https://github.com/rust-lang/rust/commit/c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/comments", "author": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "html_url": "https://github.com/rust-lang/rust/commit/dd8f7cd126403955295c8b0cdbccc5ca5cbef763"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "b9cc3b5fb937fe1927ecba066a1e2d5f4940b3dd", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "patch": "@@ -337,6 +337,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for FileMa\n             // Do not hash the source as it is not encoded\n             src: _,\n             src_hash,\n+            external_src: _,\n             start_pos,\n             end_pos: _,\n             ref lines,"}, {"sha": "545a485732e075698b0b19ac19fe0becb59039be", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "patch": "@@ -103,6 +103,7 @@ pub trait CodeMapper {\n     fn span_to_filename(&self, sp: Span) -> FileName;\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n     fn call_span_if_macro(&self, sp: Span) -> Span;\n+    fn load_source_for_filemap(&mut self, file: FileName) -> bool;\n }\n \n impl CodeSuggestion {"}, {"sha": "9779a6788453d1c95876862c5bb89f7e9a2506f0", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "patch": "@@ -219,6 +219,7 @@ impl CodeMap {\n             crate_of_origin: crate_of_origin,\n             src: None,\n             src_hash: src_hash,\n+            external_src: RefCell::new(ExternalSource::AbsentOk),\n             start_pos: start_pos,\n             end_pos: end_pos,\n             lines: RefCell::new(file_local_lines),\n@@ -558,6 +559,25 @@ impl CodeMapper for CodeMap {\n         }\n         sp\n     }\n+    fn load_source_for_filemap(&mut self, filename: FileName) -> bool {\n+        let file_map = if let Some(fm) = self.get_filemap(&filename) {\n+            fm\n+        } else {\n+            return false;\n+        };\n+\n+        if *file_map.external_src.borrow() == ExternalSource::AbsentOk {\n+            let mut external_src = file_map.external_src.borrow_mut();\n+            if let Ok(src) = self.file_loader.read_file(Path::new(&filename)) {\n+                *external_src = ExternalSource::Present(src);\n+                return true;\n+            } else {\n+                *external_src = ExternalSource::AbsentErr;\n+            }\n+        }\n+\n+        false\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "d6adf45e68a2f8465ef112d19f2c359e5c6acfc8", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c31b2db33e0d0b5356a0c9e032269034cdc70a/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=c2c31b2db33e0d0b5356a0c9e032269034cdc70a", "patch": "@@ -374,6 +374,14 @@ pub struct MultiByteChar {\n     pub bytes: usize,\n }\n \n+#[derive(PartialEq, Eq, Clone)]\n+pub enum ExternalSource {\n+    Present(String),\n+    AbsentOk,\n+    AbsentErr,\n+    Unneeded,\n+}\n+\n /// A single source in the CodeMap.\n #[derive(Clone)]\n pub struct FileMap {\n@@ -389,6 +397,9 @@ pub struct FileMap {\n     pub src: Option<Rc<String>>,\n     /// The source code's hash\n     pub src_hash: u128,\n+    /// The external source code (used for external crates, which will have a `None`\n+    /// value as `self.src`.\n+    pub external_src: RefCell<ExternalSource>,\n     /// The start position of this source in the CodeMap\n     pub start_pos: BytePos,\n     /// The end position of this source in the CodeMap\n@@ -513,6 +524,7 @@ impl Decodable for FileMap {\n                 end_pos: end_pos,\n                 src: None,\n                 src_hash: src_hash,\n+                external_src: RefCell::new(ExternalSource::AbsentOk),\n                 lines: RefCell::new(lines),\n                 multibyte_chars: RefCell::new(multibyte_chars)\n             })\n@@ -545,6 +557,7 @@ impl FileMap {\n             crate_of_origin: 0,\n             src: Some(Rc::new(src)),\n             src_hash: src_hash,\n+            external_src: RefCell::new(ExternalSource::Unneeded),\n             start_pos: start_pos,\n             end_pos: Pos::from_usize(end_pos),\n             lines: RefCell::new(Vec::new()),"}]}