{"sha": "5d91e9e941a069cc715d630b9b9826de6275f0a9", "node_id": "C_kwDOAAsO6NoAKDVkOTFlOWU5NDFhMDY5Y2M3MTVkNjMwYjliOTgyNmRlNjI3NWYwYTk", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-06-10T20:26:53Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-06-10T20:26:53Z"}, "message": "a", "tree": {"sha": "41eefacb314af29e10b687eeba102a8c90187d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41eefacb314af29e10b687eeba102a8c90187d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d91e9e941a069cc715d630b9b9826de6275f0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d91e9e941a069cc715d630b9b9826de6275f0a9", "html_url": "https://github.com/rust-lang/rust/commit/5d91e9e941a069cc715d630b9b9826de6275f0a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d91e9e941a069cc715d630b9b9826de6275f0a9/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "420c970cb1edccbf60ff2aeb51ca01e2300b09ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/420c970cb1edccbf60ff2aeb51ca01e2300b09ef", "html_url": "https://github.com/rust-lang/rust/commit/420c970cb1edccbf60ff2aeb51ca01e2300b09ef"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "b901cc443a0d863eeaba43e796b3e8fe1a38ecbf", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d91e9e941a069cc715d630b9b9826de6275f0a9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d91e9e941a069cc715d630b9b9826de6275f0a9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=5d91e9e941a069cc715d630b9b9826de6275f0a9", "patch": "@@ -111,6 +111,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `a <: b`, where `a` may or may not be expected.\n+    /// \n+    /// See [`At::trace_exp`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -122,6 +125,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// call like `foo(x)`, where `foo: fn(i32)`, you might have\n     /// `sup(i32, x)`, since the \"expected\" type is the type that\n     /// appears in the signature.\n+    /// \n+    /// See [`At::trace`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sup<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -130,6 +136,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    /// \n+    /// See [`At::trace`] and [`Trace::sub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn sub<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -138,6 +147,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    /// \n+    /// See [`At::trace_exp`] and [`Trace::eq`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq_exp<T>(self, a_is_expected: bool, a: T, b: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -146,6 +158,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     }\n \n     /// Makes `expected <: actual`.\n+    /// \n+    /// See [`At::trace`] and [`Trace::eq`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn eq<T>(self, expected: T, actual: T) -> InferResult<'tcx, ()>\n     where\n         T: ToTrace<'tcx>,\n@@ -176,6 +191,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// this can result in an error (e.g., if asked to compute LUB of\n     /// u32 and i32), it is meaningful to call one of them the\n     /// \"expected type\".\n+    /// \n+    /// See [`At::trace`] and [`Trace::lub`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn lub<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>\n     where\n         T: ToTrace<'tcx>,\n@@ -186,6 +204,9 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     /// Computes the greatest-lower-bound, or mutual subtype, of two\n     /// values. As with `lub` order doesn't matter, except for error\n     /// cases.\n+    /// \n+    /// See [`At::trace`] and [`Trace::glb`] for a version of\n+    /// this method that only requires `T: Relate<'tcx>`\n     pub fn glb<T>(self, expected: T, actual: T) -> InferResult<'tcx, T>\n     where\n         T: ToTrace<'tcx>,"}]}