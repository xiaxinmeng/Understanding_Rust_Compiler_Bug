{"sha": "b39c4bc12358078f77ddd01288b24252f757f37d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOWM0YmMxMjM1ODA3OGY3N2RkZDAxMjg4YjI0MjUyZjc1N2YzN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-19T10:50:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-19T10:50:15Z"}, "message": "Auto merge of #46749 - SimonSapin:exorcism, r=nikomatsakis\n\nMove PhantomData<T> from Shared<T> to users of both Shared and #[may_dangle]\n\nAfter discussing https://github.com/rust-lang/rust/issues/27730#issuecomment-316432083 today with @pnkfelix and @Gankro, we concluded that it\u2019s ok for drop checking not to be much smarter than the current `#[may_dangle]` design which requires an explicit unsafe opt-in.", "tree": {"sha": "05e8d258a5b60820993880d7483206b3b4d326dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e8d258a5b60820993880d7483206b3b4d326dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b39c4bc12358078f77ddd01288b24252f757f37d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b39c4bc12358078f77ddd01288b24252f757f37d", "html_url": "https://github.com/rust-lang/rust/commit/b39c4bc12358078f77ddd01288b24252f757f37d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b39c4bc12358078f77ddd01288b24252f757f37d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f047c048eac4f135dd6df5223b7195d651539d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f047c048eac4f135dd6df5223b7195d651539d", "html_url": "https://github.com/rust-lang/rust/commit/a9f047c048eac4f135dd6df5223b7195d651539d"}, {"sha": "60dc10492ccdf785678d475172f2653aae9606da", "url": "https://api.github.com/repos/rust-lang/rust/commits/60dc10492ccdf785678d475172f2653aae9606da", "html_url": "https://github.com/rust-lang/rust/commit/60dc10492ccdf785678d475172f2653aae9606da"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "844b70835936fecdbd87662b3d8edf619fd055ac", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=b39c4bc12358078f77ddd01288b24252f757f37d", "patch": "@@ -26,7 +26,7 @@ use core::mem::{self, align_of_val, size_of_val, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n-use core::marker::Unsize;\n+use core::marker::{Unsize, PhantomData};\n use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n use core::convert::From;\n@@ -198,6 +198,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Arc<T: ?Sized> {\n     ptr: Shared<ArcInner<T>>,\n+    phantom: PhantomData<T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -285,7 +286,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Arc { ptr: Shared::from(Box::into_unique(x)) }\n+        Arc { ptr: Shared::from(Box::into_unique(x)), phantom: PhantomData }\n     }\n \n     /// Returns the contained value, if the `Arc` has exactly one strong reference.\n@@ -397,6 +398,7 @@ impl<T: ?Sized> Arc<T> {\n \n         Arc {\n             ptr: Shared::new_unchecked(arc_ptr),\n+            phantom: PhantomData,\n         }\n     }\n \n@@ -580,7 +582,7 @@ impl<T: ?Sized> Arc<T> {\n             // Free the allocation without dropping its contents\n             box_free(bptr);\n \n-            Arc { ptr: Shared::new_unchecked(ptr) }\n+            Arc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -607,7 +609,7 @@ impl<T> Arc<[T]> {\n             &mut (*ptr).data as *mut [T] as *mut T,\n             v.len());\n \n-        Arc { ptr: Shared::new_unchecked(ptr) }\n+        Arc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n     }\n }\n \n@@ -667,7 +669,7 @@ impl<T: Clone> ArcFromSlice<T> for Arc<[T]> {\n             // All clear. Forget the guard so it doesn't free the new ArcInner.\n             mem::forget(guard);\n \n-            Arc { ptr: Shared::new_unchecked(ptr) }\n+            Arc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -725,7 +727,7 @@ impl<T: ?Sized> Clone for Arc<T> {\n             }\n         }\n \n-        Arc { ptr: self.ptr }\n+        Arc { ptr: self.ptr, phantom: PhantomData }\n     }\n }\n \n@@ -1052,7 +1054,7 @@ impl<T: ?Sized> Weak<T> {\n \n             // Relaxed is valid for the same reason it is on Arc's Clone impl\n             match inner.strong.compare_exchange_weak(n, n + 1, Relaxed, Relaxed) {\n-                Ok(_) => return Some(Arc { ptr: self.ptr }),\n+                Ok(_) => return Some(Arc { ptr: self.ptr, phantom: PhantomData }),\n                 Err(old) => n = old,\n             }\n         }"}, {"sha": "358b5934b9231b20da6e65efb11ba6cf50965a71", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b39c4bc12358078f77ddd01288b24252f757f37d", "patch": "@@ -252,7 +252,7 @@ use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n use core::marker;\n-use core::marker::Unsize;\n+use core::marker::{Unsize, PhantomData};\n use core::mem::{self, align_of_val, forget, size_of_val, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n@@ -283,6 +283,7 @@ struct RcBox<T: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {\n     ptr: Shared<RcBox<T>>,\n+    phantom: PhantomData<T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -315,6 +316,7 @@ impl<T> Rc<T> {\n                 weak: Cell::new(1),\n                 value,\n             })),\n+            phantom: PhantomData,\n         }\n     }\n \n@@ -427,6 +429,7 @@ impl<T: ?Sized> Rc<T> {\n \n         Rc {\n             ptr: Shared::new_unchecked(rc_ptr),\n+            phantom: PhantomData,\n         }\n     }\n \n@@ -647,6 +650,7 @@ impl Rc<Any> {\n                 forget(self);\n                 Ok(Rc {\n                     ptr: Shared::new_unchecked(raw as *const RcBox<T> as *mut _),\n+                    phantom: PhantomData,\n                 })\n             }\n         } else {\n@@ -691,7 +695,7 @@ impl<T: ?Sized> Rc<T> {\n             // Free the allocation without dropping its contents\n             box_free(bptr);\n \n-            Rc { ptr: Shared::new_unchecked(ptr) }\n+            Rc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -718,7 +722,7 @@ impl<T> Rc<[T]> {\n             &mut (*ptr).value as *mut [T] as *mut T,\n             v.len());\n \n-        Rc { ptr: Shared::new_unchecked(ptr) }\n+        Rc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n     }\n }\n \n@@ -777,7 +781,7 @@ impl<T: Clone> RcFromSlice<T> for Rc<[T]> {\n             // All clear. Forget the guard so it doesn't free the new RcBox.\n             forget(guard);\n \n-            Rc { ptr: Shared::new_unchecked(ptr) }\n+            Rc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -868,7 +872,7 @@ impl<T: ?Sized> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n         self.inc_strong();\n-        Rc { ptr: self.ptr }\n+        Rc { ptr: self.ptr, phantom: PhantomData }\n     }\n }\n \n@@ -1228,7 +1232,7 @@ impl<T: ?Sized> Weak<T> {\n             None\n         } else {\n             self.inc_strong();\n-            Some(Rc { ptr: self.ptr })\n+            Some(Rc { ptr: self.ptr, phantom: PhantomData })\n         }\n     }\n }"}, {"sha": "67ccb5cab6def1a8a0973466ae373ab20f8f4e0b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b39c4bc12358078f77ddd01288b24252f757f37d", "patch": "@@ -71,6 +71,7 @@ use core::fmt;\n use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n use core::iter::{FromIterator, FusedIterator, TrustedLen};\n+use core::marker::PhantomData;\n use core::mem;\n #[cfg(not(test))]\n use core::num::Float;\n@@ -1743,6 +1744,7 @@ impl<T> IntoIterator for Vec<T> {\n             mem::forget(self);\n             IntoIter {\n                 buf: Shared::new_unchecked(begin),\n+                phantom: PhantomData,\n                 cap,\n                 ptr: begin,\n                 end,\n@@ -2264,6 +2266,7 @@ impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     buf: Shared<T>,\n+    phantom: PhantomData<T>,\n     cap: usize,\n     ptr: *const T,\n     end: *const T,"}, {"sha": "39cf2ec4c21d04e4c55b9692e6b6bc0f98694e73", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b39c4bc12358078f77ddd01288b24252f757f37d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b39c4bc12358078f77ddd01288b24252f757f37d", "patch": "@@ -2450,16 +2450,11 @@ impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     }\n }\n \n-/// A wrapper around a raw `*mut T` that indicates that the possessor\n-/// of this wrapper has shared ownership of the referent. Useful for\n-/// building abstractions like `Rc<T>`, `Arc<T>`, or doubly-linked lists, which\n-/// internally use aliased raw pointers to manage the memory that they own.\n+/// `*mut T` but non-zero and covariant.\n ///\n-/// This is similar to `Unique`, except that it doesn't make any aliasing\n-/// guarantees, and doesn't derive Send and Sync. Note that unlike `&T`,\n-/// Shared has no special mutability requirements. Shared may mutate data\n-/// aliased by other Shared pointers. More precise rules require Rust to\n-/// develop an actual aliasing model.\n+/// This is often the correct thing to use when building data structures using\n+/// raw pointers, but is ultimately more dangerous to use because of its additional\n+/// properties. If you're not sure if you should use `Shared<T>`, just use `*mut T`!\n ///\n /// Unlike `*mut T`, the pointer must always be non-null, even if the pointer\n /// is never dereferenced. This is so that enums may use this forbidden value\n@@ -2469,20 +2464,14 @@ impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n /// Unlike `*mut T`, `Shared<T>` is covariant over `T`. If this is incorrect\n /// for your use case, you should include some PhantomData in your type to\n /// provide invariance, such as `PhantomData<Cell<T>>` or `PhantomData<&'a mut T>`.\n-/// Usually this won't be necessary; covariance is correct for Rc, Arc, and LinkedList\n-/// because they provide a public API that follows the normal shared XOR mutable\n-/// rules of Rust.\n+/// Usually this won't be necessary; covariance is correct for most safe abstractions,\n+/// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n+/// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"shared\", reason = \"needs an RFC to flesh out design\",\n            issue = \"27730\")]\n pub struct Shared<T: ?Sized> {\n     pointer: NonZero<*const T>,\n-    // NOTE: this marker has no consequences for variance, but is necessary\n-    // for dropck to understand that we logically own a `T`.\n-    //\n-    // For details, see:\n-    // https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#phantom-data\n-    _marker: PhantomData<T>,\n }\n \n /// `Shared` pointers are not `Send` because the data they reference may be aliased.\n@@ -2518,12 +2507,12 @@ impl<T: ?Sized> Shared<T> {\n     /// `ptr` must be non-null.\n     #[unstable(feature = \"shared\", issue = \"27730\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        Shared { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n+        Shared { pointer: NonZero::new_unchecked(ptr) }\n     }\n \n     /// Creates a new `Shared` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        NonZero::new(ptr as *const T).map(|nz| Shared { pointer: nz, _marker: PhantomData })\n+        NonZero::new(ptr as *const T).map(|nz| Shared { pointer: nz })\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n@@ -2580,20 +2569,20 @@ impl<T: ?Sized> fmt::Pointer for Shared<T> {\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> From<Unique<T>> for Shared<T> {\n     fn from(unique: Unique<T>) -> Self {\n-        Shared { pointer: unique.pointer, _marker: PhantomData }\n+        Shared { pointer: unique.pointer }\n     }\n }\n \n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Shared<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        Shared { pointer: NonZero::from(reference), _marker: PhantomData }\n+        Shared { pointer: NonZero::from(reference) }\n     }\n }\n \n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<'a, T: ?Sized> From<&'a T> for Shared<T> {\n     fn from(reference: &'a T) -> Self {\n-        Shared { pointer: NonZero::from(reference), _marker: PhantomData }\n+        Shared { pointer: NonZero::from(reference) }\n     }\n }"}]}