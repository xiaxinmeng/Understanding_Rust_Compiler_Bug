{"sha": "86f5275e49d9d6dc79dc5b5ce0a440f494a84d61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZjUyNzVlNDlkOWQ2ZGM3OWRjNWI1Y2UwYTQ0MGY0OTRhODRkNjE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-12-10T23:00:17Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-12-16T20:13:03Z"}, "message": "Add note when item accessed from module via `m.i` rather than `m::i`.", "tree": {"sha": "81d4485b6996220fb2a84d5fe083518da4920565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81d4485b6996220fb2a84d5fe083518da4920565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86f5275e49d9d6dc79dc5b5ce0a440f494a84d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86f5275e49d9d6dc79dc5b5ce0a440f494a84d61", "html_url": "https://github.com/rust-lang/rust/commit/86f5275e49d9d6dc79dc5b5ce0a440f494a84d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86f5275e49d9d6dc79dc5b5ce0a440f494a84d61/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce132752c68aebbaf78125df4266e96e00261d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce132752c68aebbaf78125df4266e96e00261d36", "html_url": "https://github.com/rust-lang/rust/commit/ce132752c68aebbaf78125df4266e96e00261d36"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "b4e2d6beb8b8399ea13b031bbe2bfea186608bd2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/86f5275e49d9d6dc79dc5b5ce0a440f494a84d61/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5275e49d9d6dc79dc5b5ce0a440f494a84d61/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=86f5275e49d9d6dc79dc5b5ce0a440f494a84d61", "patch": "@@ -179,7 +179,7 @@ pub enum ResolutionError<'a> {\n     /// error E0424: `self` is not available in a static method\n     SelfNotAvailableInStaticMethod,\n     /// error E0425: unresolved name\n-    UnresolvedName(&'a str, &'a str),\n+    UnresolvedName(&'a str, &'a str, UnresolvedNameContext),\n     /// error E0426: use of undeclared label\n     UndeclaredLabel(&'a str),\n     /// error E0427: cannot use `ref` binding mode with ...\n@@ -202,6 +202,12 @@ pub enum ResolutionError<'a> {\n     AttemptToUseNonConstantValueInConstant,\n }\n \n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub enum UnresolvedNameContext {\n+    PathIsMod(ast::NodeId),\n+    Other,\n+}\n+\n fn resolve_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                                        span: syntax::codemap::Span,\n                                        resolution_error: ResolutionError<'b>) {\n@@ -402,13 +408,46 @@ fn resolve_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                       \"`self` is not available in a static method. Maybe a `self` argument is \\\n                        missing?\");\n         }\n-        ResolutionError::UnresolvedName(path, name) => {\n+        ResolutionError::UnresolvedName(path, msg, context) => {\n             span_err!(resolver.session,\n                       span,\n                       E0425,\n                       \"unresolved name `{}`{}\",\n                       path,\n-                      name);\n+                      msg);\n+\n+            match context {\n+                UnresolvedNameContext::Other => {} // no help available\n+                UnresolvedNameContext::PathIsMod(id) => {\n+                    let mut help_msg = String::new();\n+                    let parent_id = resolver.ast_map.get_parent_node(id);\n+                    if let Some(hir_map::Node::NodeExpr(e)) = resolver.ast_map.find(parent_id) {\n+                        match e.node {\n+                            ExprField(_, ident) => {\n+                                help_msg = format!(\"To reference an item from the \\\n+                                                    `{module}` module, use \\\n+                                                    `{module}::{ident}`\",\n+                                                   module = &*path,\n+                                                   ident = ident.node);\n+                            }\n+\n+                            ExprMethodCall(ident, _, _) => {\n+                                help_msg = format!(\"To call a function from the \\\n+                                                    `{module}` module, use \\\n+                                                    `{module}::{ident}(..)`\",\n+                                                   module = &*path,\n+                                                   ident = ident.node);\n+                            }\n+\n+                            _ => {} // no help available\n+                        }\n+                    }\n+\n+                    if !help_msg.is_empty() {\n+                        resolver.session.fileline_help(span, &help_msg);\n+                    }\n+                }\n+            }\n         }\n         ResolutionError::UndeclaredLabel(name) => {\n             span_err!(resolver.session,\n@@ -3509,13 +3548,33 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         format!(\"to call `{}::{}`\", path_str, path_name),\n                                 };\n \n+                                let mut context =  UnresolvedNameContext::Other;\n                                 if !msg.is_empty() {\n-                                    msg = format!(\". Did you mean {}?\", msg)\n+                                    msg = format!(\". Did you mean {}?\", msg);\n+                                } else {\n+                                    // we check if this a module and if so, we display a help\n+                                    // message\n+                                    let name_path = path.segments.iter()\n+                                                        .map(|seg| seg.identifier.name)\n+                                                        .collect::<Vec<_>>();\n+                                    let current_module = self.current_module.clone();\n+\n+                                    match self.resolve_module_path(current_module,\n+                                                   &name_path[..],\n+                                                   UseLexicalScope,\n+                                                   expr.span,\n+                                                   PathSearch) {\n+                                        Success(_) => {\n+                                            context = UnresolvedNameContext::PathIsMod(expr.id);\n+                                        },\n+                                        _ => {},\n+                                    };\n                                 }\n \n                                 resolve_error(self,\n                                               expr.span,\n-                                              ResolutionError::UnresolvedName(&*path_name, &*msg));\n+                                              ResolutionError::UnresolvedName(\n+                                                  &*path_name, &*msg, context));\n                             }\n                         }\n                     }"}]}