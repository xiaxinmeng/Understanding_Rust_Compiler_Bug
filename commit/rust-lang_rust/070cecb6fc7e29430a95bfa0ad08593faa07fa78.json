{"sha": "070cecb6fc7e29430a95bfa0ad08593faa07fa78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MGNlY2I2ZmM3ZTI5NDMwYTk1YmZhMGFkMDg1OTNmYWEwN2ZhNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-26T12:50:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-26T12:50:48Z"}, "message": "Auto merge of #1192 - RalfJung:disable-stacked-borrows, r=RalfJung\n\nadd an option to disable Stacked Borrows\n\nwhile keeping validation enabled. Fixes https://github.com/rust-lang/miri/issues/1183.", "tree": {"sha": "b83cfdb786c727732af1a6358501f5368e830824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b83cfdb786c727732af1a6358501f5368e830824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/070cecb6fc7e29430a95bfa0ad08593faa07fa78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/070cecb6fc7e29430a95bfa0ad08593faa07fa78", "html_url": "https://github.com/rust-lang/rust/commit/070cecb6fc7e29430a95bfa0ad08593faa07fa78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/070cecb6fc7e29430a95bfa0ad08593faa07fa78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05a9d9b4105459928e878b464eb56f95d64091b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/05a9d9b4105459928e878b464eb56f95d64091b9", "html_url": "https://github.com/rust-lang/rust/commit/05a9d9b4105459928e878b464eb56f95d64091b9"}, {"sha": "7e128beff92f0a3c790e18dd1c43e107629d6fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e128beff92f0a3c790e18dd1c43e107629d6fa9", "html_url": "https://github.com/rust-lang/rust/commit/7e128beff92f0a3c790e18dd1c43e107629d6fa9"}], "stats": {"total": 128, "additions": 79, "deletions": 49}, "files": [{"sha": "f18a5d668c392f090f2c0ca7154ef4b7c7ab7f8d", "filename": "README.md", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -14,7 +14,8 @@ for example:\n * Not sufficiently aligned memory accesses and references\n * Violation of *some* basic type invariants (a `bool` that is not 0 or 1, for example,\n   or an invalid enum discriminant)\n-* **Experimental**: Violations of the rules governing aliasing for reference types\n+* **Experimental**: Violations of the [Stacked Borrows] rules governing aliasing\n+  for reference types\n \n Miri has already discovered some [real-world bugs](#bugs-found-by-miri).  If you\n found a bug with Miri, we'd appreciate if you tell us and we'll add it to the\n@@ -47,6 +48,7 @@ program, and cannot run all programs:\n [mir]: https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md\n [`unreachable_unchecked`]: https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html\n [`copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html\n+[Stacked Borrows]: https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\n \n \n ## Using Miri\n@@ -152,10 +154,13 @@ Several `-Z` flags are relevant for Miri:\n   **NOTE**: This entropy is not good enough for cryptographic use!  Do not\n   generate secret keys in Miri or perform other kinds of cryptographic\n   operations that rely on proper random numbers.\n-* `-Zmiri-disable-validation` disables enforcing validity invariants and\n-  reference aliasing rules, which are enforced by default.  This is mostly\n-  useful for debugging.  It means Miri will miss bugs in your program.  However,\n-  this can also help to make Miri run faster.\n+* `-Zmiri-disable-validation` disables enforcing validity invariants, which are\n+  enforced by default.  This is mostly useful for debugging.  It means Miri will\n+  miss bugs in your program.  However, this can also help to make Miri run\n+  faster.\n+* `-Zmiri-disable-stacked-borrows` disables checking the experimental\n+  [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n+  means no aliasing violations will be detected.\n * `-Zmiri-disable-isolation` disables host host isolation.  As a consequence,\n   the program has access to host resources such as environment variables, file\n   systems, and randomness.\n@@ -234,7 +239,7 @@ Definite bugs found:\n * [The Unix allocator calling `posix_memalign` in an invalid way](https://github.com/rust-lang/rust/issues/62251)\n * [`getrandom` calling the `getrandom` syscall in an invalid way](https://github.com/rust-random/getrandom/pull/73)\n \n-Violations of Stacked Borrows found that are likely bugs (but Stacked Borrows is currently just an experiment):\n+Violations of [Stacked Borrows] found that are likely bugs (but Stacked Borrows is currently just an experiment):\n \n * [`VecDeque` creating overlapping mutable references](https://github.com/rust-lang/rust/pull/56161)\n * [`BTreeMap` creating mutable references that overlap with shared references](https://github.com/rust-lang/rust/pull/58431)"}, {"sha": "2483f2de3a864208a655f88deeb206d4956c9045", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -31,6 +31,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n             self.bencher.iter(|| {\n                 let config = miri::MiriConfig {\n                     validate: true,\n+                    stacked_borrows: true,\n                     communicate: false,\n                     ignore_leaks: false,\n                     excluded_env_vars: vec![],"}, {"sha": "abda47f75b1c20b8ced960aa1f1575790c951393", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -46,6 +46,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                             {\n                                 let config = MiriConfig {\n                                     validate: true,\n+                                    stacked_borrows: true,\n                                     communicate: false,\n                                     ignore_leaks: false,\n                                     excluded_env_vars: vec![],\n@@ -67,6 +68,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n             } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n                 let config = MiriConfig {\n                     validate: true,\n+                    stacked_borrows: true,\n                     communicate: false,\n                     ignore_leaks: false,\n                     excluded_env_vars: vec![],"}, {"sha": "9523609889cd719e43db1b10ac40fde0d4db2d92", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -130,6 +130,7 @@ fn main() {\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut validate = true;\n+    let mut stacked_borrows = true;\n     let mut communicate = false;\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n@@ -150,6 +151,9 @@ fn main() {\n                 \"-Zmiri-disable-validation\" => {\n                     validate = false;\n                 }\n+                \"-Zmiri-disable-stacked-borrows\" => {\n+                    stacked_borrows = false;\n+                }\n                 \"-Zmiri-disable-isolation\" => {\n                     communicate = true;\n                 }\n@@ -229,6 +233,7 @@ fn main() {\n     debug!(\"miri arguments: {:?}\", miri_args);\n     let miri_config = miri::MiriConfig {\n         validate,\n+        stacked_borrows,\n         communicate,\n         ignore_leaks,\n         excluded_env_vars,"}, {"sha": "eca634d02098c8f26607eec03485ca2f9684ef7e", "filename": "src/eval.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -14,8 +14,10 @@ use crate::*;\n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n-    /// Determine if validity checking and Stacked Borrows are enabled.\n+    /// Determine if validity checking is enabled.\n     pub validate: bool,\n+    /// Determines if Stacked Borrows is enabled.\n+    pub stacked_borrows: bool,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n     /// Determines if memory leaks should be ignored.\n@@ -48,10 +50,13 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let mut ecx = InterpCx::new(\n         tcx.at(rustc_span::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(config.communicate),\n+        Evaluator::new(\n+            config.communicate,\n+            config.validate,\n+        ),\n         MemoryExtra::new(\n             StdRng::seed_from_u64(config.seed.unwrap_or(0)),\n-            config.validate,\n+            config.stacked_borrows,\n             config.tracked_pointer_tag,\n         ),\n     );"}, {"sha": "7cea203d5e7678478082baa8e78f895c0da568b3", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -56,7 +56,7 @@ pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::stacked_borrows::{\n-    EvalContextExt as StackedBorEvalContextExt, GlobalState, Item, Permission, PtrId, Stack,\n+    EvalContextExt as StackedBorEvalContextExt, Item, Permission, PtrId, Stack,\n     Stacks, Tag,\n };\n "}, {"sha": "8fa5268c19004fdfc210c22c896ff3ec0bc23454", "filename": "src/machine.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -4,6 +4,7 @@\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::rc::Rc;\n+use std::num::NonZeroU64;\n \n use rand::rngs::StdRng;\n \n@@ -63,30 +64,31 @@ impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n /// Extra per-allocation data\n #[derive(Debug, Clone)]\n pub struct AllocExtra {\n-    /// Stacked Borrows state is only added if validation is enabled.\n+    /// Stacked Borrows state is only added if it is enabled.\n     pub stacked_borrows: Option<stacked_borrows::AllocExtra>,\n }\n \n /// Extra global memory data\n #[derive(Clone, Debug)]\n pub struct MemoryExtra {\n-    pub stacked_borrows: stacked_borrows::MemoryExtra,\n+    pub stacked_borrows: Option<stacked_borrows::MemoryExtra>,\n     pub intptrcast: intptrcast::MemoryExtra,\n \n     /// The random number generator used for resolving non-determinism.\n     pub(crate) rng: RefCell<StdRng>,\n-\n-    /// Whether to enforce the validity invariant.\n-    pub(crate) validate: bool,\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, validate: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n+    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n+        let stacked_borrows = if stacked_borrows {\n+            Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n+        } else {\n+            None\n+        };\n         MemoryExtra {\n-            stacked_borrows: Rc::new(RefCell::new(GlobalState::new(tracked_pointer_tag))),\n+            stacked_borrows,\n             intptrcast: Default::default(),\n             rng: RefCell::new(rng),\n-            validate,\n         }\n     }\n }\n@@ -114,6 +116,9 @@ pub struct Evaluator<'tcx> {\n     /// and random number generation is delegated to the host.\n     pub(crate) communicate: bool,\n \n+    /// Whether to enforce the validity invariant.\n+    pub(crate) validate: bool,\n+\n     pub(crate) file_handler: FileHandler,\n \n     /// The temporary used for storing the argument of\n@@ -122,7 +127,7 @@ pub struct Evaluator<'tcx> {\n }\n \n impl<'tcx> Evaluator<'tcx> {\n-    pub(crate) fn new(communicate: bool) -> Self {\n+    pub(crate) fn new(communicate: bool, validate: bool) -> Self {\n         Evaluator {\n             // `env_vars` could be initialized properly here if `Memory` were available before\n             // calling this method.\n@@ -133,6 +138,7 @@ impl<'tcx> Evaluator<'tcx> {\n             last_error: None,\n             tls: TlsData::default(),\n             communicate,\n+            validate,\n             file_handler: Default::default(),\n             panic_payload: None,\n         }\n@@ -177,7 +183,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n-        ecx.memory.extra.validate\n+        ecx.machine.validate\n     }\n \n     #[inline(always)]\n@@ -299,27 +305,27 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n-        let (stacks, base_tag) = if memory_extra.validate {\n+        let (stacks, base_tag) = if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n             let (stacks, base_tag) = Stacks::new_allocation(\n                 id,\n                 alloc.size,\n-                Rc::clone(&memory_extra.stacked_borrows),\n+                Rc::clone(stacked_borrows),\n                 kind,\n             );\n             (Some(stacks), base_tag)\n         } else {\n             // No stacks, no tag.\n             (None, Tag::Untagged)\n         };\n-        let mut stacked_borrows = memory_extra.stacked_borrows.borrow_mut();\n+        let mut stacked_borrows = memory_extra.stacked_borrows.as_ref().map(|sb| sb.borrow_mut());\n         let alloc: Allocation<Tag, Self::AllocExtra> = alloc.with_tags_and_extra(\n             |alloc| {\n-                if !memory_extra.validate {\n-                    Tag::Untagged\n-                } else {\n+                if let Some(stacked_borrows) = stacked_borrows.as_mut() {\n                     // Only statics may already contain pointers at this point\n                     assert_eq!(kind, MiriMemoryKind::Static.into());\n                     stacked_borrows.static_base_ptr(alloc)\n+                } else {\n+                    Tag::Untagged\n                 }\n             },\n             AllocExtra { stacked_borrows: stacks },\n@@ -329,10 +335,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn tag_static_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n-        if !memory_extra.validate {\n-            Tag::Untagged\n+        if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n+            stacked_borrows.borrow_mut().static_base_ptr(id)\n         } else {\n-            memory_extra.stacked_borrows.borrow_mut().static_base_ptr(id)\n+            Tag::Untagged\n         }\n     }\n \n@@ -342,7 +348,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         kind: mir::RetagKind,\n         place: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n-        if !Self::enforce_validity(ecx) {\n+        if ecx.memory.extra.stacked_borrows.is_none() {\n             // No tracking.\n             Ok(())\n         } else {\n@@ -352,8 +358,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, FrameData<'tcx>> {\n+        let call_id = ecx.memory.extra.stacked_borrows.as_ref().map_or(\n+            NonZeroU64::new(1).unwrap(),\n+            |stacked_borrows| stacked_borrows.borrow_mut().new_call(),\n+        );\n         Ok(FrameData {\n-            call_id: ecx.memory.extra.stacked_borrows.borrow_mut().new_call(),\n+            call_id,\n             catch_panic: None,\n         })\n     }"}, {"sha": "e930af7f46c5ca5425d1eba3cb754902da95360d", "filename": "src/shims/panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -146,7 +146,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else {\n             StackPopInfo::Normal\n         };\n-        this.memory.extra.stacked_borrows.borrow_mut().end_call(extra.call_id);\n+        if let Some(stacked_borrows) = this.memory.extra.stacked_borrows.as_ref() {\n+            stacked_borrows.borrow_mut().end_call(extra.call_id);\n+        }\n         Ok(res)\n     }\n "}, {"sha": "9a674830c8ec2c86e226261a969a5c5969500a27", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -575,7 +575,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // breaking `Rc::from_raw`.\n             RefKind::Raw { .. } => Tag::Untagged,\n             // All other pointesr are properly tracked.\n-            _ => Tag::Tagged(this.memory.extra.stacked_borrows.borrow_mut().new_ptr()),\n+            _ => Tag::Tagged(this.memory.extra.stacked_borrows.as_ref().unwrap().borrow_mut().new_ptr()),\n         };\n \n         // Reborrow."}, {"sha": "9770917b629bedb164c56588f0bf0c88a1c0e9a4", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+// This should fail even without validation/SB\n+// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee"}, {"sha": "030353c2cedb3c72e7f7aa64be1005aee8670f0a", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+// This should fail even without validation/SB\n+// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "b8ed2e3f1f35d549be88575167398ea8cd2ad879", "filename": "tests/compile-fail/stack_free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstack_free.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// Validation changes why we fail\n-// compile-flags: -Zmiri-disable-validation\n+// Validation/SB changes why we fail\n+// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n // error-pattern: tried to deallocate `Stack` memory but gave `Machine(Rust)` as the kind\n "}, {"sha": "a7bb33431e72177d8c4dae678fef98367e6788fa", "filename": "tests/compile-fail/static_memory_modification1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstatic_memory_modification1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstatic_memory_modification1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification1.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// Validation detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmiri-disable-validation\n+// Stacked Borrows detects that we are casting & to &mut and so it changes why we fail\n+// compile-flags: -Zmiri-disable-stacked-borrows\n \n static X: usize = 5;\n "}, {"sha": "065206a60dbffd98d68fbed7ac2c028b01a5004a", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// Validation detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmiri-disable-validation\n+// Stacked Borrows detects that we are casting & to &mut and so it changes why we fail\n+// compile-flags: -Zmiri-disable-stacked-borrows\n \n use std::mem::transmute;\n "}, {"sha": "94f88205073e2fc631f7d560fb530e75f414415e", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// Validation detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmiri-disable-validation\n+// Stacked Borrows detects that we are casting & to &mut and so it changes why we fail\n+// compile-flags: -Zmiri-disable-stacked-borrows\n \n use std::mem::transmute;\n "}, {"sha": "888b6f85e3fd56b79e42ed719e87eceeb9bf9e19", "filename": "tests/run-pass/observed_local_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Frun-pass%2Fobserved_local_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Frun-pass%2Fobserved_local_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fobserved_local_mut.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// Validation catches this (correctly) as UB.\n-// compile-flags: -Zmiri-disable-validation\n+// Stacked Borrows catches this (correctly) as UB.\n+// compile-flags: -Zmiri-disable-stacked-borrows\n \n // This test is intended to guard against the problem described in commit\n // 39bb1254d1eaf74f45a4e741097e33fc942168d5."}, {"sha": "238122de8d4c0ccddc3e226576604de445b89b5d", "filename": "tests/run-pass/transmute_fat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Frun-pass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/070cecb6fc7e29430a95bfa0ad08593faa07fa78/tests%2Frun-pass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftransmute_fat.rs?ref=070cecb6fc7e29430a95bfa0ad08593faa07fa78", "patch": "@@ -1,5 +1,5 @@\n-// Validation disallows this becuase the reference is never cast to a raw pointer.\n-// compile-flags: -Zmiri-disable-validation\n+// Stacked Borrows disallows this becuase the reference is never cast to a raw pointer.\n+// compile-flags: -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // If we are careful, we can exploit data layout..."}]}