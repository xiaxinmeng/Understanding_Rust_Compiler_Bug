{"sha": "862ba430c5bc1ba9e47644d2a75a6091842c53d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MmJhNDMwYzViYzFiYTllNDc2NDRkMmE3NWE2MDkxODQyYzUzZDA=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-07-05T08:02:53Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-05T00:42:36Z"}, "message": "Fix valgrind.h for Win64.\n_WIN32 is defined for 64-bit builds as well, so test for _WIN64 first.", "tree": {"sha": "0f1d0813a50c1e5c334435d764062975bffe67a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1d0813a50c1e5c334435d764062975bffe67a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/862ba430c5bc1ba9e47644d2a75a6091842c53d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/862ba430c5bc1ba9e47644d2a75a6091842c53d0", "html_url": "https://github.com/rust-lang/rust/commit/862ba430c5bc1ba9e47644d2a75a6091842c53d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/862ba430c5bc1ba9e47644d2a75a6091842c53d0/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463d6680d17380228dfea509b19b1ff67d50eafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/463d6680d17380228dfea509b19b1ff67d50eafc", "html_url": "https://github.com/rust-lang/rust/commit/463d6680d17380228dfea509b19b1ff67d50eafc"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "af01dfd71a71c71907b7391a7a55975e6daaa91a", "filename": "src/rt/valgrind/valgrind.h", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/862ba430c5bc1ba9e47644d2a75a6091842c53d0/src%2Frt%2Fvalgrind%2Fvalgrind.h", "raw_url": "https://github.com/rust-lang/rust/raw/862ba430c5bc1ba9e47644d2a75a6091842c53d0/src%2Frt%2Fvalgrind%2Fvalgrind.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvalgrind%2Fvalgrind.h?ref=862ba430c5bc1ba9e47644d2a75a6091842c53d0", "patch": "@@ -21,16 +21,16 @@\n    1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n \n-   2. The origin of this software must not be misrepresented; you must \n-      not claim that you wrote the original software.  If you use this \n-      software in a product, an acknowledgment in the product \n+   2. The origin of this software must not be misrepresented; you must\n+      not claim that you wrote the original software.  If you use this\n+      software in a product, an acknowledgment in the product\n       documentation would be appreciated but is not required.\n \n    3. Altered source versions must be plainly marked as such, and must\n       not be misrepresented as being the original software.\n \n-   4. The name of the author may not be used to endorse or promote \n-      products derived from this software without specific prior written \n+   4. The name of the author may not be used to endorse or promote\n+      products derived from this software without specific prior written\n       permission.\n \n    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n@@ -52,13 +52,13 @@\n    the terms of the GNU General Public License, version 2.  See the\n    COPYING file in the source distribution for details.\n \n-   ---------------------------------------------------------------- \n+   ----------------------------------------------------------------\n */\n \n \n /* This file is for inclusion into client (your!) code.\n \n-   You can use these macros to manipulate and query Valgrind's \n+   You can use these macros to manipulate and query Valgrind's\n    execution inside your own programs.\n \n    The resulting executables will still run without Valgrind, just a\n@@ -126,11 +126,11 @@\n #  define PLAT_x86_darwin 1\n #elif defined(__APPLE__) && defined(__x86_64__)\n #  define PLAT_amd64_darwin 1\n+#elif defined(__MINGW64__) || (defined(_WIN64) && defined(_M_X64))\n+#  define PLAT_amd64_win64 1\n #elif defined(__MINGW32__) || defined(__CYGWIN32__) \\\n       || (defined(_WIN32) && defined(_M_IX86))\n #  define PLAT_x86_win32 1\n-#elif defined(__MINGW64__) || (defined(_WIN64) && defined(_M_X64))\n-#  define PLAT_amd64_win64 1\n #elif defined(__linux__) && defined(__i386__)\n #  define PLAT_x86_linux 1\n #elif defined(__linux__) && defined(__x86_64__)\n@@ -214,8 +214,8 @@\n    this is executed not under Valgrind.  Args are passed in a memory\n    block, and so there's no intrinsic limit to the number that could\n    be passed, but it's currently five.\n-   \n-   The macro args are: \n+\n+   The macro args are:\n       _zzq_rlval    result lvalue\n       _zzq_default  default value (result returned when running on real CPU)\n       _zzq_request  request code\n@@ -242,7 +242,7 @@\n     ||  (defined(PLAT_x86_win32) && defined(__GNUC__))\n \n typedef\n-   struct { \n+   struct {\n       unsigned int nraddr; /* where's the code? */\n    }\n    OrigFn;\n@@ -306,7 +306,7 @@ typedef\n #if defined(PLAT_x86_win32) && !defined(__GNUC__)\n \n typedef\n-   struct { \n+   struct {\n       unsigned int nraddr; /* where's the code? */\n    }\n    OrigFn;\n@@ -374,12 +374,13 @@ valgrind_do_client_request_expr(uintptr_t _zzq_default, uintptr_t _zzq_request,\n \n #endif /* PLAT_x86_win32 */\n \n-/* ------------------------ amd64-{linux,darwin} --------------- */\n+/* -------------------- amd64-{linux,darwin,win64} ------------- */\n \n-#if defined(PLAT_amd64_linux)  ||  defined(PLAT_amd64_darwin)\n+#if defined(PLAT_amd64_linux)  ||  defined(PLAT_amd64_darwin) \\\n+    || defined(PLAT_amd64_win64)\n \n typedef\n-   struct { \n+   struct {\n       unsigned long long int nraddr; /* where's the code? */\n    }\n    OrigFn;\n@@ -443,7 +444,7 @@ typedef\n #if defined(PLAT_ppc32_linux)\n \n typedef\n-   struct { \n+   struct {\n       unsigned int nraddr; /* where's the code? */\n    }\n    OrigFn;\n@@ -512,7 +513,7 @@ typedef\n #if defined(PLAT_ppc64_linux)\n \n typedef\n-   struct { \n+   struct {\n       unsigned long long int nraddr; /* where's the code? */\n       unsigned long long int r2;  /* what tocptr do we need? */\n    }\n@@ -591,7 +592,7 @@ typedef\n #if defined(PLAT_arm_linux)\n \n typedef\n-   struct { \n+   struct {\n       unsigned int nraddr; /* where's the code? */\n    }\n    OrigFn;\n@@ -736,7 +737,7 @@ typedef\n #if defined(PLAT_mips32_linux)\n \n typedef\n-   struct { \n+   struct {\n       unsigned int nraddr; /* where's the code? */\n    }\n    OrigFn;\n@@ -750,7 +751,7 @@ typedef\n                      \"srl $0, $0, 29\\n\\t\"       \\\n                      \"srl $0, $0, 3\\n\\t\"        \\\n                      \"srl $0, $0, 19\\n\\t\"\n-                    \n+\n #define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n        _zzq_default, _zzq_request,                                \\\n        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)     \\\n@@ -1999,7 +2000,7 @@ typedef\n #define VALGRIND_RESTORE_STACK             \\\n       \"mr 1,28\\n\\t\"\n \n-/* These CALL_FN_ macros assume that on ppc32-linux, \n+/* These CALL_FN_ macros assume that on ppc32-linux,\n    sizeof(unsigned long) == 4. */\n \n #define CALL_FN_W_v(lval, orig)                                   \\\n@@ -3509,7 +3510,7 @@ typedef\n #define __CALLER_SAVED_REGS \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"14\", \\\n                            \"f0\",\"f1\",\"f2\",\"f3\",\"f4\",\"f5\",\"f6\",\"f7\"\n \n-/* Nb: Although r11 is modified in the asm snippets below (inside \n+/* Nb: Although r11 is modified in the asm snippets below (inside\n    VALGRIND_CFI_PROLOGUE) it is not listed in the clobber section, for\n    two reasons:\n    (1) r11 is restored in VALGRIND_CFI_EPILOGUE, so effectively it is not\n@@ -3959,7 +3960,7 @@ typedef\n #endif /* PLAT_s390x_linux */\n \n /* ------------------------- mips32-linux ----------------------- */\n- \n+\n #if defined(PLAT_mips32_linux)\n \n /* These regs are trashed by the hidden call. */\n@@ -4935,7 +4936,7 @@ typedef\n #define VG_IS_TOOL_USERREQ(a, b, v) \\\n    (VG_USERREQ_TOOL_BASE(a,b) == ((v) & 0xffff0000))\n \n-/* !! ABIWARNING !! ABIWARNING !! ABIWARNING !! ABIWARNING !! \n+/* !! ABIWARNING !! ABIWARNING !! ABIWARNING !! ABIWARNING !!\n    This enum comprises an ABI exported by Valgrind to programs\n    which use client requests.  DO NOT CHANGE THE ORDER OF THESE\n    ENTRIES, NOR DELETE ANY -- add new ones at the end. */\n@@ -5073,7 +5074,7 @@ VALGRIND_PRINTF(const char *format, ...)\n    _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n                               VG_USERREQ__PRINTF_VALIST_BY_REF,\n                               (unsigned long)format,\n-                              (unsigned long)&vargs, \n+                              (unsigned long)&vargs,\n                               0, 0, 0);\n #endif\n    va_end(vargs);\n@@ -5111,7 +5112,7 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n    _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n                               VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF,\n                               (unsigned long)format,\n-                              (unsigned long)&vargs, \n+                              (unsigned long)&vargs,\n                               0, 0, 0);\n #endif\n    va_end(vargs);\n@@ -5122,7 +5123,7 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n \n /* These requests allow control to move from the simulated CPU to the\n    real CPU, calling an arbitary function.\n-   \n+\n    Note that the current ThreadId is inserted as the first argument.\n    So this call:\n \n@@ -5208,15 +5209,15 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n    - It marks the block as being addressable and undefined (if 'is_zeroed' is\n      not set), or addressable and defined (if 'is_zeroed' is set).  This\n      controls how accesses to the block by the program are handled.\n-   \n+\n    'addr' is the start of the usable block (ie. after any\n    redzone), 'sizeB' is its size.  'rzB' is the redzone size if the allocator\n    can apply redzones -- these are blocks of padding at the start and end of\n    each block.  Adding redzones is recommended as it makes it much more likely\n    Valgrind will spot block overruns.  `is_zeroed' indicates if the memory is\n    zeroed (or filled with another predictable value), as is the case for\n    calloc().\n-   \n+\n    VALGRIND_MALLOCLIKE_BLOCK should be put immediately after the point where a\n    heap block -- that will be used by the client program -- is allocated.\n    It's best to put it at the outermost level of the allocator if possible;"}]}