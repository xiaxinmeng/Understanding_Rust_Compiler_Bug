{"sha": "83077bee9352cea17758b26aa467022b2fbdc599", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMDc3YmVlOTM1MmNlYTE3NzU4YjI2YWE0NjcwMjJiMmZiZGM1OTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-06T11:56:36Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-06T12:16:50Z"}, "message": "compile-fail tests.\n\nOne just checks that we are feature-gating the UGEH attribute (as\nusual for attributes associated with unstable features).\n\nThe other is adapted from the RFC 1238 text, except that it has been\nextended somewhat to actually *illustrate* the scenario that we are\ntrying to prevent, namely observing the state of data, from safe code,\nafter the destructor for that data has been executed.", "tree": {"sha": "95069015b100de33cbea0ab4261539dcfc29665a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95069015b100de33cbea0ab4261539dcfc29665a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83077bee9352cea17758b26aa467022b2fbdc599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83077bee9352cea17758b26aa467022b2fbdc599", "html_url": "https://github.com/rust-lang/rust/commit/83077bee9352cea17758b26aa467022b2fbdc599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83077bee9352cea17758b26aa467022b2fbdc599/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea299beaaf5d4a735101a1209d774a2faf01343", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea299beaaf5d4a735101a1209d774a2faf01343", "html_url": "https://github.com/rust-lang/rust/commit/eea299beaaf5d4a735101a1209d774a2faf01343"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "a7349e360076ae57d69bff756a55ef9b4ea689c3", "filename": "src/test/compile-fail/feature-gate-dropck-ugeh.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/83077bee9352cea17758b26aa467022b2fbdc599/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83077bee9352cea17758b26aa467022b2fbdc599/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs?ref=83077bee9352cea17758b26aa467022b2fbdc599", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that attempts to use the unsafe attribute are feature-gated.\n+\n+// Example adapted from RFC 1238 text (just left out the feature gate).\n+\n+// https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md#example-of-the-unguarded-escape-hatch\n+\n+// #![feature(dropck_parametricity)]\n+\n+use std::cell::Cell;\n+\n+struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n+\n+struct Foo<T> { data: Vec<T> }\n+\n+impl<T> Drop for Foo<T> {\n+    #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n+    //~^ ERROR unsafe_destructor_blind_to_params has unstable semantics\n+    fn drop(&mut self) { }\n+}\n+\n+fn main() {\n+    let mut foo = Foo {  data: Vec::new() };\n+    foo.data.push(Concrete(0, Cell::new(None)));\n+    foo.data.push(Concrete(0, Cell::new(None)));\n+\n+    foo.data[0].1.set(Some(&foo.data[1]));\n+    foo.data[1].1.set(Some(&foo.data[0]));\n+}\n+"}, {"sha": "1de20411f3a383e97a98302a144f2a99b45c7460", "filename": "src/test/compile-fail/issue28498-reject-ex1.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/83077bee9352cea17758b26aa467022b2fbdc599/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-ex1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83077bee9352cea17758b26aa467022b2fbdc599/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-ex1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue28498-reject-ex1.rs?ref=83077bee9352cea17758b26aa467022b2fbdc599", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Example taken from RFC 1238 text\n+\n+// https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md#examples-of-code-that-will-start-to-be-rejected\n+\n+// Compare against test/run-pass/issue28498-must-work-ex2.rs\n+\n+use std::cell::Cell;\n+\n+#[derive(Copy, Clone, Debug)]\n+enum Validity { Valid, Invalid }\n+use self::Validity::{Valid, Invalid};\n+\n+struct Abstract<T> {\n+    id: u32,\n+    nbor: Cell<Option<T>>,\n+    valid: Validity,\n+    observe: fn(&Cell<Option<T>>) -> (u32, Validity),\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Neighbor<'a>(&'a Abstract<Neighbor<'a>>);\n+\n+fn observe(c: &Cell<Option<Neighbor>>) -> (u32, Validity) {\n+    let r = c.get().unwrap().0;\n+    (r.id, r.valid)\n+}\n+\n+impl<'a> Abstract<Neighbor<'a>> {\n+    fn new(id: u32) -> Self {\n+        Abstract {\n+            id: id,\n+            nbor: Cell::new(None),\n+            valid: Valid,\n+            observe: observe\n+        }\n+    }\n+}\n+\n+struct Foo<T> {\n+    data: Vec<T>,\n+}\n+\n+impl<T> Drop for Abstract<T> {\n+    fn drop(&mut self) {\n+        let (nbor_id, nbor_valid) = (self.observe)(&self.nbor);\n+        println!(\"dropping element {} ({:?}), observed neighbor {} ({:?})\",\n+                 self.id,\n+                 self.valid,\n+                 nbor_id,\n+                 nbor_valid);\n+        self.valid = Invalid;\n+    }\n+}\n+\n+fn main() {\n+    let mut foo: Foo<Abstract<Neighbor>> = Foo {  data: Vec::new() };\n+    foo.data.push(Abstract::new(0));\n+    foo.data.push(Abstract::new(1));\n+\n+    foo.data[0].nbor.set(Some(Neighbor(&foo.data[1])));\n+    //~^ ERROR `foo.data` does not live long enough\n+    foo.data[1].nbor.set(Some(Neighbor(&foo.data[0])));\n+    //~^ ERROR `foo.data` does not live long enough\n+}"}]}