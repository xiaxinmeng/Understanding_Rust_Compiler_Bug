{"sha": "842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MmJiZDI3NjQ3OTdjYmI3YTgzNjRjYjE3YzBiYjRiNGE1Yzg0MzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-01T09:16:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-04T08:38:54Z"}, "message": "make Memory::get_fn take a Scalar like most of the Memory API surface", "tree": {"sha": "b364a533d42ba058b5b72c8c885d11294e8b8e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b364a533d42ba058b5b72c8c885d11294e8b8e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "html_url": "https://github.com/rust-lang/rust/commit/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4be08a66692e5f9aa15b14b233d88e626f5c605", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4be08a66692e5f9aa15b14b233d88e626f5c605", "html_url": "https://github.com/rust-lang/rust/commit/b4be08a66692e5f9aa15b14b233d88e626f5c605"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "1cdfa4c63b475f8d3fae8a23c7c2e0961ec09025", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "patch": "@@ -586,8 +586,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n     pub fn get_fn(\n         &self,\n-        ptr: Pointer<M::PointerTag>,\n+        ptr: Scalar<M::PointerTag>,\n     ) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {\n+        let ptr = self.force_ptr(ptr)?; // We definitely need a pointer value.\n         if ptr.offset.bytes() != 0 {\n             return err!(InvalidFunctionPointer);\n         }"}, {"sha": "0ab428628de688d12ee78c08ee383225453ad839", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "patch": "@@ -79,7 +79,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let (fn_val, abi) = match func.layout.ty.sty {\n                     ty::FnPtr(sig) => {\n                         let caller_abi = sig.abi();\n-                        let fn_ptr = self.force_ptr(self.read_scalar(func)?.not_undef()?)?;\n+                        let fn_ptr = self.read_scalar(func)?.not_undef()?;\n                         let fn_val = self.memory.get_fn(fn_ptr)?;\n                         (fn_val, caller_abi)\n                     }\n@@ -438,7 +438,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     self.tcx.data_layout.pointer_align.abi,\n                 )?.expect(\"cannot be a ZST\");\n                 let fn_ptr = self.memory.get(vtable_slot.alloc_id)?\n-                    .read_ptr_sized(self, vtable_slot)?.to_ptr()?;\n+                    .read_ptr_sized(self, vtable_slot)?.not_undef()?;\n                 let drop_fn = self.memory.get_fn(fn_ptr)?;\n \n                 // `*mut receiver_place.layout.ty` is almost the layout that we"}, {"sha": "e7363f6876c28ce7abeb9a2370d4eeb60fb685e0", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "patch": "@@ -112,7 +112,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let drop_fn = self.memory\n             .get(vtable.alloc_id)?\n             .read_ptr_sized(self, vtable)?\n-            .to_ptr()?;\n+            .not_undef()?;\n         // We *need* an instance here, no other kind of function value, to be able\n         // to determine the type.\n         let drop_instance = self.memory.get_fn(drop_fn)?.as_instance()?;"}, {"sha": "5049c50004a95f05c69b0327a4cd02f34efdecc0", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842bbd2764797cbb7a8364cb17c0bb4b4a5c8432/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=842bbd2764797cbb7a8364cb17c0bb4b4a5c8432", "patch": "@@ -457,10 +457,10 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             }\n             ty::FnPtr(_sig) => {\n                 let value = value.to_scalar_or_undef();\n-                let ptr = try_validation!(value.to_ptr(),\n-                    value, self.path, \"a pointer\");\n-                let _fn = try_validation!(self.ecx.memory.get_fn(ptr),\n-                    value, self.path, \"a function pointer\");\n+                let _fn = try_validation!(\n+                    value.not_undef().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n+                    value, self.path, \"a function pointer\"\n+                );\n                 // FIXME: Check if the signature matches\n             }\n             // This should be all the primitive types\n@@ -508,7 +508,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                         // differentiate between null pointers and dangling pointers\n                         if self.ref_tracking_for_consts.is_some() &&\n                             self.ecx.memory.get(ptr.alloc_id).is_err() &&\n-                            self.ecx.memory.get_fn(ptr).is_err() {\n+                            self.ecx.memory.get_fn(ptr.into()).is_err() {\n                             return validation_failure!(\n                                 \"encountered dangling pointer\", self.path\n                             );"}]}