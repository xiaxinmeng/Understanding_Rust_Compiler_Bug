{"sha": "1d315cf7da85911dfa239331fab30607ce2d1dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMzE1Y2Y3ZGE4NTkxMWRmYTIzOTMzMWZhYjMwNjA3Y2UyZDFkY2U=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-02-17T12:38:42Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-12T11:06:42Z"}, "message": "Add `EndRegion` statement kind to MIR.\n\n * Emit `EndRegion` for every code-extent for which we observe a\n   borrow. To do this, we needed to thread source info back through\n   to `fn in_scope`, which makes this commit a bit more painful than\n   one might have expected.\n\n * There is `end_region` emission in `Builder::pop_scope` and in\n   `Builder::exit_scope`; the first handles falling out of a scope\n   normally, the second handles e.g. `break`.\n\n * Remove `EndRegion` statements during the erase_regions mir\n   transformation.\n\n * Preallocate the terminator block, and throw an `Unreachable` marker\n   on it from the outset. Then overwrite that Terminator as necessary\n   on demand.\n\n * Instead of marking the scope as needs_cleanup after seeing a\n   borrow, just treat every scope in the chain as being part of the\n   diverge_block (after any *one* of them has separately signalled\n   that it needs cleanup, e.g. due to having a destructor to run).\n\n * Allow for resume terminators to be patched when looking up drop flags.\n\n   (In particular, `MirPatch::new` has an explicit code path,\n   presumably previously unreachable, that patches up such resume\n   terminators.)\n\n * Make `Scope` implement `Debug` trait.\n\n * Expanded a stray comment: we do not emit StorageDead on diverging\n   paths, but that end behavior might not be desirable.", "tree": {"sha": "edd5fdd2b0ac1704287b87ebfa155c499b3d7e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd5fdd2b0ac1704287b87ebfa155c499b3d7e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d315cf7da85911dfa239331fab30607ce2d1dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d315cf7da85911dfa239331fab30607ce2d1dce", "html_url": "https://github.com/rust-lang/rust/commit/1d315cf7da85911dfa239331fab30607ce2d1dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d315cf7da85911dfa239331fab30607ce2d1dce/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0c4cde80ef871858d5e9dcef506157fcdcc21c", "html_url": "https://github.com/rust-lang/rust/commit/7c0c4cde80ef871858d5e9dcef506157fcdcc21c"}], "stats": {"total": 104, "additions": 94, "deletions": 10}, "files": [{"sha": "cb017b7f8864da797d3c7e1e31a529d83a82f251", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -226,6 +226,9 @@ for mir::StatementKind<'tcx> {\n             mir::StatementKind::StorageDead(ref lvalue) => {\n                 lvalue.hash_stable(hcx, hasher);\n             }\n+            mir::StatementKind::EndRegion(ref extents) => {\n+                extents.hash_stable(hcx, hasher);\n+            }\n             mir::StatementKind::Nop => {}\n             mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 asm.hash_stable(hcx, hasher);"}, {"sha": "c8d03e7b305889061b9ce2c01b571f4da4e0df3d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -12,6 +12,7 @@\n \n use graphviz::IntoCow;\n use middle::const_val::ConstVal;\n+use middle::region::CodeExtent;\n use rustc_const_math::{ConstUsize, ConstInt, ConstMathErr};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::control_flow_graph::dominators::{Dominators, dominators};\n@@ -804,6 +805,10 @@ pub enum StatementKind<'tcx> {\n         inputs: Vec<Operand<'tcx>>\n     },\n \n+    /// Mark one terminating point of an extent (i.e. static region).\n+    /// (The starting point(s) arise implicitly from borrows.)\n+    EndRegion(CodeExtent),\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }\n@@ -813,6 +818,8 @@ impl<'tcx> Debug for Statement<'tcx> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref lv, ref rv) => write!(fmt, \"{:?} = {:?}\", lv, rv),\n+            // (reuse lifetime rendering policy from ppaux.)\n+            EndRegion(ref ce) => write!(fmt, \"EndRegion({})\", ty::ReScope(*ce)),\n             StorageLive(ref lv) => write!(fmt, \"StorageLive({:?})\", lv),\n             StorageDead(ref lv) => write!(fmt, \"StorageDead({:?})\", lv),\n             SetDiscriminant{lvalue: ref lv, variant_index: index} => {\n@@ -1472,6 +1479,13 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n                 outputs: outputs.fold_with(folder),\n                 inputs: inputs.fold_with(folder)\n             },\n+\n+            // Note for future: If we want to expose the extents\n+            // during the fold, we need to either generalize EndRegion\n+            // to carry `[ty::Region]`, or extend the `TypeFolder`\n+            // trait with a `fn fold_extent`.\n+            EndRegion(ref extent) => EndRegion(extent.clone()),\n+\n             Nop => Nop,\n         };\n         Statement {\n@@ -1490,6 +1504,13 @@ impl<'tcx> TypeFoldable<'tcx> for Statement<'tcx> {\n             StorageDead(ref lvalue) => lvalue.visit_with(visitor),\n             InlineAsm { ref outputs, ref inputs, .. } =>\n                 outputs.visit_with(visitor) || inputs.visit_with(visitor),\n+\n+            // Note for future: If we want to expose the extents\n+            // during the visit, we need to either generalize EndRegion\n+            // to carry `[ty::Region]`, or extend the `TypeVisitor`\n+            // trait with a `fn visit_extent`.\n+            EndRegion(ref _extent) => false,\n+\n             Nop => false,\n         }\n     }"}, {"sha": "ac1c0306f701c7adc0114c74e8b4c2e49b1bb1ac", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -325,6 +325,7 @@ macro_rules! make_mir_visitor {\n                                           ref $($mutability)* rvalue) => {\n                         self.visit_assign(block, lvalue, rvalue, location);\n                     }\n+                    StatementKind::EndRegion(_) => {}\n                     StatementKind::SetDiscriminant{ ref $($mutability)* lvalue, .. } => {\n                         self.visit_lvalue(lvalue, LvalueContext::Store, location);\n                     }"}, {"sha": "1a1ac7f9c74d3eab0f47b37342ece825f34449e9", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -474,6 +474,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "2c55460fb301b3ed55fab6c16e2eea04560e2ae1", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -105,6 +105,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,"}, {"sha": "7acfc2c3bbaff7b6701b974fe458cb8f004fa38e", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -585,6 +585,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             // drop elaboration should handle that by itself\n                             continue\n                         }\n+                        TerminatorKind::Resume => {\n+                            // We can replace resumes with gotos\n+                            // jumping to a canonical resume.\n+                            continue\n+                        }\n                         TerminatorKind::DropAndReplace { .. } => {\n                             // this contains the move of the source and\n                             // the initialization of the destination. We"}, {"sha": "a0ecdcc8e2ff728d0b5ff2abe6f5e1f526d7433c", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -413,6 +413,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                           \"SetDiscriminant should not exist during borrowck\");\n             }\n             StatementKind::InlineAsm { .. } |\n+            StatementKind::EndRegion(_) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "e3b99b9d4bd43f92ac16ad3e7559d3c998c9c0ba", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -394,6 +394,7 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => {}\n         },\n         None => {"}, {"sha": "865174aa272ec10d03cd3bb54861e3ab136c88be", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let outer_visibility_scope = this.visibility_scope;\n         let source_info = this.source_info(span);\n         for stmt in stmts {\n-            let Stmt { span: _, kind, opt_destruction_extent } = this.hir.mirror(stmt);\n+            let Stmt { span, kind, opt_destruction_extent } = this.hir.mirror(stmt);\n             match kind {\n                 StmtKind::Expr { scope, expr } => {\n                     unpack!(block = this.in_opt_scope(\n@@ -122,7 +122,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         if let Some(expr) = expr {\n             unpack!(block = this.into(destination, block, expr));\n         } else {\n-            let source_info = this.source_info(span);\n             this.cfg.push_assign_unit(block, source_info, destination);\n         }\n         // Finally, we pop all the let scopes before exiting out from the scope of block"}, {"sha": "c20f8bde783868baf7ddda11ee62477b6fb28b8a", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -14,6 +14,7 @@\n //! Routines for manipulating the control-flow graph.\n \n use build::CFG;\n+use rustc::middle::region::CodeExtent;\n use rustc::mir::*;\n \n impl<'tcx> CFG<'tcx> {\n@@ -43,6 +44,16 @@ impl<'tcx> CFG<'tcx> {\n         self.block_data_mut(block).statements.push(statement);\n     }\n \n+    pub fn push_end_region(&mut self,\n+                           block: BasicBlock,\n+                           source_info: SourceInfo,\n+                           extent: CodeExtent) {\n+        self.push(block, Statement {\n+            source_info: source_info,\n+            kind: StatementKind::EndRegion(extent),\n+        });\n+    }\n+\n     pub fn push_assign(&mut self,\n                        block: BasicBlock,\n                        source_info: SourceInfo,"}, {"sha": "9be306d2848b3f4c37f86f47895a9a54ee42e418", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -49,7 +49,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         let expr_ty = expr.ty.clone();\n         let temp = this.temp(expr_ty.clone(), expr_span);\n-        let source_info = this.source_info(expr_span);\n \n         if !expr_ty.is_never() && temp_lifetime.is_some() {\n             this.cfg.push(block, Statement {"}, {"sha": "469fd5750a2f934751a4cfb231fdd00f17c72584", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -94,10 +94,11 @@ use rustc::ty::subst::{Kind, Subst};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use syntax_pos::Span;\n+use syntax_pos::{Span};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fx::FxHashMap;\n \n+#[derive(Debug)]\n pub struct Scope<'tcx> {\n     /// The visibility scope this scope was created in.\n     visibility_scope: VisibilityScope,\n@@ -114,7 +115,7 @@ pub struct Scope<'tcx> {\n     ///  * pollutting the cleanup MIR with StorageDead creates\n     ///    landing pads even though there's no actual destructors\n     ///  * freeing up stack space has no effect during unwinding\n-    needs_cleanup: bool,\n+    pub(super) needs_cleanup: bool,\n \n     /// set of lvalues to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n@@ -141,6 +142,7 @@ pub struct Scope<'tcx> {\n     cached_exits: FxHashMap<(BasicBlock, CodeExtent), BasicBlock>,\n }\n \n+#[derive(Debug)]\n struct DropData<'tcx> {\n     /// span where drop obligation was incurred (typically where lvalue was declared)\n     span: Span,\n@@ -152,6 +154,7 @@ struct DropData<'tcx> {\n     kind: DropKind\n }\n \n+#[derive(Debug)]\n enum DropKind {\n     Value {\n         /// The cached block for the cleanups-on-diverge path. This block\n@@ -163,6 +166,7 @@ enum DropKind {\n     Storage\n }\n \n+#[derive(Debug)]\n struct FreeData<'tcx> {\n     /// span where free obligation was incurred\n     span: Span,\n@@ -338,6 +342,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                           &self.scopes,\n                                           block,\n                                           self.arg_count));\n+\n+        self.cfg.push_end_region(block, extent.1, scope.extent);\n         block.unit()\n     }\n \n@@ -379,6 +385,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                               rest,\n                                               block,\n                                               self.arg_count));\n+\n+            // End all regions for scopes out of which we are breaking.\n+            self.cfg.push_end_region(block, extent.1, scope.extent);\n+\n             if let Some(ref free_data) = scope.free {\n                 let next = self.cfg.start_new_block();\n                 let free = build_free(self.hir.tcx(), &tmp, free_data, next);\n@@ -640,7 +650,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             resumeblk\n         };\n \n-        for scope in scopes.iter_mut().filter(|s| s.needs_cleanup) {\n+        for scope in scopes.iter_mut() {\n             target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, span, scope, target);\n         }\n         Some(target)\n@@ -775,9 +785,9 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // Build up the drops in **reverse** order. The end result will\n     // look like:\n     //\n-    //    [drops[n]] -...-> [drops[0]] -> [Free] -> [target]\n-    //    |                                    |\n-    //    +------------------------------------+\n+    //    [EndRegion Block] -> [drops[n]] -...-> [drops[0]] -> [Free] -> [target]\n+    //    |                                                         |\n+    //    +---------------------------------------------------------+\n     //     code for scope\n     //\n     // The code in this function reads from right to left. At each\n@@ -807,9 +817,16 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // Next, build up the drops. Here we iterate the vector in\n     // *forward* order, so that we generate drops[0] first (right to\n     // left in diagram above).\n-    for drop_data in &mut scope.drops {\n+    for (j, drop_data) in scope.drops.iter_mut().enumerate() {\n+        debug!(\"build_diverge_scope drop_data[{}]: {:?}\", j, drop_data);\n         // Only full value drops are emitted in the diverging path,\n         // not StorageDead.\n+        //\n+        // Note: This may not actually be what we desire (are we\n+        // \"freeing\" stack storage as we unwind, or merely observing a\n+        // frozen stack)? In particular, the intent may have been to\n+        // match the behavior of clang, but on inspection eddyb says\n+        // this is not what clang does.\n         let cached_block = match drop_data.kind {\n             DropKind::Value { ref mut cached_block } => cached_block,\n             DropKind::Storage => continue\n@@ -829,6 +846,15 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         };\n     }\n \n+    // Finally, push the EndRegion block, used by mir-borrowck. (Block\n+    // becomes trivial goto after pass that removes all EndRegions.)\n+    {\n+        let block = cfg.start_new_cleanup_block();\n+        cfg.push_end_region(block, source_info(span), scope.extent);\n+        cfg.terminate(block, source_info(span), TerminatorKind::Goto { target: target });\n+        target = block\n+    }\n+\n     target\n }\n "}, {"sha": "e809695c18043e971fb06d55c8f6b6692ab15b9a", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -65,6 +65,15 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n                             substs: &mut ClosureSubsts<'tcx>) {\n         *substs = self.tcx.erase_regions(substs);\n     }\n+\n+    fn visit_statement(&mut self,\n+                       _block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       _location: Location) {\n+        if let StatementKind::EndRegion(_) = statement.kind {\n+            statement.kind = StatementKind::Nop;\n+        }\n+    }\n }\n \n pub struct EraseRegions;"}, {"sha": "041d78d3c24b07f58d74b834cafa280ca44ce1a9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -907,6 +907,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::InlineAsm {..} |\n+                StatementKind::EndRegion(_) |\n                 StatementKind::Nop => {}\n             }\n         });"}, {"sha": "efde39ad6a4c11323dd44b88c964910f2bc39efc", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -413,6 +413,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             StatementKind::InlineAsm { .. } |\n+            StatementKind::EndRegion(_) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "ac121131eb999544419365ae272069e03642dd68", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -46,6 +46,7 @@ impl<'tcx> MirPatch<'tcx> {\n         for (bb, block) in mir.basic_blocks().iter_enumerated() {\n             if let TerminatorKind::Resume = block.terminator().kind {\n                 if block.statements.len() > 0 {\n+                    assert!(resume_stmt_block.is_none());\n                     resume_stmt_block = Some(bb);\n                 } else {\n                     resume_block = Some(bb);"}, {"sha": "4dd38cc515c77a83d69ca962cb63c7784c048c2f", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -125,6 +125,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(\"Statement\", statement);\n         self.record(match statement.kind {\n             StatementKind::Assign(..) => \"StatementKind::Assign\",\n+            StatementKind::EndRegion(..) => \"StatementKind::EndRegion\",\n             StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\",\n             StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n             StatementKind::StorageDead(..) => \"StatementKind::StorageDead\","}, {"sha": "16ef32ccf5777b7a6c121c3564dd898ecca3de3e", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -284,6 +284,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     }\n                     mir::StatementKind::StorageLive(_) |\n                     mir::StatementKind::StorageDead(_) |\n+                    mir::StatementKind::EndRegion(_) |\n                     mir::StatementKind::Nop => {}\n                     mir::StatementKind::InlineAsm { .. } |\n                     mir::StatementKind::SetDiscriminant{ .. } => {"}, {"sha": "170a76a49497bf738aead0e3b8de3092b95f8383", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d315cf7da85911dfa239331fab30607ce2d1dce/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=1d315cf7da85911dfa239331fab30607ce2d1dce", "patch": "@@ -86,6 +86,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 asm::trans_inline_asm(&bcx, asm, outputs, input_vals);\n                 bcx\n             }\n+            mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Nop => bcx,\n         }\n     }"}]}