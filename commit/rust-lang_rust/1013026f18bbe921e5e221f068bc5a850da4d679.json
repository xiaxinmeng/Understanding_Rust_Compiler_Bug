{"sha": "1013026f18bbe921e5e221f068bc5a850da4d679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMTMwMjZmMThiYmU5MjFlNWUyMjFmMDY4YmM1YTg1MGRhNGQ2Nzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-10T04:50:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-10T04:50:23Z"}, "message": "Merge branch 'pr-645'", "tree": {"sha": "a174b12253f22af7073278b6256c4055c9b017df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a174b12253f22af7073278b6256c4055c9b017df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1013026f18bbe921e5e221f068bc5a850da4d679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1013026f18bbe921e5e221f068bc5a850da4d679", "html_url": "https://github.com/rust-lang/rust/commit/1013026f18bbe921e5e221f068bc5a850da4d679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1013026f18bbe921e5e221f068bc5a850da4d679/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93461afffc04e475bcbb74a20ea4da84c9f5b80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/93461afffc04e475bcbb74a20ea4da84c9f5b80d", "html_url": "https://github.com/rust-lang/rust/commit/93461afffc04e475bcbb74a20ea4da84c9f5b80d"}, {"sha": "7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "html_url": "https://github.com/rust-lang/rust/commit/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e"}], "stats": {"total": 104, "additions": 102, "deletions": 2}, "files": [{"sha": "acc3946635aaaa6a1c115ed29cb3cb0ede5fb5b7", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1013026f18bbe921e5e221f068bc5a850da4d679/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1013026f18bbe921e5e221f068bc5a850da4d679/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1013026f18bbe921e5e221f068bc5a850da4d679", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 117 lints included in this crate:\n+There are 118 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -15,6 +15,7 @@ name\n [bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                   | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n [block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)       | warn    | braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\n [block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)       | warn    | avoid complex blocks in conditions, instead move the block higher and bind it with 'let'; e.g: `if { let x = true; x } ...`\n+[bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                             | warn    | comparing a variable to a boolean, e.g. `if x == true`\n [box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                             | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n [boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                     | warn    | using Box<T> where unnecessary\n [cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)           | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`"}, {"sha": "97101651d91e08fb7b83e73d32f5b2ee3816c5e2", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1013026f18bbe921e5e221f068bc5a850da4d679/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1013026f18bbe921e5e221f068bc5a850da4d679/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1013026f18bbe921e5e221f068bc5a850da4d679", "patch": "@@ -105,6 +105,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box bit_mask::BitMask);\n     reg.register_late_lint_pass(box ptr_arg::PtrArg);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n+    reg.register_late_lint_pass(box needless_bool::BoolComparison);\n     reg.register_late_lint_pass(box approx_const::ApproxConstant);\n     reg.register_late_lint_pass(box misc::FloatCmp);\n     reg.register_early_lint_pass(box precedence::Precedence);\n@@ -252,6 +253,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc_early::UNNEEDED_FIELD_PATTERN,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n+        needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_features::UNSTABLE_AS_MUT_SLICE,\n         needless_features::UNSTABLE_AS_SLICE,"}, {"sha": "4ddd8f2f3c5db13b32f97fb9c9d0b3cf54cf994b", "filename": "src/needless_bool.rs", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1013026f18bbe921e5e221f068bc5a850da4d679/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1013026f18bbe921e5e221f068bc5a850da4d679/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=1013026f18bbe921e5e221f068bc5a850da4d679", "patch": "@@ -6,8 +6,9 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n \n use syntax::ast::Lit_;\n+use syntax::codemap::Spanned;\n \n-use utils::{span_lint, snippet};\n+use utils::{span_lint, span_lint_and_then, snippet};\n \n /// **What it does:** This lint checks for expressions of the form `if c { true } else { false }` (or vice versa) and suggest using the condition directly.\n ///\n@@ -23,6 +24,20 @@ declare_lint! {\n      `if p { true } else { false }`\"\n }\n \n+/// **What it does:** This lint checks for expressions of the form `x == true` (or vice versa) and suggest using the variable directly.\n+///\n+/// **Why is this bad?** Unnecessary code.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `if x == true { }` could be `if x { }`\n+declare_lint! {\n+    pub BOOL_COMPARISON,\n+    Warn,\n+    \"comparing a variable to a boolean, e.g. \\\n+     `if x == true`\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct NeedlessBool;\n \n@@ -78,6 +93,65 @@ impl LateLintPass for NeedlessBool {\n     }\n }\n \n+#[derive(Copy,Clone)]\n+pub struct BoolComparison;\n+\n+impl LintPass for BoolComparison {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(BOOL_COMPARISON)\n+    }\n+}\n+\n+impl LateLintPass for BoolComparison {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprBinary(Spanned{ node: BiEq, .. }, ref left_side, ref right_side) = e.node {\n+            match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n+                (Some(true), None) => {\n+                    let hint = snippet(cx, right_side.span, \"..\").into_owned();\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against true are unnecesary\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                                       });\n+                }\n+                (None, Some(true)) => {\n+                    let hint = snippet(cx, left_side.span, \"..\").into_owned();\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against true are unnecesary\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                                       });\n+                }\n+                (Some(false), None) => {\n+                    let hint = format!(\"!{}\", snippet(cx, right_side.span, \"..\"));\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against false can be replaced by a negation\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                                       });\n+                }\n+                (None, Some(false)) => {\n+                    let hint = format!(\"!{}\", snippet(cx, left_side.span, \"..\"));\n+                    span_lint_and_then(cx,\n+                                       BOOL_COMPARISON,\n+                                       e.span,\n+                                       \"equality checks against false can be replaced by a negation\",\n+                                       |db| {\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                                       });\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+}\n+\n fn fetch_bool_block(block: &Block) -> Option<bool> {\n     if block.stmts.is_empty() {\n         block.expr.as_ref().and_then(|e| fetch_bool_expr(e))"}, {"sha": "8a792931d02c7214642b7115665ccf83d66e1f31", "filename": "tests/compile-fail/bool_comparison.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1013026f18bbe921e5e221f068bc5a850da4d679/tests%2Fcompile-fail%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1013026f18bbe921e5e221f068bc5a850da4d679/tests%2Fcompile-fail%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbool_comparison.rs?ref=1013026f18bbe921e5e221f068bc5a850da4d679", "patch": "@@ -0,0 +1,23 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(bool_comparison)]\n+fn main() {\n+    let x = true;\n+    if x == true { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against true are unnecesary\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n+    if x == false { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against false can be replaced by a negation\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n+    if true == x { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against true are unnecesary\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n+    if false == x { \"yes\" } else { \"no\" };\n+    //~^ ERROR equality checks against false can be replaced by a negation\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n+}"}]}