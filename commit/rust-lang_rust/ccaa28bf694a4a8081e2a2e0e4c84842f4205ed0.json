{"sha": "ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0", "node_id": "C_kwDOAAsO6NoAKGNjYWEyOGJmNjk0YTRhODA4MWUyYTJlMGU0Yzg0ODQyZjQyMDVlZDA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T09:43:52Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:10:52Z"}, "message": "Don't try to compute the layout of generic types.", "tree": {"sha": "61a05de5dec1ecac8cb37f32c1a48b0ab6469f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a05de5dec1ecac8cb37f32c1a48b0ab6469f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0", "html_url": "https://github.com/rust-lang/rust/commit/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bed079103fc125294fef254575e5dc9c709dd60", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bed079103fc125294fef254575e5dc9c709dd60", "html_url": "https://github.com/rust-lang/rust/commit/2bed079103fc125294fef254575e5dc9c709dd60"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "b45ba0dcd5fda26b7bb9f2a55ac1c797b6672c91", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0", "patch": "@@ -2504,32 +2504,32 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n             });\n \n             // Check if this ADT has a constrained layout (like `NonNull` and friends).\n-            let layout = cx.tcx.layout_of(cx.param_env.and(ty)).unwrap();\n-\n-            match &layout.abi {\n-                Abi::Scalar(scalar) | Abi::ScalarPair(scalar, _) => {\n-                    let range = scalar.valid_range(cx);\n-                    if !range.contains(0) {\n-                        Some(\n-                            InitError::from(format!(\"`{}` must be non-null\", ty)).nested(field_err),\n-                        )\n-                    } else if init == InitKind::Uninit && !scalar.is_always_valid(cx) {\n-                        // Prefer reporting on the fields over the entire struct for uninit,\n-                        // as the information bubbles out and it may be unclear why the type can't\n-                        // be null from just its outside signature.\n-                        Some(\n-                            InitError::from(format!(\n-                                \"`{}` must be initialized inside its custom valid range\",\n-                                ty,\n-                            ))\n-                            .nested(field_err),\n-                        )\n-                    } else {\n-                        field_err\n+            if let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty)) {\n+                match &layout.abi {\n+                    Abi::Scalar(scalar) | Abi::ScalarPair(scalar, _) => {\n+                        let range = scalar.valid_range(cx);\n+                        if !range.contains(0) {\n+                            return Some(\n+                                InitError::from(format!(\"`{}` must be non-null\", ty))\n+                                    .nested(field_err),\n+                            );\n+                        } else if init == InitKind::Uninit && !scalar.is_always_valid(cx) {\n+                            // Prefer reporting on the fields over the entire struct for uninit,\n+                            // as the information bubbles out and it may be unclear why the type can't\n+                            // be null from just its outside signature.\n+                            return Some(\n+                                InitError::from(format!(\n+                                    \"`{}` must be initialized inside its custom valid range\",\n+                                    ty,\n+                                ))\n+                                .nested(field_err),\n+                            );\n+                        }\n                     }\n+                    _ => {}\n                 }\n-                _ => field_err,\n             }\n+            field_err\n         }\n \n         /// Return `Some` only if we are sure this type does *not*"}]}