{"sha": "458d4dae845ec155b285681a5b88305641abb868", "node_id": "C_kwDOAAsO6NoAKDQ1OGQ0ZGFlODQ1ZWMxNTViMjg1NjgxYTViODgzMDU2NDFhYmI4Njg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T19:21:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-25T19:21:42Z"}, "message": "Auto merge of #110821 - matthiaskrgr:rollup-mzxrvw7, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110556 (Switch to `EarlyBinder` for `explicit_item_bounds`)\n - #110615 (Add `impl_tag!` macro to implement `Tag` for tagged pointer easily)\n - #110649 (Fix no_global_oom_handling build)\n - #110671 (Consider polarity in new solver)\n - #110783 (Fix ICE on --print=... i/o errors)\n - #110796 (Updating Wake example to use new 'pin!' macro)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "db8180fa895d4969d18064a0f4ef03e72ab4f3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db8180fa895d4969d18064a0f4ef03e72ab4f3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/458d4dae845ec155b285681a5b88305641abb868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/458d4dae845ec155b285681a5b88305641abb868", "html_url": "https://github.com/rust-lang/rust/commit/458d4dae845ec155b285681a5b88305641abb868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/458d4dae845ec155b285681a5b88305641abb868/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666fee2a5fb3a4ec75953b9e6622662ae10b9ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/666fee2a5fb3a4ec75953b9e6622662ae10b9ae5", "html_url": "https://github.com/rust-lang/rust/commit/666fee2a5fb3a4ec75953b9e6622662ae10b9ae5"}, {"sha": "77752a0db3d4720caf9f3f133599bffb1e0e265b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77752a0db3d4720caf9f3f133599bffb1e0e265b", "html_url": "https://github.com/rust-lang/rust/commit/77752a0db3d4720caf9f3f133599bffb1e0e265b"}], "stats": {"total": 640, "additions": 495, "deletions": 145}, "files": [{"sha": "5db0f72919d03fae07f334998dc6cf7d79c41485", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -702,7 +702,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 .copied()\n                 .find_map(find_fn_kind_from_did),\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => tcx\n-                .bound_explicit_item_bounds(def_id)\n+                .explicit_item_bounds(def_id)\n                 .subst_iter_copied(tcx, substs)\n                 .find_map(find_fn_kind_from_did),\n             ty::Closure(_, substs) => match substs.as_closure().kind() {"}, {"sha": "004017ec5f31a464a76d3671bd36eca613d8760f", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -31,6 +31,7 @@\n #![feature(unwrap_infallible)]\n #![feature(strict_provenance)]\n #![feature(ptr_alignment_type)]\n+#![feature(macro_metavar_expr)]\n #![allow(rustc::default_hash_types)]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "2914eece6796bd3892d7f6ea212e540a6245f156", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -24,6 +24,7 @@ use crate::aligned::Aligned;\n \n mod copy;\n mod drop;\n+mod impl_tag;\n \n pub use copy::CopyTaggedPtr;\n pub use drop::TaggedPtr;\n@@ -141,6 +142,30 @@ pub unsafe trait Tag: Copy {\n     unsafe fn from_usize(tag: usize) -> Self;\n }\n \n+/// Returns the number of bits available for use for tags in a pointer to `T`\n+/// (this is based on `T`'s alignment).\n+pub const fn bits_for<T: ?Sized + Aligned>() -> u32 {\n+    crate::aligned::align_of::<T>().as_nonzero().trailing_zeros()\n+}\n+\n+/// Returns the correct [`Tag::BITS`] constant for a set of tag values.\n+pub const fn bits_for_tags(mut tags: &[usize]) -> u32 {\n+    let mut bits = 0;\n+\n+    while let &[tag, ref rest @ ..] = tags {\n+        tags = rest;\n+\n+        // bits required to represent `tag`,\n+        // position of the most significant 1\n+        let b = usize::BITS - tag.leading_zeros();\n+        if b > bits {\n+            bits = b;\n+        }\n+    }\n+\n+    bits\n+}\n+\n unsafe impl<T: ?Sized + Aligned> Pointer for Box<T> {\n     const BITS: u32 = bits_for::<Self::Target>();\n \n@@ -221,12 +246,6 @@ unsafe impl<'a, T: 'a + ?Sized + Aligned> Pointer for &'a mut T {\n     }\n }\n \n-/// Returns the number of bits available for use for tags in a pointer to `T`\n-/// (this is based on `T`'s alignment).\n-pub const fn bits_for<T: ?Sized + Aligned>() -> u32 {\n-    crate::aligned::align_of::<T>().as_nonzero().trailing_zeros()\n-}\n-\n /// A tag type used in [`CopyTaggedPtr`] and [`TaggedPtr`] tests.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n #[cfg(test)]"}, {"sha": "cb7f7d318dc416316f73eac6a29ee59cce88e642", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -0,0 +1,144 @@\n+/// Implements [`Tag`] for a given type.\n+///\n+/// You can use `impl_tag` on structs and enums.\n+/// You need to specify the type and all its possible values,\n+/// which can only be paths with optional fields.\n+///\n+/// [`Tag`]: crate::tagged_ptr::Tag\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// #![feature(macro_metavar_expr)]\n+/// use rustc_data_structures::{impl_tag, tagged_ptr::Tag};\n+///\n+/// #[derive(Copy, Clone, PartialEq, Debug)]\n+/// enum SomeTag {\n+///     A,\n+///     B,\n+///     X { v: bool },\n+///     Y(bool, bool),\n+/// }\n+///\n+/// impl_tag! {\n+///     // The type for which the `Tag` will be implemented\n+///     impl Tag for SomeTag;\n+///     // You need to specify all possible tag values:\n+///     SomeTag::A, // 0\n+///     SomeTag::B, // 1\n+///     // For variants with fields, you need to specify the fields:\n+///     SomeTag::X { v: true  }, // 2\n+///     SomeTag::X { v: false }, // 3\n+///     // For tuple variants use named syntax:\n+///     SomeTag::Y { 0: true,  1: true  }, // 4\n+///     SomeTag::Y { 0: false, 1: true  }, // 5\n+///     SomeTag::Y { 0: true,  1: false }, // 6\n+///     SomeTag::Y { 0: false, 1: false }, // 7\n+/// }\n+///\n+/// // Tag values are assigned in order:\n+/// assert_eq!(SomeTag::A.into_usize(), 0);\n+/// assert_eq!(SomeTag::X { v: false }.into_usize(), 3);\n+/// assert_eq!(SomeTag::Y(false, true).into_usize(), 5);\n+///\n+/// assert_eq!(unsafe { SomeTag::from_usize(1) }, SomeTag::B);\n+/// assert_eq!(unsafe { SomeTag::from_usize(2) }, SomeTag::X { v: true });\n+/// assert_eq!(unsafe { SomeTag::from_usize(7) }, SomeTag::Y(false, false));\n+/// ```\n+///\n+/// Structs are supported:\n+///\n+/// ```\n+/// #![feature(macro_metavar_expr)]\n+/// # use rustc_data_structures::impl_tag;\n+/// #[derive(Copy, Clone)]\n+/// struct Flags { a: bool, b: bool }\n+///\n+/// impl_tag! {\n+///     impl Tag for Flags;\n+///     Flags { a: true,  b: true  },\n+///     Flags { a: false, b: true  },\n+///     Flags { a: true,  b: false },\n+///     Flags { a: false, b: false },\n+/// }\n+/// ```\n+///\n+/// Not specifying all values results in a compile error:\n+///\n+/// ```compile_fail,E0004\n+/// #![feature(macro_metavar_expr)]\n+/// # use rustc_data_structures::impl_tag;\n+/// #[derive(Copy, Clone)]\n+/// enum E {\n+///     A,\n+///     B,\n+/// }\n+///\n+/// impl_tag! {\n+///     impl Tag for E;\n+///     E::A,\n+/// }\n+/// ```\n+#[macro_export]\n+macro_rules! impl_tag {\n+    (\n+        impl Tag for $Self:ty;\n+        $(\n+            $($path:ident)::* $( { $( $fields:tt )* })?,\n+        )*\n+    ) => {\n+        // Safety:\n+        // `bits_for_tags` is called on the same `${index()}`-es as\n+        // `into_usize` returns, thus `BITS` constant is correct.\n+        unsafe impl $crate::tagged_ptr::Tag for $Self {\n+            const BITS: u32 = $crate::tagged_ptr::bits_for_tags(&[\n+                $(\n+                    ${index()},\n+                    $( ${ignore(path)} )*\n+                )*\n+            ]);\n+\n+            #[inline]\n+            fn into_usize(self) -> usize {\n+                // This forbids use of repeating patterns (`Enum::V`&`Enum::V`, etc)\n+                // (or at least it should, see <https://github.com/rust-lang/rust/issues/110613>)\n+                #[forbid(unreachable_patterns)]\n+                match self {\n+                    // `match` is doing heavy lifting here, by requiring exhaustiveness\n+                    $(\n+                        $($path)::* $( { $( $fields )* } )? => ${index()},\n+                    )*\n+                }\n+            }\n+\n+            #[inline]\n+            unsafe fn from_usize(tag: usize) -> Self {\n+                match tag {\n+                    $(\n+                        ${index()} => $($path)::* $( { $( $fields )* } )?,\n+                    )*\n+\n+                    // Safety:\n+                    // `into_usize` only returns `${index()}` of the same\n+                    // repetition as we are filtering above, thus if this is\n+                    // reached, the safety contract of this function was\n+                    // already breached.\n+                    _ => unsafe {\n+                        debug_assert!(\n+                            false,\n+                            \"invalid tag: {tag}\\\n+                             (this is a bug in the caller of `from_usize`)\"\n+                        );\n+                        std::hint::unreachable_unchecked()\n+                    },\n+                }\n+            }\n+\n+        }\n+    };\n+}\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "62c926153e1e9f86fff3e438729bc0f3384ef742", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag/tests.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -0,0 +1,34 @@\n+#[test]\n+fn bits_constant() {\n+    use crate::tagged_ptr::Tag;\n+\n+    #[derive(Copy, Clone)]\n+    struct Unit;\n+    impl_tag! { impl Tag for Unit; Unit, }\n+    assert_eq!(Unit::BITS, 0);\n+\n+    #[derive(Copy, Clone)]\n+    enum Enum3 {\n+        A,\n+        B,\n+        C,\n+    }\n+    impl_tag! { impl Tag for Enum3; Enum3::A, Enum3::B, Enum3::C, }\n+    assert_eq!(Enum3::BITS, 2);\n+\n+    #[derive(Copy, Clone)]\n+    struct Eight(bool, bool, bool);\n+    impl_tag! {\n+        impl Tag for Eight;\n+        Eight { 0: true,  1: true,  2: true  },\n+        Eight { 0: true,  1: true,  2: false },\n+        Eight { 0: true,  1: false, 2: true  },\n+        Eight { 0: true,  1: false, 2: false },\n+        Eight { 0: false, 1: true,  2: true  },\n+        Eight { 0: false, 1: true,  2: false },\n+        Eight { 0: false, 1: false, 2: true  },\n+        Eight { 0: false, 1: false, 2: false },\n+    }\n+\n+    assert_eq!(Eight::BITS, 3);\n+}"}, {"sha": "5fac485de6417dd5c41e73460a3652333a9cfa67", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -58,8 +58,16 @@ use std::str;\n use std::sync::LazyLock;\n use std::time::Instant;\n \n+// This import blocks the use of panicking `print` and `println` in all the code\n+// below. Please use `safe_print` and `safe_println` to avoid ICE when\n+// encountering an I/O error during print.\n+#[allow(unused_imports)]\n+use std::{compile_error as print, compile_error as println};\n+\n pub mod args;\n pub mod pretty;\n+#[macro_use]\n+mod print;\n mod session_diagnostics;\n \n use crate::session_diagnostics::{\n@@ -511,7 +519,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n             if io::stdout().is_terminal() {\n                 show_content_with_pager(&text);\n             } else {\n-                print!(\"{text}\");\n+                safe_print!(\"{text}\");\n             }\n         }\n         Err(InvalidErrorCode) => {\n@@ -547,7 +555,7 @@ fn show_content_with_pager(content: &str) {\n     // If pager fails for whatever reason, we should still print the content\n     // to standard output\n     if fallback_to_println {\n-        print!(\"{content}\");\n+        safe_print!(\"{content}\");\n     }\n }\n \n@@ -601,7 +609,7 @@ pub fn list_metadata(sess: &Session, metadata_loader: &dyn MetadataLoader) -> Co\n                 let path = &(*ifile);\n                 let mut v = Vec::new();\n                 locator::list_file_metadata(&sess.target, path, metadata_loader, &mut v).unwrap();\n-                println!(\"{}\", String::from_utf8(v).unwrap());\n+                safe_println!(\"{}\", String::from_utf8(v).unwrap());\n             }\n             Input::Str { .. } => {\n                 early_error(ErrorOutputType::default(), \"cannot list metadata for stdin\");\n@@ -642,12 +650,12 @@ fn print_crate_info(\n             TargetList => {\n                 let mut targets = rustc_target::spec::TARGETS.to_vec();\n                 targets.sort_unstable();\n-                println!(\"{}\", targets.join(\"\\n\"));\n+                safe_println!(\"{}\", targets.join(\"\\n\"));\n             }\n-            Sysroot => println!(\"{}\", sess.sysroot.display()),\n-            TargetLibdir => println!(\"{}\", sess.target_tlib_path.dir.display()),\n+            Sysroot => safe_println!(\"{}\", sess.sysroot.display()),\n+            TargetLibdir => safe_println!(\"{}\", sess.target_tlib_path.dir.display()),\n             TargetSpec => {\n-                println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n+                safe_println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n             AllTargetSpecs => {\n                 let mut targets = BTreeMap::new();\n@@ -656,7 +664,7 @@ fn print_crate_info(\n                     let target = Target::expect_builtin(&triple);\n                     targets.insert(name, target.to_json());\n                 }\n-                println!(\"{}\", serde_json::to_string_pretty(&targets).unwrap());\n+                safe_println!(\"{}\", serde_json::to_string_pretty(&targets).unwrap());\n             }\n             FileNames | CrateName => {\n                 let Some(attrs) = attrs.as_ref() else {\n@@ -666,14 +674,14 @@ fn print_crate_info(\n                 let t_outputs = rustc_interface::util::build_output_filenames(attrs, sess);\n                 let id = rustc_session::output::find_crate_name(sess, attrs);\n                 if *req == PrintRequest::CrateName {\n-                    println!(\"{id}\");\n+                    safe_println!(\"{id}\");\n                     continue;\n                 }\n                 let crate_types = collect_crate_types(sess, attrs);\n                 for &style in &crate_types {\n                     let fname =\n                         rustc_session::output::filename_for_input(sess, style, id, &t_outputs);\n-                    println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n+                    safe_println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n                 }\n             }\n             Cfg => {\n@@ -707,13 +715,13 @@ fn print_crate_info(\n \n                 cfgs.sort();\n                 for cfg in cfgs {\n-                    println!(\"{cfg}\");\n+                    safe_println!(\"{cfg}\");\n                 }\n             }\n             CallingConventions => {\n                 let mut calling_conventions = rustc_target::spec::abi::all_names();\n                 calling_conventions.sort_unstable();\n-                println!(\"{}\", calling_conventions.join(\"\\n\"));\n+                safe_println!(\"{}\", calling_conventions.join(\"\\n\"));\n             }\n             RelocationModels\n             | CodeModels\n@@ -733,7 +741,7 @@ fn print_crate_info(\n                     let stable = sess.target.options.supported_split_debuginfo.contains(split);\n                     let unstable_ok = sess.unstable_options();\n                     if stable || unstable_ok {\n-                        println!(\"{split}\");\n+                        safe_println!(\"{split}\");\n                     }\n                 }\n             }\n@@ -770,14 +778,14 @@ pub fn version_at_macro_invocation(\n ) {\n     let verbose = matches.opt_present(\"verbose\");\n \n-    println!(\"{binary} {version}\");\n+    safe_println!(\"{binary} {version}\");\n \n     if verbose {\n-        println!(\"binary: {binary}\");\n-        println!(\"commit-hash: {commit_hash}\");\n-        println!(\"commit-date: {commit_date}\");\n-        println!(\"host: {}\", config::host_triple());\n-        println!(\"release: {release}\");\n+        safe_println!(\"binary: {binary}\");\n+        safe_println!(\"commit-hash: {commit_hash}\");\n+        safe_println!(\"commit-date: {commit_date}\");\n+        safe_println!(\"host: {}\", config::host_triple());\n+        safe_println!(\"release: {release}\");\n \n         let debug_flags = matches.opt_strs(\"Z\");\n         let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n@@ -807,7 +815,7 @@ fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n     } else {\n         \"\"\n     };\n-    println!(\n+    safe_println!(\n         \"{options}{at_path}\\nAdditional help:\n     -C help             Print codegen options\n     -W help             \\\n@@ -820,7 +828,7 @@ fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n }\n \n fn print_wall_help() {\n-    println!(\n+    safe_println!(\n         \"\n The flag `-Wall` does not exist in `rustc`. Most useful lints are enabled by\n default. Use `rustc -W help` to see all available lints. It's more common to put\n@@ -832,7 +840,7 @@ the command line flag directly.\n \n /// Write to stdout lint command options, together with a list of all available lints\n pub fn describe_lints(sess: &Session, lint_store: &LintStore, loaded_plugins: bool) {\n-    println!(\n+    safe_println!(\n         \"\n Available lint options:\n     -W <foo>           Warn about <foo>\n@@ -877,21 +885,21 @@ Available lint options:\n         s\n     };\n \n-    println!(\"Lint checks provided by rustc:\\n\");\n+    safe_println!(\"Lint checks provided by rustc:\\n\");\n \n     let print_lints = |lints: Vec<&Lint>| {\n-        println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n-        println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n+        safe_println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n+        safe_println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n         for lint in lints {\n             let name = lint.name_lower().replace('_', \"-\");\n-            println!(\n+            safe_println!(\n                 \"    {}  {:7.7}  {}\",\n                 padded(&name),\n                 lint.default_level(sess.edition()).as_str(),\n                 lint.desc\n             );\n         }\n-        println!(\"\\n\");\n+        safe_println!(\"\\n\");\n     };\n \n     print_lints(builtin);\n@@ -912,14 +920,14 @@ Available lint options:\n         s\n     };\n \n-    println!(\"Lint groups provided by rustc:\\n\");\n+    safe_println!(\"Lint groups provided by rustc:\\n\");\n \n     let print_lint_groups = |lints: Vec<(&'static str, Vec<LintId>)>, all_warnings| {\n-        println!(\"    {}  sub-lints\", padded(\"name\"));\n-        println!(\"    {}  ---------\", padded(\"----\"));\n+        safe_println!(\"    {}  sub-lints\", padded(\"name\"));\n+        safe_println!(\"    {}  ---------\", padded(\"----\"));\n \n         if all_warnings {\n-            println!(\"    {}  all lints that are set to issue warnings\", padded(\"warnings\"));\n+            safe_println!(\"    {}  all lints that are set to issue warnings\", padded(\"warnings\"));\n         }\n \n         for (name, to) in lints {\n@@ -929,26 +937,26 @@ Available lint options:\n                 .map(|x| x.to_string().replace('_', \"-\"))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n-            println!(\"    {}  {}\", padded(&name), desc);\n+            safe_println!(\"    {}  {}\", padded(&name), desc);\n         }\n-        println!(\"\\n\");\n+        safe_println!(\"\\n\");\n     };\n \n     print_lint_groups(builtin_groups, true);\n \n     match (loaded_plugins, plugin.len(), plugin_groups.len()) {\n         (false, 0, _) | (false, _, 0) => {\n-            println!(\"Lint tools like Clippy can provide additional lints and lint groups.\");\n+            safe_println!(\"Lint tools like Clippy can provide additional lints and lint groups.\");\n         }\n         (false, ..) => panic!(\"didn't load lint plugins but got them anyway!\"),\n-        (true, 0, 0) => println!(\"This crate does not load any lint plugins or lint groups.\"),\n+        (true, 0, 0) => safe_println!(\"This crate does not load any lint plugins or lint groups.\"),\n         (true, l, g) => {\n             if l > 0 {\n-                println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n+                safe_println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n                 print_lints(plugin);\n             }\n             if g > 0 {\n-                println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n+                safe_println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n                 print_lint_groups(plugin_groups, false);\n             }\n         }\n@@ -996,12 +1004,12 @@ pub fn describe_flag_categories(matches: &Matches) -> bool {\n }\n \n fn describe_debug_flags() {\n-    println!(\"\\nAvailable options:\\n\");\n+    safe_println!(\"\\nAvailable options:\\n\");\n     print_flag_list(\"-Z\", config::Z_OPTIONS);\n }\n \n fn describe_codegen_flags() {\n-    println!(\"\\nAvailable codegen options:\\n\");\n+    safe_println!(\"\\nAvailable codegen options:\\n\");\n     print_flag_list(\"-C\", config::CG_OPTIONS);\n }\n \n@@ -1012,7 +1020,7 @@ fn print_flag_list<T>(\n     let max_len = flag_list.iter().map(|&(name, _, _, _)| name.chars().count()).max().unwrap_or(0);\n \n     for &(name, _, _, desc) in flag_list {\n-        println!(\n+        safe_println!(\n             \"    {} {:>width$}=val -- {}\",\n             cmdline_opt,\n             name.replace('_', \"-\"),"}, {"sha": "70de55320f7ae1830c196887baf30f5f7671542b", "filename": "compiler/rustc_driver_impl/src/print.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -0,0 +1,20 @@\n+use std::fmt;\n+use std::io::{self, Write as _};\n+\n+macro_rules! safe_print {\n+    ($($arg:tt)*) => {{\n+        $crate::print::print(std::format_args!($($arg)*));\n+    }};\n+}\n+\n+macro_rules! safe_println {\n+    ($($arg:tt)*) => {\n+        safe_print!(\"{}\\n\", std::format_args!($($arg)*))\n+    };\n+}\n+\n+pub(crate) fn print(args: fmt::Arguments<'_>) {\n+    if let Err(_) = io::stdout().write_fmt(args) {\n+        rustc_errors::FatalError.raise();\n+    }\n+}"}, {"sha": "65c2f5955cdd0d38d634ce3259b689407d4ee1e4", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -320,7 +320,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         };\n         let prohibit_opaque = tcx\n             .explicit_item_bounds(def_id)\n-            .iter()\n+            .subst_identity_iter_copied()\n             .try_for_each(|(predicate, _)| predicate.visit_with(&mut visitor));\n \n         if let Some(ty) = prohibit_opaque.break_value() {"}, {"sha": "48214b899a4b81f123205feb8aa08303f3198cb3", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -839,7 +839,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for (pred, pred_span) in self.interner().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n+            for (pred, pred_span) in self.interner().explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     &ObligationCause::misc(self.span, self.body_id),\n@@ -2023,7 +2023,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     };\n \n     let obligations: Vec<_> = tcx\n-        .bound_explicit_item_bounds(trait_ty.def_id)\n+        .explicit_item_bounds(trait_ty.def_id)\n         .subst_iter_copied(tcx, rebased_substs)\n         .map(|(concrete_ty_bound, span)| {\n             debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);"}, {"sha": "0eafab017c7f3badc3d46e22cc93dcee8774f3f4", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -360,7 +360,9 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                             tcx,\n                             param_env,\n                             item_def_id,\n-                            tcx.explicit_item_bounds(item_def_id).to_vec(),\n+                            tcx.explicit_item_bounds(item_def_id)\n+                                .subst_identity_iter_copied()\n+                                .collect::<Vec<_>>(),\n                             &FxIndexSet::default(),\n                             gat_def_id.def_id,\n                             gat_generics,\n@@ -1125,7 +1127,7 @@ fn check_associated_type_bounds(wfcx: &WfCheckingCtxt<'_, '_>, item: ty::AssocIt\n     let bounds = wfcx.tcx().explicit_item_bounds(item.def_id);\n \n     debug!(\"check_associated_type_bounds: bounds={:?}\", bounds);\n-    let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n+    let wf_obligations = bounds.subst_identity_iter_copied().flat_map(|(bound, bound_span)| {\n         let normalized_bound = wfcx.normalize(span, None, bound);\n         traits::wf::predicate_obligations(\n             wfcx.infcx,\n@@ -1588,7 +1590,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n                 }\n             });\n             for (bound, bound_span) in tcx\n-                .bound_explicit_item_bounds(opaque_ty.def_id)\n+                .explicit_item_bounds(opaque_ty.def_id)\n                 .subst_iter_copied(tcx, opaque_ty.substs)\n             {\n                 let bound = self.wfcx.normalize(bound_span, None, bound);"}, {"sha": "80d6bc7db9e8f3e54533c5312aa740e4e6f2f16d", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -79,14 +79,14 @@ fn opaque_type_bounds<'tcx>(\n pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-) -> &'_ [(ty::Predicate<'_>, Span)] {\n+) -> ty::EarlyBinder<&'_ [(ty::Predicate<'_>, Span)]> {\n     match tcx.opt_rpitit_info(def_id.to_def_id()) {\n         // RPITIT's bounds are the same as opaque type bounds, but with\n         // a projection self type.\n         Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n             let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n             let opaque_ty = item.expect_opaque_ty();\n-            return opaque_type_bounds(\n+            return ty::EarlyBinder(opaque_type_bounds(\n                 tcx,\n                 opaque_def_id.expect_local(),\n                 opaque_ty.bounds,\n@@ -95,15 +95,15 @@ pub(super) fn explicit_item_bounds(\n                     ty::InternalSubsts::identity_for_item(tcx, def_id),\n                 ),\n                 item.span,\n-            );\n+            ));\n         }\n         // These should have been fed!\n         Some(ty::ImplTraitInTraitData::Impl { .. }) => unreachable!(),\n         None => {}\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    match tcx.hir().get(hir_id) {\n+    let bounds = match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n             span,\n@@ -123,16 +123,18 @@ pub(super) fn explicit_item_bounds(\n             opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n-    }\n+    };\n+    ty::EarlyBinder(bounds)\n }\n \n pub(super) fn item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> ty::EarlyBinder<&'_ ty::List<ty::Predicate<'_>>> {\n-    let bounds = tcx.mk_predicates_from_iter(util::elaborate(\n-        tcx,\n-        tcx.explicit_item_bounds(def_id).iter().map(|&(bound, _span)| bound),\n-    ));\n-    ty::EarlyBinder(bounds)\n+    tcx.explicit_item_bounds(def_id).map_bound(|bounds| {\n+        tcx.mk_predicates_from_iter(util::elaborate(\n+            tcx,\n+            bounds.iter().map(|&(bound, _span)| bound),\n+        ))\n+    })\n }"}, {"sha": "e735b048d7343f7ed4d29f2a894ec9ed93caf15b", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -153,8 +153,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n     let mut collector =\n         OpaqueTypeLifetimeCollector { tcx, root_def_id: item_def_id.to_def_id(), variances };\n     let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id);\n-    for pred in tcx.bound_explicit_item_bounds(item_def_id.to_def_id()).transpose_iter() {\n-        let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);\n+    for (pred, _) in tcx.explicit_item_bounds(item_def_id).subst_iter_copied(tcx, id_substs) {\n         debug!(?pred);\n \n         // We only ignore opaque type substs if the opaque type is the outermost type."}, {"sha": "aefde8109a07a71dd5995a75522c893abff6a7ab", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -530,7 +530,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for ty in [first_ty, second_ty] {\n                     for (pred, _) in self\n                         .tcx\n-                        .bound_explicit_item_bounds(rpit_def_id)\n+                        .explicit_item_bounds(rpit_def_id)\n                         .subst_iter_copied(self.tcx, substs)\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {"}, {"sha": "7046269c2de22c953644630010d4a85e7e8f92fa", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -172,7 +172,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .deduce_closure_signature_from_predicates(\n                     expected_ty,\n-                    self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n+                    self.tcx.explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n                 ),\n             ty::Dynamic(ref object_type, ..) => {\n                 let sig = object_type.projection_bounds().find_map(|pb| {\n@@ -713,13 +713,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .tcx\n-                .bound_explicit_item_bounds(def_id)\n+                .explicit_item_bounds(def_id)\n                 .subst_iter_copied(self.tcx, substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n             ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => self\n                 .tcx\n-                .bound_explicit_item_bounds(proj.def_id)\n+                .explicit_item_bounds(proj.def_id)\n                 .subst_iter_copied(self.tcx, proj.substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             _ => span_bug!("}, {"sha": "5b432475fc3845ef8ccc01d0070d0e1534d89d36", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -571,7 +571,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for &(predicate, _) in fcx.tcx.explicit_item_bounds(def) {\n+            for &(predicate, _) in fcx.tcx.explicit_item_bounds(def).skip_binder() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "547f851526f0a23555c8eb88149568f7dc096d9f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -402,7 +402,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n         let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n-        self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n+        self.tcx.explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n             |(predicate, _)| {\n                 predicate\n                     .kind()"}, {"sha": "334395945ea966ebb99822e13c149cdd2de71bea", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -540,7 +540,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 .obligations;\n         }\n \n-        let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());\n+        let item_bounds = tcx.explicit_item_bounds(def_id);\n \n         for (predicate, _) in item_bounds.subst_iter_copied(tcx, substs) {\n             let predicate = predicate.fold_with(&mut BottomUpFolder {"}, {"sha": "15715c8fca039a7af21ae2913c70739052974a25", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n         // For every projection predicate in the opaque type's explicit bounds,\n         // check that the type that we're assigning actually satisfies the bounds\n         // of the associated type.\n-        for &(pred, pred_span) in cx.tcx.explicit_item_bounds(def_id) {\n+        for (pred, pred_span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n             // Liberate bound regions in the predicate since we\n             // don't actually care about lifetimes in this check.\n             let predicate = cx.tcx.liberate_late_bound_regions(def_id, pred.kind());\n@@ -112,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // with `impl Send: OtherTrait`.\n             for (assoc_pred, assoc_pred_span) in cx\n                 .tcx\n-                .bound_explicit_item_bounds(proj.projection_ty.def_id)\n+                .explicit_item_bounds(proj.projection_ty.def_id)\n                 .subst_iter_copied(cx.tcx, &proj.projection_ty.substs)\n             {\n                 let assoc_pred = assoc_pred.fold_with(proj_replacer);"}, {"sha": "eb175e96997b3cf074d7d7e3b25ebe51c59ebe39", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -254,7 +254,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 }\n                 ty::Adt(def, _) => is_def_must_use(cx, def.did(), span),\n                 ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n-                    elaborate(cx.tcx, cx.tcx.explicit_item_bounds(def).iter().cloned())\n+                    elaborate(cx.tcx, cx.tcx.explicit_item_bounds(def).subst_identity_iter_copied())\n                         // We only care about self bounds for the impl-trait\n                         .filter_only_self()\n                         .find_map(|(pred, _span)| {"}, {"sha": "0719dfc167fb5190810294845fbbcd30fc52a637", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::GeneratorDiagnosticData;\n-use rustc_middle::ty::{self, ParameterizedOverTcx, Ty, TyCtxt, Visibility};\n+use rustc_middle::ty::{self, ParameterizedOverTcx, Predicate, Ty, TyCtxt, Visibility};\n use rustc_serialize::opaque::MemDecoder;\n use rustc_serialize::{Decodable, Decoder};\n use rustc_session::cstore::{\n@@ -857,6 +857,20 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n+    fn get_explicit_item_bounds(\n+        self,\n+        index: DefIndex,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> ty::EarlyBinder<&'tcx [(Predicate<'tcx>, Span)]> {\n+        let lazy = self.root.tables.explicit_item_bounds.get(self, index);\n+        let output = if lazy.is_default() {\n+            &mut []\n+        } else {\n+            tcx.arena.alloc_from_iter(lazy.decode((self, tcx)))\n+        };\n+        ty::EarlyBinder(&*output)\n+    }\n+\n     fn get_variant(self, kind: &DefKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n         let adt_kind = match kind {\n             DefKind::Variant => ty::AdtKind::Enum,"}, {"sha": "4a3b783c63670bd026f373f81cdd5a924d70764d", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -203,7 +203,7 @@ impl IntoArgs for (CrateNum, SimplifiedType) {\n }\n \n provide! { tcx, def_id, other, cdata,\n-    explicit_item_bounds => { table_defaulted_array }\n+    explicit_item_bounds => { cdata.get_explicit_item_bounds(def_id.index, tcx) }\n     explicit_predicates_of => { table }\n     generics_of => { table }\n     inferred_outlives_of => { table_defaulted_array }"}, {"sha": "f5ffdd27cae3f9d03d06e32406f39d438b325cf8", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -1423,7 +1423,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_explicit_item_bounds(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_explicit_item_bounds({:?})\", def_id);\n-        let bounds = self.tcx.explicit_item_bounds(def_id);\n+        let bounds = self.tcx.explicit_item_bounds(def_id).skip_binder();\n         record_defaulted_array!(self.tables.explicit_item_bounds[def_id] <- bounds);\n     }\n "}, {"sha": "e9172e767e0368f8a3ff176b835c83f4c7a4fd60", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -60,6 +60,7 @@\n #![feature(const_option)]\n #![feature(trait_alias)]\n #![feature(ptr_alignment_type)]\n+#![feature(macro_metavar_expr)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "84b5d6b0d0fa103c9e6b071961d1f8b26c5ffb2b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -251,7 +251,7 @@ rustc_queries! {\n     /// `key` is the `DefId` of the associated type or opaque type.\n     ///\n     /// Bounds from the parent (e.g. with nested impl trait) are not included.\n-    query explicit_item_bounds(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n+    query explicit_item_bounds(key: DefId) -> ty::EarlyBinder<&'tcx [(ty::Predicate<'tcx>, Span)]> {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern"}, {"sha": "7df4be263d58d03d06dcd449217d1b85cadd35d5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -1603,7 +1603,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n-        self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n+        self.explicit_item_bounds(def_id).skip_binder().iter().any(|&(predicate, _)| {\n             let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() else {\n                 return false;\n             };"}, {"sha": "8e4e708b73c45200ef531e68f95ff6489081c402", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -861,6 +861,11 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n     pub fn is_const_if_const(self) -> bool {\n         self.skip_binder().is_const_if_const()\n     }\n+\n+    #[inline]\n+    pub fn polarity(self) -> ImplPolarity {\n+        self.skip_binder().polarity\n+    }\n }\n \n /// `A: B`\n@@ -1497,29 +1502,12 @@ struct ParamTag {\n     constness: hir::Constness,\n }\n \n-unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n-    const BITS: u32 = 2;\n-\n-    #[inline]\n-    fn into_usize(self) -> usize {\n-        match self {\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,\n-        }\n-    }\n-\n-    #[inline]\n-    unsafe fn from_usize(ptr: usize) -> Self {\n-        match ptr {\n-            0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n-            1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },\n-            2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },\n-            3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },\n-            _ => std::hint::unreachable_unchecked(),\n-        }\n-    }\n+impl_tag! {\n+    impl Tag for ParamTag;\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::NotConst },\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const    },\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::Const    },\n }\n \n impl<'tcx> fmt::Debug for ParamEnv<'tcx> {"}, {"sha": "1c1432ecd5a058448c1522e144d728b5559649c0", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -914,7 +914,7 @@ pub trait PrettyPrinter<'tcx>:\n \n         // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n         // by looking up the projections associated with the def_id.\n-        let bounds = tcx.bound_explicit_item_bounds(def_id);\n+        let bounds = tcx.explicit_item_bounds(def_id);\n \n         let mut traits = FxIndexMap::default();\n         let mut fn_traits = FxIndexMap::default();"}, {"sha": "63b2acdbe4e5d099010267fba86cb5dabb8d7eb7", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -612,6 +612,12 @@ where\n     ) -> SubstIter<'s, 'tcx, I> {\n         SubstIter { it: self.0.into_iter(), tcx, substs }\n     }\n+\n+    /// Similar to [`subst_identity`](EarlyBinder::subst_identity),\n+    /// but on an iterator of `TypeFoldable` values.\n+    pub fn subst_identity_iter(self) -> I::IntoIter {\n+        self.0.into_iter()\n+    }\n }\n \n pub struct SubstIter<'s, 'tcx, I: IntoIterator> {\n@@ -664,6 +670,12 @@ where\n     ) -> SubstIterCopied<'s, 'tcx, I> {\n         SubstIterCopied { it: self.0.into_iter(), tcx, substs }\n     }\n+\n+    /// Similar to [`subst_identity`](EarlyBinder::subst_identity),\n+    /// but on an iterator of values that deref to a `TypeFoldable`.\n+    pub fn subst_identity_iter_copied(self) -> impl Iterator<Item = <I::Item as Deref>::Target> {\n+        self.0.into_iter().map(|v| *v)\n+    }\n }\n \n pub struct SubstIterCopied<'a, 'tcx, I: IntoIterator> {"}, {"sha": "4c346b00256ccd7411b8a5c093489a3fa89d5601", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -701,13 +701,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n \n-    pub fn bound_explicit_item_bounds(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<&'tcx [(ty::Predicate<'tcx>, rustc_span::Span)]> {\n-        ty::EarlyBinder(self.explicit_item_bounds(def_id))\n-    }\n-\n     /// Returns names of captured upvars for closures and generators.\n     ///\n     /// Here are some examples:"}, {"sha": "e44dd084b2de5d6f384c709a3f261f263360e552", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -1800,7 +1800,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for &(predicate, _) in tcx.explicit_item_bounds(def) {\n+            for &(predicate, _) in tcx.explicit_item_bounds(def).skip_binder() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "c607c7fd5f4a73e586d3b08d3e9aebbbe92628b8", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -269,7 +269,7 @@ where\n                     // and are visited by shallow visitors.\n                     self.visit_predicates(ty::GenericPredicates {\n                         parent: None,\n-                        predicates: tcx.explicit_item_bounds(def_id),\n+                        predicates: tcx.explicit_item_bounds(def_id).skip_binder(),\n                     })?;\n                 }\n             }\n@@ -1784,7 +1784,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn bounds(&mut self) -> &mut Self {\n         self.visit_predicates(ty::GenericPredicates {\n             parent: None,\n-            predicates: self.tcx.explicit_item_bounds(self.item_def_id),\n+            predicates: self.tcx.explicit_item_bounds(self.item_def_id).skip_binder(),\n         });\n         self\n     }"}, {"sha": "c97473e6241f28dd3f9dc2db949b5200369bede6", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -86,8 +86,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         if let Some(poly_trait_pred) = assumption.to_opt_poly_trait_pred()\n             && poly_trait_pred.def_id() == goal.predicate.def_id()\n+            && poly_trait_pred.polarity() == goal.predicate.polarity\n         {\n-            // FIXME: Constness and polarity\n+            // FIXME: Constness\n             ecx.probe(|ecx| {\n                 let assumption_trait_pred =\n                     ecx.instantiate_binder_with_infer(poly_trait_pred);\n@@ -111,6 +112,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         if let Some(poly_trait_pred) = assumption.to_opt_poly_trait_pred()\n             && poly_trait_pred.def_id() == goal.predicate.def_id()\n+            && poly_trait_pred.polarity() == goal.predicate.polarity\n         {\n             // FIXME: Constness and polarity\n             ecx.probe(|ecx| {\n@@ -147,6 +149,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         if let Some(result) = ecx.disqualify_auto_trait_candidate_due_to_possible_impl(goal) {\n             return result;\n         }\n@@ -161,6 +167,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         let tcx = ecx.tcx();\n \n         ecx.probe(|ecx| {\n@@ -176,6 +186,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         ecx.probe_and_evaluate_goal_for_constituent_tys(\n             goal,\n             structural_traits::instantiate_constituent_tys_for_sized_trait,\n@@ -186,6 +200,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         ecx.probe_and_evaluate_goal_for_constituent_tys(\n             goal,\n             structural_traits::instantiate_constituent_tys_for_copy_clone_trait,\n@@ -196,6 +214,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         if goal.predicate.self_ty().has_non_region_infer() {\n             return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n         }\n@@ -217,6 +239,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         if let ty::FnPtr(..) = goal.predicate.self_ty().kind() {\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         } else {\n@@ -229,6 +255,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         goal: Goal<'tcx, Self>,\n         goal_kind: ty::ClosureKind,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         let tcx = ecx.tcx();\n         let tupled_inputs_and_output =\n             match structural_traits::extract_tupled_inputs_and_output_from_callable(\n@@ -259,6 +289,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         if let ty::Tuple(..) = goal.predicate.self_ty().kind() {\n             ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n         } else {\n@@ -268,15 +302,23 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n     fn consider_builtin_pointee_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n-        _goal: Goal<'tcx, Self>,\n+        goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n     }\n \n     fn consider_builtin_future_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         let ty::Generator(def_id, _, _) = *goal.predicate.self_ty().kind() else {\n             return Err(NoSolution);\n         };\n@@ -297,6 +339,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         let self_ty = goal.predicate.self_ty();\n         let ty::Generator(def_id, substs, _) = *self_ty.kind() else {\n             return Err(NoSolution);\n@@ -326,6 +372,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         let tcx = ecx.tcx();\n         let a_ty = goal.predicate.self_ty();\n         let b_ty = goal.predicate.trait_ref.substs.type_at(1);\n@@ -447,6 +497,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> Vec<CanonicalResponse<'tcx>> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return vec![];\n+        }\n+\n         let tcx = ecx.tcx();\n \n         let a_ty = goal.predicate.self_ty();\n@@ -521,8 +575,12 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n     fn consider_builtin_discriminant_kind_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n-        _goal: Goal<'tcx, Self>,\n+        goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         // `DiscriminantKind` is automatically implemented for every type.\n         ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n     }\n@@ -531,6 +589,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         if !goal.param_env.is_const() {\n             // `Destruct` is automatically implemented for every type in\n             // non-const environments.\n@@ -545,6 +607,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n+        if goal.predicate.polarity != ty::ImplPolarity::Positive {\n+            return Err(NoSolution);\n+        }\n+\n         // `rustc_transmute` does not have support for type or const params\n         if goal.has_non_region_placeholders() {\n             return Err(NoSolution);"}, {"sha": "73e2efc3b000e4722815d69ae362632aff6ce29a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -297,8 +297,8 @@ fn bounds_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span\n     tcx.associated_items(trait_def_id)\n         .in_definition_order()\n         .filter(|item| item.kind == ty::AssocKind::Type)\n-        .flat_map(|item| tcx.explicit_item_bounds(item.def_id))\n-        .filter_map(|pred_span| predicate_references_self(tcx, *pred_span))\n+        .flat_map(|item| tcx.explicit_item_bounds(item.def_id).subst_identity_iter_copied())\n+        .filter_map(|pred_span| predicate_references_self(tcx, pred_span))\n         .collect()\n }\n "}, {"sha": "c319b2e31c7e673f1f8fe6dcd5b57708e9c4980c", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -50,12 +50,11 @@ impl<'tcx> RustIrDatabase<'tcx> {\n     where\n         ty::Predicate<'tcx>: LowerInto<'tcx, std::option::Option<T>>,\n     {\n-        let bounds = self.interner.tcx.bound_explicit_item_bounds(def_id);\n-        bounds\n-            .0\n-            .iter()\n-            .map(|(bound, _)| bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars))\n-            .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n+        self.interner\n+            .tcx\n+            .explicit_item_bounds(def_id)\n+            .subst_iter_copied(self.interner.tcx, &bound_vars)\n+            .filter_map(|(bound, _)| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n             .collect()\n     }\n }\n@@ -506,15 +505,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let identity_substs = InternalSubsts::identity_for_item(self.interner.tcx, opaque_ty_id.0);\n \n-        let explicit_item_bounds = self.interner.tcx.bound_explicit_item_bounds(opaque_ty_id.0);\n+        let explicit_item_bounds = self.interner.tcx.explicit_item_bounds(opaque_ty_id.0);\n         let bounds =\n             explicit_item_bounds\n-                .0\n-                .iter()\n+                .subst_iter_copied(self.interner.tcx, &bound_vars)\n                 .map(|(bound, _)| {\n-                    explicit_item_bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars)\n-                })\n-                .map(|bound| {\n                     bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,\n                         opaque_ty_id,"}, {"sha": "5d9772b878b03a88e547d9d2c062fb1ac826f3b3", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -39,6 +39,7 @@ use crate::sync::Arc;\n /// use std::sync::Arc;\n /// use std::task::{Context, Poll, Wake};\n /// use std::thread::{self, Thread};\n+/// use core::pin::pin;\n ///\n /// /// A waker that wakes up the current thread when called.\n /// struct ThreadWaker(Thread);\n@@ -52,7 +53,7 @@ use crate::sync::Arc;\n /// /// Run a future to completion on the current thread.\n /// fn block_on<T>(fut: impl Future<Output = T>) -> T {\n ///     // Pin the future so it can be polled.\n-///     let mut fut = Box::pin(fut);\n+///     let mut fut = pin!(fut);\n ///\n ///     // Create a new context to be passed to the future.\n ///     let t = thread::current();"}, {"sha": "e6e3b55efa9ae7c8238fe53ab7e21b9ff483cab7", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -1456,7 +1456,6 @@ pub struct TimSortRun {\n \n /// Takes a range as denoted by start and end, that is already sorted and extends it to the right if\n /// necessary with sorts optimized for smaller ranges such as insertion sort.\n-#[cfg(not(no_global_oom_handling))]\n fn provide_sorted_batch<T, F>(v: &mut [T], start: usize, mut end: usize, is_less: &mut F) -> usize\n where\n     F: FnMut(&T, &T) -> bool,"}, {"sha": "c992a5388d19900577ff1574d1cafa38a4f4a555", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -422,8 +422,8 @@ fn clean_projection<'tcx>(\n         let bounds = cx\n             .tcx\n             .explicit_item_bounds(ty.skip_binder().def_id)\n-            .iter()\n-            .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, ty.skip_binder().substs))\n+            .subst_iter_copied(cx.tcx, ty.skip_binder().substs)\n+            .map(|(pred, _)| pred)\n             .collect::<Vec<_>>();\n         return clean_middle_opaque_bounds(cx, bounds);\n     }\n@@ -1315,10 +1315,11 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n \n             if let ty::TraitContainer = assoc_item.container {\n-                let bounds = tcx.explicit_item_bounds(assoc_item.def_id);\n+                let bounds =\n+                    tcx.explicit_item_bounds(assoc_item.def_id).subst_identity_iter_copied();\n                 let predicates = tcx.explicit_predicates_of(assoc_item.def_id).predicates;\n                 let predicates =\n-                    tcx.arena.alloc_from_iter(bounds.into_iter().chain(predicates).copied());\n+                    tcx.arena.alloc_from_iter(bounds.chain(predicates.iter().copied()));\n                 let mut generics = clean_ty_generics(\n                     cx,\n                     tcx.generics_of(assoc_item.def_id),\n@@ -1845,8 +1846,8 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let bounds = cx\n                 .tcx\n                 .explicit_item_bounds(def_id)\n-                .iter()\n-                .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, substs))\n+                .subst_iter_copied(cx.tcx, substs)\n+                .map(|(bound, _)| bound)\n                 .collect::<Vec<_>>();\n             clean_middle_opaque_bounds(cx, bounds)\n         }"}, {"sha": "ff838c2d56e43f85214b79bdcc0e635c99e5f936", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, AliasTy, Clause, EarlyBinder, PredicateKind};\n+use rustc_middle::ty::{self, AliasTy, Clause, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n@@ -66,8 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n-            for &(p, _span) in preds {\n-                let p = EarlyBinder(p).subst(cx.tcx, substs);\n+            for (p, _span) in preds.subst_iter_copied(cx.tcx, substs) {\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "cb700126c2bd5b074ae400e4e452144f2e91edd6", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -90,7 +90,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                         return false;\n                     }\n \n-                    for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                    for (predicate, _span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n                             // and check substituions to find `U`.\n@@ -267,7 +267,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(def_id).skip_binder() {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n                         return true;\n@@ -743,7 +743,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.def_id)\n+        .explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {"}, {"sha": "5436b02c3ded2d64b23101a00d2fb213e999e10b", "filename": "tests/ui/traits/new-solver/negative-coherence-bounds.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/tests%2Fui%2Ftraits%2Fnew-solver%2Fnegative-coherence-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/tests%2Fui%2Ftraits%2Fnew-solver%2Fnegative-coherence-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnegative-coherence-bounds.rs?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+// This test verifies that negative trait predicate cannot be satisfied from a\n+// positive param-env candidate.\n+\n+// Negative coherence is one of the only places where we actually construct and\n+// evaluate negative predicates. Specifically, when verifying whether the first\n+// and second impls below overlap, we do not want to consider them disjoint,\n+// otherwise the second impl would be missing an associated type `type Item`\n+// which is provided by the first impl that it is specializing.\n+\n+#![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n+#![feature(with_negative_coherence)]\n+\n+trait BoxIter {\n+    type Item;\n+\n+    fn last(self) -> Option<Self::Item>;\n+}\n+\n+impl<I: Iterator + ?Sized> BoxIter for Box<I> {\n+    type Item = I::Item;\n+\n+    default fn last(self) -> Option<I::Item> {\n+        todo!()\n+    }\n+}\n+\n+// When checking that this impl does/doesn't overlap the one above, we evaluate\n+// a negative version of all of the where-clause predicates of the impl below.\n+// For `I: !Iterator`, we should make sure that the param-env clause `I: Iterator`\n+// from above doesn't satisfy this predicate.\n+impl<I: Iterator> BoxIter for Box<I> {\n+    fn last(self) -> Option<I::Item> {\n+        (*self).last()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4127f51f56da2f417dc5beae8abad9d8453ff204", "filename": "tests/ui/traits/new-solver/negative-coherence-bounds.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/458d4dae845ec155b285681a5b88305641abb868/tests%2Fui%2Ftraits%2Fnew-solver%2Fnegative-coherence-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/458d4dae845ec155b285681a5b88305641abb868/tests%2Fui%2Ftraits%2Fnew-solver%2Fnegative-coherence-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnegative-coherence-bounds.stderr?ref=458d4dae845ec155b285681a5b88305641abb868", "patch": "@@ -0,0 +1,12 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/negative-coherence-bounds.rs:12:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}