{"sha": "bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f", "node_id": "C_kwDOAAsO6NoAKGJmM2M1MmYzNTUyZmY0YjFiNWJkN2Y3M2U1MGRkNzE1MjMyOTZmM2Y", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-11-07T08:43:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-11-07T13:38:17Z"}, "message": "ast: Fix naming conventions in AST structures\n\nTraitKind -> Trait\nTyAliasKind -> TyAlias\nImplKind -> Impl\nFnKind -> Fn\n\nAll `*Kind`s in AST are supposed to be enums.\n\nTuple structs are converted to braced structs for the types above, and fields are reordered in syntactic order.\n\nAlso, mutable AST visitor now correctly visit spans in defaultness, unsafety, impl polarity and constness.", "tree": {"sha": "b7ce59101801ba497a8a37a1eb2e509f1eea05cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ce59101801ba497a8a37a1eb2e509f1eea05cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f", "html_url": "https://github.com/rust-lang/rust/commit/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051e2b40c9417a761ca3f35b07a709580178ec61", "url": "https://api.github.com/repos/rust-lang/rust/commits/051e2b40c9417a761ca3f35b07a709580178ec61", "html_url": "https://github.com/rust-lang/rust/commit/051e2b40c9417a761ca3f35b07a709580178ec61"}], "stats": {"total": 142, "additions": 86, "deletions": 56}, "files": [{"sha": "c828798d933114db056b331834a3d2a02f96d403", "filename": "src/items.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f", "patch": "@@ -622,7 +622,7 @@ impl<'a> FmtVisitor<'a> {\n             fn need_empty_line(a: &ast::AssocItemKind, b: &ast::AssocItemKind) -> bool {\n                 match (a, b) {\n                     (TyAlias(lty), TyAlias(rty))\n-                        if both_type(&lty.3, &rty.3) || both_opaque(&lty.3, &rty.3) =>\n+                        if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                     {\n                         false\n                     }\n@@ -633,16 +633,16 @@ impl<'a> FmtVisitor<'a> {\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n                 (TyAlias(lty), TyAlias(rty))\n-                    if both_type(&lty.3, &rty.3) || both_opaque(&lty.3, &rty.3) =>\n+                    if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Const(..), Const(..)) | (MacCall(..), MacCall(..)) => {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n-                (TyAlias(ty), _) if is_type(&ty.3) => Ordering::Less,\n-                (_, TyAlias(ty)) if is_type(&ty.3) => Ordering::Greater,\n+                (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n+                (_, TyAlias(ty)) if is_type(&ty.ty) => Ordering::Greater,\n                 (TyAlias(..), _) => Ordering::Less,\n                 (_, TyAlias(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n@@ -679,7 +679,7 @@ pub(crate) fn format_impl(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::ImplKind {\n+        let ast::Impl {\n             ref generics,\n             ref self_ty,\n             ref items,\n@@ -833,7 +833,7 @@ fn format_impl_ref_and_type(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::ImplKind {\n+        let ast::Impl {\n             unsafety,\n             polarity,\n             defaultness,\n@@ -1029,8 +1029,13 @@ pub(crate) fn format_trait(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Trait(trait_kind) = &item.kind {\n-        let ast::TraitKind(is_auto, unsafety, ref generics, ref generic_bounds, ref trait_items) =\n-            **trait_kind;\n+        let ast::Trait {\n+            is_auto,\n+            unsafety,\n+            ref generics,\n+            ref bounds,\n+            ref items,\n+        } = **trait_kind;\n         let mut result = String::with_capacity(128);\n         let header = format!(\n             \"{}{}{}trait \",\n@@ -1048,11 +1053,11 @@ pub(crate) fn format_trait(\n         result.push_str(&generics_str);\n \n         // FIXME(#2055): rustfmt fails to format when there are comments between trait bounds.\n-        if !generic_bounds.is_empty() {\n+        if !bounds.is_empty() {\n             let ident_hi = context\n                 .snippet_provider\n                 .span_after(item.span, &item.ident.as_str());\n-            let bound_hi = generic_bounds.last().unwrap().span().hi();\n+            let bound_hi = bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(snippet) {\n                 return None;\n@@ -1061,7 +1066,7 @@ pub(crate) fn format_trait(\n             result = rewrite_assign_rhs_with(\n                 context,\n                 result + \":\",\n-                generic_bounds,\n+                bounds,\n                 shape,\n                 RhsTactics::ForceNextLineWithoutIndent,\n             )?;\n@@ -1072,10 +1077,10 @@ pub(crate) fn format_trait(\n             let where_on_new_line = context.config.indent_style() != IndentStyle::Block;\n \n             let where_budget = context.budget(last_line_width(&result));\n-            let pos_before_where = if generic_bounds.is_empty() {\n+            let pos_before_where = if bounds.is_empty() {\n                 generics.where_clause.span.lo()\n             } else {\n-                generic_bounds[generic_bounds.len() - 1].span().hi()\n+                bounds[bounds.len() - 1].span().hi()\n             };\n             let option = WhereClauseOption::snuggled(&generics_str);\n             let where_clause_str = rewrite_where_clause(\n@@ -1134,7 +1139,7 @@ pub(crate) fn format_trait(\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n                 if result.contains('\\n')\n-                    || (!generics.where_clause.predicates.is_empty() && !trait_items.is_empty())\n+                    || (!generics.where_clause.predicates.is_empty() && !items.is_empty())\n                 {\n                     result.push_str(&offset.to_string_with_newline(context.config));\n                 } else {\n@@ -1149,12 +1154,12 @@ pub(crate) fn format_trait(\n         let open_pos = snippet.find_uncommented(\"{\")? + 1;\n         let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n-        if !trait_items.is_empty() || contains_comment(&snippet[open_pos..]) {\n+        if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_context(context);\n             visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = block_span.lo() + BytePos(open_pos as u32);\n \n-            for item in trait_items {\n+            for item in items {\n                 visitor.visit_trait_item(item);\n             }\n \n@@ -3125,17 +3130,22 @@ impl Rewrite for ast::ForeignItem {\n \n         let item_str = match self.kind {\n             ast::ForeignItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref fn_sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let mut visitor = FmtVisitor::from_context(context);\n                     visitor.block_indent = shape.indent;\n                     visitor.last_pos = self.span.lo();\n                     let inner_attrs = inner_attributes(&self.attrs);\n                     let fn_ctxt = visit::FnCtxt::Foreign;\n                     visitor.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, self.ident, &fn_sig, &self.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, self.ident, &sig, &self.vis, Some(body)),\n                         generics,\n-                        &fn_sig.decl,\n+                        &sig.decl,\n                         self.span,\n                         defaultness,\n                         Some(&inner_attrs),\n@@ -3146,7 +3156,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(&fn_sig, generics, &self.vis),\n+                        &FnSig::from_method_sig(&sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )\n@@ -3168,16 +3178,20 @@ impl Rewrite for ast::ForeignItem {\n                 rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n             }\n             ast::ForeignItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n-                    **ty_alias_kind;\n+                let ast::TyAlias {\n+                    ref generics,\n+                    ref bounds,\n+                    ref ty,\n+                    ..\n+                } = **ty_alias_kind;\n                 rewrite_type(\n                     &context,\n                     shape.indent,\n                     self.ident,\n                     &self.vis,\n                     generics,\n-                    Some(generic_bounds),\n-                    type_default.as_ref(),\n+                    Some(bounds),\n+                    ty.as_ref(),\n                     self.span,\n                 )\n             }"}, {"sha": "2cfd4e3f15c5886c5792d216bfdbf3b5dcf99802", "filename": "src/visitor.rs", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=bf3c52f3552ff4b1b5bd7f73e50dd71523296f3f", "patch": "@@ -540,44 +540,41 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.visit_static(&StaticParts::from_item(item));\n                 }\n                 ast::ItemKind::Fn(ref fn_kind) => {\n-                    let ast::FnKind(defaultness, ref fn_signature, ref generics, ref block) =\n-                        **fn_kind;\n-                    if let Some(ref body) = block {\n+                    let ast::Fn {\n+                        defaultness,\n+                        ref sig,\n+                        ref generics,\n+                        ref body,\n+                    } = **fn_kind;\n+                    if let Some(ref body) = body {\n                         let inner_attrs = inner_attributes(&item.attrs);\n-                        let fn_ctxt = match fn_signature.header.ext {\n+                        let fn_ctxt = match sig.header.ext {\n                             ast::Extern::None => visit::FnCtxt::Free,\n                             _ => visit::FnCtxt::Foreign,\n                         };\n                         self.visit_fn(\n-                            visit::FnKind::Fn(\n-                                fn_ctxt,\n-                                item.ident,\n-                                &fn_signature,\n-                                &item.vis,\n-                                Some(body),\n-                            ),\n+                            visit::FnKind::Fn(fn_ctxt, item.ident, &sig, &item.vis, Some(body)),\n                             generics,\n-                            &fn_signature.decl,\n+                            &sig.decl,\n                             item.span,\n                             defaultness,\n                             Some(&inner_attrs),\n                         )\n                     } else {\n                         let indent = self.block_indent;\n                         let rewrite = self.rewrite_required_fn(\n-                            indent,\n-                            item.ident,\n-                            &fn_signature,\n-                            &item.vis,\n-                            generics,\n-                            item.span,\n+                            indent, item.ident, &sig, &item.vis, generics, item.span,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n                 }\n                 ast::ItemKind::TyAlias(ref alias_kind) => {\n-                    let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref ty) =\n-                        **alias_kind;\n+                    let ast::TyAlias {\n+                        ref generics,\n+                        ref bounds,\n+                        ref ty,\n+                        ..\n+                    } = **alias_kind;\n                     match ty {\n                         Some(ty) => {\n                             let rewrite = rewrite_type(\n@@ -586,7 +583,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                                 item.ident,\n                                 &item.vis,\n                                 generics,\n-                                Some(generic_bounds),\n+                                Some(bounds),\n                                 Some(&*ty),\n                                 item.span,\n                             );\n@@ -597,7 +594,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                                 &self.get_context(),\n                                 self.block_indent,\n                                 item.ident,\n-                                generic_bounds,\n+                                bounds,\n                                 generics,\n                                 &item.vis,\n                                 item.span,\n@@ -639,8 +636,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         match ti.kind {\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_trait_item(ti)),\n             ast::AssocItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let inner_attrs = inner_attributes(&ti.attrs);\n                     let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Trait);\n                     self.visit_fn(\n@@ -659,16 +661,20 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 }\n             }\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n-                    **ty_alias_kind;\n+                let ast::TyAlias {\n+                    ref generics,\n+                    ref bounds,\n+                    ref ty,\n+                    ..\n+                } = **ty_alias_kind;\n                 let rewrite = rewrite_type(\n                     &self.get_context(),\n                     self.block_indent,\n                     ti.ident,\n                     &ti.vis,\n                     generics,\n-                    Some(generic_bounds),\n-                    type_default.as_ref(),\n+                    Some(bounds),\n+                    ty.as_ref(),\n                     ti.span,\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n@@ -689,8 +695,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         match ii.kind {\n             ast::AssocItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let inner_attrs = inner_attributes(&ii.attrs);\n                     let fn_ctxt = visit::FnCtxt::Assoc(visit::AssocCtxt::Impl);\n                     self.visit_fn(\n@@ -710,7 +721,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(defaultness, ref generics, _, ref ty) = **ty_alias_kind;\n+                let ast::TyAlias {\n+                    defaultness,\n+                    ref generics,\n+                    ref ty,\n+                    ..\n+                } = **ty_alias_kind;\n                 self.push_rewrite(\n                     ii.span,\n                     rewrite_impl_type("}]}