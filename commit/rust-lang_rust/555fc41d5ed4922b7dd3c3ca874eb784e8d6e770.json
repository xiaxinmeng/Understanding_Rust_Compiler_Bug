{"sha": "555fc41d5ed4922b7dd3c3ca874eb784e8d6e770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWZjNDFkNWVkNDkyMmI3ZGQzYzNjYTg3NGViNzg0ZThkNmU3NzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-07-13T20:07:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-13T20:07:02Z"}, "message": "Merge pull request #243 from solson/magic_numbers\n\nGet rid of magic numbers", "tree": {"sha": "72cb1bf02f8451523d918383163d3cbf14a43588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72cb1bf02f8451523d918383163d3cbf14a43588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770", "html_url": "https://github.com/rust-lang/rust/commit/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c8fe7ace4c795c01d03e0d326127efba089488", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c8fe7ace4c795c01d03e0d326127efba089488", "html_url": "https://github.com/rust-lang/rust/commit/14c8fe7ace4c795c01d03e0d326127efba089488"}, {"sha": "f8757aa092ef296ca02a33bb0994f27a60572950", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8757aa092ef296ca02a33bb0994f27a60572950", "html_url": "https://github.com/rust-lang/rust/commit/f8757aa092ef296ca02a33bb0994f27a60572950"}], "stats": {"total": 106, "additions": 88, "deletions": 18}, "files": [{"sha": "771b740b3755a5728d869390e67d0d57b012578c", "filename": "src/const_eval.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770/src%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770/src%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconst_eval.rs?ref=555fc41d5ed4922b7dd3c3ca874eb784e8d6e770", "patch": "@@ -1,22 +1,20 @@\n-use rustc::hir::def_id::DefId;\n use rustc::traits::Reveal;\n-use rustc::ty::subst::Substs;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Ty, Instance};\n \n use error::{EvalError, EvalResult};\n use lvalue::{Global, GlobalId, Lvalue};\n+use value::PrimVal;\n use rustc_const_math::ConstInt;\n use eval_context::{EvalContext, StackPopCleanup};\n \n-pub fn eval_body_as_integer<'a, 'tcx>(\n+pub fn eval_body_as_primval<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    (def_id, substs): (DefId, &'tcx Substs<'tcx>),\n-) -> EvalResult<'tcx, ConstInt> {\n+    instance: Instance<'tcx>,\n+) -> EvalResult<'tcx, (PrimVal, Ty<'tcx>)> {\n     let limits = ::ResourceLimits::default();\n     let mut ecx = EvalContext::new(tcx, limits);\n-    let instance = ecx.resolve_associated_const(def_id, substs);\n     let cid = GlobalId { instance, promoted: None };\n-    if ecx.tcx.has_attr(def_id, \"linkage\") {\n+    if ecx.tcx.has_attr(instance.def_id(), \"linkage\") {\n         return Err(EvalError::NotConst(\"extern global\".to_string()));\n     }\n     \n@@ -28,7 +26,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n                 ty::ParamEnv::empty(Reveal::All),\n                 mir.span);\n         let cleanup = StackPopCleanup::MarkStatic(mutable);\n-        let name = ty::tls::with(|tcx| tcx.item_path_str(def_id));\n+        let name = ty::tls::with(|tcx| tcx.item_path_str(instance.def_id()));\n         trace!(\"pushing stack frame for global: {}\", name);\n         ecx.push_stack_frame(\n             instance,\n@@ -41,11 +39,19 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         while ecx.step()? {}\n     }\n     let value = ecx.globals.get(&cid).expect(\"global not cached\").value;\n-    let prim = ecx.value_to_primval(value, mir.return_ty)?.to_bytes()?;\n+    Ok((ecx.value_to_primval(value, mir.return_ty)?, mir.return_ty))\n+}\n+\n+pub fn eval_body_as_integer<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    instance: Instance<'tcx>,\n+) -> EvalResult<'tcx, ConstInt> {\n+    let (prim, ty) = eval_body_as_primval(tcx, instance)?;\n+    let prim = prim.to_bytes()?;\n     use syntax::ast::{IntTy, UintTy};\n     use rustc::ty::TypeVariants::*;\n     use rustc_const_math::{ConstIsize, ConstUsize};\n-    Ok(match mir.return_ty.sty {\n+    Ok(match ty.sty {\n         TyInt(IntTy::I8) => ConstInt::I8(prim as i128 as i8),\n         TyInt(IntTy::I16) => ConstInt::I16(prim as i128 as i16),\n         TyInt(IntTy::I32) => ConstInt::I32(prim as i128 as i32),"}, {"sha": "3e1155e0b874dd1f064a301eee369a2d70397fbe", "filename": "src/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=555fc41d5ed4922b7dd3c3ca874eb784e8d6e770", "patch": "@@ -69,6 +69,7 @@ pub enum EvalError<'tcx> {\n     NeedsRfc(String),\n     NotConst(String),\n     ReadFromReturnPointer,\n+    PathNotFound(Vec<String>),\n }\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n@@ -175,6 +176,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"this feature is not compatible with constant evaluation\",\n             ReadFromReturnPointer =>\n                 \"tried to read from the return pointer\",\n+            EvalError::PathNotFound(_) =>\n+                \"a path could not be resolved, maybe the crate is not loaded\",\n         }\n     }\n \n@@ -215,6 +218,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg),\n             NotConst(ref msg) =>\n                 write!(f, \"Cannot evaluate within constants: \\\"{}\\\"\", msg),\n+            EvalError::PathNotFound(ref path) =>\n+                write!(f, \"Cannot find path {:?}\", path),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "643df3608f9c235acb8e9bc70627129aa532b194", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 66, "deletions": 7, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555fc41d5ed4922b7dd3c3ca874eb784e8d6e770/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=555fc41d5ed4922b7dd3c3ca874eb784e8d6e770", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n use rustc::ty::{self, TypeVariants, Ty};\n use rustc::ty::layout::Layout;\n@@ -13,6 +13,8 @@ use memory::{MemoryPointer, TlsKey};\n use value::{PrimVal, Value};\n use rustc_data_structures::indexed_vec::Idx;\n \n+use std::mem;\n+\n mod drop;\n mod intrinsic;\n \n@@ -853,12 +855,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"sysconf\" => {\n                 let name = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 trace!(\"sysconf() called with name {}\", name);\n-                let result = match name {\n-                    30 => PrimVal::Bytes(4096), // _SC_PAGESIZE\n-                    70 => PrimVal::from_i128(-1), // _SC_GETPW_R_SIZE_MAX\n-                    _ => return Err(EvalError::Unimplemented(format!(\"Unimplemented sysconf name: {}\", name)))\n-                };\n-                self.write_primval(dest, result, dest_ty)?;\n+                // cache the sysconf integers via miri's global cache\n+                let paths = &[\n+                    (&[\"libc\", \"_SC_PAGESIZE\"], PrimVal::Bytes(4096)),\n+                    (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], PrimVal::from_i128(-1)),\n+                ];\n+                let mut result = None;\n+                for &(path, path_value) in paths {\n+                    if let Ok(instance) = self.resolve_path(path) {\n+                        use lvalue::GlobalId;\n+                        let cid = GlobalId { instance, promoted: None };\n+                        // compute global if not cached\n+                        let val = match self.globals.get(&cid).map(|glob| glob.value) {\n+                            Some(value) => self.value_to_primval(value, usize)?.to_u64()?,\n+                            None => ::const_eval::eval_body_as_primval(self.tcx, instance)?.0.to_u64()?,\n+                        };\n+                        if val == name {\n+                            result = Some(path_value);\n+                            break;\n+                        }\n+                    }\n+                }\n+                if let Some(result) = result {\n+                    self.write_primval(dest, result, dest_ty)?;\n+                } else {\n+                    return Err(EvalError::Unimplemented(format!(\"Unimplemented sysconf name: {}\", name)));\n+                }\n             }\n \n             // Hook pthread calls that go to the thread-local storage memory subsystem\n@@ -933,4 +955,41 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.goto_block(dest_block);\n         Ok(())\n     }\n+\n+    /// Get an instance for a path.\n+    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n+        let cstore = &self.tcx.sess.cstore;\n+\n+        let crates = cstore.crates();\n+        crates.iter()\n+            .find(|&&krate| cstore.crate_name(krate) == path[0])\n+            .and_then(|krate| {\n+                let krate = DefId {\n+                    krate: *krate,\n+                    index: CRATE_DEF_INDEX,\n+                };\n+                let mut items = cstore.item_children(krate, self.tcx.sess);\n+                let mut path_it = path.iter().skip(1).peekable();\n+\n+                while let Some(segment) = path_it.next() {\n+                    for item in &mem::replace(&mut items, vec![]) {\n+                        if item.ident.name == *segment {\n+                            if path_it.peek().is_none() {\n+                                return Some(ty::Instance::mono(self.tcx, item.def.def_id()));\n+                            }\n+\n+                            items = cstore.item_children(item.def.def_id(), self.tcx.sess);\n+                            break;\n+                        }\n+                    }\n+                }\n+                None\n+            })\n+            .ok_or_else(|| {\n+                let path = path.iter()\n+                    .map(|&s| s.to_owned())\n+                    .collect();\n+                EvalError::PathNotFound(path)\n+            })\n+    }\n }"}]}