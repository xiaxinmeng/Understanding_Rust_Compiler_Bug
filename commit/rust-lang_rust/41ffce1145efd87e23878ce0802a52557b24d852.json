{"sha": "41ffce1145efd87e23878ce0802a52557b24d852", "node_id": "C_kwDOAAsO6NoAKDQxZmZjZTExNDVlZmQ4N2UyMzg3OGNlMDgwMmE1MjU1N2IyNGQ4NTI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-10T00:26:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-10T00:29:05Z"}, "message": "implement simd_scatter", "tree": {"sha": "92e5def9344e22f478a09faaac502ba9539d95bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e5def9344e22f478a09faaac502ba9539d95bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41ffce1145efd87e23878ce0802a52557b24d852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41ffce1145efd87e23878ce0802a52557b24d852", "html_url": "https://github.com/rust-lang/rust/commit/41ffce1145efd87e23878ce0802a52557b24d852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41ffce1145efd87e23878ce0802a52557b24d852/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576e2bbed5cfa26fdab2af62e1372d1f8fa581d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/576e2bbed5cfa26fdab2af62e1372d1f8fa581d1", "html_url": "https://github.com/rust-lang/rust/commit/576e2bbed5cfa26fdab2af62e1372d1f8fa581d1"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "b4416bfa985989b84c2bcc034a7d71c3b47d2db0", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/41ffce1145efd87e23878ce0802a52557b24d852/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ffce1145efd87e23878ce0802a52557b24d852/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=41ffce1145efd87e23878ce0802a52557b24d852", "patch": "@@ -570,8 +570,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let no = this.read_immediate(&this.mplace_index(&no, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n \n-                    let mask = simd_element_to_bool(mask)?;\n-                    let val = if mask { yes } else { no };\n+                    let val = if simd_element_to_bool(mask)? { yes } else { no };\n                     this.write_immediate(*val, &dest.into())?;\n                 }\n             }\n@@ -670,8 +669,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let mask = this.read_immediate(&this.mplace_index(&mask, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n \n-                    let mask = simd_element_to_bool(mask)?;\n-                    let val = if mask {\n+                    let val = if simd_element_to_bool(mask)? {\n                         let place = this.deref_operand(&ptr.into())?;\n                         this.read_immediate(&place.into())?\n                     } else {\n@@ -680,6 +678,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     this.write_immediate(*val, &dest.into())?;\n                 }\n             }\n+            \"simd_scatter\" => {\n+                let &[ref value, ref ptrs, ref mask] = check_arg_count(args)?;\n+                let (value, value_len) = this.operand_to_simd(value)?;\n+                let (ptrs, ptrs_len) = this.operand_to_simd(ptrs)?;\n+                let (mask, mask_len) = this.operand_to_simd(mask)?;\n+\n+                assert_eq!(ptrs_len, value_len);\n+                assert_eq!(ptrs_len, mask_len);\n+\n+                for i in 0..ptrs_len {\n+                    let value = this.read_immediate(&this.mplace_index(&value, i)?.into())?;\n+                    let ptr = this.read_immediate(&this.mplace_index(&ptrs, i)?.into())?;\n+                    let mask = this.read_immediate(&this.mplace_index(&mask, i)?.into())?;\n+\n+                    if simd_element_to_bool(mask)? {\n+                        let place = this.deref_operand(&ptr.into())?;\n+                        this.write_immediate(*value, &place.into())?;\n+                    }\n+                }\n+            }\n \n             // Atomic operations\n             \"atomic_load\" => this.atomic_load(args, dest, AtomicReadOp::SeqCst)?,"}, {"sha": "ae6f048226ddb5131327c3e3c64d502a60c553f0", "filename": "tests/compile-fail/intrinsics/simd-gather.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41ffce1145efd87e23878ce0802a52557b24d852/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ffce1145efd87e23878ce0802a52557b24d852/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-gather.rs?ref=41ffce1145efd87e23878ce0802a52557b24d852", "patch": "@@ -1,9 +1,9 @@\n-// error-pattern: out-of-bounds\n+// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n \n fn main() { unsafe {\n-    let vec: &[i16] = &[10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    let vec: &[i8] = &[10, 11, 12, 13, 14, 15, 16, 17, 18];\n     let idxs = Simd::from_array([9, 3, 0, 17]);\n     let _result = Simd::gather_select_unchecked(&vec, Mask::splat(true), idxs, Simd::splat(0));\n } }"}, {"sha": "f46e4f0d4f6a8418e409b2849379f4751296db19", "filename": "tests/compile-fail/intrinsics/simd-scatter.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41ffce1145efd87e23878ce0802a52557b24d852/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ffce1145efd87e23878ce0802a52557b24d852/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fsimd-scatter.rs?ref=41ffce1145efd87e23878ce0802a52557b24d852", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+#![feature(portable_simd)]\n+use std::simd::*;\n+\n+fn main() { unsafe {\n+    let mut vec: Vec<i8> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    let idxs = Simd::from_array([9, 3, 0, 17]);\n+    Simd::from_array([-27, 82, -41, 124]).scatter_select_unchecked(&mut vec, Mask::splat(true), idxs);\n+} }"}, {"sha": "c046af0bcf52af76bb746787498f2470a0067cfd", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41ffce1145efd87e23878ce0802a52557b24d852/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41ffce1145efd87e23878ce0802a52557b24d852/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=41ffce1145efd87e23878ce0802a52557b24d852", "patch": "@@ -250,10 +250,14 @@ fn simd_swizzle() {\n }\n \n fn simd_gather_scatter() {\n-    let vec: &[i16] = &[10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    let mut vec: Vec<i16> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     let idxs = Simd::from_array([9, 3, 0, 17]);\n     let result = Simd::gather_or_default(&vec, idxs); // Note the lane that is out-of-bounds.\n     assert_eq!(result, Simd::from_array([0, 13, 10, 0]));\n+\n+    let idxs = Simd::from_array([9, 3, 0, 0]);\n+    Simd::from_array([-27, 82, -41, 124]).scatter(&mut vec, idxs);\n+    assert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n }\n \n fn simd_intrinsics() {"}]}