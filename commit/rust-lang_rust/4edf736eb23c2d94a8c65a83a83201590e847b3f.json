{"sha": "4edf736eb23c2d94a8c65a83a83201590e847b3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZGY3MzZlYjIzYzJkOTRhOGM2NWE4M2E4MzIwMTU5MGU4NDdiM2Y=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-06-08T12:37:12Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-06-08T12:37:12Z"}, "message": "Swap `into_definition` and `definition` semantics for `FieldShorthand` variant", "tree": {"sha": "bdeaebc8fa59a78e00e9abac550a9304cb65bc55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdeaebc8fa59a78e00e9abac550a9304cb65bc55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4edf736eb23c2d94a8c65a83a83201590e847b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4edf736eb23c2d94a8c65a83a83201590e847b3f", "html_url": "https://github.com/rust-lang/rust/commit/4edf736eb23c2d94a8c65a83a83201590e847b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4edf736eb23c2d94a8c65a83a83201590e847b3f/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d5d2185816d90ad1420fe544d93150cb9c9a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d5d2185816d90ad1420fe544d93150cb9c9a48", "html_url": "https://github.com/rust-lang/rust/commit/c5d5d2185816d90ad1420fe544d93150cb9c9a48"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "1826f3ac65179554e6116c0ac1b2e6b024f484f4", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4edf736eb23c2d94a8c65a83a83201590e847b3f/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edf736eb23c2d94a8c65a83a83201590e847b3f/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=4edf736eb23c2d94a8c65a83a83201590e847b3f", "patch": "@@ -93,14 +93,14 @@ impl NameClass {\n         match self {\n             NameClass::Definition(it) => Some(it),\n             NameClass::ConstReference(_) => None,\n-            NameClass::FieldShorthand { local: _, field } => Some(field),\n+            NameClass::FieldShorthand { local, field: _ } => Some(Definition::Local(local)),\n         }\n     }\n \n     pub fn definition(self) -> Definition {\n         match self {\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-            NameClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n+            NameClass::FieldShorthand { local: _, field } => field,\n         }\n     }\n }"}]}