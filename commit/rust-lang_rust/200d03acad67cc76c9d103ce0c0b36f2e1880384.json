{"sha": "200d03acad67cc76c9d103ce0c0b36f2e1880384", "node_id": "C_kwDOAAsO6NoAKDIwMGQwM2FjYWQ2N2NjNzZjOWQxMDNjZTBjMGIzNmYyZTE4ODAzODQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-06-05T15:02:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-05T15:02:51Z"}, "message": "Rollup merge of #112263 - GrishaVar:remove-extend-element, r=scottmcm\n\nRemove ExtendElement, ExtendWith, extend_with\n\nRelated to  #104624, broken up into two commits. The first removes wrapper trait ExtendWith and its only implementer struct ExtendElement. The second may have perf issues so may be reverted/removed if no alternate fix is found; it should be profiled.\n\nr? `@scottmcm`", "tree": {"sha": "aac22aa83789f93a160e4b13ae8f19b508f4ab67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac22aa83789f93a160e4b13ae8f19b508f4ab67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200d03acad67cc76c9d103ce0c0b36f2e1880384", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkffkbCRBK7hj4Ov3rIwAAbwIIAIXUFYHJi8WbsSlmAjBJsX/d\nwPG6enjRwrK1BheUSldmqUzDpk3ac2GI4SA2+0ajzkosExGEAIaTB4Org8OIpZww\nFJmkWVP3upd1daNq1Wtx09aPV/AanoQvShkuiYiWx8lbbZzwBFrc9o7bvpnABkhz\njZCe31LYj1sXXrbQq4J9Cn2t8bAL4ZjXErSPNQkZcmUG1FmnpAZIIO1T9OvSJx+t\nsuBhLmMNlRT4FYfsHxsOtPnmVENfrFhZmdSkPjrdBDx52g3fpTt/kc96eiBXsEeh\nO8ThCNR766Ge6meBmjAAdgPvvKHspCpaCMj34UceP7LmH7RyZSrXjAj32p69FMg=\n=MA9i\n-----END PGP SIGNATURE-----\n", "payload": "tree aac22aa83789f93a160e4b13ae8f19b508f4ab67\nparent aabffef06d80ab2ff877e794f4d237148af1dc11\nparent dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1685977371 +0200\ncommitter GitHub <noreply@github.com> 1685977371 +0200\n\nRollup merge of #112263 - GrishaVar:remove-extend-element, r=scottmcm\n\nRemove ExtendElement, ExtendWith, extend_with\n\nRelated to  #104624, broken up into two commits. The first removes wrapper trait ExtendWith and its only implementer struct ExtendElement. The second may have perf issues so may be reverted/removed if no alternate fix is found; it should be profiled.\n\nr? `@scottmcm`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200d03acad67cc76c9d103ce0c0b36f2e1880384", "html_url": "https://github.com/rust-lang/rust/commit/200d03acad67cc76c9d103ce0c0b36f2e1880384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200d03acad67cc76c9d103ce0c0b36f2e1880384/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aabffef06d80ab2ff877e794f4d237148af1dc11", "url": "https://api.github.com/repos/rust-lang/rust/commits/aabffef06d80ab2ff877e794f4d237148af1dc11", "html_url": "https://github.com/rust-lang/rust/commit/aabffef06d80ab2ff877e794f4d237148af1dc11"}, {"sha": "dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "html_url": "https://github.com/rust-lang/rust/commit/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "d89cdff8e366cc0f8b32185348f67e58ea786e8b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/200d03acad67cc76c9d103ce0c0b36f2e1880384/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200d03acad67cc76c9d103ce0c0b36f2e1880384/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=200d03acad67cc76c9d103ce0c0b36f2e1880384", "patch": "@@ -2355,7 +2355,7 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n         let len = self.len();\n \n         if new_len > len {\n-            self.extend_with(new_len - len, ExtendElement(value))\n+            self.extend_with(new_len - len, value)\n         } else {\n             self.truncate(new_len);\n         }\n@@ -2469,26 +2469,10 @@ impl<T, A: Allocator, const N: usize> Vec<[T; N], A> {\n     }\n }\n \n-// This code generalizes `extend_with_{element,default}`.\n-trait ExtendWith<T> {\n-    fn next(&mut self) -> T;\n-    fn last(self) -> T;\n-}\n-\n-struct ExtendElement<T>(T);\n-impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n-    fn next(&mut self) -> T {\n-        self.0.clone()\n-    }\n-    fn last(self) -> T {\n-        self.0\n-    }\n-}\n-\n-impl<T, A: Allocator> Vec<T, A> {\n+impl<T: Clone, A: Allocator> Vec<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n-    /// Extend the vector by `n` values, using the given generator.\n-    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {\n+    /// Extend the vector by `n` clones of value.\n+    fn extend_with(&mut self, n: usize, value: T) {\n         self.reserve(n);\n \n         unsafe {\n@@ -2500,15 +2484,15 @@ impl<T, A: Allocator> Vec<T, A> {\n \n             // Write all elements except the last one\n             for _ in 1..n {\n-                ptr::write(ptr, value.next());\n+                ptr::write(ptr, value.clone());\n                 ptr = ptr.add(1);\n-                // Increment the length in every step in case next() panics\n+                // Increment the length in every step in case clone() panics\n                 local_len.increment_len(1);\n             }\n \n             if n > 0 {\n                 // We can write the last element directly without cloning needlessly\n-                ptr::write(ptr, value.last());\n+                ptr::write(ptr, value);\n                 local_len.increment_len(1);\n             }\n "}, {"sha": "da43d17bf36243086e631ba1bca2f7dd0c040bf0", "filename": "library/alloc/src/vec/spec_from_elem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200d03acad67cc76c9d103ce0c0b36f2e1880384/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200d03acad67cc76c9d103ce0c0b36f2e1880384/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs?ref=200d03acad67cc76c9d103ce0c0b36f2e1880384", "patch": "@@ -3,7 +3,7 @@ use core::ptr;\n use crate::alloc::Allocator;\n use crate::raw_vec::RawVec;\n \n-use super::{ExtendElement, IsZero, Vec};\n+use super::{IsZero, Vec};\n \n // Specialization trait used for Vec::from_elem\n pub(super) trait SpecFromElem: Sized {\n@@ -13,7 +13,7 @@ pub(super) trait SpecFromElem: Sized {\n impl<T: Clone> SpecFromElem for T {\n     default fn from_elem<A: Allocator>(elem: Self, n: usize, alloc: A) -> Vec<Self, A> {\n         let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n+        v.extend_with(n, elem);\n         v\n     }\n }\n@@ -25,7 +25,7 @@ impl<T: Clone + IsZero> SpecFromElem for T {\n             return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n         }\n         let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n+        v.extend_with(n, elem);\n         v\n     }\n }"}]}