{"sha": "6d6c360ca9a60ea76460053a33bb6070315e9fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNmMzNjBjYTlhNjBlYTc2NDYwMDUzYTMzYmI2MDcwMzE1ZTlmZWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-13T19:36:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-13T19:36:59Z"}, "message": "Audit integer type usage in `core::option`", "tree": {"sha": "cbf357ac9862f75a1e9e0fbaa37e0f97f6d4d3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbf357ac9862f75a1e9e0fbaa37e0f97f6d4d3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6c360ca9a60ea76460053a33bb6070315e9fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c360ca9a60ea76460053a33bb6070315e9fee", "html_url": "https://github.com/rust-lang/rust/commit/6d6c360ca9a60ea76460053a33bb6070315e9fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c360ca9a60ea76460053a33bb6070315e9fee/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84cb71b2530d7942cfec1baf4c884c7518ecff05", "url": "https://api.github.com/repos/rust-lang/rust/commits/84cb71b2530d7942cfec1baf4c884c7518ecff05", "html_url": "https://github.com/rust-lang/rust/commit/84cb71b2530d7942cfec1baf4c884c7518ecff05"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "bd70216d90318939edb1734dc99c1f79727abb95", "filename": "src/libcore/option.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c360ca9a60ea76460053a33bb6070315e9fee/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c360ca9a60ea76460053a33bb6070315e9fee/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6d6c360ca9a60ea76460053a33bb6070315e9fee", "patch": "@@ -60,19 +60,19 @@\n //! the optional owned box, `Option<Box<T>>`.\n //!\n //! The following example uses `Option` to create an optional box of\n-//! `int`. Notice that in order to use the inner `int` value first the\n+//! `i32`. Notice that in order to use the inner `i32` value first the\n //! `check_optional` function needs to use pattern matching to\n //! determine whether the box has a value (i.e. it is `Some(...)`) or\n //! not (`None`).\n //!\n //! ```\n-//! let optional: Option<Box<int>> = None;\n+//! let optional: Option<Box<i32>> = None;\n //! check_optional(&optional);\n //!\n-//! let optional: Option<Box<int>> = Some(Box::new(9000));\n+//! let optional: Option<Box<i32>> = Some(Box::new(9000));\n //! check_optional(&optional);\n //!\n-//! fn check_optional(optional: &Option<Box<int>>) {\n+//! fn check_optional(optional: &Option<Box<i32>>) {\n //!     match *optional {\n //!         Some(ref p) => println!(\"have value {}\", p),\n //!         None => println!(\"have no value\")\n@@ -108,7 +108,7 @@\n //! Initialize a result to `None` before a loop:\n //!\n //! ```\n-//! enum Kingdom { Plant(uint, &'static str), Animal(uint, &'static str) }\n+//! enum Kingdom { Plant(usize, &'static str), Animal(usize, &'static str) }\n //!\n //! // A list of data to search through.\n //! let all_the_big_things = [\n@@ -188,10 +188,10 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Option<uint> = Some(2);\n+    /// let x: Option<usize> = Some(2);\n     /// assert_eq!(x.is_some(), true);\n     ///\n-    /// let x: Option<uint> = None;\n+    /// let x: Option<usize> = None;\n     /// assert_eq!(x.is_some(), false);\n     /// ```\n     #[inline]\n@@ -208,10 +208,10 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// let x: Option<uint> = Some(2);\n+    /// let x: Option<usize> = Some(2);\n     /// assert_eq!(x.is_none(), false);\n     ///\n-    /// let x: Option<uint> = None;\n+    /// let x: Option<usize> = None;\n     /// assert_eq!(x.is_none(), true);\n     /// ```\n     #[inline]\n@@ -228,7 +228,7 @@ impl<T> Option<T> {\n     ///\n     /// # Example\n     ///\n-    /// Convert an `Option<String>` into an `Option<int>`, preserving the original.\n+    /// Convert an `Option<String>` into an `Option<usize>`, preserving the original.\n     /// The `map` method takes the `self` argument by value, consuming the original,\n     /// so this technique uses `as_ref` to first take an `Option` to a reference\n     /// to the value inside the original.\n@@ -237,7 +237,7 @@ impl<T> Option<T> {\n     /// let num_as_str: Option<String> = Some(\"10\".to_string());\n     /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,\n     /// // then consume *that* with `map`, leaving `num_as_str` on the stack.\n-    /// let num_as_int: Option<uint> = num_as_str.as_ref().map(|n| n.len());\n+    /// let num_as_int: Option<usize> = num_as_str.as_ref().map(|n| n.len());\n     /// println!(\"still can print num_as_str: {:?}\", num_as_str);\n     /// ```\n     #[inline]\n@@ -406,12 +406,12 @@ impl<T> Option<T> {\n     ///\n     /// # Example\n     ///\n-    /// Convert an `Option<String>` into an `Option<uint>`, consuming the original:\n+    /// Convert an `Option<String>` into an `Option<usize>`, consuming the original:\n     ///\n     /// ```\n     /// let num_as_str: Option<String> = Some(\"10\".to_string());\n     /// // `Option::map` takes self *by value*, consuming `num_as_str`\n-    /// let num_as_int: Option<uint> = num_as_str.map(|n| n.len());\n+    /// let num_as_int: Option<usize> = num_as_str.map(|n| n.len());\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -518,7 +518,7 @@ impl<T> Option<T> {\n     /// let x = Some(4);\n     /// assert_eq!(x.iter().next(), Some(&4));\n     ///\n-    /// let x: Option<uint> = None;\n+    /// let x: Option<usize> = None;\n     /// assert_eq!(x.iter().next(), None);\n     /// ```\n     #[inline]\n@@ -539,7 +539,7 @@ impl<T> Option<T> {\n     /// }\n     /// assert_eq!(x, Some(42));\n     ///\n-    /// let mut x: Option<uint> = None;\n+    /// let mut x: Option<usize> = None;\n     /// assert_eq!(x.iter_mut().next(), None);\n     /// ```\n     #[inline]\n@@ -581,15 +581,15 @@ impl<T> Option<T> {\n     /// let y: Option<&str> = None;\n     /// assert_eq!(x.and(y), None);\n     ///\n-    /// let x: Option<uint> = None;\n+    /// let x: Option<usize> = None;\n     /// let y = Some(\"foo\");\n     /// assert_eq!(x.and(y), None);\n     ///\n     /// let x = Some(2);\n     /// let y = Some(\"foo\");\n     /// assert_eq!(x.and(y), Some(\"foo\"));\n     ///\n-    /// let x: Option<uint> = None;\n+    /// let x: Option<usize> = None;\n     /// let y: Option<&str> = None;\n     /// assert_eq!(x.and(y), None);\n     /// ```\n@@ -608,8 +608,8 @@ impl<T> Option<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// fn sq(x: uint) -> Option<uint> { Some(x * x) }\n-    /// fn nope(_: uint) -> Option<uint> { None }\n+    /// fn sq(x: usize) -> Option<usize> { Some(x * x) }\n+    /// fn nope(_: usize) -> Option<usize> { None }\n     ///\n     /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));\n     /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);\n@@ -642,7 +642,7 @@ impl<T> Option<T> {\n     /// let y = Some(100);\n     /// assert_eq!(x.or(y), Some(2));\n     ///\n-    /// let x: Option<uint> = None;\n+    /// let x: Option<usize> = None;\n     /// let y = None;\n     /// assert_eq!(x.or(y), None);\n     /// ```\n@@ -690,7 +690,7 @@ impl<T> Option<T> {\n     /// x.take();\n     /// assert_eq!(x, None);\n     ///\n-    /// let mut x: Option<uint> = None;\n+    /// let mut x: Option<usize> = None;\n     /// x.take();\n     /// assert_eq!(x, None);\n     /// ```\n@@ -789,7 +789,7 @@ impl<A> Iterator for Item<A> {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n         match self.opt {\n             Some(_) => (1, Some(1)),\n             None => (0, Some(0)),\n@@ -817,7 +817,7 @@ impl<'a, A> Iterator for Iter<'a, A> {\n     #[inline]\n     fn next(&mut self) -> Option<&'a A> { self.inner.next() }\n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -847,7 +847,7 @@ impl<'a, A> Iterator for IterMut<'a, A> {\n     #[inline]\n     fn next(&mut self) -> Option<&'a mut A> { self.inner.next() }\n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -870,7 +870,7 @@ impl<A> Iterator for IntoIter<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.inner.next() }\n     #[inline]\n-    fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -896,11 +896,11 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// checking for overflow:\n     ///\n     /// ```rust\n-    /// use std::uint;\n+    /// use std::u16;\n     ///\n     /// let v = vec!(1, 2);\n-    /// let res: Option<Vec<uint>> = v.iter().map(|&x: &uint|\n-    ///     if x == uint::MAX { None }\n+    /// let res: Option<Vec<u16>> = v.iter().map(|&x: &u16|\n+    ///     if x == u16::MAX { None }\n     ///     else { Some(x + 1) }\n     /// ).collect();\n     /// assert!(res == Some(vec!(2, 3)));"}]}