{"sha": "68e1141c45c71c56cc4904b72f2212701b5912d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZTExNDFjNDVjNzFjNTZjYzQ5MDRiNzJmMjIxMjcwMWI1OTEyZDQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-17T09:29:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-18T07:48:56Z"}, "message": "resolve: Avoid creating fresh syntax extensions for all non-macro attributes", "tree": {"sha": "d14788875d98763e9402085103c52bdad065f299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14788875d98763e9402085103c52bdad065f299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68e1141c45c71c56cc4904b72f2212701b5912d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68e1141c45c71c56cc4904b72f2212701b5912d4", "html_url": "https://github.com/rust-lang/rust/commit/68e1141c45c71c56cc4904b72f2212701b5912d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68e1141c45c71c56cc4904b72f2212701b5912d4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "085a8d03750b524a34bf14adc0c9a36a2503e016", "url": "https://api.github.com/repos/rust-lang/rust/commits/085a8d03750b524a34bf14adc0c9a36a2503e016", "html_url": "https://github.com/rust-lang/rust/commit/085a8d03750b524a34bf14adc0c9a36a2503e016"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "60ffb0782f005504231296f4c734896620179585", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68e1141c45c71c56cc4904b72f2212701b5912d4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e1141c45c71c56cc4904b72f2212701b5912d4/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=68e1141c45c71c56cc4904b72f2212701b5912d4", "patch": "@@ -29,7 +29,7 @@ use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind, Variant};\n-use syntax::ext::base::{MacroKind, SyntaxExtension, SyntaxExtensionKind};\n+use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n@@ -772,12 +772,8 @@ impl<'a> Resolver<'a> {\n     pub fn get_macro(&mut self, res: Res) -> Lrc<SyntaxExtension> {\n         let def_id = match res {\n             Res::Def(DefKind::Macro(..), def_id) => def_id,\n-            Res::NonMacroAttr(attr_kind) => return Lrc::new(SyntaxExtension::default(\n-                SyntaxExtensionKind::NonMacroAttr {\n-                    mark_used: attr_kind == NonMacroAttrKind::Tool\n-                },\n-                self.session.edition(),\n-            )),\n+            Res::NonMacroAttr(attr_kind) =>\n+                return self.non_macro_attr(attr_kind == NonMacroAttrKind::Tool),\n             _ => panic!(\"expected `DefKind::Macro` or `Res::NonMacroAttr`\"),\n         };\n         if let Some(ext) = self.macro_map.get(&def_id) {"}, {"sha": "dcc2a228b4a770d38c724d624f74639be4980f03", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68e1141c45c71c56cc4904b72f2212701b5912d4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e1141c45c71c56cc4904b72f2212701b5912d4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=68e1141c45c71c56cc4904b72f2212701b5912d4", "patch": "@@ -41,7 +41,7 @@ use rustc_metadata::cstore::CStore;\n use syntax::source_map::SourceMap;\n use syntax::ext::hygiene::{Mark, Transparency, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n-use syntax::ext::base::SyntaxExtension;\n+use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::base::MacroKind;\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1668,6 +1668,7 @@ pub struct Resolver<'a> {\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n     pub all_macros: FxHashMap<Name, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n+    non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n \n@@ -1941,6 +1942,10 @@ impl<'a> Resolver<'a> {\n         let mut macro_defs = FxHashMap::default();\n         macro_defs.insert(Mark::root(), root_def_id);\n \n+        let non_macro_attr = |mark_used| Lrc::new(SyntaxExtension::default(\n+            SyntaxExtensionKind::NonMacroAttr { mark_used }, session.edition()\n+        ));\n+\n         Resolver {\n             session,\n \n@@ -2014,6 +2019,7 @@ impl<'a> Resolver<'a> {\n             macro_use_prelude: FxHashMap::default(),\n             all_macros: FxHashMap::default(),\n             macro_map: FxHashMap::default(),\n+            non_macro_attrs: [non_macro_attr(false), non_macro_attr(true)],\n             invocations,\n             macro_defs,\n             local_macro_def_scopes: FxHashMap::default(),\n@@ -2030,6 +2036,10 @@ impl<'a> Resolver<'a> {\n         Default::default()\n     }\n \n+    fn non_macro_attr(&self, mark_used: bool) -> Lrc<SyntaxExtension> {\n+        self.non_macro_attrs[mark_used as usize].clone()\n+    }\n+\n     /// Runs the function on each namespace.\n     fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {\n         f(self, TypeNS);"}, {"sha": "02342d212ebbdcd6c536597be70a689dfbf66f0b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68e1141c45c71c56cc4904b72f2212701b5912d4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e1141c45c71c56cc4904b72f2212701b5912d4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=68e1141c45c71c56cc4904b72f2212701b5912d4", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n-use syntax::ext::base::{MacroKind, SyntaxExtension, SyntaxExtensionKind};\n+use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n@@ -211,8 +211,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             Ok((res, ext)) => (res, ext),\n             Err(Determinacy::Determined) if kind == MacroKind::Attr => {\n                 // Replace unresolved attributes with used inert attributes for better recovery.\n-                let kind = SyntaxExtensionKind::NonMacroAttr { mark_used: true };\n-                return Ok(Some(Lrc::new(SyntaxExtension::default(kind, self.session.edition()))));\n+                return Ok(Some(self.non_macro_attr(true)));\n             }\n             Err(determinacy) => return Err(determinacy),\n         };"}]}