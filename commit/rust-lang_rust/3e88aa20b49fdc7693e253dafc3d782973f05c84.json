{"sha": "3e88aa20b49fdc7693e253dafc3d782973f05c84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlODhhYTIwYjQ5ZmRjNzY5M2UyNTNkYWZjM2Q3ODI5NzNmMDVjODQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-26T23:25:27Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-30T18:21:16Z"}, "message": "Allow `ResultsCursor` to borrow the underlying `Results`", "tree": {"sha": "74a67cf77dcfa6d40ed9566e5cf0f27c02e88705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a67cf77dcfa6d40ed9566e5cf0f27c02e88705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e88aa20b49fdc7693e253dafc3d782973f05c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e88aa20b49fdc7693e253dafc3d782973f05c84", "html_url": "https://github.com/rust-lang/rust/commit/3e88aa20b49fdc7693e253dafc3d782973f05c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e88aa20b49fdc7693e253dafc3d782973f05c84/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33d94d88f800ef00a13747a3ee9dda77f6f42d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33d94d88f800ef00a13747a3ee9dda77f6f42d1", "html_url": "https://github.com/rust-lang/rust/commit/f33d94d88f800ef00a13747a3ee9dda77f6f42d1"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "400f612a0fc9f3d4be4af73e142cbf348af4b8c1", "filename": "src/librustc_mir/dataflow/generic.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3e88aa20b49fdc7693e253dafc3d782973f05c84/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e88aa20b49fdc7693e253dafc3d782973f05c84/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric.rs?ref=3e88aa20b49fdc7693e253dafc3d782973f05c84", "patch": "@@ -180,17 +180,20 @@ impl CursorPosition {\n     }\n }\n \n+type ResultsRefCursor<'a, 'mir, 'tcx, A> =\n+    ResultsCursor<'mir, 'tcx, A, &'a Results<'tcx, A>>;\n+\n /// Inspect the results of dataflow analysis.\n ///\n /// This cursor has linear performance when visiting statements in a block in order. Visiting\n /// statements within a block in reverse order is `O(n^2)`, where `n` is the number of statements\n /// in that block.\n-pub struct ResultsCursor<'mir, 'tcx, A>\n+pub struct ResultsCursor<'mir, 'tcx, A, R = Results<'tcx, A>>\n where\n     A: Analysis<'tcx>,\n {\n     body: &'mir mir::Body<'tcx>,\n-    results: Results<'tcx, A>,\n+    results: R,\n     state: BitSet<A::Idx>,\n \n     pos: CursorPosition,\n@@ -202,24 +205,29 @@ where\n     is_call_return_effect_applied: bool,\n }\n \n-impl<'mir, 'tcx, A> ResultsCursor<'mir, 'tcx, A>\n+impl<'mir, 'tcx, A, R> ResultsCursor<'mir, 'tcx, A, R>\n where\n     A: Analysis<'tcx>,\n+    R: Borrow<Results<'tcx, A>>,\n {\n     /// Returns a new cursor for `results` that points to the start of the `START_BLOCK`.\n-    pub fn new(body: &'mir mir::Body<'tcx>, results: Results<'tcx, A>) -> Self {\n+    pub fn new(body: &'mir mir::Body<'tcx>, results: R) -> Self {\n         ResultsCursor {\n             body,\n             pos: CursorPosition::AtBlockStart(mir::START_BLOCK),\n             is_call_return_effect_applied: false,\n-            state: results.entry_sets[mir::START_BLOCK].clone(),\n+            state: results.borrow().entry_sets[mir::START_BLOCK].clone(),\n             results,\n         }\n     }\n \n+    pub fn analysis(&self) -> &A {\n+        &self.results.borrow().analysis\n+    }\n+\n     /// Resets the cursor to the start of the given `block`.\n     pub fn seek_to_block_start(&mut self, block: BasicBlock) {\n-        self.state.overwrite(&self.results.entry_sets[block]);\n+        self.state.overwrite(&self.results.borrow().entry_sets[block]);\n         self.pos = CursorPosition::AtBlockStart(block);\n         self.is_call_return_effect_applied = false;\n     }\n@@ -275,7 +283,7 @@ where\n         } = &term.kind {\n             if !self.is_call_return_effect_applied {\n                 self.is_call_return_effect_applied = true;\n-                self.results.analysis.apply_call_return_effect(\n+                self.results.borrow().analysis.apply_call_return_effect(\n                     &mut self.state,\n                     target.block,\n                     func,\n@@ -316,7 +324,7 @@ where\n         };\n \n         let block_data = &self.body.basic_blocks()[target_block];\n-        self.results.analysis.apply_partial_block_effect(\n+        self.results.borrow().analysis.apply_partial_block_effect(\n             &mut self.state,\n             target_block,\n             block_data,"}]}