{"sha": "51d0d0641000d642b257beb2fe53f5174a7879d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDBkMDY0MTAwMGQ2NDJiMjU3YmViMmZlNTNmNTE3NGE3ODc5ZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-29T15:41:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-29T15:41:20Z"}, "message": "auto merge of #16767 : SiegeLord/rust/reexported_methods, r=cmr\n\nPreviously, this caused methods of re-exported types to not be inserted into\r\nthe search index. This fix may introduce some false positives, but in my\r\ntesting they appear as orphaned methods and end up not being inserted into the\r\nfinal search index at a later stage.\r\n\r\nFixes issue #11943", "tree": {"sha": "859c865fa76d1a0f0c28dd093a80cad67d15d841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859c865fa76d1a0f0c28dd093a80cad67d15d841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d0d0641000d642b257beb2fe53f5174a7879d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d0d0641000d642b257beb2fe53f5174a7879d5", "html_url": "https://github.com/rust-lang/rust/commit/51d0d0641000d642b257beb2fe53f5174a7879d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d0d0641000d642b257beb2fe53f5174a7879d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "602592675ce86aeca465c4ac748cee2bff291443", "url": "https://api.github.com/repos/rust-lang/rust/commits/602592675ce86aeca465c4ac748cee2bff291443", "html_url": "https://github.com/rust-lang/rust/commit/602592675ce86aeca465c4ac748cee2bff291443"}, {"sha": "0db6f4cb57e6209dcd6e6d66732c190b652f6485", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db6f4cb57e6209dcd6e6d66732c190b652f6485", "html_url": "https://github.com/rust-lang/rust/commit/0db6f4cb57e6209dcd6e6d66732c190b652f6485"}], "stats": {"total": 97, "additions": 89, "deletions": 8}, "files": [{"sha": "fc8fd0d086bc048dce7e09bad398df158f52286a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=51d0d0641000d642b257beb2fe53f5174a7879d5", "patch": "@@ -819,16 +819,17 @@ impl DocFolder for Cache {\n         // Index this method for searching later on\n         match item.name {\n             Some(ref s) => {\n-                let parent = match item.inner {\n+                let (parent, is_method) = match item.inner {\n                     clean::TyMethodItem(..) |\n                     clean::StructFieldItem(..) |\n                     clean::VariantItem(..) => {\n-                        (Some(*self.parent_stack.last().unwrap()),\n-                         Some(self.stack.slice_to(self.stack.len() - 1)))\n+                        ((Some(*self.parent_stack.last().unwrap()),\n+                          Some(self.stack.slice_to(self.stack.len() - 1))),\n+                          false)\n                     }\n                     clean::MethodItem(..) => {\n                         if self.parent_stack.len() == 0 {\n-                            (None, None)\n+                            ((None, None), false)\n                         } else {\n                             let last = self.parent_stack.last().unwrap();\n                             let did = *last;\n@@ -844,17 +845,18 @@ impl DocFolder for Cache {\n                                 Some(..) => Some(self.stack.as_slice()),\n                                 None => None\n                             };\n-                            (Some(*last), path)\n+                            ((Some(*last), path), true)\n                         }\n                     }\n-                    _ => (None, Some(self.stack.as_slice()))\n+                    _ => ((None, Some(self.stack.as_slice())), false)\n                 };\n                 let hidden_field = match item.inner {\n                     clean::StructFieldItem(clean::HiddenStructField) => true,\n                     _ => false\n                 };\n+\n                 match parent {\n-                    (parent, Some(path)) if !self.privmod && !hidden_field => {\n+                    (parent, Some(path)) if is_method || (!self.privmod && !hidden_field) => {\n                         self.search_index.push(IndexItem {\n                             ty: shortty(&item),\n                             name: s.to_string(),\n@@ -863,7 +865,7 @@ impl DocFolder for Cache {\n                             parent: parent,\n                         });\n                     }\n-                    (Some(parent), None) if !self.privmod => {\n+                    (Some(parent), None) if is_method || (!self.privmod && !hidden_field)=> {\n                         if ast_util::is_local(parent) {\n                             // We have a parent, but we don't know where they're\n                             // defined yet. Wait for later to index this item."}, {"sha": "1248f144a849343da6ae090dafa824fc301b57ac", "filename": "src/test/run-make/rustdoc-search-index/Makefile", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Ftest%2Frun-make%2Frustdoc-search-index%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Ftest%2Frun-make%2Frustdoc-search-index%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-search-index%2FMakefile?ref=51d0d0641000d642b257beb2fe53f5174a7879d5", "patch": "@@ -0,0 +1,17 @@\n+-include ../tools.mk\n+\n+# FIXME ignore windows\n+ifndef IS_WINDOWS\n+\n+source=index.rs\n+\n+all:\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc $(source)\n+\tcp $(source) $(TMPDIR)\n+\tcp verify.sh $(TMPDIR)\n+\t$(call RUN,verify.sh) $(TMPDIR)\n+\n+else\n+all:\n+\n+endif"}, {"sha": "019d77f1b1cbdd278d61b752aac8048890f31dbe", "filename": "src/test/run-make/rustdoc-search-index/index.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Findex.rs?ref=51d0d0641000d642b257beb2fe53f5174a7879d5", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"rustdoc_test\"]\n+\n+// In: Foo\n+pub use private::Foo;\n+\n+mod private {\n+    pub struct Foo;\n+    impl Foo {\n+        // In: test_method\n+        pub fn test_method() {}\n+        // Out: priv_method\n+        fn priv_method() {}\n+    }\n+\n+    pub trait PrivateTrait {\n+        // Out: priv_method\n+        fn trait_method() {}\n+    }\n+}"}, {"sha": "af5033adf6bcd6fc8feffa91fa0afcd6630540e8", "filename": "src/test/run-make/rustdoc-search-index/verify.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Fverify.sh", "raw_url": "https://github.com/rust-lang/rust/raw/51d0d0641000d642b257beb2fe53f5174a7879d5/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Fverify.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Fverify.sh?ref=51d0d0641000d642b257beb2fe53f5174a7879d5", "patch": "@@ -0,0 +1,33 @@\n+#!/bin/sh\n+\n+source=\"$1/index.rs\"\n+index=\"$1/doc/search-index.js\"\n+\n+if ! [ -e $index ]\n+then\n+    echo \"Could not find the search index (looked for $index)\"\n+    exit 1\n+fi\n+\n+ins=$(grep -o 'In: .*' $source | sed 's/In: \\(.*\\)/\\1/g')\n+outs=$(grep -o 'Out: .*' $source | sed 's/Out: \\(.*\\)/\\1/g')\n+\n+for p in $ins\n+do\n+    if ! grep -q $p $index\n+    then\n+        echo \"'$p' was erroneously excluded from search index.\"\n+        exit 1\n+    fi\n+done\n+\n+for p in $outs\n+do\n+    if grep -q $p $index\n+    then\n+        echo \"'$p' was erroneously included in search index.\"\n+        exit 1\n+    fi\n+done\n+\n+exit 0"}]}