{"sha": "ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "node_id": "C_kwDOAAsO6NoAKGVkMDU3M2ZiMmE1YzIxNzBhNWEyNjRkZDAzM2U2ZmY1ZGRkYzI3N2Y", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-16T08:34:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-16T08:34:36Z"}, "message": "Merge from rustc", "tree": {"sha": "5cc400b7671a8915c20e7a3474ef6b145069e4ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc400b7671a8915c20e7a3474ef6b145069e4ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "html_url": "https://github.com/rust-lang/rust/commit/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033191268167398031b8f10b137adcea4b15d53c", "url": "https://api.github.com/repos/rust-lang/rust/commits/033191268167398031b8f10b137adcea4b15d53c", "html_url": "https://github.com/rust-lang/rust/commit/033191268167398031b8f10b137adcea4b15d53c"}, {"sha": "3ea9ad532474343426e564b997891e459cda89a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea9ad532474343426e564b997891e459cda89a6", "html_url": "https://github.com/rust-lang/rust/commit/3ea9ad532474343426e564b997891e459cda89a6"}], "stats": {"total": 10339, "additions": 7679, "deletions": 2660}, "files": [{"sha": "be95e63eb7698b04e4d24580ea1437122cdc7820", "filename": "Cargo.lock", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -854,7 +854,7 @@ dependencies = [\n  \"autocfg\",\n  \"cfg-if\",\n  \"crossbeam-utils\",\n- \"memoffset\",\n+ \"memoffset 0.7.1\",\n  \"scopeguard\",\n ]\n \n@@ -1241,6 +1241,16 @@ dependencies = [\n  \"instant\",\n ]\n \n+[[package]]\n+name = \"field-offset\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a3cf3a800ff6e860c863ca6d4b16fd999db8b752819c1606884047b73e468535\"\n+dependencies = [\n+ \"memoffset 0.8.0\",\n+ \"rustc_version\",\n+]\n+\n [[package]]\n name = \"filetime\"\n version = \"0.2.20\"\n@@ -2188,6 +2198,15 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"memoffset\"\n+version = \"0.6.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n [[package]]\n name = \"memoffset\"\n version = \"0.7.1\"\n@@ -2197,6 +2216,15 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"memoffset\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n [[package]]\n name = \"mime\"\n version = \"0.3.16\"\n@@ -3306,6 +3334,7 @@ dependencies = [\n  \"rustc-hash\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n+ \"rustc_arena\",\n  \"rustc_graphviz\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -3781,6 +3810,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"derive_more\",\n  \"either\",\n+ \"field-offset\",\n  \"gsgdt\",\n  \"measureme\",\n  \"polonius-engine\",\n@@ -3995,7 +4025,9 @@ dependencies = [\n name = \"rustc_query_impl\"\n version = \"0.0.0\"\n dependencies = [\n+ \"field-offset\",\n  \"measureme\",\n+ \"memoffset 0.6.5\",\n  \"rustc-rayon-core\",\n  \"rustc_ast\",\n  \"rustc_data_structures\","}, {"sha": "db296aa44db2b6edc65f820c55f62132c7bad6c7", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -48,14 +48,15 @@ pub enum TokenTree {\n     Delimited(DelimSpan, Delimiter, TokenStream),\n }\n \n-// Ensure all fields of `TokenTree` is `Send` and `Sync`.\n+// Ensure all fields of `TokenTree` are `DynSend` and `DynSync`.\n #[cfg(parallel_compiler)]\n fn _dummy()\n where\n-    Token: Send + Sync,\n-    DelimSpan: Send + Sync,\n-    Delimiter: Send + Sync,\n-    TokenStream: Send + Sync,\n+    Token: sync::DynSend + sync::DynSync,\n+    Spacing: sync::DynSend + sync::DynSync,\n+    DelimSpan: sync::DynSend + sync::DynSync,\n+    Delimiter: sync::DynSend + sync::DynSync,\n+    TokenStream: sync::DynSend + sync::DynSync,\n {\n }\n \n@@ -118,7 +119,7 @@ where\n     }\n }\n \n-pub trait ToAttrTokenStream: sync::Send + sync::Sync {\n+pub trait ToAttrTokenStream: sync::DynSend + sync::DynSync {\n     fn to_attr_token_stream(&self) -> AttrTokenStream;\n }\n \n@@ -550,6 +551,10 @@ impl TokenStream {\n             vec_mut.extend(stream_iter);\n         }\n     }\n+\n+    pub fn chunks(&self, chunk_size: usize) -> core::slice::Chunks<'_, TokenTree> {\n+        self.0.chunks(chunk_size)\n+    }\n }\n \n /// By-reference iterator over a [`TokenStream`], that produces `&TokenTree`"}, {"sha": "eb25d454339b578e6577a488e2fb7984eecbef9a", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -35,7 +35,7 @@ use rustc_middle::mir::{\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::mir::{ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, CapturedPlace, ParamEnv, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::UNUSED_MUT;\n use rustc_span::{Span, Symbol};"}, {"sha": "8f64e3328619e054b0c24c2ee3966b9c6b12f43b", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -63,15 +63,16 @@ pub fn expand_env<'cx>(\n         Some(exprs) => exprs.into_iter(),\n     };\n \n-    let Some((var, _style)) = expr_to_string(cx, exprs.next().unwrap(), \"expected string literal\") else {\n+    let var_expr = exprs.next().unwrap();\n+    let Some((var, _)) = expr_to_string(cx, var_expr.clone(), \"expected string literal\") else {\n         return DummyResult::any(sp);\n     };\n \n     let custom_msg = match exprs.next() {\n         None => None,\n         Some(second) => match expr_to_string(cx, second, \"expected string literal\") {\n             None => return DummyResult::any(sp),\n-            Some((s, _style)) => Some(s),\n+            Some((s, _)) => Some(s),\n         },\n     };\n \n@@ -80,10 +81,15 @@ pub fn expand_env<'cx>(\n     cx.sess.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n     let e = match value {\n         None => {\n+            // Use the string literal in the code in the diagnostic to avoid confusing diagnostics,\n+            // e.g. when the literal contains escape sequences.\n+            let ast::ExprKind::Lit(ast::token::Lit { kind: ast::token::LitKind::Str, symbol: original_var, ..}) = &var_expr.kind else {\n+                unreachable!(\"`expr_to_string` ensures this is a string lit\")\n+            };\n             cx.emit_err(errors::EnvNotDefined {\n                 span: sp,\n                 msg: custom_msg,\n-                var,\n+                var: *original_var,\n                 help: custom_msg.is_none().then(|| help_for_missing_env_var(var.as_str())),\n             });\n             return DummyResult::any(sp);"}, {"sha": "442ce0ea542093c268926c4092fe4313f5619639", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -80,8 +80,8 @@ use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, Handler, SubdiagnosticMes\n use rustc_fluent_macro::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_middle::ty::query::Providers;\n use rustc_session::config::{Lto, OptLevel, OutputFilenames};\n use rustc_session::Session;\n use rustc_span::Symbol;"}, {"sha": "6a86237d79e0726c8b83f64b4e5aeb1c9fc3756c", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -37,7 +37,7 @@ use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, FatalError, Handler, Subd\n use rustc_fluent_macro::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;"}, {"sha": "994addf12eb24e2af69cdfe1895e58baadef39ac", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -155,12 +155,6 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n         (\"x86\", \"rdrand\") => smallvec![\"rdrnd\"],\n         (\"x86\", \"bmi1\") => smallvec![\"bmi\"],\n         (\"x86\", \"cmpxchg16b\") => smallvec![\"cx16\"],\n-        // FIXME: These aliases are misleading, and should be removed before avx512_target_feature is\n-        // stabilized. They must remain until std::arch switches off them.\n-        // rust#100752\n-        (\"x86\", \"avx512vaes\") => smallvec![\"vaes\"],\n-        (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n-        (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n         (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n         (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n         (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],"}, {"sha": "14460efc1b0514249d4476dda356a4d61eec2178", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n };\n use rustc_middle::query::LocalCrate;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, SymbolName, TyCtxt};"}, {"sha": "d9b0a1525946555680fe2feb4c3c9aea87a620b2", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -17,10 +17,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n-\n-use rustc_data_structures::sync::par_iter;\n-#[cfg(parallel_compiler)]\n-use rustc_data_structures::sync::ParallelIterator;\n+use rustc_data_structures::sync::par_map;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n@@ -30,8 +27,8 @@ use rustc_middle::middle::exported_symbols;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, CrateType, EntryFnType, OutputType};\n@@ -689,7 +686,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // This likely is a temporary measure. Once we don't have to support the\n     // non-parallel compiler anymore, we can compile CGUs end-to-end in\n     // parallel and get rid of the complicated scheduling logic.\n-    let mut pre_compiled_cgus = if cfg!(parallel_compiler) {\n+    let mut pre_compiled_cgus = if tcx.sess.threads() > 1 {\n         tcx.sess.time(\"compile_first_CGU_batch\", || {\n             // Try to find one CGU to compile per thread.\n             let cgus: Vec<_> = cgu_reuse\n@@ -702,12 +699,10 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             // Compile the found CGUs in parallel.\n             let start_time = Instant::now();\n \n-            let pre_compiled_cgus = par_iter(cgus)\n-                .map(|(i, _)| {\n-                    let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n-                    (i, module)\n-                })\n-                .collect();\n+            let pre_compiled_cgus = par_map(cgus, |(i, _)| {\n+                let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n+                (i, module)\n+            });\n \n             total_codegen_time += start_time.elapsed();\n "}, {"sha": "d6c230127626266eddcd3e4f63922423d2f2b118", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::{lang_items, weak_lang_items::WEAK_LANG_ITEMS, LangItem};\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self as ty, TyCtxt};\n use rustc_session::{lint, parse::feature_err};\n use rustc_span::symbol::Ident;"}, {"sha": "f4b9d1dea581cd8a71329dbadab93437ea70597e", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -30,7 +30,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_serialize::opaque::{FileEncoder, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};"}, {"sha": "bba2800fb0545bbb8c6d1f600b69cf0ea4d62a9a", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 101, "deletions": 49, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::{Abi, FieldIdx, Size, VariantIdx};\n+use rustc_target::abi::{Abi, FieldIdx, FieldsShape, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -41,6 +41,9 @@ pub struct PerLocalVarDebugInfo<'tcx, D> {\n \n     /// `.place.projection` from `mir::VarDebugInfo`.\n     pub projection: &'tcx ty::List<mir::PlaceElem<'tcx>>,\n+\n+    /// `references` from `mir::VarDebugInfo`.\n+    pub references: u8,\n }\n \n #[derive(Clone, Copy, Debug)]\n@@ -80,6 +83,7 @@ trait DebugInfoOffsetLocation<'tcx, Bx> {\n     fn deref(&self, bx: &mut Bx) -> Self;\n     fn layout(&self) -> TyAndLayout<'tcx>;\n     fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self;\n+    fn project_constant_index(&self, bx: &mut Bx, offset: u64) -> Self;\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n }\n \n@@ -98,6 +102,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         PlaceRef::project_field(*self, bx, field.index())\n     }\n \n+    fn project_constant_index(&self, bx: &mut Bx, offset: u64) -> Self {\n+        let lloffset = bx.cx().const_usize(offset);\n+        self.project_index(bx, lloffset)\n+    }\n+\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n         self.project_downcast(bx, variant)\n     }\n@@ -120,6 +129,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         self.field(bx.cx(), field.index())\n     }\n \n+    fn project_constant_index(&self, bx: &mut Bx, index: u64) -> Self {\n+        self.field(bx.cx(), index as usize)\n+    }\n+\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n         self.for_variant(bx.cx(), variant)\n     }\n@@ -165,6 +178,18 @@ fn calculate_debuginfo_offset<\n             mir::ProjectionElem::Downcast(_, variant) => {\n                 place = place.downcast(bx, variant);\n             }\n+            mir::ProjectionElem::ConstantIndex {\n+                offset: index,\n+                min_length: _,\n+                from_end: false,\n+            } => {\n+                let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n+                let FieldsShape::Array { stride, count: _ } = place.layout().fields else {\n+                    span_bug!(var.source_info.span, \"ConstantIndex on non-array type {:?}\", place.layout())\n+                };\n+                *offset += stride * index;\n+                place = place.project_constant_index(bx, index);\n+            }\n             _ => {\n                 // Sanity check for `can_use_in_debuginfo`.\n                 debug_assert!(!elem.can_use_in_debuginfo());\n@@ -293,6 +318,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     dbg_var,\n                     fragment: None,\n                     projection: ty::List::empty(),\n+                    references: 0,\n                 })\n             }\n         } else {\n@@ -358,55 +384,74 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let vars = vars.iter().cloned().chain(fallback_var);\n \n         for var in vars {\n-            let Some(dbg_var) = var.dbg_var else { continue };\n-            let Some(dbg_loc) = self.dbg_loc(var.source_info) else { continue };\n-\n-            let DebugInfoOffset { direct_offset, indirect_offsets, result: _ } =\n-                calculate_debuginfo_offset(bx, local, &var, base.layout);\n-\n-            // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n-            // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n-            // not DWARF and LLVM doesn't support translating the resulting\n-            // [DW_OP_deref, DW_OP_plus_uconst, offset, DW_OP_deref] debug info to CodeView.\n-            // Creating extra allocas on the stack makes the resulting debug info simple enough\n-            // that LLVM can generate correct CodeView records and thus the values appear in the\n-            // debugger. (#83709)\n-            let should_create_individual_allocas = bx.cx().sess().target.is_like_msvc\n-                && self.mir.local_kind(local) == mir::LocalKind::Arg\n-                // LLVM can handle simple things but anything more complex than just a direct\n-                // offset or one indirect offset of 0 is too complex for it to generate CV records\n-                // correctly.\n-                && (direct_offset != Size::ZERO\n-                    || !matches!(&indirect_offsets[..], [Size::ZERO] | []));\n-\n-            if should_create_individual_allocas {\n-                let DebugInfoOffset { direct_offset: _, indirect_offsets: _, result: place } =\n-                    calculate_debuginfo_offset(bx, local, &var, base);\n-\n-                // Create a variable which will be a pointer to the actual value\n-                let ptr_ty = bx\n-                    .tcx()\n-                    .mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: place.layout.ty });\n-                let ptr_layout = bx.layout_of(ptr_ty);\n-                let alloca = PlaceRef::alloca(bx, ptr_layout);\n-                bx.set_var_name(alloca.llval, &(var.name.to_string() + \".dbg.spill\"));\n-\n-                // Write the pointer to the variable\n-                bx.store(place.llval, alloca.llval, alloca.align);\n-\n-                // Point the debug info to `*alloca` for the current variable\n-                bx.dbg_var_addr(dbg_var, dbg_loc, alloca.llval, Size::ZERO, &[Size::ZERO], None);\n-            } else {\n-                bx.dbg_var_addr(\n-                    dbg_var,\n-                    dbg_loc,\n-                    base.llval,\n-                    direct_offset,\n-                    &indirect_offsets,\n-                    None,\n-                );\n+            self.debug_introduce_local_as_var(bx, local, base, var);\n+        }\n+    }\n+\n+    fn debug_introduce_local_as_var(\n+        &self,\n+        bx: &mut Bx,\n+        local: mir::Local,\n+        mut base: PlaceRef<'tcx, Bx::Value>,\n+        var: PerLocalVarDebugInfo<'tcx, Bx::DIVariable>,\n+    ) {\n+        let Some(dbg_var) = var.dbg_var else { return };\n+        let Some(dbg_loc) = self.dbg_loc(var.source_info) else { return };\n+\n+        let DebugInfoOffset { mut direct_offset, indirect_offsets, result: _ } =\n+            calculate_debuginfo_offset(bx, local, &var, base.layout);\n+        let mut indirect_offsets = &indirect_offsets[..];\n+\n+        // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n+        // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n+        // not DWARF and LLVM doesn't support translating the resulting\n+        // [DW_OP_deref, DW_OP_plus_uconst, offset, DW_OP_deref] debug info to CodeView.\n+        // Creating extra allocas on the stack makes the resulting debug info simple enough\n+        // that LLVM can generate correct CodeView records and thus the values appear in the\n+        // debugger. (#83709)\n+        let should_create_individual_allocas = bx.cx().sess().target.is_like_msvc\n+            && self.mir.local_kind(local) == mir::LocalKind::Arg\n+            // LLVM can handle simple things but anything more complex than just a direct\n+            // offset or one indirect offset of 0 is too complex for it to generate CV records\n+            // correctly.\n+            && (direct_offset != Size::ZERO || !matches!(indirect_offsets, [Size::ZERO] | []));\n+\n+        let create_alloca = |bx: &mut Bx, place: PlaceRef<'tcx, Bx::Value>, refcount| {\n+            // Create a variable which will be a pointer to the actual value\n+            let ptr_ty = bx\n+                .tcx()\n+                .mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: place.layout.ty });\n+            let ptr_layout = bx.layout_of(ptr_ty);\n+            let alloca = PlaceRef::alloca(bx, ptr_layout);\n+            bx.set_var_name(alloca.llval, &format!(\"{}.ref{}.dbg.spill\", var.name, refcount));\n+\n+            // Write the pointer to the variable\n+            bx.store(place.llval, alloca.llval, alloca.align);\n+\n+            // Point the debug info to `*alloca` for the current variable\n+            alloca\n+        };\n+\n+        if var.references > 0 {\n+            base = calculate_debuginfo_offset(bx, local, &var, base).result;\n+\n+            // Point the debug info to `&...&base == alloca` for the current variable\n+            for refcount in 0..var.references {\n+                base = create_alloca(bx, base, refcount);\n             }\n+\n+            direct_offset = Size::ZERO;\n+            indirect_offsets = &[];\n+        } else if should_create_individual_allocas {\n+            let place = calculate_debuginfo_offset(bx, local, &var, base).result;\n+\n+            // Point the debug info to `*alloca` for the current variable\n+            base = create_alloca(bx, place, 0);\n+            direct_offset = Size::ZERO;\n+            indirect_offsets = &[Size::ZERO];\n         }\n+\n+        bx.dbg_var_addr(dbg_var, dbg_loc, base.llval, direct_offset, indirect_offsets, None);\n     }\n \n     pub fn debug_introduce_locals(&self, bx: &mut Bx) {\n@@ -439,7 +484,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             };\n \n             let dbg_var = dbg_scope_and_span.map(|(dbg_scope, _, span)| {\n-                let (var_ty, var_kind) = match var.value {\n+                let (mut var_ty, var_kind) = match var.value {\n                     mir::VarDebugInfoContents::Place(place) => {\n                         let var_ty = self.monomorphized_place_ty(place.as_ref());\n                         let var_kind = if let Some(arg_index) = var.argument_index\n@@ -476,6 +521,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 };\n \n+                for _ in 0..var.references {\n+                    var_ty =\n+                        bx.tcx().mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: var_ty });\n+                }\n+\n                 self.cx.create_dbg_var(var.name, var_ty, dbg_scope, var_kind, span)\n             });\n \n@@ -487,6 +537,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         dbg_var,\n                         fragment: None,\n                         projection: place.projection,\n+                        references: var.references,\n                     });\n                 }\n                 mir::VarDebugInfoContents::Const(c) => {\n@@ -540,6 +591,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 Some(fragment_start..fragment_start + fragment_layout.size)\n                             },\n                             projection: place.projection,\n+                            references: var.references,\n                         });\n                     }\n                 }"}, {"sha": "2301c3ef13e2124e21db9421d78417efcab947aa", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -402,8 +402,6 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n         indirect_dest: PlaceRef<'tcx, V>,\n     ) {\n         debug!(\"OperandRef::store_unsized: operand={:?}, indirect_dest={:?}\", self, indirect_dest);\n-        let flags = MemFlags::empty();\n-\n         // `indirect_dest` must have `*mut T` type. We extract `T` out of it.\n         let unsized_ty = indirect_dest\n             .layout\n@@ -416,17 +414,23 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n             bug!(\"store_unsized called with a sized value\")\n         };\n \n-        // FIXME: choose an appropriate alignment, or use dynamic align somehow\n-        let max_align = Align::from_bits(128).unwrap();\n-        let min_align = Align::from_bits(8).unwrap();\n-\n-        // Allocate an appropriate region on the stack, and copy the value into it\n-        let (llsize, _) = glue::size_and_align_of_dst(bx, unsized_ty, Some(llextra));\n-        let lldst = bx.byte_array_alloca(llsize, max_align);\n-        bx.memcpy(lldst, max_align, llptr, min_align, llsize, flags);\n+        // Allocate an appropriate region on the stack, and copy the value into it. Since alloca\n+        // doesn't support dynamic alignment, we allocate an extra align - 1 bytes, and align the\n+        // pointer manually.\n+        let (size, align) = glue::size_and_align_of_dst(bx, unsized_ty, Some(llextra));\n+        let one = bx.const_usize(1);\n+        let align_minus_1 = bx.sub(align, one);\n+        let size_extra = bx.add(size, align_minus_1);\n+        let min_align = Align::ONE;\n+        let alloca = bx.byte_array_alloca(size_extra, min_align);\n+        let address = bx.ptrtoint(alloca, bx.type_isize());\n+        let neg_address = bx.neg(address);\n+        let offset = bx.and(neg_address, align_minus_1);\n+        let dst = bx.inbounds_gep(bx.type_i8(), alloca, &[offset]);\n+        bx.memcpy(dst, min_align, llptr, min_align, size, MemFlags::empty());\n \n         // Store the allocated region and the extra to the indirect place.\n-        let indirect_operand = OperandValue::Pair(lldst, llextra);\n+        let indirect_operand = OperandValue::Pair(dst, llextra);\n         indirect_operand.store(bx, indirect_dest);\n     }\n }"}, {"sha": "3719283cccc73c8d38bc1a2b75153f83e1616e90", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -173,16 +173,13 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"avx512dq\", Some(sym::avx512_target_feature)),\n     (\"avx512er\", Some(sym::avx512_target_feature)),\n     (\"avx512f\", Some(sym::avx512_target_feature)),\n-    (\"avx512gfni\", Some(sym::avx512_target_feature)),\n     (\"avx512ifma\", Some(sym::avx512_target_feature)),\n     (\"avx512pf\", Some(sym::avx512_target_feature)),\n-    (\"avx512vaes\", Some(sym::avx512_target_feature)),\n     (\"avx512vbmi\", Some(sym::avx512_target_feature)),\n     (\"avx512vbmi2\", Some(sym::avx512_target_feature)),\n     (\"avx512vl\", Some(sym::avx512_target_feature)),\n     (\"avx512vnni\", Some(sym::avx512_target_feature)),\n     (\"avx512vp2intersect\", Some(sym::avx512_target_feature)),\n-    (\"avx512vpclmulqdq\", Some(sym::avx512_target_feature)),\n     (\"avx512vpopcntdq\", Some(sym::avx512_target_feature)),\n     (\"bmi1\", None),\n     (\"bmi2\", None),"}, {"sha": "5c88368bc87563774bf674ca38b54cef870f8512", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -8,8 +8,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_session::{\n     config::{self, OutputFilenames, PrintRequest},\n@@ -22,6 +22,7 @@ use rustc_target::spec::Target;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n+use rustc_data_structures::sync::{DynSend, DynSync};\n use std::any::Any;\n \n pub trait BackendTypes {\n@@ -117,7 +118,9 @@ pub trait CodegenBackend {\n     ) -> Result<(), ErrorGuaranteed>;\n }\n \n-pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send + Sync {\n+pub trait ExtraBackendMethods:\n+    CodegenBackend + WriteBackendMethods + Sized + Send + Sync + DynSend + DynSync\n+{\n     fn codegen_allocator<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "fa8253d5e49661138024e128534a27cd3cc265ff", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,7 +2,7 @@ use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n "}, {"sha": "c36282d5ed442f0dcd53c5669d386c11274f19ab", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -35,8 +35,8 @@ pub mod util;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty;\n-use rustc_middle::ty::query::Providers;\n \n fluent_messages! { \"../messages.ftl\" }\n "}, {"sha": "3c350e25ba6ec066ad1fad4938ce150e97894fda", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 if let Some(root) = post_contract_node.get(&bb) {\n                     break *root;\n                 }\n-                let parent = doms.immediate_dominator(bb);\n+                let parent = doms.immediate_dominator(bb).unwrap();\n                 dom_path.push(bb);\n                 if !self.body.basic_blocks[parent].is_cleanup {\n                     break bb;\n@@ -448,7 +448,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         };\n         match debuginfo.value {\n             VarDebugInfoContents::Const(_) => {}\n-            VarDebugInfoContents::Place(place) => check_place(place),\n+            VarDebugInfoContents::Place(place) => {\n+                check_place(place);\n+                if debuginfo.references != 0 && place.projection.last() == Some(&PlaceElem::Deref) {\n+                    self.fail(\n+                        START_BLOCK.start_location(),\n+                        format!(\"debuginfo {:?}, has both ref and deref\", debuginfo),\n+                    );\n+                }\n+            }\n             VarDebugInfoContents::Composite { ty, ref fragments } => {\n                 for f in fragments {\n                     check_place(f.contents);"}, {"sha": "78f73d193e380f71938affdb41fbee4ed8f52979", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -16,6 +16,7 @@ libc = \"0.2\"\n measureme = \"10.0.0\"\n rustc-rayon-core = { version = \"0.5.0\", optional = true }\n rustc-rayon = { version = \"0.5.0\", optional = true }\n+rustc_arena = { path = \"../rustc_arena\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc-hash = \"1.1.0\"\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }"}, {"sha": "a7de709ba72bf677d3feddfaf5fe9e650db129b2", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -242,7 +242,9 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n         immediate_dominators[*node] = Some(pre_order_to_real[idom[idx]]);\n     }\n \n-    Dominators { post_order_rank, immediate_dominators }\n+    let start_node = graph.start_node();\n+    immediate_dominators[start_node] = None;\n+    Dominators { start_node, post_order_rank, immediate_dominators }\n }\n \n /// Evaluate the link-eval virtual forest, providing the currently minimum semi\n@@ -308,6 +310,7 @@ fn compress(\n /// Tracks the list of dominators for each node.\n #[derive(Clone, Debug)]\n pub struct Dominators<N: Idx> {\n+    start_node: N,\n     post_order_rank: IndexVec<N, usize>,\n     // Even though we track only the immediate dominator of each node, it's\n     // possible to get its full list of dominators by looking up the dominator\n@@ -316,14 +319,14 @@ pub struct Dominators<N: Idx> {\n }\n \n impl<Node: Idx> Dominators<Node> {\n-    /// Whether the given Node has an immediate dominator.\n+    /// Returns true if node is reachable from the start node.\n     pub fn is_reachable(&self, node: Node) -> bool {\n-        self.immediate_dominators[node].is_some()\n+        node == self.start_node || self.immediate_dominators[node].is_some()\n     }\n \n-    pub fn immediate_dominator(&self, node: Node) -> Node {\n-        assert!(self.is_reachable(node), \"node {node:?} is not reachable\");\n-        self.immediate_dominators[node].unwrap()\n+    /// Returns the immediate dominator of node, if any.\n+    pub fn immediate_dominator(&self, node: Node) -> Option<Node> {\n+        self.immediate_dominators[node]\n     }\n \n     /// Provides an iterator over each dominator up the CFG, for the given Node.\n@@ -357,12 +360,7 @@ impl<'dom, Node: Idx> Iterator for Iter<'dom, Node> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if let Some(node) = self.node {\n-            let dom = self.dominators.immediate_dominator(node);\n-            if dom == node {\n-                self.node = None; // reached the root\n-            } else {\n-                self.node = Some(dom);\n-            }\n+            self.node = self.dominators.immediate_dominator(node);\n             Some(node)\n         } else {\n             None"}, {"sha": "8b124516623d60bbe44e253e5a205f965e5a2753", "filename": "compiler/rustc_data_structures/src/graph/dominators/tests.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -8,7 +8,7 @@ fn diamond() {\n \n     let dominators = dominators(&graph);\n     let immediate_dominators = &dominators.immediate_dominators;\n-    assert_eq!(immediate_dominators[0], Some(0));\n+    assert_eq!(immediate_dominators[0], None);\n     assert_eq!(immediate_dominators[1], Some(0));\n     assert_eq!(immediate_dominators[2], Some(0));\n     assert_eq!(immediate_dominators[3], Some(0));\n@@ -30,7 +30,7 @@ fn paper() {\n     assert_eq!(immediate_dominators[3], Some(6));\n     assert_eq!(immediate_dominators[4], Some(6));\n     assert_eq!(immediate_dominators[5], Some(6));\n-    assert_eq!(immediate_dominators[6], Some(6));\n+    assert_eq!(immediate_dominators[6], None);\n }\n \n #[test]\n@@ -43,3 +43,13 @@ fn paper_slt() {\n \n     dominators(&graph);\n }\n+\n+#[test]\n+fn immediate_dominator() {\n+    let graph = TestGraph::new(1, &[(1, 2), (2, 3)]);\n+    let dominators = dominators(&graph);\n+    assert_eq!(dominators.immediate_dominator(0), None);\n+    assert_eq!(dominators.immediate_dominator(1), None);\n+    assert_eq!(dominators.immediate_dominator(2), Some(1));\n+    assert_eq!(dominators.immediate_dominator(3), Some(2));\n+}"}, {"sha": "5b9b0e106d254c807a5209653756b2f04c4deda6", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -26,6 +26,7 @@\n #![feature(test)]\n #![feature(thread_id_value)]\n #![feature(vec_into_raw_parts)]\n+#![feature(allocator_api)]\n #![feature(get_mut_unchecked)]\n #![feature(lint_reasons)]\n #![feature(unwrap_infallible)]\n@@ -77,6 +78,7 @@ pub mod sorted_map;\n pub mod stable_hasher;\n mod atomic_ref;\n pub mod fingerprint;\n+pub mod marker;\n pub mod profiling;\n pub mod sharded;\n pub mod stack;"}, {"sha": "f8c06f9a8145e6507d3b9c552d43d2e806140b93", "filename": "compiler/rustc_data_structures/src/marker.rs", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,257 @@\n+cfg_if!(\n+    if #[cfg(not(parallel_compiler))] {\n+        pub auto trait DynSend {}\n+        pub auto trait DynSync {}\n+\n+        impl<T> DynSend for T {}\n+        impl<T> DynSync for T {}\n+    } else {\n+        #[rustc_on_unimplemented(\n+            message = \"`{Self}` doesn't implement `DynSend`. \\\n+            Add it to `rustc_data_structures::marker` or use `IntoDynSyncSend` if it's already `Send`\"\n+        )]\n+        // This is an auto trait for types which can be sent across threads if `sync::is_dyn_thread_safe()`\n+        // is true. These types can be wrapped in a `FromDyn` to get a `Send` type. Wrapping a\n+        // `Send` type in `IntoDynSyncSend` will create a `DynSend` type.\n+        pub unsafe auto trait DynSend {}\n+\n+        #[rustc_on_unimplemented(\n+            message = \"`{Self}` doesn't implement `DynSync`. \\\n+            Add it to `rustc_data_structures::marker` or use `IntoDynSyncSend` if it's already `Sync`\"\n+        )]\n+        // This is an auto trait for types which can be shared across threads if `sync::is_dyn_thread_safe()`\n+        // is true. These types can be wrapped in a `FromDyn` to get a `Sync` type. Wrapping a\n+        // `Sync` type in `IntoDynSyncSend` will create a `DynSync` type.\n+        pub unsafe auto trait DynSync {}\n+\n+        // Same with `Sync` and `Send`.\n+        unsafe impl<T: DynSync + ?Sized> DynSend for &T {}\n+\n+        macro_rules! impls_dyn_send_neg {\n+            ($([$t1: ty $(where $($generics1: tt)*)?])*) => {\n+                $(impl$(<$($generics1)*>)? !DynSend for $t1 {})*\n+            };\n+        }\n+\n+        // Consistent with `std`\n+        impls_dyn_send_neg!(\n+            [std::env::Args]\n+            [std::env::ArgsOs]\n+            [*const T where T: ?Sized]\n+            [*mut T where T: ?Sized]\n+            [std::ptr::NonNull<T> where T: ?Sized]\n+            [std::rc::Rc<T> where T: ?Sized]\n+            [std::rc::Weak<T> where T: ?Sized]\n+            [std::sync::MutexGuard<'_, T> where T: ?Sized]\n+            [std::sync::RwLockReadGuard<'_, T> where T: ?Sized]\n+            [std::sync::RwLockWriteGuard<'_, T> where T: ?Sized]\n+            [std::io::StdoutLock<'_>]\n+            [std::io::StderrLock<'_>]\n+        );\n+        cfg_if!(\n+            // Consistent with `std`\n+            // `os_imp::Env` is `!Send` in these platforms\n+            if #[cfg(any(unix, target_os = \"hermit\", target_os = \"wasi\", target_os = \"solid_asp3\"))] {\n+                impl !DynSend for std::env::VarsOs {}\n+            }\n+        );\n+\n+        macro_rules! already_send {\n+            ($([$ty: ty])*) => {\n+                $(unsafe impl DynSend for $ty where $ty: Send {})*\n+            };\n+        }\n+\n+        // These structures are already `Send`.\n+        already_send!(\n+            [std::backtrace::Backtrace]\n+            [std::io::Stdout]\n+            [std::io::Stderr]\n+            [std::io::Error]\n+            [std::fs::File]\n+            [rustc_arena::DroplessArena]\n+            [crate::memmap::Mmap]\n+            [crate::profiling::SelfProfiler]\n+            [crate::owned_slice::OwnedSlice]\n+        );\n+\n+        macro_rules! impl_dyn_send {\n+            ($($($attr: meta)* [$ty: ty where $($generics2: tt)*])*) => {\n+                $(unsafe impl<$($generics2)*> DynSend for $ty {})*\n+            };\n+        }\n+\n+        impl_dyn_send!(\n+            [std::sync::atomic::AtomicPtr<T> where T]\n+            [std::sync::Mutex<T> where T: ?Sized+ DynSend]\n+            [std::sync::mpsc::Sender<T> where T: DynSend]\n+            [std::sync::Arc<T> where T: ?Sized + DynSync + DynSend]\n+            [std::sync::LazyLock<T, F> where T: DynSend, F: DynSend]\n+            [std::collections::HashSet<K, S> where K: DynSend, S: DynSend]\n+            [std::collections::HashMap<K, V, S> where K: DynSend, V: DynSend, S: DynSend]\n+            [std::collections::BTreeMap<K, V, A> where K: DynSend, V: DynSend, A: std::alloc::Allocator + Clone + DynSend]\n+            [Vec<T, A> where T: DynSend, A: std::alloc::Allocator + DynSend]\n+            [Box<T, A> where T: ?Sized + DynSend, A: std::alloc::Allocator + DynSend]\n+            [crate::sync::Lock<T> where T: DynSend]\n+            [crate::sync::RwLock<T> where T: DynSend]\n+            [crate::tagged_ptr::CopyTaggedPtr<P, T, CP> where P: Send + crate::tagged_ptr::Pointer, T: Send + crate::tagged_ptr::Tag, const CP: bool]\n+            [rustc_arena::TypedArena<T> where T: DynSend]\n+            [indexmap::IndexSet<V, S> where V: DynSend, S: DynSend]\n+            [indexmap::IndexMap<K, V, S> where K: DynSend, V: DynSend, S: DynSend]\n+            [thin_vec::ThinVec<T> where T: DynSend]\n+            [smallvec::SmallVec<A> where A: smallvec::Array + DynSend]\n+        );\n+\n+        macro_rules! impls_dyn_sync_neg {\n+            ($([$t1: ty $(where $($generics1: tt)*)?])*) => {\n+                $(impl$(<$($generics1)*>)? !DynSync for $t1 {})*\n+            };\n+        }\n+\n+        // Consistent with `std`\n+        impls_dyn_sync_neg!(\n+            [std::env::Args]\n+            [std::env::ArgsOs]\n+            [*const T where T: ?Sized]\n+            [*mut T where T: ?Sized]\n+            [std::cell::Cell<T> where T: ?Sized]\n+            [std::cell::RefCell<T> where T: ?Sized]\n+            [std::cell::UnsafeCell<T> where T: ?Sized]\n+            [std::ptr::NonNull<T> where T: ?Sized]\n+            [std::rc::Rc<T> where T: ?Sized]\n+            [std::rc::Weak<T> where T: ?Sized]\n+            [std::cell::OnceCell<T> where T]\n+            [std::sync::mpsc::Receiver<T> where T]\n+            [std::sync::mpsc::Sender<T> where T]\n+        );\n+        cfg_if!(\n+            // Consistent with `std`\n+            // `os_imp::Env` is `!Sync` in these platforms\n+            if #[cfg(any(unix, target_os = \"hermit\", target_os = \"wasi\", target_os = \"solid_asp3\"))] {\n+                impl !DynSync for std::env::VarsOs {}\n+            }\n+        );\n+\n+        macro_rules! already_sync {\n+            ($([$ty: ty])*) => {\n+                $(unsafe impl DynSync for $ty where $ty: Sync {})*\n+            };\n+        }\n+\n+        // These structures are already `Sync`.\n+        already_sync!(\n+            [std::sync::atomic::AtomicBool]\n+            [std::sync::atomic::AtomicUsize]\n+            [std::sync::atomic::AtomicU8]\n+            [std::sync::atomic::AtomicU32]\n+            [std::sync::atomic::AtomicU64]\n+            [std::backtrace::Backtrace]\n+            [std::io::Error]\n+            [std::fs::File]\n+            [jobserver_crate::Client]\n+            [crate::memmap::Mmap]\n+            [crate::profiling::SelfProfiler]\n+            [crate::owned_slice::OwnedSlice]\n+        );\n+\n+        macro_rules! impl_dyn_sync {\n+            ($($($attr: meta)* [$ty: ty where $($generics2: tt)*])*) => {\n+                $(unsafe impl<$($generics2)*> DynSync for $ty {})*\n+            };\n+        }\n+\n+        impl_dyn_sync!(\n+            [std::sync::atomic::AtomicPtr<T> where T]\n+            [std::sync::OnceLock<T> where T: DynSend + DynSync]\n+            [std::sync::Mutex<T> where T: ?Sized + DynSend]\n+            [std::sync::Arc<T> where T: ?Sized + DynSync + DynSend]\n+            [std::sync::LazyLock<T, F> where T: DynSend + DynSync, F: DynSend]\n+            [std::collections::HashSet<K, S> where K: DynSync, S: DynSync]\n+            [std::collections::HashMap<K, V, S> where K: DynSync, V: DynSync, S: DynSync]\n+            [std::collections::BTreeMap<K, V, A> where K: DynSync, V: DynSync, A: std::alloc::Allocator + Clone + DynSync]\n+            [Vec<T, A> where T: DynSync, A: std::alloc::Allocator + DynSync]\n+            [Box<T, A> where T: ?Sized + DynSync, A: std::alloc::Allocator + DynSync]\n+            [crate::sync::Lock<T> where T: DynSend]\n+            [crate::sync::RwLock<T> where T: DynSend + DynSync]\n+            [crate::sync::OneThread<T> where T]\n+            [crate::sync::WorkerLocal<T> where T: DynSend]\n+            [crate::intern::Interned<'a, T> where 'a, T: DynSync]\n+            [crate::tagged_ptr::CopyTaggedPtr<P, T, CP> where P: Sync + crate::tagged_ptr::Pointer, T: Sync + crate::tagged_ptr::Tag, const CP: bool]\n+            [parking_lot::lock_api::Mutex<R, T> where R: DynSync, T: ?Sized + DynSend]\n+            [parking_lot::lock_api::RwLock<R, T> where R: DynSync, T: ?Sized + DynSend + DynSync]\n+            [indexmap::IndexSet<V, S> where V: DynSync, S: DynSync]\n+            [indexmap::IndexMap<K, V, S> where K: DynSync, V: DynSync, S: DynSync]\n+            [smallvec::SmallVec<A> where A: smallvec::Array + DynSync]\n+            [thin_vec::ThinVec<T> where T: DynSync]\n+        );\n+    }\n+);\n+\n+pub fn assert_dyn_sync<T: ?Sized + DynSync>() {}\n+pub fn assert_dyn_send<T: ?Sized + DynSend>() {}\n+pub fn assert_dyn_send_val<T: ?Sized + DynSend>(_t: &T) {}\n+pub fn assert_dyn_send_sync_val<T: ?Sized + DynSync + DynSend>(_t: &T) {}\n+\n+#[derive(Copy, Clone)]\n+pub struct FromDyn<T>(T);\n+\n+impl<T> FromDyn<T> {\n+    #[inline(always)]\n+    pub fn from(val: T) -> Self {\n+        // Check that `sync::is_dyn_thread_safe()` is true on creation so we can\n+        // implement `Send` and `Sync` for this structure when `T`\n+        // implements `DynSend` and `DynSync` respectively.\n+        #[cfg(parallel_compiler)]\n+        assert!(crate::sync::is_dyn_thread_safe());\n+        FromDyn(val)\n+    }\n+\n+    #[inline(always)]\n+    pub fn into_inner(self) -> T {\n+        self.0\n+    }\n+}\n+\n+// `FromDyn` is `Send` if `T` is `DynSend`, since it ensures that sync::is_dyn_thread_safe() is true.\n+#[cfg(parallel_compiler)]\n+unsafe impl<T: DynSend> Send for FromDyn<T> {}\n+\n+// `FromDyn` is `Sync` if `T` is `DynSync`, since it ensures that sync::is_dyn_thread_safe() is true.\n+#[cfg(parallel_compiler)]\n+unsafe impl<T: DynSync> Sync for FromDyn<T> {}\n+\n+impl<T> std::ops::Deref for FromDyn<T> {\n+    type Target = T;\n+\n+    #[inline(always)]\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+// A wrapper to convert a struct that is already a `Send` or `Sync` into\n+// an instance of `DynSend` and `DynSync`, since the compiler cannot infer\n+// it automatically in some cases. (e.g. Box<dyn Send / Sync>)\n+#[derive(Copy, Clone)]\n+pub struct IntoDynSyncSend<T: ?Sized>(pub T);\n+\n+#[cfg(parallel_compiler)]\n+unsafe impl<T: ?Sized + Send> DynSend for IntoDynSyncSend<T> {}\n+#[cfg(parallel_compiler)]\n+unsafe impl<T: ?Sized + Sync> DynSync for IntoDynSyncSend<T> {}\n+\n+impl<T> std::ops::Deref for IntoDynSyncSend<T> {\n+    type Target = T;\n+\n+    #[inline(always)]\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}\n+\n+impl<T> std::ops::DerefMut for IntoDynSyncSend<T> {\n+    #[inline(always)]\n+    fn deref_mut(&mut self) -> &mut T {\n+        &mut self.0\n+    }\n+}"}, {"sha": "e151b8c2de04e6aff81c0df365eb495fec9e8c06", "filename": "compiler/rustc_data_structures/src/owned_slice/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -69,6 +69,6 @@ fn drop_drops() {\n \n #[test]\n fn send_sync() {\n-    crate::sync::assert_send::<OwnedSlice>();\n-    crate::sync::assert_sync::<OwnedSlice>();\n+    crate::sync::assert_dyn_send::<OwnedSlice>();\n+    crate::sync::assert_dyn_sync::<OwnedSlice>();\n }"}, {"sha": "8a778866a77e242b5689a3934185de396b6957ee", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 203, "deletions": 35, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -39,6 +39,7 @@\n //!\n //! [^2] `MTLockRef` is a typedef.\n \n+pub use crate::marker::*;\n use crate::owned_slice::OwnedSlice;\n use std::collections::HashMap;\n use std::hash::{BuildHasher, Hash};\n@@ -55,6 +56,42 @@ pub use vec::{AppendOnlyIndexVec, AppendOnlyVec};\n \n mod vec;\n \n+mod mode {\n+    use super::Ordering;\n+    use std::sync::atomic::AtomicU8;\n+\n+    const UNINITIALIZED: u8 = 0;\n+    const DYN_NOT_THREAD_SAFE: u8 = 1;\n+    const DYN_THREAD_SAFE: u8 = 2;\n+\n+    static DYN_THREAD_SAFE_MODE: AtomicU8 = AtomicU8::new(UNINITIALIZED);\n+\n+    // Whether thread safety is enabled (due to running under multiple threads).\n+    #[inline]\n+    pub fn is_dyn_thread_safe() -> bool {\n+        match DYN_THREAD_SAFE_MODE.load(Ordering::Relaxed) {\n+            DYN_NOT_THREAD_SAFE => false,\n+            DYN_THREAD_SAFE => true,\n+            _ => panic!(\"uninitialized dyn_thread_safe mode!\"),\n+        }\n+    }\n+\n+    // Only set by the `-Z threads` compile option\n+    pub fn set_dyn_thread_safe_mode(mode: bool) {\n+        let set: u8 = if mode { DYN_THREAD_SAFE } else { DYN_NOT_THREAD_SAFE };\n+        let previous = DYN_THREAD_SAFE_MODE.compare_exchange(\n+            UNINITIALIZED,\n+            set,\n+            Ordering::Relaxed,\n+            Ordering::Relaxed,\n+        );\n+\n+        // Check that the mode was either uninitialized or was already set to the requested mode.\n+        assert!(previous.is_ok() || previous == Err(set));\n+    }\n+}\n+\n+pub use mode::{is_dyn_thread_safe, set_dyn_thread_safe_mode};\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub unsafe auto trait Send {}\n@@ -149,7 +186,7 @@ cfg_if! {\n \n         #[macro_export]\n         macro_rules! parallel {\n-            ($($blocks:tt),*) => {\n+            ($($blocks:block),*) => {\n                 // We catch panics here ensuring that all the blocks execute.\n                 // This makes behavior consistent with the parallel compiler.\n                 let mut panic = None;\n@@ -168,12 +205,6 @@ cfg_if! {\n             }\n         }\n \n-        pub use Iterator as ParallelIterator;\n-\n-        pub fn par_iter<T: IntoIterator>(t: T) -> T::IntoIter {\n-            t.into_iter()\n-        }\n-\n         pub fn par_for_each_in<T: IntoIterator>(t: T, mut for_each: impl FnMut(T::Item) + Sync + Send) {\n             // We catch panics here ensuring that all the loop iterations execute.\n             // This makes behavior consistent with the parallel compiler.\n@@ -190,6 +221,29 @@ cfg_if! {\n             }\n         }\n \n+        pub fn par_map<T: IntoIterator, R, C: FromIterator<R>>(\n+            t: T,\n+            mut map: impl FnMut(<<T as IntoIterator>::IntoIter as Iterator>::Item) -> R,\n+        ) -> C {\n+            // We catch panics here ensuring that all the loop iterations execute.\n+            let mut panic = None;\n+            let r = t.into_iter().filter_map(|i| {\n+                match catch_unwind(AssertUnwindSafe(|| map(i))) {\n+                    Ok(r) => Some(r),\n+                    Err(p) => {\n+                        if panic.is_none() {\n+                            panic = Some(p);\n+                        }\n+                        None\n+                    }\n+                }\n+            }).collect();\n+            if let Some(panic) = panic {\n+                resume_unwind(panic);\n+            }\n+            r\n+        }\n+\n         pub type MetadataRef = OwnedSlice;\n \n         pub use std::rc::Rc as Lrc;\n@@ -302,46 +356,165 @@ cfg_if! {\n         use parking_lot::RwLock as InnerRwLock;\n \n         use std::thread;\n-        pub use rayon::{join, scope};\n+\n+        #[inline]\n+        pub fn join<A, B, RA: DynSend, RB: DynSend>(oper_a: A, oper_b: B) -> (RA, RB)\n+        where\n+            A: FnOnce() -> RA + DynSend,\n+            B: FnOnce() -> RB + DynSend,\n+        {\n+            if mode::is_dyn_thread_safe() {\n+                let oper_a = FromDyn::from(oper_a);\n+                let oper_b = FromDyn::from(oper_b);\n+                let (a, b) = rayon::join(move || FromDyn::from(oper_a.into_inner()()), move || FromDyn::from(oper_b.into_inner()()));\n+                (a.into_inner(), b.into_inner())\n+            } else {\n+                (oper_a(), oper_b())\n+            }\n+        }\n+\n+        // This function only works when `mode::is_dyn_thread_safe()`.\n+        pub fn scope<'scope, OP, R>(op: OP) -> R\n+        where\n+            OP: FnOnce(&rayon::Scope<'scope>) -> R + DynSend,\n+            R: DynSend,\n+        {\n+            let op = FromDyn::from(op);\n+            rayon::scope(|s| FromDyn::from(op.into_inner()(s))).into_inner()\n+        }\n \n         /// Runs a list of blocks in parallel. The first block is executed immediately on\n         /// the current thread. Use that for the longest running block.\n         #[macro_export]\n         macro_rules! parallel {\n-            (impl $fblock:tt [$($c:tt,)*] [$block:tt $(, $rest:tt)*]) => {\n+            (impl $fblock:block [$($c:expr,)*] [$block:expr $(, $rest:expr)*]) => {\n                 parallel!(impl $fblock [$block, $($c,)*] [$($rest),*])\n             };\n-            (impl $fblock:tt [$($blocks:tt,)*] []) => {\n+            (impl $fblock:block [$($blocks:expr,)*] []) => {\n                 ::rustc_data_structures::sync::scope(|s| {\n+                    $(let block = rustc_data_structures::sync::FromDyn::from(|| $blocks);\n+                    s.spawn(move |_| block.into_inner()());)*\n+                    (|| $fblock)();\n+                });\n+            };\n+            ($fblock:block, $($blocks:block),*) => {\n+                if rustc_data_structures::sync::is_dyn_thread_safe() {\n+                    // Reverse the order of the later blocks since Rayon executes them in reverse order\n+                    // when using a single thread. This ensures the execution order matches that\n+                    // of a single threaded rustc.\n+                    parallel!(impl $fblock [] [$($blocks),*]);\n+                } else {\n+                    // We catch panics here ensuring that all the blocks execute.\n+                    // This makes behavior consistent with the parallel compiler.\n+                    let mut panic = None;\n+                    if let Err(p) = ::std::panic::catch_unwind(\n+                        ::std::panic::AssertUnwindSafe(|| $fblock)\n+                    ) {\n+                        if panic.is_none() {\n+                            panic = Some(p);\n+                        }\n+                    }\n                     $(\n-                        s.spawn(|_| $blocks);\n+                        if let Err(p) = ::std::panic::catch_unwind(\n+                            ::std::panic::AssertUnwindSafe(|| $blocks)\n+                        ) {\n+                            if panic.is_none() {\n+                                panic = Some(p);\n+                            }\n+                        }\n                     )*\n-                    $fblock;\n-                })\n-            };\n-            ($fblock:tt, $($blocks:tt),*) => {\n-                // Reverse the order of the later blocks since Rayon executes them in reverse order\n-                // when using a single thread. This ensures the execution order matches that\n-                // of a single threaded rustc\n-                parallel!(impl $fblock [] [$($blocks),*]);\n+                    if let Some(panic) = panic {\n+                        ::std::panic::resume_unwind(panic);\n+                    }\n+                }\n             };\n         }\n \n-        pub use rayon::iter::ParallelIterator;\n-        use rayon::iter::IntoParallelIterator;\n+        use rayon::iter::{FromParallelIterator, IntoParallelIterator, ParallelIterator};\n+\n+        pub fn par_for_each_in<I, T: IntoIterator<Item = I> + IntoParallelIterator<Item = I>>(\n+            t: T,\n+            for_each: impl Fn(I) + DynSync + DynSend\n+        ) {\n+            if mode::is_dyn_thread_safe() {\n+                let for_each = FromDyn::from(for_each);\n+                let panic: Lock<Option<_>> = Lock::new(None);\n+                t.into_par_iter().for_each(|i| if let Err(p) = catch_unwind(AssertUnwindSafe(|| for_each(i))) {\n+                    let mut l = panic.lock();\n+                    if l.is_none() {\n+                        *l = Some(p)\n+                    }\n+                });\n \n-        pub fn par_iter<T: IntoParallelIterator>(t: T) -> T::Iter {\n-            t.into_par_iter()\n+                if let Some(panic) = panic.into_inner() {\n+                    resume_unwind(panic);\n+                }\n+            } else {\n+                // We catch panics here ensuring that all the loop iterations execute.\n+                // This makes behavior consistent with the parallel compiler.\n+                let mut panic = None;\n+                t.into_iter().for_each(|i| {\n+                    if let Err(p) = catch_unwind(AssertUnwindSafe(|| for_each(i))) {\n+                        if panic.is_none() {\n+                            panic = Some(p);\n+                        }\n+                    }\n+                });\n+                if let Some(panic) = panic {\n+                    resume_unwind(panic);\n+                }\n+            }\n         }\n \n-        pub fn par_for_each_in<T: IntoParallelIterator>(\n+        pub fn par_map<\n+            I,\n+            T: IntoIterator<Item = I> + IntoParallelIterator<Item = I>,\n+            R: std::marker::Send,\n+            C: FromIterator<R> + FromParallelIterator<R>\n+        >(\n             t: T,\n-            for_each: impl Fn(T::Item) + Sync + Send,\n-        ) {\n-            let ps: Vec<_> = t.into_par_iter().map(|i| catch_unwind(AssertUnwindSafe(|| for_each(i)))).collect();\n-            ps.into_iter().for_each(|p| if let Err(panic) = p {\n-                resume_unwind(panic)\n-            });\n+            map: impl Fn(I) -> R + DynSync + DynSend\n+        ) -> C {\n+            if mode::is_dyn_thread_safe() {\n+                let panic: Lock<Option<_>> = Lock::new(None);\n+                let map = FromDyn::from(map);\n+                // We catch panics here ensuring that all the loop iterations execute.\n+                let r = t.into_par_iter().filter_map(|i| {\n+                    match catch_unwind(AssertUnwindSafe(|| map(i))) {\n+                        Ok(r) => Some(r),\n+                        Err(p) => {\n+                            let mut l = panic.lock();\n+                            if l.is_none() {\n+                                *l = Some(p);\n+                            }\n+                            None\n+                        },\n+                    }\n+                }).collect();\n+\n+                if let Some(panic) = panic.into_inner() {\n+                    resume_unwind(panic);\n+                }\n+                r\n+            } else {\n+                // We catch panics here ensuring that all the loop iterations execute.\n+                let mut panic = None;\n+                let r = t.into_iter().filter_map(|i| {\n+                    match catch_unwind(AssertUnwindSafe(|| map(i))) {\n+                        Ok(r) => Some(r),\n+                        Err(p) => {\n+                            if panic.is_none() {\n+                                panic = Some(p);\n+                            }\n+                            None\n+                        }\n+                    }\n+                }).collect();\n+                if let Some(panic) = panic {\n+                    resume_unwind(panic);\n+                }\n+                r\n+            }\n         }\n \n         pub type MetadataRef = OwnedSlice;\n@@ -352,11 +525,6 @@ cfg_if! {\n     }\n }\n \n-pub fn assert_sync<T: ?Sized + Sync>() {}\n-pub fn assert_send<T: ?Sized + Send>() {}\n-pub fn assert_send_val<T: ?Sized + Send>(_t: &T) {}\n-pub fn assert_send_sync_val<T: ?Sized + Sync + Send>(_t: &T) {}\n-\n #[derive(Default)]\n #[cfg_attr(parallel_compiler, repr(align(64)))]\n pub struct CacheAligned<T>(pub T);"}, {"sha": "80a9dfd251a796ccdcc48a74badb54420062b3bc", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -256,6 +256,9 @@ fn run_compiler(\n \n     let sopts = config::build_session_options(&matches);\n \n+    // Set parallel mode before thread pool creation, which will create `Lock`s.\n+    interface::set_thread_safe_mode(&sopts.unstable_opts);\n+\n     if let Some(ref code) = matches.opt_str(\"explain\") {\n         handle_explain(diagnostics_registry(), code, sopts.error_format);\n         return Ok(());"}, {"sha": "0accb4ab96f59a5e4440736693949202a53313dc", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -11,7 +11,7 @@ extern crate tracing;\n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n use icu_provider_adapters::fallback::{LocaleFallbackProvider, LocaleFallbacker};\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{IntoDynSyncSend, Lrc};\n use rustc_fluent_macro::fluent_messages;\n use rustc_macros::{Decodable, Encodable};\n use rustc_span::Span;\n@@ -37,16 +37,17 @@ pub use unic_langid::{langid, LanguageIdentifier};\n \n fluent_messages! { \"../messages.ftl\" }\n \n-pub type FluentBundle = fluent_bundle::bundle::FluentBundle<FluentResource, IntlLangMemoizer>;\n+pub type FluentBundle =\n+    IntoDynSyncSend<fluent_bundle::bundle::FluentBundle<FluentResource, IntlLangMemoizer>>;\n \n-#[cfg(parallel_compiler)]\n+#[cfg(not(parallel_compiler))]\n fn new_bundle(locales: Vec<LanguageIdentifier>) -> FluentBundle {\n-    FluentBundle::new_concurrent(locales)\n+    IntoDynSyncSend(fluent_bundle::bundle::FluentBundle::new(locales))\n }\n \n-#[cfg(not(parallel_compiler))]\n+#[cfg(parallel_compiler)]\n fn new_bundle(locales: Vec<LanguageIdentifier>) -> FluentBundle {\n-    FluentBundle::new(locales)\n+    IntoDynSyncSend(fluent_bundle::bundle::FluentBundle::new_concurrent(locales))\n }\n \n #[derive(Debug)]"}, {"sha": "22c41f7b93f8a59e4eac5830d59949245b83fb71", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -32,7 +32,7 @@ use emitter::{is_case_difference, Emitter, EmitterWriter};\n use registry::Registry;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::stable_hasher::{Hash128, StableHasher};\n-use rustc_data_structures::sync::{self, Lock, Lrc};\n+use rustc_data_structures::sync::{self, IntoDynSyncSend, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n     fallback_fluent_bundle, fluent_bundle, DelayDm, DiagnosticMessage, FluentBundle,\n@@ -409,7 +409,7 @@ struct HandlerInner {\n     err_count: usize,\n     warn_count: usize,\n     deduplicated_err_count: usize,\n-    emitter: Box<dyn Emitter + sync::Send>,\n+    emitter: IntoDynSyncSend<Box<dyn Emitter + sync::Send>>,\n     delayed_span_bugs: Vec<DelayedDiagnostic>,\n     delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n     /// This flag indicates that an expected diagnostic was emitted and suppressed.\n@@ -605,7 +605,7 @@ impl Handler {\n                 warn_count: 0,\n                 deduplicated_err_count: 0,\n                 deduplicated_warn_count: 0,\n-                emitter,\n+                emitter: IntoDynSyncSend(emitter),\n                 delayed_span_bugs: Vec::new(),\n                 delayed_good_path_bugs: Vec::new(),\n                 suppressed_expected_diag: false,"}, {"sha": "0e729b716803f033b92594f920e241c26b6a6b3d", "filename": "compiler/rustc_errors/src/tests.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_errors%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftests.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,7 +2,7 @@ use crate::error::{TranslateError, TranslateErrorKind};\n use crate::fluent_bundle::*;\n use crate::translation::Translate;\n use crate::FluentBundle;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{IntoDynSyncSend, Lrc};\n use rustc_error_messages::fluent_bundle::resolver::errors::{ReferenceKind, ResolverError};\n use rustc_error_messages::langid;\n use rustc_error_messages::DiagnosticMessage;\n@@ -27,10 +27,14 @@ fn make_dummy(ftl: &'static str) -> Dummy {\n     let langid_en = langid!(\"en-US\");\n \n     #[cfg(parallel_compiler)]\n-    let mut bundle = FluentBundle::new_concurrent(vec![langid_en]);\n+    let mut bundle: FluentBundle =\n+        IntoDynSyncSend(crate::fluent_bundle::bundle::FluentBundle::new_concurrent(vec![\n+            langid_en,\n+        ]));\n \n     #[cfg(not(parallel_compiler))]\n-    let mut bundle = FluentBundle::new(vec![langid_en]);\n+    let mut bundle: FluentBundle =\n+        IntoDynSyncSend(crate::fluent_bundle::bundle::FluentBundle::new(vec![langid_en]));\n \n     bundle.add_resource(resource).expect(\"Failed to add FTL resources to the bundle.\");\n "}, {"sha": "e03576c55f43687f41f9cc8f4127ec5e1f07a4e5", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -653,29 +653,29 @@ pub enum SyntaxExtensionKind {\n     /// A token-based function-like macro.\n     Bang(\n         /// An expander with signature TokenStream -> TokenStream.\n-        Box<dyn BangProcMacro + sync::Sync + sync::Send>,\n+        Box<dyn BangProcMacro + sync::DynSync + sync::DynSend>,\n     ),\n \n     /// An AST-based function-like macro.\n     LegacyBang(\n         /// An expander with signature TokenStream -> AST.\n-        Box<dyn TTMacroExpander + sync::Sync + sync::Send>,\n+        Box<dyn TTMacroExpander + sync::DynSync + sync::DynSend>,\n     ),\n \n     /// A token-based attribute macro.\n     Attr(\n         /// An expander with signature (TokenStream, TokenStream) -> TokenStream.\n         /// The first TokenSteam is the attribute itself, the second is the annotated item.\n         /// The produced TokenSteam replaces the input TokenSteam.\n-        Box<dyn AttrProcMacro + sync::Sync + sync::Send>,\n+        Box<dyn AttrProcMacro + sync::DynSync + sync::DynSend>,\n     ),\n \n     /// An AST-based attribute macro.\n     LegacyAttr(\n         /// An expander with signature (AST, AST) -> AST.\n         /// The first AST fragment is the attribute itself, the second is the annotated item.\n         /// The produced AST fragment replaces the input AST fragment.\n-        Box<dyn MultiItemModifier + sync::Sync + sync::Send>,\n+        Box<dyn MultiItemModifier + sync::DynSync + sync::DynSend>,\n     ),\n \n     /// A trivial attribute \"macro\" that does nothing,\n@@ -692,14 +692,14 @@ pub enum SyntaxExtensionKind {\n         /// is handled identically to `LegacyDerive`. It should be migrated to\n         /// a token-based representation like `Bang` and `Attr`, instead of\n         /// using `MultiItemModifier`.\n-        Box<dyn MultiItemModifier + sync::Sync + sync::Send>,\n+        Box<dyn MultiItemModifier + sync::DynSync + sync::DynSend>,\n     ),\n \n     /// An AST-based derive macro.\n     LegacyDerive(\n         /// An expander with signature AST -> AST.\n         /// The produced AST fragment is appended to the input AST fragment.\n-        Box<dyn MultiItemModifier + sync::Sync + sync::Send>,\n+        Box<dyn MultiItemModifier + sync::DynSync + sync::DynSend>,\n     ),\n }\n "}, {"sha": "7e591fd25bfe6a2b7078cd01810e82278e0e1e36", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -464,7 +464,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.astconv.ct_infer(ty, Some(param), inf.span).into()\n                         } else {\n                             self.inferred_params.push(inf.span);\n-                            tcx.const_error(ty).into()\n+                            tcx.const_error_misc(ty).into()\n                         }\n                     }\n                     _ => unreachable!(),\n@@ -518,7 +518,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             .no_bound_vars()\n                             .expect(\"const parameter types cannot be generic\");\n                         if let Err(guar) = ty.error_reported() {\n-                            return tcx.const_error_with_guaranteed(ty, guar).into();\n+                            return tcx.const_error(ty, guar).into();\n                         }\n                         if !infer_args && has_default {\n                             tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n@@ -527,7 +527,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()\n                             } else {\n                                 // We've already errored above about the mismatch.\n-                                tcx.const_error(ty).into()\n+                                tcx.const_error_misc(ty).into()\n                             }\n                         }\n                     }\n@@ -1387,7 +1387,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         term = match def_kind {\n                             hir::def::DefKind::AssocTy => tcx.ty_error(reported).into(),\n                             hir::def::DefKind::AssocConst => tcx\n-                                .const_error_with_guaranteed(\n+                                .const_error(\n                                     tcx.type_of(assoc_item_def_id)\n                                         .subst(tcx, projection_ty.skip_binder().substs),\n                                     reported,"}, {"sha": "3971a4c01d66116263c7a82f0d76008f0b8e1f18", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -78,7 +78,7 @@ use rustc_errors::{pluralize, struct_span_err, Diagnostic, DiagnosticBuilder};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_index::bit_set::BitSet;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::parse::feature_err;"}, {"sha": "8918553e5f9ae7ff2073a39637e146b1f9a625b7", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::outlives::env::{OutlivesEnvironment, RegionBoundPairs};\n use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::ConstraintCategory;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n     self, AdtKind, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,"}, {"sha": "4524b87a418aa18972dd3ad577a3598a17f94c18", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -8,7 +8,7 @@\n use crate::errors;\n use rustc_errors::{error_code, struct_span_err};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n use rustc_trait_selection::traits;"}, {"sha": "9f00dc418eee90fa75ad494ebd127fe92833840f", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::{GenericParamKind, Node};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, AdtKind, Const, IsSuggestable, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};"}, {"sha": "794812a5ce7d91855cd2d395b48d84c399e4a937", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -17,6 +17,7 @@ use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeNa\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::*;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n@@ -232,8 +233,8 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n \n type ScopeRef<'a> = &'a Scope<'a>;\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         resolve_bound_vars,\n \n         named_variable_map: |tcx, id| tcx.resolve_bound_vars(id).defs.get(&id),"}, {"sha": "e4c6e6e391a112a2a090bc064cd5e579b4fadbcc", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{ForeignItem, ForeignItemKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::def_id::LocalDefId;\n use rustc_trait_selection::traits::{self, ObligationCtxt};"}, {"sha": "612d4ff3df843d25f774888b1d6cb7ca75b11aba", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::{Span, Symbol};\n "}, {"sha": "5cd2cd50c113cfbf3eb512c6c928dc775b351bb7", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -104,7 +104,7 @@ use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::middle;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util;\n use rustc_session::{config::EntryFnType, parse::feature_err};"}, {"sha": "a8596c707f3a440badad32a766854424302b4f66", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,7 +1,7 @@\n use hir::Node;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, CratePredicatesMap, TyCtxt};\n use rustc_span::symbol::sym;"}, {"sha": "3ebd9e134bfa2b08cfe7b5caf822d5e2f95d359b", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -6,7 +6,7 @@\n use rustc_arena::DroplessArena;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, CrateVariancesMap, SubstsRef, Ty, TyCtxt};\n use rustc_middle::ty::{TypeSuperVisitable, TypeVisitable};\n use std::ops::ControlFlow;"}, {"sha": "54b222ade03fbf192147f39b1bf39ce6f1e8fabc", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -68,8 +68,8 @@ use rustc_hir::{HirIdMap, Node};\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_hir_analysis::check::check_abi;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_middle::query::Providers;\n use rustc_middle::traits;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config;\n use rustc_session::Session;"}, {"sha": "cf9290c1a4841e43cf7c1326f27d8d77846cd4c8", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -18,6 +18,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind, Ty, TypeVisitableExt};\n@@ -28,7 +29,7 @@ use rustc_trait_selection::traits::{self, NormalizeExt};\n \n use self::probe::{IsSuggestion, ProbeScope};\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     probe::provide(providers);\n }\n "}, {"sha": "f91f4f887c6a274ba6e523bf7009d37268fafa7c", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -16,6 +16,7 @@ use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::DefineOpaqueTypes;\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n@@ -495,7 +496,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.method_autoderef_steps = method_autoderef_steps;\n }\n "}, {"sha": "59bee69cfffacf447c512160393dd6f44cfeb6ab", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -836,7 +836,7 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 let e = self.report_error(ct);\n                 self.replaced_with_error = Some(e);\n-                self.interner().const_error_with_guaranteed(ct.ty(), e)\n+                self.interner().const_error(ct.ty(), e)\n             }\n         }\n     }"}, {"sha": "79fc02c6c7987b1d83f75fea874e7be6d2c44326", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 42, "deletions": 548, "changes": 590, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -26,24 +26,17 @@ use super::equate::Equate;\n use super::glb::Glb;\n use super::lub::Lub;\n use super::sub::Sub;\n-use super::type_variable::TypeVariableValue;\n-use super::{DefineOpaqueTypes, InferCtxt, MiscVariable, TypeTrace};\n+use super::{DefineOpaqueTypes, InferCtxt, TypeTrace};\n+use crate::infer::generalize::{self, CombineDelegate, Generalization};\n use crate::traits::{Obligation, PredicateObligations};\n-use rustc_data_structures::sso::SsoHashMap;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::infer::canonical::OriginalQueryValues;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{\n-    self, AliasKind, FallibleTypeFolder, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable, TypeVisitableExt,\n-};\n+use rustc_middle::ty::relate::{RelateResult, TypeRelation};\n+use rustc_middle::ty::{self, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitableExt};\n use rustc_middle::ty::{IntType, UintType};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::DUMMY_SP;\n \n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {\n@@ -55,13 +48,6 @@ pub struct CombineFields<'infcx, 'tcx> {\n     pub define_opaque_types: DefineOpaqueTypes,\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub enum RelationDir {\n-    SubtypeOf,\n-    SupertypeOf,\n-    EqTo,\n-}\n-\n impl<'tcx> InferCtxt<'tcx> {\n     pub fn super_combine_tys<R>(\n         &self,\n@@ -152,7 +138,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 Ok(a)\n             }\n \n-            _ => ty::relate::super_relate_tys(relation, a, b),\n+            _ => ty::relate::structurally_relate_tys(relation, a, b),\n         }\n     }\n \n@@ -209,13 +195,13 @@ impl<'tcx> InferCtxt<'tcx> {\n             // HACK: equating both sides with `[const error]` eagerly prevents us\n             // from leaving unconstrained inference vars during things like impl\n             // matching in the solver.\n-            let a_error = self.tcx.const_error_with_guaranteed(a.ty(), guar);\n+            let a_error = self.tcx.const_error(a.ty(), guar);\n             if let ty::ConstKind::Infer(InferConst::Var(vid)) = a.kind() {\n-                return self.unify_const_variable(vid, a_error);\n+                return self.unify_const_variable(vid, a_error, relation.param_env());\n             }\n-            let b_error = self.tcx.const_error_with_guaranteed(b.ty(), guar);\n+            let b_error = self.tcx.const_error(b.ty(), guar);\n             if let ty::ConstKind::Infer(InferConst::Var(vid)) = b.kind() {\n-                return self.unify_const_variable(vid, b_error);\n+                return self.unify_const_variable(vid, b_error, relation.param_env());\n             }\n \n             return Ok(if relation.a_is_expected() { a_error } else { b_error });\n@@ -237,11 +223,11 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n \n             (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {\n-                return self.unify_const_variable(vid, b);\n+                return self.unify_const_variable(vid, b, relation.param_env());\n             }\n \n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n-                return self.unify_const_variable(vid, a);\n+                return self.unify_const_variable(vid, a, relation.param_env());\n             }\n             (ty::ConstKind::Unevaluated(..), _) | (_, ty::ConstKind::Unevaluated(..))\n                 if self.tcx.lazy_normalization() =>\n@@ -252,7 +238,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             _ => {}\n         }\n \n-        ty::relate::super_relate_consts(relation, a, b)\n+        ty::relate::structurally_relate_consts(relation, a, b)\n     }\n \n     /// Unifies the const variable `target_vid` with the given constant.\n@@ -294,24 +280,17 @@ impl<'tcx> InferCtxt<'tcx> {\n         &self,\n         target_vid: ty::ConstVid<'tcx>,\n         ct: ty::Const<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        let (for_universe, span) = {\n-            let mut inner = self.inner.borrow_mut();\n-            let variable_table = &mut inner.const_unification_table();\n-            let var_value = variable_table.probe_value(target_vid);\n-            match var_value.val {\n-                ConstVariableValue::Known { value } => {\n-                    bug!(\"instantiating {:?} which has a known value {:?}\", target_vid, value)\n-                }\n-                ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),\n-            }\n-        };\n-        let value = ct.try_fold_with(&mut ConstInferUnifier {\n-            infcx: self,\n-            span,\n-            for_universe,\n+        let span =\n+            self.inner.borrow_mut().const_unification_table().probe_value(target_vid).origin.span;\n+        let Generalization { value, needs_wf: _ } = generalize::generalize(\n+            self,\n+            &mut CombineDelegate { infcx: self, span, param_env },\n+            ct,\n             target_vid,\n-        })?;\n+            ty::Variance::Invariant,\n+        )?;\n \n         self.inner.borrow_mut().const_unification_table().union_value(\n             target_vid,\n@@ -392,12 +371,10 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n     pub fn instantiate(\n         &mut self,\n         a_ty: Ty<'tcx>,\n-        dir: RelationDir,\n+        ambient_variance: ty::Variance,\n         b_vid: ty::TyVid,\n         a_is_expected: bool,\n     ) -> RelateResult<'tcx, ()> {\n-        use self::RelationDir::*;\n-\n         // Get the actual variable that b_vid has been inferred to\n         debug_assert!(self.infcx.inner.borrow_mut().type_variables().probe(b_vid).is_unknown());\n \n@@ -412,7 +389,18 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         // `'?2` and `?3` are fresh region/type inference\n         // variables. (Down below, we will relate `a_ty <: b_ty`,\n         // adding constraints like `'x: '?2` and `?1 <: ?3`.)\n-        let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;\n+        let Generalization { value: b_ty, needs_wf } = generalize::generalize(\n+            self.infcx,\n+            &mut CombineDelegate {\n+                infcx: self.infcx,\n+                param_env: self.param_env,\n+                span: self.trace.span(),\n+            },\n+            a_ty,\n+            b_vid,\n+            ambient_variance,\n+        )?;\n+\n         debug!(?b_ty);\n         self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);\n \n@@ -431,78 +419,23 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         // relations wind up attributed to the same spans. We need\n         // to associate causes/spans with each of the relations in\n         // the stack to get this right.\n-        match dir {\n-            EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),\n-            SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),\n-            SupertypeOf => self.sub(a_is_expected).relate_with_variance(\n+        match ambient_variance {\n+            ty::Variance::Invariant => self.equate(a_is_expected).relate(a_ty, b_ty),\n+            ty::Variance::Covariant => self.sub(a_is_expected).relate(a_ty, b_ty),\n+            ty::Variance::Contravariant => self.sub(a_is_expected).relate_with_variance(\n                 ty::Contravariant,\n                 ty::VarianceDiagInfo::default(),\n                 a_ty,\n                 b_ty,\n             ),\n+            ty::Variance::Bivariant => {\n+                unreachable!(\"no code should be generalizing bivariantly (currently)\")\n+            }\n         }?;\n \n         Ok(())\n     }\n \n-    /// Attempts to generalize `ty` for the type variable `for_vid`.\n-    /// This checks for cycle -- that is, whether the type `ty`\n-    /// references `for_vid`. The `dir` is the \"direction\" for which we\n-    /// a performing the generalization (i.e., are we producing a type\n-    /// that can be used as a supertype etc).\n-    ///\n-    /// Preconditions:\n-    ///\n-    /// - `for_vid` is a \"root vid\"\n-    #[instrument(skip(self), level = \"trace\", ret)]\n-    fn generalize(\n-        &self,\n-        ty: Ty<'tcx>,\n-        for_vid: ty::TyVid,\n-        dir: RelationDir,\n-    ) -> RelateResult<'tcx, Generalization<'tcx>> {\n-        // Determine the ambient variance within which `ty` appears.\n-        // The surrounding equation is:\n-        //\n-        //     ty [op] ty2\n-        //\n-        // where `op` is either `==`, `<:`, or `:>`. This maps quite\n-        // naturally.\n-        let ambient_variance = match dir {\n-            RelationDir::EqTo => ty::Invariant,\n-            RelationDir::SubtypeOf => ty::Covariant,\n-            RelationDir::SupertypeOf => ty::Contravariant,\n-        };\n-\n-        trace!(?ambient_variance);\n-\n-        let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {\n-            v @ TypeVariableValue::Known { .. } => {\n-                bug!(\"instantiating {:?} which has a known value {:?}\", for_vid, v,)\n-            }\n-            TypeVariableValue::Unknown { universe } => universe,\n-        };\n-\n-        trace!(?for_universe);\n-        trace!(?self.trace);\n-\n-        let mut generalize = Generalizer {\n-            infcx: self.infcx,\n-            cause: &self.trace.cause,\n-            for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),\n-            for_universe,\n-            ambient_variance,\n-            needs_wf: false,\n-            root_ty: ty,\n-            param_env: self.param_env,\n-            cache: SsoHashMap::new(),\n-        };\n-\n-        let ty = generalize.relate(ty, ty)?;\n-        let needs_wf = generalize.needs_wf;\n-        Ok(Generalization { ty, needs_wf })\n-    }\n-\n     pub fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n         self.obligations.extend(obligations.into_iter());\n     }\n@@ -514,313 +447,6 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n     }\n }\n \n-struct Generalizer<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'tcx>,\n-\n-    /// The span, used when creating new type variables and things.\n-    cause: &'cx ObligationCause<'tcx>,\n-\n-    /// The vid of the type variable that is in the process of being\n-    /// instantiated; if we find this within the type we are folding,\n-    /// that means we would have created a cyclic type.\n-    for_vid_sub_root: ty::TyVid,\n-\n-    /// The universe of the type variable that is in the process of\n-    /// being instantiated. Any fresh variables that we create in this\n-    /// process should be in that same universe.\n-    for_universe: ty::UniverseIndex,\n-\n-    /// Track the variance as we descend into the type.\n-    ambient_variance: ty::Variance,\n-\n-    /// See the field `needs_wf` in `Generalization`.\n-    needs_wf: bool,\n-\n-    /// The root type that we are generalizing. Used when reporting cycles.\n-    root_ty: Ty<'tcx>,\n-\n-    param_env: ty::ParamEnv<'tcx>,\n-\n-    cache: SsoHashMap<Ty<'tcx>, Ty<'tcx>>,\n-}\n-\n-/// Result from a generalization operation. This includes\n-/// not only the generalized type, but also a bool flag\n-/// indicating whether further WF checks are needed.\n-#[derive(Debug)]\n-struct Generalization<'tcx> {\n-    ty: Ty<'tcx>,\n-\n-    /// If true, then the generalized type may not be well-formed,\n-    /// even if the source type is well-formed, so we should add an\n-    /// additional check to enforce that it is. This arises in\n-    /// particular around 'bivariant' type parameters that are only\n-    /// constrained by a where-clause. As an example, imagine a type:\n-    ///\n-    ///     struct Foo<A, B> where A: Iterator<Item = B> {\n-    ///         data: A\n-    ///     }\n-    ///\n-    /// here, `A` will be covariant, but `B` is\n-    /// unconstrained. However, whatever it is, for `Foo` to be WF, it\n-    /// must be equal to `A::Item`. If we have an input `Foo<?A, ?B>`,\n-    /// then after generalization we will wind up with a type like\n-    /// `Foo<?C, ?D>`. When we enforce that `Foo<?A, ?B> <: Foo<?C,\n-    /// ?D>` (or `>:`), we will wind up with the requirement that `?A\n-    /// <: ?C`, but no particular relationship between `?B` and `?D`\n-    /// (after all, we do not know the variance of the normalized form\n-    /// of `A::Item` with respect to `A`). If we do nothing else, this\n-    /// may mean that `?D` goes unconstrained (as in #41677). So, in\n-    /// this scenario where we create a new type variable in a\n-    /// bivariant context, we set the `needs_wf` flag to true. This\n-    /// will force the calling code to check that `WF(Foo<?C, ?D>)`\n-    /// holds, which in turn implies that `?C::Item == ?D`. So once\n-    /// `?C` is constrained, that should suffice to restrict `?D`.\n-    needs_wf: bool,\n-}\n-\n-impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n-    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.param_env\n-    }\n-\n-    fn tag(&self) -> &'static str {\n-        \"Generalizer\"\n-    }\n-\n-    fn a_is_expected(&self) -> bool {\n-        true\n-    }\n-\n-    fn binders<T>(\n-        &mut self,\n-        a: ty::Binder<'tcx, T>,\n-        b: ty::Binder<'tcx, T>,\n-    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n-    where\n-        T: Relate<'tcx>,\n-    {\n-        Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n-    }\n-\n-    fn relate_item_substs(\n-        &mut self,\n-        item_def_id: DefId,\n-        a_subst: SubstsRef<'tcx>,\n-        b_subst: SubstsRef<'tcx>,\n-    ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n-        if self.ambient_variance == ty::Variance::Invariant {\n-            // Avoid fetching the variance if we are in an invariant\n-            // context; no need, and it can induce dependency cycles\n-            // (e.g., #41849).\n-            relate::relate_substs(self, a_subst, b_subst)\n-        } else {\n-            let tcx = self.tcx();\n-            let opt_variances = tcx.variances_of(item_def_id);\n-            relate::relate_substs_with_variances(\n-                self,\n-                item_def_id,\n-                &opt_variances,\n-                a_subst,\n-                b_subst,\n-                true,\n-            )\n-        }\n-    }\n-\n-    fn relate_with_variance<T: Relate<'tcx>>(\n-        &mut self,\n-        variance: ty::Variance,\n-        _info: ty::VarianceDiagInfo<'tcx>,\n-        a: T,\n-        b: T,\n-    ) -> RelateResult<'tcx, T> {\n-        let old_ambient_variance = self.ambient_variance;\n-        self.ambient_variance = self.ambient_variance.xform(variance);\n-\n-        let result = self.relate(a, b);\n-        self.ambient_variance = old_ambient_variance;\n-        result\n-    }\n-\n-    fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n-\n-        if let Some(&result) = self.cache.get(&t) {\n-            return Ok(result);\n-        }\n-        debug!(\"generalize: t={:?}\", t);\n-\n-        // Check to see whether the type we are generalizing references\n-        // any other type variable related to `vid` via\n-        // subtyping. This is basically our \"occurs check\", preventing\n-        // us from creating infinitely sized types.\n-        let result = match *t.kind() {\n-            ty::Infer(ty::TyVar(vid)) => {\n-                let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n-                let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);\n-                if sub_vid == self.for_vid_sub_root {\n-                    // If sub-roots are equal, then `for_vid` and\n-                    // `vid` are related via subtyping.\n-                    Err(TypeError::CyclicTy(self.root_ty))\n-                } else {\n-                    let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);\n-                    match probe {\n-                        TypeVariableValue::Known { value: u } => {\n-                            debug!(\"generalize: known value {:?}\", u);\n-                            self.relate(u, u)\n-                        }\n-                        TypeVariableValue::Unknown { universe } => {\n-                            match self.ambient_variance {\n-                                // Invariant: no need to make a fresh type variable.\n-                                ty::Invariant => {\n-                                    if self.for_universe.can_name(universe) {\n-                                        return Ok(t);\n-                                    }\n-                                }\n-\n-                                // Bivariant: make a fresh var, but we\n-                                // may need a WF predicate. See\n-                                // comment on `needs_wf` field for\n-                                // more info.\n-                                ty::Bivariant => self.needs_wf = true,\n-\n-                                // Co/contravariant: this will be\n-                                // sufficiently constrained later on.\n-                                ty::Covariant | ty::Contravariant => (),\n-                            }\n-\n-                            let origin =\n-                                *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);\n-                            let new_var_id = self\n-                                .infcx\n-                                .inner\n-                                .borrow_mut()\n-                                .type_variables()\n-                                .new_var(self.for_universe, origin);\n-                            let u = self.tcx().mk_ty_var(new_var_id);\n-\n-                            // Record that we replaced `vid` with `new_var_id` as part of a generalization\n-                            // operation. This is needed to detect cyclic types. To see why, see the\n-                            // docs in the `type_variables` module.\n-                            self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);\n-                            debug!(\"generalize: replacing original vid={:?} with new={:?}\", vid, u);\n-                            Ok(u)\n-                        }\n-                    }\n-                }\n-            }\n-            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n-                // No matter what mode we are in,\n-                // integer/floating-point types must be equal to be\n-                // relatable.\n-                Ok(t)\n-            }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                let s = self.relate(substs, substs)?;\n-                Ok(if s == substs { t } else { self.infcx.tcx.mk_opaque(def_id, s) })\n-            }\n-            _ => relate::super_relate_tys(self, t, t),\n-        }?;\n-\n-        self.cache.insert(t, result);\n-        Ok(result)\n-    }\n-\n-    fn regions(\n-        &mut self,\n-        r: ty::Region<'tcx>,\n-        r2: ty::Region<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n-\n-        debug!(\"generalize: regions r={:?}\", r);\n-\n-        match *r {\n-            // Never make variables for regions bound within the type itself,\n-            // nor for erased regions.\n-            ty::ReLateBound(..) | ty::ReErased => {\n-                return Ok(r);\n-            }\n-\n-            ty::ReError(_) => {\n-                return Ok(r);\n-            }\n-\n-            ty::RePlaceholder(..)\n-            | ty::ReVar(..)\n-            | ty::ReStatic\n-            | ty::ReEarlyBound(..)\n-            | ty::ReFree(..) => {\n-                // see common code below\n-            }\n-        }\n-\n-        // If we are in an invariant context, we can re-use the region\n-        // as is, unless it happens to be in some universe that we\n-        // can't name. (In the case of a region *variable*, we could\n-        // use it if we promoted it into our universe, but we don't\n-        // bother.)\n-        if let ty::Invariant = self.ambient_variance {\n-            let r_universe = self.infcx.universe_of_region(r);\n-            if self.for_universe.can_name(r_universe) {\n-                return Ok(r);\n-            }\n-        }\n-\n-        // FIXME: This is non-ideal because we don't give a\n-        // very descriptive origin for this region variable.\n-        Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))\n-    }\n-\n-    fn consts(\n-        &mut self,\n-        c: ty::Const<'tcx>,\n-        c2: ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n-\n-        match c.kind() {\n-            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                let mut inner = self.infcx.inner.borrow_mut();\n-                let variable_table = &mut inner.const_unification_table();\n-                let var_value = variable_table.probe_value(vid);\n-                match var_value.val {\n-                    ConstVariableValue::Known { value: u } => {\n-                        drop(inner);\n-                        self.relate(u, u)\n-                    }\n-                    ConstVariableValue::Unknown { universe } => {\n-                        if self.for_universe.can_name(universe) {\n-                            Ok(c)\n-                        } else {\n-                            let new_var_id = variable_table.new_key(ConstVarValue {\n-                                origin: var_value.origin,\n-                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n-                            });\n-                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n-                        }\n-                    }\n-                }\n-            }\n-            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n-                let substs = self.relate_with_variance(\n-                    ty::Variance::Invariant,\n-                    ty::VarianceDiagInfo::default(),\n-                    substs,\n-                    substs,\n-                )?;\n-                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n-            }\n-            _ => relate::super_relate_consts(self, c, c),\n-        }\n-    }\n-}\n-\n pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n     /// Register obligations that must hold in order for this relation to hold\n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>);\n@@ -873,135 +499,3 @@ fn float_unification_error<'tcx>(\n     let (ty::FloatVarValue(a), ty::FloatVarValue(b)) = v;\n     TypeError::FloatMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n-\n-struct ConstInferUnifier<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'tcx>,\n-\n-    span: Span,\n-\n-    for_universe: ty::UniverseIndex,\n-\n-    /// The vid of the const variable that is in the process of being\n-    /// instantiated; if we find this within the const we are folding,\n-    /// that means we would have created a cyclic const.\n-    target_vid: ty::ConstVid<'tcx>,\n-}\n-\n-impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n-    type Error = TypeError<'tcx>;\n-\n-    fn interner(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self), ret)]\n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, TypeError<'tcx>> {\n-        match t.kind() {\n-            &ty::Infer(ty::TyVar(vid)) => {\n-                let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n-                let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);\n-                match probe {\n-                    TypeVariableValue::Known { value: u } => {\n-                        debug!(\"ConstOccursChecker: known value {:?}\", u);\n-                        u.try_fold_with(self)\n-                    }\n-                    TypeVariableValue::Unknown { universe } => {\n-                        if self.for_universe.can_name(universe) {\n-                            return Ok(t);\n-                        }\n-\n-                        let origin =\n-                            *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);\n-                        let new_var_id = self\n-                            .infcx\n-                            .inner\n-                            .borrow_mut()\n-                            .type_variables()\n-                            .new_var(self.for_universe, origin);\n-                        Ok(self.interner().mk_ty_var(new_var_id))\n-                    }\n-                }\n-            }\n-            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => Ok(t),\n-            _ => t.try_super_fold_with(self),\n-        }\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self), ret)]\n-    fn try_fold_region(\n-        &mut self,\n-        r: ty::Region<'tcx>,\n-    ) -> Result<ty::Region<'tcx>, TypeError<'tcx>> {\n-        debug!(\"ConstInferUnifier: r={:?}\", r);\n-\n-        match *r {\n-            // Never make variables for regions bound within the type itself,\n-            // nor for erased regions.\n-            ty::ReLateBound(..) | ty::ReErased | ty::ReError(_) => {\n-                return Ok(r);\n-            }\n-\n-            ty::RePlaceholder(..)\n-            | ty::ReVar(..)\n-            | ty::ReStatic\n-            | ty::ReEarlyBound(..)\n-            | ty::ReFree(..) => {\n-                // see common code below\n-            }\n-        }\n-\n-        let r_universe = self.infcx.universe_of_region(r);\n-        if self.for_universe.can_name(r_universe) {\n-            return Ok(r);\n-        } else {\n-            // FIXME: This is non-ideal because we don't give a\n-            // very descriptive origin for this region variable.\n-            Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))\n-        }\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self), ret)]\n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, TypeError<'tcx>> {\n-        match c.kind() {\n-            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                // Check if the current unification would end up\n-                // unifying `target_vid` with a const which contains\n-                // an inference variable which is unioned with `target_vid`.\n-                //\n-                // Not doing so can easily result in stack overflows.\n-                if self\n-                    .infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .const_unification_table()\n-                    .unioned(self.target_vid, vid)\n-                {\n-                    return Err(TypeError::CyclicConst(c));\n-                }\n-\n-                let var_value =\n-                    self.infcx.inner.borrow_mut().const_unification_table().probe_value(vid);\n-                match var_value.val {\n-                    ConstVariableValue::Known { value: u } => u.try_fold_with(self),\n-                    ConstVariableValue::Unknown { universe } => {\n-                        if self.for_universe.can_name(universe) {\n-                            Ok(c)\n-                        } else {\n-                            let new_var_id =\n-                                self.infcx.inner.borrow_mut().const_unification_table().new_key(\n-                                    ConstVarValue {\n-                                        origin: var_value.origin,\n-                                        val: ConstVariableValue::Unknown {\n-                                            universe: self.for_universe,\n-                                        },\n-                                    },\n-                                );\n-                            Ok(self.interner().mk_const(new_var_id, c.ty()))\n-                        }\n-                    }\n-                }\n-            }\n-            _ => c.try_super_fold_with(self),\n-        }\n-    }\n-}"}, {"sha": "793505e4ab23dec08c3d25e85eef86dfc018e26f", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::DefineOpaqueTypes;\n use crate::traits::PredicateObligations;\n \n-use super::combine::{CombineFields, ObligationEmittingRelation, RelationDir};\n+use super::combine::{CombineFields, ObligationEmittingRelation};\n use super::Subtype;\n \n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -88,11 +88,11 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n             }\n \n             (&ty::Infer(TyVar(a_id)), _) => {\n-                self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;\n+                self.fields.instantiate(b, ty::Invariant, a_id, self.a_is_expected)?;\n             }\n \n             (_, &ty::Infer(TyVar(b_id))) => {\n-                self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;\n+                self.fields.instantiate(a, ty::Invariant, b_id, self.a_is_expected)?;\n             }\n \n             ("}, {"sha": "ad4f5058b5ecde299b5f8b48838930492e162a3a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2723,7 +2723,7 @@ impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n             | (ty::Infer(ty::InferTy::TyVar(_)), _)\n             | (_, ty::Infer(ty::InferTy::TyVar(_))) => Ok(a),\n             (ty::Infer(_), _) | (_, ty::Infer(_)) => Err(TypeError::Mismatch),\n-            _ => relate::super_relate_tys(self, a, b),\n+            _ => relate::structurally_relate_tys(self, a, b),\n         }\n     }\n "}, {"sha": "d4a1dacde1047520cf713ba0201f92f11dd1bbe8", "filename": "compiler/rustc_infer/src/infer/generalize.rs", "status": "added", "additions": 479, "deletions": 0, "changes": 479, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fgeneralize.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,479 @@\n+use rustc_data_structures::sso::SsoHashMap;\n+use rustc_hir::def_id::DefId;\n+use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n+use rustc_middle::ty::error::TypeError;\n+use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use rustc_middle::ty::{self, InferConst, Term, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_span::Span;\n+\n+use crate::infer::nll_relate::TypeRelatingDelegate;\n+use crate::infer::type_variable::TypeVariableValue;\n+use crate::infer::{InferCtxt, RegionVariableOrigin};\n+\n+/// Attempts to generalize `term` for the type variable `for_vid`.\n+/// This checks for cycles -- that is, whether the type `term`\n+/// references `for_vid`.\n+pub(super) fn generalize<'tcx, D: GeneralizerDelegate<'tcx>, T: Into<Term<'tcx>> + Relate<'tcx>>(\n+    infcx: &InferCtxt<'tcx>,\n+    delegate: &mut D,\n+    term: T,\n+    for_vid: impl Into<ty::TermVid<'tcx>>,\n+    ambient_variance: ty::Variance,\n+) -> RelateResult<'tcx, Generalization<T>> {\n+    let (for_universe, root_vid) = match for_vid.into() {\n+        ty::TermVid::Ty(ty_vid) => (\n+            infcx.probe_ty_var(ty_vid).unwrap_err(),\n+            ty::TermVid::Ty(infcx.inner.borrow_mut().type_variables().sub_root_var(ty_vid)),\n+        ),\n+        ty::TermVid::Const(ct_vid) => (\n+            infcx.probe_const_var(ct_vid).unwrap_err(),\n+            ty::TermVid::Const(infcx.inner.borrow_mut().const_unification_table().find(ct_vid)),\n+        ),\n+    };\n+\n+    let mut generalizer = Generalizer {\n+        infcx,\n+        delegate,\n+        ambient_variance,\n+        root_vid,\n+        for_universe,\n+        root_term: term.into(),\n+        needs_wf: false,\n+        cache: Default::default(),\n+    };\n+\n+    assert!(!term.has_escaping_bound_vars());\n+    let value = generalizer.relate(term, term)?;\n+    let needs_wf = generalizer.needs_wf;\n+    Ok(Generalization { value, needs_wf })\n+}\n+\n+/// Abstracts the handling of region vars between HIR and MIR/NLL typechecking\n+/// in the generalizer code.\n+pub trait GeneralizerDelegate<'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx>;\n+\n+    fn forbid_inference_vars() -> bool;\n+\n+    fn generalize_region(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx>;\n+}\n+\n+pub struct CombineDelegate<'cx, 'tcx> {\n+    pub infcx: &'cx InferCtxt<'tcx>,\n+    pub param_env: ty::ParamEnv<'tcx>,\n+    pub span: Span,\n+}\n+\n+impl<'tcx> GeneralizerDelegate<'tcx> for CombineDelegate<'_, 'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n+    fn forbid_inference_vars() -> bool {\n+        false\n+    }\n+\n+    fn generalize_region(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n+        // FIXME: This is non-ideal because we don't give a\n+        // very descriptive origin for this region variable.\n+        self.infcx\n+            .next_region_var_in_universe(RegionVariableOrigin::MiscVariable(self.span), universe)\n+    }\n+}\n+\n+impl<'tcx, T> GeneralizerDelegate<'tcx> for T\n+where\n+    T: TypeRelatingDelegate<'tcx>,\n+{\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        <Self as TypeRelatingDelegate<'tcx>>::param_env(self)\n+    }\n+\n+    fn forbid_inference_vars() -> bool {\n+        <Self as TypeRelatingDelegate<'tcx>>::forbid_inference_vars()\n+    }\n+\n+    fn generalize_region(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n+        <Self as TypeRelatingDelegate<'tcx>>::generalize_existential(self, universe)\n+    }\n+}\n+\n+/// The \"generalizer\" is used when handling inference variables.\n+///\n+/// The basic strategy for handling a constraint like `?A <: B` is to\n+/// apply a \"generalization strategy\" to the term `B` -- this replaces\n+/// all the lifetimes in the term `B` with fresh inference variables.\n+/// (You can read more about the strategy in this [blog post].)\n+///\n+/// As an example, if we had `?A <: &'x u32`, we would generalize `&'x\n+/// u32` to `&'0 u32` where `'0` is a fresh variable. This becomes the\n+/// value of `A`. Finally, we relate `&'0 u32 <: &'x u32`, which\n+/// establishes `'0: 'x` as a constraint.\n+///\n+/// [blog post]: https://is.gd/0hKvIr\n+struct Generalizer<'me, 'tcx, D> {\n+    infcx: &'me InferCtxt<'tcx>,\n+\n+    /// This is used to abstract the behaviors of the three previous\n+    /// generalizer-like implementations (`Generalizer`, `TypeGeneralizer`,\n+    /// and `ConstInferUnifier`). See [`GeneralizerDelegate`] for more\n+    /// information.\n+    delegate: &'me mut D,\n+\n+    /// After we generalize this type, we are going to relate it to\n+    /// some other type. What will be the variance at this point?\n+    ambient_variance: ty::Variance,\n+\n+    /// The vid of the type variable that is in the process of being\n+    /// instantiated. If we find this within the value we are folding,\n+    /// that means we would have created a cyclic value.\n+    root_vid: ty::TermVid<'tcx>,\n+\n+    /// The universe of the type variable that is in the process of being\n+    /// instantiated. If we find anything that this universe cannot name,\n+    /// we reject the relation.\n+    for_universe: ty::UniverseIndex,\n+\n+    /// The root term (const or type) we're generalizing. Used for cycle errors.\n+    root_term: Term<'tcx>,\n+\n+    cache: SsoHashMap<Ty<'tcx>, Ty<'tcx>>,\n+\n+    /// See the field `needs_wf` in `Generalization`.\n+    needs_wf: bool,\n+}\n+\n+impl<'tcx, D> Generalizer<'_, 'tcx, D> {\n+    /// Create an error that corresponds to the term kind in `root_term`\n+    fn cyclic_term_error(&self) -> TypeError<'tcx> {\n+        match self.root_term.unpack() {\n+            ty::TermKind::Ty(ty) => TypeError::CyclicTy(ty),\n+            ty::TermKind::Const(ct) => TypeError::CyclicConst(ct),\n+        }\n+    }\n+}\n+\n+impl<'tcx, D> TypeRelation<'tcx> for Generalizer<'_, 'tcx, D>\n+where\n+    D: GeneralizerDelegate<'tcx>,\n+{\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.infcx.tcx\n+    }\n+\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.delegate.param_env()\n+    }\n+\n+    fn tag(&self) -> &'static str {\n+        \"Generalizer\"\n+    }\n+\n+    fn a_is_expected(&self) -> bool {\n+        true\n+    }\n+\n+    fn relate_item_substs(\n+        &mut self,\n+        item_def_id: DefId,\n+        a_subst: ty::SubstsRef<'tcx>,\n+        b_subst: ty::SubstsRef<'tcx>,\n+    ) -> RelateResult<'tcx, ty::SubstsRef<'tcx>> {\n+        if self.ambient_variance == ty::Variance::Invariant {\n+            // Avoid fetching the variance if we are in an invariant\n+            // context; no need, and it can induce dependency cycles\n+            // (e.g., #41849).\n+            relate::relate_substs(self, a_subst, b_subst)\n+        } else {\n+            let tcx = self.tcx();\n+            let opt_variances = tcx.variances_of(item_def_id);\n+            relate::relate_substs_with_variances(\n+                self,\n+                item_def_id,\n+                opt_variances,\n+                a_subst,\n+                b_subst,\n+                true,\n+            )\n+        }\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self, variance, b), ret)]\n+    fn relate_with_variance<T: Relate<'tcx>>(\n+        &mut self,\n+        variance: ty::Variance,\n+        _info: ty::VarianceDiagInfo<'tcx>,\n+        a: T,\n+        b: T,\n+    ) -> RelateResult<'tcx, T> {\n+        let old_ambient_variance = self.ambient_variance;\n+        self.ambient_variance = self.ambient_variance.xform(variance);\n+        debug!(?self.ambient_variance, \"new ambient variance\");\n+        let r = self.relate(a, b)?;\n+        self.ambient_variance = old_ambient_variance;\n+        Ok(r)\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self, t2), ret)]\n+    fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+        assert_eq!(t, t2); // we are misusing TypeRelation here; both LHS and RHS ought to be ==\n+\n+        if let Some(&result) = self.cache.get(&t) {\n+            return Ok(result);\n+        }\n+\n+        // Check to see whether the type we are generalizing references\n+        // any other type variable related to `vid` via\n+        // subtyping. This is basically our \"occurs check\", preventing\n+        // us from creating infinitely sized types.\n+        let g = match *t.kind() {\n+            ty::Infer(ty::TyVar(_)) | ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_))\n+                if D::forbid_inference_vars() =>\n+            {\n+                bug!(\"unexpected inference variable encountered in NLL generalization: {t}\");\n+            }\n+\n+            ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+                bug!(\"unexpected infer type: {t}\")\n+            }\n+\n+            ty::Infer(ty::TyVar(vid)) => {\n+                let mut inner = self.infcx.inner.borrow_mut();\n+                let vid = inner.type_variables().root_var(vid);\n+                let sub_vid = inner.type_variables().sub_root_var(vid);\n+\n+                if ty::TermVid::Ty(sub_vid) == self.root_vid {\n+                    // If sub-roots are equal, then `root_vid` and\n+                    // `vid` are related via subtyping.\n+                    Err(self.cyclic_term_error())\n+                } else {\n+                    let probe = inner.type_variables().probe(vid);\n+                    match probe {\n+                        TypeVariableValue::Known { value: u } => {\n+                            drop(inner);\n+                            self.relate(u, u)\n+                        }\n+                        TypeVariableValue::Unknown { universe } => {\n+                            match self.ambient_variance {\n+                                // Invariant: no need to make a fresh type variable\n+                                // if we can name the universe.\n+                                ty::Invariant => {\n+                                    if self.for_universe.can_name(universe) {\n+                                        return Ok(t);\n+                                    }\n+                                }\n+\n+                                // Bivariant: make a fresh var, but we\n+                                // may need a WF predicate. See\n+                                // comment on `needs_wf` field for\n+                                // more info.\n+                                ty::Bivariant => self.needs_wf = true,\n+\n+                                // Co/contravariant: this will be\n+                                // sufficiently constrained later on.\n+                                ty::Covariant | ty::Contravariant => (),\n+                            }\n+\n+                            let origin = *inner.type_variables().var_origin(vid);\n+                            let new_var_id =\n+                                inner.type_variables().new_var(self.for_universe, origin);\n+                            let u = self.tcx().mk_ty_var(new_var_id);\n+\n+                            // Record that we replaced `vid` with `new_var_id` as part of a generalization\n+                            // operation. This is needed to detect cyclic types. To see why, see the\n+                            // docs in the `type_variables` module.\n+                            inner.type_variables().sub(vid, new_var_id);\n+                            debug!(\"replacing original vid={:?} with new={:?}\", vid, u);\n+                            Ok(u)\n+                        }\n+                    }\n+                }\n+            }\n+\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n+                // No matter what mode we are in,\n+                // integer/floating-point types must be equal to be\n+                // relatable.\n+                Ok(t)\n+            }\n+\n+            ty::Placeholder(placeholder) => {\n+                if self.for_universe.can_name(placeholder.universe) {\n+                    Ok(t)\n+                } else {\n+                    debug!(\n+                        \"root universe {:?} cannot name placeholder in universe {:?}\",\n+                        self.for_universe, placeholder.universe\n+                    );\n+                    Err(TypeError::Mismatch)\n+                }\n+            }\n+\n+            _ => relate::structurally_relate_tys(self, t, t),\n+        }?;\n+\n+        self.cache.insert(t, g);\n+        Ok(g)\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self, r2), ret)]\n+    fn regions(\n+        &mut self,\n+        r: ty::Region<'tcx>,\n+        r2: ty::Region<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n+        assert_eq!(r, r2); // we are misusing TypeRelation here; both LHS and RHS ought to be ==\n+\n+        match *r {\n+            // Never make variables for regions bound within the type itself,\n+            // nor for erased regions.\n+            ty::ReLateBound(..) | ty::ReErased => {\n+                return Ok(r);\n+            }\n+\n+            // It doesn't really matter for correctness if we generalize ReError,\n+            // since we're already on a doomed compilation path.\n+            ty::ReError(_) => {\n+                return Ok(r);\n+            }\n+\n+            ty::RePlaceholder(..)\n+            | ty::ReVar(..)\n+            | ty::ReStatic\n+            | ty::ReEarlyBound(..)\n+            | ty::ReFree(..) => {\n+                // see common code below\n+            }\n+        }\n+\n+        // If we are in an invariant context, we can re-use the region\n+        // as is, unless it happens to be in some universe that we\n+        // can't name.\n+        if let ty::Invariant = self.ambient_variance {\n+            let r_universe = self.infcx.universe_of_region(r);\n+            if self.for_universe.can_name(r_universe) {\n+                return Ok(r);\n+            }\n+        }\n+\n+        Ok(self.delegate.generalize_region(self.for_universe))\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self, c2), ret)]\n+    fn consts(\n+        &mut self,\n+        c: ty::Const<'tcx>,\n+        c2: ty::Const<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n+        assert_eq!(c, c2); // we are misusing TypeRelation here; both LHS and RHS ought to be ==\n+\n+        match c.kind() {\n+            ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+                bug!(\"unexpected inference variable encountered in NLL generalization: {:?}\", c);\n+            }\n+            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+                // If root const vids are equal, then `root_vid` and\n+                // `vid` are related and we'd be inferring an infinitely\n+                // deep const.\n+                if ty::TermVid::Const(\n+                    self.infcx.inner.borrow_mut().const_unification_table().find(vid),\n+                ) == self.root_vid\n+                {\n+                    return Err(self.cyclic_term_error());\n+                }\n+\n+                let mut inner = self.infcx.inner.borrow_mut();\n+                let variable_table = &mut inner.const_unification_table();\n+                let var_value = variable_table.probe_value(vid);\n+                match var_value.val {\n+                    ConstVariableValue::Known { value: u } => {\n+                        drop(inner);\n+                        self.relate(u, u)\n+                    }\n+                    ConstVariableValue::Unknown { universe } => {\n+                        if self.for_universe.can_name(universe) {\n+                            Ok(c)\n+                        } else {\n+                            let new_var_id = variable_table.new_key(ConstVarValue {\n+                                origin: var_value.origin,\n+                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n+                            });\n+                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n+                        }\n+                    }\n+                }\n+            }\n+            // FIXME: remove this branch once `structurally_relate_consts` is fully\n+            // structural.\n+            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n+                let substs = self.relate_with_variance(\n+                    ty::Variance::Invariant,\n+                    ty::VarianceDiagInfo::default(),\n+                    substs,\n+                    substs,\n+                )?;\n+                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n+            }\n+            ty::ConstKind::Placeholder(placeholder) => {\n+                if self.for_universe.can_name(placeholder.universe) {\n+                    Ok(c)\n+                } else {\n+                    debug!(\n+                        \"root universe {:?} cannot name placeholder in universe {:?}\",\n+                        self.for_universe, placeholder.universe\n+                    );\n+                    Err(TypeError::Mismatch)\n+                }\n+            }\n+            _ => relate::structurally_relate_consts(self, c, c),\n+        }\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn binders<T>(\n+        &mut self,\n+        a: ty::Binder<'tcx, T>,\n+        _: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n+    where\n+        T: Relate<'tcx>,\n+    {\n+        let result = self.relate(a.skip_binder(), a.skip_binder())?;\n+        Ok(a.rebind(result))\n+    }\n+}\n+\n+/// Result from a generalization operation. This includes\n+/// not only the generalized type, but also a bool flag\n+/// indicating whether further WF checks are needed.\n+#[derive(Debug)]\n+pub struct Generalization<T> {\n+    pub value: T,\n+\n+    /// If true, then the generalized type may not be well-formed,\n+    /// even if the source type is well-formed, so we should add an\n+    /// additional check to enforce that it is. This arises in\n+    /// particular around 'bivariant' type parameters that are only\n+    /// constrained by a where-clause. As an example, imagine a type:\n+    ///\n+    ///     struct Foo<A, B> where A: Iterator<Item = B> {\n+    ///         data: A\n+    ///     }\n+    ///\n+    /// here, `A` will be covariant, but `B` is\n+    /// unconstrained. However, whatever it is, for `Foo` to be WF, it\n+    /// must be equal to `A::Item`. If we have an input `Foo<?A, ?B>`,\n+    /// then after generalization we will wind up with a type like\n+    /// `Foo<?C, ?D>`. When we enforce that `Foo<?A, ?B> <: Foo<?C,\n+    /// ?D>` (or `>:`), we will wind up with the requirement that `?A\n+    /// <: ?C`, but no particular relationship between `?B` and `?D`\n+    /// (after all, we do not know the variance of the normalized form\n+    /// of `A::Item` with respect to `A`). If we do nothing else, this\n+    /// may mean that `?D` goes unconstrained (as in #41677). So, in\n+    /// this scenario where we create a new type variable in a\n+    /// bivariant context, we set the `needs_wf` flag to true. This\n+    /// will force the calling code to check that `WF(Foo<?C, ?D>)`\n+    /// holds, which in turn implies that `?C::Item == ?D`. So once\n+    /// `?C` is constrained, that should suffice to restrict `?D`.\n+    pub needs_wf: bool,\n+}"}, {"sha": "e53319e3b86be7102b0233fae0be1547859034b4", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -58,6 +58,7 @@ pub mod error_reporting;\n pub mod free_regions;\n mod freshen;\n mod fudge;\n+mod generalize;\n mod glb;\n mod higher_ranked;\n pub mod lattice;"}, {"sha": "4ae6af5f5be750ee41442446a2f264b7862b0a00", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 16, "deletions": 260, "changes": 276, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -21,21 +21,20 @@\n //!   thing we relate in chalk are basically domain goals and their\n //!   constituents)\n \n-use crate::infer::InferCtxt;\n-use crate::infer::{ConstVarValue, ConstVariableValue};\n-use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::traits::{Obligation, PredicateObligations};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::FnMutDelegate;\n-use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n \n-use super::combine::ObligationEmittingRelation;\n+use crate::infer::combine::ObligationEmittingRelation;\n+use crate::infer::generalize::{self, Generalization};\n+use crate::infer::InferCtxt;\n+use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n+use crate::traits::{Obligation, PredicateObligations};\n \n pub struct TypeRelating<'me, 'tcx, D>\n where\n@@ -198,7 +197,7 @@ where\n             _ => (),\n         }\n \n-        let generalized_ty = self.generalize_value(value_ty, vid)?;\n+        let generalized_ty = self.generalize(value_ty, vid)?;\n         debug!(\"relate_ty_var: generalized_ty = {:?}\", generalized_ty);\n \n         if D::forbid_inference_vars() {\n@@ -217,26 +216,15 @@ where\n         result\n     }\n \n-    fn generalize_value<T: Relate<'tcx>>(\n-        &mut self,\n-        value: T,\n-        for_vid: ty::TyVid,\n-    ) -> RelateResult<'tcx, T> {\n-        let universe = self.infcx.probe_ty_var(for_vid).unwrap_err();\n-\n-        if value.has_escaping_bound_vars() {\n-            bug!(\"trying to instantiate {for_vid:?} with escaping bound vars: {value:?}\");\n-        }\n-\n-        let mut generalizer = TypeGeneralizer {\n-            infcx: self.infcx,\n-            delegate: &mut self.delegate,\n-            ambient_variance: self.ambient_variance,\n-            for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),\n-            universe,\n-        };\n-\n-        generalizer.relate(value, value)\n+    fn generalize(&mut self, ty: Ty<'tcx>, for_vid: ty::TyVid) -> RelateResult<'tcx, Ty<'tcx>> {\n+        let Generalization { value: ty, needs_wf: _ } = generalize::generalize(\n+            self.infcx,\n+            &mut self.delegate,\n+            ty,\n+            for_vid,\n+            self.ambient_variance,\n+        )?;\n+        Ok(ty)\n     }\n \n     fn relate_opaques(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n@@ -716,235 +704,3 @@ where\n         })]);\n     }\n }\n-\n-/// The \"type generalizer\" is used when handling inference variables.\n-///\n-/// The basic strategy for handling a constraint like `?A <: B` is to\n-/// apply a \"generalization strategy\" to the type `B` -- this replaces\n-/// all the lifetimes in the type `B` with fresh inference\n-/// variables. (You can read more about the strategy in this [blog\n-/// post].)\n-///\n-/// As an example, if we had `?A <: &'x u32`, we would generalize `&'x\n-/// u32` to `&'0 u32` where `'0` is a fresh variable. This becomes the\n-/// value of `A`. Finally, we relate `&'0 u32 <: &'x u32`, which\n-/// establishes `'0: 'x` as a constraint.\n-///\n-/// [blog post]: https://is.gd/0hKvIr\n-struct TypeGeneralizer<'me, 'tcx, D>\n-where\n-    D: TypeRelatingDelegate<'tcx>,\n-{\n-    infcx: &'me InferCtxt<'tcx>,\n-\n-    delegate: &'me mut D,\n-\n-    /// After we generalize this type, we are going to relate it to\n-    /// some other type. What will be the variance at this point?\n-    ambient_variance: ty::Variance,\n-\n-    /// The vid of the type variable that is in the process of being\n-    /// instantiated. If we find this within the value we are folding,\n-    /// that means we would have created a cyclic value.\n-    for_vid_sub_root: ty::TyVid,\n-\n-    /// The universe of the type variable that is in the process of being\n-    /// instantiated. If we find anything that this universe cannot name,\n-    /// we reject the relation.\n-    universe: ty::UniverseIndex,\n-}\n-\n-impl<'tcx, D> TypeRelation<'tcx> for TypeGeneralizer<'_, 'tcx, D>\n-where\n-    D: TypeRelatingDelegate<'tcx>,\n-{\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n-    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.delegate.param_env()\n-    }\n-\n-    fn tag(&self) -> &'static str {\n-        \"nll::generalizer\"\n-    }\n-\n-    fn a_is_expected(&self) -> bool {\n-        true\n-    }\n-\n-    fn relate_with_variance<T: Relate<'tcx>>(\n-        &mut self,\n-        variance: ty::Variance,\n-        _info: ty::VarianceDiagInfo<'tcx>,\n-        a: T,\n-        b: T,\n-    ) -> RelateResult<'tcx, T> {\n-        debug!(\n-            \"TypeGeneralizer::relate_with_variance(variance={:?}, a={:?}, b={:?})\",\n-            variance, a, b\n-        );\n-\n-        let old_ambient_variance = self.ambient_variance;\n-        self.ambient_variance = self.ambient_variance.xform(variance);\n-\n-        debug!(\n-            \"TypeGeneralizer::relate_with_variance: ambient_variance = {:?}\",\n-            self.ambient_variance\n-        );\n-\n-        let r = self.relate(a, b)?;\n-\n-        self.ambient_variance = old_ambient_variance;\n-\n-        debug!(\"TypeGeneralizer::relate_with_variance: r={:?}\", r);\n-\n-        Ok(r)\n-    }\n-\n-    fn tys(&mut self, a: Ty<'tcx>, _: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        use crate::infer::type_variable::TypeVariableValue;\n-\n-        debug!(\"TypeGeneralizer::tys(a={:?})\", a);\n-\n-        match *a.kind() {\n-            ty::Infer(ty::TyVar(_)) | ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_))\n-                if D::forbid_inference_vars() =>\n-            {\n-                bug!(\"unexpected inference variable encountered in NLL generalization: {:?}\", a);\n-            }\n-\n-            ty::Infer(ty::TyVar(vid)) => {\n-                let mut inner = self.infcx.inner.borrow_mut();\n-                let variables = &mut inner.type_variables();\n-                let vid = variables.root_var(vid);\n-                let sub_vid = variables.sub_root_var(vid);\n-                if sub_vid == self.for_vid_sub_root {\n-                    // If sub-roots are equal, then `for_vid` and\n-                    // `vid` are related via subtyping.\n-                    debug!(\"TypeGeneralizer::tys: occurs check failed\");\n-                    Err(TypeError::Mismatch)\n-                } else {\n-                    match variables.probe(vid) {\n-                        TypeVariableValue::Known { value: u } => {\n-                            drop(inner);\n-                            self.relate(u, u)\n-                        }\n-                        TypeVariableValue::Unknown { universe: _universe } => {\n-                            if self.ambient_variance == ty::Bivariant {\n-                                // FIXME: we may need a WF predicate (related to #54105).\n-                            }\n-\n-                            let origin = *variables.var_origin(vid);\n-\n-                            // Replacing with a new variable in the universe `self.universe`,\n-                            // it will be unified later with the original type variable in\n-                            // the universe `_universe`.\n-                            let new_var_id = variables.new_var(self.universe, origin);\n-\n-                            let u = self.tcx().mk_ty_var(new_var_id);\n-                            debug!(\"generalize: replacing original vid={:?} with new={:?}\", vid, u);\n-                            Ok(u)\n-                        }\n-                    }\n-                }\n-            }\n-\n-            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n-                // No matter what mode we are in,\n-                // integer/floating-point types must be equal to be\n-                // relatable.\n-                Ok(a)\n-            }\n-\n-            ty::Placeholder(placeholder) => {\n-                if self.universe.cannot_name(placeholder.universe) {\n-                    debug!(\n-                        \"TypeGeneralizer::tys: root universe {:?} cannot name\\\n-                         placeholder in universe {:?}\",\n-                        self.universe, placeholder.universe\n-                    );\n-                    Err(TypeError::Mismatch)\n-                } else {\n-                    Ok(a)\n-                }\n-            }\n-\n-            _ => relate::super_relate_tys(self, a, a),\n-        }\n-    }\n-\n-    fn regions(\n-        &mut self,\n-        a: ty::Region<'tcx>,\n-        _: ty::Region<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        debug!(\"TypeGeneralizer::regions(a={:?})\", a);\n-\n-        if let ty::ReLateBound(..) = *a {\n-            return Ok(a);\n-        }\n-\n-        // For now, we just always create a fresh region variable to\n-        // replace all the regions in the source type. In the main\n-        // type checker, we special case the case where the ambient\n-        // variance is `Invariant` and try to avoid creating a fresh\n-        // region variable, but since this comes up so much less in\n-        // NLL (only when users use `_` etc) it is much less\n-        // important.\n-        //\n-        // As an aside, since these new variables are created in\n-        // `self.universe` universe, this also serves to enforce the\n-        // universe scoping rules.\n-        //\n-        // FIXME(#54105) -- if the ambient variance is bivariant,\n-        // though, we may however need to check well-formedness or\n-        // risk a problem like #41677 again.\n-        let replacement_region_vid = self.delegate.generalize_existential(self.universe);\n-\n-        Ok(replacement_region_vid)\n-    }\n-\n-    fn consts(\n-        &mut self,\n-        a: ty::Const<'tcx>,\n-        _: ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        match a.kind() {\n-            ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n-                bug!(\"unexpected inference variable encountered in NLL generalization: {:?}\", a);\n-            }\n-            ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                let mut inner = self.infcx.inner.borrow_mut();\n-                let variable_table = &mut inner.const_unification_table();\n-                let var_value = variable_table.probe_value(vid);\n-                match var_value.val.known() {\n-                    Some(u) => self.relate(u, u),\n-                    None => {\n-                        let new_var_id = variable_table.new_key(ConstVarValue {\n-                            origin: var_value.origin,\n-                            val: ConstVariableValue::Unknown { universe: self.universe },\n-                        });\n-                        Ok(self.tcx().mk_const(new_var_id, a.ty()))\n-                    }\n-                }\n-            }\n-            ty::ConstKind::Unevaluated(..) if self.tcx().lazy_normalization() => Ok(a),\n-            _ => relate::super_relate_consts(self, a, a),\n-        }\n-    }\n-\n-    fn binders<T>(\n-        &mut self,\n-        a: ty::Binder<'tcx, T>,\n-        _: ty::Binder<'tcx, T>,\n-    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n-    where\n-        T: Relate<'tcx>,\n-    {\n-        debug!(\"TypeGeneralizer::binders(a={:?})\", a);\n-        let result = self.relate(a.skip_binder(), a.skip_binder())?;\n-        Ok(a.rebind(result))\n-    }\n-}"}, {"sha": "cd2462d3c31232b9c09b35b67be415a0870e7562", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -187,7 +187,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         } else if pattern == value {\n             Ok(pattern)\n         } else {\n-            relate::super_relate_tys(self, pattern, value)\n+            relate::structurally_relate_tys(self, pattern, value)\n         }\n     }\n \n@@ -201,7 +201,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         if pattern == value {\n             Ok(pattern)\n         } else {\n-            relate::super_relate_consts(self, pattern, value)\n+            relate::structurally_relate_consts(self, pattern, value)\n         }\n     }\n "}, {"sha": "e0f29a8de8fc823fef77096c8f46b4bd2403572a", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,4 +1,4 @@\n-use super::combine::{CombineFields, RelationDir};\n+use super::combine::CombineFields;\n use super::{DefineOpaqueTypes, ObligationEmittingRelation, SubregionOrigin};\n \n use crate::traits::{Obligation, PredicateObligations};\n@@ -108,11 +108,11 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 Ok(a)\n             }\n             (&ty::Infer(TyVar(a_id)), _) => {\n-                self.fields.instantiate(b, RelationDir::SupertypeOf, a_id, !self.a_is_expected)?;\n+                self.fields.instantiate(b, ty::Contravariant, a_id, !self.a_is_expected)?;\n                 Ok(a)\n             }\n             (_, &ty::Infer(TyVar(b_id))) => {\n-                self.fields.instantiate(a, RelationDir::SubtypeOf, b_id, self.a_is_expected)?;\n+                self.fields.instantiate(a, ty::Covariant, b_id, self.a_is_expected)?;\n                 Ok(a)\n             }\n "}, {"sha": "c9e857141c92a427d251c30a04058bbaf714bc03", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -9,6 +9,7 @@ use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_lint::LintStore;\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::{bug, ty};\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n@@ -37,8 +38,7 @@ pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n-    pub(crate) override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n+    pub(crate) override_queries: Option<fn(&Session, &mut Providers, &mut ExternProviders)>,\n }\n \n impl Compiler {\n@@ -60,6 +60,11 @@ impl Compiler {\n     }\n }\n \n+#[allow(rustc::bad_opt_access)]\n+pub fn set_thread_safe_mode(sopts: &config::UnstableOptions) {\n+    rustc_data_structures::sync::set_dyn_thread_safe_mode(sopts.threads > 1);\n+}\n+\n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n     rustc_span::create_default_session_if_not_set_then(move |_| {\n@@ -270,8 +275,7 @@ pub struct Config {\n     /// the list of queries.\n     ///\n     /// The second parameter is local providers and the third parameter is external providers.\n-    pub override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n+    pub override_queries: Option<fn(&Session, &mut Providers, &mut ExternProviders)>,\n \n     /// This is a callback from the driver that is called to create a codegen backend.\n     pub make_codegen_backend:\n@@ -347,7 +351,7 @@ pub fn try_print_query_stack(handler: &Handler, num_frames: Option<usize>) {\n     // state if it was responsible for triggering the panic.\n     let i = ty::tls::with_context_opt(|icx| {\n         if let Some(icx) = icx {\n-            print_query_stack(QueryCtxt { tcx: icx.tcx }, icx.query, handler, num_frames)\n+            print_query_stack(QueryCtxt::new(icx.tcx), icx.query, handler, num_frames)\n         } else {\n             0\n         }"}, {"sha": "cb10916abb12b4b4bcd98839ad63f999d8369c44", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -17,7 +17,7 @@ use rustc_lint::{unerased_lint_store, BufferedEarlyLint, EarlyCheckNode, LintSto\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, GlobalCtxt, RegisteredTools, TyCtxt};\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n@@ -700,9 +700,12 @@ pub fn create_global_ctxt<'tcx>(\n                 hir_arena,\n                 untracked,\n                 dep_graph,\n-                query_result_on_disk_cache,\n                 rustc_query_impl::query_callbacks(arena),\n-                rustc_query_impl::query_system_fns(local_providers, extern_providers),\n+                rustc_query_impl::query_system(\n+                    local_providers,\n+                    extern_providers,\n+                    query_result_on_disk_cache,\n+                ),\n             )\n         })\n     })"}, {"sha": "2c8014d8b3ab93b32e6f3316031f1971b2356bbc", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::attr;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n "}, {"sha": "d511d2b1280d986c83460e46029f003b8bb8e704", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -582,34 +582,38 @@ impl Cursor<'_> {\n         let mut base = Base::Decimal;\n         if first_digit == '0' {\n             // Attempt to parse encoding base.\n-            let has_digits = match self.first() {\n+            match self.first() {\n                 'b' => {\n                     base = Base::Binary;\n                     self.bump();\n-                    self.eat_decimal_digits()\n+                    if !self.eat_decimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n                 'o' => {\n                     base = Base::Octal;\n                     self.bump();\n-                    self.eat_decimal_digits()\n+                    if !self.eat_decimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n                 'x' => {\n                     base = Base::Hexadecimal;\n                     self.bump();\n-                    self.eat_hexadecimal_digits()\n+                    if !self.eat_hexadecimal_digits() {\n+                        return Int { base, empty_int: true };\n+                    }\n                 }\n-                // Not a base prefix.\n-                '0'..='9' | '_' | '.' | 'e' | 'E' => {\n+                // Not a base prefix; consume additional digits.\n+                '0'..='9' | '_' => {\n                     self.eat_decimal_digits();\n-                    true\n                 }\n+\n+                // Also not a base prefix; nothing more to do here.\n+                '.' | 'e' | 'E' => {}\n+\n                 // Just a 0.\n                 _ => return Int { base, empty_int: false },\n-            };\n-            // Base prefix was provided, but there were no digits\n-            // after it, e.g. \"0x\".\n-            if !has_digits {\n-                return Int { base, empty_int: true };\n             }\n         } else {\n             // No base prefix, parse number in the usual way."}, {"sha": "9b74d1085467a24b97c2ddf5a23f55be2492ae4d", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -647,7 +647,9 @@ declare_lint_pass!(MissingCopyImplementations => [MISSING_COPY_IMPLEMENTATIONS])\n \n impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-        if !cx.effective_visibilities.is_reachable(item.owner_id.def_id) {\n+        if !(cx.effective_visibilities.is_reachable(item.owner_id.def_id)\n+            && cx.tcx.local_visibility(item.owner_id.def_id).is_public())\n+        {\n             return;\n         }\n         let (def, ty) = match item.kind {\n@@ -766,7 +768,9 @@ impl_lint_pass!(MissingDebugImplementations => [MISSING_DEBUG_IMPLEMENTATIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-        if !cx.effective_visibilities.is_reachable(item.owner_id.def_id) {\n+        if !(cx.effective_visibilities.is_reachable(item.owner_id.def_id)\n+            && cx.tcx.local_visibility(item.owner_id.def_id).is_public())\n+        {\n             return;\n         }\n "}, {"sha": "1d0c43e95e0859e1d5c2a33cb7137608e5a67094", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -49,9 +49,9 @@ use std::cell::Cell;\n use std::iter;\n use std::slice;\n \n-type EarlyLintPassFactory = dyn Fn() -> EarlyLintPassObject + sync::Send + sync::Sync;\n+type EarlyLintPassFactory = dyn Fn() -> EarlyLintPassObject + sync::DynSend + sync::DynSync;\n type LateLintPassFactory =\n-    dyn for<'tcx> Fn(TyCtxt<'tcx>) -> LateLintPassObject<'tcx> + sync::Send + sync::Sync;\n+    dyn for<'tcx> Fn(TyCtxt<'tcx>) -> LateLintPassObject<'tcx> + sync::DynSend + sync::DynSync;\n \n /// Information about the registered lints.\n ///\n@@ -169,7 +169,7 @@ impl LintStore {\n \n     pub fn register_early_pass(\n         &mut self,\n-        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::Send + sync::Sync,\n+        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::DynSend + sync::DynSync,\n     ) {\n         self.early_passes.push(Box::new(pass));\n     }\n@@ -182,7 +182,7 @@ impl LintStore {\n     /// * See [rust-clippy#5518](https://github.com/rust-lang/rust-clippy/pull/5518)\n     pub fn register_pre_expansion_pass(\n         &mut self,\n-        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::Send + sync::Sync,\n+        pass: impl Fn() -> EarlyLintPassObject + 'static + sync::DynSend + sync::DynSync,\n     ) {\n         self.pre_expansion_passes.push(Box::new(pass));\n     }\n@@ -191,8 +191,8 @@ impl LintStore {\n         &mut self,\n         pass: impl for<'tcx> Fn(TyCtxt<'tcx>) -> LateLintPassObject<'tcx>\n         + 'static\n-        + sync::Send\n-        + sync::Sync,\n+        + sync::DynSend\n+        + sync::DynSync,\n     ) {\n         self.late_passes.push(Box::new(pass));\n     }\n@@ -201,8 +201,8 @@ impl LintStore {\n         &mut self,\n         pass: impl for<'tcx> Fn(TyCtxt<'tcx>) -> LateLintPassObject<'tcx>\n         + 'static\n-        + sync::Send\n-        + sync::Sync,\n+        + sync::DynSend\n+        + sync::DynSync,\n     ) {\n         self.late_module_passes.push(Box::new(pass));\n     }"}, {"sha": "b1266b58a61e7b63cfdfba1afa7946bf8e724616", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,5 +1,5 @@\n use crate::lints::{Expectation, ExpectationNote};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::UNFULFILLED_LINT_EXPECTATIONS;\n use rustc_session::lint::LintExpectationId;"}, {"sha": "c9781a72704f412832de20e4542e1fad3951abad", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -16,7 +16,7 @@\n \n use crate::{passes::LateLintPassObject, LateContext, LateLintPass, LintStore};\n use rustc_ast as ast;\n-use rustc_data_structures::sync::join;\n+use rustc_data_structures::sync::{join, DynSend};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit as hir_visit;\n@@ -429,7 +429,7 @@ fn late_lint_crate_inner<'tcx, T: LateLintPass<'tcx>>(\n /// Performs lint checking on a crate.\n pub fn check_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    builtin_lints: impl FnOnce() -> T + Send,\n+    builtin_lints: impl FnOnce() -> T + Send + DynSend,\n ) {\n     join(\n         || {"}, {"sha": "b92ed11f38a880004851e0bb38776348fec8c6fa", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::lint::{\n     reveal_actual_level, struct_lint_level, LevelAndSource, LintExpectation, LintLevelSource,\n     ShallowLintLevelMap,\n };\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::builtin::{RENAMED_AND_REMOVED_LINTS, UNKNOWN_LINTS, UNUSED_ATTRIBUTES};\n use rustc_session::lint::{"}, {"sha": "dfddfe09ab3c1c9b75386446b091556098005e09", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -86,7 +86,7 @@ use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,"}, {"sha": "001d53b1099ec3889b1ca90608b341526eff32c9", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -253,7 +253,7 @@ fn add_query_desc_cached_impl(\n         quote! {\n             #[allow(unused_variables, unused_braces, rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(#tcx: TyCtxt<'tcx>, #key: &crate::query::query_keys::#name<'tcx>) -> bool {\n                 #expr\n             }\n         }\n@@ -262,7 +262,7 @@ fn add_query_desc_cached_impl(\n             // we're taking `key` by reference, but some rustc types usually prefer being passed by value\n             #[allow(rustc::pass_by_value)]\n             #[inline]\n-            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::ty::query::query_keys::#name<'tcx>) -> bool {\n+            pub fn #name<'tcx>(_: TyCtxt<'tcx>, _: &crate::query::query_keys::#name<'tcx>) -> bool {\n                 false\n             }\n         }\n@@ -273,7 +273,7 @@ fn add_query_desc_cached_impl(\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::ty::query::query_keys::#name<'tcx>) -> String {\n+        pub fn #name<'tcx>(tcx: TyCtxt<'tcx>, key: crate::query::query_keys::#name<'tcx>) -> String {\n             let (#tcx, #key) = (tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths!(\n                 format!(#desc)"}, {"sha": "1c36d5e82da7ba959ae01d0611957b63c366e9e6", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1472,28 +1472,30 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     ..\n                 } = source_file_to_import;\n \n-                // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped\n-                // during rust bootstrapping by `remap-debuginfo = true`, and the user\n-                // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,\n+                // If this file is under $sysroot/lib/rustlib/src/\n+                // and the user wish to simulate remapping with -Z simulate-remapped-rust-src-base,\n                 // then we change `name` to a similar state as if the rust was bootstrapped\n                 // with `remap-debuginfo = true`.\n                 // This is useful for testing so that tests about the effects of\n                 // `try_to_translate_virtual_to_real` don't have to worry about how the\n                 // compiler is bootstrapped.\n                 if let Some(virtual_dir) = &sess.opts.unstable_opts.simulate_remapped_rust_src_base\n-                {\n-                    if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n-                        for subdir in [\"library\", \"compiler\"] {\n-                            if let rustc_span::FileName::Real(ref mut old_name) = name {\n-                                if let rustc_span::RealFileName::LocalPath(local) = old_name {\n-                                    if let Ok(rest) = local.strip_prefix(real_dir.join(subdir)) {\n-                                        *old_name = rustc_span::RealFileName::Remapped {\n-                                            local_path: None,\n-                                            virtual_name: virtual_dir.join(subdir).join(rest),\n-                                        };\n-                                    }\n-                                }\n-                            }\n+                && let Some(real_dir) = &sess.opts.real_rust_source_base_dir\n+                && let rustc_span::FileName::Real(ref mut old_name) = name {\n+                    let relative_path = match old_name {\n+                        rustc_span::RealFileName::LocalPath(local) => local.strip_prefix(real_dir).ok(),\n+                        rustc_span::RealFileName::Remapped { virtual_name, .. } => {\n+                            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").and_then(|virtual_dir| virtual_name.strip_prefix(virtual_dir).ok())\n+                        }\n+                    };\n+                    debug!(?relative_path, ?virtual_dir, \"simulate_remapped_rust_src_base\");\n+                    for subdir in [\"library\", \"compiler\"] {\n+                        if let Some(rest) = relative_path.and_then(|p| p.strip_prefix(subdir).ok()) {\n+                            *old_name = rustc_span::RealFileName::Remapped {\n+                                local_path: None, // FIXME: maybe we should preserve this?\n+                                virtual_name: virtual_dir.join(subdir).join(rest),\n+                            };\n+                            break;\n                         }\n                     }\n                 }"}, {"sha": "fe880b939ef467fb5d40549f5e5bc90df049174b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -14,8 +14,8 @@ use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::query::LocalCrate;\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::fast_reject::SimplifiedType;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::cstore::CrateStore;\n use rustc_session::{Session, StableCrateId};\n@@ -114,8 +114,8 @@ macro_rules! provide_one {\n     ($tcx:ident, $def_id:ident, $other:ident, $cdata:ident, $name:ident => $compute:block) => {\n         fn $name<'tcx>(\n             $tcx: TyCtxt<'tcx>,\n-            def_id_arg: ty::query::query_keys::$name<'tcx>,\n-        ) -> ty::query::query_provided::$name<'tcx> {\n+            def_id_arg: rustc_middle::query::query_keys::$name<'tcx>,\n+        ) -> rustc_middle::query::query_provided::$name<'tcx> {\n             let _prof_timer =\n                 $tcx.prof.generic_activity(concat!(\"metadata_decode_entry_\", stringify!($name)));\n "}, {"sha": "c1815ae3851d545528dc2a712914999ae9e7afcd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::memmap::{Mmap, MmapMut};\n use rustc_data_structures::stable_hasher::{Hash128, HashStable, StableHasher};\n-use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n+use rustc_data_structures::sync::{join, par_for_each_in, Lrc};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -25,10 +25,10 @@ use rustc_middle::middle::exported_symbols::{\n };\n use rustc_middle::mir::interpret;\n use rustc_middle::query::LocalCrate;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_middle::util::common::to_readable_str;\n use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n@@ -2131,7 +2131,7 @@ fn prefetch_mir(tcx: TyCtxt<'_>) {\n         return;\n     }\n \n-    par_iter(tcx.mir_keys(())).for_each(|&def_id| {\n+    par_for_each_in(tcx.mir_keys(()), |&def_id| {\n         let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n \n         if encode_const {"}, {"sha": "9eaf330b536f73b5ccaf93d36b529607718ce482", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -20,8 +20,8 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault;\n use rustc_middle::mir;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty, UnusedGenericParams};\n use rustc_middle::ty::{DeducedParamAttrs, GeneratorDiagnosticData, ParameterizedOverTcx, TyCtxt};\n use rustc_serialize::opaque::FileEncoder;"}, {"sha": "7c56af1da41a5f2c46ea3400db49dd1e49b08de8", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -11,6 +11,7 @@ chalk-ir = \"0.87.0\"\n derive_more = \"0.99.17\"\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n+field-offset = \"0.3.5\"\n measureme = \"10.0.0\"\n polonius-engine = \"0.13.0\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }"}, {"sha": "5bf0938d518695502deb8a52a2fe6e7555d4725c", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -5,7 +5,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n+use rustc_data_structures::sync::{par_for_each_in, DynSend, DynSync};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n@@ -150,11 +150,6 @@ impl<'hir> Map<'hir> {\n         self.tcx.hir_module_items(module).items()\n     }\n \n-    #[inline]\n-    pub fn par_for_each_item(self, f: impl Fn(ItemId) + Sync + Send) {\n-        par_for_each_in(&self.tcx.hir_crate_items(()).items[..], |id| f(*id));\n-    }\n-\n     pub fn def_key(self, def_id: LocalDefId) -> DefKey {\n         // Accessing the DefKey is ok, since it is part of DefPathHash.\n         self.tcx.definitions_untracked().def_key(def_id)\n@@ -502,7 +497,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     #[inline]\n-    pub fn par_body_owners(self, f: impl Fn(LocalDefId) + Sync + Send) {\n+    pub fn par_body_owners(self, f: impl Fn(LocalDefId) + DynSend + DynSync) {\n         par_for_each_in(&self.tcx.hir_crate_items(()).body_owners[..], |&def_id| f(def_id));\n     }\n \n@@ -640,7 +635,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     #[inline]\n-    pub fn par_for_each_module(self, f: impl Fn(LocalDefId) + Sync + Send) {\n+    pub fn par_for_each_module(self, f: impl Fn(LocalDefId) + DynSend + DynSync) {\n         let crate_items = self.tcx.hir_crate_items(());\n         par_for_each_in(&crate_items.submodules[..], |module| f(module.def_id))\n     }"}, {"sha": "61c9e72db2cf5580d664e8699ff2cb8fcf8e4a89", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -6,10 +6,10 @@ pub mod map;\n pub mod nested_filter;\n pub mod place;\n \n-use crate::ty::query::Providers;\n+use crate::query::Providers;\n use crate::ty::{EarlyBinder, ImplSubject, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n+use rustc_data_structures::sync::{par_for_each_in, DynSend, DynSync};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::*;\n use rustc_query_system::ich::StableHashingContext;\n@@ -77,19 +77,19 @@ impl ModuleItems {\n         self.owners().map(|id| id.def_id)\n     }\n \n-    pub fn par_items(&self, f: impl Fn(ItemId) + Send + Sync) {\n+    pub fn par_items(&self, f: impl Fn(ItemId) + DynSend + DynSync) {\n         par_for_each_in(&self.items[..], |&id| f(id))\n     }\n \n-    pub fn par_trait_items(&self, f: impl Fn(TraitItemId) + Send + Sync) {\n+    pub fn par_trait_items(&self, f: impl Fn(TraitItemId) + DynSend + DynSync) {\n         par_for_each_in(&self.trait_items[..], |&id| f(id))\n     }\n \n-    pub fn par_impl_items(&self, f: impl Fn(ImplItemId) + Send + Sync) {\n+    pub fn par_impl_items(&self, f: impl Fn(ImplItemId) + DynSend + DynSync) {\n         par_for_each_in(&self.impl_items[..], |&id| f(id))\n     }\n \n-    pub fn par_foreign_items(&self, f: impl Fn(ForeignItemId) + Send + Sync) {\n+    pub fn par_foreign_items(&self, f: impl Fn(ForeignItemId) + DynSend + DynSync) {\n         par_for_each_in(&self.foreign_items[..], |&id| f(id))\n     }\n }"}, {"sha": "dc911c885746c2bd8b3df41c850d0d3888e8b9cd", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -84,13 +84,8 @@ mod tests;\n #[macro_use]\n mod macros;\n \n-#[macro_use]\n-pub mod query;\n-\n #[macro_use]\n pub mod arena;\n-#[macro_use]\n-pub mod dep_graph;\n pub(crate) mod error;\n pub mod hir;\n pub mod infer;\n@@ -100,10 +95,16 @@ pub mod middle;\n pub mod mir;\n pub mod thir;\n pub mod traits;\n+#[macro_use]\n pub mod ty;\n pub mod util;\n mod values;\n \n+#[macro_use]\n+pub mod query;\n+#[macro_use]\n+pub mod dep_graph;\n+\n // Allows macros to refer to this crate as `::rustc_middle`\n extern crate self as rustc_middle;\n "}, {"sha": "bd859d4d61beb982789c66d102644d9afd91492e", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -11,15 +11,15 @@\n \n use crate::bug;\n use crate::error::LimitInvalid;\n-use crate::ty;\n+use crate::query::Providers;\n use rustc_ast::Attribute;\n use rustc_session::Session;\n use rustc_session::{Limit, Limits};\n use rustc_span::symbol::{sym, Symbol};\n \n use std::num::IntErrorKind;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.limits = |tcx, ()| Limits {\n         recursion_limit: get_recursion_limit(tcx.hir().krate_attrs(), tcx.sess),\n         move_size_limit: get_limit("}, {"sha": "9bb4570ef1484981cc1448500eaf7dd122f85476", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -32,6 +32,6 @@ pub mod region;\n pub mod resolve_bound_vars;\n pub mod stability;\n \n-pub fn provide(providers: &mut crate::ty::query::Providers) {\n+pub fn provide(providers: &mut crate::query::Providers) {\n     limits::provide(providers);\n }"}, {"sha": "aeb6a1601fc24fe611ee656c5b287c2eeee20ae4", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -64,14 +64,26 @@ impl EffectiveVisibility {\n         self.at_level(level).is_public()\n     }\n \n-    pub fn from_vis(vis: Visibility) -> EffectiveVisibility {\n+    pub const fn from_vis(vis: Visibility) -> EffectiveVisibility {\n         EffectiveVisibility {\n             direct: vis,\n             reexported: vis,\n             reachable: vis,\n             reachable_through_impl_trait: vis,\n         }\n     }\n+\n+    #[must_use]\n+    pub fn min(mut self, lhs: EffectiveVisibility, tcx: TyCtxt<'_>) -> Self {\n+        for l in Level::all_levels() {\n+            let rhs_vis = self.at_level_mut(l);\n+            let lhs_vis = *lhs.at_level(l);\n+            if rhs_vis.is_at_least(lhs_vis, tcx) {\n+                *rhs_vis = lhs_vis;\n+            };\n+        }\n+        self\n+    }\n }\n \n /// Holds a map of effective visibilities for reachable HIR nodes.\n@@ -137,24 +149,6 @@ impl EffectiveVisibilities {\n         };\n     }\n \n-    pub fn set_public_at_level(\n-        &mut self,\n-        id: LocalDefId,\n-        lazy_private_vis: impl FnOnce() -> Visibility,\n-        level: Level,\n-    ) {\n-        let mut effective_vis = self\n-            .effective_vis(id)\n-            .copied()\n-            .unwrap_or_else(|| EffectiveVisibility::from_vis(lazy_private_vis()));\n-        for l in Level::all_levels() {\n-            if l <= level {\n-                *effective_vis.at_level_mut(l) = Visibility::Public;\n-            }\n-        }\n-        self.map.insert(id, effective_vis);\n-    }\n-\n     pub fn check_invariants(&self, tcx: TyCtxt<'_>, early: bool) {\n         if !cfg!(debug_assertions) {\n             return;\n@@ -219,7 +213,7 @@ impl<Id: Eq + Hash> EffectiveVisibilities<Id> {\n     pub fn update(\n         &mut self,\n         id: Id,\n-        nominal_vis: Visibility,\n+        nominal_vis: Option<Visibility>,\n         lazy_private_vis: impl FnOnce() -> Visibility,\n         inherited_effective_vis: EffectiveVisibility,\n         level: Level,\n@@ -243,12 +237,11 @@ impl<Id: Eq + Hash> EffectiveVisibilities<Id> {\n                 if !(inherited_effective_vis_at_prev_level == inherited_effective_vis_at_level\n                     && level != l)\n                 {\n-                    calculated_effective_vis =\n-                        if nominal_vis.is_at_least(inherited_effective_vis_at_level, tcx) {\n-                            inherited_effective_vis_at_level\n-                        } else {\n-                            nominal_vis\n-                        };\n+                    calculated_effective_vis = if let Some(nominal_vis) = nominal_vis && !nominal_vis.is_at_least(inherited_effective_vis_at_level, tcx) {\n+                        nominal_vis\n+                    } else {\n+                        inherited_effective_vis_at_level\n+                    }\n                 }\n                 // effective visibility can't be decreased at next update call for the\n                 // same id"}, {"sha": "2f18b6cc90a908fff02fefd20d1842685b91341e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1111,6 +1111,10 @@ pub struct VarDebugInfo<'tcx> {\n     /// originated from (starting from 1). Note, if MIR inlining is enabled, then this is the\n     /// argument number in the original function before it was inlined.\n     pub argument_index: Option<u16>,\n+\n+    /// The data represents `name` dereferenced `references` times,\n+    /// and not the direct value.\n+    pub references: u8,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -1550,8 +1554,11 @@ impl<V, T> ProjectionElem<V, T> {\n     /// Returns `true` if this is accepted inside `VarDebugInfoContents::Place`.\n     pub fn can_use_in_debuginfo(&self) -> bool {\n         match self {\n-            Self::Deref | Self::Downcast(_, _) | Self::Field(_, _) => true,\n-            Self::ConstantIndex { .. }\n+            Self::ConstantIndex { from_end: false, .. }\n+            | Self::Deref\n+            | Self::Downcast(_, _)\n+            | Self::Field(_, _) => true,\n+            Self::ConstantIndex { from_end: true, .. }\n             | Self::Index(_)\n             | Self::OpaqueCast(_)\n             | Self::Subslice { .. } => false,\n@@ -1639,18 +1646,7 @@ impl<'tcx> Place<'tcx> {\n             return self;\n         }\n \n-        let mut v: Vec<PlaceElem<'tcx>>;\n-\n-        let new_projections = if self.projection.is_empty() {\n-            more_projections\n-        } else {\n-            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n-            v.extend(self.projection);\n-            v.extend(more_projections);\n-            &v\n-        };\n-\n-        Place { local: self.local, projection: tcx.mk_place_elems(new_projections) }\n+        self.as_ref().project_deeper(more_projections, tcx)\n     }\n }\n \n@@ -1721,6 +1717,27 @@ impl<'tcx> PlaceRef<'tcx> {\n             (base, *proj)\n         })\n     }\n+\n+    /// Generates a new place by appending `more_projections` to the existing ones\n+    /// and interning the result.\n+    pub fn project_deeper(\n+        self,\n+        more_projections: &[PlaceElem<'tcx>],\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Place<'tcx> {\n+        let mut v: Vec<PlaceElem<'tcx>>;\n+\n+        let new_projections = if self.projection.is_empty() {\n+            more_projections\n+        } else {\n+            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n+            v.extend(self.projection);\n+            v.extend(more_projections);\n+            &v\n+        };\n+\n+        Place { local: self.local, projection: tcx.mk_place_elems(new_projections) }\n+    }\n }\n \n impl Debug for Place<'_> {\n@@ -2313,7 +2330,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 if let Some(val) = c.kind().try_eval_for_mir(tcx, param_env) {\n                     match val {\n                         Ok(val) => Self::Val(val, c.ty()),\n-                        Err(_) => Self::Ty(tcx.const_error(self.ty())),\n+                        Err(guar) => Self::Ty(tcx.const_error(self.ty(), guar)),\n                     }\n                 } else {\n                     self\n@@ -2325,9 +2342,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 match tcx.const_eval_resolve(param_env, uneval, None) {\n                     Ok(val) => Self::Val(val, ty),\n                     Err(ErrorHandled::TooGeneric) => self,\n-                    Err(ErrorHandled::Reported(guar)) => {\n-                        Self::Ty(tcx.const_error_with_guaranteed(ty, guar))\n-                    }\n+                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar)),\n                 }\n             }\n         }"}, {"sha": "62c3d8cf23913f049c33716f353e00182236ebd7", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -551,8 +551,13 @@ fn write_scope_tree(\n         }\n \n         let indented_debug_info = format!(\n-            \"{0:1$}debug {2} => {3:?};\",\n-            INDENT, indent, var_debug_info.name, var_debug_info.value,\n+            \"{0:1$}debug {2} => {3:&<4$}{5:?};\",\n+            INDENT,\n+            indent,\n+            var_debug_info.name,\n+            \"\",\n+            var_debug_info.references as usize,\n+            var_debug_info.value,\n         );\n \n         writeln!("}, {"sha": "596dd80bf48745ceedde2f4f857cfaec68502fb3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -842,6 +842,7 @@ macro_rules! make_mir_visitor {\n                     source_info,\n                     value,\n                     argument_index: _,\n+                    references: _,\n                 } = var_debug_info;\n \n                 self.visit_source_info(source_info);"}, {"sha": "ef13a2772077a4d4d8c987c5e40a8b5eb196e8c9", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,8 +4,89 @@\n //! [\"Queries: demand-driven compilation\"](https://rustc-dev-guide.rust-lang.org/query.html).\n //! This chapter includes instructions for adding new queries.\n \n-use crate::ty::{self, print::describe_as_module, TyCtxt};\n+#![allow(unused_parens)]\n+\n+use crate::dep_graph;\n+use crate::dep_graph::DepKind;\n+use crate::infer::canonical::{self, Canonical};\n+use crate::lint::LintExpectation;\n+use crate::metadata::ModChild;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n+use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n+use crate::middle::lib_features::LibFeatures;\n+use crate::middle::privacy::EffectiveVisibilities;\n+use crate::middle::resolve_bound_vars::{ObjectLifetimeDefault, ResolveBoundVars, ResolvedArg};\n+use crate::middle::stability::{self, DeprecationEntry};\n+use crate::mir;\n+use crate::mir::interpret::GlobalId;\n+use crate::mir::interpret::{\n+    ConstValue, EvalToAllocationRawResult, EvalToConstValueResult, EvalToValTreeResult,\n+};\n+use crate::mir::interpret::{LitToConstError, LitToConstInput};\n+use crate::mir::mono::CodegenUnit;\n+use crate::query::erase::{erase, restore, Erase};\n+use crate::thir;\n+use crate::traits::query::{\n+    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n+    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n+    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal, NoSolution,\n+};\n+use crate::traits::query::{\n+    DropckConstraint, DropckOutlivesResult, MethodAutoderefStepsResult, NormalizationResult,\n+    OutlivesBound,\n+};\n+use crate::traits::specialization_graph;\n+use crate::traits::{self, ImplSource};\n+use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::layout::ValidityRequirement;\n+use crate::ty::query::{\n+    query_ensure, query_get_at, DynamicQuery, IntoQueryParam, TyCtxtAt, TyCtxtEnsure,\n+    TyCtxtEnsureWithValue,\n+};\n+use crate::ty::subst::{GenericArg, SubstsRef};\n+use crate::ty::util::AlwaysRequiresDrop;\n+use crate::ty::GeneratorDiagnosticData;\n+use crate::ty::TyCtxtFeed;\n+use crate::ty::{\n+    self, print::describe_as_module, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt,\n+    UnusedGenericParams,\n+};\n+use rustc_arena::TypedArena;\n+use rustc_ast as ast;\n+use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_attr as attr;\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n+use rustc_data_structures::steal::Steal;\n+use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::WorkerLocal;\n+use rustc_data_structures::unord::UnordSet;\n+use rustc_errors::ErrorGuaranteed;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, DocLinkResMap};\n+use rustc_hir::def_id::{\n+    CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdMap, LocalDefIdSet,\n+};\n+use rustc_hir::lang_items::{LangItem, LanguageItems};\n+use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n+use rustc_index::IndexVec;\n+use rustc_query_system::ich::StableHashingContext;\n+use rustc_query_system::query::{try_get_cached, CacheSelector, QueryCache, QueryMode, QueryState};\n+use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n+use rustc_session::cstore::{CrateDepKind, CrateSource};\n+use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n+use rustc_session::lint::LintExpectationId;\n+use rustc_session::Limits;\n use rustc_span::def_id::LOCAL_CRATE;\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi;\n+use rustc_target::spec::PanicStrategy;\n+use std::mem;\n+use std::ops::Deref;\n+use std::path::PathBuf;\n+use std::sync::Arc;\n \n pub mod erase;\n mod keys;\n@@ -2102,3 +2183,6 @@ rustc_queries! {\n         desc { \"check whether two const param are definitely not equal to eachother\"}\n     }\n }\n+\n+rustc_query_append! { define_callbacks! }\n+rustc_feedable_queries! { define_feedable! }"}, {"sha": "cbc68fde9d905aac64e90396bd25ddeef9b6c1c2", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n \n             (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(self.tcx().ty_error(guar)),\n \n-            _ => relate::super_relate_tys(self, a, b),\n+            _ => relate::structurally_relate_tys(self, a, b),\n         }\n     }\n \n@@ -109,7 +109,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n             _ => {}\n         }\n \n-        relate::super_relate_consts(self, a, b)\n+        relate::structurally_relate_consts(self, a, b)\n     }\n \n     fn binders<T>("}, {"sha": "a39631da93666b3ff3f4ccd15dd4da83a81fa025", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             fn fold_const(&mut self, c: Const<'tcx>) -> Const<'tcx> {\n                 let ct = match c.kind() {\n                     ty::ConstKind::Unevaluated(uv) => match self.tcx.thir_abstract_const(uv.def) {\n-                        Err(e) => self.tcx.const_error_with_guaranteed(c.ty(), e),\n+                        Err(e) => self.tcx.const_error(c.ty(), e),\n                         Ok(Some(bac)) => {\n                             let substs = self.tcx.erase_regions(uv.substs);\n                             let bac = bac.subst(self.tcx, substs);"}, {"sha": "be7b2b7ec671a4188813adcb0ffcfa5fc0a61650", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -5,6 +5,7 @@ use crate::{mir, ty};\n \n use std::fmt::Write;\n \n+use crate::query::Providers;\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{self as hir, LangItem};\n@@ -457,6 +458,6 @@ impl BorrowKind {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { closure_typeinfo, ..*providers }\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { closure_typeinfo, ..*providers }\n }"}, {"sha": "0a5792a9c4713c8874365acf53d1a52871007814", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -142,9 +142,7 @@ impl<'tcx> Const<'tcx> {\n                         ty::ConstKind::Bound(debruijn, ty::BoundVar::from_u32(index)),\n                         param_ty,\n                     )),\n-                    Some(rbv::ResolvedArg::Error(guar)) => {\n-                        Some(tcx.const_error_with_guaranteed(param_ty, guar))\n-                    }\n+                    Some(rbv::ResolvedArg::Error(guar)) => Some(tcx.const_error(param_ty, guar)),\n                     arg => bug!(\"unexpected bound var resolution for {:?}: {arg:?}\", expr.hir_id),\n                 }\n             }\n@@ -228,7 +226,7 @@ impl<'tcx> Const<'tcx> {\n         if let Some(val) = self.kind().try_eval_for_typeck(tcx, param_env) {\n             match val {\n                 Ok(val) => tcx.mk_const(val, self.ty()),\n-                Err(guar) => tcx.const_error_with_guaranteed(self.ty(), guar),\n+                Err(guar) => tcx.const_error(self.ty(), guar),\n             }\n         } else {\n             // Either the constant isn't evaluatable or ValTree creation failed."}, {"sha": "097bfb71a6fc8b15d06a7cf7115fe507f1c67620", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -14,14 +14,13 @@ use crate::middle::resolve_bound_vars;\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation};\n use crate::mir::{Body, Local, Place, PlaceElem, ProjectionKind, Promoted};\n-use crate::query::on_disk_cache::OnDiskCache;\n use crate::query::LocalCrate;\n+use crate::query::Providers;\n use crate::thir::Thir;\n use crate::traits;\n use crate::traits::solve;\n use crate::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n use crate::ty::query::QuerySystem;\n-use crate::ty::query::QuerySystemFns;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, FloatTy, FloatVar, FloatVid,\n@@ -496,7 +495,7 @@ pub struct GlobalCtxt<'tcx> {\n     ///\n     /// FIXME(Centril): consider `dyn LintStoreMarker` once\n     /// we can upcast to `Any` for some additional type safety.\n-    pub lint_store: Lrc<dyn Any + sync::Sync + sync::Send>,\n+    pub lint_store: Lrc<dyn Any + sync::DynSync + sync::DynSend>,\n \n     pub dep_graph: DepGraph,\n \n@@ -648,14 +647,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_global_ctxt(\n         s: &'tcx Session,\n-        lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n+        lint_store: Lrc<dyn Any + sync::DynSend + sync::DynSync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n         untracked: Untracked,\n         dep_graph: DepGraph,\n-        on_disk_cache: Option<OnDiskCache<'tcx>>,\n         query_kinds: &'tcx [DepKindStruct<'tcx>],\n-        query_system_fns: QuerySystemFns<'tcx>,\n+        query_system: QuerySystem<'tcx>,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n             s.emit_fatal(err);\n@@ -677,7 +675,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n             untracked,\n-            query_system: QuerySystem::new(query_system_fns, on_disk_cache),\n+            query_system,\n             query_kinds,\n             ty_rcache: Default::default(),\n             pred_rcache: Default::default(),\n@@ -735,17 +733,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n     #[track_caller]\n-    pub fn const_error_with_guaranteed(\n-        self,\n-        ty: Ty<'tcx>,\n-        reported: ErrorGuaranteed,\n-    ) -> Const<'tcx> {\n+    pub fn const_error(self, ty: Ty<'tcx>, reported: ErrorGuaranteed) -> Const<'tcx> {\n         self.mk_const(ty::ConstKind::Error(reported), ty)\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants.\n     #[track_caller]\n-    pub fn const_error(self, ty: Ty<'tcx>) -> Const<'tcx> {\n+    pub fn const_error_misc(self, ty: Ty<'tcx>) -> Const<'tcx> {\n         self.const_error_with_message(\n             ty,\n             DUMMY_SP,\n@@ -2461,7 +2455,7 @@ pub struct DeducedParamAttrs {\n     pub read_only: bool,\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.names_imported_by_glob_use = |tcx, id| {"}, {"sha": "bf9806f64069ff51ef0c903be885fa00134d0a36", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -94,8 +94,8 @@ where\n         f(None)\n     } else {\n         // We could get an `ImplicitCtxt` pointer from another thread.\n-        // Ensure that `ImplicitCtxt` is `Sync`.\n-        sync::assert_sync::<ImplicitCtxt<'_, '_>>();\n+        // Ensure that `ImplicitCtxt` is `DynSync`.\n+        sync::assert_dyn_sync::<ImplicitCtxt<'_, '_>>();\n \n         unsafe { f(Some(downcast(context))) }\n     }"}, {"sha": "7895993ccffad9cea62fabb6e47e9957996d3f89", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,8 +1,9 @@\n+use crate::query::Providers;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags, TypeVisitableExt};\n \n-pub(super) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { erase_regions_ty, ..*providers };\n+pub(super) fn provide(providers: &mut Providers) {\n+    *providers = Providers { erase_regions_ty, ..*providers };\n }\n \n fn erase_regions_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "99174bae3f657d97e90e5d79abec40251ea500c5", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -103,7 +103,7 @@ impl GenericParamDef {\n             ty::GenericParamDefKind::Lifetime => tcx.mk_re_error_misc().into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error_misc().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n-                tcx.const_error(tcx.type_of(self.def_id).subst(tcx, preceding_substs)).into()\n+                tcx.const_error_misc(tcx.type_of(self.def_id).subst(tcx, preceding_substs)).into()\n             }\n         }\n     }"}, {"sha": "4223502848ef8f18f621d5ed170a89526375d159", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -43,6 +43,7 @@\n //! This code should only compile in modules where the uninhabitedness of `Foo`\n //! is visible.\n \n+use crate::query::Providers;\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, DefId, Ty, VariantDef, Visibility};\n \n@@ -52,9 +53,8 @@ pub mod inhabited_predicate;\n \n pub use inhabited_predicate::InhabitedPredicate;\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers =\n-        ty::query::Providers { inhabited_predicate_adt, inhabited_predicate_type, ..*providers };\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { inhabited_predicate_adt, inhabited_predicate_type, ..*providers };\n }\n \n /// Returns an `InhabitedPredicate` that is generic over type parameters and"}, {"sha": "71911a5a61877845bf793e522e39f18193dccec7", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -199,6 +199,12 @@ impl<'a, T: Copy> IntoIterator for &'a List<T> {\n \n unsafe impl<T: Sync> Sync for List<T> {}\n \n+// We need this since `List` uses extern type `OpaqueListContents`.\n+#[cfg(parallel_compiler)]\n+use rustc_data_structures::sync::DynSync;\n+#[cfg(parallel_compiler)]\n+unsafe impl<T: DynSync> DynSync for List<T> {}\n+\n // Safety:\n // Layouts of `Equivalent<T>` and `List<T>` are the same, modulo opaque tail,\n // thus aligns of `Equivalent<T>` and `List<T>` must be the same."}, {"sha": "df324bcc52c4b4cdff6d86e60446a1a87942fac1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -21,6 +21,7 @@ use crate::error::{OpaqueHiddenTypeMismatch, TypeMismatchReason};\n use crate::metadata::ModChild;\n use crate::middle::privacy::EffectiveVisibilities;\n use crate::mir::{Body, GeneratorLayout};\n+use crate::query::Providers;\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::fast_reject::SimplifiedType;\n@@ -121,6 +122,7 @@ pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;\n pub mod print;\n+#[macro_use]\n pub mod query;\n pub mod relate;\n pub mod subst;\n@@ -1070,6 +1072,24 @@ impl ParamTerm {\n     }\n }\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum TermVid<'tcx> {\n+    Ty(ty::TyVid),\n+    Const(ty::ConstVid<'tcx>),\n+}\n+\n+impl From<ty::TyVid> for TermVid<'_> {\n+    fn from(value: ty::TyVid) -> Self {\n+        TermVid::Ty(value)\n+    }\n+}\n+\n+impl<'tcx> From<ty::ConstVid<'tcx>> for TermVid<'tcx> {\n+    fn from(value: ty::ConstVid<'tcx>) -> Self {\n+        TermVid::Const(value)\n+    }\n+}\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///\n@@ -2590,7 +2610,7 @@ pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     closure::provide(providers);\n     context::provide(providers);\n     erase_regions::provide(providers);\n@@ -2599,7 +2619,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     print::provide(providers);\n     super::util::bug::provide(providers);\n     super::middle::provide(providers);\n-    *providers = ty::query::Providers {\n+    *providers = Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         incoherent_impls: trait_def::incoherent_impls_provider,\n         const_param_default: consts::const_param_default,"}, {"sha": "1b336b7bfc6ebf3c4471e8b2e3930b5be0440c61", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -207,14 +207,16 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                     Some(GenericArgKind::Const(c1)) => c1,\n                     Some(u) => panic!(\"const mapped to unexpected kind: {:?}\", u),\n                     None => {\n-                        if !self.ignore_errors {\n-                            self.tcx.sess.emit_err(ConstNotUsedTraitAlias {\n+                        let guar = self\n+                            .tcx\n+                            .sess\n+                            .create_err(ConstNotUsedTraitAlias {\n                                 ct: ct.to_string(),\n                                 span: self.span,\n-                            });\n-                        }\n+                            })\n+                            .emit_unless(self.ignore_errors);\n \n-                        self.interner().const_error(ct.ty())\n+                        self.interner().const_error(ct.ty(), guar)\n                     }\n                 }\n             }"}, {"sha": "385156262c76ac2cde2a6088434d7d9067b416fb", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,4 +1,5 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n+use crate::query::Providers;\n use crate::ty::query::IntoQueryParam;\n use crate::ty::{\n     self, ConstInt, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n@@ -3054,8 +3055,8 @@ fn trimmed_def_paths(tcx: TyCtxt<'_>, (): ()) -> FxHashMap<DefId, Symbol> {\n     map\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { trimmed_def_paths, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { trimmed_def_paths, ..*providers };\n }\n \n #[derive(Default)]"}, {"sha": "647f4826876daa700074f11a2860149e824ffc1c", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 44, "deletions": 100, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,89 +1,26 @@\n-#![allow(unused_parens)]\n-\n use crate::dep_graph;\n use crate::dep_graph::DepKind;\n-use crate::infer::canonical::{self, Canonical};\n-use crate::lint::LintExpectation;\n-use crate::metadata::ModChild;\n-use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n-use crate::middle::lib_features::LibFeatures;\n-use crate::middle::privacy::EffectiveVisibilities;\n-use crate::middle::resolve_bound_vars::{ObjectLifetimeDefault, ResolveBoundVars, ResolvedArg};\n-use crate::middle::stability::{self, DeprecationEntry};\n-use crate::mir;\n-use crate::mir::interpret::GlobalId;\n-use crate::mir::interpret::{\n-    ConstValue, EvalToAllocationRawResult, EvalToConstValueResult, EvalToValTreeResult,\n-};\n-use crate::mir::interpret::{LitToConstError, LitToConstInput};\n-use crate::mir::mono::CodegenUnit;\n-\n-use crate::query::erase::{erase, restore, Erase};\n use crate::query::on_disk_cache::CacheEncoder;\n use crate::query::on_disk_cache::EncodedDepNodeIndex;\n use crate::query::on_disk_cache::OnDiskCache;\n-use crate::query::{AsLocalKey, Key};\n-use crate::thir;\n-use crate::traits::query::{\n-    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n-    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n-    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal, NoSolution,\n+use crate::query::{\n+    DynamicQueries, ExternProviders, Providers, QueryArenas, QueryCaches, QueryEngine, QueryStates,\n };\n-use crate::traits::query::{\n-    DropckConstraint, DropckOutlivesResult, MethodAutoderefStepsResult, NormalizationResult,\n-    OutlivesBound,\n-};\n-use crate::traits::specialization_graph;\n-use crate::traits::{self, ImplSource};\n-use crate::ty::context::TyCtxtFeed;\n-use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::layout::ValidityRequirement;\n-use crate::ty::subst::{GenericArg, SubstsRef};\n-use crate::ty::util::AlwaysRequiresDrop;\n-use crate::ty::GeneratorDiagnosticData;\n-use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt, UnusedGenericParams};\n+use crate::ty::TyCtxt;\n+use field_offset::FieldOffset;\n use measureme::StringId;\n-use rustc_arena::TypedArena;\n-use rustc_ast as ast;\n-use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_attr as attr;\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n-use rustc_data_structures::steal::Steal;\n-use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::AtomicU64;\n-use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::sync::WorkerLocal;\n-use rustc_data_structures::unord::UnordSet;\n-use rustc_errors::ErrorGuaranteed;\n-use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, DocLinkResMap};\n-use rustc_hir::def_id::{\n-    CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdMap, LocalDefIdSet,\n-};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::OwnerId;\n-use rustc_hir::lang_items::{LangItem, LanguageItems};\n-use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n-use rustc_index::IndexVec;\n-use rustc_query_system::ich::StableHashingContext;\n+use rustc_query_system::dep_graph::DepNodeIndex;\n+use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n pub(crate) use rustc_query_system::query::QueryJobId;\n use rustc_query_system::query::*;\n-use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n-use rustc_session::cstore::{CrateDepKind, CrateSource};\n-use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n-use rustc_session::lint::LintExpectationId;\n-use rustc_session::Limits;\n-use rustc_span::symbol::Symbol;\n+use rustc_query_system::HandleCycleError;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::abi;\n-use rustc_target::spec::PanicStrategy;\n-\n-use std::marker::PhantomData;\n-use std::mem;\n use std::ops::Deref;\n-use std::path::PathBuf;\n-use std::sync::Arc;\n \n pub struct QueryKeyStringCache {\n     pub def_id_cache: FxHashMap<DefId, StringId>,\n@@ -103,6 +40,31 @@ pub struct QueryStruct<'tcx> {\n         Option<fn(TyCtxt<'tcx>, &mut CacheEncoder<'_, 'tcx>, &mut EncodedDepNodeIndex)>,\n }\n \n+pub struct DynamicQuery<'tcx, C: QueryCache> {\n+    pub name: &'static str,\n+    pub eval_always: bool,\n+    pub dep_kind: rustc_middle::dep_graph::DepKind,\n+    pub handle_cycle_error: HandleCycleError,\n+    pub query_state: FieldOffset<QueryStates<'tcx>, QueryState<C::Key, crate::dep_graph::DepKind>>,\n+    pub query_cache: FieldOffset<QueryCaches<'tcx>, C>,\n+    pub cache_on_disk: fn(tcx: TyCtxt<'tcx>, key: &C::Key) -> bool,\n+    pub execute_query: fn(tcx: TyCtxt<'tcx>, k: C::Key) -> C::Value,\n+    pub compute: fn(tcx: TyCtxt<'tcx>, key: C::Key) -> C::Value,\n+    pub can_load_from_disk: bool,\n+    pub try_load_from_disk: fn(\n+        tcx: TyCtxt<'tcx>,\n+        key: &C::Key,\n+        prev_index: SerializedDepNodeIndex,\n+        index: DepNodeIndex,\n+    ) -> Option<C::Value>,\n+    pub loadable_from_disk:\n+        fn(tcx: TyCtxt<'tcx>, key: &C::Key, index: SerializedDepNodeIndex) -> bool,\n+    pub hash_result: HashResult<C::Value>,\n+    pub value_from_cycle_error:\n+        fn(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<crate::dep_graph::DepKind>]) -> C::Value,\n+    pub format_value: fn(&C::Value) -> String,\n+}\n+\n pub struct QuerySystemFns<'tcx> {\n     pub engine: QueryEngine,\n     pub local_providers: Providers,\n@@ -120,6 +82,7 @@ pub struct QuerySystem<'tcx> {\n     pub states: QueryStates<'tcx>,\n     pub arenas: QueryArenas<'tcx>,\n     pub caches: QueryCaches<'tcx>,\n+    pub dynamic_queries: DynamicQueries<'tcx>,\n \n     /// This provides access to the incremental compilation on-disk cache for query results.\n     /// Do not access this directly. It is only meant to be used by\n@@ -130,23 +93,6 @@ pub struct QuerySystem<'tcx> {\n     pub fns: QuerySystemFns<'tcx>,\n \n     pub jobs: AtomicU64,\n-\n-    // Since we erase query value types we tell the typesystem about them with `PhantomData`.\n-    _phantom_values: QueryPhantomValues<'tcx>,\n-}\n-\n-impl<'tcx> QuerySystem<'tcx> {\n-    pub fn new(fns: QuerySystemFns<'tcx>, on_disk_cache: Option<OnDiskCache<'tcx>>) -> Self {\n-        QuerySystem {\n-            states: Default::default(),\n-            arenas: Default::default(),\n-            caches: Default::default(),\n-            on_disk_cache,\n-            fns,\n-            jobs: AtomicU64::new(1),\n-            _phantom_values: Default::default(),\n-        }\n-    }\n }\n \n #[derive(Copy, Clone)]\n@@ -203,7 +149,7 @@ impl<'tcx> TyCtxt<'tcx> {\n }\n \n #[inline]\n-fn query_get_at<'tcx, Cache>(\n+pub fn query_get_at<'tcx, Cache>(\n     tcx: TyCtxt<'tcx>,\n     execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n     query_cache: &Cache,\n@@ -221,7 +167,7 @@ where\n }\n \n #[inline]\n-fn query_ensure<'tcx, Cache>(\n+pub fn query_ensure<'tcx, Cache>(\n     tcx: TyCtxt<'tcx>,\n     execute_query: fn(TyCtxt<'tcx>, Span, Cache::Key, QueryMode) -> Option<Cache::Value>,\n     query_cache: &Cache,\n@@ -427,11 +373,6 @@ macro_rules! define_callbacks {\n             }\n         }\n \n-        #[derive(Default)]\n-        pub struct QueryPhantomValues<'tcx> {\n-            $($(#[$attr])* pub $name: PhantomData<query_values::$name<'tcx>>,)*\n-        }\n-\n         #[derive(Default)]\n         pub struct QueryCaches<'tcx> {\n             $($(#[$attr])* pub $name: query_storage::$name<'tcx>,)*\n@@ -490,6 +431,12 @@ macro_rules! define_callbacks {\n             })*\n         }\n \n+        pub struct DynamicQueries<'tcx> {\n+            $(\n+                pub $name: DynamicQuery<'tcx, query_storage::$name<'tcx>>,\n+            )*\n+        }\n+\n         #[derive(Default)]\n         pub struct QueryStates<'tcx> {\n             $(\n@@ -627,9 +574,6 @@ macro_rules! define_feedable {\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n \n-rustc_query_append! { define_callbacks! }\n-rustc_feedable_queries! { define_feedable! }\n-\n mod sealed {\n     use super::{DefId, LocalDefId, OwnerId};\n "}, {"sha": "3bbe6a23b66281ff924ed45101c60b1c9dd350ca", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -388,24 +388,24 @@ impl<'tcx> Relate<'tcx> for Ty<'tcx> {\n     }\n }\n \n-/// The main \"type relation\" routine. Note that this does not handle\n-/// inference artifacts, so you should filter those out before calling\n-/// it.\n-pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n+/// Relates `a` and `b` structurally, calling the relation for all nested values.\n+/// Any semantic equality, e.g. of projections, and inference variables have to be\n+/// handled by the caller.\n+pub fn structurally_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n ) -> RelateResult<'tcx, Ty<'tcx>> {\n     let tcx = relation.tcx();\n-    debug!(\"super_relate_tys: a={:?} b={:?}\", a, b);\n+    debug!(\"structurally_relate_tys: a={:?} b={:?}\", a, b);\n     match (a.kind(), b.kind()) {\n         (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {\n             // The caller should handle these cases!\n-            bug!(\"var types encountered in super_relate_tys\")\n+            bug!(\"var types encountered in structurally_relate_tys\")\n         }\n \n         (ty::Bound(..), _) | (_, ty::Bound(..)) => {\n-            bug!(\"bound types encountered in super_relate_tys\")\n+            bug!(\"bound types encountered in structurally_relate_tys\")\n         }\n \n         (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(tcx.ty_error(guar)),\n@@ -575,15 +575,18 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n     }\n }\n \n-/// The main \"const relation\" routine. Note that this does not handle\n-/// inference artifacts, so you should filter those out before calling\n-/// it.\n-pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n+/// Relates `a` and `b` structurally, calling the relation for all nested values.\n+/// Any semantic equality, e.g. of unevaluated consts, and inference variables have\n+/// to be handled by the caller.\n+///\n+/// FIXME: This is not totally structual, which probably should be fixed.\n+/// See the HACKs below.\n+pub fn structurally_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     mut a: ty::Const<'tcx>,\n     mut b: ty::Const<'tcx>,\n ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-    debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n+    debug!(\"{}.structurally_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n \n     // HACK(const_generics): We still need to eagerly evaluate consts when\n@@ -602,15 +605,15 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         b = tcx.expand_abstract_consts(b);\n     }\n \n-    debug!(\"{}.super_relate_consts(normed_a = {:?}, normed_b = {:?})\", relation.tag(), a, b);\n+    debug!(\"{}.structurally_relate_consts(normed_a = {:?}, normed_b = {:?})\", relation.tag(), a, b);\n \n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n     let is_match = match (a.kind(), b.kind()) {\n         (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n             // The caller should handle these cases!\n-            bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n+            bug!(\"var types encountered in structurally_relate_consts: {:?} {:?}\", a, b)\n         }\n \n         (ty::ConstKind::Error(_), _) => return Ok(a),"}, {"sha": "e73208b877f1035ebb835ae80d620beb698df68a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -204,6 +204,7 @@ CloneLiftImpls! {\n     (),\n     bool,\n     usize,\n+    u8,\n     u16,\n     u32,\n     u64,"}, {"sha": "c32ba3edd5c676393c11bd5368451970af650d04", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,6 +2,7 @@\n \n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n+use crate::query::Providers;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n     self, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n@@ -1484,8 +1485,8 @@ pub fn is_intrinsic(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     matches!(tcx.fn_sig(def_id).skip_binder().abi(), Abi::RustIntrinsic | Abi::PlatformIntrinsic)\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         reveal_opaque_types_in_bounds,\n         is_doc_hidden,\n         is_doc_notable_trait,"}, {"sha": "43ee0343f5aa65e5be4a457eae9f788574971658", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -48,6 +48,6 @@ pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: rustc_hir::def_id::DefId) {\n     );\n }\n \n-pub fn provide(providers: &mut crate::ty::query::Providers) {\n-    *providers = crate::ty::query::Providers { trigger_delay_span_bug, ..*providers };\n+pub fn provide(providers: &mut crate::query::Providers) {\n+    *providers = crate::query::Providers { trigger_delay_span_bug, ..*providers };\n }"}, {"sha": "b74422708ce5cbf9478317897d4e53a05a747097", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -154,6 +154,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                 Ok(Rvalue::BinaryOp(BinOp::Offset, Box::new((ptr, offset))))\n             },\n             @call(\"mir_len\", args) => Ok(Rvalue::Len(self.parse_place(args[0])?)),\n+            @call(\"mir_copy_for_deref\", args) => Ok(Rvalue::CopyForDeref(self.parse_place(args[0])?)),\n             ExprKind::Borrow { borrow_kind, arg } => Ok(\n                 Rvalue::Ref(self.tcx.lifetimes.re_erased, *borrow_kind, self.parse_place(*arg)?)\n             ),"}, {"sha": "4d99ab4b0ec2902879388989c8f18082616ebffd", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -52,7 +52,7 @@ pub fn as_constant_inner<'tcx>(\n                 match lit_to_mir_constant(tcx, LitToConstInput { lit: &lit.node, ty, neg }) {\n                     Ok(c) => c,\n                     Err(LitToConstError::Reported(guar)) => {\n-                        ConstantKind::Ty(tcx.const_error_with_guaranteed(ty, guar))\n+                        ConstantKind::Ty(tcx.const_error(ty, guar))\n                     }\n                     Err(LitToConstError::TypeError) => {\n                         bug!(\"encountered type error in `lit_to_mir_constant`\")"}, {"sha": "6df06df5c60f42c84e1f64158853cfc52d734ecf", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2241,6 +2241,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.var_debug_info.push(VarDebugInfo {\n             name,\n             source_info: debug_source_info,\n+            references: 0,\n             value: VarDebugInfoContents::Place(for_arm_body.into()),\n             argument_index: None,\n         });\n@@ -2260,6 +2261,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.var_debug_info.push(VarDebugInfo {\n                 name,\n                 source_info: debug_source_info,\n+                references: 0,\n                 value: VarDebugInfoContents::Place(ref_for_guard.into()),\n                 argument_index: None,\n             });"}, {"sha": "4e3e98b56e79960030af31ba3bbbd5131ade946d", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -798,6 +798,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 self.var_debug_info.push(VarDebugInfo {\n                     name,\n+                    references: 0,\n                     source_info: SourceInfo::outermost(captured_place.var_ident.span),\n                     value: VarDebugInfoContents::Place(use_place),\n                     argument_index: None,\n@@ -828,6 +829,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.var_debug_info.push(VarDebugInfo {\n                     name,\n                     source_info,\n+                    references: 0,\n                     value: VarDebugInfoContents::Place(arg_local.into()),\n                     argument_index: Some(argument_index as u16 + 1),\n                 });"}, {"sha": "c964e62c9d0e7bd271ebff8c2c35c3bef1c916d5", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -22,7 +22,7 @@ mod errors;\n mod lints;\n pub mod thir;\n \n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;"}, {"sha": "069514d8a3bf310a9c3120911bdc9099c1290738", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{BlockCheckMode, ExprKind, Node};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;"}, {"sha": "74b4b4a07c55010e9419834d9b220e23efb52463", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, Body, Coverage, CoverageInfo};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::DefId;\n "}, {"sha": "a133c9d4782c8bc2f0f61010b58d1b2eff2ea27e", "filename": "compiler/rustc_mir_transform/src/deduce_param_attrs.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -8,7 +8,7 @@\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n-use rustc_middle::mir::{Body, Local, Location, Operand, Terminator, TerminatorKind, RETURN_PLACE};\n+use rustc_middle::mir::{Body, Location, Operand, Place, Terminator, TerminatorKind, RETURN_PLACE};\n use rustc_middle::ty::{self, DeducedParamAttrs, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n \n@@ -29,31 +29,31 @@ impl DeduceReadOnly {\n }\n \n impl<'tcx> Visitor<'tcx> for DeduceReadOnly {\n-    fn visit_local(&mut self, local: Local, mut context: PlaceContext, _: Location) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n         // We're only interested in arguments.\n-        if local == RETURN_PLACE || local.index() > self.mutable_args.domain_size() {\n+        if place.local == RETURN_PLACE || place.local.index() > self.mutable_args.domain_size() {\n             return;\n         }\n \n-        // Replace place contexts that are moves with copies. This is safe in all cases except\n-        // function argument position, which we already handled in `visit_terminator()` by using the\n-        // ArgumentChecker. See the comment in that method for more details.\n-        //\n-        // In the future, we might want to move this out into a separate pass, but for now let's\n-        // just do it on the fly because that's faster.\n-        if matches!(context, PlaceContext::NonMutatingUse(NonMutatingUseContext::Move)) {\n-            context = PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy);\n-        }\n-\n-        match context {\n-            PlaceContext::MutatingUse(..)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => {\n+        let mark_as_mutable = match context {\n+            PlaceContext::MutatingUse(..) => {\n                 // This is a mutation, so mark it as such.\n-                self.mutable_args.insert(local.index() - 1);\n+                true\n+            }\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf) => {\n+                // Whether mutating though a `&raw const` is allowed is still undecided, so we\n+                // disable any sketchy `readonly` optimizations for now.\n+                // But we only need to do this if the pointer would point into the argument.\n+                !place.is_indirect()\n             }\n             PlaceContext::NonMutatingUse(..) | PlaceContext::NonUse(..) => {\n                 // Not mutating, so it's fine.\n+                false\n             }\n+        };\n+\n+        if mark_as_mutable {\n+            self.mutable_args.insert(place.local.index() - 1);\n         }\n     }\n "}, {"sha": "58cc161ddcc490a4d82d562cb41f59d151239f87", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,8 +1,8 @@\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_middle::mir::*;\n use rustc_middle::query::LocalCrate;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::FFI_UNWIND_CALLS;\n use rustc_target::spec::abi::Abi;"}, {"sha": "65864dc016f4f38ca8a982f6b9d9e15fc0a519b4", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -34,7 +34,7 @@ use rustc_middle::mir::{\n     MirPhase, Operand, Place, ProjectionElem, Promoted, RuntimePhase, Rvalue, SourceInfo,\n     Statement, StatementKind, TerminatorKind, START_BLOCK,\n };\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::sym;\n use rustc_trait_selection::traits;"}, {"sha": "bbd9f76ba5cc354e24cbdd048ac3ed78bee933c8", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -77,11 +77,11 @@ impl<'tcx> MirPass<'tcx> for ReferencePropagation {\n     #[instrument(level = \"trace\", skip(self, tcx, body))]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(def_id = ?body.source.def_id());\n-        propagate_ssa(tcx, body);\n+        while propagate_ssa(tcx, body) {}\n     }\n }\n \n-fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     let ssa = SsaLocals::new(body);\n \n     let mut replacer = compute_replacement(tcx, body, &ssa);\n@@ -94,6 +94,8 @@ fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     if replacer.any_replacement {\n         crate::simplify::remove_unused_definitions(body);\n     }\n+\n+    replacer.any_replacement\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -263,6 +265,7 @@ fn compute_replacement<'tcx>(\n         targets,\n         storage_to_remove,\n         allowed_replacements,\n+        fully_replacable_locals,\n         any_replacement: false,\n     };\n \n@@ -343,13 +346,33 @@ struct Replacer<'tcx> {\n     storage_to_remove: BitSet<Local>,\n     allowed_replacements: FxHashSet<(Local, Location)>,\n     any_replacement: bool,\n+    fully_replacable_locals: BitSet<Local>,\n }\n \n impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n+    fn visit_var_debug_info(&mut self, debuginfo: &mut VarDebugInfo<'tcx>) {\n+        if let VarDebugInfoContents::Place(ref mut place) = debuginfo.value\n+            && place.projection.is_empty()\n+            && let Value::Pointer(target, _) = self.targets[place.local]\n+            && target.projection.iter().all(|p| p.can_use_in_debuginfo())\n+        {\n+            if let Some((&PlaceElem::Deref, rest)) = target.projection.split_last() {\n+                *place = Place::from(target.local).project_deeper(rest, self.tcx);\n+                self.any_replacement = true;\n+            } else if self.fully_replacable_locals.contains(place.local)\n+                && let Some(references) = debuginfo.references.checked_add(1)\n+            {\n+                debuginfo.references = references;\n+                *place = target;\n+                self.any_replacement = true;\n+            }\n+        }\n+    }\n+\n     fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n         if place.projection.first() != Some(&PlaceElem::Deref) {\n             return;"}, {"sha": "7c47d8814db838313d864d41e67afa4a07302f05", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,7 +2,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, GeneratorSubsts, Ty, TyCtxt};\n use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};"}, {"sha": "1c18e6b0b02d43ac586896faecec52d980a3415a", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -12,9 +12,10 @@ extern crate rustc_middle;\n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir::lang_items::LangItem;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n-use rustc_middle::ty::query::{Providers, TyCtxtAt};\n+use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::{self, Ty};\n \n mod collector;"}, {"sha": "c10180ee3f489c9040acdf79a0aa86ba9b00704e", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -106,8 +106,8 @@ use rustc_hir::def_id::{DefIdSet, LOCAL_CRATE};\n use rustc_middle::mir;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{DumpMonoStatsFormat, SwitchWithOptPath};\n use rustc_span::symbol::Symbol;"}, {"sha": "88a3e028527a38e3555ac552dd063c56ec9e1fbe", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -11,9 +11,9 @@ use rustc_middle::mir::{\n     visit::{TyContext, Visitor},\n     Constant, ConstantKind, Local, LocalDecl, Location,\n };\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{\n     self,\n-    query::Providers,\n     subst::SubstsRef,\n     visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor},\n     Const, Ty, TyCtxt, UnusedGenericParams,"}, {"sha": "2d0f466e236cea87c8cd6ef5f68f04e259c0552e", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -478,6 +478,11 @@ parse_missing_for_in_trait_impl = missing `for` in a trait impl\n \n parse_expected_trait_in_trait_impl_found_type = expected a trait, found type\n \n+parse_extra_impl_keyword_in_trait_impl = unexpected `impl` keyword\n+    .suggestion = remove the extra `impl`\n+    .note = this is parsed as an `impl Trait` type, but a trait is expected at this position\n+\n+\n parse_non_item_in_item_list = non-item in item list\n     .suggestion_use_const_not_let = consider using `const` instead of `let` for associated const\n     .label_list_start = item list starts here"}, {"sha": "84494eab855c4ffcedbd08b2be79517c083be1eb", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1519,6 +1519,16 @@ pub(crate) struct ExpectedTraitInTraitImplFoundType {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_extra_impl_keyword_in_trait_impl)]\n+pub(crate) struct ExtraImplKeywordInTraitImpl {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+    pub extra_impl_kw: Span,\n+    #[note]\n+    pub impl_trait_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_bounds_not_allowed_on_trait_aliases)]\n pub(crate) struct BoundsNotAllowedOnTraitAliases {"}, {"sha": "ee712a8e1b5db6530e1de2219a42a442bd632051", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1180,6 +1180,10 @@ impl<'a> Parser<'a> {\n                         self.restore_snapshot(snapshot);\n                         let close_paren = self.prev_token.span;\n                         let span = lo.to(close_paren);\n+                        // filter shorthand fields\n+                        let fields: Vec<_> =\n+                            fields.into_iter().filter(|field| !field.is_shorthand).collect();\n+\n                         if !fields.is_empty() &&\n                             // `token.kind` should not be compared here.\n                             // This is because the `snapshot.token.kind` is treated as the same as"}, {"sha": "dc18d400f1e9d1059195c623f78982ab64e86807", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -603,10 +603,24 @@ impl<'a> Parser<'a> {\n                 let path = match ty_first.kind {\n                     // This notably includes paths passed through `ty` macro fragments (#46438).\n                     TyKind::Path(None, path) => path,\n-                    _ => {\n-                        self.sess.emit_err(errors::ExpectedTraitInTraitImplFoundType {\n-                            span: ty_first.span,\n-                        });\n+                    other => {\n+                        if let TyKind::ImplTrait(_, bounds) = other\n+                            && let [bound] = bounds.as_slice()\n+                        {\n+                            // Suggest removing extra `impl` keyword:\n+                            // `impl<T: Default> impl Default for Wrapper<T>`\n+                            //                   ^^^^^\n+                            let extra_impl_kw = ty_first.span.until(bound.span());\n+                            self.sess\n+                                .emit_err(errors::ExtraImplKeywordInTraitImpl {\n+                                    extra_impl_kw,\n+                                    impl_trait_span: ty_first.span\n+                                });\n+                        } else {\n+                            self.sess.emit_err(errors::ExpectedTraitInTraitImplFoundType {\n+                                span: ty_first.span,\n+                            });\n+                        }\n                         err_path(ty_first.span)\n                     }\n                 };"}, {"sha": "455d7b89f9ca125db6cddb20f3bc0bd6ddcd381e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -19,9 +19,9 @@ use rustc_hir::{\n use rustc_hir::{MethodKind, Target, Unsafety};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, INVALID_MACRO_EXPORT_ARGUMENTS,"}, {"sha": "2357b0aadefbbf669d277c9aed6d6220da2dbc97", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};"}, {"sha": "7812dcde44c831793142709f4a6fabd6bfdb077d", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Node, PatKind, TyKind};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::privacy::Level;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "8ea95b3f383cd6f3082786ae06b737c06bb1cd33", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -6,8 +6,8 @@ use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::resolve_path;\n use rustc_hir as hir;\n use rustc_hir::HirId;\n+use rustc_middle::query::{LocalCrate, Providers};\n use rustc_middle::ty::TyCtxt;\n-use rustc_middle::{query::LocalCrate, ty::query::Providers};\n use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n \n use crate::errors::DebugVisualizerUnreadable;"}, {"sha": "d8b9f4fae87fed0dd915ec8d8cd3696b51b4578e", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -13,7 +13,7 @@ use rustc_ast as ast;\n use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::OwnerId;\n use rustc_middle::query::LocalCrate;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "ffd8f77b78b8f86282cb35b41254be0f31e17d0f", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::error_code;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::{ItemId, Node, CRATE_HIR_ID};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{sigpipe, CrateType, EntryFnType};\n use rustc_session::parse::feature_err;"}, {"sha": "476394f30ccfdf98a976e19e338d0847ab5f2032", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::cstore::ExternCrate;\n use rustc_span::{symbol::kw::Empty, Span};\n \n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n pub(crate) enum Duplicate {\n     Plain,"}, {"sha": "0da4b29464862e5127af6342b566512e6ec20766", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -22,7 +22,7 @@ extern crate tracing;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n mod check_attr;\n mod check_const;"}, {"sha": "44174b1b89d110387347f35f124a1cd418c0e41c", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -9,7 +9,7 @@ use rustc_attr::{rust_version_symbol, VERSION_PLACEHOLDER};\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::lib_features::LibFeatures;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};"}, {"sha": "63b1578d43fd726ef3ad41c4c1f8a540ea7a1a16", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -94,7 +94,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n use rustc_index::IndexVec;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "73cfe68e7f214f24208f54f01a5b17233a531ce1", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Destination, Movability, Node};\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::hygiene::DesugaringKind;"}, {"sha": "a849d61edfeaa1c6699891462bbd4352cae9d5f8", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{ExprKind, InlineAsmOperand, StmtKind};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::UNDEFINED_NAKED_FUNCTION_ABI;\n use rustc_span::symbol::sym;"}, {"sha": "160528e4074d4c8e76240ccb1bb8e96bceaefce8", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::middle::privacy::{self, Level};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::CrateType;\n use rustc_target::spec::abi::Abi;"}, {"sha": "f9060328f48c2acbf39620b4b269ffc7528bdcc0", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -16,7 +16,8 @@ use rustc_hir::{FieldDef, Item, ItemKind, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n use rustc_middle::middle::stability::{AllowUnstable, DeprecationEntry, Index};\n-use rustc_middle::ty::{query::Providers, TyCtxt};\n+use rustc_middle::query::Providers;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n use rustc_session::lint::builtin::{INEFFECTIVE_UNSTABLE_TRAIT_IMPL, USELESS_DEPRECATED};\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "d87df706cc84e5f09d6ea89a1be5d4d7af3ac06b", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -5,7 +5,7 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{self, HirId};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n "}, {"sha": "7b39cb0a06891c4cc353264985d668bed5615b64", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 158, "deletions": 118, "changes": 276, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -25,9 +25,9 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, ItemId, Node, PatKind};\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::middle::privacy::{EffectiveVisibilities, Level};\n+use rustc_middle::middle::privacy::{EffectiveVisibilities, EffectiveVisibility, Level};\n+use rustc_middle::query::Providers;\n use rustc_middle::span_bug;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, GenericParamDefKind};\n use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -38,7 +38,7 @@ use rustc_span::Span;\n \n use std::marker::PhantomData;\n use std::ops::ControlFlow;\n-use std::{cmp, fmt, mem};\n+use std::{fmt, mem};\n \n use errors::{\n     FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n@@ -408,8 +408,9 @@ impl VisibilityLike for ty::Visibility {\n         min(find.tcx.local_visibility(def_id), find.min, find.tcx)\n     }\n }\n-impl VisibilityLike for Option<Level> {\n-    const MAX: Self = Some(Level::Direct);\n+\n+impl VisibilityLike for Option<EffectiveVisibility> {\n+    const MAX: Self = Some(EffectiveVisibility::from_vis(ty::Visibility::Public));\n     // Type inference is very smart sometimes.\n     // It can make an impl reachable even some components of its type or trait are unreachable.\n     // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`\n@@ -421,7 +422,13 @@ impl VisibilityLike for Option<Level> {\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n     fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self {\n-        cmp::min(find.effective_visibilities.public_at_level(def_id), find.min)\n+        if let Some(min) = find.min {\n+            return find\n+                .effective_visibilities\n+                .effective_vis(def_id)\n+                .map(|eff_vis| min.min(*eff_vis, find.tcx));\n+        }\n+        None\n     }\n }\n \n@@ -447,49 +454,79 @@ struct EmbargoVisitor<'tcx> {\n     ///     n::p::f()\n     /// }\n     macro_reachable: FxHashSet<(LocalDefId, LocalDefId)>,\n-    /// Previous visibility level; `None` means unreachable.\n-    prev_level: Option<Level>,\n     /// Has something changed in the level map?\n     changed: bool,\n }\n \n struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {\n-    level: Option<Level>,\n+    effective_vis: Option<EffectiveVisibility>,\n     item_def_id: LocalDefId,\n     ev: &'a mut EmbargoVisitor<'tcx>,\n+    level: Level,\n }\n \n impl<'tcx> EmbargoVisitor<'tcx> {\n-    fn get(&self, def_id: LocalDefId) -> Option<Level> {\n-        self.effective_visibilities.public_at_level(def_id)\n-    }\n-\n-    /// Updates node level and returns the updated level.\n-    fn update(&mut self, def_id: LocalDefId, level: Option<Level>) -> Option<Level> {\n-        let old_level = self.get(def_id);\n-        // Visibility levels can only grow.\n-        if level > old_level {\n-            self.effective_visibilities.set_public_at_level(\n-                def_id,\n-                || ty::Visibility::Restricted(self.tcx.parent_module_from_def_id(def_id)),\n-                level.unwrap(),\n-            );\n-            self.changed = true;\n-            level\n-        } else {\n-            old_level\n+    fn get(&self, def_id: LocalDefId) -> Option<EffectiveVisibility> {\n+        self.effective_visibilities.effective_vis(def_id).copied()\n+    }\n+\n+    // Updates node effective visibility.\n+    fn update(\n+        &mut self,\n+        def_id: LocalDefId,\n+        inherited_effective_vis: Option<EffectiveVisibility>,\n+        level: Level,\n+    ) {\n+        let nominal_vis = self.tcx.local_visibility(def_id);\n+        self.update_eff_vis(def_id, inherited_effective_vis, Some(nominal_vis), level);\n+    }\n+\n+    fn update_eff_vis(\n+        &mut self,\n+        def_id: LocalDefId,\n+        inherited_effective_vis: Option<EffectiveVisibility>,\n+        nominal_vis: Option<ty::Visibility>,\n+        level: Level,\n+    ) {\n+        if let Some(inherited_effective_vis) = inherited_effective_vis {\n+            let private_vis =\n+                ty::Visibility::Restricted(self.tcx.parent_module_from_def_id(def_id));\n+            if Some(private_vis) != nominal_vis {\n+                self.changed |= self.effective_visibilities.update(\n+                    def_id,\n+                    nominal_vis,\n+                    || private_vis,\n+                    inherited_effective_vis,\n+                    level,\n+                    self.tcx,\n+                );\n+            }\n         }\n     }\n \n     fn reach(\n         &mut self,\n         def_id: LocalDefId,\n-        level: Option<Level>,\n+        effective_vis: Option<EffectiveVisibility>,\n     ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n         ReachEverythingInTheInterfaceVisitor {\n-            level: cmp::min(level, Some(Level::Reachable)),\n+            effective_vis,\n             item_def_id: def_id,\n             ev: self,\n+            level: Level::Reachable,\n+        }\n+    }\n+\n+    fn reach_through_impl_trait(\n+        &mut self,\n+        def_id: LocalDefId,\n+        effective_vis: Option<EffectiveVisibility>,\n+    ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n+        ReachEverythingInTheInterfaceVisitor {\n+            effective_vis,\n+            item_def_id: def_id,\n+            ev: self,\n+            level: Level::ReachableThroughImplTrait,\n         }\n     }\n \n@@ -510,16 +547,18 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             return;\n         }\n \n-        if self.get(local_def_id).is_none() {\n+        if self.effective_visibilities.public_at_level(local_def_id).is_none() {\n             return;\n         }\n \n         // Since we are starting from an externally visible module,\n         // all the parents in the loop below are also guaranteed to be modules.\n         let mut module_def_id = macro_module_def_id;\n+        let macro_ev = self.get(local_def_id);\n+        assert!(macro_ev.is_some());\n         loop {\n             let changed_reachability =\n-                self.update_macro_reachable(module_def_id, macro_module_def_id);\n+                self.update_macro_reachable(module_def_id, macro_module_def_id, macro_ev);\n             if changed_reachability || module_def_id == CRATE_DEF_ID {\n                 break;\n             }\n@@ -533,21 +572,33 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         &mut self,\n         module_def_id: LocalDefId,\n         defining_mod: LocalDefId,\n+        macro_ev: Option<EffectiveVisibility>,\n     ) -> bool {\n         if self.macro_reachable.insert((module_def_id, defining_mod)) {\n-            self.update_macro_reachable_mod(module_def_id, defining_mod);\n+            self.update_macro_reachable_mod(module_def_id, defining_mod, macro_ev);\n             true\n         } else {\n             false\n         }\n     }\n \n-    fn update_macro_reachable_mod(&mut self, module_def_id: LocalDefId, defining_mod: LocalDefId) {\n+    fn update_macro_reachable_mod(\n+        &mut self,\n+        module_def_id: LocalDefId,\n+        defining_mod: LocalDefId,\n+        macro_ev: Option<EffectiveVisibility>,\n+    ) {\n         let module = self.tcx.hir().get_module(module_def_id).0;\n         for item_id in module.item_ids {\n             let def_kind = self.tcx.def_kind(item_id.owner_id);\n             let vis = self.tcx.local_visibility(item_id.owner_id.def_id);\n-            self.update_macro_reachable_def(item_id.owner_id.def_id, def_kind, vis, defining_mod);\n+            self.update_macro_reachable_def(\n+                item_id.owner_id.def_id,\n+                def_kind,\n+                vis,\n+                defining_mod,\n+                macro_ev,\n+            );\n         }\n         for child in self.tcx.module_children_local(module_def_id) {\n             // FIXME: Use module children for the logic above too.\n@@ -556,7 +607,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n                 && let Res::Def(def_kind, def_id) = child.res\n                 && let Some(def_id) = def_id.as_local() {\n                 let vis = self.tcx.local_visibility(def_id);\n-                self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod);\n+                self.update_macro_reachable_def(def_id, def_kind, vis, defining_mod, macro_ev);\n             }\n         }\n     }\n@@ -567,16 +618,14 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         def_kind: DefKind,\n         vis: ty::Visibility,\n         module: LocalDefId,\n+        macro_ev: Option<EffectiveVisibility>,\n     ) {\n-        let level = Some(Level::Reachable);\n-        if vis.is_public() {\n-            self.update(def_id, level);\n-        }\n+        self.update(def_id, macro_ev, Level::Reachable);\n         match def_kind {\n             // No type privacy, so can be directly marked as reachable.\n             DefKind::Const | DefKind::Static(_) | DefKind::TraitAlias | DefKind::TyAlias => {\n                 if vis.is_accessible_from(module, self.tcx) {\n-                    self.update(def_id, level);\n+                    self.update(def_id, macro_ev, Level::Reachable);\n                 }\n             }\n \n@@ -588,7 +637,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n                 let item = self.tcx.hir().expect_item(def_id);\n                 if let hir::ItemKind::Macro(MacroDef { macro_rules: false, .. }, _) = item.kind {\n                     if vis.is_accessible_from(module, self.tcx) {\n-                        self.update(def_id, level);\n+                        self.update(def_id, macro_ev, Level::Reachable);\n                     }\n                 }\n             }\n@@ -599,26 +648,24 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             // the module, however may be reachable.\n             DefKind::Mod => {\n                 if vis.is_accessible_from(module, self.tcx) {\n-                    self.update_macro_reachable(def_id, module);\n+                    self.update_macro_reachable(def_id, module, macro_ev);\n                 }\n             }\n \n             DefKind::Struct | DefKind::Union => {\n                 // While structs and unions have type privacy, their fields do not.\n-                if vis.is_public() {\n-                    let item = self.tcx.hir().expect_item(def_id);\n-                    if let hir::ItemKind::Struct(ref struct_def, _)\n-                    | hir::ItemKind::Union(ref struct_def, _) = item.kind\n-                    {\n-                        for field in struct_def.fields() {\n-                            let field_vis = self.tcx.local_visibility(field.def_id);\n-                            if field_vis.is_accessible_from(module, self.tcx) {\n-                                self.reach(field.def_id, level).ty();\n-                            }\n+                let item = self.tcx.hir().expect_item(def_id);\n+                if let hir::ItemKind::Struct(ref struct_def, _)\n+                | hir::ItemKind::Union(ref struct_def, _) = item.kind\n+                {\n+                    for field in struct_def.fields() {\n+                        let field_vis = self.tcx.local_visibility(field.def_id);\n+                        if field_vis.is_accessible_from(module, self.tcx) {\n+                            self.reach(field.def_id, macro_ev).ty();\n                         }\n-                    } else {\n-                        bug!(\"item {:?} with DefKind {:?}\", item, def_kind);\n                     }\n+                } else {\n+                    bug!(\"item {:?} with DefKind {:?}\", item, def_kind);\n                 }\n             }\n \n@@ -662,14 +709,16 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        let item_level = match item.kind {\n+        let item_ev = match item.kind {\n             hir::ItemKind::Impl { .. } => {\n-                let impl_level = Option::<Level>::of_impl(\n+                let impl_ev = Option::<EffectiveVisibility>::of_impl(\n                     item.owner_id.def_id,\n                     self.tcx,\n                     &self.effective_visibilities,\n                 );\n-                self.update(item.owner_id.def_id, impl_level)\n+\n+                self.update_eff_vis(item.owner_id.def_id, impl_ev, None, Level::Direct);\n+                impl_ev\n             }\n             _ => self.get(item.owner_id.def_id),\n         };\n@@ -678,48 +727,43 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         match item.kind {\n             hir::ItemKind::Enum(ref def, _) => {\n                 for variant in def.variants {\n-                    let variant_level = self.update(variant.def_id, item_level);\n+                    self.update(variant.def_id, item_ev, Level::Reachable);\n+                    let variant_ev = self.get(variant.def_id);\n                     if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n-                        self.update(ctor_def_id, item_level);\n+                        self.update(ctor_def_id, variant_ev, Level::Reachable);\n                     }\n                     for field in variant.data.fields() {\n-                        self.update(field.def_id, variant_level);\n+                        self.update(field.def_id, variant_ev, Level::Reachable);\n                     }\n                 }\n             }\n             hir::ItemKind::Impl(ref impl_) => {\n                 for impl_item_ref in impl_.items {\n-                    if impl_.of_trait.is_some()\n-                        || self.tcx.visibility(impl_item_ref.id.owner_id).is_public()\n-                    {\n-                        self.update(impl_item_ref.id.owner_id.def_id, item_level);\n-                    }\n+                    let def_id = impl_item_ref.id.owner_id.def_id;\n+                    let nominal_vis =\n+                        impl_.of_trait.is_none().then(|| self.tcx.local_visibility(def_id));\n+                    self.update_eff_vis(def_id, item_ev, nominal_vis, Level::Direct);\n                 }\n             }\n             hir::ItemKind::Trait(.., trait_item_refs) => {\n                 for trait_item_ref in trait_item_refs {\n-                    self.update(trait_item_ref.id.owner_id.def_id, item_level);\n+                    self.update(trait_item_ref.id.owner_id.def_id, item_ev, Level::Reachable);\n                 }\n             }\n             hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n                 if let Some(ctor_def_id) = def.ctor_def_id() {\n-                    self.update(ctor_def_id, item_level);\n+                    self.update(ctor_def_id, item_ev, Level::Reachable);\n                 }\n                 for field in def.fields() {\n-                    let vis = self.tcx.visibility(field.def_id);\n-                    if vis.is_public() {\n-                        self.update(field.def_id, item_level);\n-                    }\n+                    self.update(field.def_id, item_ev, Level::Reachable);\n                 }\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 self.update_reachability_from_macro(item.owner_id.def_id, macro_def);\n             }\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n-                    if self.tcx.visibility(foreign_item.id.owner_id).is_public() {\n-                        self.update(foreign_item.id.owner_id.def_id, item_level);\n-                    }\n+                    self.update(foreign_item.id.owner_id.def_id, item_ev, Level::Reachable);\n                 }\n             }\n \n@@ -754,26 +798,30 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     // FIXME: This is some serious pessimization intended to workaround deficiencies\n                     // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n                     // reachable if they are returned via `impl Trait`, even from private functions.\n-                    let exist_level = cmp::max(item_level, Some(Level::ReachableThroughImplTrait));\n-                    self.reach(item.owner_id.def_id, exist_level).generics().predicates().ty();\n+                    let exist_ev = Some(EffectiveVisibility::from_vis(ty::Visibility::Public));\n+                    self.reach_through_impl_trait(item.owner_id.def_id, exist_ev)\n+                        .generics()\n+                        .predicates()\n+                        .ty();\n                 }\n             }\n             // Visit everything.\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Static(..)\n             | hir::ItemKind::Fn(..)\n             | hir::ItemKind::TyAlias(..) => {\n-                if item_level.is_some() {\n-                    self.reach(item.owner_id.def_id, item_level).generics().predicates().ty();\n+                if item_ev.is_some() {\n+                    self.reach(item.owner_id.def_id, item_ev).generics().predicates().ty();\n                 }\n             }\n             hir::ItemKind::Trait(.., trait_item_refs) => {\n-                if item_level.is_some() {\n-                    self.reach(item.owner_id.def_id, item_level).generics().predicates();\n+                if item_ev.is_some() {\n+                    self.reach(item.owner_id.def_id, item_ev).generics().predicates();\n \n                     for trait_item_ref in trait_item_refs {\n                         let tcx = self.tcx;\n-                        let mut reach = self.reach(trait_item_ref.id.owner_id.def_id, item_level);\n+                        let mut reach = self.reach(trait_item_ref.id.owner_id.def_id, item_ev);\n+\n                         reach.generics().predicates();\n \n                         if trait_item_ref.kind == AssocItemKind::Type\n@@ -787,23 +835,24 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             hir::ItemKind::TraitAlias(..) => {\n-                if item_level.is_some() {\n-                    self.reach(item.owner_id.def_id, item_level).generics().predicates();\n+                if item_ev.is_some() {\n+                    self.reach(item.owner_id.def_id, item_ev).generics().predicates();\n                 }\n             }\n             // Visit everything except for private impl items.\n             hir::ItemKind::Impl(ref impl_) => {\n-                if item_level.is_some() {\n-                    self.reach(item.owner_id.def_id, item_level)\n+                if item_ev.is_some() {\n+                    self.reach(item.owner_id.def_id, item_ev)\n                         .generics()\n                         .predicates()\n                         .ty()\n                         .trait_ref();\n \n                     for impl_item_ref in impl_.items {\n-                        let impl_item_level = self.get(impl_item_ref.id.owner_id.def_id);\n-                        if impl_item_level.is_some() {\n-                            self.reach(impl_item_ref.id.owner_id.def_id, impl_item_level)\n+                        let impl_item_ev = self.get(impl_item_ref.id.owner_id.def_id);\n+\n+                        if impl_item_ev.is_some() {\n+                            self.reach(impl_item_ref.id.owner_id.def_id, impl_item_ev)\n                                 .generics()\n                                 .predicates()\n                                 .ty();\n@@ -814,33 +863,33 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n \n             // Visit everything, but enum variants have their own levels.\n             hir::ItemKind::Enum(ref def, _) => {\n-                if item_level.is_some() {\n-                    self.reach(item.owner_id.def_id, item_level).generics().predicates();\n+                if item_ev.is_some() {\n+                    self.reach(item.owner_id.def_id, item_ev).generics().predicates();\n                 }\n                 for variant in def.variants {\n-                    let variant_level = self.get(variant.def_id);\n-                    if variant_level.is_some() {\n+                    let variant_ev = self.get(variant.def_id);\n+                    if variant_ev.is_some() {\n                         for field in variant.data.fields() {\n-                            self.reach(field.def_id, variant_level).ty();\n+                            self.reach(field.def_id, variant_ev).ty();\n                         }\n                         // Corner case: if the variant is reachable, but its\n                         // enum is not, make the enum reachable as well.\n-                        self.reach(item.owner_id.def_id, variant_level).ty();\n+                        self.reach(item.owner_id.def_id, variant_ev).ty();\n                     }\n                     if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n-                        let ctor_level = self.get(ctor_def_id);\n-                        if ctor_level.is_some() {\n-                            self.reach(item.owner_id.def_id, ctor_level).ty();\n+                        let ctor_ev = self.get(ctor_def_id);\n+                        if ctor_ev.is_some() {\n+                            self.reach(item.owner_id.def_id, ctor_ev).ty();\n                         }\n                     }\n                 }\n             }\n             // Visit everything, but foreign items have their own levels.\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n-                    let foreign_item_level = self.get(foreign_item.id.owner_id.def_id);\n-                    if foreign_item_level.is_some() {\n-                        self.reach(foreign_item.id.owner_id.def_id, foreign_item_level)\n+                    let foreign_item_ev = self.get(foreign_item.id.owner_id.def_id);\n+                    if foreign_item_ev.is_some() {\n+                        self.reach(foreign_item.id.owner_id.def_id, foreign_item_ev)\n                             .generics()\n                             .predicates()\n                             .ty();\n@@ -849,36 +898,32 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             // Visit everything except for private fields.\n             hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {\n-                if item_level.is_some() {\n-                    self.reach(item.owner_id.def_id, item_level).generics().predicates();\n+                if item_ev.is_some() {\n+                    self.reach(item.owner_id.def_id, item_ev).generics().predicates();\n                     for field in struct_def.fields() {\n-                        let field_level = self.get(field.def_id);\n-                        if field_level.is_some() {\n-                            self.reach(field.def_id, field_level).ty();\n+                        let field_ev = self.get(field.def_id);\n+                        if field_ev.is_some() {\n+                            self.reach(field.def_id, field_ev).ty();\n                         }\n                     }\n                 }\n                 if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n-                    let ctor_level = self.get(ctor_def_id);\n-                    if ctor_level.is_some() {\n-                        self.reach(item.owner_id.def_id, ctor_level).ty();\n+                    let ctor_ev = self.get(ctor_def_id);\n+                    if ctor_ev.is_some() {\n+                        self.reach(item.owner_id.def_id, ctor_ev).ty();\n                     }\n                 }\n             }\n         }\n \n-        let orig_level = mem::replace(&mut self.prev_level, item_level);\n         intravisit::walk_item(self, item);\n-        self.prev_level = orig_level;\n     }\n \n     fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {\n         // Blocks can have public items, for example impls, but they always\n         // start as completely private regardless of publicity of a function,\n         // constant, type, field, etc., in which this block resides.\n-        let orig_level = mem::replace(&mut self.prev_level, None);\n         intravisit::walk_block(self, b);\n-        self.prev_level = orig_level;\n     }\n }\n \n@@ -932,11 +977,7 @@ impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx>\n         _descr: &dyn fmt::Display,\n     ) -> ControlFlow<Self::BreakTy> {\n         if let Some(def_id) = def_id.as_local() {\n-            if let (ty::Visibility::Public, _) | (_, Some(Level::ReachableThroughImplTrait)) =\n-                (self.tcx().visibility(def_id.to_def_id()), self.level)\n-            {\n-                self.ev.update(def_id, self.level);\n-            }\n+            self.ev.update_eff_vis(def_id, self.effective_vis, None, self.level);\n         }\n         ControlFlow::Continue(())\n     }\n@@ -2164,7 +2205,6 @@ fn effective_visibilities(tcx: TyCtxt<'_>, (): ()) -> &EffectiveVisibilities {\n         tcx,\n         effective_visibilities: tcx.resolutions(()).effective_visibilities.clone(),\n         macro_reachable: Default::default(),\n-        prev_level: Some(Level::Direct),\n         changed: false,\n     };\n "}, {"sha": "e596993465c1bf764a631c64cb25a6501fb71e64", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -7,6 +7,8 @@ edition = \"2021\"\n \n \n [dependencies]\n+memoffset = { version = \"0.6.0\", features = [\"unstable_const\"] }\n+field-offset = \"0.3.5\"\n measureme = \"10.0.0\"\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "5ca102a09460aec8f91d39dccda9c3faba57dc5b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 183, "deletions": 20, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -3,60 +3,223 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n // this shouldn't be necessary, but the check for `&mut _` is too naive and denies returning a function pointer that takes a mut ref\n #![feature(const_mut_refs)]\n+#![feature(const_refs_to_cell)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n+#![allow(rustc::potential_query_instability, unused_parens)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_middle;\n \n use crate::plumbing::{encode_all_query_results, try_mark_green};\n+use field_offset::offset_of;\n+use rustc_data_structures::stable_hasher::HashStable;\n+use rustc_data_structures::sync::AtomicU64;\n use rustc_middle::arena::Arena;\n+use rustc_middle::dep_graph::DepNodeIndex;\n use rustc_middle::dep_graph::{self, DepKind, DepKindStruct};\n use rustc_middle::query::erase::{erase, restore, Erase};\n+use rustc_middle::query::on_disk_cache::OnDiskCache;\n use rustc_middle::query::AsLocalKey;\n-use rustc_middle::ty::query::{\n+use rustc_middle::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n+    DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n };\n-use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine, QuerySystemFns};\n+use rustc_middle::ty::query::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n+use rustc_query_system::ich::StableHashingContext;\n+use rustc_query_system::query::{\n+    get_query, HashResult, QueryCache, QueryConfig, QueryInfo, QueryMap, QueryMode, QueryState,\n+};\n+use rustc_query_system::HandleCycleError;\n use rustc_query_system::Value;\n use rustc_span::Span;\n \n #[macro_use]\n mod plumbing;\n pub use crate::plumbing::QueryCtxt;\n \n-pub use rustc_query_system::query::QueryConfig;\n-use rustc_query_system::query::*;\n-\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n-/// This is implemented per query and restoring query values from their erased state.\n-trait QueryConfigRestored<'tcx>: QueryConfig<QueryCtxt<'tcx>> + Default {\n-    type RestoredValue;\n+struct DynamicConfig<\n+    'tcx,\n+    C: QueryCache,\n+    const ANON: bool,\n+    const DEPTH_LIMIT: bool,\n+    const FEEDABLE: bool,\n+> {\n+    dynamic: &'tcx DynamicQuery<'tcx, C>,\n+}\n \n-    fn restore(value: <Self as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::RestoredValue;\n+impl<'tcx, C: QueryCache, const ANON: bool, const DEPTH_LIMIT: bool, const FEEDABLE: bool> Copy\n+    for DynamicConfig<'tcx, C, ANON, DEPTH_LIMIT, FEEDABLE>\n+{\n+}\n+impl<'tcx, C: QueryCache, const ANON: bool, const DEPTH_LIMIT: bool, const FEEDABLE: bool> Clone\n+    for DynamicConfig<'tcx, C, ANON, DEPTH_LIMIT, FEEDABLE>\n+{\n+    fn clone(&self) -> Self {\n+        DynamicConfig { dynamic: self.dynamic }\n+    }\n }\n \n-rustc_query_append! { define_queries! }\n+impl<'tcx, C: QueryCache, const ANON: bool, const DEPTH_LIMIT: bool, const FEEDABLE: bool>\n+    QueryConfig<QueryCtxt<'tcx>> for DynamicConfig<'tcx, C, ANON, DEPTH_LIMIT, FEEDABLE>\n+where\n+    for<'a> C::Key: HashStable<StableHashingContext<'a>>,\n+{\n+    type Key = C::Key;\n+    type Value = C::Value;\n+    type Cache = C;\n+\n+    #[inline(always)]\n+    fn name(self) -> &'static str {\n+        self.dynamic.name\n+    }\n+\n+    #[inline(always)]\n+    fn cache_on_disk(self, tcx: TyCtxt<'tcx>, key: &Self::Key) -> bool {\n+        (self.dynamic.cache_on_disk)(tcx, key)\n+    }\n+\n+    #[inline(always)]\n+    fn query_state<'a>(self, qcx: QueryCtxt<'tcx>) -> &'a QueryState<Self::Key, DepKind>\n+    where\n+        QueryCtxt<'tcx>: 'a,\n+    {\n+        self.dynamic.query_state.apply(&qcx.tcx.query_system.states)\n+    }\n+\n+    #[inline(always)]\n+    fn query_cache<'a>(self, qcx: QueryCtxt<'tcx>) -> &'a Self::Cache\n+    where\n+        'tcx: 'a,\n+    {\n+        self.dynamic.query_cache.apply(&qcx.tcx.query_system.caches)\n+    }\n+\n+    #[inline(always)]\n+    fn execute_query(self, tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n+        (self.dynamic.execute_query)(tcx, key)\n+    }\n+\n+    #[inline(always)]\n+    fn compute(self, qcx: QueryCtxt<'tcx>, key: Self::Key) -> Self::Value {\n+        (self.dynamic.compute)(qcx.tcx, key)\n+    }\n+\n+    #[inline(always)]\n+    fn try_load_from_disk(\n+        self,\n+        qcx: QueryCtxt<'tcx>,\n+        key: &Self::Key,\n+        prev_index: SerializedDepNodeIndex,\n+        index: DepNodeIndex,\n+    ) -> Option<Self::Value> {\n+        if self.dynamic.can_load_from_disk {\n+            (self.dynamic.try_load_from_disk)(qcx.tcx, key, prev_index, index)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    fn loadable_from_disk(\n+        self,\n+        qcx: QueryCtxt<'tcx>,\n+        key: &Self::Key,\n+        index: SerializedDepNodeIndex,\n+    ) -> bool {\n+        (self.dynamic.loadable_from_disk)(qcx.tcx, key, index)\n+    }\n+\n+    fn value_from_cycle_error(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        cycle: &[QueryInfo<DepKind>],\n+    ) -> Self::Value {\n+        (self.dynamic.value_from_cycle_error)(tcx, cycle)\n+    }\n+\n+    #[inline(always)]\n+    fn format_value(self) -> fn(&Self::Value) -> String {\n+        self.dynamic.format_value\n+    }\n+\n+    #[inline(always)]\n+    fn anon(self) -> bool {\n+        ANON\n+    }\n+\n+    #[inline(always)]\n+    fn eval_always(self) -> bool {\n+        self.dynamic.eval_always\n+    }\n+\n+    #[inline(always)]\n+    fn depth_limit(self) -> bool {\n+        DEPTH_LIMIT\n+    }\n+\n+    #[inline(always)]\n+    fn feedable(self) -> bool {\n+        FEEDABLE\n+    }\n+\n+    #[inline(always)]\n+    fn dep_kind(self) -> DepKind {\n+        self.dynamic.dep_kind\n+    }\n+\n+    #[inline(always)]\n+    fn handle_cycle_error(self) -> HandleCycleError {\n+        self.dynamic.handle_cycle_error\n+    }\n+\n+    #[inline(always)]\n+    fn hash_result(self) -> HashResult<Self::Value> {\n+        self.dynamic.hash_result\n+    }\n+}\n \n-pub fn query_system_fns<'tcx>(\n+/// This is implemented per query. It allows restoring query values from their erased state\n+/// and constructing a QueryConfig.\n+trait QueryConfigRestored<'tcx> {\n+    type RestoredValue;\n+    type Config: QueryConfig<QueryCtxt<'tcx>>;\n+\n+    fn config(tcx: TyCtxt<'tcx>) -> Self::Config;\n+    fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value)\n+    -> Self::RestoredValue;\n+}\n+\n+pub fn query_system<'tcx>(\n     local_providers: Providers,\n     extern_providers: ExternProviders,\n-) -> QuerySystemFns<'tcx> {\n-    QuerySystemFns {\n-        engine: engine(),\n-        local_providers,\n-        extern_providers,\n-        query_structs: make_dep_kind_array!(query_structs).to_vec(),\n-        encode_query_results: encode_all_query_results,\n-        try_mark_green: try_mark_green,\n+    on_disk_cache: Option<OnDiskCache<'tcx>>,\n+) -> QuerySystem<'tcx> {\n+    QuerySystem {\n+        states: Default::default(),\n+        arenas: Default::default(),\n+        caches: Default::default(),\n+        dynamic_queries: dynamic_queries(),\n+        on_disk_cache,\n+        fns: QuerySystemFns {\n+            engine: engine(),\n+            local_providers,\n+            extern_providers,\n+            query_structs: make_dep_kind_array!(query_structs).to_vec(),\n+            encode_query_results: encode_all_query_results,\n+            try_mark_green: try_mark_green,\n+        },\n+        jobs: AtomicU64::new(1),\n     }\n }\n+\n+rustc_query_append! { define_queries! }"}, {"sha": "74924e8113e6fc5a70e87fa885ba1b93a29bed90", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 105, "deletions": 143, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,6 +4,7 @@\n \n use crate::rustc_middle::dep_graph::DepContext;\n use crate::rustc_middle::ty::TyEncoder;\n+use crate::QueryConfigRestored;\n use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_data_structures::sync::Lock;\n use rustc_errors::Diagnostic;\n@@ -265,14 +266,14 @@ macro_rules! hash_result {\n }\n \n macro_rules! call_provider {\n-    ([][$qcx:expr, $name:ident, $key:expr]) => {{\n-        ($qcx.query_system.fns.local_providers.$name)($qcx, $key)\n+    ([][$tcx:expr, $name:ident, $key:expr]) => {{\n+        ($tcx.query_system.fns.local_providers.$name)($tcx, $key)\n     }};\n-    ([(separate_provide_extern) $($rest:tt)*][$qcx:expr, $name:ident, $key:expr]) => {{\n+    ([(separate_provide_extern) $($rest:tt)*][$tcx:expr, $name:ident, $key:expr]) => {{\n         if let Some(key) = $key.as_local_key() {\n-            ($qcx.query_system.fns.local_providers.$name)($qcx, key)\n+            ($tcx.query_system.fns.local_providers.$name)($tcx, key)\n         } else {\n-            ($qcx.query_system.fns.extern_providers.$name)($qcx, $key)\n+            ($tcx.query_system.fns.extern_providers.$name)($tcx, $key)\n         }\n     }};\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n@@ -341,7 +342,7 @@ pub(crate) fn create_query_frame<\n }\n \n pub(crate) fn encode_query_results<'a, 'tcx, Q>(\n-    query: Q,\n+    query: Q::Config,\n     qcx: QueryCtxt<'tcx>,\n     encoder: &mut CacheEncoder<'a, 'tcx>,\n     query_result_index: &mut EncodedDepNodeIndex,\n@@ -392,12 +393,26 @@ pub(crate) fn loadable_from_disk<'tcx>(tcx: TyCtxt<'tcx>, id: SerializedDepNodeI\n \n pub(crate) fn try_load_from_disk<'tcx, V>(\n     tcx: TyCtxt<'tcx>,\n-    id: SerializedDepNodeIndex,\n+    prev_index: SerializedDepNodeIndex,\n+    index: DepNodeIndex,\n ) -> Option<V>\n where\n     V: for<'a> Decodable<CacheDecoder<'a, 'tcx>>,\n {\n-    tcx.query_system.on_disk_cache.as_ref()?.try_load_query_result(tcx, id)\n+    let on_disk_cache = tcx.query_system.on_disk_cache.as_ref()?;\n+\n+    let prof_timer = tcx.prof.incr_cache_loading();\n+\n+    // The call to `with_query_deserialization` enforces that no new `DepNodes`\n+    // are created during deserialization. See the docs of that method for more\n+    // details.\n+    let value = tcx\n+        .dep_graph\n+        .with_query_deserialization(|| on_disk_cache.try_load_query_result(tcx, prev_index));\n+\n+    prof_timer.finish_with_query_invocation_id(index.into());\n+\n+    value\n }\n \n fn force_from_dep_node<'tcx, Q>(query: Q, tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n@@ -434,10 +449,9 @@ where\n \n pub(crate) fn query_callback<'tcx, Q>(is_anon: bool, is_eval_always: bool) -> DepKindStruct<'tcx>\n where\n-    Q: QueryConfig<QueryCtxt<'tcx>> + Default,\n-    Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+    Q: QueryConfigRestored<'tcx>,\n {\n-    let fingerprint_style = Q::Key::fingerprint_style();\n+    let fingerprint_style = <Q::Config as QueryConfig<QueryCtxt<'tcx>>>::Key::fingerprint_style();\n \n     if is_anon || !fingerprint_style.reconstructible() {\n         return DepKindStruct {\n@@ -453,9 +467,11 @@ where\n         is_anon,\n         is_eval_always,\n         fingerprint_style,\n-        force_from_dep_node: Some(|tcx, dep_node| force_from_dep_node(Q::default(), tcx, dep_node)),\n+        force_from_dep_node: Some(|tcx, dep_node| {\n+            force_from_dep_node(Q::config(tcx), tcx, dep_node)\n+        }),\n         try_load_from_on_disk_cache: Some(|tcx, dep_node| {\n-            try_load_from_on_disk_cache(Q::default(), tcx, dep_node)\n+            try_load_from_on_disk_cache(Q::config(tcx), tcx, dep_node)\n         }),\n     }\n }\n@@ -491,7 +507,7 @@ macro_rules! define_queries {\n                     mode: QueryMode,\n                 ) -> Option<Erase<query_values::$name<'tcx>>> {\n                     get_query(\n-                        queries::$name::default(),\n+                        queries::$name::config(tcx),\n                         QueryCtxt::new(tcx),\n                         span,\n                         key,\n@@ -519,146 +535,91 @@ macro_rules! define_queries {\n             )*\n         }\n \n-        $(impl<'tcx> QueryConfig<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n-            type Key = query_keys::$name<'tcx>;\n-            type Value = Erase<query_values::$name<'tcx>>;\n-\n-            #[inline(always)]\n-            fn name(self) -> &'static str {\n-                stringify!($name)\n-            }\n-\n-            #[inline]\n-            fn format_value(self) -> fn(&Self::Value) -> String {\n-                |value| format!(\"{:?}\", restore::<query_values::$name<'tcx>>(*value))\n-            }\n-\n-            #[inline]\n-            fn cache_on_disk(self, tcx: TyCtxt<'tcx>, key: &Self::Key) -> bool {\n-                ::rustc_middle::query::cached::$name(tcx, key)\n-            }\n-\n-            type Cache = query_storage::$name<'tcx>;\n-\n-            #[inline(always)]\n-            fn query_state<'a>(self, tcx: QueryCtxt<'tcx>) -> &'a QueryState<Self::Key, crate::dep_graph::DepKind>\n-                where QueryCtxt<'tcx>: 'a\n-            {\n-                &tcx.query_system.states.$name\n-            }\n-\n-            #[inline(always)]\n-            fn query_cache<'a>(self, tcx: QueryCtxt<'tcx>) -> &'a Self::Cache\n-                where 'tcx:'a\n-            {\n-                &tcx.query_system.caches.$name\n-            }\n-\n-            fn execute_query(self, tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n-                erase(tcx.$name(key))\n-            }\n-\n-            #[inline]\n-            #[allow(unused_variables)]\n-            fn compute(self, qcx: QueryCtxt<'tcx>, key: Self::Key) -> Self::Value {\n-                query_provided_to_value::$name(\n-                    qcx.tcx,\n-                    call_provider!([$($modifiers)*][qcx.tcx, $name, key])\n-                )\n-            }\n+        #[allow(nonstandard_style)]\n+        mod dynamic_query {\n+            use super::*;\n \n-            #[inline]\n-            fn try_load_from_disk(\n-                self,\n-                _qcx: QueryCtxt<'tcx>,\n-                _key: &Self::Key\n-            ) -> rustc_query_system::query::TryLoadFromDisk<QueryCtxt<'tcx>, Self::Value> {\n-                should_ever_cache_on_disk!([$($modifiers)*] {\n-                    if ::rustc_middle::query::cached::$name(_qcx.tcx, _key) {\n-                        Some(|qcx: QueryCtxt<'tcx>, dep_node| {\n-                            let value = $crate::plumbing::try_load_from_disk::<query_provided::$name<'tcx>>(\n-                                qcx.tcx,\n-                                dep_node\n-                            );\n-                            value.map(|value| query_provided_to_value::$name(qcx.tcx, value))\n-                        })\n-                    } else {\n-                        None\n+            $(\n+                pub(super) fn $name<'tcx>() -> DynamicQuery<'tcx, query_storage::$name<'tcx>> {\n+                    DynamicQuery {\n+                        name: stringify!($name),\n+                        eval_always: is_eval_always!([$($modifiers)*]),\n+                        dep_kind: dep_graph::DepKind::$name,\n+                        handle_cycle_error: handle_cycle_error!([$($modifiers)*]),\n+                        query_state: offset_of!(QueryStates<'tcx> => $name),\n+                        query_cache: offset_of!(QueryCaches<'tcx> => $name),\n+                        cache_on_disk: |tcx, key| ::rustc_middle::query::cached::$name(tcx, key),\n+                        execute_query: |tcx, key| erase(tcx.$name(key)),\n+                        compute: |tcx, key| query_provided_to_value::$name(\n+                            tcx,\n+                            call_provider!([$($modifiers)*][tcx, $name, key])\n+                        ),\n+                        can_load_from_disk: should_ever_cache_on_disk!([$($modifiers)*] true false),\n+                        try_load_from_disk: should_ever_cache_on_disk!([$($modifiers)*] {\n+                            |tcx, key, prev_index, index| {\n+                                if ::rustc_middle::query::cached::$name(tcx, key) {\n+                                    let value = $crate::plumbing::try_load_from_disk::<query_provided::$name<'tcx>>(\n+                                        tcx,\n+                                        prev_index,\n+                                        index,\n+                                    );\n+                                    value.map(|value| query_provided_to_value::$name(tcx, value))\n+                                } else {\n+                                    None\n+                                }\n+                            }\n+                        } {\n+                            |_tcx, _key, _prev_index, _index| None\n+                        }),\n+                        value_from_cycle_error: |tcx, cycle| {\n+                            let result: query_values::$name<'tcx> = Value::from_cycle_error(tcx, cycle);\n+                            erase(result)\n+                        },\n+                        loadable_from_disk: |_tcx, _key, _index| {\n+                            should_ever_cache_on_disk!([$($modifiers)*] {\n+                                ::rustc_middle::query::cached::$name(_tcx, _key) &&\n+                                    $crate::plumbing::loadable_from_disk(_tcx, _index)\n+                            } {\n+                                false\n+                            })\n+                        },\n+                        hash_result: hash_result!([$($modifiers)*][query_values::$name<'tcx>]),\n+                        format_value: |value| format!(\"{:?}\", restore::<query_values::$name<'tcx>>(*value)),\n                     }\n-                } {\n-                    None\n-                })\n-            }\n-\n-            #[inline]\n-            fn loadable_from_disk(\n-                self,\n-                _qcx: QueryCtxt<'tcx>,\n-                _key: &Self::Key,\n-                _index: SerializedDepNodeIndex,\n-            ) -> bool {\n-                should_ever_cache_on_disk!([$($modifiers)*] {\n-                    self.cache_on_disk(_qcx.tcx, _key) &&\n-                        $crate::plumbing::loadable_from_disk(_qcx.tcx, _index)\n-                } {\n-                    false\n-                })\n-            }\n-\n-            #[inline]\n-            fn value_from_cycle_error(\n-                self,\n-                tcx: TyCtxt<'tcx>,\n-                cycle: &[QueryInfo<DepKind>],\n-            ) -> Self::Value {\n-                let result: query_values::$name<'tcx> = Value::from_cycle_error(tcx, cycle);\n-                erase(result)\n-            }\n-\n-            #[inline(always)]\n-            fn anon(self) -> bool {\n-                is_anon!([$($modifiers)*])\n-            }\n-\n-            #[inline(always)]\n-            fn eval_always(self) -> bool {\n-                is_eval_always!([$($modifiers)*])\n-            }\n-\n-            #[inline(always)]\n-            fn depth_limit(self) -> bool {\n-                depth_limit!([$($modifiers)*])\n-            }\n-\n-            #[inline(always)]\n-            fn feedable(self) -> bool {\n-                feedable!([$($modifiers)*])\n-            }\n+                }\n+            )*\n+        }\n \n-            #[inline(always)]\n-            fn dep_kind(self) -> rustc_middle::dep_graph::DepKind {\n-                dep_graph::DepKind::$name\n-            }\n+        $(impl<'tcx> QueryConfigRestored<'tcx> for queries::$name<'tcx> {\n+            type RestoredValue = query_values::$name<'tcx>;\n+            type Config = DynamicConfig<\n+                'tcx,\n+                query_storage::$name<'tcx>,\n+                { is_anon!([$($modifiers)*]) },\n+                { depth_limit!([$($modifiers)*]) },\n+                { feedable!([$($modifiers)*]) },\n+            >;\n \n             #[inline(always)]\n-            fn handle_cycle_error(self) -> rustc_query_system::HandleCycleError {\n-                handle_cycle_error!([$($modifiers)*])\n+            fn config(tcx: TyCtxt<'tcx>) -> Self::Config {\n+                DynamicConfig {\n+                    dynamic: &tcx.query_system.dynamic_queries.$name,\n+                }\n             }\n \n             #[inline(always)]\n-            fn hash_result(self) -> rustc_query_system::query::HashResult<Self::Value> {\n-                hash_result!([$($modifiers)*][query_values::$name<'tcx>])\n+            fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::RestoredValue {\n+                restore::<query_values::$name<'tcx>>(value)\n             }\n         })*\n \n-        $(impl<'tcx> QueryConfigRestored<'tcx> for queries::$name<'tcx> {\n-            type RestoredValue = query_values::$name<'tcx>;\n-\n-            #[inline(always)]\n-            fn restore(value: <Self as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::RestoredValue {\n-                restore::<query_values::$name<'tcx>>(value)\n+        pub fn dynamic_queries<'tcx>() -> DynamicQueries<'tcx> {\n+            DynamicQueries {\n+                $(\n+                    $name: dynamic_query::$name(),\n+                )*\n             }\n-        })*\n+        }\n \n         #[allow(nonstandard_style)]\n         mod query_callbacks {\n@@ -730,6 +691,7 @@ macro_rules! define_queries {\n             use rustc_middle::ty::query::QueryStruct;\n             use rustc_middle::ty::query::QueryKeyStringCache;\n             use rustc_middle::dep_graph::DepKind;\n+            use crate::QueryConfigRestored;\n \n             pub(super) const fn dummy_query_struct<'tcx>() -> QueryStruct<'tcx> {\n                 fn noop_try_collect_active_jobs(_: TyCtxt<'_>, _: &mut QueryMap<DepKind>) -> Option<()> {\n@@ -774,7 +736,7 @@ macro_rules! define_queries {\n                 },\n                 encode_query_results: expand_if_cached!([$($modifiers)*], |tcx, encoder, query_result_index|\n                     $crate::plumbing::encode_query_results::<super::queries::$name<'tcx>>(\n-                        super::queries::$name::default(),\n+                        super::queries::$name::config(tcx),\n                         QueryCtxt::new(tcx),\n                         encoder,\n                         query_result_index,"}, {"sha": "7e47d701205447399498527ed938c00070e59f7e", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,6 +4,7 @@ use crate::dep_graph::{DepNode, DepNodeParams, SerializedDepNodeIndex};\n use crate::error::HandleCycleError;\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n+use crate::query::DepNodeIndex;\n use crate::query::{QueryContext, QueryInfo, QueryState};\n \n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -12,8 +13,6 @@ use std::hash::Hash;\n \n pub type HashResult<V> = Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>;\n \n-pub type TryLoadFromDisk<Qcx, V> = Option<fn(Qcx, SerializedDepNodeIndex) -> Option<V>>;\n-\n pub trait QueryConfig<Qcx: QueryContext>: Copy {\n     fn name(self) -> &'static str;\n \n@@ -43,7 +42,13 @@ pub trait QueryConfig<Qcx: QueryContext>: Copy {\n \n     fn compute(self, tcx: Qcx, key: Self::Key) -> Self::Value;\n \n-    fn try_load_from_disk(self, qcx: Qcx, idx: &Self::Key) -> TryLoadFromDisk<Qcx, Self::Value>;\n+    fn try_load_from_disk(\n+        self,\n+        tcx: Qcx,\n+        key: &Self::Key,\n+        prev_index: SerializedDepNodeIndex,\n+        index: DepNodeIndex,\n+    ) -> Option<Self::Value>;\n \n     fn loadable_from_disk(self, qcx: Qcx, key: &Self::Key, idx: SerializedDepNodeIndex) -> bool;\n "}, {"sha": "f7619d75be768134862ef984199c6a4f98ca90bf", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -12,7 +12,7 @@ pub use self::caches::{\n };\n \n mod config;\n-pub use self::config::{HashResult, QueryConfig, TryLoadFromDisk};\n+pub use self::config::{HashResult, QueryConfig};\n \n use crate::dep_graph::DepKind;\n use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};"}, {"sha": "4aaedc7a6c15e62f6230d04f75f10ec0ec097c28", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 33, "deletions": 48, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -564,59 +564,44 @@ where\n \n     // First we try to load the result from the on-disk cache.\n     // Some things are never cached on disk.\n-    if let Some(try_load_from_disk) = query.try_load_from_disk(qcx, &key) {\n-        let prof_timer = qcx.dep_context().profiler().incr_cache_loading();\n-\n-        // The call to `with_query_deserialization` enforces that no new `DepNodes`\n-        // are created during deserialization. See the docs of that method for more\n-        // details.\n-        let result = qcx\n-            .dep_context()\n-            .dep_graph()\n-            .with_query_deserialization(|| try_load_from_disk(qcx, prev_dep_node_index));\n-\n-        prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n-\n-        if let Some(result) = result {\n-            if std::intrinsics::unlikely(\n-                qcx.dep_context().sess().opts.unstable_opts.query_dep_graph,\n-            ) {\n-                dep_graph_data.mark_debug_loaded_from_disk(*dep_node)\n-            }\n-\n-            let prev_fingerprint = dep_graph_data.prev_fingerprint_of(prev_dep_node_index);\n-            // If `-Zincremental-verify-ich` is specified, re-hash results from\n-            // the cache and make sure that they have the expected fingerprint.\n-            //\n-            // If not, we still seek to verify a subset of fingerprints loaded\n-            // from disk. Re-hashing results is fairly expensive, so we can't\n-            // currently afford to verify every hash. This subset should still\n-            // give us some coverage of potential bugs though.\n-            let try_verify = prev_fingerprint.split().1.as_u64() % 32 == 0;\n-            if std::intrinsics::unlikely(\n-                try_verify || qcx.dep_context().sess().opts.unstable_opts.incremental_verify_ich,\n-            ) {\n-                incremental_verify_ich(\n-                    *qcx.dep_context(),\n-                    dep_graph_data,\n-                    &result,\n-                    prev_dep_node_index,\n-                    query.hash_result(),\n-                    query.format_value(),\n-                );\n-            }\n+    if let Some(result) = query.try_load_from_disk(qcx, key, prev_dep_node_index, dep_node_index) {\n+        if std::intrinsics::unlikely(qcx.dep_context().sess().opts.unstable_opts.query_dep_graph) {\n+            dep_graph_data.mark_debug_loaded_from_disk(*dep_node)\n+        }\n \n-            return Some((result, dep_node_index));\n+        let prev_fingerprint = dep_graph_data.prev_fingerprint_of(prev_dep_node_index);\n+        // If `-Zincremental-verify-ich` is specified, re-hash results from\n+        // the cache and make sure that they have the expected fingerprint.\n+        //\n+        // If not, we still seek to verify a subset of fingerprints loaded\n+        // from disk. Re-hashing results is fairly expensive, so we can't\n+        // currently afford to verify every hash. This subset should still\n+        // give us some coverage of potential bugs though.\n+        let try_verify = prev_fingerprint.split().1.as_u64() % 32 == 0;\n+        if std::intrinsics::unlikely(\n+            try_verify || qcx.dep_context().sess().opts.unstable_opts.incremental_verify_ich,\n+        ) {\n+            incremental_verify_ich(\n+                *qcx.dep_context(),\n+                dep_graph_data,\n+                &result,\n+                prev_dep_node_index,\n+                query.hash_result(),\n+                query.format_value(),\n+            );\n         }\n \n-        // We always expect to find a cached result for things that\n-        // can be forced from `DepNode`.\n-        debug_assert!(\n-            !qcx.dep_context().fingerprint_style(dep_node.kind).reconstructible(),\n-            \"missing on-disk cache entry for reconstructible {dep_node:?}\"\n-        );\n+        return Some((result, dep_node_index));\n     }\n \n+    // We always expect to find a cached result for things that\n+    // can be forced from `DepNode`.\n+    debug_assert!(\n+        !query.cache_on_disk(*qcx.dep_context(), key)\n+            || !qcx.dep_context().fingerprint_style(dep_node.kind).reconstructible(),\n+        \"missing on-disk cache entry for {dep_node:?}\"\n+    );\n+\n     // Sanity check for the logic in `ensure`: if the node is green and the result loadable,\n     // we should actually be able to load it.\n     debug_assert!("}, {"sha": "7393bdb388a56e8c57db275de99a4e4b0e2701be", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -199,7 +199,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         let tcx = self.r.tcx;\n         self.changed |= self.import_effective_visibilities.update(\n             binding,\n-            nominal_vis,\n+            Some(nominal_vis),\n             || cheap_private_vis.unwrap_or_else(|| self.r.private_vis_import(binding)),\n             inherited_eff_vis,\n             parent_id.level(),\n@@ -213,7 +213,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         let tcx = self.r.tcx;\n         self.changed |= self.def_effective_visibilities.update(\n             def_id,\n-            nominal_vis,\n+            Some(nominal_vis),\n             || cheap_private_vis.unwrap_or_else(|| self.r.private_vis_def(def_id)),\n             inherited_eff_vis,\n             parent_id.level(),"}, {"sha": "323b78fcd98aea97a6f72910bb3c65ca9be4ac74", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -47,6 +47,7 @@ use rustc_index::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n+use rustc_middle::query::Providers;\n use rustc_middle::span_bug;\n use rustc_middle::ty::{self, MainDefinition, RegisteredTools, TyCtxt};\n use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n@@ -2026,6 +2027,6 @@ impl Finalize {\n     }\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.registered_tools = macros::registered_tools;\n }"}, {"sha": "0ffc537eee02aff5df77466fb8375fc1a51c1036", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,4 +1,4 @@\n-use crate::leb128::{self, largest_max_leb128_len};\n+use crate::leb128;\n use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fs::File;\n use std::io::{self, Write};\n@@ -14,6 +14,9 @@ use std::ptr;\n \n pub type FileEncodeResult = Result<usize, io::Error>;\n \n+/// The size of the buffer in `FileEncoder`.\n+const BUF_SIZE: usize = 8192;\n+\n /// `FileEncoder` encodes data to file via fixed-size buffer.\n ///\n /// There used to be a `MemEncoder` type that encoded all the data into a\n@@ -35,26 +38,12 @@ pub struct FileEncoder {\n \n impl FileEncoder {\n     pub fn new<P: AsRef<Path>>(path: P) -> io::Result<Self> {\n-        const DEFAULT_BUF_SIZE: usize = 8192;\n-        FileEncoder::with_capacity(path, DEFAULT_BUF_SIZE)\n-    }\n-\n-    pub fn with_capacity<P: AsRef<Path>>(path: P, capacity: usize) -> io::Result<Self> {\n-        // Require capacity at least as large as the largest LEB128 encoding\n-        // here, so that we don't have to check or handle this on every write.\n-        assert!(capacity >= largest_max_leb128_len());\n-\n-        // Require capacity small enough such that some capacity checks can be\n-        // done using guaranteed non-overflowing add rather than sub, which\n-        // shaves an instruction off those code paths (on x86 at least).\n-        assert!(capacity <= usize::MAX - largest_max_leb128_len());\n-\n         // Create the file for reading and writing, because some encoders do both\n         // (e.g. the metadata encoder when -Zmeta-stats is enabled)\n         let file = File::options().read(true).write(true).create(true).truncate(true).open(path)?;\n \n         Ok(FileEncoder {\n-            buf: Box::new_uninit_slice(capacity),\n+            buf: Box::new_uninit_slice(BUF_SIZE),\n             buffered: 0,\n             flushed: 0,\n             file,\n@@ -159,19 +148,11 @@ impl FileEncoder {\n         &self.file\n     }\n \n-    #[inline]\n-    fn capacity(&self) -> usize {\n-        self.buf.len()\n-    }\n-\n     #[inline]\n     fn write_one(&mut self, value: u8) {\n-        // We ensure this during `FileEncoder` construction.\n-        debug_assert!(self.capacity() >= 1);\n-\n         let mut buffered = self.buffered;\n \n-        if std::intrinsics::unlikely(buffered >= self.capacity()) {\n+        if std::intrinsics::unlikely(buffered + 1 > BUF_SIZE) {\n             self.flush();\n             buffered = 0;\n         }\n@@ -187,13 +168,12 @@ impl FileEncoder {\n \n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) {\n-        let capacity = self.capacity();\n         let buf_len = buf.len();\n \n-        if std::intrinsics::likely(buf_len <= capacity) {\n+        if std::intrinsics::likely(buf_len <= BUF_SIZE) {\n             let mut buffered = self.buffered;\n \n-            if std::intrinsics::unlikely(buf_len > capacity - buffered) {\n+            if std::intrinsics::unlikely(buffered + buf_len > BUF_SIZE) {\n                 self.flush();\n                 buffered = 0;\n             }\n@@ -271,13 +251,11 @@ macro_rules! write_leb128 {\n         fn $this_fn(&mut self, v: $int_ty) {\n             const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n \n-            // We ensure this during `FileEncoder` construction.\n-            debug_assert!(self.capacity() >= MAX_ENCODED_LEN);\n-\n             let mut buffered = self.buffered;\n \n-            // This can't overflow. See assertion in `FileEncoder::with_capacity`.\n-            if std::intrinsics::unlikely(buffered + MAX_ENCODED_LEN > self.capacity()) {\n+            // This can't overflow because BUF_SIZE and MAX_ENCODED_LEN are both\n+            // quite small.\n+            if std::intrinsics::unlikely(buffered + MAX_ENCODED_LEN > BUF_SIZE) {\n                 self.flush();\n                 buffered = 0;\n             }"}, {"sha": "8089d81cc22c916aa177e9b3e52e4c6fedc22d0e", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -207,7 +207,7 @@ pub trait MetadataLoader: std::fmt::Debug {\n     fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n }\n \n-pub type MetadataLoaderDyn = dyn MetadataLoader + Send + Sync;\n+pub type MetadataLoaderDyn = dyn MetadataLoader + Send + Sync + sync::DynSend + sync::DynSync;\n \n /// A store of Rust crates, through which their metadata can be accessed.\n ///\n@@ -252,7 +252,7 @@ pub trait CrateStore: std::fmt::Debug {\n     fn import_source_files(&self, sess: &Session, cnum: CrateNum);\n }\n \n-pub type CrateStoreDyn = dyn CrateStore + sync::Sync + sync::Send;\n+pub type CrateStoreDyn = dyn CrateStore + sync::DynSync + sync::DynSend;\n \n pub struct Untracked {\n     pub cstore: RwLock<Box<CrateStoreDyn>>,"}, {"sha": "97cb734619e3c79a481e4a20728dc7002106da97", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -20,6 +20,7 @@\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n #![feature(let_chains)]\n+#![feature(round_char_boundary)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "11ea5fe4ddf9f8e89cc606d4016311d5d7eb3ed8", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -14,7 +14,9 @@ pub use crate::*;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{Hash128, Hash64, StableHasher};\n-use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n+use rustc_data_structures::sync::{\n+    AtomicU32, IntoDynSyncSend, Lrc, MappedReadGuard, ReadGuard, RwLock,\n+};\n use std::cmp;\n use std::hash::Hash;\n use std::path::{self, Path, PathBuf};\n@@ -176,7 +178,7 @@ pub struct SourceMap {\n     used_address_space: AtomicU32,\n \n     files: RwLock<SourceMapFiles>,\n-    file_loader: Box<dyn FileLoader + Sync + Send>,\n+    file_loader: IntoDynSyncSend<Box<dyn FileLoader + Sync + Send>>,\n     // This is used to apply the file path remapping as specified via\n     // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.\n     path_mapping: FilePathMapping,\n@@ -202,7 +204,7 @@ impl SourceMap {\n         SourceMap {\n             used_address_space: AtomicU32::new(0),\n             files: Default::default(),\n-            file_loader,\n+            file_loader: IntoDynSyncSend(file_loader),\n             path_mapping,\n             hash_kind,\n         }\n@@ -1017,36 +1019,19 @@ impl SourceMap {\n \n         let src = local_begin.sf.external_src.borrow();\n \n-        // We need to extend the snippet to the end of the src rather than to end_index so when\n-        // searching forwards for boundaries we've got somewhere to search.\n-        let snippet = if let Some(ref src) = local_begin.sf.src {\n-            &src[start_index..]\n+        let snippet = if let Some(src) = &local_begin.sf.src {\n+            src\n         } else if let Some(src) = src.get_source() {\n-            &src[start_index..]\n+            src\n         } else {\n             return 1;\n         };\n-        debug!(\"snippet=`{:?}`\", snippet);\n \n-        let mut target = if forwards { end_index + 1 } else { end_index - 1 };\n-        debug!(\"initial target=`{:?}`\", target);\n-\n-        while !snippet.is_char_boundary(target - start_index) && target < source_len {\n-            target = if forwards {\n-                target + 1\n-            } else {\n-                match target.checked_sub(1) {\n-                    Some(target) => target,\n-                    None => {\n-                        break;\n-                    }\n-                }\n-            };\n-            debug!(\"target=`{:?}`\", target);\n+        if forwards {\n+            (snippet.ceil_char_boundary(end_index + 1) - end_index) as u32\n+        } else {\n+            (end_index - snippet.floor_char_boundary(end_index - 1)) as u32\n         }\n-        debug!(\"final target=`{:?}`\", target);\n-\n-        if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }\n     }\n \n     pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {"}, {"sha": "692542da78ea22cf2f2df392f49d41e0885661d2", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -107,7 +107,7 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::config::SymbolManglingVersion;"}, {"sha": "223cdc48f0b323b229dd8c160720ca56703480f6", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -26,6 +26,7 @@ use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::error_reporting::TypeErrCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_errors::ErrorGuaranteed;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::{TypeVisitable, TypeVisitableExt};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeSuperVisitable};\n@@ -498,10 +499,10 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n     false\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut Providers) {\n     object_safety::provide(providers);\n     vtable::provide(providers);\n-    *providers = ty::query::Providers {\n+    *providers = Providers {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         subst_and_check_impossible_predicates,"}, {"sha": "c81bf6ebc2eaacf2055b2219047731f342558f66", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -16,6 +16,7 @@ use crate::traits::{self, Obligation, ObligationCause};\n use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{\n     self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n@@ -947,7 +948,6 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers =\n-        ty::query::Providers { object_safety_violations, check_is_object_safe, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { object_safety_violations, check_is_object_safe, ..*providers };\n }"}, {"sha": "cc674ceee3d5d678a6ae5c04e44dcf7f5aa7be72", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,6 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::traits::util::PredicateSet;\n use rustc_infer::traits::ImplSource;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry};\n@@ -379,8 +380,8 @@ pub(crate) fn count_own_vtable_entries<'tcx>(\n     tcx.own_existential_vtable_entries(trait_ref.def_id()).len()\n }\n \n-pub(super) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub(super) fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         own_existential_vtable_entries,\n         vtable_entries,\n         vtable_trait_upcasting_coercion_new_vptr_slot,"}, {"sha": "8834449c9a458b7859c545f191f54c5d815ab70e", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -7,8 +7,8 @@ pub(crate) mod db;\n pub(crate) mod lowering;\n \n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::ChalkRustInterner;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitable};\n \n use rustc_infer::infer::canonical::{"}, {"sha": "83f6c7d07fe787e120c13f95a3499b14f653e1bd", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, ParamEnvAnd, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};"}, {"sha": "149dffc7e31152de7d24bf8cd20f1a1486c78997", "filename": "compiler/rustc_traits/src/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fevaluate_obligation.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,5 +1,5 @@\n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::traits::query::CanonicalPredicateGoal;"}, {"sha": "0c2bb863e1fe0d9af5a952575238e816a0570c8d", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -6,7 +6,7 @@ use rustc_infer::infer::canonical::{self, Canonical};\n use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::query::OutlivesBound;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::DUMMY_SP;"}, {"sha": "b0f9c57154f1b508bd409a6c3ff2d913af343e0c", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -23,7 +23,7 @@ mod type_op;\n \n pub use type_op::{type_op_ascribe_user_type_with_span, type_op_prove_predicate_with_cause};\n \n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n pub fn provide(p: &mut Providers) {\n     dropck_outlives::provide(p);"}, {"sha": "94c33efaeff7adfadb170054c7d35ca9556f768f", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::query::NoSolution;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable, TypeVisitableExt};\n use rustc_trait_selection::traits::query::normalize::QueryNormalizeExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};"}, {"sha": "b552ba41acd3d3ad9c72c79853c863aa3e752be2", "filename": "compiler/rustc_traits/src/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{"}, {"sha": "70dc7ccec631b3ef791933064f908a8182aff00d", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,7 +2,7 @@ use rustc_hir as hir;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCauseCode;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{ParamEnvAnd, Predicate};\n use rustc_middle::ty::{UserSelfTy, UserSubsts, UserType};"}, {"sha": "442d041a8a78fd9d5cf6be8f702aedaf109af0f7", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,5 +1,6 @@\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout::{\n     fn_can_unwind, FnAbiError, HasParamEnv, HasTyCtxt, LayoutCx, LayoutOf, TyAndLayout,\n };\n@@ -14,8 +15,8 @@ use rustc_target::spec::abi::Abi as SpecAbi;\n \n use std::iter;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };\n }\n \n // NOTE(eddyb) this is private to avoid using it from outside of"}, {"sha": "ed574f22e61d0890da458bfb07e7dd6b18f1529a", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,11 +4,12 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, ImplTraitInTraitData, InternalSubsts, TyCtxt};\n use rustc_span::symbol::kw;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         associated_item,\n         associated_item_def_ids,\n         associated_items,"}, {"sha": "51b908881eb49c975abaa5e53c2c9dd352fb99a2", "filename": "compiler/rustc_ty_utils/src/common_traits.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fcommon_traits.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_trait_selection::traits;\n \n@@ -32,12 +33,6 @@ fn is_item_raw<'tcx>(\n     traits::type_known_to_meet_bound_modulo_regions(&infcx, param_env, ty, trait_def_id)\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n-        is_copy_raw,\n-        is_sized_raw,\n-        is_freeze_raw,\n-        is_unpin_raw,\n-        ..*providers\n-    };\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { is_copy_raw, is_sized_raw, is_freeze_raw, is_unpin_raw, ..*providers };\n }"}, {"sha": "1219bb4009886504544f602819553ad0eec71250", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,6 +2,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n+use rustc_middle::query::Providers;\n use rustc_middle::thir::visit;\n use rustc_middle::thir::visit::Visitor;\n use rustc_middle::ty::abstract_const::CastKind;\n@@ -115,9 +116,7 @@ fn recurse_build<'tcx>(\n             let sp = node.span;\n             match tcx.at(sp).lit_to_const(LitToConstInput { lit: &lit.node, ty: node.ty, neg }) {\n                 Ok(c) => c,\n-                Err(LitToConstError::Reported(guar)) => {\n-                    tcx.const_error_with_guaranteed(node.ty, guar)\n-                }\n+                Err(LitToConstError::Reported(guar)) => tcx.const_error(node.ty, guar),\n                 Err(LitToConstError::TypeError) => {\n                     bug!(\"encountered type error in lit_to_const\")\n                 }\n@@ -423,6 +422,6 @@ pub fn thir_abstract_const(\n     Ok(Some(ty::EarlyBinder(recurse_build(tcx, body, body_id, root_span)?)))\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { destructure_const, thir_abstract_const, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { destructure_const, thir_abstract_const, ..*providers };\n }"}, {"sha": "081be065864c86ba260042f320c31dcdf142b43a", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,8 +1,9 @@\n use rustc_hir::{def::DefKind, def_id::DefId};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { assumed_wf_types, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { assumed_wf_types, ..*providers };\n }\n \n fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {"}, {"sha": "36a20c78fcc7b2ba57f43f05a87eb408ca453e24", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,6 +1,7 @@\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::query::Providers;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitableExt};\n@@ -319,6 +320,6 @@ fn resolve_associated_item<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { resolve_instance, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { resolve_instance, ..*providers };\n }"}, {"sha": "16cd8bc8e698f43798a119f9f91d2b572c66650d", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -3,6 +3,7 @@ use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::{GeneratorLayout, GeneratorSavedLocal};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::layout::{\n     IntegerExt, LayoutCx, LayoutError, LayoutOf, TyAndLayout, MAX_SIMD_LANES,\n };\n@@ -22,8 +23,8 @@ use crate::errors::{\n };\n use crate::layout_sanity_check::sanity_check_layout;\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { layout_of, ..*providers };\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { layout_of, ..*providers };\n }\n \n #[instrument(skip(tcx, query), level = \"debug\")]"}, {"sha": "55b8857ed391f9a3582fa2d79e7fc41324a25490", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -21,7 +21,7 @@ extern crate tracing;\n \n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n \n mod abi;\n mod assoc;"}, {"sha": "1f9701b93226d8e596659280a1436b32881b2ea8", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::{needs_drop_components, AlwaysRequiresDrop};\n use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n@@ -323,8 +324,8 @@ fn adt_significant_drop_tys(\n     .map(|components| tcx.mk_type_list(&components))\n }\n \n-pub(crate) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         needs_drop_raw,\n         has_significant_drop_raw,\n         adt_drop_tys,"}, {"sha": "4e91dd380e86572052df6bb093397ec674271b9c", "filename": "compiler/rustc_ty_utils/src/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fopaque_types.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,6 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::{def::DefKind, def_id::LocalDefId};\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::util::{CheckRegions, NotUniqueParam};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -192,6 +193,6 @@ fn opaque_types_defined_by<'tcx>(tcx: TyCtxt<'tcx>, item: LocalDefId) -> &'tcx [\n     }\n }\n \n-pub(super) fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { opaque_types_defined_by, ..*providers };\n+pub(super) fn provide(providers: &mut Providers) {\n+    *providers = Providers { opaque_types_defined_by, ..*providers };\n }"}, {"sha": "0b5e27c2c743f3f2ce8d9cde87f708edbb65df8c", "filename": "compiler/rustc_ty_utils/src/representability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Representability, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefId;\n "}, {"sha": "215acbe2c8f85364e2e4e6a8e70f2924712f374a", "filename": "compiler/rustc_ty_utils/src/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fstructural_match.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::lang_items::LangItem;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_infer::infer::TyCtxtInferExt;"}, {"sha": "65dc3c39c6ae6ed96b84c24606b3f939ed31e968", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,6 +2,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::query::Providers;\n use rustc_middle::ty::{\n     self, Binder, EarlyBinder, ImplTraitInTraitData, Predicate, PredicateKind, ToPredicate, Ty,\n     TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n@@ -566,8 +567,8 @@ fn unsizing_params_for_adt<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BitSet<u32\n     unsizing_params\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers {\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n         asyncness,\n         adt_sized_constraint,\n         param_env,"}, {"sha": "45a2e9023c9ca44c1c9332a92afb1ab7e34d8c61", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -21,6 +21,7 @@ TrivialTypeTraversalImpls! {\n     (),\n     bool,\n     usize,\n+    u8,\n     u16,\n     u32,\n     u64,"}, {"sha": "d1cdb12e50f8cfeba0e28799b02a0531fdb4ebfb", "filename": "library/core/benches/fmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Ffmt.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,13 +1,13 @@\n use std::fmt::{self, Write as FmtWrite};\n use std::io::{self, Write as IoWrite};\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn write_vec_value(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = Vec::new();\n         for _ in 0..1000 {\n-            mem.write_all(\"abc\".as_bytes()).unwrap();\n+            mem.write_all(black_box(\"abc\").as_bytes()).unwrap();\n         }\n     });\n }\n@@ -18,7 +18,7 @@ fn write_vec_ref(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            wr.write_all(\"abc\".as_bytes()).unwrap();\n+            wr.write_all(black_box(\"abc\").as_bytes()).unwrap();\n         }\n     });\n }\n@@ -29,7 +29,7 @@ fn write_vec_macro1(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -40,7 +40,7 @@ fn write_vec_macro2(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{}\", \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -51,7 +51,7 @@ fn write_vec_macro_debug(bh: &mut Bencher) {\n         let mut mem = Vec::new();\n         let wr = &mut mem as &mut dyn io::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"\u2603\")).unwrap();\n         }\n     });\n }\n@@ -61,7 +61,7 @@ fn write_str_value(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = String::new();\n         for _ in 0..1000 {\n-            mem.write_str(\"abc\").unwrap();\n+            mem.write_str(black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -72,7 +72,7 @@ fn write_str_ref(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            wr.write_str(\"abc\").unwrap();\n+            wr.write_str(black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -82,7 +82,7 @@ fn write_str_macro1(bh: &mut Bencher) {\n     bh.iter(|| {\n         let mut mem = String::new();\n         for _ in 0..1000 {\n-            write!(mem, \"abc\").unwrap();\n+            write!(mem, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -93,7 +93,7 @@ fn write_str_macro2(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{}\", \"abc\").unwrap();\n+            write!(wr, \"{}\", black_box(\"abc\")).unwrap();\n         }\n     });\n }\n@@ -104,7 +104,7 @@ fn write_str_macro_debug(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"\u2603\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"\u2603\")).unwrap();\n         }\n     });\n }\n@@ -115,7 +115,7 @@ fn write_str_macro_debug_ascii(bh: &mut Bencher) {\n         let mut mem = String::new();\n         let wr = &mut mem as &mut dyn fmt::Write;\n         for _ in 0..1000 {\n-            write!(wr, \"{:?}\", \"Hello, World!\").unwrap();\n+            write!(wr, \"{:?}\", black_box(\"Hello, World!\")).unwrap();\n         }\n     });\n }"}, {"sha": "fb4a786b27e3d969cc7cb8fe9cf6d32629ed18c6", "filename": "library/core/benches/num/dec2flt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,57 +1,57 @@\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn bench_0(b: &mut Bencher) {\n-    b.iter(|| \"0.0\".parse::<f64>());\n+    b.iter(|| black_box(\"0.0\").parse::<f64>());\n }\n \n #[bench]\n fn bench_42(b: &mut Bencher) {\n-    b.iter(|| \"42\".parse::<f64>());\n+    b.iter(|| black_box(\"42\").parse::<f64>());\n }\n \n #[bench]\n fn bench_huge_int(b: &mut Bencher) {\n     // 2^128 - 1\n-    b.iter(|| \"170141183460469231731687303715884105727\".parse::<f64>());\n+    b.iter(|| black_box(\"170141183460469231731687303715884105727\").parse::<f64>());\n }\n \n #[bench]\n fn bench_short_decimal(b: &mut Bencher) {\n-    b.iter(|| \"1234.5678\".parse::<f64>());\n+    b.iter(|| black_box(\"1234.5678\").parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_long(b: &mut Bencher) {\n-    b.iter(|| \"3.14159265358979323846264338327950288\".parse::<f64>());\n+    b.iter(|| black_box(\"3.14159265358979323846264338327950288\").parse::<f64>());\n }\n \n #[bench]\n fn bench_pi_short(b: &mut Bencher) {\n-    b.iter(|| \"3.141592653589793\".parse::<f64>())\n+    b.iter(|| black_box(\"3.141592653589793\").parse::<f64>())\n }\n \n #[bench]\n fn bench_1e150(b: &mut Bencher) {\n-    b.iter(|| \"1e150\".parse::<f64>());\n+    b.iter(|| black_box(\"1e150\").parse::<f64>());\n }\n \n #[bench]\n fn bench_long_decimal_and_exp(b: &mut Bencher) {\n-    b.iter(|| \"727501488517303786137132964064381141071e-123\".parse::<f64>());\n+    b.iter(|| black_box(\"727501488517303786137132964064381141071e-123\").parse::<f64>());\n }\n \n #[bench]\n fn bench_min_subnormal(b: &mut Bencher) {\n-    b.iter(|| \"5e-324\".parse::<f64>());\n+    b.iter(|| black_box(\"5e-324\").parse::<f64>());\n }\n \n #[bench]\n fn bench_min_normal(b: &mut Bencher) {\n-    b.iter(|| \"2.2250738585072014e-308\".parse::<f64>());\n+    b.iter(|| black_box(\"2.2250738585072014e-308\").parse::<f64>());\n }\n \n #[bench]\n fn bench_max(b: &mut Bencher) {\n-    b.iter(|| \"1.7976931348623157e308\".parse::<f64>());\n+    b.iter(|| black_box(\"1.7976931348623157e308\").parse::<f64>());\n }"}, {"sha": "1a330ef5fe546fe7c14efbcde03bb6a847d05fb1", "filename": "library/core/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -7,7 +7,7 @@ use core::num::flt2dec::MAX_SIG_DIGITS;\n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n use std::io::Write;\n use std::vec::Vec;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n@@ -22,7 +22,7 @@ fn bench_small_shortest(b: &mut Bencher) {\n \n     b.iter(|| {\n         buf.clear();\n-        write!(&mut buf, \"{}\", 3.1415926f64).unwrap()\n+        write!(black_box(&mut buf), \"{}\", black_box(3.1415926f64)).unwrap()\n     });\n }\n \n@@ -32,6 +32,6 @@ fn bench_big_shortest(b: &mut Bencher) {\n \n     b.iter(|| {\n         buf.clear();\n-        write!(&mut buf, \"{}\", f64::MAX).unwrap()\n+        write!(black_box(&mut buf), \"{}\", black_box(f64::MAX)).unwrap()\n     });\n }"}, {"sha": "b97014d9bf9f2fd312ffec0d02edfcbfcdd91c78", "filename": "library/core/benches/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -3,7 +3,7 @@ mod flt2dec;\n mod int_log;\n \n use std::str::FromStr;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n const ASCII_NUMBERS: [&str; 19] = [\n     \"0\",\n@@ -36,7 +36,7 @@ macro_rules! from_str_bench {\n                     .iter()\n                     .cycle()\n                     .take(5_000)\n-                    .filter_map(|s| <$t>::from_str(s).ok())\n+                    .filter_map(|s| <$t>::from_str(black_box(s)).ok())\n                     .max()\n             })\n         }\n@@ -52,7 +52,7 @@ macro_rules! from_str_radix_bench {\n                     .iter()\n                     .cycle()\n                     .take(5_000)\n-                    .filter_map(|s| <$t>::from_str_radix(s, $radix).ok())\n+                    .filter_map(|s| <$t>::from_str_radix(black_box(s), $radix).ok())\n                     .max()\n             })\n         }"}, {"sha": "2c3c14853a44beb7bbf774d475557af0754ddfe6", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2100,6 +2100,8 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// let m = MaybeUninit::<UnsafeCell<i32>>::uninit();\n     /// unsafe { UnsafeCell::raw_get(m.as_ptr()).write(5); }\n+    /// // avoid below which references to uninitialized data\n+    /// // unsafe { UnsafeCell::get(&*m.as_ptr()).write(5); }\n     /// let uc = unsafe { m.assume_init() };\n     ///\n     /// assert_eq!(uc.into_inner(), 5);"}, {"sha": "5944a0de1a4b2aa928a34cdcd51625ddf601a7fe", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -228,7 +228,7 @@\n //!\n //!  - Operands implicitly convert to `Use` rvalues.\n //!  - `&`, `&mut`, `addr_of!`, and `addr_of_mut!` all work to create their associated rvalue.\n-//!  - [`Discriminant`] and [`Len`] have associated functions.\n+//!  - [`Discriminant`], [`Len`], and [`CopyForDeref`] have associated functions.\n //!  - Unary and binary operations use their normal Rust syntax - `a * b`, `!c`, etc.\n //!  - The binary operation `Offset` can be created via [`Offset`].\n //!  - Checked binary operations are represented by wrapping the associated binop in [`Checked`].\n@@ -279,6 +279,7 @@ define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));\n define!(\"mir_deinit\", fn Deinit<T>(place: T));\n define!(\"mir_checked\", fn Checked<T>(binop: T) -> (T, bool));\n define!(\"mir_len\", fn Len<T>(place: T) -> usize);\n+define!(\"mir_copy_for_deref\", fn CopyForDeref<T>(place: T) -> T);\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);\n define!(\"mir_static\", fn Static<T>(s: T) -> &'static T);"}, {"sha": "2568aaf34f3fbe1dd098e7d9e5445e9dd01affa0", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -310,6 +310,7 @@ where\n /// Real logic of both `Flatten` and `FlatMap` which simply delegate to\n /// this type.\n #[derive(Clone, Debug)]\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n struct FlattenCompat<I, U> {\n     iter: Fuse<I>,\n     frontiter: Option<U>,\n@@ -463,6 +464,7 @@ where\n     }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n impl<I, U> Iterator for FlattenCompat<I, U>\n where\n     I: Iterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n@@ -577,6 +579,7 @@ where\n     }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>\n where\n     I: DoubleEndedIterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n@@ -646,20 +649,23 @@ where\n     }\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<const N: usize, I, T> TrustedLen\n     for FlattenCompat<I, <[T; N] as IntoIterator>::IntoIter>\n where\n     I: TrustedLen<Item = [T; N]>,\n {\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, const N: usize, I, T> TrustedLen\n     for FlattenCompat<I, <&'a [T; N] as IntoIterator>::IntoIter>\n where\n     I: TrustedLen<Item = &'a [T; N]>,\n {\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, const N: usize, I, T> TrustedLen\n     for FlattenCompat<I, <&'a mut [T; N] as IntoIterator>::IntoIter>\n where"}, {"sha": "0af04fac90994648c000f31a482c34e2e1df14b3", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -133,6 +133,7 @@\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_nonnull_new)]\n+#![feature(const_num_midpoint)]\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_pin)]"}, {"sha": "47a3e78b4d5c7828def6fb11f149d27c429ca44c", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -695,7 +695,7 @@ impl<T: ?Sized> !Sync for *mut T {}\n /// }\n /// ```\n ///\n-/// This also in turn requires the annotation `T: 'a`, indicating\n+/// This also in turn infers the lifetime bound `T: 'a`, indicating\n /// that any references in `T` are valid over the lifetime `'a`.\n ///\n /// When initializing a `Slice` you simply provide the value"}, {"sha": "4a035ad61e107cabc0708494c036c5d2211e541e", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -940,6 +940,42 @@ impl f32 {\n         }\n     }\n \n+    /// Calculates the middle point of `self` and `rhs`.\n+    ///\n+    /// This returns NaN when *either* argument is NaN or if a combination of\n+    /// +inf and -inf is provided as arguments.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(num_midpoint)]\n+    /// assert_eq!(1f32.midpoint(4.0), 2.5);\n+    /// assert_eq!((-5.5f32).midpoint(8.0), 1.25);\n+    /// ```\n+    #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+    pub fn midpoint(self, other: f32) -> f32 {\n+        const LO: f32 = f32::MIN_POSITIVE * 2.;\n+        const HI: f32 = f32::MAX / 2.;\n+\n+        let (a, b) = (self, other);\n+        let abs_a = a.abs_private();\n+        let abs_b = b.abs_private();\n+\n+        if abs_a <= HI && abs_b <= HI {\n+            // Overflow is impossible\n+            (a + b) / 2.\n+        } else if abs_a < LO {\n+            // Not safe to halve a\n+            a + (b / 2.)\n+        } else if abs_b < LO {\n+            // Not safe to halve b\n+            (a / 2.) + b\n+        } else {\n+            // Not safe to halve a and b\n+            (a / 2.) + (b / 2.)\n+        }\n+    }\n+\n     /// Rounds toward zero and converts to any primitive integer type,\n     /// assuming that the value is finite and fits in that type.\n     ///"}, {"sha": "3aafc435f1e17687cd62e1bd47afee93818daf2b", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -951,6 +951,42 @@ impl f64 {\n         }\n     }\n \n+    /// Calculates the middle point of `self` and `rhs`.\n+    ///\n+    /// This returns NaN when *either* argument is NaN or if a combination of\n+    /// +inf and -inf is provided as arguments.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(num_midpoint)]\n+    /// assert_eq!(1f64.midpoint(4.0), 2.5);\n+    /// assert_eq!((-5.5f64).midpoint(8.0), 1.25);\n+    /// ```\n+    #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+    pub fn midpoint(self, other: f64) -> f64 {\n+        const LO: f64 = f64::MIN_POSITIVE * 2.;\n+        const HI: f64 = f64::MAX / 2.;\n+\n+        let (a, b) = (self, other);\n+        let abs_a = a.abs_private();\n+        let abs_b = b.abs_private();\n+\n+        if abs_a <= HI && abs_b <= HI {\n+            // Overflow is impossible\n+            (a + b) / 2.\n+        } else if abs_a < LO {\n+            // Not safe to halve a\n+            a + (b / 2.)\n+        } else if abs_b < LO {\n+            // Not safe to halve b\n+            (a / 2.) + b\n+        } else {\n+            // Not safe to halve a and b\n+            (a / 2.) + (b / 2.)\n+        }\n+    }\n+\n     /// Rounds toward zero and converts to any primitive integer type,\n     /// assuming that the value is finite and fits in that type.\n     ///"}, {"sha": "1199d09b563d659d1c5fa6cf85b746aa58b090d8", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2332,6 +2332,44 @@ macro_rules! int_impl {\n             }\n         }\n \n+        /// Calculates the middle point of `self` and `rhs`.\n+        ///\n+        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+        /// sufficiently-large signed integral type. This implies that the result is\n+        /// always rounded towards negative infinity and that no overflow will ever occur.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(num_midpoint)]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(-1), -1);\")]\n+        #[doc = concat!(\"assert_eq!((-1\", stringify!($SelfT), \").midpoint(0), -1);\")]\n+        /// ```\n+        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+        #[rustc_allow_const_fn_unstable(const_num_midpoint)]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn midpoint(self, rhs: Self) -> Self {\n+            const U: $UnsignedT = <$SelfT>::MIN.unsigned_abs();\n+\n+            // Map an $SelfT to an $UnsignedT\n+            // ex: i8 [-128; 127] to [0; 255]\n+            const fn map(a: $SelfT) -> $UnsignedT {\n+                (a as $UnsignedT) ^ U\n+            }\n+\n+            // Map an $UnsignedT to an $SelfT\n+            // ex: u8 [0; 255] to [-128; 127]\n+            const fn demap(a: $UnsignedT) -> $SelfT {\n+                (a ^ U) as $SelfT\n+            }\n+\n+            demap(<$UnsignedT>::midpoint(map(self), map(rhs)))\n+        }\n+\n         /// Returns the logarithm of the number with respect to an arbitrary base,\n         /// rounded down.\n         ///"}, {"sha": "c9baa09f4074a2b264fcbb50eb14cb0b3c7689a9", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -95,6 +95,57 @@ depending on the target pointer size.\n     };\n }\n \n+macro_rules! midpoint_impl {\n+    ($SelfT:ty, unsigned) => {\n+        /// Calculates the middle point of `self` and `rhs`.\n+        ///\n+        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+        /// sufficiently-large signed integral type. This implies that the result is\n+        /// always rounded towards negative infinity and that no overflow will ever occur.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(num_midpoint)]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        /// ```\n+        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn midpoint(self, rhs: $SelfT) -> $SelfT {\n+            // Use the well known branchless algorthim from Hacker's Delight to compute\n+            // `(a + b) / 2` without overflowing: `((a ^ b) >> 1) + (a & b)`.\n+            ((self ^ rhs) >> 1) + (self & rhs)\n+        }\n+    };\n+    ($SelfT:ty, $WideT:ty, unsigned) => {\n+        /// Calculates the middle point of `self` and `rhs`.\n+        ///\n+        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+        /// sufficiently-large signed integral type. This implies that the result is\n+        /// always rounded towards negative infinity and that no overflow will ever occur.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(num_midpoint)]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        /// ```\n+        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn midpoint(self, rhs: $SelfT) -> $SelfT {\n+            ((self as $WideT + rhs as $WideT) / 2) as $SelfT\n+        }\n+    };\n+}\n+\n macro_rules! widening_impl {\n     ($SelfT:ty, $WideT:ty, $BITS:literal, unsigned) => {\n         /// Calculates the complete product `self * rhs` without the possibility to overflow.\n@@ -455,6 +506,7 @@ impl u8 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u8, u16, 8, unsigned }\n+    midpoint_impl! { u8, u16, unsigned }\n \n     /// Checks if the value is within the ASCII range.\n     ///\n@@ -1066,6 +1118,7 @@ impl u16 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u16, u32, 16, unsigned }\n+    midpoint_impl! { u16, u32, unsigned }\n \n     /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n     ///\n@@ -1114,6 +1167,7 @@ impl u32 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u32, u64, 32, unsigned }\n+    midpoint_impl! { u32, u64, unsigned }\n }\n \n impl u64 {\n@@ -1137,6 +1191,7 @@ impl u64 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u64, u128, 64, unsigned }\n+    midpoint_impl! { u64, u128, unsigned }\n }\n \n impl u128 {\n@@ -1161,6 +1216,7 @@ impl u128 {\n         from_xe_bytes_doc = \"\",\n         bound_condition = \"\",\n     }\n+    midpoint_impl! { u128, unsigned }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n@@ -1185,6 +1241,7 @@ impl usize {\n         bound_condition = \" on 16-bit targets\",\n     }\n     widening_impl! { usize, u32, 16, unsigned }\n+    midpoint_impl! { usize, u32, unsigned }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n@@ -1209,6 +1266,7 @@ impl usize {\n         bound_condition = \" on 32-bit targets\",\n     }\n     widening_impl! { usize, u64, 32, unsigned }\n+    midpoint_impl! { usize, u64, unsigned }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -1233,6 +1291,7 @@ impl usize {\n         bound_condition = \" on 64-bit targets\",\n     }\n     widening_impl! { usize, u128, 64, unsigned }\n+    midpoint_impl! { usize, u128, unsigned }\n }\n \n impl usize {"}, {"sha": "38a1c42d9e825cb55c06e7c78c778a03bd001b37", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -493,6 +493,43 @@ macro_rules! nonzero_unsigned_operations {\n                 pub const fn ilog10(self) -> u32 {\n                     super::int_log10::$Int(self.0)\n                 }\n+\n+                /// Calculates the middle point of `self` and `rhs`.\n+                ///\n+                /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+                /// sufficiently-large signed integral type. This implies that the result is\n+                /// always rounded towards negative infinity and that no overflow will ever occur.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(num_midpoint)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let one = \", stringify!($Ty), \"::new(1)?;\")]\n+                #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n+                #[doc = concat!(\"let four = \", stringify!($Ty), \"::new(4)?;\")]\n+                ///\n+                /// assert_eq!(one.midpoint(four), two);\n+                /// assert_eq!(four.midpoint(one), two);\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+                #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+                #[rustc_allow_const_fn_unstable(const_num_midpoint)]\n+                #[must_use = \"this returns the result of the operation, \\\n+                              without modifying the original\"]\n+                #[inline]\n+                pub const fn midpoint(self, rhs: Self) -> Self {\n+                    // SAFETY: The only way to get `0` with midpoint is to have two opposite or\n+                    // near opposite numbers: (-5, 5), (0, 1), (0, 0) which is impossible because\n+                    // of the unsignedness of this number and also because $Ty is guaranteed to\n+                    // never being 0.\n+                    unsafe { $Ty::new_unchecked(self.get().midpoint(rhs.get())) }\n+                }\n             }\n         )+\n     }\n@@ -719,8 +756,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -734,7 +769,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn is_positive(self) -> bool {\n                     self.get().is_positive()\n                 }\n@@ -745,8 +781,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -760,7 +794,8 @@ macro_rules! nonzero_signed_operations {\n                 /// ```\n                 #[must_use]\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn is_negative(self) -> bool {\n                     self.get().is_negative()\n                 }\n@@ -770,8 +805,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -786,7 +819,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn checked_neg(self) -> Option<$Ty> {\n                     if let Some(result) = self.get().checked_neg() {\n                         // SAFETY: negation of nonzero cannot yield zero values.\n@@ -803,8 +837,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -819,7 +851,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn overflowing_neg(self) -> ($Ty, bool) {\n                     let (result, overflow) = self.get().overflowing_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values.\n@@ -832,8 +865,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -853,7 +884,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn saturating_neg(self) -> $Ty {\n                     if let Some(result) = self.checked_neg() {\n                         return result;\n@@ -870,8 +902,6 @@ macro_rules! nonzero_signed_operations {\n                 /// # Example\n                 ///\n                 /// ```\n-                /// #![feature(nonzero_negation_ops)]\n-                ///\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 /// # fn main() { test().unwrap(); }\n                 /// # fn test() -> Option<()> {\n@@ -886,7 +916,8 @@ macro_rules! nonzero_signed_operations {\n                 /// # }\n                 /// ```\n                 #[inline]\n-                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                #[stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[rustc_const_stable(feature = \"nonzero_negation_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n                 pub const fn wrapping_neg(self) -> $Ty {\n                     let result = self.get().wrapping_neg();\n                     // SAFETY: negation of nonzero cannot yield zero values."}, {"sha": "ebcce79b0f81ed2b5f82cd2498d3a9272c64838f", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -35,9 +35,11 @@ pub macro panic_2015 {\n     (\"{}\", $arg:expr $(,)?) => (\n         $crate::panicking::panic_display(&$arg)\n     ),\n-    ($fmt:expr, $($arg:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n-    ),\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+));\n+    }),\n }\n \n #[doc(hidden)]\n@@ -53,9 +55,11 @@ pub macro panic_2021 {\n     (\"{}\", $arg:expr $(,)?) => (\n         $crate::panicking::panic_display(&$arg)\n     ),\n-    ($($t:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))\n-    ),\n+    ($($t:tt)+) => ({\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+));\n+    }),\n }\n \n #[doc(hidden)]"}, {"sha": "5576adde84b037450f41fc1912128301e43143a3", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -134,7 +134,7 @@ impl<'a> PanicInfo<'a> {\n     /// whose ABI does not support unwinding.\n     ///\n     /// It is safe for a panic handler to unwind even when this function returns\n-    /// true, however this will simply cause the panic handler to be called\n+    /// false, however this will simply cause the panic handler to be called\n     /// again.\n     #[must_use]\n     #[unstable(feature = \"panic_can_unwind\", issue = \"92988\")]"}, {"sha": "6fd2b87d0e37a0eb89078de79bb743037749b270", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1595,7 +1595,8 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_split_at_not_mut\", issue = \"101158\")]\n+    #[rustc_const_stable(feature = \"const_slice_split_at_not_mut\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_allow_const_fn_unstable(slice_split_at_unchecked)]\n     #[inline]\n     #[track_caller]\n     #[must_use]"}, {"sha": "91ee2903aab43a2f3ca56cda7544e8b91a013b31", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -791,8 +791,8 @@ pub struct CharArrayRefSearcher<'a, 'b, const N: usize>(\n /// # Examples\n ///\n /// ```\n-/// assert_eq!(\"Hello world\".find(['l', 'l']), Some(2));\n-/// assert_eq!(\"Hello world\".find(['l', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(['o', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(['h', 'w']), Some(6));\n /// ```\n impl<'a, const N: usize> Pattern<'a> for [char; N] {\n     pattern_methods!(CharArraySearcher<'a, N>, MultiCharEqPattern, CharArraySearcher);\n@@ -811,8 +811,8 @@ unsafe impl<'a, const N: usize> ReverseSearcher<'a> for CharArraySearcher<'a, N>\n /// # Examples\n ///\n /// ```\n-/// assert_eq!(\"Hello world\".find(&['l', 'l']), Some(2));\n-/// assert_eq!(\"Hello world\".find(&['l', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['o', 'l']), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['h', 'w']), Some(6));\n /// ```\n impl<'a, 'b, const N: usize> Pattern<'a> for &'b [char; N] {\n     pattern_methods!(CharArrayRefSearcher<'a, 'b, N>, MultiCharEqPattern, CharArrayRefSearcher);"}, {"sha": "3933e3289514cc048044b65d9372bc814f7b1168", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -53,6 +53,7 @@\n #![feature(maybe_uninit_uninit_array_transpose)]\n #![feature(min_specialization)]\n #![feature(numfmt)]\n+#![feature(num_midpoint)]\n #![feature(step_trait)]\n #![feature(str_internals)]\n #![feature(std_internals)]"}, {"sha": "439bbe669978121224a2cae041a8036ba6239898", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -364,6 +364,32 @@ macro_rules! int_module {\n                 assert_eq!((0 as $T).borrowing_sub($T::MIN, false), ($T::MIN, true));\n                 assert_eq!((0 as $T).borrowing_sub($T::MIN, true), ($T::MAX, false));\n             }\n+\n+            #[test]\n+            fn test_midpoint() {\n+                assert_eq!(<$T>::midpoint(1, 3), 2);\n+                assert_eq!(<$T>::midpoint(3, 1), 2);\n+\n+                assert_eq!(<$T>::midpoint(0, 0), 0);\n+                assert_eq!(<$T>::midpoint(0, 2), 1);\n+                assert_eq!(<$T>::midpoint(2, 0), 1);\n+                assert_eq!(<$T>::midpoint(2, 2), 2);\n+\n+                assert_eq!(<$T>::midpoint(1, 4), 2);\n+                assert_eq!(<$T>::midpoint(4, 1), 2);\n+                assert_eq!(<$T>::midpoint(3, 4), 3);\n+                assert_eq!(<$T>::midpoint(4, 3), 3);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MAX), -1);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MIN), -1);\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MIN), <$T>::MIN);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MAX), <$T>::MAX);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, 6), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MIN), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, 6), <$T>::MAX / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MAX), <$T>::MAX / 2 + 3);\n+            }\n         }\n     };\n }"}, {"sha": "3f3659ba837d5ca468cb5f7fe37121d8818068de", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -724,7 +724,7 @@ assume_usize_width! {\n }\n \n macro_rules! test_float {\n-    ($modname: ident, $fty: ty, $inf: expr, $neginf: expr, $nan: expr) => {\n+    ($modname: ident, $fty: ty, $inf: expr, $neginf: expr, $nan: expr, $min: expr, $max: expr, $min_pos: expr) => {\n         mod $modname {\n             #[test]\n             fn min() {\n@@ -845,6 +845,38 @@ macro_rules! test_float {\n                 assert!(($nan as $fty).maximum($nan).is_nan());\n             }\n             #[test]\n+            fn midpoint() {\n+                assert_eq!((0.5 as $fty).midpoint(0.5), 0.5);\n+                assert_eq!((0.5 as $fty).midpoint(2.5), 1.5);\n+                assert_eq!((3.0 as $fty).midpoint(4.0), 3.5);\n+                assert_eq!((-3.0 as $fty).midpoint(4.0), 0.5);\n+                assert_eq!((3.0 as $fty).midpoint(-4.0), -0.5);\n+                assert_eq!((-3.0 as $fty).midpoint(-4.0), -3.5);\n+                assert_eq!((0.0 as $fty).midpoint(0.0), 0.0);\n+                assert_eq!((-0.0 as $fty).midpoint(-0.0), -0.0);\n+                assert_eq!((-5.0 as $fty).midpoint(5.0), 0.0);\n+                assert_eq!(($max as $fty).midpoint($min), 0.0);\n+                assert_eq!(($min as $fty).midpoint($max), -0.0);\n+                assert_eq!(($max as $fty).midpoint($min_pos), $max / 2.);\n+                assert_eq!((-$max as $fty).midpoint($min_pos), -$max / 2.);\n+                assert_eq!(($max as $fty).midpoint(-$min_pos), $max / 2.);\n+                assert_eq!((-$max as $fty).midpoint(-$min_pos), -$max / 2.);\n+                assert_eq!(($min_pos as $fty).midpoint($max), $max / 2.);\n+                assert_eq!(($min_pos as $fty).midpoint(-$max), -$max / 2.);\n+                assert_eq!((-$min_pos as $fty).midpoint($max), $max / 2.);\n+                assert_eq!((-$min_pos as $fty).midpoint(-$max), -$max / 2.);\n+                assert_eq!(($max as $fty).midpoint($max), $max);\n+                assert_eq!(($min_pos as $fty).midpoint($min_pos), $min_pos);\n+                assert_eq!((-$min_pos as $fty).midpoint(-$min_pos), -$min_pos);\n+                assert_eq!(($max as $fty).midpoint(5.0), $max / 2.0 + 2.5);\n+                assert_eq!(($max as $fty).midpoint(-5.0), $max / 2.0 - 2.5);\n+                assert_eq!(($inf as $fty).midpoint($inf), $inf);\n+                assert_eq!(($neginf as $fty).midpoint($neginf), $neginf);\n+                assert!(($nan as $fty).midpoint(1.0).is_nan());\n+                assert!((1.0 as $fty).midpoint($nan).is_nan());\n+                assert!(($nan as $fty).midpoint($nan).is_nan());\n+            }\n+            #[test]\n             fn rem_euclid() {\n                 let a: $fty = 42.0;\n                 assert!($inf.rem_euclid(a).is_nan());\n@@ -867,5 +899,23 @@ macro_rules! test_float {\n     };\n }\n \n-test_float!(f32, f32, f32::INFINITY, f32::NEG_INFINITY, f32::NAN);\n-test_float!(f64, f64, f64::INFINITY, f64::NEG_INFINITY, f64::NAN);\n+test_float!(\n+    f32,\n+    f32,\n+    f32::INFINITY,\n+    f32::NEG_INFINITY,\n+    f32::NAN,\n+    f32::MIN,\n+    f32::MAX,\n+    f32::MIN_POSITIVE\n+);\n+test_float!(\n+    f64,\n+    f64,\n+    f64::INFINITY,\n+    f64::NEG_INFINITY,\n+    f64::NAN,\n+    f64::MIN,\n+    f64::MAX,\n+    f64::MIN_POSITIVE\n+);"}, {"sha": "7d6203db0b940ec196efcd3ff73a5f1873bb2191", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -252,6 +252,32 @@ macro_rules! uint_module {\n                 assert_eq!($T::MAX.borrowing_sub(0, true), ($T::MAX - 1, false));\n                 assert_eq!($T::MAX.borrowing_sub($T::MAX, true), ($T::MAX, true));\n             }\n+\n+            #[test]\n+            fn test_midpoint() {\n+                assert_eq!(<$T>::midpoint(1, 3), 2);\n+                assert_eq!(<$T>::midpoint(3, 1), 2);\n+\n+                assert_eq!(<$T>::midpoint(0, 0), 0);\n+                assert_eq!(<$T>::midpoint(0, 2), 1);\n+                assert_eq!(<$T>::midpoint(2, 0), 1);\n+                assert_eq!(<$T>::midpoint(2, 2), 2);\n+\n+                assert_eq!(<$T>::midpoint(1, 4), 2);\n+                assert_eq!(<$T>::midpoint(4, 1), 2);\n+                assert_eq!(<$T>::midpoint(3, 4), 3);\n+                assert_eq!(<$T>::midpoint(4, 3), 3);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MAX), (<$T>::MAX - <$T>::MIN) / 2);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MIN), (<$T>::MAX - <$T>::MIN) / 2);\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MIN), <$T>::MIN);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MAX), <$T>::MAX);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, 6), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MIN), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, 6), (<$T>::MAX - <$T>::MIN) / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MAX), (<$T>::MAX - <$T>::MIN) / 2 + 3);\n+            }\n         }\n     };\n }"}, {"sha": "2a6b1a5ec73e49a2c748a21a46b03cf096a54cb0", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1946,7 +1946,7 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// On success, the total number of bytes copied is returned and it is equal to\n /// the length of the `to` file as reported by `metadata`.\n ///\n-/// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n+/// If you want to copy the contents of one file to another and you\u2019re\n /// working with [`File`]s, see the [`io::copy()`] function.\n ///\n /// # Platform-specific behavior"}, {"sha": "1d9d93f5b64ecf2e149be34ba3270f7b4ed1cf9d", "filename": "library/std/src/io/copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcopy.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -10,7 +10,7 @@ use crate::mem::MaybeUninit;\n /// On success, the total number of bytes that were copied from\n /// `reader` to `writer` is returned.\n ///\n-/// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n+/// If you want to copy the contents of one file to another and you\u2019re\n /// working with filesystem paths, see the [`fs::copy`] function.\n ///\n /// [`fs::copy`]: crate::fs::copy"}, {"sha": "cbf8209a5ad437f9604e00ad8720b28981005af4", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -437,6 +437,42 @@ impl<T: AsHandle> AsHandle for &mut T {\n     }\n }\n \n+#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+/// This impl allows implementing traits that require `AsHandle` on Arc.\n+/// ```\n+/// # #[cfg(windows)] mod group_cfg {\n+/// # use std::os::windows::io::AsHandle;\n+/// use std::fs::File;\n+/// use std::sync::Arc;\n+///\n+/// trait MyTrait: AsHandle {}\n+/// impl MyTrait for Arc<File> {}\n+/// impl MyTrait for Box<File> {}\n+/// # }\n+/// ```\n+impl<T: AsHandle> AsHandle for crate::sync::Arc<T> {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        (**self).as_handle()\n+    }\n+}\n+\n+#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T: AsHandle> AsHandle for crate::rc::Rc<T> {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        (**self).as_handle()\n+    }\n+}\n+\n+#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T: AsHandle> AsHandle for Box<T> {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        (**self).as_handle()\n+    }\n+}\n+\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsHandle for BorrowedHandle<'_> {\n     #[inline]"}, {"sha": "0c90d55c024fbf4ce9b68fe8b999448e2d8efcb5", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -254,6 +254,42 @@ impl<T: AsSocket> AsSocket for &mut T {\n     }\n }\n \n+#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+/// This impl allows implementing traits that require `AsSocket` on Arc.\n+/// ```\n+/// # #[cfg(windows)] mod group_cfg {\n+/// # use std::os::windows::io::AsSocket;\n+/// use std::net::UdpSocket;\n+/// use std::sync::Arc;\n+///\n+/// trait MyTrait: AsSocket {}\n+/// impl MyTrait for Arc<UdpSocket> {}\n+/// impl MyTrait for Box<UdpSocket> {}\n+/// # }\n+/// ```\n+impl<T: AsSocket> AsSocket for crate::sync::Arc<T> {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        (**self).as_socket()\n+    }\n+}\n+\n+#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T: AsSocket> AsSocket for crate::rc::Rc<T> {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        (**self).as_socket()\n+    }\n+}\n+\n+#[stable(feature = \"as_windows_ptrs\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T: AsSocket> AsSocket for Box<T> {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        (**self).as_socket()\n+    }\n+}\n+\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n impl AsSocket for BorrowedSocket<'_> {\n     #[inline]"}, {"sha": "a2ffd8b1e7eca3e3d55bdd94034c4ee1395ad7ea", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -26,7 +26,9 @@ pub macro panic_2015 {\n         $crate::rt::panic_display(&$arg)\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+));\n     }),\n }\n "}, {"sha": "33b2bff8534980b1445188f2c2eb321182a4f1b3", "filename": "library/std/src/sync/mpmc/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Ferror.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -35,7 +35,7 @@ impl<T> fmt::Display for SendTimeoutError<T> {\n     }\n }\n \n-impl<T: Send> error::Error for SendTimeoutError<T> {}\n+impl<T> error::Error for SendTimeoutError<T> {}\n \n impl<T> From<SendError<T>> for SendTimeoutError<T> {\n     fn from(err: SendError<T>) -> SendTimeoutError<T> {"}, {"sha": "0e0c87d1c748e94a49f128bb43ab8efb12c73629", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1124,7 +1124,7 @@ impl<T> fmt::Display for SendError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> error::Error for SendError<T> {\n+impl<T> error::Error for SendError<T> {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {\n         \"sending on a closed channel\"\n@@ -1152,7 +1152,7 @@ impl<T> fmt::Display for TrySendError<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> error::Error for TrySendError<T> {\n+impl<T> error::Error for TrySendError<T> {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {\n         match *self {"}, {"sha": "1b86d898cc7a32ea1f904c8900e0565033929cc4", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -18,8 +18,8 @@ use crate::fmt;\n /// target platform. It is instantiated with the [`thread_local!`] macro and the\n /// primary method is the [`with`] method.\n ///\n-/// The [`with`] method yields a reference to the contained value which cannot be\n-/// sent across threads or escape the given closure.\n+/// The [`with`] method yields a reference to the contained value which cannot\n+/// outlive the current thread or escape the given closure.\n ///\n /// [`thread_local!`]: crate::thread_local\n ///"}, {"sha": "9420c4fec5fa4b57817075480119b2f34a72a162", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -45,6 +45,7 @@ dependencies = [\n  \"build_helper\",\n  \"cc\",\n  \"clap\",\n+ \"clap_complete\",\n  \"cmake\",\n  \"fd-lock\",\n  \"filetime\",\n@@ -57,6 +58,7 @@ dependencies = [\n  \"once_cell\",\n  \"opener\",\n  \"pretty_assertions\",\n+ \"semver\",\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n@@ -119,6 +121,15 @@ dependencies = [\n  \"clap_lex\",\n ]\n \n+[[package]]\n+name = \"clap_complete\"\n+version = \"4.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"36774babb166352bb4f7b9cb16f781ffa3439d2a8f12cd31bea85a38c888fea3\"\n+dependencies = [\n+ \"clap\",\n+]\n+\n [[package]]\n name = \"clap_derive\"\n version = \"4.2.0\"\n@@ -635,6 +646,12 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n+[[package]]\n+name = \"semver\"\n+version = \"1.0.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n+\n [[package]]\n name = \"serde\"\n version = \"1.0.137\""}, {"sha": "746c8dcfce0cd15d509000b67a9c96e20a318e12", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -56,6 +56,8 @@ walkdir = \"2\"\n # Dependencies needed by the build-metrics feature\n sysinfo = { version = \"0.26.0\", optional = true }\n clap = { version = \"4.2.4\", default-features = false, features = [\"std\", \"usage\", \"help\", \"derive\", \"error-context\"] }\n+clap_complete = \"4.2.2\"\n+semver = \"1.0.17\"\n \n # Solaris doesn't support flock() and thus fd-lock is not option now\n [target.'cfg(not(target_os = \"solaris\"))'.dependencies]"}, {"sha": "5c37fab5470707d36b11316f3129941f48befd8d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -839,6 +839,7 @@ impl<'a> Builder<'a> {\n                 run::CollectLicenseMetadata,\n                 run::GenerateCopyright,\n                 run::GenerateWindowsSys,\n+                run::GenerateCompletions,\n             ),\n             Kind::Setup => describe!(setup::Profile, setup::Hook, setup::Link, setup::Vscode),\n             Kind::Clean => describe!(clean::CleanAll, clean::Rustc, clean::Std),"}, {"sha": "710c8b52194b49fc0954455d0a8c279201991f5d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -24,6 +24,7 @@ pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags, Warnings};\n use crate::util::{exe, output, t};\n use once_cell::sync::OnceCell;\n+use semver::Version;\n use serde::{Deserialize, Deserializer};\n use serde_derive::Deserialize;\n \n@@ -1019,6 +1020,7 @@ impl Config {\n             config.download_beta_toolchain();\n             config.out.join(config.build.triple).join(\"stage0/bin/rustc\")\n         });\n+\n         config.initial_cargo = build\n             .cargo\n             .map(|cargo| {\n@@ -1680,6 +1682,42 @@ impl Config {\n         self.rust_codegen_backends.get(0).cloned()\n     }\n \n+    pub fn check_build_rustc_version(&self) {\n+        if self.dry_run() {\n+            return;\n+        }\n+\n+        // check rustc version is same or lower with 1 apart from the building one\n+        let mut cmd = Command::new(&self.initial_rustc);\n+        cmd.arg(\"--version\");\n+        let rustc_output = output(&mut cmd)\n+            .lines()\n+            .next()\n+            .unwrap()\n+            .split(' ')\n+            .nth(1)\n+            .unwrap()\n+            .split('-')\n+            .next()\n+            .unwrap()\n+            .to_owned();\n+        let rustc_version = Version::parse(&rustc_output.trim()).unwrap();\n+        let source_version =\n+            Version::parse(&fs::read_to_string(self.src.join(\"src/version\")).unwrap().trim())\n+                .unwrap();\n+        if !(source_version == rustc_version\n+            || (source_version.major == rustc_version.major\n+                && source_version.minor == rustc_version.minor + 1))\n+        {\n+            let prev_version = format!(\"{}.{}.x\", source_version.major, source_version.minor - 1);\n+            eprintln!(\n+                \"Unexpected rustc version: {}, we should use {}/{} to build source with {}\",\n+                rustc_version, prev_version, source_version, source_version\n+            );\n+            crate::detail_exit(1);\n+        }\n+    }\n+\n     /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n     fn download_ci_rustc_commit(&self, download_rustc: Option<StringOrBool>) -> Option<String> {\n         // If `download-rustc` is not set, default to rebuilding."}, {"sha": "6e0c0e01af86333bbc5c94e3d0908911fec584f2", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -3,9 +3,9 @@\n //! This module implements the command-line parsing of the build system which\n //! has various flags to configure how it's run.\n \n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n-use clap::{Parser, ValueEnum};\n+use clap::{CommandFactory, Parser, ValueEnum};\n \n use crate::builder::{Builder, Kind};\n use crate::config::{target_selection_list, Config, TargetSelectionList};\n@@ -54,15 +54,15 @@ pub struct Flags {\n     /// Build directory, overrides `build.build-dir` in `config.toml`\n     pub build_dir: Option<PathBuf>,\n \n-    #[arg(global(true), long, value_name = \"BUILD\")]\n+    #[arg(global(true), long, value_hint = clap::ValueHint::Other, value_name = \"BUILD\")]\n     /// build target of the stage0 compiler\n     pub build: Option<String>,\n \n-    #[arg(global(true), long, value_name = \"HOST\", value_parser = target_selection_list)]\n+    #[arg(global(true), long, value_hint = clap::ValueHint::Other, value_name = \"HOST\", value_parser = target_selection_list)]\n     /// host targets to build\n     pub host: Option<TargetSelectionList>,\n \n-    #[arg(global(true), long, value_name = \"TARGET\", value_parser = target_selection_list)]\n+    #[arg(global(true), long, value_hint = clap::ValueHint::Other, value_name = \"TARGET\", value_parser = target_selection_list)]\n     /// target targets to build\n     pub target: Option<TargetSelectionList>,\n \n@@ -73,7 +73,7 @@ pub struct Flags {\n     /// include default paths in addition to the provided ones\n     pub include_default_paths: bool,\n \n-    #[arg(global(true), long)]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long)]\n     pub rustc_error_format: Option<String>,\n \n     #[arg(global(true), long, value_hint = clap::ValueHint::CommandString, value_name = \"CMD\")]\n@@ -82,16 +82,16 @@ pub struct Flags {\n     #[arg(global(true), long)]\n     /// dry run; don't build anything\n     pub dry_run: bool,\n-    #[arg(global(true), long, value_name = \"N\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"N\")]\n     /// stage to build (indicates compiler to use/test, e.g., stage 0 uses the\n     /// bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)\n     pub stage: Option<u32>,\n \n-    #[arg(global(true), long, value_name = \"N\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"N\")]\n     /// stage(s) to keep without recompiling\n     /// (pass multiple times to keep e.g., both stages 0 and 1)\n     pub keep_stage: Vec<u32>,\n-    #[arg(global(true), long, value_name = \"N\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"N\")]\n     /// stage(s) of the standard library to keep without recompiling\n     /// (pass multiple times to keep e.g., both stages 0 and 1)\n     pub keep_stage_std: Vec<u32>,\n@@ -103,6 +103,7 @@ pub struct Flags {\n         global(true),\n         short,\n         long,\n+        value_hint = clap::ValueHint::Other,\n         default_value_t = std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get),\n         value_name = \"JOBS\"\n     )]\n@@ -117,7 +118,7 @@ pub struct Flags {\n     /// otherwise, use the default configured behaviour\n     pub warnings: Warnings,\n \n-    #[arg(global(true), long, value_name = \"FORMAT\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"FORMAT\")]\n     /// rustc error format\n     pub error_format: Option<String>,\n     #[arg(global(true), long)]\n@@ -133,13 +134,13 @@ pub struct Flags {\n     #[arg(global(true), long, value_name = \"VALUE\")]\n     pub llvm_skip_rebuild: Option<bool>,\n     /// generate PGO profile with rustc build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub rust_profile_generate: Option<String>,\n     /// use PGO profile for rustc build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub rust_profile_use: Option<String>,\n     /// use PGO profile for LLVM build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub llvm_profile_use: Option<String>,\n     // LLVM doesn't support a custom location for generating profile\n     // information.\n@@ -152,7 +153,7 @@ pub struct Flags {\n     #[arg(global(true), long)]\n     pub llvm_bolt_profile_generate: bool,\n     /// use BOLT profile for LLVM build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub llvm_bolt_profile_use: Option<String>,\n     #[arg(global(true))]\n     /// paths for the subcommand\n@@ -524,3 +525,23 @@ impl Subcommand {\n         }\n     }\n }\n+\n+/// Returns the shell completion for a given shell, if the result differs from the current\n+/// content of `path`. If `path` does not exist, always returns `Some`.\n+pub fn get_completion<G: clap_complete::Generator>(shell: G, path: &Path) -> Option<String> {\n+    let mut cmd = Flags::command();\n+    let current = if !path.exists() {\n+        String::new()\n+    } else {\n+        std::fs::read_to_string(path).unwrap_or_else(|_| {\n+            eprintln!(\"couldn't read {}\", path.display());\n+            crate::detail_exit(1)\n+        })\n+    };\n+    let mut buf = Vec::new();\n+    clap_complete::generate(shell, &mut cmd, \"x.py\", &mut buf);\n+    if buf == current.as_bytes() {\n+        return None;\n+    }\n+    Some(String::from_utf8(buf).expect(\"completion script should be UTF-8\"))\n+}"}, {"sha": "3756976dee062fbb9f7cfe9077c113e772112b8e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -414,6 +414,7 @@ impl Build {\n                 bootstrap_out.display()\n             )\n         }\n+        config.check_build_rustc_version();\n \n         if rust_info.is_from_tarball() && config.description.is_none() {\n             config.description = Some(\"built from a source tarball\".to_owned());"}, {"sha": "ec01f744b8250a608326fc7a10a8ed98db3d79ca", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,9 +1,12 @@\n use std::path::PathBuf;\n use std::process::Command;\n \n+use clap_complete::shells;\n+\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::dist::distdir;\n+use crate::flags::get_completion;\n use crate::test;\n use crate::tool::{self, SourceType, Tool};\n use crate::util::output;\n@@ -275,3 +278,34 @@ impl Step for GenerateWindowsSys {\n         builder.run(&mut cmd);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct GenerateCompletions;\n+\n+impl Step for GenerateCompletions {\n+    type Output = ();\n+\n+    /// Uses `clap_complete` to generate shell completions.\n+    fn run(self, builder: &Builder<'_>) {\n+        // FIXME(clubby789): enable zsh when clap#4898 is fixed\n+        let [bash, fish, powershell] = [\"x.py.sh\", \"x.py.fish\", \"x.py.ps1\"]\n+            .map(|filename| builder.src.join(\"src/etc/completions\").join(filename));\n+        if let Some(comp) = get_completion(shells::Bash, &bash) {\n+            std::fs::write(&bash, comp).expect(\"writing bash completion\");\n+        }\n+        if let Some(comp) = get_completion(shells::Fish, &fish) {\n+            std::fs::write(&fish, comp).expect(\"writing fish completion\");\n+        }\n+        if let Some(comp) = get_completion(shells::PowerShell, &powershell) {\n+            std::fs::write(&powershell, comp).expect(\"writing powershell completion\");\n+        }\n+    }\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.alias(\"generate-completions\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(GenerateCompletions);\n+    }\n+}"}, {"sha": "2d600704e025e16fd5ebe3b79582cc13639ae12f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -10,6 +10,8 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n+use clap_complete::shells;\n+\n use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n@@ -1138,7 +1140,24 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n         builder.info(\"tidy check\");\n         try_run(builder, &mut cmd);\n \n-        builder.ensure(ExpandYamlAnchors {});\n+        builder.ensure(ExpandYamlAnchors);\n+\n+        builder.info(\"x.py completions check\");\n+        let [bash, fish, powershell] = [\"x.py.sh\", \"x.py.fish\", \"x.py.ps1\"]\n+            .map(|filename| builder.src.join(\"src/etc/completions\").join(filename));\n+        if builder.config.cmd.bless() {\n+            builder.ensure(crate::run::GenerateCompletions);\n+        } else {\n+            if crate::flags::get_completion(shells::Bash, &bash).is_some()\n+                || crate::flags::get_completion(shells::Fish, &fish).is_some()\n+                || crate::flags::get_completion(shells::PowerShell, &powershell).is_some()\n+            {\n+                eprintln!(\n+                    \"x.py completions were changed; run `x.py run generate-completions` to update them\"\n+                );\n+                crate::detail_exit(1);\n+            }\n+        }\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}, {"sha": "6b4966ddeb4085e6eebcf9e21769014c50b56459", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1 +1 @@\n-0.16.0\n\\ No newline at end of file\n+0.16.3\n\\ No newline at end of file"}, {"sha": "089c03a0d64bab2766677ff0be5e5877ad3a4797", "filename": "src/etc/completions/x.py.fish", "status": "added", "additions": 475, "deletions": 0, "changes": 475, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fetc%2Fcompletions%2Fx.py.fish", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fetc%2Fcompletions%2Fx.py.fish", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.fish?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,475 @@\n+complete -c x.py -n \"__fish_use_subcommand\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_use_subcommand\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_use_subcommand\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_use_subcommand\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_use_subcommand\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_use_subcommand\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_use_subcommand\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"build\" -d 'Compile either the compiler or libraries'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"check\" -d 'Compile either the compiler or libraries, using cargo check'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"clippy\" -d 'Run Clippy (uses rustup/cargo-installed clippy binary)'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"fix\" -d 'Run cargo fix'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"fmt\" -d 'Run rustfmt'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"doc\" -d 'Build documentation'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"test\" -d 'Build and run some test suites'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"bench\" -d 'Build and run some benchmarks'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"clean\" -d 'Clean out build directories'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"dist\" -d 'Duild distribution artifacts'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"install\" -d 'Install distribution artifacts'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"run\" -d 'Run tools contained in this repository'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"setup\" -d 'Set up the environment for development'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"suggest\" -d 'Suggest a subset of tests to run, based on modified files'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l all-targets -d 'Check all targets'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s A -d 'clippy lints to allow' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s D -d 'clippy lints to deny' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s W -d 'clippy lints to warn on' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s F -d 'clippy lints to forbid' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l fix\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l check -d 'check formatting instead of applying'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l open -d 'open the docs in a browser'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l json -d 'render the documentation in JSON format in addition to the usual HTML format'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l skip -d 'skips tests matching SUBSTRING, if supported by test tool. May be passed multiple times' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l test-args -d 'extra arguments to be passed for the test tool being used (e.g. libtest, compiletest or rustdoc)' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rustc-args -d 'extra options to pass the compiler when running tests' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l compare-mode -d 'mode describing what file the actual ui output will be compared to' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l pass -d 'force {check,build,run}-pass tests to this mode' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l run -d 'whether to execute run-* tests' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l no-fail-fast -d 'run all tests regardless of failure'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l no-doc -d 'do not run doc tests'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l doc -d 'only run doc tests'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l bless -d 'whether to automatically update stderr/stdout files'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l force-rerun -d 'rerun tests even if the inputs are unchanged'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l only-modified -d 'only run tests that result has been changed'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rustfix-coverage -d 'enable this to generate a Rustfix coverage file, which is saved in `/<build_base>/rustfix_missing_coverage.txt`'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l test-args -r\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l all\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l args -d 'arguments for the tool' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l run -d 'run suggested tests'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s h -l help -d 'Print help (see more with \\'--help\\')'"}, {"sha": "fad2391e61f08beceb2d477c88b458d63a424480", "filename": "src/etc/completions/x.py.ps1", "status": "added", "additions": 607, "deletions": 0, "changes": 607, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fetc%2Fcompletions%2Fx.py.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fetc%2Fcompletions%2Fx.py.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.ps1?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,607 @@\n+\n+using namespace System.Management.Automation\n+using namespace System.Management.Automation.Language\n+\n+Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n+    param($wordToComplete, $commandAst, $cursorPosition)\n+\n+    $commandElements = $commandAst.CommandElements\n+    $command = @(\n+        'x.py'\n+        for ($i = 1; $i -lt $commandElements.Count; $i++) {\n+            $element = $commandElements[$i]\n+            if ($element -isnot [StringConstantExpressionAst] -or\n+                $element.StringConstantType -ne [StringConstantType]::BareWord -or\n+                $element.Value.StartsWith('-') -or\n+                $element.Value -eq $wordToComplete) {\n+                break\n+        }\n+        $element.Value\n+    }) -join ';'\n+\n+    $completions = @(switch ($command) {\n+        'x.py' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('build', 'build', [CompletionResultType]::ParameterValue, 'Compile either the compiler or libraries')\n+            [CompletionResult]::new('check', 'check', [CompletionResultType]::ParameterValue, 'Compile either the compiler or libraries, using cargo check')\n+            [CompletionResult]::new('clippy', 'clippy', [CompletionResultType]::ParameterValue, 'Run Clippy (uses rustup/cargo-installed clippy binary)')\n+            [CompletionResult]::new('fix', 'fix', [CompletionResultType]::ParameterValue, 'Run cargo fix')\n+            [CompletionResult]::new('fmt', 'fmt', [CompletionResultType]::ParameterValue, 'Run rustfmt')\n+            [CompletionResult]::new('doc', 'doc', [CompletionResultType]::ParameterValue, 'Build documentation')\n+            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Build and run some test suites')\n+            [CompletionResult]::new('bench', 'bench', [CompletionResultType]::ParameterValue, 'Build and run some benchmarks')\n+            [CompletionResult]::new('clean', 'clean', [CompletionResultType]::ParameterValue, 'Clean out build directories')\n+            [CompletionResult]::new('dist', 'dist', [CompletionResultType]::ParameterValue, 'Duild distribution artifacts')\n+            [CompletionResult]::new('install', 'install', [CompletionResultType]::ParameterValue, 'Install distribution artifacts')\n+            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run tools contained in this repository')\n+            [CompletionResult]::new('setup', 'setup', [CompletionResultType]::ParameterValue, 'Set up the environment for development')\n+            [CompletionResult]::new('suggest', 'suggest', [CompletionResultType]::ParameterValue, 'Suggest a subset of tests to run, based on modified files')\n+            break\n+        }\n+        'x.py;build' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;check' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--all-targets', 'all-targets', [CompletionResultType]::ParameterName, 'Check all targets')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;clippy' {\n+            [CompletionResult]::new('-A', 'A', [CompletionResultType]::ParameterName, 'clippy lints to allow')\n+            [CompletionResult]::new('-D', 'D', [CompletionResultType]::ParameterName, 'clippy lints to deny')\n+            [CompletionResult]::new('-W', 'W', [CompletionResultType]::ParameterName, 'clippy lints to warn on')\n+            [CompletionResult]::new('-F', 'F', [CompletionResultType]::ParameterName, 'clippy lints to forbid')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--fix', 'fix', [CompletionResultType]::ParameterName, 'fix')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;fix' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;fmt' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--check', 'check', [CompletionResultType]::ParameterName, 'check formatting instead of applying')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;doc' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--open', 'open', [CompletionResultType]::ParameterName, 'open the docs in a browser')\n+            [CompletionResult]::new('--json', 'json', [CompletionResultType]::ParameterName, 'render the documentation in JSON format in addition to the usual HTML format')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;test' {\n+            [CompletionResult]::new('--skip', 'skip', [CompletionResultType]::ParameterName, 'skips tests matching SUBSTRING, if supported by test tool. May be passed multiple times')\n+            [CompletionResult]::new('--test-args', 'test-args', [CompletionResultType]::ParameterName, 'extra arguments to be passed for the test tool being used (e.g. libtest, compiletest or rustdoc)')\n+            [CompletionResult]::new('--rustc-args', 'rustc-args', [CompletionResultType]::ParameterName, 'extra options to pass the compiler when running tests')\n+            [CompletionResult]::new('--compare-mode', 'compare-mode', [CompletionResultType]::ParameterName, 'mode describing what file the actual ui output will be compared to')\n+            [CompletionResult]::new('--pass', 'pass', [CompletionResultType]::ParameterName, 'force {check,build,run}-pass tests to this mode')\n+            [CompletionResult]::new('--run', 'run', [CompletionResultType]::ParameterName, 'whether to execute run-* tests')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--no-fail-fast', 'no-fail-fast', [CompletionResultType]::ParameterName, 'run all tests regardless of failure')\n+            [CompletionResult]::new('--no-doc', 'no-doc', [CompletionResultType]::ParameterName, 'do not run doc tests')\n+            [CompletionResult]::new('--doc', 'doc', [CompletionResultType]::ParameterName, 'only run doc tests')\n+            [CompletionResult]::new('--bless', 'bless', [CompletionResultType]::ParameterName, 'whether to automatically update stderr/stdout files')\n+            [CompletionResult]::new('--force-rerun', 'force-rerun', [CompletionResultType]::ParameterName, 'rerun tests even if the inputs are unchanged')\n+            [CompletionResult]::new('--only-modified', 'only-modified', [CompletionResultType]::ParameterName, 'only run tests that result has been changed')\n+            [CompletionResult]::new('--rustfix-coverage', 'rustfix-coverage', [CompletionResultType]::ParameterName, 'enable this to generate a Rustfix coverage file, which is saved in `/<build_base>/rustfix_missing_coverage.txt`')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;bench' {\n+            [CompletionResult]::new('--test-args', 'test-args', [CompletionResultType]::ParameterName, 'test-args')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;clean' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--all', 'all', [CompletionResultType]::ParameterName, 'all')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;dist' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;install' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;run' {\n+            [CompletionResult]::new('--args', 'args', [CompletionResultType]::ParameterName, 'arguments for the tool')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;setup' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;suggest' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--run', 'run', [CompletionResultType]::ParameterName, 'run suggested tests')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+    })\n+\n+    $completions.Where{ $_.CompletionText -like \"$wordToComplete*\" } |\n+        Sort-Object -Property ListItemText\n+}"}, {"sha": "931cc4353b2d2324173a4ed5351e343184409e2f", "filename": "src/etc/completions/x.py.sh", "status": "added", "additions": 1644, "deletions": 0, "changes": 1644, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fetc%2Fcompletions%2Fx.py.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Fetc%2Fcompletions%2Fx.py.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.sh?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,1644 @@\n+_x.py() {\n+    local i cur prev opts cmd\n+    COMPREPLY=()\n+    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n+    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n+    cmd=\"\"\n+    opts=\"\"\n+\n+    for i in ${COMP_WORDS[@]}\n+    do\n+        case \"${cmd},${i}\" in\n+            \",$1\")\n+                cmd=\"x.py\"\n+                ;;\n+            bootstrap,bench)\n+                cmd=\"bootstrap__bench\"\n+                ;;\n+            bootstrap,build)\n+                cmd=\"bootstrap__build\"\n+                ;;\n+            bootstrap,check)\n+                cmd=\"bootstrap__check\"\n+                ;;\n+            bootstrap,clean)\n+                cmd=\"bootstrap__clean\"\n+                ;;\n+            bootstrap,clippy)\n+                cmd=\"bootstrap__clippy\"\n+                ;;\n+            bootstrap,dist)\n+                cmd=\"bootstrap__dist\"\n+                ;;\n+            bootstrap,doc)\n+                cmd=\"bootstrap__doc\"\n+                ;;\n+            bootstrap,fix)\n+                cmd=\"bootstrap__fix\"\n+                ;;\n+            bootstrap,fmt)\n+                cmd=\"bootstrap__fmt\"\n+                ;;\n+            bootstrap,install)\n+                cmd=\"bootstrap__install\"\n+                ;;\n+            bootstrap,run)\n+                cmd=\"bootstrap__run\"\n+                ;;\n+            bootstrap,setup)\n+                cmd=\"bootstrap__setup\"\n+                ;;\n+            bootstrap,suggest)\n+                cmd=\"bootstrap__suggest\"\n+                ;;\n+            bootstrap,test)\n+                cmd=\"bootstrap__test\"\n+                ;;\n+            *)\n+                ;;\n+        esac\n+    done\n+\n+    case \"${cmd}\" in\n+        x.py)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]... build check clippy fix fmt doc test bench clean dist install run setup suggest\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__bench)\n+            opts=\"-v -i -j -h --test-args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --test-args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__build)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__check)\n+            opts=\"-v -i -j -h --all-targets --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__clean)\n+            opts=\"-v -i -j -h --all --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__clippy)\n+            opts=\"-A -D -W -F -v -i -j -h --fix --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                -A)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                -D)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                -W)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                -F)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__dist)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__doc)\n+            opts=\"-v -i -j -h --open --json --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__fix)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__fmt)\n+            opts=\"-v -i -j -h --check --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__install)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__run)\n+            opts=\"-v -i -j -h --args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__setup)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [<PROFILE>|hook|vscode|link] [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__suggest)\n+            opts=\"-v -i -j -h --run --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__test)\n+            opts=\"-v -i -j -h --no-fail-fast --skip --test-args --rustc-args --no-doc --doc --bless --force-rerun --only-modified --compare-mode --pass --run --rustfix-coverage --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --skip)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --test-args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --compare-mode)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --pass)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --run)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+    esac\n+}\n+\n+complete -F _x.py -o bashdefault -o default x.py"}, {"sha": "17aa6b38e389c3fba44ec5ec42aa9548fdb9bc02", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -594,9 +594,8 @@ pub(super) fn display_macro_source(\n     def_id: DefId,\n     vis: ty::Visibility<DefId>,\n ) -> String {\n-    let tts: Vec<_> = def.body.tokens.clone().into_trees().collect();\n     // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n-    let matchers = tts.chunks(4).map(|arm| &arm[0]);\n+    let matchers = def.body.tokens.chunks(4).map(|arm| &arm[0]);\n \n     if def.macro_rules {\n         format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(cx.tcx, matchers, \";\"))"}, {"sha": "5460bce21a512f3ba5b61279accaf1f7165fd654", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -739,6 +739,9 @@ fn main_args(at_args: &[String]) -> MainResult {\n         }\n     };\n \n+    // Set parallel mode before error handler creation, which will create `Lock`s.\n+    interface::set_thread_safe_mode(&options.unstable_opts);\n+\n     let diag = core::new_handler(\n         options.error_format,\n         None,"}, {"sha": "51a3b0d972e683d42fef81b1482729c3d5ff7cf9", "filename": "src/tools/clippy/tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -30,19 +30,11 @@ error: sub-expression diverges\n LL |             3 => true || diverge(),\n    |                          ^^^^^^^^^\n \n-error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:36:30\n-   |\n-LL |                 _ => true || panic!(\"boo\"),\n-   |                              ^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: sub-expression diverges\n   --> $DIR/diverging_sub_expression.rs:38:26\n    |\n LL |             _ => true || break,\n    |                          ^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "c8a370085a045390869c6ded5c4a9f5bb44f1411", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -139,18 +139,18 @@ enum FileEntry {\n type Cache = HashMap<String, FileEntry>;\n \n fn small_url_encode(s: &str) -> String {\n-    s.replace(\"<\", \"%3C\")\n-        .replace(\">\", \"%3E\")\n-        .replace(\" \", \"%20\")\n-        .replace(\"?\", \"%3F\")\n-        .replace(\"'\", \"%27\")\n-        .replace(\"&\", \"%26\")\n-        .replace(\",\", \"%2C\")\n-        .replace(\":\", \"%3A\")\n-        .replace(\";\", \"%3B\")\n-        .replace(\"[\", \"%5B\")\n-        .replace(\"]\", \"%5D\")\n-        .replace(\"\\\"\", \"%22\")\n+    s.replace('<', \"%3C\")\n+        .replace('>', \"%3E\")\n+        .replace(' ', \"%20\")\n+        .replace('?', \"%3F\")\n+        .replace('\\'', \"%27\")\n+        .replace('&', \"%26\")\n+        .replace(',', \"%2C\")\n+        .replace(':', \"%3A\")\n+        .replace(';', \"%3B\")\n+        .replace('[', \"%5B\")\n+        .replace(']', \"%5D\")\n+        .replace('\\\"', \"%22\")\n }\n \n impl Checker {\n@@ -267,7 +267,6 @@ impl Checker {\n                 FileEntry::OtherFile => return,\n                 FileEntry::Redirect { target } => {\n                     let t = target.clone();\n-                    drop(target);\n                     let (target, redir_entry) = self.load_file(&t, report);\n                     match redir_entry {\n                         FileEntry::Missing => {\n@@ -391,7 +390,7 @@ impl Checker {\n         const ERROR_INVALID_NAME: i32 = 123;\n \n         let pretty_path =\n-            file.strip_prefix(&self.root).unwrap_or(&file).to_str().unwrap().to_string();\n+            file.strip_prefix(&self.root).unwrap_or(file).to_str().unwrap().to_string();\n \n         let entry =\n             self.cache.entry(pretty_path.clone()).or_insert_with(|| match fs::metadata(file) {\n@@ -470,10 +469,8 @@ fn is_exception(file: &Path, link: &str) -> bool {\n         // NOTE: This cannot be added to `LINKCHECK_EXCEPTIONS` because the resolved path\n         // calculated in `check` function is outside `build/<triple>/doc` dir.\n         // So the `strip_prefix` method just returns the old absolute broken path.\n-        if file.ends_with(\"std/primitive.slice.html\") {\n-            if link.ends_with(\"primitive.slice.html\") {\n-                return true;\n-            }\n+        if file.ends_with(\"std/primitive.slice.html\") && link.ends_with(\"primitive.slice.html\") {\n+            return true;\n         }\n         false\n     }\n@@ -545,7 +542,7 @@ fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(source: &str, attr: &str, m\n fn parse_ids(ids: &mut HashSet<String>, file: &str, source: &str, report: &mut Report) {\n     if ids.is_empty() {\n         with_attrs_in_source(source, \" id\", |fragment, i, _| {\n-            let frag = fragment.trim_start_matches(\"#\").to_owned();\n+            let frag = fragment.trim_start_matches('#').to_owned();\n             let encoded = small_url_encode(&frag);\n             if !ids.insert(frag) {\n                 report.errors += 1;"}, {"sha": "083dd4800d93e00ec5b5e503ed48b927cc788828", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -28,8 +28,8 @@ use rustc_middle::{\n     middle::exported_symbols::{\n         ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n     },\n-    query::LocalCrate,\n-    ty::{query::ExternProviders, TyCtxt},\n+    query::{ExternProviders, LocalCrate},\n+    ty::TyCtxt,\n };\n use rustc_session::config::OptLevel;\n "}, {"sha": "e1004c796c586e3d4d99a829d8512adf6482e068", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -145,6 +145,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"expect-test\",\n     \"fallible-iterator\", // dependency of `thorin`\n     \"fastrand\",\n+    \"field-offset\",\n     \"fixedbitset\",\n     \"flate2\",\n     \"fluent-bundle\","}, {"sha": "d0257d716973e21ab9c71a62cfa2e1408edc7f49", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -296,6 +296,12 @@ pub fn check(path: &Path, bad: &mut bool) {\n         if filename.contains(\"ignore-tidy\") {\n             return;\n         }\n+        // Shell completions are automatically generated\n+        if let Some(p) = file.parent() {\n+            if p.ends_with(Path::new(\"src/etc/completions\")) {\n+                return;\n+            }\n+        }\n         // apfloat shouldn't be changed because of license problems\n         if is_in(file, \"compiler\", \"rustc_apfloat\") {\n             return;"}, {"sha": "ee12f4acb107791f14b0b47601b3113a35974ad4", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -4,13 +4,38 @@\n \n use ignore::Walk;\n use std::collections::HashMap;\n+use std::ffi::OsStr;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n const ISSUES_ENTRY_LIMIT: usize = 1920;\n-const ROOT_ENTRY_LIMIT: usize = 895;\n+const ROOT_ENTRY_LIMIT: usize = 896;\n+\n+const EXPECTED_TEST_FILE_EXTENSIONS: &[&str] = &[\n+    \"rs\",     // test source files\n+    \"stderr\", // expected stderr file, corresponds to a rs file\n+    \"stdout\", // expected stdout file, corresponds to a rs file\n+    \"fixed\",  // expected source file after applying fixes\n+    \"md\",     // test directory descriptions\n+    \"ftl\",    // translation tests\n+];\n+\n+const EXTENSION_EXCEPTION_PATHS: &[&str] = &[\n+    \"tests/ui/asm/named-asm-labels.s\", // loading an external asm file to test named labels lint\n+    \"tests/ui/check-cfg/my-awesome-platform.json\", // testing custom targets with cfgs\n+    \"tests/ui/commandline-argfile-badutf8.args\", // passing args via a file\n+    \"tests/ui/commandline-argfile.args\", // passing args via a file\n+    \"tests/ui/crate-loading/auxiliary/libfoo.rlib\", // testing loading a manually created rlib\n+    \"tests/ui/include-macros/data.bin\", // testing including data with the include macros\n+    \"tests/ui/include-macros/file.txt\", // testing including data with the include macros\n+    \"tests/ui/macros/macro-expanded-include/file.txt\", // testing including data with the include macros\n+    \"tests/ui/macros/not-utf8.bin\", // testing including data with the include macros\n+    \"tests/ui/macros/syntax-extension-source-utils-files/includeme.fragment\", // more include\n+    \"tests/ui/unused-crate-deps/test.mk\", // why would you use make\n+    \"tests/ui/proc-macro/auxiliary/included-file.txt\", // more include\n+];\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {\n     let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n@@ -66,7 +91,14 @@ pub fn check(path: &Path, bad: &mut bool) {\n     let paths = [ui.as_path(), ui_fulldeps.as_path()];\n     crate::walk::walk_no_read(&paths, |_, _| false, &mut |entry| {\n         let file_path = entry.path();\n-        if let Some(ext) = file_path.extension() {\n+        if let Some(ext) = file_path.extension().and_then(OsStr::to_str) {\n+            // files that are neither an expected extension or an exception should not exist\n+            // they're probably typos or not meant to exist\n+            if !(EXPECTED_TEST_FILE_EXTENSIONS.contains(&ext)\n+                || EXTENSION_EXCEPTION_PATHS.iter().any(|path| file_path.ends_with(path)))\n+            {\n+                tidy_error!(bad, \"file {} has unexpected extension {}\", file_path.display(), ext);\n+            }\n             if ext == \"stderr\" || ext == \"stdout\" {\n                 // Test output filenames have one of the formats:\n                 // ```"}, {"sha": "bea1aad235242575af515452dac19ea26c1250bb", "filename": "tests/codegen/addr-of-mutate.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fcodegen%2Faddr-of-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fcodegen%2Faddr-of-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Faddr-of-mutate.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -C opt-level=3 -C no-prepopulate-passes\n+// min-llvm-version: 15.0 (for opaque pointers)\n+\n+#![crate_type = \"lib\"]\n+\n+// Test for the absence of `readonly` on the argument when it is mutated via `&raw const`.\n+// See <https://github.com/rust-lang/rust/issues/111502>.\n+\n+// CHECK: i8 @foo(ptr noalias nocapture noundef dereferenceable(128) %x)\n+#[no_mangle]\n+pub fn foo(x: [u8; 128]) -> u8 {\n+    let ptr = core::ptr::addr_of!(x).cast_mut();\n+    unsafe {\n+        (*ptr)[0] = 1;\n+    }\n+    x[0]\n+}\n+\n+// CHECK: i1 @second(ptr noalias nocapture noundef dereferenceable({{[0-9]+}}) %a_ptr_and_b)\n+#[no_mangle]\n+pub unsafe fn second(a_ptr_and_b: (*mut (i32, bool), (i64, bool))) -> bool {\n+    let b_bool_ptr = core::ptr::addr_of!(a_ptr_and_b.1.1).cast_mut();\n+    (*b_bool_ptr) = true;\n+    a_ptr_and_b.1.1\n+}\n+\n+// If going through a deref (and there are no other mutating accesses), then `readonly` is fine.\n+// CHECK: i1 @third(ptr noalias nocapture noundef readonly dereferenceable({{[0-9]+}}) %a_ptr_and_b)\n+#[no_mangle]\n+pub unsafe fn third(a_ptr_and_b: (*mut (i32, bool), (i64, bool))) -> bool {\n+    let b_bool_ptr = core::ptr::addr_of!((*a_ptr_and_b.0).1).cast_mut();\n+    (*b_bool_ptr) = true;\n+    a_ptr_and_b.1.1\n+}"}, {"sha": "595969a89793babab4793c52779cb660f9b16ff7", "filename": "tests/codegen/binary-search-index-no-bound-check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -9,7 +9,9 @@\n #[no_mangle]\n pub fn binary_search_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n     if let Ok(idx) = s.binary_search(&b'\\\\') {\n         s[idx]\n     } else {"}, {"sha": "2d7797887912e004a1aad16cd64f74fe6b40786b", "filename": "tests/codegen/issues/issue-73396-bounds-check-after-position.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -9,7 +9,10 @@\n #[no_mangle]\n pub fn position_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         &s[..idx]\n     } else {\n@@ -21,7 +24,10 @@ pub fn position_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn position_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         &s[idx..]\n     } else {\n@@ -33,7 +39,10 @@ pub fn position_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn position_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         s[idx]\n     } else {\n@@ -44,7 +53,10 @@ pub fn position_index_no_bounds_check(s: &[u8]) -> u8 {\n #[no_mangle]\n pub fn rposition_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         &s[..idx]\n     } else {\n@@ -56,7 +68,10 @@ pub fn rposition_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn rposition_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         &s[idx..]\n     } else {\n@@ -68,7 +83,10 @@ pub fn rposition_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn rposition_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         s[idx]\n     } else {"}, {"sha": "85ade170ac6fddece010fc686179683ea6c82afa", "filename": "tests/debuginfo/reference-debuginfo.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fdebuginfo%2Freference-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fdebuginfo%2Freference-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Freference-debuginfo.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,173 @@\n+// Copy of `borrowed-basic.rs` which enables the `ReferencePropagation` MIR pass.\n+// That pass replaces debuginfo for `a => _x` where `_x = &b` to be `a => &b`,\n+// and leaves codegen to create a ladder of allocations so as `*a == b`.\n+//\n+// compile-flags:-g -Zmir-enable-passes=+ReferencePropagation,-ConstDebugInfo\n+// min-lldb-version: 310\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print *bool_ref\n+// gdb-check:$1 = true\n+\n+// gdb-command:print *int_ref\n+// gdb-check:$2 = -1\n+\n+// gdb-command:print/d *char_ref\n+// gdb-check:$3 = 97\n+\n+// gdb-command:print *i8_ref\n+// gdbg-check:$4 = 68 'D'\n+// gdbr-check:$4 = 68\n+\n+// gdb-command:print *i16_ref\n+// gdb-check:$5 = -16\n+\n+// gdb-command:print *i32_ref\n+// gdb-check:$6 = -32\n+\n+// gdb-command:print *i64_ref\n+// gdb-check:$7 = -64\n+\n+// gdb-command:print *uint_ref\n+// gdb-check:$8 = 1\n+\n+// gdb-command:print *u8_ref\n+// gdbg-check:$9 = 100 'd'\n+// gdbr-check:$9 = 100\n+\n+// gdb-command:print *u16_ref\n+// gdb-check:$10 = 16\n+\n+// gdb-command:print *u32_ref\n+// gdb-check:$11 = 32\n+\n+// gdb-command:print *u64_ref\n+// gdb-check:$12 = 64\n+\n+// gdb-command:print *f32_ref\n+// gdb-check:$13 = 2.5\n+\n+// gdb-command:print *f64_ref\n+// gdb-check:$14 = 3.5\n+\n+// gdb-command:print *f64_double_ref\n+// gdb-check:$15 = 3.5\n+\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print *bool_ref\n+// lldbg-check:[...]$0 = true\n+// lldbr-check:(bool) *bool_ref = true\n+\n+// lldb-command:print *int_ref\n+// lldbg-check:[...]$1 = -1\n+// lldbr-check:(isize) *int_ref = -1\n+\n+// NOTE: only rust-enabled lldb supports 32bit chars\n+// lldbr-command:print *char_ref\n+// lldbr-check:(char) *char_ref = 'a'\n+\n+// lldb-command:print *i8_ref\n+// lldbg-check:[...]$2 = 'D'\n+// lldbr-check:(i8) *i8_ref = 68\n+\n+// lldb-command:print *i16_ref\n+// lldbg-check:[...]$3 = -16\n+// lldbr-check:(i16) *i16_ref = -16\n+\n+// lldb-command:print *i32_ref\n+// lldbg-check:[...]$4 = -32\n+// lldbr-check:(i32) *i32_ref = -32\n+\n+// lldb-command:print *i64_ref\n+// lldbg-check:[...]$5 = -64\n+// lldbr-check:(i64) *i64_ref = -64\n+\n+// lldb-command:print *uint_ref\n+// lldbg-check:[...]$6 = 1\n+// lldbr-check:(usize) *uint_ref = 1\n+\n+// lldb-command:print *u8_ref\n+// lldbg-check:[...]$7 = 'd'\n+// lldbr-check:(u8) *u8_ref = 100\n+\n+// lldb-command:print *u16_ref\n+// lldbg-check:[...]$8 = 16\n+// lldbr-check:(u16) *u16_ref = 16\n+\n+// lldb-command:print *u32_ref\n+// lldbg-check:[...]$9 = 32\n+// lldbr-check:(u32) *u32_ref = 32\n+\n+// lldb-command:print *u64_ref\n+// lldbg-check:[...]$10 = 64\n+// lldbr-check:(u64) *u64_ref = 64\n+\n+// lldb-command:print *f32_ref\n+// lldbg-check:[...]$11 = 2.5\n+// lldbr-check:(f32) *f32_ref = 2.5\n+\n+// lldb-command:print *f64_ref\n+// lldbg-check:[...]$12 = 3.5\n+// lldbr-check:(f64) *f64_ref = 3.5\n+\n+// lldb-command:print *f64_double_ref\n+// lldbg-check:[...]$13 = 3.5\n+// lldbr-check:(f64) **f64_double_ref = 3.5\n+\n+#![allow(unused_variables)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+fn main() {\n+    let bool_val: bool = true;\n+    let bool_ref: &bool = &bool_val;\n+\n+    let int_val: isize = -1;\n+    let int_ref: &isize = &int_val;\n+\n+    let char_val: char = 'a';\n+    let char_ref: &char = &char_val;\n+\n+    let i8_val: i8 = 68;\n+    let i8_ref: &i8 = &i8_val;\n+\n+    let i16_val: i16 = -16;\n+    let i16_ref: &i16 = &i16_val;\n+\n+    let i32_val: i32 = -32;\n+    let i32_ref: &i32 = &i32_val;\n+\n+    let i64_val: i64 = -64;\n+    let i64_ref: &i64 = &i64_val;\n+\n+    let uint_val: usize = 1;\n+    let uint_ref: &usize = &uint_val;\n+\n+    let u8_val: u8 = 100;\n+    let u8_ref: &u8 = &u8_val;\n+\n+    let u16_val: u16 = 16;\n+    let u16_ref: &u16 = &u16_val;\n+\n+    let u32_val: u32 = 32;\n+    let u32_ref: &u32 = &u32_val;\n+\n+    let u64_val: u64 = 64;\n+    let u64_ref: &u64 = &u64_val;\n+\n+    let f32_val: f32 = 2.5;\n+    let f32_ref: &f32 = &f32_val;\n+\n+    let f64_val: f64 = 3.5;\n+    let f64_ref: &f64 = &f64_val;\n+    let f64_double_ref: &f64 = &f64_ref;\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {()}"}, {"sha": "5233d0489c63f063c6016fb58f3683cb615e4b1c", "filename": "tests/mir-opt/building/custom/projections.copy_for_deref.built.after.mir", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,12 @@\n+// MIR for `copy_for_deref` after built\n+\n+fn copy_for_deref(_1: (&i32, i32)) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:38: +0:41\n+    let mut _2: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = deref_copy (_1.0: &i32);    // scope 0 at $DIR/projections.rs:+4:13: +4:37\n+        _0 = (*_2);                      // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n+    }\n+}"}, {"sha": "3c155deae4b701700186533e43d438ad30ef564c", "filename": "tests/mir-opt/building/custom/projections.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -21,13 +21,10 @@ fn unions(u: U) -> i32 {\n #[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n fn tuples(i: (u32, i32)) -> (u32, i32) {\n     mir!(\n-        // FIXME(JakobDegen): This is necessary because we can't give type hints for `RET`\n-        let temp: (u32, i32);\n+        type RET = (u32, i32);\n         {\n-            temp.0 = i.0;\n-            temp.1 = i.1;\n-\n-            RET = temp;\n+            RET.0 = i.0;\n+            RET.1 = i.1;\n             Return()\n         }\n     )\n@@ -71,6 +68,19 @@ fn simple_index(a: [i32; 10], b: &[i32]) -> i32 {\n     })\n }\n \n+// EMIT_MIR projections.copy_for_deref.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+fn copy_for_deref(x: (&i32, i32)) -> i32 {\n+    mir!(\n+        let temp: &i32;\n+        {\n+            temp = CopyForDeref(x.0);\n+            RET = *temp;\n+            Return()\n+        }\n+    )\n+}\n+\n fn main() {\n     assert_eq!(unions(U { a: 5 }), 5);\n     assert_eq!(tuples((5, 6)), (5, 6));\n@@ -82,4 +92,7 @@ fn main() {\n     assert_eq!(o, Some(10));\n \n     assert_eq!(simple_index([0; 10], &[0; 10]), 0);\n+\n+    let one = 1;\n+    assert_eq!(copy_for_deref((&one, one)), 1);\n }"}, {"sha": "dec575200c64475bd16c5cc16b7d74f0a1dce0fa", "filename": "tests/mir-opt/building/custom/projections.tuples.built.after.mir", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -2,12 +2,10 @@\n \n fn tuples(_1: (u32, i32)) -> (u32, i32) {\n     let mut _0: (u32, i32);              // return place in scope 0 at $DIR/projections.rs:+0:29: +0:39\n-    let mut _2: (u32, i32);              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        (_2.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+5:13: +5:25\n-        (_2.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+6:13: +6:25\n-        _0 = _2;                         // scope 0 at $DIR/projections.rs:+8:13: +8:23\n-        return;                          // scope 0 at $DIR/projections.rs:+9:13: +9:21\n+        (_0.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+4:13: +4:24\n+        (_0.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n     }\n }"}, {"sha": "73b9ea46c449bbdd7845738cdd045b1b38fc83d5", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -21,9 +21,9 @@\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n           let _14: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n           scope 2 {\n-              debug v1 => _12;             // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n-              debug v2 => _13;             // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n-              debug v3 => _14;             // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n+              debug v1 => &(*_2)[0 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n+              debug v2 => &(*_2)[1 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n+              debug v3 => &(*_2)[2 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n           }\n       }\n   \n@@ -52,15 +52,6 @@\n       }\n   \n       bb2: {\n-          StorageLive(_12);                // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          _12 = &(*_2)[0 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          StorageLive(_13);                // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          _13 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          _14 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          StorageDead(_14);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_13);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_12);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n           StorageDead(_5);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2\n           StorageDead(_2);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/issue_76432.rs:+6:2: +6:2"}, {"sha": "07bd48fc84638a9bcb62dc3d61b751cac67bdd97", "filename": "tests/mir-opt/reference_prop.debuginfo.ReferencePropagation.diff", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,175 @@\n+- // MIR for `debuginfo` before ReferencePropagation\n++ // MIR for `debuginfo` after ReferencePropagation\n+  \n+  fn debuginfo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:16: +0:16\n+      let _1: &mut u8;                     // in scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+      let _4: debuginfo::T;                // in scope 0 at $DIR/reference_prop.rs:+4:18: +4:22\n+      let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:5: +12:6\n+      let mut _7: std::option::Option<i32>; // in scope 0 at $DIR/reference_prop.rs:+9:11: +9:18\n+      let mut _8: isize;                   // in scope 0 at $DIR/reference_prop.rs:+10:9: +10:13\n+      let _10: ();                         // in scope 0 at $DIR/reference_prop.rs:+16:5: +17:6\n+      let mut _11: &[i32];                 // in scope 0 at $DIR/reference_prop.rs:+16:82: +16:94\n+      let _12: &[i32];                     // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:94\n+      let mut _13: &[i32; 10];             // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let _14: [i32; 10];                  // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let mut _15: std::ops::RangeFull;    // in scope 0 at $DIR/reference_prop.rs:+16:91: +16:93\n+      let mut _16: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _17: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _18: bool;                   // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let _23: &&mut u8;                   // in scope 0 at $DIR/reference_prop.rs:+19:28: +19:40\n+      let _24: &mut u8;                    // in scope 0 at $DIR/reference_prop.rs:+19:29: +19:40\n+      let mut _25: debuginfo::T;           // in scope 0 at $DIR/reference_prop.rs:+19:34: +19:38\n+      scope 1 {\n+-         debug ref_mut_u8 => _1;          // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n++         debug ref_mut_u8 => &_2;         // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n+          let _3: &u8;                     // in scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n+          let mut _28: &debuginfo::T;      // in scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+          scope 2 {\n+-             debug field => _3;           // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n++             debug field => &((*_28).0: u8); // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n+              let _5: &u8;                 // in scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n+              scope 3 {\n+-                 debug reborrow => _5;    // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n++                 debug reborrow => &_2;   // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n+                  let _9: &i32;            // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  let _22: &&&mut u8;      // in scope 3 at $DIR/reference_prop.rs:+19:9: +19:24\n+                  let mut _27: &std::option::Option<i32>; // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  scope 4 {\n+-                     debug variant_field => _9; // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n++                     debug variant_field => &(((*_27) as Some).0: i32); // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  }\n+                  scope 5 {\n+-                     debug constant_index => _19; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n++                     debug constant_index => &(*_11)[1 of 3]; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      debug subslice => _20; // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      debug constant_index_from_end => _21; // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let _19: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      let _20: &[i32];     // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      let _21: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let mut _26: &[i32; 10]; // in scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+                  }\n+                  scope 6 {\n+-                     debug multiple_borrow => _22; // in scope 6 at $DIR/reference_prop.rs:+19:9: +19:24\n++                     debug multiple_borrow => &&&(_25.0: u8); // in scope 6 at $DIR/reference_prop.rs:+19:9: +19:24\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n+          StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+          _2 = const 5_u8;                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+-         _1 = &mut _2;                    // scope 0 at $DIR/reference_prop.rs:+3:22: +3:31\n+-         StorageLive(_3);                 // scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n+          _28 = const _;                   // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:535:17: 535:24\n+                                           // + literal: Const { ty: &T, val: Unevaluated(debuginfo, [], Some(promoted[2])) }\n+-         _3 = &((*_28).0: u8);            // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n+-         _5 = &(*_1);                     // scope 2 at $DIR/reference_prop.rs:+7:20: +7:32\n+-         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:5: +12:6\n+          StorageLive(_7);                 // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          _7 = Option::<i32>::Some(const 0_i32); // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          _8 = discriminant(_7);           // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          switchInt(move _8) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 3 at $DIR/reference_prop.rs:+9:5: +9:18\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+          _27 = const _;                   // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:542:14: 542:31\n+                                           // + literal: Const { ty: &Option<i32>, val: Unevaluated(debuginfo, [], Some(promoted[1])) }\n+-         _9 = &(((*_27) as Some).0: i32); // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+-         _6 = const ();                   // scope 4 at $DIR/reference_prop.rs:+11:36: +11:38\n+-         StorageDead(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n+          goto -> bb4;                     // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+      }\n+  \n+      bb3: {\n+-         _6 = const ();                   // scope 3 at $DIR/reference_prop.rs:+10:17: +10:19\n+          goto -> bb4;                     // scope 3 at $DIR/reference_prop.rs:+10:17: +10:19\n+      }\n+  \n+      bb4: {\n+          StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n+-         StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n+-         StorageLive(_10);                // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+          StorageLive(_11);                // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+          StorageLive(_13);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          _26 = const _;                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:547:83: 547:90\n+                                           // + literal: Const { ty: &[i32; 10], val: Unevaluated(debuginfo, [], Some(promoted[0])) }\n+          _13 = &(*_26);                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          StorageLive(_15);                // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _15 = RangeFull;                 // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _12 = <[i32; 10] as Index<RangeFull>>::index(move _13, move _15) -> bb5; // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:547:83: 547:94\n+                                           // + literal: Const { ty: for<'a> fn(&'a [i32; 10], RangeFull) -> &'a <[i32; 10] as Index<RangeFull>>::Output {<[i32; 10] as Index<RangeFull>>::index}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_15);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          StorageDead(_13);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          _11 = &(*_12);                   // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          _16 = Len((*_11));               // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _17 = const 3_usize;             // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _18 = Ge(move _16, move _17);    // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+      }\n+  \n+      bb6: {\n+-         StorageLive(_19);                // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+-         _19 = &(*_11)[1 of 3];           // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+          StorageLive(_20);                // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          _20 = &(*_11)[2:-1];             // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          StorageLive(_21);                // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+          _21 = &(*_11)[-1 of 3];          // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+-         _10 = const ();                  // scope 5 at $DIR/reference_prop.rs:+16:95: +17:6\n+          StorageDead(_21);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          StorageDead(_20);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageDead(_19);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+      }\n+  \n+      bb7: {\n+-         _10 = const ();                  // scope 3 at $DIR/reference_prop.rs:+17:6: +17:6\n+          goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+      }\n+  \n+      bb8: {\n+          StorageDead(_12);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          StorageDead(_11);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageDead(_10);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageLive(_22);                // scope 3 at $DIR/reference_prop.rs:+19:9: +19:24\n+-         StorageLive(_23);                // scope 3 at $DIR/reference_prop.rs:+19:28: +19:40\n+-         StorageLive(_24);                // scope 3 at $DIR/reference_prop.rs:+19:29: +19:40\n+          StorageLive(_25);                // scope 3 at $DIR/reference_prop.rs:+19:34: +19:38\n+          _25 = T(const 6_u8);             // scope 3 at $DIR/reference_prop.rs:+19:34: +19:38\n+-         _24 = &mut (_25.0: u8);          // scope 3 at $DIR/reference_prop.rs:+19:29: +19:40\n+-         _23 = &_24;                      // scope 3 at $DIR/reference_prop.rs:+19:28: +19:40\n+-         _22 = &_23;                      // scope 3 at $DIR/reference_prop.rs:+19:27: +19:40\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:16: +20:2\n+          StorageDead(_25);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_24);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_23);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_22);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_3);                 // scope 1 at $DIR/reference_prop.rs:+20:1: +20:2\n+          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+20:1: +20:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+20:2: +20:2\n+      }\n+  }\n+  "}, {"sha": "e158f64e9c3cfb439e8b099114417e16dbd8e790", "filename": "tests/mir-opt/reference_prop.dominate_storage.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -24,7 +24,7 @@\n           _5 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_5) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+16:13: +16:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:383:28: 383:34\n+                                           // + span: $DIR/reference_prop.rs:455:28: 455:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "38ab16cedb7cec251f31bda1d2bed62b4f2c5def", "filename": "tests/mir-opt/reference_prop.maybe_dead.ReferencePropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -29,23 +29,23 @@\n           StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+21:13: +21:27\n           _0 = opaque::<i32>(_6) -> bb2;   // scope 0 at $DIR/reference_prop.rs:+22:13: +22:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:417:28: 417:34\n+                                           // + span: $DIR/reference_prop.rs:489:28: 489:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _7 = (*_4);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_7) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+27:13: +27:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:422:28: 422:34\n+                                           // + span: $DIR/reference_prop.rs:494:28: 494:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n           _8 = (*_5);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_8) -> bb4;   // scope 0 at $DIR/reference_prop.rs:+33:13: +33:43\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:428:33: 428:39\n+                                           // + span: $DIR/reference_prop.rs:500:33: 500:39\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "6e45178687068950f70581d4ae80f49e404ece65", "filename": "tests/mir-opt/reference_prop.multiple_storage.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -16,7 +16,7 @@\n           _3 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_3) -> bb1;   // scope 0 at $DIR/reference_prop.rs:+14:13: +14:43\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:357:33: 357:39\n+                                           // + span: $DIR/reference_prop.rs:429:33: 429:39\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "d99e110359f7d1cc27de933ea391adcf281c463c", "filename": "tests/mir-opt/reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -13,13 +13,16 @@\n           debug x => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:14\n           let _2: &mut i32;                // in scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n           scope 2 {\n-              debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n+-             debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n++             debug xref => &_1;           // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n               let _3: *mut i32;            // in scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n               scope 3 {\n-                  debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n+-                 debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n++                 debug xraw => &_1;       // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n                   let _6: &i32;            // in scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n                   scope 4 {\n-                      debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n+-                     debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n++                     debug xshr => &_1;   // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n                       let _7: i32;         // in scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n                       scope 5 {\n                           debug a => _7;   // in scope 5 at $DIR/reference_prop.rs:+6:9: +6:10\n@@ -35,19 +38,17 @@\n           StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:14\n           _1 = const 2_i32;                // scope 0 at $DIR/reference_prop.rs:+1:17: +1:18\n -         StorageLive(_2);                 // scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n-          _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n-          StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n+-         _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n+-         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n -         StorageLive(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _5 = &mut (*_2);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _4 = &raw mut (*_5);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-+         _4 = &raw mut _1;                // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-          _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n+-         _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n -         StorageDead(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n-          StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n+-         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n -         _6 = &(*_2);                     // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n-+         _6 = &_1;                        // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n           StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n -         _7 = (*_6);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n -         StorageLive(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:5: +7:26\n@@ -64,8 +65,8 @@\n           StorageDead(_10);                // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n           StorageDead(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+9:1: +9:2\n-          StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n-          StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n -         StorageDead(_2);                 // scope 1 at $DIR/reference_prop.rs:+9:1: +9:2\n           StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+9:1: +9:2\n           return;                          // scope 0 at $DIR/reference_prop.rs:+9:2: +9:2"}, {"sha": "7b31ee695cecc54575cc1133f4691c6dd4f440d5", "filename": "tests/mir-opt/reference_prop.reference_propagation.ReferencePropagation.diff", "status": "modified", "additions": 158, "deletions": 58, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -17,12 +17,12 @@\n       let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n       let _19: usize;                      // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:14\n-      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _24: &&usize;                // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n       let _26: usize;                      // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:14\n-      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _31: *mut &usize;            // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _33: usize;                      // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:14\n       let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n@@ -35,16 +35,25 @@\n       let _48: &T;                         // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n       let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let _52: &T;                         // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-      let mut _53: &T;                     // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n-      let _54: &T;                         // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n-      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _52: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let _53: &T;                         // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+      let mut _54: &T;                     // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _55: &T;                         // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _58: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _59: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _60: usize;                      // in scope 0 at $DIR/reference_prop.rs:+76:13: +76:14\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _65: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _66: usize;                      // in scope 0 at $DIR/reference_prop.rs:+85:13: +85:14\n+      let _70: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _71: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           let _5: &usize;                  // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-             debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n++             debug b => &_4;              // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n               scope 3 {\n                   debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -86,7 +95,7 @@\n           let mut _27: &usize;             // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           scope 13 {\n               debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n-              let _28: &mut &usize;        // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              let _28: *mut &usize;        // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n               scope 14 {\n                   debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n                   let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -131,26 +140,61 @@\n           }\n       }\n       scope 25 {\n-          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n++         debug a => _1;                   // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n           let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n           scope 26 {\n               debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n           }\n       }\n       scope 27 {\n-          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n-          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          debug a => _53;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _56: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n           scope 28 {\n-              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug b => _56;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+      scope 29 {\n+          debug a => _60;                  // in scope 29 at $DIR/reference_prop.rs:+76:13: +76:14\n+          let _61: &usize;                 // in scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+          scope 30 {\n+-             debug b => _61;              // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n++             debug b => &_60;             // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n+              let _62: &&usize;            // in scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+              scope 31 {\n+-                 debug d => _62;          // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n++                 debug d => &&_60;        // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  let _63: usize;          // in scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  scope 32 {\n+                      debug c => _63;      // in scope 32 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 33 {\n+          debug a => _66;                  // in scope 33 at $DIR/reference_prop.rs:+85:13: +85:14\n+          let mut _67: &usize;             // in scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+          scope 34 {\n+-             debug b => _67;              // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n++             debug b => &_66;             // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n+              let _68: &mut &usize;        // in scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+              scope 35 {\n+-                 debug d => _68;          // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n++                 debug d => &&_66;        // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  let _69: usize;          // in scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  scope 36 {\n+                      debug c => _69;      // in scope 36 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  }\n+              }\n           }\n       }\n   \n       bb0: {\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:14\n           _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:17: +3:24\n-          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &_4;                        // scope 1 at $DIR/reference_prop.rs:+4:17: +4:19\n+-         StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &_4;                        // scope 1 at $DIR/reference_prop.rs:+4:17: +4:19\n           StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -168,7 +212,7 @@\n           StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -215,18 +259,18 @@\n           _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n           _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _24 = _21;                       // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = opaque::<&&usize>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:36:9: 36:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(&&usize) {opaque::<&&usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -239,21 +283,21 @@\n           StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           _27 = &_26;                      // scope 12 at $DIR/reference_prop.rs:+32:21: +32:23\n           StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _28 = &raw mut _27;              // scope 13 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n           _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _31 = _28;                       // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = opaque::<*mut &usize>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:45:9: 45:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(*mut &usize) {opaque::<*mut &usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -321,8 +365,8 @@\n           StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _48 = &(*_1);                    // scope 0 at $DIR/reference_prop.rs:+61:17: +61:25\n+-         StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _48 = &(*_1);                    // scope 0 at $DIR/reference_prop.rs:+61:17: +61:25\n           StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -340,36 +384,92 @@\n           StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _52 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27\n-          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         _54 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         _53 = &(*_54);                   // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n-+         _53 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n-          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:28\n-          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:27: +69:28\n--         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:28: +69:29\n-          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_53);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _53 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27\n+          StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _55 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _54 = &(*_55);                   // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n++         _54 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+          _2 = move _54;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:28\n+          StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:27: +69:28\n+-         StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+69:28: +69:29\n+          StorageLive(_56);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _56 = (*_53);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_58);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _58 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = opaque::<()>(move _58) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:81:9: 81:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_58);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _52 = const ();                  // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_56);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_53);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_59);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_60);                // scope 0 at $DIR/reference_prop.rs:+76:13: +76:14\n+          _60 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+76:17: +76:24\n+-         StorageLive(_61);                // scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _61 = &_60;                      // scope 29 at $DIR/reference_prop.rs:+77:17: +77:19\n+-         StorageLive(_62);                // scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _62 = &_61;                      // scope 30 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_63);                // scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _63 = (*_61);                    // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _63 = _60;                       // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_64);                // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_65);                // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _65 = ();                        // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _64 = opaque::<()>(move _65) -> bb9; // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:90:9: 90:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_65);                // scope 32 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_64);                // scope 32 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _59 = const ();                  // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_63);                // scope 31 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_62);                // scope 30 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_61);                // scope 29 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_60);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_66);                // scope 0 at $DIR/reference_prop.rs:+85:13: +85:14\n+          _66 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+85:17: +85:24\n+-         StorageLive(_67);                // scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _67 = &_66;                      // scope 33 at $DIR/reference_prop.rs:+86:21: +86:23\n+-         StorageLive(_68);                // scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _68 = &mut _67;                  // scope 34 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_69);                // scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _69 = (*_67);                    // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _69 = _66;                       // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_70);                // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_71);                // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _71 = ();                        // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = opaque::<()>(move _71) -> bb10; // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:99:9: 99:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_71);                // scope 36 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_70);                // scope 36 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_69);                // scope 35 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_68);                // scope 34 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 33 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_66);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "ddeb04e50c79d956c69ec9ba98d4362c18c21394", "filename": "tests/mir-opt/reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "status": "modified", "additions": 174, "deletions": 69, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -13,11 +13,11 @@\n       let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n       let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n-      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _23: &*const usize;          // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n-      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _30: *mut *const usize;      // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n       let mut _36: *const usize;           // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n@@ -31,15 +31,22 @@\n       let mut _53: *const T;               // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:38\n       let _55: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n       let mut _56: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n-      let _61: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n-      let mut _62: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _62: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _63: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+      let _69: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _70: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n+      let _75: ();                         // in scope 0 at $DIR/reference_prop.rs:+98:9: +98:19\n+      let mut _76: ();                     // in scope 0 at $DIR/reference_prop.rs:+98:16: +98:18\n       scope 1 {\n           let _4: usize;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           scope 2 {\n               debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n               let _5: *const usize;        // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               scope 3 {\n-                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+-                 debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n++                 debug b => &_4;          // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n                   let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n                   scope 4 {\n                       debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -90,7 +97,7 @@\n               let mut _26: *const usize;   // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n               scope 17 {\n                   debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n-                  let _27: &mut *const usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _27: *mut *const usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n                   scope 18 {\n                       debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n                       let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -144,7 +151,8 @@\n       scope 31 {\n           let _47: *const T;               // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n           scope 32 {\n-              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+-             debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n++             debug a => _1;               // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n               let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n               scope 33 {\n                   debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n@@ -162,18 +170,60 @@\n           }\n       }\n       scope 37 {\n-          let _57: usize;                  // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          let _58: usize;                  // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n           scope 38 {\n-              debug a => _57;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n-              let _58: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+              debug a => _58;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n+              let _59: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n               scope 39 {\n-                  debug b => _58;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n-                  let _59: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-                 debug b => _59;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n++                 debug b => &_58;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+                  let _60: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n                   scope 40 {\n-                      debug c => _59;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n-                      let _60: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-                     debug c => _60;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n++                     debug c => &_58;     // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+                      let _61: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n                       scope 41 {\n-                          debug e => _60;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                          debug e => _61;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 42 {\n+          let _65: usize;                  // in scope 42 at $DIR/reference_prop.rs:+85:13: +85:14\n+          scope 43 {\n+              debug a => _65;              // in scope 43 at $DIR/reference_prop.rs:+85:13: +85:14\n+              let _66: *const usize;       // in scope 43 at $DIR/reference_prop.rs:+86:13: +86:14\n+              scope 44 {\n+-                 debug b => _66;          // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:14\n++                 debug b => &_65;         // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:14\n+                  let _67: &*const usize;  // in scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  scope 45 {\n+-                     debug d => _67;      // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n++                     debug d => &&_65;    // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n+                      let _68: usize;      // in scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      scope 46 {\n+                          debug c => _68;  // in scope 46 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 47 {\n+          let _71: usize;                  // in scope 47 at $DIR/reference_prop.rs:+94:13: +94:14\n+          scope 48 {\n+              debug a => _71;              // in scope 48 at $DIR/reference_prop.rs:+94:13: +94:14\n+              let mut _72: *const usize;   // in scope 48 at $DIR/reference_prop.rs:+95:13: +95:18\n+              scope 49 {\n+-                 debug b => _72;          // in scope 49 at $DIR/reference_prop.rs:+95:13: +95:18\n++                 debug b => &_71;         // in scope 49 at $DIR/reference_prop.rs:+95:13: +95:18\n+                  let _73: &mut *const usize; // in scope 49 at $DIR/reference_prop.rs:+96:13: +96:14\n+                  scope 50 {\n+-                     debug d => _73;      // in scope 50 at $DIR/reference_prop.rs:+96:13: +96:14\n++                     debug d => &&_71;    // in scope 50 at $DIR/reference_prop.rs:+96:13: +96:14\n+                      let _74: usize;      // in scope 50 at $DIR/reference_prop.rs:+97:13: +97:14\n+                      scope 51 {\n+                          debug c => _74;  // in scope 51 at $DIR/reference_prop.rs:+97:13: +97:14\n                       }\n                   }\n               }\n@@ -184,8 +234,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:17: +3:24\n-          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &raw const _4;              // scope 2 at $DIR/reference_prop.rs:+4:17: +4:29\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &raw const _4;              // scope 2 at $DIR/reference_prop.rs:+4:17: +4:29\n           StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -194,7 +244,7 @@\n           _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:166:9: 166:15\n+                                           // + span: $DIR/reference_prop.rs:202:9: 202:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -203,7 +253,7 @@\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -224,7 +274,7 @@\n           _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n           _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:177:9: 177:15\n+                                           // + span: $DIR/reference_prop.rs:213:9: 213:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -246,18 +296,18 @@\n           _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n           _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _22 = opaque::<&*const usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:186:9: 186:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:222:9: 222:15\n+                                           // + literal: Const { ty: fn(&*const usize) {opaque::<&*const usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -270,21 +320,21 @@\n           StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n           _26 = &raw const _25;            // scope 16 at $DIR/reference_prop.rs:+32:21: +32:33\n           StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _27 = &raw mut _26;              // scope 17 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n           _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _29 = opaque::<*mut *const usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:195:9: 195:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:231:9: 231:15\n+                                           // + literal: Const { ty: fn(*mut *const usize) {opaque::<*mut *const usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -304,7 +354,7 @@\n           _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n           _35 = opaque::<*const usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:203:9: 203:15\n+                                           // + span: $DIR/reference_prop.rs:239:9: 239:15\n                                            // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -336,7 +386,7 @@\n           _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n           _44 = opaque::<*const usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:216:9: 216:15\n+                                           // + span: $DIR/reference_prop.rs:252:9: 252:15\n                                            // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -352,8 +402,8 @@\n           StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _47 = &raw const (*_1);          // scope 31 at $DIR/reference_prop.rs:+61:17: +61:35\n+-         StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _47 = &raw const (*_1);          // scope 31 at $DIR/reference_prop.rs:+61:17: +61:35\n           StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -362,7 +412,7 @@\n           _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n           _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:223:9: 223:15\n+                                           // + span: $DIR/reference_prop.rs:259:9: 259:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -371,7 +421,7 @@\n           StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageLive(_51);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n           StorageLive(_52);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n@@ -387,7 +437,7 @@\n           _56 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n           _55 = opaque::<()>(move _56) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:231:9: 231:15\n+                                           // + span: $DIR/reference_prop.rs:267:9: 267:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -398,34 +448,89 @@\n           StorageDead(_54);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n           StorageDead(_52);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n -         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageLive(_57);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n-          _57 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n-          StorageLive(_58);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n-          _58 = &raw const _57;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n-          StorageLive(_59);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n--         _59 = &raw const (*_58);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n-+         _59 = &raw const _57;            // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n-          StorageLive(_60);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n--         _60 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n-+         _60 = _57;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n-          StorageLive(_61);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n-          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n-          _62 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n-          _61 = opaque::<()>(move _62) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+-         StorageLive(_57);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_58);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          _58 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n+-         StorageLive(_59);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _59 = &raw const _58;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n+-         StorageLive(_60);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _60 = &raw const (*_59);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n+          StorageLive(_61);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _61 = (*_60);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _61 = _58;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_63);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _63 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _62 = opaque::<()>(move _63) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:240:9: 240:15\n+                                           // + span: $DIR/reference_prop.rs:276:9: 276:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {\n-          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n-          StorageDead(_61);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n-          _0 = const ();                   // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n-          StorageDead(_60);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_59);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_58);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_57);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+82:2: +82:2\n+          StorageDead(_63);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _57 = const ();                  // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_61);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_60);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_58);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_57);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageLive(_64);                // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageLive(_65);                // scope 42 at $DIR/reference_prop.rs:+85:13: +85:14\n+          _65 = const 5_usize;             // scope 42 at $DIR/reference_prop.rs:+85:17: +85:24\n+-         StorageLive(_66);                // scope 43 at $DIR/reference_prop.rs:+86:13: +86:14\n+-         _66 = &raw const _65;            // scope 43 at $DIR/reference_prop.rs:+86:17: +86:29\n+-         StorageLive(_67);                // scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _67 = &_66;                      // scope 44 at $DIR/reference_prop.rs:+87:17: +87:19\n+          StorageLive(_68);                // scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _68 = (*_66);                    // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _68 = _65;                       // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_69);                // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_70);                // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = ();                        // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _69 = opaque::<()>(move _70) -> bb10; // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:285:9: 285:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_70);                // scope 46 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_69);                // scope 46 at $DIR/reference_prop.rs:+89:19: +89:20\n+-         _64 = const ();                  // scope 42 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_68);                // scope 45 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 44 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_66);                // scope 43 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_65);                // scope 42 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_64);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageLive(_71);                // scope 47 at $DIR/reference_prop.rs:+94:13: +94:14\n+          _71 = const 5_usize;             // scope 47 at $DIR/reference_prop.rs:+94:17: +94:24\n+-         StorageLive(_72);                // scope 48 at $DIR/reference_prop.rs:+95:13: +95:18\n+-         _72 = &raw const _71;            // scope 48 at $DIR/reference_prop.rs:+95:21: +95:33\n+-         StorageLive(_73);                // scope 49 at $DIR/reference_prop.rs:+96:13: +96:14\n+-         _73 = &mut _72;                  // scope 49 at $DIR/reference_prop.rs:+96:17: +96:23\n+          StorageLive(_74);                // scope 50 at $DIR/reference_prop.rs:+97:13: +97:14\n+-         _74 = (*_72);                    // scope 50 at $DIR/reference_prop.rs:+97:17: +97:19\n++         _74 = _71;                       // scope 50 at $DIR/reference_prop.rs:+97:17: +97:19\n+          StorageLive(_75);                // scope 51 at $DIR/reference_prop.rs:+98:9: +98:19\n+          StorageLive(_76);                // scope 51 at $DIR/reference_prop.rs:+98:16: +98:18\n+          _76 = ();                        // scope 51 at $DIR/reference_prop.rs:+98:16: +98:18\n+          _75 = opaque::<()>(move _76) -> bb11; // scope 51 at $DIR/reference_prop.rs:+98:9: +98:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:294:9: 294:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb11: {\n+          StorageDead(_76);                // scope 51 at $DIR/reference_prop.rs:+98:18: +98:19\n+          StorageDead(_75);                // scope 51 at $DIR/reference_prop.rs:+98:19: +98:20\n+          _0 = const ();                   // scope 47 at $DIR/reference_prop.rs:+93:5: +99:6\n+          StorageDead(_74);                // scope 50 at $DIR/reference_prop.rs:+99:5: +99:6\n+-         StorageDead(_73);                // scope 49 at $DIR/reference_prop.rs:+99:5: +99:6\n+-         StorageDead(_72);                // scope 48 at $DIR/reference_prop.rs:+99:5: +99:6\n+          StorageDead(_71);                // scope 47 at $DIR/reference_prop.rs:+99:5: +99:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+100:2: +100:2\n       }\n   }\n   "}, {"sha": "8d059de5b875577427f1354e5b4c8c39093dd354", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut.ReferencePropagation.diff", "status": "modified", "additions": 165, "deletions": 65, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -17,12 +17,12 @@\n       let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n       let mut _19: usize;                  // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:18\n-      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _24: &&mut usize;            // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n       let mut _26: usize;                  // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:18\n-      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _31: *mut &mut usize;        // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let mut _33: usize;                  // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:18\n       let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n@@ -35,16 +35,25 @@\n       let _48: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n       let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let _52: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-      let mut _53: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let _52: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let _53: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n       let mut _54: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n-      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let mut _55: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _58: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _59: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let mut _60: usize;                  // in scope 0 at $DIR/reference_prop.rs:+76:13: +76:18\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _65: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let mut _66: usize;                  // in scope 0 at $DIR/reference_prop.rs:+85:13: +85:18\n+      let _70: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _71: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           let _5: &mut usize;              // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-             debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n++             debug b => &_4;              // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n               scope 3 {\n                   debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -86,7 +95,7 @@\n           let mut _27: &mut usize;         // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           scope 13 {\n               debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n-              let _28: &mut &mut usize;    // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              let _28: *mut &mut usize;    // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n               scope 14 {\n                   debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n                   let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -131,26 +140,61 @@\n           }\n       }\n       scope 25 {\n-          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n++         debug a => _1;                   // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n           let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n           scope 26 {\n               debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n           }\n       }\n       scope 27 {\n-          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n-          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          debug a => _53;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _56: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n           scope 28 {\n-              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug b => _56;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+      scope 29 {\n+          debug a => _60;                  // in scope 29 at $DIR/reference_prop.rs:+76:13: +76:18\n+          let _61: &mut usize;             // in scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+          scope 30 {\n+-             debug b => _61;              // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n++             debug b => &_60;             // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n+              let _62: &&mut usize;        // in scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+              scope 31 {\n+-                 debug d => _62;          // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n++                 debug d => &&_60;        // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  let _63: usize;          // in scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  scope 32 {\n+                      debug c => _63;      // in scope 32 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 33 {\n+          debug a => _66;                  // in scope 33 at $DIR/reference_prop.rs:+85:13: +85:18\n+          let mut _67: &mut usize;         // in scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+          scope 34 {\n+-             debug b => _67;              // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n++             debug b => &_66;             // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n+              let _68: &mut &mut usize;    // in scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+              scope 35 {\n+-                 debug d => _68;          // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n++                 debug d => &&_66;        // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  let _69: usize;          // in scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  scope 36 {\n+                      debug c => _69;      // in scope 36 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  }\n+              }\n           }\n       }\n   \n       bb0: {\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:18\n           _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:21: +3:28\n-          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &mut _4;                    // scope 1 at $DIR/reference_prop.rs:+4:17: +4:23\n+-         StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &mut _4;                    // scope 1 at $DIR/reference_prop.rs:+4:17: +4:23\n           StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -159,7 +203,7 @@\n           _8 = ();                         // scope 3 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 3 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:91:9: 91:15\n+                                           // + span: $DIR/reference_prop.rs:109:9: 109:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -168,7 +212,7 @@\n           StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -193,7 +237,7 @@\n           _17 = ();                        // scope 7 at $DIR/reference_prop.rs:+17:16: +17:18\n           _16 = opaque::<()>(move _17) -> bb2; // scope 7 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:102:9: 102:15\n+                                           // + span: $DIR/reference_prop.rs:120:9: 120:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -215,18 +259,18 @@\n           _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n           _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _24 = _21;                       // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = opaque::<&&mut usize>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:111:9: 111:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:129:9: 129:15\n+                                           // + literal: Const { ty: fn(&&mut usize) {opaque::<&&mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -239,21 +283,21 @@\n           StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           _27 = &mut _26;                  // scope 12 at $DIR/reference_prop.rs:+32:21: +32:27\n           StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _28 = &raw mut _27;              // scope 13 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n           _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _31 = _28;                       // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = opaque::<*mut &mut usize>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:120:9: 120:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:138:9: 138:15\n+                                           // + literal: Const { ty: fn(*mut &mut usize) {opaque::<*mut &mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -272,7 +316,7 @@\n           _37 = move _34;                  // scope 18 at $DIR/reference_prop.rs:+43:16: +43:17\n           _36 = opaque::<&mut usize>(move _37) -> bb5; // scope 18 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:128:9: 128:15\n+                                           // + span: $DIR/reference_prop.rs:146:9: 146:15\n                                            // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -302,7 +346,7 @@\n           _46 = move _44;                  // scope 24 at $DIR/reference_prop.rs:+56:16: +56:18\n           _45 = opaque::<&mut usize>(move _46) -> bb6; // scope 24 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:141:9: 141:15\n+                                           // + span: $DIR/reference_prop.rs:159:9: 159:15\n                                            // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -318,8 +362,8 @@\n           StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _48 = &mut (*_1);                // scope 0 at $DIR/reference_prop.rs:+61:17: +61:29\n+-         StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _48 = &mut (*_1);                // scope 0 at $DIR/reference_prop.rs:+61:17: +61:29\n           StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -328,7 +372,7 @@\n           _51 = ();                        // scope 26 at $DIR/reference_prop.rs:+63:16: +63:18\n           _50 = opaque::<()>(move _51) -> bb7; // scope 26 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:148:9: 148:15\n+                                           // + span: $DIR/reference_prop.rs:166:9: 166:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -337,36 +381,92 @@\n           StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _52 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31\n-          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         _54 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         _53 = &mut (*_54);               // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n-+         _53 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n-          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:32\n-          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:31: +69:32\n--         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:32: +69:33\n-          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_53);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _53 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31\n+          StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _55 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _54 = &mut (*_55);               // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n++         _54 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+          _2 = move _54;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:32\n+          StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:31: +69:32\n+-         StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+69:32: +69:33\n+          StorageLive(_56);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _56 = (*_53);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_58);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _58 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = opaque::<()>(move _58) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:156:9: 156:15\n+                                           // + span: $DIR/reference_prop.rs:174:9: 174:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_58);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _52 = const ();                  // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_56);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_53);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_59);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_60);                // scope 0 at $DIR/reference_prop.rs:+76:13: +76:18\n+          _60 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+76:21: +76:28\n+-         StorageLive(_61);                // scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _61 = &mut _60;                  // scope 29 at $DIR/reference_prop.rs:+77:17: +77:23\n+-         StorageLive(_62);                // scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _62 = &_61;                      // scope 30 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_63);                // scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _63 = (*_61);                    // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _63 = _60;                       // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_64);                // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_65);                // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _65 = ();                        // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _64 = opaque::<()>(move _65) -> bb9; // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:183:9: 183:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_65);                // scope 32 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_64);                // scope 32 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _59 = const ();                  // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_63);                // scope 31 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_62);                // scope 30 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_61);                // scope 29 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_60);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_66);                // scope 0 at $DIR/reference_prop.rs:+85:13: +85:18\n+          _66 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+85:21: +85:28\n+-         StorageLive(_67);                // scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _67 = &mut _66;                  // scope 33 at $DIR/reference_prop.rs:+86:21: +86:27\n+-         StorageLive(_68);                // scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _68 = &mut _67;                  // scope 34 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_69);                // scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _69 = (*_67);                    // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _69 = _66;                       // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_70);                // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_71);                // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _71 = ();                        // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = opaque::<()>(move _71) -> bb10; // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:192:9: 192:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_71);                // scope 36 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_70);                // scope 36 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_69);                // scope 35 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_68);                // scope 34 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 33 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_66);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "c93aa52be111ab311351c3e12a29bec37f8a364e", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "status": "modified", "additions": 165, "deletions": 61, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -13,11 +13,11 @@\n       let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n       let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n-      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _23: &*mut usize;            // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n-      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _30: *mut *mut usize;        // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n       let mut _36: *mut usize;             // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n@@ -27,16 +27,23 @@\n       let _46: ();                         // in scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n       let _49: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _50: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let mut _52: *mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:36\n-      let _54: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _55: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _51: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let mut _53: *mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:36\n+      let _55: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _56: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _62: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _63: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _68: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _69: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           let mut _4: usize;               // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           scope 2 {\n               debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:18\n               let _5: *mut usize;          // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               scope 3 {\n-                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+-                 debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n++                 debug b => &_4;          // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n                   let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n                   scope 4 {\n                       debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -87,7 +94,7 @@\n               let mut _26: *mut usize;     // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n               scope 17 {\n                   debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n-                  let _27: &mut *mut usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _27: *mut *mut usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n                   scope 18 {\n                       debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n                       let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -141,20 +148,61 @@\n       scope 31 {\n           let _47: *mut T;                 // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n           scope 32 {\n-              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+-             debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n++             debug a => _1;               // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n               let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n               scope 33 {\n                   debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n               }\n           }\n       }\n       scope 34 {\n-          let _51: *mut T;                 // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _52: *mut T;                 // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n           scope 35 {\n-              debug a => _51;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n-              let _53: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug a => _52;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n+              let _54: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n               scope 36 {\n-                  debug b => _53;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+                  debug b => _54;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+              }\n+          }\n+      }\n+      scope 37 {\n+          let mut _58: usize;              // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:18\n+          scope 38 {\n+              debug a => _58;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:18\n+              let _59: *mut usize;         // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+              scope 39 {\n+-                 debug b => _59;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n++                 debug b => &_58;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+                  let _60: &*mut usize;    // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  scope 40 {\n+-                     debug d => _60;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n++                     debug d => &&_58;    // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+                      let _61: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      scope 41 {\n+                          debug c => _61;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 42 {\n+          let mut _64: usize;              // in scope 42 at $DIR/reference_prop.rs:+85:13: +85:18\n+          scope 43 {\n+              debug a => _64;              // in scope 43 at $DIR/reference_prop.rs:+85:13: +85:18\n+              let mut _65: *mut usize;     // in scope 43 at $DIR/reference_prop.rs:+86:13: +86:18\n+              scope 44 {\n+-                 debug b => _65;          // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:18\n++                 debug b => &_64;         // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:18\n+                  let _66: &mut *mut usize; // in scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  scope 45 {\n+-                     debug d => _66;      // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n++                     debug d => &&_64;    // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n+                      let _67: usize;      // in scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      scope 46 {\n+                          debug c => _67;  // in scope 46 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      }\n+                  }\n               }\n           }\n       }\n@@ -163,8 +211,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:21: +3:28\n-          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &raw mut _4;                // scope 2 at $DIR/reference_prop.rs:+4:17: +4:27\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &raw mut _4;                // scope 2 at $DIR/reference_prop.rs:+4:17: +4:27\n           StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -173,7 +221,7 @@\n           _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:250:9: 250:15\n+                                           // + span: $DIR/reference_prop.rs:304:9: 304:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -182,7 +230,7 @@\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -203,7 +251,7 @@\n           _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n           _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:261:9: 261:15\n+                                           // + span: $DIR/reference_prop.rs:315:9: 315:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -225,18 +273,18 @@\n           _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n           _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _22 = opaque::<&*mut usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:270:9: 270:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:324:9: 324:15\n+                                           // + literal: Const { ty: fn(&*mut usize) {opaque::<&*mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -249,21 +297,21 @@\n           StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n           _26 = &raw mut _25;              // scope 16 at $DIR/reference_prop.rs:+32:21: +32:31\n           StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _27 = &raw mut _26;              // scope 17 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n           _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _29 = opaque::<*mut *mut usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:279:9: 279:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:333:9: 333:15\n+                                           // + literal: Const { ty: fn(*mut *mut usize) {opaque::<*mut *mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -282,7 +330,7 @@\n           _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n           _35 = opaque::<*mut usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:287:9: 287:15\n+                                           // + span: $DIR/reference_prop.rs:341:9: 341:15\n                                            // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -312,7 +360,7 @@\n           _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n           _44 = opaque::<*mut usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:300:9: 300:15\n+                                           // + span: $DIR/reference_prop.rs:354:9: 354:15\n                                            // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -328,8 +376,8 @@\n           StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _47 = &raw mut (*_1);            // scope 31 at $DIR/reference_prop.rs:+61:17: +61:33\n+-         StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _47 = &raw mut (*_1);            // scope 31 at $DIR/reference_prop.rs:+61:17: +61:33\n           StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -338,7 +386,7 @@\n           _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n           _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:307:9: 307:15\n+                                           // + span: $DIR/reference_prop.rs:361:9: 361:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -347,32 +395,88 @@\n           StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_51);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _51 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35\n-          StorageLive(_52);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n-          _52 = &raw mut (*_1);            // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n-          _2 = move _52;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:36\n-          StorageDead(_52);                // scope 35 at $DIR/reference_prop.rs:+69:35: +69:36\n-          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _53 = (*_51);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_54);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _55 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _54 = opaque::<()>(move _55) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_51);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_52);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _52 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35\n+          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _53 = &raw mut (*_1);            // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _2 = move _53;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:36\n+          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+69:35: +69:36\n+          StorageLive(_54);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _54 = (*_52);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_56);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _56 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _55 = opaque::<()>(move _56) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:315:9: 315:15\n+                                           // + span: $DIR/reference_prop.rs:369:9: 369:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_54);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_51);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_56);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _51 = const ();                  // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_54);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_52);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_57);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_58);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:18\n+          _58 = const 5_usize;             // scope 37 at $DIR/reference_prop.rs:+76:21: +76:28\n+-         StorageLive(_59);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _59 = &raw mut _58;              // scope 38 at $DIR/reference_prop.rs:+77:17: +77:27\n+-         StorageLive(_60);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _60 = &_59;                      // scope 39 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_61);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _61 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _61 = _58;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_63);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _63 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _62 = opaque::<()>(move _63) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:378:9: 378:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_63);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _57 = const ();                  // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_61);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_60);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_58);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_57);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_64);                // scope 42 at $DIR/reference_prop.rs:+85:13: +85:18\n+          _64 = const 5_usize;             // scope 42 at $DIR/reference_prop.rs:+85:21: +85:28\n+-         StorageLive(_65);                // scope 43 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _65 = &raw mut _64;              // scope 43 at $DIR/reference_prop.rs:+86:21: +86:31\n+-         StorageLive(_66);                // scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _66 = &mut _65;                  // scope 44 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_67);                // scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _67 = (*_65);                    // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _67 = _64;                       // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_68);                // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_69);                // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _69 = ();                        // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _68 = opaque::<()>(move _69) -> bb10; // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:387:9: 387:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_69);                // scope 46 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_68);                // scope 46 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 42 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_67);                // scope 45 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_66);                // scope 44 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_65);                // scope 43 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_64);                // scope 42 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "4083b45470b4f3bbe2fadf759dd285aa1aabccff", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 121, "deletions": 12, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -33,16 +33,16 @@ fn reference_propagation<'a, T: Copy>(single: &'a T, mut multiple: &'a T) {\n         let b = &a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but do not propagate it\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     {\n         let a = 5_usize;\n         let mut b = &a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -80,6 +80,24 @@ fn reference_propagation<'a, T: Copy>(single: &'a T, mut multiple: &'a T) {\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let b = &a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let mut b = &a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a mut T) {\n@@ -108,16 +126,16 @@ fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a m\n         let b = &mut a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     {\n         let mut a = 5_usize;\n         let mut b = &mut a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -155,6 +173,24 @@ fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a m\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let b = &mut a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let mut b = &mut a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *const T) {\n@@ -183,16 +219,16 @@ fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *con\n         let b = &raw const a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     unsafe {\n         let a = 5_usize;\n         let mut b = &raw const a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -239,6 +275,24 @@ fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *con\n         let e = *c;\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let b = &raw const a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let mut b = &raw const a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T) {\n@@ -267,16 +321,16 @@ fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T)\n         let b = &raw mut a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     unsafe {\n         let mut a = 5_usize;\n         let mut b = &raw mut a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -314,6 +368,24 @@ fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T)\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let b = &raw mut a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let mut b = &raw mut a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n #[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n@@ -456,6 +528,40 @@ fn unique_with_copies() {\n     unsafe { opaque(*y) };\n }\n \n+fn debuginfo() {\n+    struct T(u8);\n+\n+    let ref_mut_u8 = &mut 5_u8;\n+    let field = &T(0).0;\n+\n+    // Verify that we don't emit `&*` in debuginfo.\n+    let reborrow = &*ref_mut_u8;\n+\n+    match Some(0) {\n+        None => {}\n+        Some(ref variant_field) => {}\n+    }\n+\n+    // `constant_index_from_end` and `subslice` should not be promoted, as their value depends\n+    // on the slice length.\n+    if let [_, ref constant_index, subslice @ .., ref constant_index_from_end] = &[6; 10][..] {\n+    }\n+\n+    let multiple_borrow = &&&mut T(6).0;\n+}\n+\n+fn many_debuginfo() {\n+    let a = 0;\n+\n+    // Verify that we do not ICE on deeply nested borrows.\n+    let many_borrow =\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&a;\n+}\n+\n fn main() {\n     let mut x = 5_usize;\n     let mut y = 7_usize;\n@@ -469,6 +575,8 @@ fn main() {\n     maybe_dead(true);\n     mut_raw_then_mut_shr();\n     unique_with_copies();\n+    debuginfo();\n+    many_debuginfo();\n }\n \n // EMIT_MIR reference_prop.reference_propagation.ReferencePropagation.diff\n@@ -481,3 +589,4 @@ fn main() {\n // EMIT_MIR reference_prop.maybe_dead.ReferencePropagation.diff\n // EMIT_MIR reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff\n // EMIT_MIR reference_prop.unique_with_copies.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.debuginfo.ReferencePropagation.diff"}, {"sha": "b754aff47550d9c6544f32d9896d13e087370749", "filename": "tests/mir-opt/reference_prop.unique_with_copies.ReferencePropagation.diff", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -10,7 +10,8 @@\n       let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:14: +9:24\n       let mut _7: i32;                     // in scope 0 at $DIR/reference_prop.rs:+9:21: +9:23\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n+-         debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n++         debug y => _3;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n           scope 5 {\n           }\n       }\n@@ -25,7 +26,7 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n+-         StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+2:13: +2:18\n           _2 = const 0_i32;                // scope 0 at $DIR/reference_prop.rs:+2:21: +2:22\n -         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n@@ -35,14 +36,14 @@\n           _5 = (*_3);                      // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n           _4 = opaque::<i32>(move _5) -> bb1; // scope 4 at $DIR/reference_prop.rs:+5:18: +5:28\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:452:18: 452:24\n+                                           // + span: $DIR/reference_prop.rs:524:18: 524:24\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           StorageDead(_5);                 // scope 4 at $DIR/reference_prop.rs:+5:27: +5:28\n           StorageDead(_4);                 // scope 3 at $DIR/reference_prop.rs:+5:30: +5:31\n-          _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n+-         _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n -         StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageLive(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:5: +9:26\n@@ -51,15 +52,15 @@\n +         _7 = (*_3);                      // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n           _6 = opaque::<i32>(move _7) -> bb2; // scope 5 at $DIR/reference_prop.rs:+9:14: +9:24\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:456:14: 456:20\n+                                           // + span: $DIR/reference_prop.rs:528:14: 528:20\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           StorageDead(_7);                 // scope 5 at $DIR/reference_prop.rs:+9:23: +9:24\n           StorageDead(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:26: +9:27\n           _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:25: +10:2\n-          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n           return;                          // scope 0 at $DIR/reference_prop.rs:+10:2: +10:2\n       }\n   }"}, {"sha": "afdcf57815f387dd20e15a3c3cc05bdfd645ba13", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 93, "deletions": 197, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -3,136 +3,79 @@\n   \n   fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n-      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n-      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n-      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n-      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _3: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+      let mut _4: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+      let mut _5: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _6: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _9: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _10: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _11: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _12: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       scope 1 {\n--         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n--         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n--         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n--         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         debug a => _20;                  // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         debug b => _15;                  // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         debug c => _11;                  // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         debug d => _24;                  // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+          debug a => &((*_9).0: usize);    // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+          debug b => &((*_10).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+          debug c => &((*_11).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+          debug d => &((*_12).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_9).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_11).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _31: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _32: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_9).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_11).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _13: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _14: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _33: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _34: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_11).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_9).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _33;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _34;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _35: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _36: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_11).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_9).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _15: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _16: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _37: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _38: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_12).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_10).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _37;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _38;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _39: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _40: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_12).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_10).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _17: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _18: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _41: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _42: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_10).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_12).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _41;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _42;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _43: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _44: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_10).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_12).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _19: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _20: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         _20 = &((*_25).0: usize);        // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         _15 = &((*_26).1: usize);        // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         _11 = &((*_27).2: usize);        // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-+         _24 = &((*_28).3: usize);        // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _10 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _11 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _12 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         StorageLive(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         _29 = deref_copy _20;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _31 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _32 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _31, move _32);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageLive(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _13 = ((*_9).0: usize);          // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _14 = ((*_11).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _4 = Le(move _13, move _14);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb1: {\n@@ -141,127 +84,80 @@\n       }\n   \n       bb2: {\n--         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         StorageLive(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _33 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         _33 = deref_copy _11;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _35 = (*_33);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _36 = (*_34);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _17 = Le(move _35, move _36);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _15 = ((*_11).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _16 = ((*_9).0: usize);          // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _7 = Le(move _15, move _16);     // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          switchInt(move _7) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n--         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n       bb4: {\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb5: {\n--         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+-         StorageLive(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _37 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         _37 = deref_copy _24;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _38 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _39 = (*_37);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _40 = (*_38);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _12 = Le(move _39, move _40);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = ((*_12).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _18 = ((*_10).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _5 = Le(move _17, move _18);     // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _3 = move _5;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+-         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         switchInt(move _5) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }\n   \n       bb6: {\n--         _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         _6 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb7: {\n--         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+-         StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _41 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         _41 = deref_copy _15;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _42 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _43 = (*_41);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _44 = (*_42);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _21 = Le(move _43, move _44);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _0 = Le(move _43, move _44);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _19 = ((*_10).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _20 = ((*_12).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _8 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _0 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _6 = move _8;                    // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb8: {\n--         StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _0 = move _6;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n           goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }"}, {"sha": "2534eeef43297c1278ecb8113c8b5775a8ce6d95", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.ReferencePropagation.diff", "status": "modified", "additions": 104, "deletions": 84, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -38,95 +38,115 @@\n       let mut _49: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n       let mut _50: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n       scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n++         debug a => &((*_25).0: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n++         debug b => &((*_26).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n++         debug c => &((*_27).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n++         debug d => &((*_28).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_25).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_27).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_25).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_27).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_27).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_25).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_27).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_25).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_28).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_26).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_28).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_26).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_26).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_28).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_26).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_28).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+-         _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _33 = ((*_25).0: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _34 = ((*_27).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n@@ -138,36 +158,36 @@\n       bb2: {\n           StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+-         _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+-         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _35 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _36 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _39 = ((*_27).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _40 = ((*_25).0: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n           StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n@@ -180,26 +200,26 @@\n   \n       bb5: {\n           StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+-         _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+-         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _41 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _42 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _45 = ((*_28).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _46 = ((*_26).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n@@ -213,26 +233,26 @@\n   \n       bb7: {\n           StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+-         _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+-         StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _47 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _48 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _51 = ((*_26).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _52 = ((*_28).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }"}, {"sha": "4b2a16b50b4653be19af485addd86e6e6b04a9f2", "filename": "tests/mir-opt/uninhabited_enum.process_void.SimplifyLocals-final.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -3,16 +3,13 @@\n fn process_void(_1: *const Void) -> () {\n     debug input => _1;                   // in scope 0 at $DIR/uninhabited_enum.rs:+0:21: +0:26\n     let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited_enum.rs:+0:41: +0:41\n-    let _2: &Void;                       // in scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     scope 1 {\n-        debug _input => _2;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n+        debug _input => _1;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n-        StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/uninhabited_enum.rs:+4:2: +4:2\n     }\n }"}, {"sha": "12cbb5a5f1240765acf1f9eca846050bb43e75e5", "filename": "tests/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -24,8 +24,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_interface::interface::Compiler;\n use rustc_interface::{Config, Queries};\n-use rustc_middle::ty::query::query_values::mir_borrowck;\n-use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_middle::query::query_values::mir_borrowck;\n+use rustc_middle::query::{ExternProviders, Providers};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use std::cell::RefCell;"}, {"sha": "90f7160b7249095dfed3f7db5510fe56cab34408", "filename": "tests/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-result-color.goml?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -47,89 +47,89 @@ reload:\n wait-for: \"#search-tabs\"\n assert-css: (\n     \"#search-tabs > button > .count\",\n-    {\"color\": \"rgb(136, 136, 136)\"},\n+    {\"color\": \"#888\"},\n     ALL,\n )\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n-    {\"color\": \"rgb(197, 197, 197)\"},\n+    {\"color\": \"#c5c5c5\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(0, 150, 207)\"},\n+    {\"color\": \"#0096cf\"},\n )\n \n // Checking the color of the bottom border.\n assert-css: (\n     \".search-results > a\",\n-    {\"border-bottom-color\": \"rgba(170, 170, 170, 0.2)\"}\n+    {\"border-bottom-color\": \"#aaa3\"}\n )\n \n // Checking the color of \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"rgb(120, 135, 151)\"},\n+    {\"color\": \"#788797\"},\n )\n \n-store-value: (entry_color, \"rgb(0, 150, 207)\") // color of the search entry\n-store-value: (hover_entry_color, \"rgb(255, 255, 255)\") // color of the hovered/focused search entry\n-store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n-store-value: (hover_background_color, \"rgb(60, 60, 60)\") // hover background color\n+store-value: (entry_color, \"#0096cf\") // color of the search entry\n+store-value: (hover_entry_color, \"#fff\") // color of the hovered/focused search entry\n+store-value: (background_color, \"transparent\") // background color\n+store-value: (hover_background_color, \"#3c3c3c\") // hover background color\n \n call-function: (\n     \"check-result-color\", (\n         \"keyword\", // item kind\n-        \"rgb(57, 175, 215)\", // color of item kind\n-        \"rgb(57, 175, 215)\", // color of hovered/focused item kind\n+        \"#39afd7\", // color of item kind\n+        \"#39afd7\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"struct\", // item kind\n-        \"rgb(255, 160, 165)\", // color of item kind\n-        \"rgb(255, 160, 165)\", // color of hovered/focused item kind\n+        \"#ffa0a5\", // color of item kind\n+        \"#ffa0a5\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"associatedtype\", // item kind\n-        \"rgb(57, 175, 215)\", // color of item kind\n-        \"rgb(57, 175, 215)\", // color of hovered/focused item kind\n+        \"#39afd7\", // color of item kind\n+        \"#39afd7\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"tymethod\", // item kind\n-        \"rgb(253, 214, 135)\", // color of item kind\n-        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+        \"#fdd687\", // color of item kind\n+        \"#fdd687\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"method\", // item kind\n-        \"rgb(253, 214, 135)\", // color of item kind\n-        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+        \"#fdd687\", // color of item kind\n+        \"#fdd687\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"structfield\", // item kind\n-        \"rgb(0, 150, 207)\", // color of item kind\n-        \"rgb(255, 255, 255)\", // color of hovered/focused item kind\n+        \"#0096cf\", // color of item kind\n+        \"#fff\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"macro\", // item kind\n-        \"rgb(163, 122, 204)\", // color of item kind\n-        \"rgb(163, 122, 204)\", // color of hovered/focused item kind\n+        \"#a37acc\", // color of item kind\n+        \"#a37acc\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"fn\", // item kind\n-        \"rgb(253, 214, 135)\", // color of item kind\n-        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+        \"#fdd687\", // color of item kind\n+        \"#fdd687\", // color of hovered/focused item kind\n     ),\n )\n \n@@ -138,19 +138,19 @@ move-cursor-to: \".search-input\"\n focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    {\"color\": \"#0096cf\", \"background-color\": \"transparent\"},\n     ALL,\n )\n \n // Checking color and background on hover.\n move-cursor-to: \"//*[@class='desc'][text()='Just a normal struct.']\"\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(255, 255, 255)\"},\n+    {\"color\": \"#fff\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+    {\"color\": \"#fff\", \"background-color\": \"rgb(60, 60, 60)\"},\n )\n \n // Dark theme\n@@ -164,89 +164,89 @@ reload:\n wait-for: \"#search-tabs\"\n assert-css: (\n     \"#search-tabs > button > .count\",\n-    {\"color\": \"rgb(136, 136, 136)\"},\n+    {\"color\": \"#888\"},\n     ALL,\n )\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n+    {\"color\": \"#ddd\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n+    {\"color\": \"#ddd\"},\n )\n \n // Checking the color of the bottom border.\n assert-css: (\n     \".search-results > a\",\n-    {\"border-bottom-color\": \"rgba(170, 170, 170, 0.2)\"}\n+    {\"border-bottom-color\": \"#aaa3\"}\n )\n \n // Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n+    {\"color\": \"#ddd\"},\n )\n \n-store-value: (entry_color, \"rgb(221, 221, 221)\") // color of the search entry\n-store-value: (hover_entry_color, \"rgb(221, 221, 221)\") // color of the hovered/focused search entry\n-store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n-store-value: (hover_background_color, \"rgb(97, 97, 97)\") // hover background color\n+store-value: (entry_color, \"#ddd\") // color of the search entry\n+store-value: (hover_entry_color, \"#ddd\") // color of the hovered/focused search entry\n+store-value: (background_color, \"transparent\") // background color\n+store-value: (hover_background_color, \"#616161\") // hover background color\n \n call-function: (\n     \"check-result-color\", (\n         \"keyword\", // item kind\n-        \"rgb(210, 153, 29)\", // color of item kind\n-        \"rgb(210, 153, 29)\", // color of hovered/focused item kind\n+        \"#d2991d\", // color of item kind\n+        \"#d2991d\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"struct\", // item kind\n-        \"rgb(45, 191, 184)\", // color of item kind\n-        \"rgb(45, 191, 184)\", // color of hovered/focused item kind\n+        \"#2dbfb8\", // color of item kind\n+        \"#2dbfb8\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"associatedtype\", // item kind\n-        \"rgb(210, 153, 29)\", // color of item kind\n-        \"rgb(210, 153, 29)\", // color of hovered/focused item kind\n+        \"#d2991d\", // color of item kind\n+        \"#d2991d\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"tymethod\", // item kind\n-        \"rgb(43, 171, 99)\", // color of item kind\n-        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+        \"#2bab63\", // color of item kind\n+        \"#2bab63\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"method\", // item kind\n-        \"rgb(43, 171, 99)\", // color of item kind\n-        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+        \"#2bab63\", // color of item kind\n+        \"#2bab63\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"structfield\", // item kind\n-        \"rgb(221, 221, 221)\", // color of item kind\n-        \"rgb(221, 221, 221)\", // color of hovered/focused item kind\n+        \"#ddd\", // color of item kind\n+        \"#ddd\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"macro\", // item kind\n-        \"rgb(9, 189, 0)\", // color of item kind\n-        \"rgb(9, 189, 0)\", // color of hovered/focused item kind\n+        \"#09bd00\", // color of item kind\n+        \"#09bd00\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"fn\", // item kind\n-        \"rgb(43, 171, 99)\", // color of item kind\n-        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+        \"#2bab63\", // color of item kind\n+        \"#2bab63\", // color of hovered/focused item kind\n     ),\n )\n \n@@ -255,7 +255,7 @@ move-cursor-to: \".search-input\"\n focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    {\"color\": \"#ddd\", \"background-color\": \"transparent\"},\n )\n \n // Light theme\n@@ -266,89 +266,89 @@ reload:\n wait-for: \"#search-tabs\"\n assert-css: (\n     \"#search-tabs > button > .count\",\n-    {\"color\": \"rgb(136, 136, 136)\"},\n+    {\"color\": \"#888\"},\n     ALL,\n )\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n+    {\"color\": \"#000\"},\n )\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n+    {\"color\": \"#000\"},\n )\n \n // Checking the color of the bottom border.\n assert-css: (\n     \".search-results > a\",\n-    {\"border-bottom-color\": \"rgba(170, 170, 170, 0.2)\"}\n+    {\"border-bottom-color\": \"#aaa3\"}\n )\n \n // Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n+    {\"color\": \"#000\"},\n )\n \n-store-value: (entry_color, \"rgb(0, 0, 0)\") // color of the search entry\n-store-value: (hover_entry_color, \"rgb(0, 0, 0)\") // color of the hovered/focused search entry\n-store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n-store-value: (hover_background_color, \"rgb(204, 204, 204)\") // hover background color\n+store-value: (entry_color, \"#000\") // color of the search entry\n+store-value: (hover_entry_color, \"#000\") // color of the hovered/focused search entry\n+store-value: (background_color, \"transparent\") // background color\n+store-value: (hover_background_color, \"#ccc\") // hover background color\n \n call-function: (\n     \"check-result-color\", (\n         \"keyword\", // item kind\n-        \"rgb(56, 115, 173)\", // color of item kind\n-        \"rgb(56, 115, 173)\", // color of hovered/focused item kind\n+        \"#3873ad\", // color of item kind\n+        \"#3873ad\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"struct\", // item kind\n-        \"rgb(173, 55, 138)\", // color of item kind\n-        \"rgb(173, 55, 138)\", // color of hovered/focused item kind\n+        \"#ad378a\", // color of item kind\n+        \"#ad378a\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"associatedtype\", // item kind\n-        \"rgb(56, 115, 173)\", // color of item kind\n-        \"rgb(56, 115, 173)\", // color of hovered/focused item kind\n+        \"#3873ad\", // color of item kind\n+        \"#3873ad\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"tymethod\", // item kind\n-        \"rgb(173, 124, 55)\", // color of item kind\n-        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+        \"#ad7c37\", // color of item kind\n+        \"#ad7c37\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"method\", // item kind\n-        \"rgb(173, 124, 55)\", // color of item kind\n-        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+        \"#ad7c37\", // color of item kind\n+        \"#ad7c37\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"structfield\", // item kind\n-        \"rgb(0, 0, 0)\", // color of item kind\n-        \"rgb(0, 0, 0)\", // color of hovered/focused item kind\n+        \"#000\", // color of item kind\n+        \"#000\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"macro\", // item kind\n-        \"rgb(6, 128, 0)\", // color of item kind\n-        \"rgb(6, 128, 0)\", // color of hovered/focused item kind\n+        \"#068000\", // color of item kind\n+        \"#068000\", // color of hovered/focused item kind\n     ),\n )\n call-function: (\n     \"check-result-color\", (\n         \"fn\", // item kind\n-        \"rgb(173, 124, 55)\", // color of item kind\n-        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+        \"#ad7c37\", // color of item kind\n+        \"#ad7c37\", // color of hovered/focused item kind\n     ),\n )\n \n@@ -357,7 +357,7 @@ move-cursor-to: \".search-input\"\n focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    {\"color\": \"#000\", \"background-color\": \"transparent\"},\n )\n \n // Check the alias.\n@@ -386,16 +386,16 @@ define-function: (\n \n call-function: (\"check-alias\", {\n     \"theme\": \"ayu\",\n-    \"alias\": \"rgb(197, 197, 197)\",\n-    \"grey\": \"rgb(153, 153, 153)\",\n+    \"alias\": \"#c5c5c5\",\n+    \"grey\": \"#999\",\n })\n call-function: (\"check-alias\", {\n     \"theme\": \"dark\",\n-    \"alias\": \"rgb(255, 255, 255)\",\n-    \"grey\": \"rgb(204, 204, 204)\",\n+    \"alias\": \"#fff\",\n+    \"grey\": \"#ccc\",\n })\n call-function: (\"check-alias\", {\n     \"theme\": \"light\",\n-    \"alias\": \"rgb(0, 0, 0)\",\n-    \"grey\": \"rgb(153, 153, 153)\",\n+    \"alias\": \"#000\",\n+    \"grey\": \"#999\",\n })"}, {"sha": "ed63def93df0cfbf3d59f5bbdbdeced877b969a0", "filename": "tests/rustdoc-json/type/inherent_associated_type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,29 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![feature(no_core)]\n+#![allow(incomplete_features)]\n+#![no_core]\n+\n+// @set OwnerMetadata = '$.index[*][?(@.name==\"OwnerMetadata\")].id'\n+pub struct OwnerMetadata;\n+// @set Owner = '$.index[*][?(@.name==\"Owner\")].id'\n+pub struct Owner;\n+\n+pub fn create() -> Owner::Metadata {\n+    OwnerMetadata\n+}\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.name' '\"Metadata\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.trait' null\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.kind' '\"resolved_path\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.inner.id' $Owner\n+\n+/// impl\n+impl Owner {\n+    /// iat\n+    pub type Metadata = OwnerMetadata;\n+}\n+// @set iat = '$.index[*][?(@.docs==\"iat\")].id'\n+// @is '$.index[*][?(@.docs==\"impl\")].inner.items[*]' $iat\n+// @is '$.index[*][?(@.docs==\"iat\")].kind' '\"assoc_type\"'\n+// @is '$.index[*][?(@.docs==\"iat\")].inner.default.inner.id' $OwnerMetadata"}, {"sha": "a089600b692d6395a3cc1618c3864b7bba15c4dc", "filename": "tests/rustdoc-json/type/inherent_associated_type_bound.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// @set Carrier = '$.index[*][?(@.name==\"Carrier\")].id'\n+pub struct Carrier<'a>(&'a ());\n+\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.kind' '\"function_pointer\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.generic_params[*].name' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.id' $Carrier\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.args.angle_bracketed.args[0].lifetime' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.name' '\"Focus\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.trait' null\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.args.angle_bracketed.args[0].type.inner' '\"i32\"'\n+\n+pub type User = for<'b> fn(Carrier<'b>::Focus<i32>);\n+\n+impl<'a> Carrier<'a> {\n+    pub type Focus<T> = &'a mut T;\n+}"}, {"sha": "30c68bfe56c917d0c88cb45b22062280588e9106", "filename": "tests/rustdoc-json/type/inherent_associated_type_projections.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// @set Parametrized = '$.index[*][?(@.name==\"Parametrized\")].id'\n+pub struct Parametrized<T>(T);\n+\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.id' $Parametrized\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.args.angle_bracketed.args[0].type' '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.name' '\"Proj\"'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.trait' null\n+pub type Test = Parametrized<i32>::Proj;\n+\n+/// param_bool\n+impl Parametrized<bool> {\n+    /// param_bool_proj\n+    pub type Proj = ();\n+}\n+\n+/// param_i32\n+impl Parametrized<i32> {\n+    /// param_i32_proj\n+    pub type Proj = String;\n+}\n+\n+// @set param_bool = '$.index[*][?(@.docs==\"param_bool\")].id'\n+// @set param_i32 = '$.index[*][?(@.docs==\"param_i32\")].id'\n+// @set param_bool_proj = '$.index[*][?(@.docs==\"param_bool_proj\")].id'\n+// @set param_i32_proj = '$.index[*][?(@.docs==\"param_i32_proj\")].id'\n+\n+// @is '$.index[*][?(@.docs==\"param_bool\")].inner.items[*]' $param_bool_proj\n+// @is '$.index[*][?(@.docs==\"param_i32\")].inner.items[*]' $param_i32_proj"}, {"sha": "89ba26dfd6f4b1c109fcbd008bcfd3c035132275", "filename": "tests/ui/attr-bad-crate-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fattr-bad-crate-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fattr-bad-crate-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattr-bad-crate-attr.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "previous_filename": "tests/ui/attr-bad-crate-attr.rc"}, {"sha": "ff420eeea4a0618b7179aec6929c1c696a08409e", "filename": "tests/ui/attr-bad-crate-attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fattr-bad-crate-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fattr-bad-crate-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattr-bad-crate-attr.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,8 @@\n+error: expected item after attributes\n+  --> $DIR/attr-bad-crate-attr.rs:4:1\n+   |\n+LL | #[attr = \"val\"] // Unterminated\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d950743b41c0d9b52063f449768884b2ddd8e669", "filename": "tests/ui/dupe-first-attr.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fdupe-first-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fdupe-first-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdupe-first-attr.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,24 +1,26 @@\n+// run-pass\n+\n // Regression test for a problem with the first mod attribute\n // being applied to every mod\n \n // pretty-expanded FIXME #23616\n \n #[cfg(target_os = \"linux\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"macos\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"windows\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"freebsd\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"dragonfly\")]\n-mod hello;\n+mod hello {}\n \n #[cfg(target_os = \"android\")]\n-mod hello;\n+mod hello {}\n \n-pub fn main() { }\n+fn main() {}", "previous_filename": "tests/ui/dupe-first-attr.rc"}, {"sha": "d898feb78c6f7cdcf041a58519274b2da917a1b3", "filename": "tests/ui/extenv/extenv-escaped-var.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-escaped-var.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    env!(\"\\t\"); //~ERROR environment variable `\\t` not defined at compile time\n+}"}, {"sha": "25e218c63f336b1599588721e361a1aeecae8ec4", "filename": "tests/ui/extenv/extenv-escaped-var.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-escaped-var.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,11 @@\n+error: environment variable `\\t` not defined at compile time\n+  --> $DIR/extenv-escaped-var.rs:2:5\n+   |\n+LL |     env!(\"\\t\");\n+   |     ^^^^^^^^^^\n+   |\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "10589ec2f54a4a1b216dac215a2dea601a85e212", "filename": "tests/ui/extenv/issue-110547.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-110547.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,28 +1,28 @@\n-error: environment variable `    ` not defined at compile time\n+error: environment variable `\\t` not defined at compile time\n   --> $DIR/issue-110547.rs:4:5\n    |\n LL |     env!{\"\\t\"};\n    |     ^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: environment variable `    ` not defined at compile time\n+error: environment variable `\\t` not defined at compile time\n   --> $DIR/issue-110547.rs:5:5\n    |\n LL |     env!(\"\\t\");\n    |     ^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = help: use `std::env::var(\"\\t\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: environment variable `` not defined at compile time\n+error: environment variable `\\u{2069}` not defined at compile time\n   --> $DIR/issue-110547.rs:6:5\n    |\n LL |     env!(\"\\u{2069}\");\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = help: use `std::env::var(\"\")` to read the variable at run time\n+   = help: use `std::env::var(\"\\u{2069}\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "dc1115b82db40a8a77bfc8509b79dbbee6f7d43a", "filename": "tests/ui/extern/auxiliary/invalid-utf8.txt", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt", "raw_url": "https://github.com/rust-lang/rust/raw/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern%2Fauxiliary%2Finvalid-utf8.txt?ref=033191268167398031b8f10b137adcea4b15d53c", "patch": "@@ -1 +0,0 @@\n-\ufffd(\n\\ No newline at end of file"}, {"sha": "6eb47e3d85be43929ce348a0d8454660073fcc9e", "filename": "tests/ui/feature-gates/auxiliary/debugger-visualizer.natvis", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis?ref=033191268167398031b8f10b137adcea4b15d53c", "patch": "@@ -1,3 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n-</AutoVisualizer>"}, {"sha": "cd4f2610d3f04c6a088d2be38617cf2317c694e0", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.fixed?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+struct S<T>(T);\n+struct S2;\n+\n+impl<T: Default> Default for S<T> {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+impl Default for S2 {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+\n+fn main() {}"}, {"sha": "024b703e6f23549103d0170724892b7b5c8a4f9c", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+struct S<T>(T);\n+struct S2;\n+\n+impl<T: Default> impl Default for S<T> {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+impl impl Default for S2 {\n+    //~^ ERROR: unexpected `impl` keyword\n+    //~| HELP: remove the extra `impl`\n+    fn default() -> Self { todo!() }\n+}\n+\n+\n+fn main() {}"}, {"sha": "5aafc8b64d4ff476784edab9dfdbd2d4991b3ba5", "filename": "tests/ui/impl-trait/extra-impl-in-trait-impl.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fextra-impl-in-trait-impl.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,26 @@\n+error: unexpected `impl` keyword\n+  --> $DIR/extra-impl-in-trait-impl.rs:6:18\n+   |\n+LL | impl<T: Default> impl Default for S<T> {\n+   |                  ^^^^^ help: remove the extra `impl`\n+   |\n+note: this is parsed as an `impl Trait` type, but a trait is expected at this position\n+  --> $DIR/extra-impl-in-trait-impl.rs:6:18\n+   |\n+LL | impl<T: Default> impl Default for S<T> {\n+   |                  ^^^^^^^^^^^^\n+\n+error: unexpected `impl` keyword\n+  --> $DIR/extra-impl-in-trait-impl.rs:12:6\n+   |\n+LL | impl impl Default for S2 {\n+   |      ^^^^^ help: remove the extra `impl`\n+   |\n+note: this is parsed as an `impl Trait` type, but a trait is expected at this position\n+  --> $DIR/extra-impl-in-trait-impl.rs:12:6\n+   |\n+LL | impl impl Default for S2 {\n+   |      ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "cd5fd3145055c56a8917c2a83866e6ab9af86f4b", "filename": "tests/ui/issues/auxiliary/issue-3136-a.rc", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rc", "raw_url": "https://github.com/rust-lang/rust/raw/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rc?ref=033191268167398031b8f10b137adcea4b15d53c", "patch": "@@ -1,4 +0,0 @@\n-#![crate_type = \"lib\"]\n-\n-#[path = \"issue-3136-a.rs\"]\n-pub mod issue_3136_a;"}, {"sha": "22bb1c8f97709c7d0ab69237caf2cb5290422d33", "filename": "tests/ui/issues/auxiliary/issue-3136-a.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-3136-a.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,11 +1,14 @@\n+#![crate_type = \"lib\"]\n+\n trait x {\n     fn use_x<T>(&self);\n }\n struct y(());\n impl x for y {\n     fn use_x<T>(&self) {\n-        struct foo { //~ ERROR quux\n-            i: ()\n+        struct foo {\n+            //~ ERROR quux\n+            i: (),\n         }\n         fn new_foo<T>(i: ()) -> foo {\n             foo { i: i }"}, {"sha": "33d97fe7c834f5e973eed52b2df87fe2570b6491", "filename": "tests/ui/issues/issue-3136-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fissues%2Fissue-3136-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fissues%2Fissue-3136-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3136-b.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// aux-build:issue-3136-a.rc\n+// aux-build:issue-3136-a.rs\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "eb1f2a549b16b504f51e919880a1054daa9e25e6", "filename": "tests/ui/kindck/kindck-send-unsafe.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,11 +1,15 @@\n extern crate core;\n \n-fn assert_send<T:Send>() { }\n+fn assert_send<T: Send>() {}\n+\n+fn test70() {\n+    assert_send::<*mut isize>();\n+    //~^ ERROR `*mut isize` cannot be sent between threads safely\n+}\n \n fn test71<'a>() {\n     assert_send::<*mut &'a isize>();\n     //~^ ERROR `*mut &'a isize` cannot be sent between threads safely\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "3f0444ec9c80777e08155259569ea70d5eb3a6ba", "filename": "tests/ui/kindck/kindck-send-unsafe.rs~rust-lang_master", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs%7Erust-lang_master", "raw_url": "https://github.com/rust-lang/rust/raw/033191268167398031b8f10b137adcea4b15d53c/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs%7Erust-lang_master", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.rs%7Erust-lang_master?ref=033191268167398031b8f10b137adcea4b15d53c", "patch": "@@ -1,12 +0,0 @@\n-fn assert_send<T:Send>() { }\n-\n-// unsafe ptrs are ok unless they point at unsendable things\n-fn test70() {\n-    assert_send::<*mut int>();\n-}\n-fn test71<'a>() {\n-    assert_send::<*mut &'a int>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn main() {\n-}"}, {"sha": "f1a5054abbc4702538907a30d7934288cfb1ced3", "filename": "tests/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,16 +1,29 @@\n-error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n+error[E0277]: `*mut isize` cannot be sent between threads safely\n   --> $DIR/kindck-send-unsafe.rs:6:19\n    |\n+LL |     assert_send::<*mut isize>();\n+   |                   ^^^^^^^^^^ `*mut isize` cannot be sent between threads safely\n+   |\n+   = help: the trait `Send` is not implemented for `*mut isize`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-unsafe.rs:3:19\n+   |\n+LL | fn assert_send<T: Send>() {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n+  --> $DIR/kindck-send-unsafe.rs:11:19\n+   |\n LL |     assert_send::<*mut &'a isize>();\n    |                   ^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `*mut &'a isize`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-unsafe.rs:3:18\n+  --> $DIR/kindck-send-unsafe.rs:3:19\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ^^^^ required by this bound in `assert_send`\n+LL | fn assert_send<T: Send>() {}\n+   |                   ^^^^ required by this bound in `assert_send`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "e390c3fc565a6acd17b06d4135ff91b05b4b2f88", "filename": "tests/ui/lint/issue-111359.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Flint%2Fissue-111359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Flint%2Fissue-111359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-111359.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,27 @@\n+#[deny(missing_debug_implementations)]\n+#[deny(missing_copy_implementations)]\n+\n+mod priv_mod {\n+    use std::convert::TryFrom;\n+\n+    pub struct BarPub;\n+    //~^ ERROR type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n+    //~| ERROR type could implement `Copy`; consider adding `impl Copy`\n+    struct BarPriv;\n+\n+    impl<'a> TryFrom<BarPriv> for u8 {\n+        type Error = ();\n+        fn try_from(o: BarPriv) -> Result<Self, ()> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    impl<'a> TryFrom<BarPub> for u8 {\n+        type Error = ();\n+        fn try_from(o: BarPub) -> Result<Self, ()> {\n+            unimplemented!()\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2296d8413d6c3fcfdb9017e1bf090c0efe2fd8fc", "filename": "tests/ui/lint/issue-111359.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Flint%2Fissue-111359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Flint%2Fissue-111359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-111359.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,26 @@\n+error: type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n+  --> $DIR/issue-111359.rs:7:5\n+   |\n+LL |     pub struct BarPub;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-111359.rs:1:8\n+   |\n+LL | #[deny(missing_debug_implementations)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: type could implement `Copy`; consider adding `impl Copy`\n+  --> $DIR/issue-111359.rs:7:5\n+   |\n+LL |     pub struct BarPub;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-111359.rs:2:8\n+   |\n+LL | #[deny(missing_copy_implementations)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5b5b8b7c2d90b5928aafbb9417c5e1c3f9bbf898", "filename": "tests/ui/macros/panic-temporaries.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// edition:2021\n+\n+#![allow(unreachable_code)]\n+\n+async fn f(_: u8) {}\n+\n+async fn g() {\n+    // Todo returns `!`, so the await is never reached, and in particular the\n+    // temporaries inside the formatting machinery are not still alive at the\n+    // await point.\n+    f(todo!(\"...\")).await;\n+}\n+\n+fn require_send(_: impl Send) {}\n+\n+fn main() {\n+    require_send(g());\n+}"}, {"sha": "b69b5bc3b53f26128d28fba0f4f5eb270a96e7b7", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -26,7 +26,7 @@ fn arbitrary_consuming_method_for_demonstration_purposes() {\n \n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem as usize\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -42,7 +42,7 @@ fn addr_of() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: &elem\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -58,7 +58,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem == 1\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -71,7 +71,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem >= 1\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -84,7 +84,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem > 0\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -97,7 +97,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem < 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -110,7 +110,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem <= 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -123,7 +123,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem != 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -139,7 +139,7 @@ fn unary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: *elem\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };"}, {"sha": "cfd1b6b99ba7605104bc3f634484c2f072567eca", "filename": "tests/ui/parser/issues/issue-111416.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let my = monad_bind(mx, T: Try); //~ ERROR invalid `struct` delimiters or `fn` call arguments\n+}"}, {"sha": "ddacf4d6dfc310ba8ecf5ddd7e21f22a53ada318", "filename": "tests/ui/parser/issues/issue-111416.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111416.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,18 @@\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/issue-111416.rs:2:14\n+   |\n+LL |     let my = monad_bind(mx, T: Try);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: if `monad_bind` is a struct, use braces as delimiters\n+   |\n+LL |     let my = monad_bind { mx, T: Try };\n+   |                         ~            ~\n+help: if `monad_bind` is a function, use the arguments directly\n+   |\n+LL -     let my = monad_bind(mx, T: Try);\n+LL +     let my = monad_bind(mx, Try);\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "fc6f5f23d92fa52a4e64e1cb424504a65e1d07cf", "filename": "tests/ui/track-diagnostics/track6.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,6 +1,9 @@\n // compile-flags: -Z track-diagnostics\n // error-pattern: created at\n \n+// Normalize the emitted location so this doesn't need\n+// updating everytime someone adds or removes a line.\n+// normalize-stderr-test \".rs:\\d+:\\d+\" -> \".rs:LL:CC\"\n \n \n pub trait Foo {"}, {"sha": "89438aea9ad62b4e95b135c8c1fcce95c7e873a0", "filename": "tests/ui/track-diagnostics/track6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -1,9 +1,9 @@\n error[E0658]: specialization is unstable\n-  --> $DIR/track6.rs:11:5\n+  --> $DIR/track6.rs:LL:CC\n    |\n LL |     default fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^\n--Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:93:5\n+-Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:LL:CC\n    |\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: add `#![feature(specialization)]` to the crate attributes to enable"}, {"sha": "eadee6b711e52be7a844d82b9ce721153d2b3f81", "filename": "tests/ui/traits/non_lifetime_binders/universe-error1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,18 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+trait Other<U: ?Sized> {}\n+\n+impl<U: ?Sized> Other<U> for U {}\n+\n+#[rustfmt::skip]\n+fn foo<U: ?Sized>()\n+where\n+    for<T> T: Other<U> {}\n+\n+fn bar() {\n+    foo::<_>();\n+    //~^ ERROR the trait bound `T: Other<_>` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "bfcad72e35278535296cbdd00ee97cf7e1096e1e", "filename": "tests/ui/traits/non_lifetime_binders/universe-error1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Funiverse-error1.stderr?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/universe-error1.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: the trait bound `T: Other<_>` is not satisfied\n+  --> $DIR/universe-error1.rs:14:11\n+   |\n+LL |     foo::<_>();\n+   |           ^ the trait `Other<_>` is not implemented for `T`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/universe-error1.rs:11:15\n+   |\n+LL | fn foo<U: ?Sized>()\n+   |    --- required by a bound in this function\n+LL | where\n+LL |     for<T> T: Other<U> {}\n+   |               ^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "01be8f3bb9c90b8b807db9270a618c7e075d8e61", "filename": "tests/ui/unsized-locals/align.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Funsized-locals%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0573fb2a5c2170a5a264dd033e6ff5dddc277f/tests%2Fui%2Funsized-locals%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Falign.rs?ref=ed0573fb2a5c2170a5a264dd033e6ff5dddc277f", "patch": "@@ -0,0 +1,30 @@\n+// Test that unsized locals uphold alignment requirements.\n+// Regression test for #71416.\n+// run-pass\n+#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+use std::any::Any;\n+\n+#[repr(align(256))]\n+#[allow(dead_code)]\n+struct A {\n+    v: u8\n+}\n+\n+impl A {\n+    fn f(&self) -> *const A {\n+        assert_eq!(self as *const A as usize % 256, 0);\n+        self\n+    }\n+}\n+\n+fn mk() -> Box<dyn Any> {\n+    Box::new(A { v: 4 })\n+}\n+\n+fn main() {\n+    let x = *mk();\n+    let dwncst = x.downcast_ref::<A>().unwrap();\n+    let addr = dwncst.f();\n+    assert_eq!(addr as usize % 256, 0);\n+}"}]}