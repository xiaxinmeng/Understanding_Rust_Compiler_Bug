{"sha": "19094abd41fe398c2ba1a3c4926ef50c04eebabb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDk0YWJkNDFmZTM5OGMyYmExYTNjNDkyNmVmNTBjMDRlZWJhYmI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-01-10T17:51:08Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-01-10T17:51:08Z"}, "message": "Proper handling local in hover", "tree": {"sha": "a82cc943555568780e37f455553b2971cce18de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a82cc943555568780e37f455553b2971cce18de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19094abd41fe398c2ba1a3c4926ef50c04eebabb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19094abd41fe398c2ba1a3c4926ef50c04eebabb", "html_url": "https://github.com/rust-lang/rust/commit/19094abd41fe398c2ba1a3c4926ef50c04eebabb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19094abd41fe398c2ba1a3c4926ef50c04eebabb/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2068e48c698b93974d1e3261940dbea121ef16c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2068e48c698b93974d1e3261940dbea121ef16c3", "html_url": "https://github.com/rust-lang/rust/commit/2068e48c698b93974d1e3261940dbea121ef16c3"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "5548681f179f689fa97e176bd52bfccbceda59ac", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19094abd41fe398c2ba1a3c4926ef50c04eebabb/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19094abd41fe398c2ba1a3c4926ef50c04eebabb/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=19094abd41fe398c2ba1a3c4926ef50c04eebabb", "patch": "@@ -128,7 +128,7 @@ fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<S\n             hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n             hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        Local(_) => None,\n+        Local(it) => Some(rust_code_markup(it.ty(db).display_truncated(db, None).to_string())),\n         TypeParam(_) | SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n@@ -174,6 +174,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         .value\n         .ancestors()\n         .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n+\n+    // The following logic will not work if token is coming from a macro\n     let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n     res.extend(type_of(db, frange).map(rust_code_markup));\n     if res.is_empty() {\n@@ -729,4 +731,20 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"fn foo()\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_hover_through_expr_in_macro() {\n+        check_hover_result(\n+            \"\n+            //- /lib.rs\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            fn foo(bar:u32) {\n+                let a = id!(ba<|>r);\n+            }            \n+            \",\n+            &[\"u32\"],\n+        );\n+    }\n }"}]}