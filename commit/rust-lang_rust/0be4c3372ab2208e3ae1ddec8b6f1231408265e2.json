{"sha": "0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZTRjMzM3MmFiMjIwOGUzYWUxZGRlYzhiNmYxMjMxNDA4MjY1ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-25T17:51:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-25T17:51:24Z"}, "message": "auto merge of #13741 : klutzy/rust/test-reachable, r=alexcrichton\n\nIt didn't work because it tried to call itself but symbols are not\r\nexported as default in executables.\r\n\r\nNote that `fun5` is not internal anymore since it is in library.\r\n\r\nSecond commit removes/updates some old tests.", "tree": {"sha": "2286d0fe35478c6ac8b85e1e098be306d6733275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2286d0fe35478c6ac8b85e1e098be306d6733275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "html_url": "https://github.com/rust-lang/rust/commit/0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28a701d648d88ed63f575fa1efed47f5cbb81ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/a28a701d648d88ed63f575fa1efed47f5cbb81ca", "html_url": "https://github.com/rust-lang/rust/commit/a28a701d648d88ed63f575fa1efed47f5cbb81ca"}, {"sha": "550f975f6d0b32470d3b2cabf88c9fa78e22959e", "url": "https://api.github.com/repos/rust-lang/rust/commits/550f975f6d0b32470d3b2cabf88c9fa78e22959e", "html_url": "https://github.com/rust-lang/rust/commit/550f975f6d0b32470d3b2cabf88c9fa78e22959e"}], "stats": {"total": 223, "additions": 66, "deletions": 157}, "files": [{"sha": "0560626c9994feae3665e33b48660d50bd35629d", "filename": "src/test/run-make/extern-fn-reachable/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile?ref=0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) dylib.rs -o $(TMPDIR)/libdylib.so\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main)"}, {"sha": "f24265e7a5229726b5c09a7b8f451bebb966e76f", "filename": "src/test/run-make/extern-fn-reachable/dylib.rs", "status": "renamed", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fdylib.rs?ref=0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,9 +7,18 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-// ignore-test\n \n-pub fn main() {\n-  let s = shell!( uname -a );\n-  log(debug, s);\n+#![crate_type = \"dylib\"]\n+#![allow(dead_code)]\n+\n+#[no_mangle] pub extern \"C\" fn fun1() {}\n+#[no_mangle] extern \"C\" fn fun2() {}\n+\n+mod foo {\n+    #[no_mangle] pub extern \"C\" fn fun3() {}\n }\n+pub mod bar {\n+    #[no_mangle] pub extern \"C\" fn fun4() {}\n+}\n+\n+#[no_mangle] pub fn fun5() {}", "previous_filename": "src/test/run-pass/syntax-extension-shell.rs"}, {"sha": "e05d43145d7e2e365d3004113989ca814dde77da", "filename": "src/test/run-make/extern-fn-reachable/main.rs", "status": "renamed", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs?ref=0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "patch": "@@ -8,32 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-win32 dynamic_lib can read dllexported symbols only\n-// ignore-linux apparently dlsym doesn't work on program symbols?\n-// ignore-android apparently dlsym doesn't work on program symbols?\n-// ignore-freebsd apparently dlsym doesn't work on program symbols?\n-\n use std::unstable::dynamic_lib::DynamicLibrary;\n-\n-#[no_mangle] pub extern \"C\" fn fun1() {}\n-#[no_mangle] extern \"C\" fn fun2() {}\n-\n-mod foo {\n-    #[no_mangle] pub extern \"C\" fn fun3() {}\n-}\n-pub mod bar {\n-    #[no_mangle] pub extern \"C\" fn fun4() {}\n-}\n-\n-#[no_mangle] pub fn fun5() {}\n+use std::os;\n \n pub fn main() {\n     unsafe {\n-        let a = DynamicLibrary::open(None).unwrap();\n+        let path = Path::new(\"libdylib.so\");\n+        let a = DynamicLibrary::open(Some(&path)).unwrap();\n         assert!(a.symbol::<int>(\"fun1\").is_ok());\n         assert!(a.symbol::<int>(\"fun2\").is_err());\n         assert!(a.symbol::<int>(\"fun3\").is_err());\n         assert!(a.symbol::<int>(\"fun4\").is_ok());\n-        assert!(a.symbol::<int>(\"fun5\").is_err());\n+        assert!(a.symbol::<int>(\"fun5\").is_ok());\n     }\n }", "previous_filename": "src/test/run-pass/extern-fn-reachable.rs"}, {"sha": "315f6c80d4e11cb36277ee10166394c68abaedcf", "filename": "src/test/run-pass/borrowck-nested-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Fborrowck-nested-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Fborrowck-nested-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-nested-calls.rs?ref=0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME (#5074) nested method calls\n+// ignore-test FIXME (#6268) nested method calls\n \n // Test that (safe) nested calls with `&mut` receivers are permitted.\n "}, {"sha": "ad414bec22692f339078e7238c3b16d7dd89d360", "filename": "src/test/run-pass/int-conversion-coherence.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a28a701d648d88ed63f575fa1efed47f5cbb81ca/src%2Ftest%2Frun-pass%2Fint-conversion-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28a701d648d88ed63f575fa1efed47f5cbb81ca/src%2Ftest%2Frun-pass%2Fint-conversion-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fint-conversion-coherence.rs?ref=a28a701d648d88ed63f575fa1efed47f5cbb81ca", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-//\n-// Problem here is that transactions aren't implemented for integer literal\n-// inference.\n-\n-trait plus {\n-    fn plus() -> int;\n-}\n-\n-impl foo of plus for uint { fn plus() -> int { self as int + 20 } }\n-impl foo of plus for int { fn plus() -> int { self + 10 } }\n-\n-pub fn main() {\n-    assert_eq!(10.plus(), 20);\n-}"}, {"sha": "7ab36c622668bb3f6f3109144c6b51a38726b22c", "filename": "src/test/run-pass/select-macro.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a28a701d648d88ed63f575fa1efed47f5cbb81ca/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28a701d648d88ed63f575fa1efed47f5cbb81ca/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fselect-macro.rs?ref=a28a701d648d88ed63f575fa1efed47f5cbb81ca", "patch": "@@ -1,72 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test - this isn't really a test.\n-\n- {\n-\n-// select!\n-macro_rules! select_if (\n-\n-    {\n-        $index:expr,\n-        $count:expr\n-    } => {\n-        fail!()\n-    };\n-\n-    {\n-        $index:expr,\n-        $count:expr,\n-        $port:path => [\n-            $(type_this $message:path$(($(x $x: ident),+))dont_type_this*\n-              -> $next:ident => { $e:expr }),+\n-        ]\n-        $(, $ports:path => [\n-            $(type_this $messages:path$(($(x $xs: ident),+))dont_type_this*\n-              -> $nexts:ident => { $es:expr }),+\n-        ] )*\n-    } => {\n-        if $index == $count {\n-            match pipes::try_recv($port) {\n-              $(Some($message($($($x,)+)* next)) => {\n-                let $next = next;\n-                $e\n-              })+\n-              _ => fail!()\n-            }\n-        } else {\n-            select_if!(\n-                $index,\n-                $count + 1\n-                $(, $ports => [\n-                    $(type_this $messages$(($(x $xs),+))dont_type_this*\n-                      -> $nexts => { $es }),+\n-                ])*\n-            )\n-        }\n-    };\n-)\n-\n-macro_rules! select (\n-    {\n-        $( $port:path => {\n-            $($message:path$(($($x: ident),+))dont_type_this*\n-              -> $next:ident $e:expr),+\n-        } )+\n-    } => {\n-        let index = pipes::selecti([$(($port).header()),+]);\n-        select_if!(index, 0 $(, $port => [\n-            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { $e }),+\n-        ])+)\n-    }\n-)\n-\n-}"}, {"sha": "72f2917a2129acd75b0e404272fa2e36c2d2cfb1", "filename": "src/test/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "patch": "@@ -8,24 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test #7340 fails on 32-bit linux\n-use std::ptr;\n+// ignore-linux #7340 fails on 32-bit linux\n+// ignore-macos #7340 fails on 32-bit macos\n \n-enum a_tag<A> {\n-    a_tag(A)\n+use std::cast;\n+\n+enum Tag<A> {\n+    Tag(A)\n }\n \n-struct t_rec {\n+struct Rec {\n     c8: u8,\n-    t: a_tag<u64>\n+    t: Tag<u64>\n }\n \n-fn mk_rec() -> t_rec {\n-    return t_rec { c8:0u8, t:a_tag(0u64) };\n+fn mk_rec() -> Rec {\n+    return Rec { c8:0u8, t:Tag(0u64) };\n }\n \n-fn is_8_byte_aligned(u: &a_tag<u64>) -> bool {\n-    let p = ptr::to_unsafe_ptr(u) as uint;\n+fn is_8_byte_aligned(u: &Tag<u64>) -> bool {\n+    let p: uint = unsafe { cast::transmute(u) };\n     return (p & 7u) == 0u;\n }\n "}, {"sha": "70590b768b1d671e00a57d23e7ff76dfd147af04", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "patch": "@@ -8,34 +8,36 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test #7340 fails on 32-bit linux\n-use std::ptr;\n+// ignore-linux #7340 fails on 32-bit linux\n+// ignore-macos #7340 fails on 32-bit macos\n \n-enum a_tag<A,B> {\n-    varA(A),\n-    varB(B)\n+use std::cast;\n+\n+enum Tag<A,B> {\n+    VarA(A),\n+    VarB(B),\n }\n \n-struct t_rec<A,B> {\n+struct Rec<A,B> {\n     chA: u8,\n-    tA: a_tag<A,B>,\n+    tA: Tag<A,B>,\n     chB: u8,\n-    tB: a_tag<A,B>\n+    tB: Tag<A,B>,\n }\n \n-fn mk_rec<A,B>(a: A, b: B) -> t_rec<A,B> {\n-    return t_rec{ chA:0u8, tA:varA(a), chB:1u8, tB:varB(b) };\n+fn mk_rec<A,B>(a: A, b: B) -> Rec<A,B> {\n+    Rec { chA:0u8, tA:VarA(a), chB:1u8, tB:VarB(b) }\n }\n \n fn is_aligned<A>(amnt: uint, u: &A) -> bool {\n-    let p = ptr::to_unsafe_ptr(u) as uint;\n+    let p: uint = unsafe { cast::transmute(u) };\n     return (p & (amnt-1u)) == 0u;\n }\n \n-fn variant_data_is_aligned<A,B>(amnt: uint, u: &a_tag<A,B>) -> bool {\n+fn variant_data_is_aligned<A,B>(amnt: uint, u: &Tag<A,B>) -> bool {\n     match u {\n-      &varA(ref a) => is_aligned(amnt, a),\n-      &varB(ref b) => is_aligned(amnt, b)\n+      &VarA(ref a) => is_aligned(amnt, a),\n+      &VarB(ref b) => is_aligned(amnt, b)\n     }\n }\n "}, {"sha": "4c126d68fef90ad0375dc52865c48f9f40f89d24", "filename": "src/test/run-pass/tag-align-u64.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be4c3372ab2208e3ae1ddec8b6f1231408265e2/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs?ref=0be4c3372ab2208e3ae1ddec8b6f1231408265e2", "patch": "@@ -8,25 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test #7340 fails on 32-bit linux\n-use std::ptr;\n+// ignore-linux #7340 fails on 32-bit linux\n+// ignore-macos #7340 fails on 32-bit macos\n \n-enum a_tag {\n-    a_tag(u64)\n+use std::cast;\n+\n+enum Tag {\n+    Tag(u64)\n }\n \n-struct t_rec {\n+struct Rec {\n     c8: u8,\n-    t: a_tag\n+    t: Tag\n }\n \n-fn mk_rec() -> t_rec {\n-    return t_rec { c8:0u8, t:a_tag(0u64) };\n+fn mk_rec() -> Rec {\n+    return Rec { c8:0u8, t:Tag(0u64) };\n }\n \n-fn is_8_byte_aligned(u: &a_tag) -> bool {\n-    let p = ptr::to_unsafe_ptr(u) as u64;\n-    return (p & 7u64) == 0u64;\n+fn is_8_byte_aligned(u: &Tag) -> bool {\n+    let p: uint = unsafe { cast::transmute(u) };\n+    return (p & 7u) == 0u;\n }\n \n pub fn main() {"}]}