{"sha": "77a2e9858b44598454aa6240475255cd5547d519", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YTJlOTg1OGI0NDU5ODQ1NGFhNjI0MDQ3NTI1NWNkNTU0N2Q1MTk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-19T10:31:29Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T02:37:33Z"}, "message": "Format source codes", "tree": {"sha": "254e585d3202349e1a0bacf57eb94fd8da5843e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254e585d3202349e1a0bacf57eb94fd8da5843e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a2e9858b44598454aa6240475255cd5547d519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a2e9858b44598454aa6240475255cd5547d519", "html_url": "https://github.com/rust-lang/rust/commit/77a2e9858b44598454aa6240475255cd5547d519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a2e9858b44598454aa6240475255cd5547d519/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ec5a7bac3f8bdda148307c576f41f2ca005828", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ec5a7bac3f8bdda148307c576f41f2ca005828", "html_url": "https://github.com/rust-lang/rust/commit/f2ec5a7bac3f8bdda148307c576f41f2ca005828"}], "stats": {"total": 83, "additions": 46, "deletions": 37}, "files": [{"sha": "aca96774d0660d4f0272c6efcaf6ec4e736659de", "filename": "build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -16,11 +16,11 @@ fn main() {\n     writeln!(f,\n              \"const COMMIT_HASH: Option<&'static str> = {:?};\",\n              git_head_sha1())\n-            .unwrap();\n+        .unwrap();\n     writeln!(f,\n              \"const WORKTREE_CLEAN: Option<bool> = {:?};\",\n              git_tree_is_clean())\n-            .unwrap();\n+        .unwrap();\n \n     // cargo:rerun-if-changed requires one entry per individual file.\n     for entry in WalkDir::new(\"src\") {"}, {"sha": "31953380a73d9dbfbe4bf3ceff18d4680c676792", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -120,7 +120,7 @@ fn format_expr(expr: &ast::Expr,\n                                 expr_type == ExprType::SubExpression,\n                                 false,\n                                 expr.span)\n-                    .rewrite(context, shape)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::IfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n             ControlFlow::new_if(cond,\n@@ -130,7 +130,7 @@ fn format_expr(expr: &ast::Expr,\n                                 expr_type == ExprType::SubExpression,\n                                 false,\n                                 expr.span)\n-                    .rewrite(context, shape)\n+                .rewrite(context, shape)\n         }\n         ast::ExprKind::Match(ref cond, ref arms) => {\n             rewrite_match(context, cond, arms, shape, expr.span)\n@@ -372,7 +372,7 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                              |item| item.rewrite(context, nested_shape),\n                              span.lo,\n                              span.hi)\n-            .collect::<Vec<_>>();\n+        .collect::<Vec<_>>();\n \n     if items.is_empty() {\n         if context.config.spaces_within_square_brackets() {\n@@ -716,7 +716,7 @@ impl Rewrite for ast::Stmt {\n                             },\n                             context,\n                             try_opt!(shape.sub_width(suffix.len())))\n-                        .map(|s| s + suffix)\n+                    .map(|s| s + suffix)\n             }\n             ast::StmtKind::Mac(..) |\n             ast::StmtKind::Item(..) => None,\n@@ -1012,7 +1012,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                                         false,\n                                         true,\n                                         mk_sp(else_block.span.lo, self.span.hi))\n-                            .rewrite(context, shape)\n+                        .rewrite(context, shape)\n                 }\n                 ast::ExprKind::If(ref cond, ref if_block, ref next_else_block) => {\n                     ControlFlow::new_if(cond,\n@@ -1022,7 +1022,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                                         false,\n                                         true,\n                                         mk_sp(else_block.span.lo, self.span.hi))\n-                            .rewrite(context, shape)\n+                        .rewrite(context, shape)\n                 }\n                 _ => {\n                     last_in_chain = true;\n@@ -1065,7 +1065,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                                 .as_ref()\n                                 .map_or(between_sep, |s| &**s),\n                             after_else_comment.as_ref().map_or(after_sep, |s| &**s))\n-                             .ok());\n+                         .ok());\n             result.push_str(&try_opt!(rewrite));\n         }\n "}, {"sha": "f98cf9507e1c72151e16b03dc81a93c2d480f9fa", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -332,7 +332,7 @@ impl<'a> FmtVisitor<'a> {\n                             let suffix = if semicolon_for_expr(e) { \";\" } else { \"\" };\n \n                             e.rewrite(&self.get_context(),\n-                                         Shape::indented(self.block_indent, self.config))\n+                                      Shape::indented(self.block_indent, self.config))\n                                 .map(|s| s + suffix)\n                                 .or_else(|| Some(self.snippet(e.span)))\n                         }\n@@ -376,7 +376,7 @@ impl<'a> FmtVisitor<'a> {\n                                            enum_def.variants.is_empty(),\n                                            self.block_indent,\n                                            mk_sp(span.lo, body_start))\n-                .unwrap();\n+            .unwrap();\n         self.buffer.push_str(&generics_str);\n \n         self.last_pos = body_start;\n@@ -941,7 +941,7 @@ fn format_struct_struct(context: &RewriteContext,\n                      |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n                      context.codemap.span_after(span, \"{\"),\n                      span.hi)\n-                .collect::<Vec<_>>();\n+            .collect::<Vec<_>>();\n     // 1 = ,\n     let budget = context.config.max_width() - offset.width() + context.config.tab_spaces() - 1;\n \n@@ -1295,7 +1295,7 @@ pub fn rewrite_static(prefix: &str,\n                            lhs,\n                            expr,\n                            Shape::legacy(remaining_width, offset.block_only()))\n-                .map(|s| s + \";\")\n+            .map(|s| s + \";\")\n     } else {\n         let lhs = format!(\"{}{};\", prefix, ty_str);\n         Some(lhs)"}, {"sha": "3448f8a446a2390c0ed80918163bb723d7406401", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -266,7 +266,8 @@ pub fn write_list<I, T>(items: I, formatting: &ListFormatting) -> Option<String>\n         // Post-comments\n         if tactic != DefinitiveListTactic::Vertical && item.post_comment.is_some() {\n             let comment = item.post_comment.as_ref().unwrap();\n-            let formatted_comment = try_opt!(rewrite_comment(comment,\n+            let formatted_comment =\n+                try_opt!(rewrite_comment(comment,\n                                          true,\n                                          Shape::legacy(formatting.shape.width, Indent::empty()),\n                                          formatting.config));"}, {"sha": "d6157cd6a29add6b7a792dd2e30b3a6c5f96cd53", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -163,7 +163,7 @@ impl<'a> FmtVisitor<'a> {\n                                                           Shape::legacy(comment_width,\n                                                                         self.block_indent),\n                                                           self.config)\n-                                                 .unwrap());\n+                                             .unwrap());\n \n                     last_wspace = None;\n                     line_start = offset + subslice.len();"}, {"sha": "afea0ddb2992425cfa06a48cc7ef2b82eeed57fe", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -293,7 +293,7 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n                                          |item| item.rewrite(context, nested_shape),\n                                          context.codemap.span_after(span, \"(\"),\n                                          span.hi - BytePos(1))\n-            .collect();\n+        .collect();\n \n     // Condense wildcard string suffix into a single ..\n     let wildcard_suffix_len = count_wildcard_suffix_len(&items);"}, {"sha": "570755d4441e9380e9846783a897bde7e151094c", "filename": "src/types.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -364,7 +364,9 @@ impl Rewrite for ast::WherePredicate {\n                 let colon = type_bound_colon(context);\n \n                 if !bound_lifetimes.is_empty() {\n-                    let lifetime_str: String = try_opt!(bound_lifetimes.iter()\n+                    let lifetime_str: String =\n+                        try_opt!(bound_lifetimes\n+                                     .iter()\n                                      .map(|lt| lt.rewrite(context, shape))\n                                      .intersperse(Some(\", \".to_string()))\n                                      .collect());\n@@ -376,14 +378,17 @@ impl Rewrite for ast::WherePredicate {\n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(bounds.iter()\n-                                                    .map(|ty_bound| {\n-                                                        ty_bound.rewrite(context,\n-                                                                         Shape::legacy(budget,\n-                                                                         shape.indent + used_width))\n-                                                    })\n-                                                    .intersperse(Some(joiner.to_string()))\n-                                                    .collect());\n+                    let bounds_str: String =\n+                        try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| {\n+                                              ty_bound.rewrite(context,\n+                                                               Shape::legacy(budget,\n+                                                                             shape.indent +\n+                                                                             used_width))\n+                                          })\n+                                     .intersperse(Some(joiner.to_string()))\n+                                     .collect());\n \n                     if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n                         format!(\"for< {} > {}{}{}\",\n@@ -401,14 +406,17 @@ impl Rewrite for ast::WherePredicate {\n                     };\n                     let used_width = type_str.len() + colon.len();\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n-                    let bounds_str: String = try_opt!(bounds.iter()\n-                                                    .map(|ty_bound| {\n-                                                        ty_bound.rewrite(context,\n-                                                                         Shape::legacy(budget,\n-                                                                         shape.indent + used_width))\n-                                                    })\n-                                                    .intersperse(Some(joiner.to_string()))\n-                                                    .collect());\n+                    let bounds_str: String =\n+                        try_opt!(bounds\n+                                     .iter()\n+                                     .map(|ty_bound| {\n+                                              ty_bound.rewrite(context,\n+                                                               Shape::legacy(budget,\n+                                                                             shape.indent +\n+                                                                             used_width))\n+                                          })\n+                                     .intersperse(Some(joiner.to_string()))\n+                                     .collect());\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n                 }"}, {"sha": "96327ef96a75db02ad0563218d7da00af7a064eb", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77a2e9858b44598454aa6240475255cd5547d519/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a2e9858b44598454aa6240475255cd5547d519/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=77a2e9858b44598454aa6240475255cd5547d519", "patch": "@@ -282,10 +282,10 @@ impl<'a> FmtVisitor<'a> {\n                                            item.span,\n                                            indent,\n                                            None)\n-                            .map(|s| match *def {\n-                                     ast::VariantData::Tuple(..) => s + \";\",\n-                                     _ => s,\n-                                 })\n+                        .map(|s| match *def {\n+                                 ast::VariantData::Tuple(..) => s + \";\",\n+                                 _ => s,\n+                             })\n                 };\n                 self.push_rewrite(item.span, rewrite);\n             }"}]}