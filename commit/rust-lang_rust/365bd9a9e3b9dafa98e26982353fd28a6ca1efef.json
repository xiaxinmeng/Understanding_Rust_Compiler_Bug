{"sha": "365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NWJkOWE5ZTNiOWRhZmE5OGUyNjk4MjM1M2ZkMjhhNmNhMWVmZWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:39:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T23:27:42Z"}, "message": "Round 1 fixes and rebase conflicts", "tree": {"sha": "a4d25ce7c59172f76f94d27077389854c55f8bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d25ce7c59172f76f94d27077389854c55f8bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "html_url": "https://github.com/rust-lang/rust/commit/365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64dfff326a0e248227c5782eccce7ca8b02f66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b64dfff326a0e248227c5782eccce7ca8b02f66c", "html_url": "https://github.com/rust-lang/rust/commit/b64dfff326a0e248227c5782eccce7ca8b02f66c"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "11c576eab152551c274b9036b4ac99a5ee30ae39", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -925,7 +925,7 @@ impl Default for BitVec {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<bool> for BitVec {\n     fn from_iter<I: IntoIterator<Item=bool>>(iter: I) -> BitVec {\n-        let mut ret = Bitv::new();\n+        let mut ret = BitVec::new();\n         ret.extend(iter);\n         ret\n     }\n@@ -1146,7 +1146,7 @@ impl Default for BitSet {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<usize> for BitSet {\n     fn from_iter<I: IntoIterator<Item=usize>>(iter: I) -> BitSet {\n-        let mut ret = BitvSet::new();\n+        let mut ret = BitSet::new();\n         ret.extend(iter);\n         ret\n     }"}, {"sha": "194c0dc4f28ea235bef6d58648bbc2711d77a4a8", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -522,11 +522,11 @@ pub trait IteratorExt: Iterator + Sized {\n     ///\n     /// let a = [1, 4, 2, 3, 8, 9, 6];\n     /// let sum = a.iter()\n-    ///             .cloned()\n-    ///             .inspect(|&x| println!(\"filtering {}\", x))\n-    ///             .filter(|&x| x % 2 == 0)\n-    ///             .inspect(|&x| println!(\"{} made it through\", x))\n-    ///             .sum();\n+    ///            .map(|x| *x)\n+    ///            .inspect(|&x| println!(\"filtering {}\", x))\n+    ///            .filter(|&x| x % 2 == 0)\n+    ///            .inspect(|&x| println!(\"{} made it through\", x))\n+    ///            .sum();\n     /// println!(\"{}\", sum);\n     /// ```\n     #[inline]"}, {"sha": "9b6af182f729c291751d2db896acfbc4e5c74200", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -23,7 +23,6 @@ impl Default for MyHasher {\n }\n \n impl Hasher for MyHasher {\n-    type Output = u64;\n     fn write(&mut self, buf: &[u8]) {\n         for byte in buf {\n             self.hash += *byte as u64;\n@@ -85,7 +84,6 @@ struct Custom { hash: u64 }\n struct CustomHasher { output: u64 }\n \n impl Hasher for CustomHasher {\n-    type Output = u64;\n     fn finish(&self) -> u64 { self.output }\n     fn write(&mut self, data: &[u8]) { panic!() }\n     fn write_u64(&mut self, data: u64) { self.output = data; }"}, {"sha": "7b59e0258ee224c4ec6cdd91e4c012afa800c072", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -426,7 +426,7 @@ pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     Br(bcx, loop_bcx.llbb, DebugLoc::None);\n \n     let loop_counter = Phi(loop_bcx, bcx.ccx().int_type(),\n-                           &[C_uint(bcx.ccx(), 0)], &[bcx.llbb]);\n+                           &[C_uint(bcx.ccx(), 0 as usize)], &[bcx.llbb]);\n \n     let bcx = loop_bcx;\n "}, {"sha": "ad91c3cb2c35b60e4b023c655ef8486403ebfd12", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -112,7 +112,7 @@ mod imp {\n \n     impl Lock {\n         pub fn new(p: &Path) -> Lock {\n-            let buf = CString::from_slice(p.as_vec()).unwrap();\n+            let buf = CString::new(p.as_vec()).unwrap();\n             let fd = unsafe {\n                 libc::open(buf.as_ptr(), libc::O_RDWR | libc::O_CREAT,\n                            libc::S_IRWXU)"}, {"sha": "7ea5bd569e1996df853eeccd1e550b3a6309e49e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -236,7 +236,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                 s.push_str(&highlight::highlight(&text,\n                                                  None,\n                                                  Some(\"rust-example-rendered\")));\n-                let output = CString::from_vec(s.into_bytes()).unwrap();\n+                let output = CString::new(s).unwrap();\n                 hoedown_buffer_puts(ob, output.as_ptr());\n             })\n         }\n@@ -293,7 +293,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                                format!(\"{} \", sec)\n                            });\n \n-        let text = CString::from_vec(text.into_bytes()).unwrap();\n+        let text = CString::new(text).unwrap();\n         unsafe { hoedown_buffer_puts(ob, text.as_ptr()) }\n     }\n "}, {"sha": "8ae195cf991d36901c1fd58688486ada765ad2bc", "filename": "src/libstd/collections/hash/map_stage0.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibstd%2Fcollections%2Fhash%2Fmap_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibstd%2Fcollections%2Fhash%2Fmap_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap_stage0.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -1552,7 +1552,8 @@ impl<K, V, S, H> FromIterator<(K, V)> for HashMap<K, V, S>\n           S: HashState<Hasher=H> + Default,\n           H: hash::Hasher<Output=u64>\n {\n-    fn from_iter<T: Iterator<Item=(K, V)>>(iter: T) -> HashMap<K, V, S> {\n+    fn from_iter<T: IntoIterator<Item=(K, V)>>(iter: T) -> HashMap<K, V, S> {\n+        let iter = iter.into_iter();\n         let lower = iter.size_hint().0;\n         let mut map = HashMap::with_capacity_and_hash_state(lower,\n                                                             Default::default());\n@@ -1567,7 +1568,7 @@ impl<K, V, S, H> Extend<(K, V)> for HashMap<K, V, S>\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n-    fn extend<T: Iterator<Item=(K, V)>>(&mut self, iter: T) {\n+    fn extend<T: IntoIterator<Item=(K, V)>>(&mut self, iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "9d615d0c3ffcacc338df47d1c4737b49a8fbf63f", "filename": "src/libstd/collections/hash/set_stage0.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibstd%2Fcollections%2Fhash%2Fset_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibstd%2Fcollections%2Fhash%2Fset_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset_stage0.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -622,7 +622,8 @@ impl<T, S, H> FromIterator<T> for HashSet<T, S>\n           S: HashState<Hasher=H> + Default,\n           H: hash::Hasher<Output=u64>\n {\n-    fn from_iter<I: Iterator<Item=T>>(iter: I) -> HashSet<T, S> {\n+    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> HashSet<T, S> {\n+        let iter = iter.into_iter();\n         let lower = iter.size_hint().0;\n         let mut set = HashSet::with_capacity_and_hash_state(lower, Default::default());\n         set.extend(iter);\n@@ -636,7 +637,7 @@ impl<T, S, H> Extend<T> for HashSet<T, S>\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n-    fn extend<I: Iterator<Item=T>>(&mut self, iter: I) {\n+    fn extend<I: IntoIterator<Item=T>>(&mut self, iter: I) {\n         for k in iter {\n             self.insert(k);\n         }"}, {"sha": "8976813d3f91e9681a84f48d8ca552733319ff6c", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -105,7 +105,7 @@ pub struct CString {\n /// }\n ///\n /// fn main() {\n-///     let s = CString::from_slice(b\"data data data data\").unwrap();\n+///     let s = CString::new(\"data data data data\").unwrap();\n ///     work(&s);\n /// }\n /// ```\n@@ -141,7 +141,7 @@ impl CString {\n     /// extern { fn puts(s: *const libc::c_char); }\n     ///\n     /// fn main() {\n-    ///     let to_print = CString::from_slice(b\"Hello!\").unwrap();\n+    ///     let to_print = CString::new(\"Hello!\").unwrap();\n     ///     unsafe {\n     ///         puts(to_print.as_ptr());\n     ///     }\n@@ -175,7 +175,7 @@ impl CString {\n     /// extern { fn puts(s: *const libc::c_char); }\n     ///\n     /// fn main() {\n-    ///     let to_print = CString::from_slice(b\"Hello!\").unwrap();\n+    ///     let to_print = CString::new(\"Hello!\").unwrap();\n     ///     unsafe {\n     ///         puts(to_print.as_ptr());\n     ///     }\n@@ -436,18 +436,18 @@ mod tests {\n \n     #[test]\n     fn simple() {\n-        let s = CString::from_slice(b\"1234\").unwrap();\n+        let s = CString::new(b\"1234\").unwrap();\n         assert_eq!(s.as_bytes(), b\"1234\");\n         assert_eq!(s.as_bytes_with_nul(), b\"1234\\0\");\n     }\n \n     #[test]\n     fn build_with_zero1() {\n-        assert!(CString::from_slice(b\"\\0\").is_err());\n+        assert!(CString::new(b\"\\0\").is_err());\n     }\n     #[test]\n     fn build_with_zero2() {\n-        assert!(CString::from_vec(vec![0]).is_err());\n+        assert!(CString::new(vec![0]).is_err());\n     }\n \n     #[test]\n@@ -460,7 +460,7 @@ mod tests {\n \n     #[test]\n     fn formatted() {\n-        let s = CString::from_slice(b\"12\").unwrap();\n+        let s = CString::new(b\"12\").unwrap();\n         assert_eq!(format!(\"{:?}\", s), \"\\\"12\\\"\");\n     }\n "}, {"sha": "7bb9f042fe891ee418b2112c7f522f82fa54bbd7", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -13,11 +13,11 @@\n #![feature(box_syntax)]\n \n extern crate collections;\n-use std::collections::Bitv;\n+use std::collections::BitVec;\n \n fn bitv_test() {\n-    let mut v1 = box Bitv::from_elem(31, false);\n-    let v2 = box Bitv::from_elem(31, true);\n+    let mut v1 = box BitVec::from_elem(31, false);\n+    let v2 = box BitVec::from_elem(31, true);\n     v1.union(&*v2);\n }\n "}, {"sha": "6246ee9c6c41a9ad4bdcd7c94cc8c8a1dfa9c82f", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -24,12 +24,12 @@ mod mlibc {\n }\n \n fn atol(s: String) -> int {\n-    let c = CString::from_slice(s.as_bytes()).unwrap();\n+    let c = CString::new(s).unwrap();\n     unsafe { mlibc::atol(c.as_ptr()) as int }\n }\n \n fn atoll(s: String) -> i64 {\n-    let c = CString::from_slice(s.as_bytes()).unwrap();\n+    let c = CString::new(s).unwrap();\n     unsafe { mlibc::atoll(c.as_ptr()) as i64 }\n }\n "}, {"sha": "e9d10536b75a1085e47202605851bc3306212209", "filename": "src/test/run-pass/const-polymorphic-paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fconst-polymorphic-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fconst-polymorphic-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-polymorphic-paths.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -11,7 +11,7 @@\n #![feature(macro_rules)]\n \n use std::borrow::{Cow, IntoCow};\n-use std::collections::Bitv;\n+use std::collections::BitVec;\n use std::default::Default;\n use std::iter::FromIterator;\n use std::ops::Add;\n@@ -63,8 +63,8 @@ tests! {\n     Vec::<()>::new, fn() -> Vec<()>, ();\n     Vec::with_capacity, fn(uint) -> Vec<()>, (5);\n     Vec::<()>::with_capacity, fn(uint) -> Vec<()>, (5);\n-    Bitv::from_fn, fn(uint, fn(uint) -> bool) -> Bitv, (5, odd);\n-    Bitv::from_fn::<fn(uint) -> bool>, fn(uint, fn(uint) -> bool) -> Bitv, (5, odd);\n+    BitVec::from_fn, fn(uint, fn(uint) -> bool) -> BitVec, (5, odd);\n+    BitVec::from_fn::<fn(uint) -> bool>, fn(uint, fn(uint) -> bool) -> BitVec, (5, odd);\n \n     // Inherent non-static method.\n     Vec::map_in_place, fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>, (vec![b'f', b'o', b'o'], u8_as_i8);"}, {"sha": "24b711328a18ab0fb5681e0de0d07b15d844f3d1", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -24,7 +24,7 @@ mod mlibc {\n \n fn strlen(str: String) -> uint {\n     // C string is terminated with a zero\n-    let s = CString::from_slice(str.as_bytes()).unwrap();\n+    let s = CString::new(str).unwrap();\n     unsafe {\n         mlibc::my_strlen(s.as_ptr()) as uint\n     }"}, {"sha": "b901e95ff55edb453c6a7b8642af99e394850d67", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -10,13 +10,13 @@\n \n extern crate collections;\n \n-use std::collections::Bitv;\n+use std::collections::BitVec;\n use std::num::Float;\n \n fn main() {\n     // Generate sieve of Eratosthenes for n up to 1e6\n     let n = 1000000_usize;\n-    let mut sieve = Bitv::from_elem(n+1, true);\n+    let mut sieve = BitVec::from_elem(n+1, true);\n     let limit: uint = (n as f32).sqrt() as uint;\n     for i in 2..limit+1 {\n         if sieve[i] {"}, {"sha": "a5a05283f80fde1f97420b3d90fe724bb63f414d", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -10,9 +10,9 @@\n // except according to those terms.\n \n extern crate collections;\n-use std::collections::RingBuf;\n+use std::collections::VecDeque;\n \n pub fn main() {\n-    let mut q = RingBuf::new();\n+    let mut q = VecDeque::new();\n     q.push_front(10);\n }"}, {"sha": "abe6ffe7d4ccaabdbac3ef7d7bf4a63cf364ba78", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -31,12 +31,12 @@ fn rename_directory() {\n         let test_file = &old_path.join(\"temp.txt\");\n \n         /* Write the temp input file */\n-        let fromp = CString::from_slice(test_file.as_vec()).unwrap();\n-        let modebuf = CString::from_slice(b\"w+b\").unwrap();\n+        let fromp = CString::new(test_file.as_vec()).unwrap();\n+        let modebuf = CString::new(b\"w+b\").unwrap();\n         let ostream = libc::fopen(fromp.as_ptr(), modebuf.as_ptr());\n         assert!((ostream as uint != 0_usize));\n         let s = \"hello\".to_string();\n-        let buf = CString::from_slice(b\"hello\").unwrap();\n+        let buf = CString::new(b\"hello\").unwrap();\n         let write_len = libc::fwrite(buf.as_ptr() as *mut _,\n                                      1_usize as libc::size_t,\n                                      (s.len() + 1_usize) as libc::size_t,"}, {"sha": "5a476ed9ee2f89958d02a0cbb6abd8537eace2d0", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365bd9a9e3b9dafa98e26982353fd28a6ca1efef/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=365bd9a9e3b9dafa98e26982353fd28a6ca1efef", "patch": "@@ -29,11 +29,11 @@ pub fn main() {\n \n     unsafe {\n         // Call with just the named parameter\n-        let c = CString::from_slice(b\"Hello World\\n\").unwrap();\n+        let c = CString::new(b\"Hello World\\n\").unwrap();\n         check(\"Hello World\\n\", |s| sprintf(s, c.as_ptr()));\n \n         // Call with variable number of arguments\n-        let c = CString::from_slice(b\"%d %f %c %s\\n\").unwrap();\n+        let c = CString::new(b\"%d %f %c %s\\n\").unwrap();\n         check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n             sprintf(s, c.as_ptr(), 42, 42.5f64, 'a' as c_int, c.as_ptr());\n         });\n@@ -44,11 +44,11 @@ pub fn main() {\n         // A function that takes a function pointer\n         unsafe fn call(p: unsafe extern fn(*mut c_char, *const c_char, ...) -> c_int) {\n             // Call with just the named parameter\n-            let c = CString::from_slice(b\"Hello World\\n\").unwrap();\n+            let c = CString::new(b\"Hello World\\n\").unwrap();\n             check(\"Hello World\\n\", |s| sprintf(s, c.as_ptr()));\n \n             // Call with variable number of arguments\n-            let c = CString::from_slice(b\"%d %f %c %s\\n\").unwrap();\n+            let c = CString::new(b\"%d %f %c %s\\n\").unwrap();\n             check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n                 sprintf(s, c.as_ptr(), 42, 42.5f64, 'a' as c_int, c.as_ptr());\n             });"}]}