{"sha": "05399250d47cdceffbf1ded08983b13a9dcc87c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Mzk5MjUwZDQ3Y2RjZWZmYmYxZGVkMDg5ODNiMTNhOWRjYzg3YzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-11T12:21:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-11T12:21:08Z"}, "message": "Merge #4421\n\n4421: Find references to a function outside module r=flodiebold a=montekki\n\nFixes #4188 \r\n\r\nYet again, it looks like although the code in \r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/da1f316b0246ce41d7cb8560181e294089f06ef3/crates/ra_ide_db/src/search.rs#L128-L132\r\n\r\nmay be wrong, it is not hit since the `vis` is `None` at this point. The fix is similar to the #4237 case: just add another special case to `Definition::visibility()`.\n\nCo-authored-by: Fedor Sakharov <fedor.sakharov@gmail.com>", "tree": {"sha": "c3165d3c3236893c23deb881a792c2c34be2e2bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3165d3c3236893c23deb881a792c2c34be2e2bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05399250d47cdceffbf1ded08983b13a9dcc87c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeuUM0CRBK7hj4Ov3rIwAAdHIIAC2r1HR5G8L0yv0YczwXfEJd\njy9hkBsy+Jl/Di2vr/xyrQZAwf/OKumdgr/TtIG2RdFq1NLxu+fFjmhgGomOairB\n86aru8Y1RQ3MCHwed8iaiNshAgHwPnWJUjqGTCaOSgAXGmW3xkmA+WV9Rj8JNirr\nqCcNCoPhBK671IIX27alZCkbu8/e83sknczYO9BWIV12JP8AODEb7zIeygD68s/S\nnoKudh/MhyRQllkMuGied3/2TtQpB4rXfVaBpKcATEJ8r+u3wZ075v6WUl8uQboO\neHZJ+vAkoaTH86N98T8j7ftm5Ko7J/BKJQe/L7bnQoFO6FrRaW0U2of9zW3aKxk=\n=+BjU\n-----END PGP SIGNATURE-----\n", "payload": "tree c3165d3c3236893c23deb881a792c2c34be2e2bf\nparent eb892d707c379eff514df9c2a6b2203f38874b14\nparent 3d66aa054230ad788162ce49f0d334e900458cac\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589199668 +0000\ncommitter GitHub <noreply@github.com> 1589199668 +0000\n\nMerge #4421\n\n4421: Find references to a function outside module r=flodiebold a=montekki\n\nFixes #4188 \r\n\r\nYet again, it looks like although the code in \r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/da1f316b0246ce41d7cb8560181e294089f06ef3/crates/ra_ide_db/src/search.rs#L128-L132\r\n\r\nmay be wrong, it is not hit since the `vis` is `None` at this point. The fix is similar to the #4237 case: just add another special case to `Definition::visibility()`.\n\nCo-authored-by: Fedor Sakharov <fedor.sakharov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05399250d47cdceffbf1ded08983b13a9dcc87c1", "html_url": "https://github.com/rust-lang/rust/commit/05399250d47cdceffbf1ded08983b13a9dcc87c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05399250d47cdceffbf1ded08983b13a9dcc87c1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb892d707c379eff514df9c2a6b2203f38874b14", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb892d707c379eff514df9c2a6b2203f38874b14", "html_url": "https://github.com/rust-lang/rust/commit/eb892d707c379eff514df9c2a6b2203f38874b14"}, {"sha": "3d66aa054230ad788162ce49f0d334e900458cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d66aa054230ad788162ce49f0d334e900458cac", "html_url": "https://github.com/rust-lang/rust/commit/3d66aa054230ad788162ce49f0d334e900458cac"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "e8e3211fcd50e50bc7cf8de11bd890ed0718e9c4", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05399250d47cdceffbf1ded08983b13a9dcc87c1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05399250d47cdceffbf1ded08983b13a9dcc87c1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=05399250d47cdceffbf1ded08983b13a9dcc87c1", "patch": "@@ -148,6 +148,26 @@ impl ModuleDef {\n             ModuleDef::BuiltinType(_) => None,\n         }\n     }\n+\n+    pub fn definition_visibility(&self, db: &dyn HirDatabase) -> Option<Visibility> {\n+        let module = match self {\n+            ModuleDef::Module(it) => it.parent(db)?,\n+            ModuleDef::Function(it) => return Some(it.visibility(db)),\n+            ModuleDef::Adt(it) => it.module(db),\n+            ModuleDef::EnumVariant(it) => {\n+                let parent = it.parent_enum(db);\n+                let module = it.module(db);\n+                return module.visibility_of(db, &ModuleDef::Adt(Adt::Enum(parent)));\n+            }\n+            ModuleDef::Const(it) => return Some(it.visibility(db)),\n+            ModuleDef::Static(it) => it.module(db),\n+            ModuleDef::Trait(it) => it.module(db),\n+            ModuleDef::TypeAlias(it) => return Some(it.visibility(db)),\n+            ModuleDef::BuiltinType(_) => return None,\n+        };\n+\n+        module.visibility_of(db, self)\n+    }\n }\n \n pub use hir_def::{"}, {"sha": "074284b42e28d5a422540944e83e9bc40c4e1b5f", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05399250d47cdceffbf1ded08983b13a9dcc87c1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05399250d47cdceffbf1ded08983b13a9dcc87c1/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=05399250d47cdceffbf1ded08983b13a9dcc87c1", "patch": "@@ -593,6 +593,31 @@ mod tests {\n         check_result(refs, \"i BIND_PAT FileId(1) 36..37 Other\", &[\"FileId(1) 51..52 Other Write\"]);\n     }\n \n+    #[test]\n+    fn test_find_struct_function_refs_outside_module() {\n+        let code = r#\"\n+        mod foo {\n+            pub struct Foo;\n+\n+            impl Foo {\n+                pub fn new<|>() -> Foo {\n+                    Foo\n+                }\n+            }\n+        }\n+\n+        fn main() {\n+            let _f = foo::Foo::new();\n+        }\"#;\n+\n+        let refs = get_all_refs(code);\n+        check_result(\n+            refs,\n+            \"new FN_DEF FileId(1) 87..150 94..97 Other\",\n+            &[\"FileId(1) 227..230 StructLiteral\"],\n+        );\n+    }\n+\n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n         analysis.find_all_refs(position, None).unwrap().unwrap()"}, {"sha": "60c11178eea63b3f1025596da654d6501938e496", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05399250d47cdceffbf1ded08983b13a9dcc87c1/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05399250d47cdceffbf1ded08983b13a9dcc87c1/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=05399250d47cdceffbf1ded08983b13a9dcc87c1", "patch": "@@ -6,7 +6,7 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Adt, Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n     Semantics, TypeParam, Visibility,\n };\n use ra_prof::profile;\n@@ -42,18 +42,10 @@ impl Definition {\n     }\n \n     pub fn visibility(&self, db: &RootDatabase) -> Option<Visibility> {\n-        let module = self.module(db);\n-\n         match self {\n             Definition::Macro(_) => None,\n             Definition::Field(sf) => Some(sf.visibility(db)),\n-            Definition::ModuleDef(def) => match def {\n-                ModuleDef::EnumVariant(id) => {\n-                    let parent = id.parent_enum(db);\n-                    module?.visibility_of(db, &ModuleDef::Adt(Adt::Enum(parent)))\n-                }\n-                _ => module?.visibility_of(db, def),\n-            },\n+            Definition::ModuleDef(def) => def.definition_visibility(db),\n             Definition::SelfType(_) => None,\n             Definition::Local(_) => None,\n             Definition::TypeParam(_) => None,"}]}