{"sha": "129b914bdc9bac5c10181d1e87f722be15cb627c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOWI5MTRiZGM5YmFjNWMxMDE4MWQxZTg3ZjcyMmJlMTVjYjYyN2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T13:58:58Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T13:58:58Z"}, "message": "`int_align` has no dynamic error case", "tree": {"sha": "94ffe655ba52979ad65f509a7b56a3d91e90ed1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ffe655ba52979ad65f509a7b56a3d91e90ed1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/129b914bdc9bac5c10181d1e87f722be15cb627c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmkIbEACgkQpp+NIls6\n19lPzBAAocoD5DWED1eq2Epyxa2ush+fe5B1r1STXLDcLkWwpJY1/fJzGKAC352D\nxel+NW+pkZSlnNh/U835SjoaK32VMiQrkBMTw/49D/nWLF7zMKDeg0DkaQ7cbbnq\n9ssVuCA2OVdeaXFgEVWKgKZh8E5qUZbITzkaeZWML+4xZbqToIr0jVMbFwdncKNO\nqMHW7IX9s8A+5oyfaP4MqoXv8qe1jL6YyshOIwnPe3rvmR0lGx1WImzJE6aYysFq\n1lgPaWVDYZsG6hEZEPyFQOQI5Kv55cdONq/u7zbFX9/72aRwabI0ygVkGfUWO9S2\nEWR/+6IlwikciB1CCnAr2gNFkgS8WkqCAXYMvJEVZFiewS4MNeSS5gXULzXEdivk\nqDrw2/x8s7qgwJE7bJHKd4cSnSDflBHYk4jhA7PWXqGxsG5bwLsNKkKnMsekx4To\nmuOQaNBKnqsutdSR0Z+iHbDGggsNCCplJTaYgec61T6YCW2D/tjBnznCiScCZMDU\nAZdks1droVvWHWuMFWW3Afzy/bOugjVWGA2FiL+ETiRdUhCsHitREmjjZewtIUHn\ntRISPWdlscenF07MAkOe5qRLfn+jQ8HWUUiWfwnza15V/N2868MIHfLF1lQD3eAR\nZSP1kZUuP47+yg64rMIGOyVu60eJgQjZmkoP9H+v01R7V7i0mQo=\n=+d0r\n-----END PGP SIGNATURE-----", "payload": "tree 94ffe655ba52979ad65f509a7b56a3d91e90ed1c\nparent e53e9b9e63be157efeac9212dc05b3e9c8d0fd19\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503928738 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503928738 +0200\n\n`int_align` has no dynamic error case\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/129b914bdc9bac5c10181d1e87f722be15cb627c", "html_url": "https://github.com/rust-lang/rust/commit/129b914bdc9bac5c10181d1e87f722be15cb627c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/129b914bdc9bac5c10181d1e87f722be15cb627c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "html_url": "https://github.com/rust-lang/rust/commit/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "adca51acba628410c21e25c5e7af41a2bbe536e1", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/129b914bdc9bac5c10181d1e87f722be15cb627c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129b914bdc9bac5c10181d1e87f722be15cb627c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=129b914bdc9bac5c10181d1e87f722be15cb627c", "patch": "@@ -1174,7 +1174,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     pub fn read_primval(&self, ptr: MemoryPointer, size: u64, signed: bool) -> EvalResult<'tcx, PrimVal> {\n         self.check_relocation_edges(ptr, size)?; // Make sure we don't read part of a pointer as a pointer\n         let endianess = self.endianess();\n-        let bytes = self.get_bytes_unchecked(ptr, size, self.int_align(size)?)?;\n+        let bytes = self.get_bytes_unchecked(ptr, size, self.int_align(size))?;\n         // Undef check happens *after* we established that the alignment is correct.\n         // We must not return Ok() for unaligned pointers!\n         if self.check_defined(ptr, size).is_err() {\n@@ -1207,7 +1207,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n     }\n \n     pub fn write_primval(&mut self, ptr: MemoryPointer, val: PrimVal, size: u64, signed: bool) -> EvalResult<'tcx> {\n-        let align = self.int_align(size)?;\n         let endianess = self.endianess();\n \n         let bytes = match val {\n@@ -1237,6 +1236,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         };\n \n         {\n+            let align = self.int_align(size);\n             let dst = self.get_bytes_mut(ptr, size, align)?;\n             if signed {\n                 write_target_int(endianess, dst, bytes as i128).unwrap();\n@@ -1264,15 +1264,15 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         self.write_primval(ptr, val, ptr_size, false)\n     }\n \n-    fn int_align(&self, size: u64) -> EvalResult<'tcx, u64> {\n+    fn int_align(&self, size: u64) -> u64 {\n         // We assume pointer-sized integers have the same alignment as pointers.\n-        // We also assume singed and unsigned integers of the same size have the same alignment.\n+        // We also assume signed and unsigned integers of the same size have the same alignment.\n         match size {\n-            1 => Ok(self.layout.i8_align.abi()),\n-            2 => Ok(self.layout.i16_align.abi()),\n-            4 => Ok(self.layout.i32_align.abi()),\n-            8 => Ok(self.layout.i64_align.abi()),\n-            16 => Ok(self.layout.i128_align.abi()),\n+            1 => self.layout.i8_align.abi(),\n+            2 => self.layout.i16_align.abi(),\n+            4 => self.layout.i32_align.abi(),\n+            8 => self.layout.i64_align.abi(),\n+            16 => self.layout.i128_align.abi(),\n             _ => bug!(\"bad integer size: {}\", size),\n         }\n     }"}]}