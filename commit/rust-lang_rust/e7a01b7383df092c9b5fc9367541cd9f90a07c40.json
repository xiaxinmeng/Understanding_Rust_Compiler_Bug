{"sha": "e7a01b7383df092c9b5fc9367541cd9f90a07c40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YTAxYjczODNkZjA5MmM5YjVmYzkzNjc1NDFjZDlmOTBhMDdjNDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-10T00:35:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-10T00:35:56Z"}, "message": "Introduce 'strict' keywords, that may not be used as idents anywhere", "tree": {"sha": "c3b1afef2fd960bff295773084a85317acd772e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b1afef2fd960bff295773084a85317acd772e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a01b7383df092c9b5fc9367541cd9f90a07c40", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a01b7383df092c9b5fc9367541cd9f90a07c40", "html_url": "https://github.com/rust-lang/rust/commit/e7a01b7383df092c9b5fc9367541cd9f90a07c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a01b7383df092c9b5fc9367541cd9f90a07c40/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c232025c2a175069de3dd30b52b0ac2dbc2f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c232025c2a175069de3dd30b52b0ac2dbc2f65", "html_url": "https://github.com/rust-lang/rust/commit/e0c232025c2a175069de3dd30b52b0ac2dbc2f65"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "c2ed8a7d9d6c2886523e14f7665c240af2c6f5b7", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7a01b7383df092c9b5fc9367541cd9f90a07c40/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a01b7383df092c9b5fc9367541cd9f90a07c40/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=e7a01b7383df092c9b5fc9367541cd9f90a07c40", "patch": "@@ -84,6 +84,7 @@ impl parser: parser_common {\n     }\n \n     fn parse_ident() -> ast::ident {\n+        self.check_strict_keywords();\n         match copy self.token {\n           token::IDENT(i, _) => { self.bump(); return i; }\n           token::INTERPOLATED(token::nt_ident(*)) => { self.bug(\n@@ -183,6 +184,26 @@ impl parser: parser_common {\n         }\n     }\n \n+    fn is_strict_keyword(word: ~str) -> bool {\n+        self.strict_keywords.contains_key_ref(&word)\n+    }\n+\n+    fn check_strict_keywords() {\n+        match self.token {\n+          token::IDENT(_, false) => {\n+            let w = token_to_str(self.reader, self.token);\n+            self.check_strict_keywords_(w);\n+          }\n+          _ => ()\n+        }\n+    }\n+\n+    fn check_strict_keywords_(w: ~str) {\n+        if self.is_strict_keyword(w) {\n+            self.fatal(~\"found `\" + w + ~\"` in ident position\");\n+        }\n+    }\n+\n     fn expect_gt() {\n         if self.token == token::GT {\n             self.bump();"}, {"sha": "138b83f69f07b7778ea410a4ba9da49854e7fc62", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7a01b7383df092c9b5fc9367541cd9f90a07c40/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a01b7383df092c9b5fc9367541cd9f90a07c40/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e7a01b7383df092c9b5fc9367541cd9f90a07c40", "patch": "@@ -215,6 +215,7 @@ fn parser(sess: parse_sess, cfg: ast::crate_cfg,\n         quote_depth: 0u,\n         keywords: token::keyword_table(),\n         restricted_keywords: token::restricted_keyword_table(),\n+        strict_keywords: token::strict_keyword_table(),\n         obsolete_set: std::map::hashmap(),\n     }\n }\n@@ -235,6 +236,7 @@ struct parser {\n     interner: interner<@~str>,\n     keywords: hashmap<~str, ()>,\n     restricted_keywords: hashmap<~str, ()>,\n+    strict_keywords: hashmap<~str, ()>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice\n     obsolete_set: hashmap<ObsoleteSyntax, ()>,"}, {"sha": "5c719af41cd8ded2c1c79a17a3bf9324c9ac0065", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7a01b7383df092c9b5fc9367541cd9f90a07c40/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a01b7383df092c9b5fc9367541cd9f90a07c40/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e7a01b7383df092c9b5fc9367541cd9f90a07c40", "patch": "@@ -362,10 +362,11 @@ fn mk_fake_ident_interner() -> ident_interner {\n /**\n  * All the valid words that have meaning in the Rust language.\n  *\n- * Rust keywords are either 'contextual' or 'restricted'. Contextual\n- * keywords may be used as identifiers because their appearance in\n- * the grammar is unambiguous. Restricted keywords may not appear\n- * in positions that might otherwise contain _value identifiers_.\n+ * Rust keywords are either 'contextual', 'restricted', or 'strict, Contextual\n+ * keywords may be used as identifiers because their appearance in the grammar\n+ * is unambiguous. Restricted keywords may not appear in positions that might\n+ * otherwise contain _value identifiers_.  Strict keywords may not appear as\n+ * identifiers.\n  */\n fn keyword_table() -> hashmap<~str, ()> {\n     let keywords = str_hash();\n@@ -375,6 +376,9 @@ fn keyword_table() -> hashmap<~str, ()> {\n     for restricted_keyword_table().each_key |word| {\n         keywords.insert(word, ());\n     }\n+    for strict_keyword_table().each_key |word| {\n+        keywords.insert(word, ());\n+    }\n     keywords\n }\n \n@@ -430,6 +434,17 @@ fn restricted_keyword_table() -> hashmap<~str, ()> {\n     words\n }\n \n+/// Full keywords. May not appear anywhere else.\n+fn strict_keyword_table() -> hashmap<~str, ()> {\n+    let words = str_hash();\n+    let keys = ~[\n+    ];\n+    for keys.each |word| {\n+        words.insert(word, ());\n+    }\n+    words\n+}\n+\n impl binop : cmp::Eq {\n     pure fn eq(&&other: binop) -> bool {\n         (self as uint) == (other as uint)"}]}