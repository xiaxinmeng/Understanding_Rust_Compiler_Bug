{"sha": "797f2479974bfe0d759f4a2bd51dfef95b8d75cf", "node_id": "C_kwDOAAsO6NoAKDc5N2YyNDc5OTc0YmZlMGQ3NTlmNGEyYmQ1MWRmZWY5NWI4ZDc1Y2Y", "commit": {"author": {"name": "Arthur Carcano", "email": "arthur.carcano@ocamlpro.com", "date": "2023-01-10T10:38:53Z"}, "committer": {"name": "Arthur Carcano", "email": "arthur.carcano@ocamlpro.com", "date": "2023-01-12T11:21:35Z"}, "message": "Mark ZST as FFI-safe if all its fields are PhantomData\n\nModify the linting behavior and add the corresponding\nregression test", "tree": {"sha": "3867900fa0d1270dde151fc089accebb1a04bebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3867900fa0d1270dde151fc089accebb1a04bebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797f2479974bfe0d759f4a2bd51dfef95b8d75cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797f2479974bfe0d759f4a2bd51dfef95b8d75cf", "html_url": "https://github.com/rust-lang/rust/commit/797f2479974bfe0d759f4a2bd51dfef95b8d75cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797f2479974bfe0d759f4a2bd51dfef95b8d75cf/comments", "author": {"login": "krtab", "id": 53921575, "node_id": "MDQ6VXNlcjUzOTIxNTc1", "avatar_url": "https://avatars.githubusercontent.com/u/53921575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krtab", "html_url": "https://github.com/krtab", "followers_url": "https://api.github.com/users/krtab/followers", "following_url": "https://api.github.com/users/krtab/following{/other_user}", "gists_url": "https://api.github.com/users/krtab/gists{/gist_id}", "starred_url": "https://api.github.com/users/krtab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krtab/subscriptions", "organizations_url": "https://api.github.com/users/krtab/orgs", "repos_url": "https://api.github.com/users/krtab/repos", "events_url": "https://api.github.com/users/krtab/events{/privacy}", "received_events_url": "https://api.github.com/users/krtab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krtab", "id": 53921575, "node_id": "MDQ6VXNlcjUzOTIxNTc1", "avatar_url": "https://avatars.githubusercontent.com/u/53921575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krtab", "html_url": "https://github.com/krtab", "followers_url": "https://api.github.com/users/krtab/followers", "following_url": "https://api.github.com/users/krtab/following{/other_user}", "gists_url": "https://api.github.com/users/krtab/gists{/gist_id}", "starred_url": "https://api.github.com/users/krtab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krtab/subscriptions", "organizations_url": "https://api.github.com/users/krtab/orgs", "repos_url": "https://api.github.com/users/krtab/repos", "events_url": "https://api.github.com/users/krtab/events{/privacy}", "received_events_url": "https://api.github.com/users/krtab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b8590ef3bd1221830ec8a4131ea9d02b1636746", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8590ef3bd1221830ec8a4131ea9d02b1636746", "html_url": "https://github.com/rust-lang/rust/commit/2b8590ef3bd1221830ec8a4131ea9d02b1636746"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "8bceae08a03878ce25b781645921c5ea97d4a956", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/797f2479974bfe0d759f4a2bd51dfef95b8d75cf/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797f2479974bfe0d759f4a2bd51dfef95b8d75cf/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=797f2479974bfe0d759f4a2bd51dfef95b8d75cf", "patch": "@@ -878,39 +878,39 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     ) -> FfiResult<'tcx> {\n         use FfiResult::*;\n \n-        if def.repr().transparent() {\n+        let transparent_safety = def.repr().transparent().then(|| {\n             // Can assume that at most one field is not a ZST, so only check\n             // that field's type for FFI-safety.\n             if let Some(field) = transparent_newtype_field(self.cx.tcx, variant) {\n-                self.check_field_type_for_ffi(cache, field, substs)\n+                return self.check_field_type_for_ffi(cache, field, substs);\n             } else {\n                 // All fields are ZSTs; this means that the type should behave\n-                // like (), which is FFI-unsafe\n+                // like (), which is FFI-unsafe... except if all fields are PhantomData,\n+                // which is tested for below\n                 FfiUnsafe { ty, reason: fluent::lint_improper_ctypes_struct_zst, help: None }\n             }\n-        } else {\n-            // We can't completely trust repr(C) markings; make sure the fields are\n-            // actually safe.\n-            let mut all_phantom = !variant.fields.is_empty();\n-            for field in &variant.fields {\n-                match self.check_field_type_for_ffi(cache, &field, substs) {\n-                    FfiSafe => {\n-                        all_phantom = false;\n-                    }\n-                    FfiPhantom(..) if def.is_enum() => {\n-                        return FfiUnsafe {\n-                            ty,\n-                            reason: fluent::lint_improper_ctypes_enum_phantomdata,\n-                            help: None,\n-                        };\n-                    }\n-                    FfiPhantom(..) => {}\n-                    r => return r,\n+        });\n+        // We can't completely trust repr(C) markings; make sure the fields are\n+        // actually safe.\n+        let mut all_phantom = !variant.fields.is_empty();\n+        for field in &variant.fields {\n+            match self.check_field_type_for_ffi(cache, &field, substs) {\n+                FfiSafe => {\n+                    all_phantom = false;\n                 }\n+                FfiPhantom(..) if !def.repr().transparent() && def.is_enum() => {\n+                    return FfiUnsafe {\n+                        ty,\n+                        reason: fluent::lint_improper_ctypes_enum_phantomdata,\n+                        help: None,\n+                    };\n+                }\n+                FfiPhantom(..) => {}\n+                r => return transparent_safety.unwrap_or(r),\n             }\n-\n-            if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n         }\n+\n+        if all_phantom { FfiPhantom(ty) } else { transparent_safety.unwrap_or(FfiSafe) }\n     }\n \n     /// Checks if the given type is \"ffi-safe\" (has a stable, well-defined"}, {"sha": "7419d34580097c3d05d4b4df1c4dd3f77af69bdd", "filename": "tests/ui/lint/lint-ffi-safety-all-phantom.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/797f2479974bfe0d759f4a2bd51dfef95b8d75cf/tests%2Fui%2Flint%2Flint-ffi-safety-all-phantom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797f2479974bfe0d759f4a2bd51dfef95b8d75cf/tests%2Fui%2Flint%2Flint-ffi-safety-all-phantom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ffi-safety-all-phantom.rs?ref=797f2479974bfe0d759f4a2bd51dfef95b8d75cf", "patch": "@@ -0,0 +1,22 @@\n+// This is a regression test for issue https://github.com/rust-lang/rust/issues/106629.\n+// It ensures that transparent types where all fields are PhantomData are marked as\n+// FFI-safe.\n+\n+// check-pass\n+\n+#[repr(transparent)]\n+#[derive(Copy, Clone)]\n+struct MyPhantom(core::marker::PhantomData<u8>);\n+\n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub struct Bar {\n+    pub x: i32,\n+    _marker: MyPhantom,\n+}\n+\n+extern \"C\" {\n+    pub fn foo(bar: *mut Bar);\n+}\n+\n+fn main() {}"}]}