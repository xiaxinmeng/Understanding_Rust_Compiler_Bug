{"sha": "5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMjc5YTQwYWViYTRjM2RmOTY4YWEyZDdjMmNjYzM3ZjNkZmQ5ZGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-30T16:12:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-30T20:17:40Z"}, "message": "Merge branch 'hide-trait-map' into rollup", "tree": {"sha": "30f6b676fdce1c0340e6e21bba90b3a56f224047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30f6b676fdce1c0340e6e21bba90b3a56f224047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "html_url": "https://github.com/rust-lang/rust/commit/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16bbff0277e1b3463fdeb969179bb0da8db4eab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16bbff0277e1b3463fdeb969179bb0da8db4eab7", "html_url": "https://github.com/rust-lang/rust/commit/16bbff0277e1b3463fdeb969179bb0da8db4eab7"}, {"sha": "942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "html_url": "https://github.com/rust-lang/rust/commit/942c8dcf19f2766d1f76e387fdeb96f6435ef02c"}], "stats": {"total": 93, "additions": 75, "deletions": 18}, "files": [{"sha": "ea827fb3139a86a21dede30a567cb030dbd79903", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -62,6 +62,7 @@\n \n use hir::def_id::{CrateNum, DefId};\n use hir::map::DefPathHash;\n+use hir::HirId;\n \n use ich::Fingerprint;\n use ty::{TyCtxt, Instance, InstanceDef};\n@@ -528,6 +529,8 @@ define_dep_nodes!( <'tcx>\n     [] ExternCrate(DefId),\n     [] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },\n+    [] InScopeTraits(HirId),\n+    [] ModuleExports(HirId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "9c841022fcb8225df851b314d6473c3f702d393c", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -205,13 +205,15 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ast::N\n                 // corresponding entry in the `trait_map` we need to hash that.\n                 // Make sure we don't ignore too much by checking that there is\n                 // no entry in a debug_assert!().\n-                debug_assert!(hcx.tcx.trait_map.get(self).is_none());\n+                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n+                debug_assert!(hcx.tcx.in_scope_traits(hir_id).is_none());\n             }\n             NodeIdHashingMode::HashDefPath => {\n                 hcx.tcx.hir.definitions().node_to_hir_id(*self).hash_stable(hcx, hasher);\n             }\n             NodeIdHashingMode::HashTraitsInScope => {\n-                if let Some(traits) = hcx.tcx.trait_map.get(self) {\n+                let hir_id = hcx.tcx.hir.node_to_hir_id(*self);\n+                if let Some(traits) = hcx.tcx.in_scope_traits(hir_id) {\n                     // The ordering of the candidates is not fixed. So we hash\n                     // the def-ids and then sort them and hash the collection.\n                     let mut candidates: AccumulateVec<[_; 8]> ="}, {"sha": "14d47d5d195e3f400a53d9b50cee6aa2324a012d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -14,8 +14,8 @@ use dep_graph::DepGraph;\n use errors::DiagnosticBuilder;\n use session::Session;\n use middle;\n-use hir::{TraitMap};\n-use hir::def::{Def, ExportMap};\n+use hir::{TraitCandidate, HirId};\n+use hir::def::{Def, Export};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DefPathHash;\n@@ -817,10 +817,10 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n-    pub trait_map: TraitMap,\n+    trait_map: FxHashMap<HirId, Rc<Vec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n-    pub export_map: ExportMap,\n+    export_map: FxHashMap<HirId, Rc<Vec<Export>>>,\n \n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n@@ -1075,8 +1075,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n             named_region_map,\n-            trait_map: resolutions.trait_map,\n-            export_map: resolutions.export_map,\n+            trait_map: resolutions.trait_map.into_iter().map(|(k, v)| {\n+                (hir.node_to_hir_id(k), Rc::new(v))\n+            }).collect(),\n+            export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n+                (hir.node_to_hir_id(k), Rc::new(v))\n+            }).collect(),\n             hir,\n             def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n@@ -1994,3 +1998,20 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n         Ok(f(&iter.collect::<Result<AccumulateVec<[_; 8]>, _>>()?))\n     }\n }\n+\n+fn in_scope_traits<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n+    -> Option<Rc<Vec<TraitCandidate>>>\n+{\n+    tcx.gcx.trait_map.get(&id).cloned()\n+}\n+\n+fn module_exports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n+    -> Option<Rc<Vec<Export>>>\n+{\n+    tcx.gcx.export_map.get(&id).cloned()\n+}\n+\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    providers.in_scope_traits = in_scope_traits;\n+    providers.module_exports = module_exports;\n+}"}, {"sha": "da81bfbb0dc4f21643d0cd99356d1f9270108d73", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -11,8 +11,8 @@\n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use hir::def::Def;\n-use hir;\n+use hir::def::{Def, Export};\n+use hir::{self, TraitCandidate, HirId};\n use lint;\n use middle::const_val;\n use middle::cstore::{ExternCrate, LinkagePreference};\n@@ -80,6 +80,15 @@ impl Key for CrateNum {\n     }\n }\n \n+impl Key for HirId {\n+    fn map_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _tcx: TyCtxt) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl Key for DefId {\n     fn map_crate(&self) -> CrateNum {\n         self.krate\n@@ -546,6 +555,18 @@ impl<'tcx> QueryDescription for queries::specializes<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::in_scope_traits<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching the traits in scope at a particular ast node\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::module_exports<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching the exported items for a module\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1116,6 +1137,8 @@ define_maps! { <'tcx>\n     [] lint_levels: lint_levels(CrateNum) -> Rc<lint::LintLevelMap>,\n \n     [] specializes: specializes_node((DefId, DefId)) -> bool,\n+    [] in_scope_traits: InScopeTraits(HirId) -> Option<Rc<Vec<TraitCandidate>>>,\n+    [] module_exports: ModuleExports(HirId) -> Option<Rc<Vec<Export>>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "ca735599a0da64c4f8641723541540772994a3b3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -2517,6 +2517,7 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub fn provide(providers: &mut ty::maps::Providers) {\n     util::provide(providers);\n+    context::provide(providers);\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,"}, {"sha": "62aa86995d0aff6d43e422426acdfc0b6f74bc05", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -548,12 +548,13 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                                                                  &hir::Visibility)>)\n                            -> Entry<'tcx> {\n         let tcx = self.tcx;\n+        let hir_id = tcx.hir.node_to_hir_id(id);\n         let def_id = tcx.hir.local_def_id(id);\n         debug!(\"IsolatedEncoder::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n-            reexports: match tcx.export_map.get(&id) {\n-                Some(exports) if *vis == hir::Public => {\n+            reexports: match tcx.module_exports(hir_id) {\n+                Some(ref exports) if *vis == hir::Public => {\n                     self.lazy_seq_from_slice(exports.as_slice())\n                 }\n                 _ => LazySeq::empty(),"}, {"sha": "8dc078984193b7008f7f582e272cdec5c65103c4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -325,8 +325,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            if let Some(exports) = self.tcx.export_map.get(&id) {\n-                for export in exports {\n+            let hir_id = self.tcx.hir.node_to_hir_id(id);\n+            if let Some(exports) = self.tcx.module_exports(hir_id) {\n+                for export in exports.iter() {\n                     if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n                         self.update(node_id, Some(AccessLevel::Exported));\n                     }"}, {"sha": "ba74c902f55e0fa403f167759c816f61ed6ab860", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -639,10 +639,14 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     fn assemble_extension_candidates_for_traits_in_scope(&mut self,\n                                                          expr_id: ast::NodeId)\n                                                          -> Result<(), MethodError<'tcx>> {\n+        if expr_id == ast::DUMMY_NODE_ID {\n+            return Ok(())\n+        }\n         let mut duplicates = FxHashSet();\n-        let opt_applicable_traits = self.tcx.trait_map.get(&expr_id);\n+        let expr_hir_id = self.tcx.hir.node_to_hir_id(expr_id);\n+        let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {\n-            for trait_candidate in applicable_traits {\n+            for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n                     let import_id = trait_candidate.import_id;"}, {"sha": "1f33cd7765164460d5e53692db597bb27e61d7e3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5c279a40aeba4c3df968aa2d7c2ccc37f3dfd9df", "patch": "@@ -199,8 +199,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n-        if let Some(exports) = self.cx.tcx.export_map.get(&id) {\n-            for export in exports {\n+        let hir_id = self.cx.tcx.hir.node_to_hir_id(id);\n+        if let Some(exports) = self.cx.tcx.module_exports(hir_id) {\n+            for export in exports.iter() {\n                 if let Def::Macro(def_id, ..) = export.def {\n                     if def_id.krate == LOCAL_CRATE || self.reexported_macros.contains(&def_id) {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`."}]}