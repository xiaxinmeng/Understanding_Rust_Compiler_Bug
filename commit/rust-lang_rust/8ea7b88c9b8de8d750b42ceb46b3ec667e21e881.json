{"sha": "8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYTdiODhjOWI4ZGU4ZDc1MGI0MmNlYjQ2YjNlYzY2N2UyMWU4ODE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-14T14:08:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-14T14:08:35Z"}, "message": "Require stability annotations on fields of tuple variants", "tree": {"sha": "baaec5bb999d03a1a4cd642a5f523a320014e987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baaec5bb999d03a1a4cd642a5f523a320014e987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "html_url": "https://github.com/rust-lang/rust/commit/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1f550ebc299d5eadc073160cd3acb8de6c5d857", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f550ebc299d5eadc073160cd3acb8de6c5d857", "html_url": "https://github.com/rust-lang/rust/commit/e1f550ebc299d5eadc073160cd3acb8de6c5d857"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "25bfbb04a90a35476c55870569846f41f9643b2c", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -95,11 +95,13 @@ pub enum Cow<'a, B: ?Sized + 'a>\n {\n     /// Borrowed data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Borrowed(&'a B),\n+    Borrowed(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a B),\n \n     /// Owned data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Owned(<B as ToOwned>::Owned),\n+    Owned(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] <B as ToOwned>::Owned\n+    ),\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "74895f165960d3bfd3601b1ed345d22f64b0478e", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -126,11 +126,15 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// A vacant Entry\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Vacant(VacantEntry<'a, K, V>),\n+    Vacant(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] VacantEntry<'a, K, V>\n+    ),\n \n     /// An occupied Entry\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Occupied(OccupiedEntry<'a, K, V>),\n+    Occupied(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] OccupiedEntry<'a, K, V>\n+    ),\n }\n \n /// A vacant Entry."}, {"sha": "8d40faf3bc6ff24b6a8a4f5b2e9eb463938656e9", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -169,7 +169,7 @@ pub enum Option<T> {\n     None,\n     /// Some value `T`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Some(T)\n+    Some(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T)\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "6ec76c821b30d0172c23b6b1489b7b2dd4707a4c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -250,11 +250,11 @@ use option::Option::{self, None, Some};\n pub enum Result<T, E> {\n     /// Contains the success value\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Ok(T),\n+    Ok(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T),\n \n     /// Contains the error value\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Err(E)\n+    Err(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] E)\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "87bc8bb885584a9ec7f599777083fc15c4d3e236", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -77,7 +77,6 @@ struct Annotator<'a, 'tcx: 'a> {\n     parent_depr: Option<Deprecation>,\n     access_levels: &'a AccessLevels,\n     in_trait_impl: bool,\n-    in_enum: bool,\n }\n \n impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n@@ -208,7 +207,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n \n     fn visit_item(&mut self, i: &Item) {\n         let orig_in_trait_impl = self.in_trait_impl;\n-        let orig_in_enum = self.in_enum;\n         let mut kind = AnnotationKind::Required;\n         match i.node {\n             // Inherent impls and foreign modules serve only as containers for other items,\n@@ -223,22 +221,17 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n                 self.in_trait_impl = true;\n             }\n             hir::ItemStruct(ref sd, _) => {\n-                self.in_enum = false;\n                 if !sd.is_struct() {\n                     self.annotate(sd.id(), &i.attrs, i.span, AnnotationKind::Required, |_| {})\n                 }\n             }\n-            hir::ItemEnum(..) => {\n-                self.in_enum = true;\n-            }\n             _ => {}\n         }\n \n         self.annotate(i.id, &i.attrs, i.span, kind, |v| {\n             intravisit::walk_item(v, i)\n         });\n         self.in_trait_impl = orig_in_trait_impl;\n-        self.in_enum = orig_in_enum;\n     }\n \n     fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n@@ -265,13 +258,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n-        // FIXME: This is temporary, can't use attributes with tuple variant fields until snapshot\n-        let kind = if self.in_enum && s.node.kind.is_unnamed() {\n-            AnnotationKind::Prohibited\n-        } else {\n-            AnnotationKind::Required\n-        };\n-        self.annotate(s.node.id, &s.node.attrs, s.span, kind, |v| {\n+        self.annotate(s.node.id, &s.node.attrs, s.span, AnnotationKind::Required, |v| {\n             intravisit::walk_struct_field(v, s);\n         });\n     }\n@@ -299,7 +286,6 @@ impl<'tcx> Index<'tcx> {\n             parent_depr: None,\n             access_levels: access_levels,\n             in_trait_impl: false,\n-            in_enum: false,\n         };\n         annotator.annotate(ast::CRATE_NODE_ID, &krate.attrs, krate.span, AnnotationKind::Required,\n                            |v| intravisit::walk_crate(v, krate));"}, {"sha": "e43101b7c9d0d7a2740e78f3ea46824e135b1ecb", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -1346,11 +1346,15 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied Entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Occupied(OccupiedEntry<'a, K, V>),\n+    Occupied(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] OccupiedEntry<'a, K, V>\n+    ),\n \n     /// A vacant Entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Vacant(VacantEntry<'a, K, V>),\n+    Vacant(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] VacantEntry<'a, K, V>\n+    ),\n }\n \n /// Possible states of a VacantEntry."}, {"sha": "55c4027d373f76f7a5c2ebdc6d78a88dcbc5e8b7", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -218,7 +218,7 @@ pub enum VarError {\n     /// valid unicode data. The found data is returned as a payload of this\n     /// variant.\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    NotUnicode(OsString),\n+    NotUnicode(#[cfg_attr(not(stage0), stable(feature = \"env\", since = \"1.0.0\"))] OsString),\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "f8ae622852713d3b7d214872bb6a61d7a1ad81e0", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -1175,23 +1175,23 @@ pub trait Seek {\n pub enum SeekFrom {\n     /// Set the offset to the provided number of bytes.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Start(u64),\n+    Start(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] u64),\n \n     /// Set the offset to the size of this object plus the specified number of\n     /// bytes.\n     ///\n     /// It is possible to seek beyond the end of an object, but it's an error to\n     /// seek before byte 0.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    End(i64),\n+    End(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] i64),\n \n     /// Set the offset to the current position plus the specified number of\n     /// bytes.\n     ///\n     /// It is possible to seek beyond the end of an object, but it's an error to\n     /// seek before byte 0.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Current(i64),\n+    Current(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] i64),\n }\n \n fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)"}, {"sha": "7ae389615aca15ffd86674aa7888474cc36f46a4", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -32,10 +32,10 @@ use vec;\n pub enum SocketAddr {\n     /// An IPv4 socket address which is a (ip, port) combination.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    V4(SocketAddrV4),\n+    V4(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] SocketAddrV4),\n     /// An IPv6 socket address\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    V6(SocketAddrV6),\n+    V6(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] SocketAddrV6),\n }\n \n /// An IPv4 socket address which is a (ip, port) combination."}, {"sha": "3956f948eb9b33c77465fe65475a6d5c7f710e38", "filename": "src/libstd/path.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -266,27 +266,33 @@ mod platform {\n pub enum Prefix<'a> {\n     /// Prefix `\\\\?\\`, together with the given component immediately following it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Verbatim(&'a OsStr),\n+    Verbatim(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr),\n \n     /// Prefix `\\\\?\\UNC\\`, with the \"server\" and \"share\" components following it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    VerbatimUNC(&'a OsStr, &'a OsStr),\n+    VerbatimUNC(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n+    ),\n \n     /// Prefix like `\\\\?\\C:\\`, for the given drive letter\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    VerbatimDisk(u8),\n+    VerbatimDisk(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] u8),\n \n     /// Prefix `\\\\.\\`, together with the given component immediately following it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    DeviceNS(&'a OsStr),\n+    DeviceNS(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr),\n \n     /// Prefix `\\\\server\\share`, with the given \"server\" and \"share\" components.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    UNC(&'a OsStr, &'a OsStr),\n+    UNC(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n+    ),\n \n     /// Prefix `C:` for the given disk drive.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Disk(u8),\n+    Disk(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] u8),\n }\n \n impl<'a> Prefix<'a> {\n@@ -528,7 +534,9 @@ pub enum Component<'a> {\n     ///\n     /// Does not occur on Unix.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Prefix(PrefixComponent<'a>),\n+    Prefix(\n+        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] PrefixComponent<'a>\n+    ),\n \n     /// The root directory component, appears after any prefix and before anything else\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -544,7 +552,7 @@ pub enum Component<'a> {\n \n     /// A normal component, i.e. `a` and `b` in `a/b`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Normal(&'a OsStr),\n+    Normal(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr),\n }\n \n impl<'a> Component<'a> {"}, {"sha": "3eb5db09bc0728332e045c38a829b91ef7b6e843", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -385,12 +385,12 @@ pub enum TrySendError<T> {\n     /// this is not a buffered channel, then there is no receiver available to\n     /// acquire the data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Full(T),\n+    Full(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T),\n \n     /// This channel's receiving half has disconnected, so the data could not be\n     /// sent. The data is returned back to the callee in this case.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Disconnected(T),\n+    Disconnected(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T),\n }\n \n enum Flavor<T> {"}, {"sha": "2cfa04c843b6b55fc800a220d17966776f6c6825", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea7b88c9b8de8d750b42ceb46b3ec667e21e881/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=8ea7b88c9b8de8d750b42ceb46b3ec667e21e881", "patch": "@@ -71,7 +71,7 @@ pub enum TryLockError<T> {\n     /// The lock could not be acquired because another thread failed while holding\n     /// the lock.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Poisoned(PoisonError<T>),\n+    Poisoned(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] PoisonError<T>),\n     /// The lock could not be acquired at this time because the operation would\n     /// otherwise block.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}