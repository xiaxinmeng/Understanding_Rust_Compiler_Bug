{"sha": "d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "node_id": "C_kwDOAAsO6NoAKGQyYmI2MmI2YTgxZDI2ZjFlNDE3MTJlMDRkNGFjNzYwZjg2MGQzYjM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T13:15:13Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T13:17:13Z"}, "message": "Rename checkOnSave settings to check", "tree": {"sha": "b07aa27a3653322f02bbf4b7a1a6f3020296ced0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b07aa27a3653322f02bbf4b7a1a6f3020296ced0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "html_url": "https://github.com/rust-lang/rust/commit/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87d57f51bcf07eb364fcf835f9be987006158961", "url": "https://api.github.com/repos/rust-lang/rust/commits/87d57f51bcf07eb364fcf835f9be987006158961", "html_url": "https://github.com/rust-lang/rust/commit/87d57f51bcf07eb364fcf835f9be987006158961"}], "stats": {"total": 555, "additions": 274, "deletions": 281}, "files": [{"sha": "b97c8106be6aaa41d388c5cf201b27141ee87529", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 72, "deletions": 79, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "patch": "@@ -124,9 +124,67 @@ config_data! {\n         /// Unsets `#[cfg(test)]` for the specified crates.\n         cargo_unsetTest: Vec<String>     = \"[\\\"core\\\"]\",\n \n-        /// Run the flycheck command for diagnostics on save.\n+        /// Run the check command for diagnostics on save.\n         checkOnSave | checkOnSave_enable: bool                         = \"true\",\n \n+        /// Check all targets and tests (`--all-targets`).\n+        check_allTargets | checkOnSave_allTargets: bool                  = \"true\",\n+        /// Cargo command to use for `cargo check`.\n+        check_command | checkOnSave_command: String                      = \"\\\"check\\\"\",\n+        /// Extra arguments for `cargo check`.\n+        check_extraArgs | checkOnSave_extraArgs: Vec<String>             = \"[]\",\n+        /// Extra environment variables that will be set when running `cargo check`.\n+        /// Extends `#rust-analyzer.cargo.extraEnv#`.\n+        check_extraEnv | checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n+        /// List of features to activate. Defaults to\n+        /// `#rust-analyzer.cargo.features#`.\n+        ///\n+        /// Set to `\"all\"` to pass `--all-features` to Cargo.\n+        check_features | checkOnSave_features: Option<CargoFeaturesDef>  = \"null\",\n+        /// Specifies the working directory for running checks.\n+        /// - \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n+        // FIXME: Ideally we would support this in some way\n+        ///   This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n+        /// - \"root\": run checks in the project's root directory.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n+        check_invocationLocation | checkOnSave_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n+        /// Specifies the invocation strategy to use when running the checkOnSave command.\n+        /// If `per_workspace` is set, the command will be executed for each workspace.\n+        /// If `once` is set, the command will be executed once.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n+        check_invocationStrategy | checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n+        /// Whether to pass `--no-default-features` to Cargo. Defaults to\n+        /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n+        check_noDefaultFeatures | checkOnSave_noDefaultFeatures: Option<bool>         = \"null\",\n+        /// Override the command rust-analyzer uses instead of `cargo check` for\n+        /// diagnostics on save. The command is required to output json and\n+        /// should therefore include `--message-format=json` or a similar option.\n+        ///\n+        /// If you're changing this because you're using some tool wrapping\n+        /// Cargo, you might also want to change\n+        /// `#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n+        ///\n+        /// If there are multiple linked projects, this command is invoked for\n+        /// each of them, with the working directory being the project root\n+        /// (i.e., the folder containing the `Cargo.toml`).\n+        ///\n+        /// An example command would be:\n+        ///\n+        /// ```bash\n+        /// cargo check --workspace --message-format=json --all-targets\n+        /// ```\n+        /// .\n+        check_overrideCommand | checkOnSave_overrideCommand: Option<Vec<String>>             = \"null\",\n+        /// Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n+        ///\n+        /// Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n+        /// `[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n+        ///\n+        /// Aliased as `\"checkOnSave.targets\"`.\n+        check_targets | checkOnSave_targets | checkOnSave_target: Option<CheckOnSaveTargets> = \"null\",\n+\n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n         completion_autoimport_enable: bool       = \"true\",\n@@ -211,64 +269,6 @@ config_data! {\n         /// Controls file watching implementation.\n         files_watcher: FilesWatcherDef = \"\\\"client\\\"\",\n \n-        /// Check all targets and tests (`--all-targets`).\n-        flycheck_allTargets | checkOnSave_allTargets: bool                  = \"true\",\n-        /// Cargo command to use for `cargo check`.\n-        flycheck_command | checkOnSave_command: String                      = \"\\\"check\\\"\",\n-        /// Extra arguments for `cargo check`.\n-        flycheck_extraArgs | checkOnSave_extraArgs: Vec<String>             = \"[]\",\n-        /// Extra environment variables that will be set when running `cargo check`.\n-        /// Extends `#rust-analyzer.cargo.extraEnv#`.\n-        flycheck_extraEnv | checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n-        /// List of features to activate. Defaults to\n-        /// `#rust-analyzer.cargo.features#`.\n-        ///\n-        /// Set to `\"all\"` to pass `--all-features` to Cargo.\n-        flycheck_features | checkOnSave_features: Option<CargoFeaturesDef>  = \"null\",\n-        /// Specifies the working directory for running checks.\n-        /// - \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n-        // FIXME: Ideally we would support this in some way\n-        ///   This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n-        /// - \"root\": run checks in the project's root directory.\n-        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-        /// is set.\n-        flycheck_invocationLocation | checkOnSave_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n-        /// Specifies the invocation strategy to use when running the checkOnSave command.\n-        /// If `per_workspace` is set, the command will be executed for each workspace.\n-        /// If `once` is set, the command will be executed once.\n-        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-        /// is set.\n-        flycheck_invocationStrategy | checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n-        /// Whether to pass `--no-default-features` to Cargo. Defaults to\n-        /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n-        flycheck_noDefaultFeatures | checkOnSave_noDefaultFeatures: Option<bool>         = \"null\",\n-        /// Override the command rust-analyzer uses instead of `cargo check` for\n-        /// diagnostics on save. The command is required to output json and\n-        /// should therefore include `--message-format=json` or a similar option.\n-        ///\n-        /// If you're changing this because you're using some tool wrapping\n-        /// Cargo, you might also want to change\n-        /// `#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n-        ///\n-        /// If there are multiple linked projects, this command is invoked for\n-        /// each of them, with the working directory being the project root\n-        /// (i.e., the folder containing the `Cargo.toml`).\n-        ///\n-        /// An example command would be:\n-        ///\n-        /// ```bash\n-        /// cargo check --workspace --message-format=json --all-targets\n-        /// ```\n-        /// .\n-        flycheck_overrideCommand | checkOnSave_overrideCommand: Option<Vec<String>>             = \"null\",\n-        /// Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n-        ///\n-        /// Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n-        /// `[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n-        ///\n-        /// Aliased as `\"checkOnSave.targets\"`.\n-        flycheck_targets | checkOnSave_targets | checkOnSave_target: Option<CheckOnSaveTargets> = \"null\",\n-\n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n@@ -787,9 +787,9 @@ impl Config {\n \n     fn validate(&self, error_sink: &mut Vec<(String, serde_json::Error)>) {\n         use serde::de::Error;\n-        if self.data.flycheck_command.is_empty() {\n+        if self.data.check_command.is_empty() {\n             error_sink.push((\n-                \"/flycheck/command\".to_string(),\n+                \"/check/command\".to_string(),\n                 serde_json::Error::custom(\"expected a non-empty string\"),\n             ));\n         }\n@@ -1034,7 +1034,7 @@ impl Config {\n \n     pub fn check_on_save_extra_env(&self) -> FxHashMap<String, String> {\n         let mut extra_env = self.data.cargo_extraEnv.clone();\n-        extra_env.extend(self.data.flycheck_extraEnv.clone());\n+        extra_env.extend(self.data.check_extraEnv.clone());\n         extra_env\n     }\n \n@@ -1146,21 +1146,21 @@ impl Config {\n     }\n \n     pub fn flycheck(&self) -> FlycheckConfig {\n-        match &self.data.flycheck_overrideCommand {\n+        match &self.data.check_overrideCommand {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n                 let command = args.remove(0);\n                 FlycheckConfig::CustomCommand {\n                     command,\n                     args,\n                     extra_env: self.check_on_save_extra_env(),\n-                    invocation_strategy: match self.data.flycheck_invocationStrategy {\n+                    invocation_strategy: match self.data.check_invocationStrategy {\n                         InvocationStrategy::Once => flycheck::InvocationStrategy::Once,\n                         InvocationStrategy::PerWorkspace => {\n                             flycheck::InvocationStrategy::PerWorkspace\n                         }\n                     },\n-                    invocation_location: match self.data.flycheck_invocationLocation {\n+                    invocation_location: match self.data.check_invocationLocation {\n                         InvocationLocation::Root => {\n                             flycheck::InvocationLocation::Root(self.root_path.clone())\n                         }\n@@ -1169,35 +1169,35 @@ impl Config {\n                 }\n             }\n             Some(_) | None => FlycheckConfig::CargoCommand {\n-                command: self.data.flycheck_command.clone(),\n+                command: self.data.check_command.clone(),\n                 target_triples: self\n                     .data\n-                    .flycheck_targets\n+                    .check_targets\n                     .clone()\n                     .and_then(|targets| match &targets.0[..] {\n                         [] => None,\n                         targets => Some(targets.into()),\n                     })\n                     .unwrap_or_else(|| self.data.cargo_target.clone().into_iter().collect()),\n-                all_targets: self.data.flycheck_allTargets,\n+                all_targets: self.data.check_allTargets,\n                 no_default_features: self\n                     .data\n-                    .flycheck_noDefaultFeatures\n+                    .check_noDefaultFeatures\n                     .unwrap_or(self.data.cargo_noDefaultFeatures),\n                 all_features: matches!(\n-                    self.data.flycheck_features.as_ref().unwrap_or(&self.data.cargo_features),\n+                    self.data.check_features.as_ref().unwrap_or(&self.data.cargo_features),\n                     CargoFeaturesDef::All\n                 ),\n                 features: match self\n                     .data\n-                    .flycheck_features\n+                    .check_features\n                     .clone()\n                     .unwrap_or_else(|| self.data.cargo_features.clone())\n                 {\n                     CargoFeaturesDef::All => vec![],\n                     CargoFeaturesDef::Selected(it) => it,\n                 },\n-                extra_args: self.data.flycheck_extraArgs.clone(),\n+                extra_args: self.data.check_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n             },\n         }\n@@ -1887,13 +1887,6 @@ fn get_field<T: DeserializeOwned>(\n }\n \n fn schema(fields: &[(&'static str, &'static str, &[&str], &str)]) -> serde_json::Value {\n-    for ((f1, ..), (f2, ..)) in fields.iter().zip(&fields[1..]) {\n-        fn key(f: &str) -> &str {\n-            f.splitn(2, '_').next().unwrap()\n-        }\n-        assert!(key(f1) <= key(f2), \"wrong field order: {f1:?} {f2:?}\");\n-    }\n-\n     let map = fields\n         .iter()\n         .map(|(field, ty, doc, default)| {"}, {"sha": "de6ac946a682ff1cdbe40a8e98ab24520a3b17e7", "filename": "crates/rust-analyzer/src/config/patch_old_style.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs?ref=d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "patch": "@@ -108,9 +108,9 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         merge(json, json!({ \"cargo\": { \"features\": \"all\" } }));\n     }\n \n-    // checkOnSave_allFeatures, checkOnSave_features -> flycheck_features\n+    // checkOnSave_allFeatures, checkOnSave_features -> check_features\n     if let Some(Value::Bool(true)) = copy.pointer(\"/checkOnSave/allFeatures\") {\n-        merge(json, json!({ \"flycheck\": { \"features\": \"all\" } }));\n+        merge(json, json!({ \"check\": { \"features\": \"all\" } }));\n     }\n \n     // completion_addCallArgumentSnippets completion_addCallParenthesis -> completion_callable_snippets\n@@ -126,13 +126,13 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n     merge(json, json!({ \"completion\": { \"callable\": {\"snippets\": res }} }));\n \n     // We need to do this due to the checkOnSave_enable -> checkOnSave change, as that key now can either be an object or a bool\n-    // checkOnSave_* -> flycheck_*\n+    // checkOnSave_* -> check_*\n     if let Some(Value::Object(obj)) = copy.pointer(\"/checkOnSave\") {\n         // checkOnSave_enable -> checkOnSave\n         if let Some(b @ Value::Bool(_)) = obj.get(\"enable\") {\n             merge(json, json!({ \"checkOnSave\": b }));\n         }\n-        merge(json, json!({ \"flycheck\": obj }));\n+        merge(json, json!({ \"check\": obj }));\n     }\n }\n "}, {"sha": "7bdfd4288a195a83691039d4c37fc14dc5a5c9eb", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "patch": "@@ -112,7 +112,93 @@ Unsets `#[cfg(test)]` for the specified crates.\n [[rust-analyzer.checkOnSave]]rust-analyzer.checkOnSave (default: `true`)::\n +\n --\n-Run the flycheck command for diagnostics on save.\n+Run the check command for diagnostics on save.\n+--\n+[[rust-analyzer.check.allTargets]]rust-analyzer.check.allTargets (default: `true`)::\n++\n+--\n+Check all targets and tests (`--all-targets`).\n+--\n+[[rust-analyzer.check.command]]rust-analyzer.check.command (default: `\"check\"`)::\n++\n+--\n+Cargo command to use for `cargo check`.\n+--\n+[[rust-analyzer.check.extraArgs]]rust-analyzer.check.extraArgs (default: `[]`)::\n++\n+--\n+Extra arguments for `cargo check`.\n+--\n+[[rust-analyzer.check.extraEnv]]rust-analyzer.check.extraEnv (default: `{}`)::\n++\n+--\n+Extra environment variables that will be set when running `cargo check`.\n+Extends `#rust-analyzer.cargo.extraEnv#`.\n+--\n+[[rust-analyzer.check.features]]rust-analyzer.check.features (default: `null`)::\n++\n+--\n+List of features to activate. Defaults to\n+`#rust-analyzer.cargo.features#`.\n+\n+Set to `\"all\"` to pass `--all-features` to Cargo.\n+--\n+[[rust-analyzer.check.invocationLocation]]rust-analyzer.check.invocationLocation (default: `\"workspace\"`)::\n++\n+--\n+Specifies the working directory for running checks.\n+- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n+  This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n+- \"root\": run checks in the project's root directory.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n+--\n+[[rust-analyzer.check.invocationStrategy]]rust-analyzer.check.invocationStrategy (default: `\"per_workspace\"`)::\n++\n+--\n+Specifies the invocation strategy to use when running the checkOnSave command.\n+If `per_workspace` is set, the command will be executed for each workspace.\n+If `once` is set, the command will be executed once.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n+--\n+[[rust-analyzer.check.noDefaultFeatures]]rust-analyzer.check.noDefaultFeatures (default: `null`)::\n++\n+--\n+Whether to pass `--no-default-features` to Cargo. Defaults to\n+`#rust-analyzer.cargo.noDefaultFeatures#`.\n+--\n+[[rust-analyzer.check.overrideCommand]]rust-analyzer.check.overrideCommand (default: `null`)::\n++\n+--\n+Override the command rust-analyzer uses instead of `cargo check` for\n+diagnostics on save. The command is required to output json and\n+should therefore include `--message-format=json` or a similar option.\n+\n+If you're changing this because you're using some tool wrapping\n+Cargo, you might also want to change\n+`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n+\n+If there are multiple linked projects, this command is invoked for\n+each of them, with the working directory being the project root\n+(i.e., the folder containing the `Cargo.toml`).\n+\n+An example command would be:\n+\n+```bash\n+cargo check --workspace --message-format=json --all-targets\n+```\n+.\n+--\n+[[rust-analyzer.check.targets]]rust-analyzer.check.targets (default: `null`)::\n++\n+--\n+Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n+\n+Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n+`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n+\n+Aliased as `\"checkOnSave.targets\"`.\n --\n [[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n +\n@@ -241,92 +327,6 @@ also need to add the folders to Code's `files.watcherExclude`.\n --\n Controls file watching implementation.\n --\n-[[rust-analyzer.flycheck.allTargets]]rust-analyzer.flycheck.allTargets (default: `true`)::\n-+\n---\n-Check all targets and tests (`--all-targets`).\n---\n-[[rust-analyzer.flycheck.command]]rust-analyzer.flycheck.command (default: `\"check\"`)::\n-+\n---\n-Cargo command to use for `cargo check`.\n---\n-[[rust-analyzer.flycheck.extraArgs]]rust-analyzer.flycheck.extraArgs (default: `[]`)::\n-+\n---\n-Extra arguments for `cargo check`.\n---\n-[[rust-analyzer.flycheck.extraEnv]]rust-analyzer.flycheck.extraEnv (default: `{}`)::\n-+\n---\n-Extra environment variables that will be set when running `cargo check`.\n-Extends `#rust-analyzer.cargo.extraEnv#`.\n---\n-[[rust-analyzer.flycheck.features]]rust-analyzer.flycheck.features (default: `null`)::\n-+\n---\n-List of features to activate. Defaults to\n-`#rust-analyzer.cargo.features#`.\n-\n-Set to `\"all\"` to pass `--all-features` to Cargo.\n---\n-[[rust-analyzer.flycheck.invocationLocation]]rust-analyzer.flycheck.invocationLocation (default: `\"workspace\"`)::\n-+\n---\n-Specifies the working directory for running checks.\n-- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n-  This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n-- \"root\": run checks in the project's root directory.\n-This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-is set.\n---\n-[[rust-analyzer.flycheck.invocationStrategy]]rust-analyzer.flycheck.invocationStrategy (default: `\"per_workspace\"`)::\n-+\n---\n-Specifies the invocation strategy to use when running the checkOnSave command.\n-If `per_workspace` is set, the command will be executed for each workspace.\n-If `once` is set, the command will be executed once.\n-This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-is set.\n---\n-[[rust-analyzer.flycheck.noDefaultFeatures]]rust-analyzer.flycheck.noDefaultFeatures (default: `null`)::\n-+\n---\n-Whether to pass `--no-default-features` to Cargo. Defaults to\n-`#rust-analyzer.cargo.noDefaultFeatures#`.\n---\n-[[rust-analyzer.flycheck.overrideCommand]]rust-analyzer.flycheck.overrideCommand (default: `null`)::\n-+\n---\n-Override the command rust-analyzer uses instead of `cargo check` for\n-diagnostics on save. The command is required to output json and\n-should therefore include `--message-format=json` or a similar option.\n-\n-If you're changing this because you're using some tool wrapping\n-Cargo, you might also want to change\n-`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n-\n-If there are multiple linked projects, this command is invoked for\n-each of them, with the working directory being the project root\n-(i.e., the folder containing the `Cargo.toml`).\n-\n-An example command would be:\n-\n-```bash\n-cargo check --workspace --message-format=json --all-targets\n-```\n-.\n---\n-[[rust-analyzer.flycheck.targets]]rust-analyzer.flycheck.targets (default: `null`)::\n-+\n---\n-Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n-\n-Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n-`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n-\n-Aliased as `\"checkOnSave.targets\"`.\n---\n [[rust-analyzer.highlightRelated.breakPoints.enable]]rust-analyzer.highlightRelated.breakPoints.enable (default: `true`)::\n +\n --"}, {"sha": "56018b9929ccb9f0c7433dbe42a2aac03274e304", "filename": "editors/code/package.json", "status": "modified", "additions": 111, "deletions": 111, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "patch": "@@ -557,10 +557,120 @@\n                     }\n                 },\n                 \"rust-analyzer.checkOnSave\": {\n-                    \"markdownDescription\": \"Run the flycheck command for diagnostics on save.\",\n+                    \"markdownDescription\": \"Run the check command for diagnostics on save.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.check.allTargets\": {\n+                    \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.check.command\": {\n+                    \"markdownDescription\": \"Cargo command to use for `cargo check`.\",\n+                    \"default\": \"check\",\n+                    \"type\": \"string\"\n+                },\n+                \"rust-analyzer.check.extraArgs\": {\n+                    \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n+                    \"default\": [],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.check.extraEnv\": {\n+                    \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\\nExtends `#rust-analyzer.cargo.extraEnv#`.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n+                \"rust-analyzer.check.features\": {\n+                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to Cargo.\",\n+                    \"default\": null,\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"string\",\n+                            \"enum\": [\n+                                \"all\"\n+                            ],\n+                            \"enumDescriptions\": [\n+                                \"Pass `--all-features` to cargo\"\n+                            ]\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"string\"\n+                            }\n+                        },\n+                        {\n+                            \"type\": \"null\"\n+                        }\n+                    ]\n+                },\n+                \"rust-analyzer.check.invocationLocation\": {\n+                    \"markdownDescription\": \"Specifies the working directory for running checks.\\n- \\\"workspace\\\": run checks for workspaces in the corresponding workspaces' root directories.\\n    This falls back to \\\"root\\\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\\n- \\\"root\\\": run checks in the project's root directory.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"default\": \"workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"workspace\",\n+                        \"root\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"The command will be executed in the corresponding workspace root.\",\n+                        \"The command will be executed in the project root.\"\n+                    ]\n+                },\n+                \"rust-analyzer.check.invocationStrategy\": {\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace.\\nIf `once` is set, the command will be executed once.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"default\": \"per_workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"per_workspace\",\n+                        \"once\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"The command will be executed for each workspace.\",\n+                        \"The command will be executed once.\"\n+                    ]\n+                },\n+                \"rust-analyzer.check.noDefaultFeatures\": {\n+                    \"markdownDescription\": \"Whether to pass `--no-default-features` to Cargo. Defaults to\\n`#rust-analyzer.cargo.noDefaultFeatures#`.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"boolean\"\n+                    ]\n+                },\n+                \"rust-analyzer.check.overrideCommand\": {\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option.\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.check.targets\": {\n+                    \"markdownDescription\": \"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\\n\\nCan be a single target, e.g. `\\\"x86_64-unknown-linux-gnu\\\"` or a list of targets, e.g.\\n`[\\\"aarch64-apple-darwin\\\", \\\"x86_64-apple-darwin\\\"]`.\\n\\nAliased as `\\\"checkOnSave.targets\\\"`.\",\n+                    \"default\": null,\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"null\"\n+                        },\n+                        {\n+                            \"type\": \"string\"\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"string\"\n+                            }\n+                        }\n+                    ]\n+                },\n                 \"rust-analyzer.completion.autoimport.enable\": {\n                     \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed.\\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n                     \"default\": true,\n@@ -702,116 +812,6 @@\n                         \"Use server-side file watching\"\n                     ]\n                 },\n-                \"rust-analyzer.flycheck.allTargets\": {\n-                    \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.flycheck.command\": {\n-                    \"markdownDescription\": \"Cargo command to use for `cargo check`.\",\n-                    \"default\": \"check\",\n-                    \"type\": \"string\"\n-                },\n-                \"rust-analyzer.flycheck.extraArgs\": {\n-                    \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n-                    \"default\": [],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.flycheck.extraEnv\": {\n-                    \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\\nExtends `#rust-analyzer.cargo.extraEnv#`.\",\n-                    \"default\": {},\n-                    \"type\": \"object\"\n-                },\n-                \"rust-analyzer.flycheck.features\": {\n-                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to Cargo.\",\n-                    \"default\": null,\n-                    \"anyOf\": [\n-                        {\n-                            \"type\": \"string\",\n-                            \"enum\": [\n-                                \"all\"\n-                            ],\n-                            \"enumDescriptions\": [\n-                                \"Pass `--all-features` to cargo\"\n-                            ]\n-                        },\n-                        {\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"type\": \"string\"\n-                            }\n-                        },\n-                        {\n-                            \"type\": \"null\"\n-                        }\n-                    ]\n-                },\n-                \"rust-analyzer.flycheck.invocationLocation\": {\n-                    \"markdownDescription\": \"Specifies the working directory for running checks.\\n- \\\"workspace\\\": run checks for workspaces in the corresponding workspaces' root directories.\\n    This falls back to \\\"root\\\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\\n- \\\"root\\\": run checks in the project's root directory.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n-                    \"default\": \"workspace\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"workspace\",\n-                        \"root\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"The command will be executed in the corresponding workspace root.\",\n-                        \"The command will be executed in the project root.\"\n-                    ]\n-                },\n-                \"rust-analyzer.flycheck.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace.\\nIf `once` is set, the command will be executed once.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n-                    \"default\": \"per_workspace\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"per_workspace\",\n-                        \"once\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace.\",\n-                        \"The command will be executed once.\"\n-                    ]\n-                },\n-                \"rust-analyzer.flycheck.noDefaultFeatures\": {\n-                    \"markdownDescription\": \"Whether to pass `--no-default-features` to Cargo. Defaults to\\n`#rust-analyzer.cargo.noDefaultFeatures#`.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"boolean\"\n-                    ]\n-                },\n-                \"rust-analyzer.flycheck.overrideCommand\": {\n-                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option.\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"array\"\n-                    ],\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.flycheck.targets\": {\n-                    \"markdownDescription\": \"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\\n\\nCan be a single target, e.g. `\\\"x86_64-unknown-linux-gnu\\\"` or a list of targets, e.g.\\n`[\\\"aarch64-apple-darwin\\\", \\\"x86_64-apple-darwin\\\"]`.\\n\\nAliased as `\\\"checkOnSave.targets\\\"`.\",\n-                    \"default\": null,\n-                    \"anyOf\": [\n-                        {\n-                            \"type\": \"null\"\n-                        },\n-                        {\n-                            \"type\": \"string\"\n-                        },\n-                        {\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"type\": \"string\"\n-                            }\n-                        }\n-                    ]\n-                },\n                 \"rust-analyzer.highlightRelated.breakPoints.enable\": {\n                     \"markdownDescription\": \"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\",\n                     \"default\": true,"}]}