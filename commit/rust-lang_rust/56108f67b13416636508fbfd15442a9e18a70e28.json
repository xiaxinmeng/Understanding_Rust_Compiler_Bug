{"sha": "56108f67b13416636508fbfd15442a9e18a70e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MTA4ZjY3YjEzNDE2NjM2NTA4ZmJmZDE1NDQyYTllMThhNzBlMjg=", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-06-15T05:31:00Z"}, "committer": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-06-15T05:48:04Z"}, "message": "Add future_prelude_collision to 2021 compat group\n\n* Add to 2021 compatibility group\n* Set default to Allow", "tree": {"sha": "967a0bce3067ff09b689272495639e427500d2fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967a0bce3067ff09b689272495639e427500d2fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56108f67b13416636508fbfd15442a9e18a70e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56108f67b13416636508fbfd15442a9e18a70e28", "html_url": "https://github.com/rust-lang/rust/commit/56108f67b13416636508fbfd15442a9e18a70e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56108f67b13416636508fbfd15442a9e18a70e28/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa", "html_url": "https://github.com/rust-lang/rust/commit/3efa5b4b83b3fe72570d50ce73b8382875a4bdfa"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "bef675563a45a936658acd0732958287034572cb", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56108f67b13416636508fbfd15442a9e18a70e28/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56108f67b13416636508fbfd15442a9e18a70e28/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=56108f67b13416636508fbfd15442a9e18a70e28", "patch": "@@ -3282,7 +3282,11 @@ declare_lint! {\n     ///\n     /// [prelude changes]: https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html#prelude-changes\n     pub FUTURE_PRELUDE_COLLISION,\n-    Warn,\n+    Allow,\n     \"detects the usage of trait methods which are ambiguous with traits added to the \\\n         prelude in future editions\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #85684 <https://github.com/rust-lang/rust/issues/85684>\",\n+        edition: Some(Edition::Edition2021),\n+    };\n }"}, {"sha": "9ede9f3a2fb45e39c6da382be6d8ef00fe6918e9", "filename": "src/test/ui/rust-2021/future-prelude-collision.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed?ref=56108f67b13416636508fbfd15442a9e18a70e28", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // edition:2018\n // check-pass\n+#![warn(future_prelude_collision)]\n \n trait TryIntoU32 {\n     fn try_into(self) -> Result<u32, ()>;\n@@ -52,36 +53,44 @@ fn main() {\n     // test dot-call that will break in 2021 edition\n     let _: u32 = TryIntoU32::try_into(3u8).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test associated function call that will break in 2021 edition\n     let _ = <u32 as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test reverse turbofish too\n     let _ = <Vec<u8> as FromByteIterator>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // negative testing lint (this line should *not* emit a warning)\n     let _: u32 = TryFromU8::try_from(3u8).unwrap();\n \n     // test type omission\n     let _: u32 = <_ as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test autoderef\n     let _: u32 = TryIntoU32::try_into(*(&3u8)).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test autoref\n     let _: u32 = TryIntoU32::try_into(&3.0).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     let mut data = 3u16;\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = TryIntoU32::try_into(mut_ptr as *const _).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     type U32Alias = u32;\n     let _ = <U32Alias as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n }"}, {"sha": "914e910396a666921008e86e02ed48c6c8d335a9", "filename": "src/test/ui/rust-2021/future-prelude-collision.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs?ref=56108f67b13416636508fbfd15442a9e18a70e28", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // edition:2018\n // check-pass\n+#![warn(future_prelude_collision)]\n \n trait TryIntoU32 {\n     fn try_into(self) -> Result<u32, ()>;\n@@ -52,36 +53,44 @@ fn main() {\n     // test dot-call that will break in 2021 edition\n     let _: u32 = 3u8.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test associated function call that will break in 2021 edition\n     let _ = u32::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test reverse turbofish too\n     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // negative testing lint (this line should *not* emit a warning)\n     let _: u32 = TryFromU8::try_from(3u8).unwrap();\n \n     // test type omission\n     let _: u32 = <_>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test autoderef\n     let _: u32 = (&3u8).try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     // test autoref\n     let _: u32 = 3.0.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     let mut data = 3u16;\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = mut_ptr.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n \n     type U32Alias = u32;\n     let _ = U32Alias::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n }"}, {"sha": "190145ef4dbfcd637134584c5ca807f348274a6f", "filename": "src/test/ui/rust-2021/future-prelude-collision.stderr", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr?ref=56108f67b13416636508fbfd15442a9e18a70e28", "patch": "@@ -1,52 +1,79 @@\n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:53:18\n+  --> $DIR/future-prelude-collision.rs:54:18\n    |\n LL |     let _: u32 = 3u8.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(3u8)`\n    |\n-   = note: `#[warn(future_prelude_collision)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/future-prelude-collision.rs:4:9\n+   |\n+LL | #![warn(future_prelude_collision)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:57:13\n+  --> $DIR/future-prelude-collision.rs:59:13\n    |\n LL |     let _ = u32::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^ help: disambiguate the associated function: `<u32 as TryFromU8>::try_from`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:61:13\n+  --> $DIR/future-prelude-collision.rs:64:13\n    |\n LL |     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n    |             ^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<u8> as FromByteIterator>::from_iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:68:18\n+  --> $DIR/future-prelude-collision.rs:72:18\n    |\n LL |     let _: u32 = <_>::try_from(3u8).unwrap();\n    |                  ^^^^^^^^^^^^^ help: disambiguate the associated function: `<_ as TryFromU8>::try_from`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:72:18\n+  --> $DIR/future-prelude-collision.rs:77:18\n    |\n LL |     let _: u32 = (&3u8).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(*(&3u8))`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:76:18\n+  --> $DIR/future-prelude-collision.rs:82:18\n    |\n LL |     let _: u32 = 3.0.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(&3.0)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:81:18\n+  --> $DIR/future-prelude-collision.rs:88:18\n    |\n LL |     let _: u32 = mut_ptr.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(mut_ptr as *const _)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:85:13\n+  --> $DIR/future-prelude-collision.rs:93:13\n    |\n LL |     let _ = U32Alias::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<U32Alias as TryFromU8>::try_from`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 8 warnings emitted\n "}, {"sha": "00fb128a981e1d564f9019e5aa509dc1e28be120", "filename": "src/test/ui/rust-2021/generic-type-collision.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed?ref=56108f67b13416636508fbfd15442a9e18a70e28", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n // run-rustfix\n // edition 2018\n+#![warn(future_prelude_collision)]\n \n trait MyTrait<A> {\n     fn from_iter(x: Option<A>);\n@@ -13,4 +14,5 @@ impl<T> MyTrait<()> for Vec<T> {\n fn main() {\n     <Vec<i32> as MyTrait<_>>::from_iter(None);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n }"}, {"sha": "406fba4d2479b004ddc9045759f14866c8243eee", "filename": "src/test/ui/rust-2021/generic-type-collision.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs?ref=56108f67b13416636508fbfd15442a9e18a70e28", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n // run-rustfix\n // edition 2018\n+#![warn(future_prelude_collision)]\n \n trait MyTrait<A> {\n     fn from_iter(x: Option<A>);\n@@ -13,4 +14,5 @@ impl<T> MyTrait<()> for Vec<T> {\n fn main() {\n     <Vec<i32>>::from_iter(None);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n }"}, {"sha": "9374379d24763d58d25fb307f10f4022828c690d", "filename": "src/test/ui/rust-2021/generic-type-collision.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56108f67b13416636508fbfd15442a9e18a70e28/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr?ref=56108f67b13416636508fbfd15442a9e18a70e28", "patch": "@@ -1,10 +1,16 @@\n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n-  --> $DIR/generic-type-collision.rs:14:5\n+  --> $DIR/generic-type-collision.rs:15:5\n    |\n LL |     <Vec<i32>>::from_iter(None);\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<i32> as MyTrait<_>>::from_iter`\n    |\n-   = note: `#[warn(future_prelude_collision)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/generic-type-collision.rs:4:9\n+   |\n+LL | #![warn(future_prelude_collision)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 1 warning emitted\n "}]}