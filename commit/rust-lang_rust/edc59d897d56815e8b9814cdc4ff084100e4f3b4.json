{"sha": "edc59d897d56815e8b9814cdc4ff084100e4f3b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzU5ZDg5N2Q1NjgxNWU4Yjk4MTRjZGM0ZmYwODQxMDBlNGYzYjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T20:23:16Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T20:23:30Z"}, "message": "Align FnPointer with Chalk", "tree": {"sha": "054c1874844107ba3f5ae0e17736213a6cb974ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054c1874844107ba3f5ae0e17736213a6cb974ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc59d897d56815e8b9814cdc4ff084100e4f3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc59d897d56815e8b9814cdc4ff084100e4f3b4", "html_url": "https://github.com/rust-lang/rust/commit/edc59d897d56815e8b9814cdc4ff084100e4f3b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc59d897d56815e8b9814cdc4ff084100e4f3b4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f25c1e7c6a119a1035ba226f0735a0d6667a5db8", "html_url": "https://github.com/rust-lang/rust/commit/f25c1e7c6a119a1035ba226f0735a0d6667a5db8"}], "stats": {"total": 126, "additions": 86, "deletions": 40}, "files": [{"sha": "791915fe0314afe5e2db4750d3e8a424cc415f0a", "filename": "crates/hir_ty/src/builder.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -12,8 +12,8 @@ use smallvec::SmallVec;\n \n use crate::{\n     db::HirDatabase, primitive, to_assoc_type_id, to_chalk_trait_id, utils::generics, Binders,\n-    CallableSig, FnPointer, FnSig, GenericArg, Interner, ProjectionTy, Substitution, TraitRef, Ty,\n-    TyDefId, TyKind, TypeWalk, ValueTyDefId,\n+    CallableSig, FnPointer, FnSig, FnSubst, GenericArg, Interner, ProjectionTy, Substitution,\n+    TraitRef, Ty, TyDefId, TyKind, TypeWalk, ValueTyDefId,\n };\n \n /// This is a builder for `Ty` or anything that needs a `Substitution`.\n@@ -78,9 +78,12 @@ impl TyBuilder<()> {\n \n     pub fn fn_ptr(sig: CallableSig) -> Ty {\n         TyKind::Function(FnPointer {\n-            num_args: sig.params().len(),\n+            num_binders: 0,\n             sig: FnSig { abi: (), safety: Safety::Safe, variadic: sig.is_varargs },\n-            substs: Substitution::from_iter(&Interner, sig.params_and_return.iter().cloned()),\n+            substitution: FnSubst(Substitution::from_iter(\n+                &Interner,\n+                sig.params_and_return.iter().cloned(),\n+            )),\n         })\n         .intern(&Interner)\n     }"}, {"sha": "a2a7236a86956baea25b61131fd840b9d9e9cb3c", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -22,8 +22,8 @@ use crate::{\n     to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, InEnvironment, Interner, ProjectionTyExt,\n-    Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n+    ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind,\n };\n \n use super::{\n@@ -260,9 +260,9 @@ impl<'a> InferenceContext<'a> {\n                 };\n                 sig_tys.push(ret_ty.clone());\n                 let sig_ty = TyKind::Function(FnPointer {\n-                    num_args: sig_tys.len() - 1,\n+                    num_binders: 0,\n                     sig: FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic: false },\n-                    substs: Substitution::from_iter(&Interner, sig_tys.clone()),\n+                    substitution: FnSubst(Substitution::from_iter(&Interner, sig_tys.clone())),\n                 })\n                 .intern(&Interner);\n                 let closure_id = self.db.intern_closure((self.owner, tgt_expr)).into();"}, {"sha": "2f9523325ca622d87085564bc1d0c4726a0b39da", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -7,7 +7,7 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n \n use super::{DomainGoal, InferenceContext};\n use crate::{\n-    AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer,\n+    AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSubst,\n     InEnvironment, InferenceVar, Interner, Scalar, Substitution, Ty, TyKind, TypeWalk, WhereClause,\n };\n \n@@ -308,8 +308,8 @@ impl InferenceTable {\n                 (TyKind::Adt(_, substs1), TyKind::Adt(_, substs2))\n                 | (TyKind::FnDef(_, substs1), TyKind::FnDef(_, substs2))\n                 | (\n-                    TyKind::Function(FnPointer { substs: substs1, .. }),\n-                    TyKind::Function(FnPointer { substs: substs2, .. }),\n+                    TyKind::Function(FnPointer { substitution: FnSubst(substs1), .. }),\n+                    TyKind::Function(FnPointer { substitution: FnSubst(substs2), .. }),\n                 )\n                 | (TyKind::Tuple(_, substs1), TyKind::Tuple(_, substs2))\n                 | (TyKind::OpaqueType(_, substs1), TyKind::OpaqueType(_, substs2))"}, {"sha": "c3ec123522cb17241d6d53f55a9ad9a8e9eed290", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -142,10 +142,11 @@ impl CallableSig {\n         CallableSig {\n             // FIXME: what to do about lifetime params? -> return PolyFnSig\n             params_and_return: fn_ptr\n-                .substs\n+                .substitution\n                 .clone()\n                 .shifted_out_to(DebruijnIndex::ONE)\n                 .expect(\"unexpected lifetime vars in fn ptr\")\n+                .0\n                 .interned()\n                 .iter()\n                 .map(|arg| arg.assert_ty_ref(&Interner).clone())\n@@ -239,9 +240,9 @@ impl Ty {\n                 mutability == mutability2\n             }\n             (\n-                TyKind::Function(FnPointer { num_args, sig, .. }),\n-                TyKind::Function(FnPointer { num_args: num_args2, sig: sig2, .. }),\n-            ) => num_args == num_args2 && sig == sig2,\n+                TyKind::Function(FnPointer { num_binders, sig, .. }),\n+                TyKind::Function(FnPointer { num_binders: num_binders2, sig: sig2, .. }),\n+            ) => num_binders == num_binders2 && sig == sig2,\n             (TyKind::Tuple(cardinality, _), TyKind::Tuple(cardinality2, _)) => {\n                 cardinality == cardinality2\n             }\n@@ -314,11 +315,11 @@ impl Ty {\n         match self.kind(&Interner) {\n             TyKind::Adt(_, substs)\n             | TyKind::FnDef(_, substs)\n-            | TyKind::Function(FnPointer { substs, .. })\n             | TyKind::Tuple(_, substs)\n             | TyKind::OpaqueType(_, substs)\n             | TyKind::AssociatedType(_, substs)\n             | TyKind::Closure(.., substs) => Some(substs),\n+            TyKind::Function(FnPointer { substitution: substs, .. }) => Some(&substs.0),\n             _ => None,\n         }\n     }\n@@ -327,11 +328,11 @@ impl Ty {\n         match self.interned_mut() {\n             TyKind::Adt(_, substs)\n             | TyKind::FnDef(_, substs)\n-            | TyKind::Function(FnPointer { substs, .. })\n             | TyKind::Tuple(_, substs)\n             | TyKind::OpaqueType(_, substs)\n             | TyKind::AssociatedType(_, substs)\n             | TyKind::Closure(.., substs) => Some(substs),\n+            TyKind::Function(FnPointer { substitution: substs, .. }) => Some(&mut substs.0),\n             _ => None,\n         }\n     }"}, {"sha": "20bb7dd59aa69d681adf3535658ea1d478aec22e", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -34,9 +34,9 @@ use crate::{\n         variant_data, Generics,\n     },\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n-    ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause, QuantifiedWhereClauses,\n-    ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution, TraitEnvironment, TraitRef, Ty,\n-    TyBuilder, TyKind, TypeWalk, WhereClause,\n+    FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n+    QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n+    TraitEnvironment, TraitRef, Ty, TyBuilder, TyKind, TypeWalk, WhereClause,\n };\n \n #[derive(Debug)]\n@@ -181,9 +181,9 @@ impl<'a> TyLoweringContext<'a> {\n                 let substs =\n                     Substitution::from_iter(&Interner, params.iter().map(|tr| self.lower_ty(tr)));\n                 TyKind::Function(FnPointer {\n-                    num_args: substs.len(&Interner) - 1,\n+                    num_binders: 0, // FIXME lower `for<'a> fn()` correctly\n                     sig: FnSig { abi: (), safety: Safety::Safe, variadic: *is_varargs },\n-                    substs,\n+                    substitution: FnSubst(substs),\n                 })\n                 .intern(&Interner)\n             }"}, {"sha": "6d65d3eb9e9e1a3d0dd83bc7f49459dcb3c57e10", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -46,18 +46,18 @@ impl TyFingerprint {\n     /// have impls: if we have some `struct S`, we can have an `impl S`, but not\n     /// `impl &S`. Hence, this will return `None` for reference types and such.\n     pub fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n-        let fp = match *ty.kind(&Interner) {\n+        let fp = match ty.kind(&Interner) {\n             TyKind::Str => TyFingerprint::Str,\n             TyKind::Never => TyFingerprint::Never,\n             TyKind::Slice(..) => TyFingerprint::Slice,\n             TyKind::Array(..) => TyFingerprint::Array,\n-            TyKind::Scalar(scalar) => TyFingerprint::Scalar(scalar),\n-            TyKind::Adt(AdtId(adt), _) => TyFingerprint::Adt(adt),\n-            TyKind::Tuple(cardinality, _) => TyFingerprint::Tuple(cardinality),\n-            TyKind::Raw(mutability, ..) => TyFingerprint::RawPtr(mutability),\n-            TyKind::Foreign(alias_id, ..) => TyFingerprint::ForeignType(alias_id),\n-            TyKind::Function(FnPointer { num_args, sig, .. }) => {\n-                TyFingerprint::FnPtr(num_args, sig)\n+            TyKind::Scalar(scalar) => TyFingerprint::Scalar(*scalar),\n+            TyKind::Adt(AdtId(adt), _) => TyFingerprint::Adt(*adt),\n+            TyKind::Tuple(cardinality, _) => TyFingerprint::Tuple(*cardinality),\n+            TyKind::Raw(mutability, ..) => TyFingerprint::RawPtr(*mutability),\n+            TyKind::Foreign(alias_id, ..) => TyFingerprint::ForeignType(*alias_id),\n+            TyKind::Function(FnPointer { sig, substitution: substs, .. }) => {\n+                TyFingerprint::FnPtr(substs.0.len(&Interner) - 1, *sig)\n             }\n             TyKind::Dyn(_) => ty.dyn_trait().map(|trait_| TyFingerprint::Dyn(trait_))?,\n             _ => return None,"}, {"sha": "13d8d111198018d80ab53ba9dadb28733132a513", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -24,8 +24,8 @@ impl ToChalk for Ty {\n         match self.into_inner() {\n             TyKind::Ref(m, ty) => ref_to_chalk(db, m, ty),\n             TyKind::Array(ty) => array_to_chalk(db, ty),\n-            TyKind::Function(FnPointer { sig, substs, .. }) => {\n-                let substitution = chalk_ir::FnSubst(substs.to_chalk(db).shifted_in(&Interner));\n+            TyKind::Function(FnPointer { sig, substitution: substs, .. }) => {\n+                let substitution = chalk_ir::FnSubst(substs.0.to_chalk(db).shifted_in(&Interner));\n                 chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                     num_binders: 0,\n                     sig,\n@@ -132,11 +132,11 @@ impl ToChalk for Ty {\n                 ..\n             }) => {\n                 assert_eq!(num_binders, 0);\n-                let substs: Substitution = from_chalk(\n+                let substs = crate::FnSubst(from_chalk(\n                     db,\n                     substitution.0.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n-                );\n-                TyKind::Function(FnPointer { num_args: (substs.len(&Interner) - 1), sig, substs })\n+                ));\n+                TyKind::Function(FnPointer { num_binders, sig, substitution: substs })\n             }\n             chalk_ir::TyKind::BoundVar(idx) => TyKind::BoundVar(idx),\n             chalk_ir::TyKind::InferenceVar(_iv, _kind) => TyKind::Error,"}, {"sha": "d4e07a6b8cab5043f4e5229ab524df5dbc848eee", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -11,7 +11,7 @@ use smallvec::SmallVec;\n \n use crate::{\n     AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, FnDefId, FnSig, ForeignDefId,\n-    InferenceVar, Interner, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKinds,\n+    InferenceVar, Interner, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKind, VariableKinds,\n };\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -43,9 +43,36 @@ pub struct DynTy {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct FnPointer {\n-    pub num_args: usize,\n+    pub num_binders: usize,\n     pub sig: FnSig,\n-    pub substs: Substitution,\n+    pub substitution: FnSubst,\n+}\n+/// A wrapper for the substs on a Fn.\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n+pub struct FnSubst(pub Substitution);\n+\n+impl FnPointer {\n+    /// Represent the current `Fn` as if it was wrapped in `Binders`\n+    pub fn into_binders(self, interner: &Interner) -> Binders<FnSubst> {\n+        Binders::new(\n+            VariableKinds::from_iter(\n+                interner,\n+                (0..self.num_binders).map(|_| VariableKind::Lifetime),\n+            ),\n+            self.substitution,\n+        )\n+    }\n+\n+    /// Represent the current `Fn` as if it was wrapped in `Binders`\n+    pub fn as_binders(&self, interner: &Interner) -> Binders<&FnSubst> {\n+        Binders::new(\n+            VariableKinds::from_iter(\n+                interner,\n+                (0..self.num_binders).map(|_| VariableKind::Lifetime),\n+            ),\n+            &self.substitution,\n+        )\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "963eb12c8f73cb565f131d460b8935200cb4cfd8", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc59d897d56815e8b9814cdc4ff084100e4f3b4/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=edc59d897d56815e8b9814cdc4ff084100e4f3b4", "patch": "@@ -6,8 +6,9 @@ use std::mem;\n use chalk_ir::DebruijnIndex;\n \n use crate::{\n-    utils::make_mut_slice, AliasEq, AliasTy, Binders, CallableSig, GenericArg, GenericArgData,\n-    Interner, OpaqueTy, ProjectionTy, Substitution, TraitRef, Ty, TyKind, WhereClause,\n+    utils::make_mut_slice, AliasEq, AliasTy, Binders, CallableSig, FnSubst, GenericArg,\n+    GenericArgData, Interner, OpaqueTy, ProjectionTy, Substitution, TraitRef, Ty, TyKind,\n+    WhereClause,\n };\n \n /// This allows walking structures that contain types to do something with those\n@@ -381,3 +382,17 @@ impl TypeWalk for AliasEq {\n         }\n     }\n }\n+\n+impl TypeWalk for FnSubst {\n+    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n+        self.0.walk(f)\n+    }\n+\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n+        self.0.walk_mut_binders(f, binders)\n+    }\n+}"}]}