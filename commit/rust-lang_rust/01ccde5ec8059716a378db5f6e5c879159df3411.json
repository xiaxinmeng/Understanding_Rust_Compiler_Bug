{"sha": "01ccde5ec8059716a378db5f6e5c879159df3411", "node_id": "C_kwDOAAsO6NoAKDAxY2NkZTVlYzgwNTk3MTZhMzc4ZGI1ZjZlNWM4NzkxNTlkZjM0MTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-04T20:25:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-04T20:25:04Z"}, "message": "Rollup merge of #100095 - jackh726:early-binder, r=lcnr\n\nMore EarlyBinder cleanups\n\nEach commit is independent\n\nr? types", "tree": {"sha": "6404108f0f1adb69f59d995e2fea3d61504349ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6404108f0f1adb69f59d995e2fea3d61504349ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ccde5ec8059716a378db5f6e5c879159df3411", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7CsgCRBK7hj4Ov3rIwAAdHEIAHIOk0acE6eGG1J4gVP2O3Di\nhLK+bCSXlv3MaiYn1rp+8TtkZ8ytqOUGI2LA9Cna0O4cOcoK45SPQobfQt9thero\nRKX8UUPEOXaH8KctMyhu4PfI64FfIM73wPDEiNcHzGwZFfTBu7yYJSbepcWgN2zt\nPhabsK4lFHXnpoEY89QEnNKurCmV+nf0Rs7CtaaI1AJiEq6V7Vxk63aSc63Xd+6p\npG45CXynqljjxjFraQMI5Fkz20Brk5Z9KEj0OnJbNywO/GjXdehpEgY9oVXrbxQH\nN+FUu0+w97z7zwrPlnbaS5YprVLGCwLCA9fHbAgiU5Bdt5TqgxASAb0lA1LNCQw=\n=/VT6\n-----END PGP SIGNATURE-----\n", "payload": "tree 6404108f0f1adb69f59d995e2fea3d61504349ab\nparent 6b938c8491bc8d16a9a1a4d080368485f4454d31\nparent 955fcad75808a66576f72680fa9698753d975ed2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659644704 +0200\ncommitter GitHub <noreply@github.com> 1659644704 +0200\n\nRollup merge of #100095 - jackh726:early-binder, r=lcnr\n\nMore EarlyBinder cleanups\n\nEach commit is independent\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ccde5ec8059716a378db5f6e5c879159df3411", "html_url": "https://github.com/rust-lang/rust/commit/01ccde5ec8059716a378db5f6e5c879159df3411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ccde5ec8059716a378db5f6e5c879159df3411/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b938c8491bc8d16a9a1a4d080368485f4454d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b938c8491bc8d16a9a1a4d080368485f4454d31", "html_url": "https://github.com/rust-lang/rust/commit/6b938c8491bc8d16a9a1a4d080368485f4454d31"}, {"sha": "955fcad75808a66576f72680fa9698753d975ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/955fcad75808a66576f72680fa9698753d975ed2", "html_url": "https://github.com/rust-lang/rust/commit/955fcad75808a66576f72680fa9698753d975ed2"}], "stats": {"total": 162, "additions": 94, "deletions": 68}, "files": [{"sha": "8bc8964bbd7cc1d6955256e1e25dce438d32bcc3", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -16,9 +16,7 @@ use rustc_middle::mir::{\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{\n-    self, subst::Subst, suggest_constraining_type_params, EarlyBinder, PredicateKind, Ty,\n-};\n+use rustc_middle::ty::{self, subst::Subst, suggest_constraining_type_params, PredicateKind, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n@@ -461,35 +459,37 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // Find out if the predicates show that the type is a Fn or FnMut\n-        let find_fn_kind_from_did = |predicates: &[(ty::Predicate<'tcx>, Span)], substs| {\n-            predicates.iter().find_map(|(pred, _)| {\n-                let pred = if let Some(substs) = substs {\n-                    EarlyBinder(*pred).subst(tcx, substs).kind().skip_binder()\n-                } else {\n-                    pred.kind().skip_binder()\n-                };\n-                if let ty::PredicateKind::Trait(pred) = pred && pred.self_ty() == ty {\n+        let find_fn_kind_from_did =\n+            |predicates: ty::EarlyBinder<&[(ty::Predicate<'tcx>, Span)]>, substs| {\n+                predicates.0.iter().find_map(|(pred, _)| {\n+                    let pred = if let Some(substs) = substs {\n+                        predicates.rebind(*pred).subst(tcx, substs).kind().skip_binder()\n+                    } else {\n+                        pred.kind().skip_binder()\n+                    };\n+                    if let ty::PredicateKind::Trait(pred) = pred && pred.self_ty() == ty {\n                     if Some(pred.def_id()) == tcx.lang_items().fn_trait() {\n                         return Some(hir::Mutability::Not);\n                     } else if Some(pred.def_id()) == tcx.lang_items().fn_mut_trait() {\n                         return Some(hir::Mutability::Mut);\n                     }\n                 }\n-                None\n-            })\n-        };\n+                    None\n+                })\n+            };\n \n         // If the type is opaque/param/closure, and it is Fn or FnMut, let's suggest (mutably)\n         // borrowing the type, since `&mut F: FnMut` iff `F: FnMut` and similarly for `Fn`.\n         // These types seem reasonably opaque enough that they could be substituted with their\n         // borrowed variants in a function body when we see a move error.\n         let borrow_level = match ty.kind() {\n             ty::Param(_) => find_fn_kind_from_did(\n-                tcx.explicit_predicates_of(self.mir_def_id().to_def_id()).predicates,\n+                tcx.bound_explicit_predicates_of(self.mir_def_id().to_def_id())\n+                    .map_bound(|p| p.predicates),\n                 None,\n             ),\n             ty::Opaque(did, substs) => {\n-                find_fn_kind_from_did(tcx.explicit_item_bounds(*did), Some(*substs))\n+                find_fn_kind_from_did(tcx.bound_explicit_item_bounds(*did), Some(*substs))\n             }\n             ty::Closure(_, substs) => match substs.as_closure().kind() {\n                 ty::ClosureKind::Fn => Some(hir::Mutability::Not),"}, {"sha": "936044fbe24b260455760eeb9ea52f26eac5dbae", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::pretty::display_allocation;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, subst::Subst, EarlyBinder, TyCtxt};\n+use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n use rustc_target::abi::{self, Abi};\n use std::borrow::Cow;\n@@ -45,7 +45,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n         \"Unexpected DefKind: {:?}\",\n         ecx.tcx.def_kind(cid.instance.def_id())\n     );\n-    let layout = ecx.layout_of(EarlyBinder(body.return_ty()).subst(tcx, cid.instance.substs))?;\n+    let layout = ecx.layout_of(body.bound_return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n "}, {"sha": "7ab71f9009d04a3320c5ea642c00512ac890a01a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -431,6 +431,12 @@ impl<'tcx> Body<'tcx> {\n         self.local_decls[RETURN_PLACE].ty\n     }\n \n+    /// Returns the return type; it always return first element from `local_decls` array.\n+    #[inline]\n+    pub fn bound_return_ty(&self) -> ty::EarlyBinder<Ty<'tcx>> {\n+        ty::EarlyBinder(self.local_decls[RETURN_PLACE].ty)\n+    }\n+\n     /// Gets the location of the terminator for the given block.\n     #[inline]\n     pub fn terminator_loc(&self, bb: BasicBlock) -> Location {"}, {"sha": "2e596b275276e3bb86478e64552b3adf03dc66d6", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -563,7 +563,7 @@ impl<'tcx> AdtDef<'tcx> {\n     ///\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer (e.g., issue #31299).\n-    pub fn sized_constraint(self, tcx: TyCtxt<'tcx>) -> &'tcx [Ty<'tcx>] {\n-        tcx.adt_sized_constraint(self.did()).0\n+    pub fn sized_constraint(self, tcx: TyCtxt<'tcx>) -> ty::EarlyBinder<&'tcx [Ty<'tcx>]> {\n+        ty::EarlyBinder(tcx.adt_sized_constraint(self.did()).0)\n     }\n }"}, {"sha": "52c3a38861e6531984603dc86497ea220e98bab1", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -2191,7 +2191,7 @@ impl<'tcx> Ty<'tcx> {\n \n             ty::Tuple(tys) => tys.iter().all(|ty| ty.is_trivially_sized(tcx)),\n \n-            ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),\n+            ty::Adt(def, _substs) => def.sized_constraint(tcx).0.is_empty(),\n \n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,\n "}, {"sha": "591bb7831b5b6375ab98b17f28ecfb389dc26e5a", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -680,6 +680,24 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn bound_const_param_default(self, def_id: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n         ty::EarlyBinder(self.const_param_default(def_id))\n     }\n+\n+    pub fn bound_predicates_of(\n+        self,\n+        def_id: DefId,\n+    ) -> ty::EarlyBinder<ty::generics::GenericPredicates<'tcx>> {\n+        ty::EarlyBinder(self.predicates_of(def_id))\n+    }\n+\n+    pub fn bound_explicit_predicates_of(\n+        self,\n+        def_id: DefId,\n+    ) -> ty::EarlyBinder<ty::generics::GenericPredicates<'tcx>> {\n+        ty::EarlyBinder(self.explicit_predicates_of(def_id))\n+    }\n+\n+    pub fn bound_impl_subject(self, def_id: DefId) -> ty::EarlyBinder<ty::ImplSubject<'tcx>> {\n+        ty::EarlyBinder(self.impl_subject(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "fbc0a767f0766a494bba2746c91dfb84c3f079a9", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -18,9 +18,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{\n-    self, ConstKind, EarlyBinder, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable};\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{self, HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi as CallAbi;\n@@ -387,7 +385,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         );\n \n         let ret_layout = ecx\n-            .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n+            .layout_of(body.bound_return_ty().subst(tcx, substs))\n             .ok()\n             // Don't bother allocating memory for large values.\n             // I don't know how return types can seem to be unsized but this happens in the"}, {"sha": "c2ea55af48a1e781e0ea83a6dab425a5d68d764d", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -23,8 +23,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, ConstInt, ConstKind, EarlyBinder, Instance, ParamEnv, ScalarInt, Ty, TyCtxt,\n-    TypeVisitable,\n+    self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_session::lint;\n use rustc_span::Span;\n@@ -196,7 +195,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         );\n \n         let ret_layout = ecx\n-            .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n+            .layout_of(body.bound_return_ty().subst(tcx, substs))\n             .ok()\n             // Don't bother allocating memory for large values.\n             // I don't know how return types can seem to be unsized but this happens in the"}, {"sha": "adf47ece69d99aa37d981c504bdf4058832712ce", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -32,7 +32,7 @@ use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable};\n-use rustc_middle::ty::{self, EarlyBinder, Term, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n \n use std::collections::BTreeMap;\n@@ -2005,16 +2005,16 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs =\n         translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);\n-    let ty = tcx.type_of(assoc_ty.item.def_id);\n+    let ty = tcx.bound_type_of(assoc_ty.item.def_id);\n     let is_const = matches!(tcx.def_kind(assoc_ty.item.def_id), DefKind::AssocConst);\n-    let term: ty::Term<'tcx> = if is_const {\n+    let term: ty::EarlyBinder<ty::Term<'tcx>> = if is_const {\n         let identity_substs =\n             crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n         let kind = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, identity_substs));\n-        tcx.mk_const(ty::ConstS { ty, kind }).into()\n+        ty.map_bound(|ty| tcx.mk_const(ty::ConstS { ty, kind }).into())\n     } else {\n-        ty.into()\n+        ty.map_bound(|ty| ty.into())\n     };\n     if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n         let err = tcx.ty_error_with_message(\n@@ -2024,7 +2024,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         Progress { term: err.into(), obligations: nested }\n     } else {\n         assoc_ty_own_obligations(selcx, obligation, &mut nested);\n-        Progress { term: EarlyBinder(term).subst(tcx, substs), obligations: nested }\n+        Progress { term: term.subst(tcx, substs), obligations: nested }\n     }\n }\n "}, {"sha": "c01ac197991069e8b6c9a5d2309d0d99e6186ceb", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -1886,7 +1886,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let sized_crit = def.sized_constraint(self.tcx());\n                 // (*) binder moved here\n                 Where(obligation.predicate.rebind({\n-                    sized_crit.iter().map(|ty| EarlyBinder(*ty).subst(self.tcx(), substs)).collect()\n+                    sized_crit\n+                        .0\n+                        .iter()\n+                        .map(|ty| sized_crit.rebind(*ty).subst(self.tcx(), substs))\n+                        .collect()\n                 }))\n             }\n \n@@ -2357,11 +2361,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // obligation will normalize to `<$0 as Iterator>::Item = $1` and\n         // `$1: Copy`, so we must ensure the obligations are emitted in\n         // that order.\n-        let predicates = tcx.predicates_of(def_id);\n+        let predicates = tcx.bound_predicates_of(def_id);\n         debug!(?predicates);\n-        assert_eq!(predicates.parent, None);\n-        let mut obligations = Vec::with_capacity(predicates.predicates.len());\n-        for (predicate, span) in predicates.predicates {\n+        assert_eq!(predicates.0.parent, None);\n+        let mut obligations = Vec::with_capacity(predicates.0.predicates.len());\n+        for (predicate, span) in predicates.0.predicates {\n             let span = *span;\n             let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n                 ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n@@ -2375,7 +2379,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 param_env,\n                 cause.clone(),\n                 recursion_depth,\n-                EarlyBinder(*predicate).subst(tcx, substs),\n+                predicates.rebind(*predicate).subst(tcx, substs),\n                 &mut obligations,\n             );\n             obligations.push(Obligation { cause, recursion_depth, param_env, predicate });"}, {"sha": "d25006016629c907bf0d0f60d489900610ac3dd8", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -6,7 +6,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};\n@@ -200,8 +200,8 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     impl_def_id: DefId,\n     impl_substs: SubstsRef<'tcx>,\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n-    let subject = selcx.tcx().impl_subject(impl_def_id);\n-    let subject = EarlyBinder(subject).subst(selcx.tcx(), impl_substs);\n+    let subject = selcx.tcx().bound_impl_subject(impl_def_id);\n+    let subject = subject.subst(selcx.tcx(), impl_substs);\n     let Normalized { value: subject, obligations: normalization_obligations1 } =\n         super::normalize(selcx, param_env, ObligationCause::dummy(), subject);\n "}, {"sha": "ff5ca0cbcb7b134bf8a7e3aa73d82d9223089ca5", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -51,11 +51,11 @@ impl<'tcx> RustIrDatabase<'tcx> {\n     where\n         ty::Predicate<'tcx>: LowerInto<'tcx, std::option::Option<T>>,\n     {\n-        self.interner\n-            .tcx\n-            .explicit_item_bounds(def_id)\n+        let bounds = self.interner.tcx.bound_explicit_item_bounds(def_id);\n+        bounds\n+            .0\n             .iter()\n-            .map(|(bound, _)| EarlyBinder(*bound).subst(self.interner.tcx, &bound_vars))\n+            .map(|(bound, _)| bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars))\n             .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n             .collect()\n     }\n@@ -268,21 +268,20 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n-        let sig = self.interner.tcx.fn_sig(def_id);\n+        let sig = self.interner.tcx.bound_fn_sig(def_id);\n         let (inputs_and_output, iobinders, _) = crate::chalk::lowering::collect_bound_vars(\n             self.interner,\n             self.interner.tcx,\n-            EarlyBinder(sig.inputs_and_output()).subst(self.interner.tcx, bound_vars),\n+            sig.map_bound(|s| s.inputs_and_output()).subst(self.interner.tcx, bound_vars),\n         );\n \n         let argument_types = inputs_and_output[..inputs_and_output.len() - 1]\n             .iter()\n-            .map(|t| {\n-                EarlyBinder(*t).subst(self.interner.tcx, &bound_vars).lower_into(self.interner)\n-            })\n+            .map(|t| sig.rebind(*t).subst(self.interner.tcx, &bound_vars).lower_into(self.interner))\n             .collect();\n \n-        let return_type = EarlyBinder(inputs_and_output[inputs_and_output.len() - 1])\n+        let return_type = sig\n+            .rebind(inputs_and_output[inputs_and_output.len() - 1])\n             .subst(self.interner.tcx, &bound_vars)\n             .lower_into(self.interner);\n \n@@ -295,7 +294,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         };\n         Arc::new(chalk_solve::rust_ir::FnDefDatum {\n             id: fn_def_id,\n-            sig: sig.lower_into(self.interner),\n+            sig: sig.0.lower_into(self.interner),\n             binders: chalk_ir::Binders::new(binders, bound),\n         })\n     }\n@@ -503,12 +502,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let identity_substs = InternalSubsts::identity_for_item(self.interner.tcx, opaque_ty_id.0);\n \n+        let explicit_item_bounds = self.interner.tcx.bound_explicit_item_bounds(opaque_ty_id.0);\n         let bounds =\n-            self.interner\n-                .tcx\n-                .explicit_item_bounds(opaque_ty_id.0)\n+            explicit_item_bounds\n+                .0\n                 .iter()\n-                .map(|(bound, _)| EarlyBinder(*bound).subst(self.interner.tcx, &bound_vars))\n+                .map(|(bound, _)| {\n+                    explicit_item_bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars)\n+                })\n                 .map(|bound| {\n                     bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,"}, {"sha": "db0d45b86fc03dacfb09fb51fdf0e15327b6fb94", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -2,9 +2,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{\n-    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n-};\n+use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -33,8 +31,9 @@ fn sized_constraint_for_ty<'tcx>(\n             let adt_tys = adt.sized_constraint(tcx);\n             debug!(\"sized_constraint_for_ty({:?}) intermediate = {:?}\", ty, adt_tys);\n             adt_tys\n+                .0\n                 .iter()\n-                .map(|ty| EarlyBinder(*ty).subst(tcx, substs))\n+                .map(|ty| adt_tys.rebind(*ty).subst(tcx, substs))\n                 .flat_map(|ty| sized_constraint_for_ty(tcx, adtdef, ty))\n                 .collect()\n         }"}, {"sha": "d0334cd0df7bbf97f1818038469215160b5c4a3a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ccde5ec8059716a378db5f6e5c879159df3411/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=01ccde5ec8059716a378db5f6e5c879159df3411", "patch": "@@ -15,8 +15,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt,\n-    TypeFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, AdtKind, DefIdTree, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -1295,7 +1295,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n     let infcx = wfcx.infcx;\n     let tcx = wfcx.tcx();\n \n-    let predicates = tcx.predicates_of(def_id);\n+    let predicates = tcx.bound_predicates_of(def_id.to_def_id());\n     let generics = tcx.generics_of(def_id);\n \n     let is_our_default = |def: &ty::GenericParamDef| match def.kind {\n@@ -1392,6 +1392,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n \n     // Now we build the substituted predicates.\n     let default_obligations = predicates\n+        .0\n         .predicates\n         .iter()\n         .flat_map(|&(pred, sp)| {\n@@ -1422,15 +1423,15 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             }\n             let mut param_count = CountParams::default();\n             let has_region = pred.visit_with(&mut param_count).is_break();\n-            let substituted_pred = EarlyBinder(pred).subst(tcx, substs);\n+            let substituted_pred = predicates.rebind(pred).subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n             if substituted_pred.has_param_types_or_consts()\n                 || param_count.params.len() > 1\n                 || has_region\n             {\n                 None\n-            } else if predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n+            } else if predicates.0.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n                 // Avoid duplication of predicates that contain no parameters, for example.\n                 None\n             } else {\n@@ -1456,7 +1457,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             traits::Obligation::new(cause, wfcx.param_env, pred)\n         });\n \n-    let predicates = predicates.instantiate_identity(tcx);\n+    let predicates = predicates.0.instantiate_identity(tcx);\n \n     let predicates = wfcx.normalize(span, None, predicates);\n "}]}