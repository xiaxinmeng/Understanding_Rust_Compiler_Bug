{"sha": "9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMzYyNDQ2NmIxYTFmZjA5MDhiZTBlZmRhY2E2MzFmOWEzYmFiN2E=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-25T18:12:09Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-25T18:12:09Z"}, "message": "Dead code.", "tree": {"sha": "47cf073c84ea4cb57fa61d89fb005f5690c6f4b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47cf073c84ea4cb57fa61d89fb005f5690c6f4b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "html_url": "https://github.com/rust-lang/rust/commit/9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3624466b1a1ff0908be0efdaca631f9a3bab7a/comments", "author": null, "committer": null, "parents": [{"sha": "2306fb19f21921194175d3204eb59f094264e782", "url": "https://api.github.com/repos/rust-lang/rust/commits/2306fb19f21921194175d3204eb59f094264e782", "html_url": "https://github.com/rust-lang/rust/commit/2306fb19f21921194175d3204eb59f094264e782"}], "stats": {"total": 399, "additions": 1, "deletions": 398}, "files": [{"sha": "9462e36a7c61df615d4cbcf379ee0c8009f167a3", "filename": "src/rt/rust_crate_reader.cpp", "status": "modified", "additions": 1, "deletions": 346, "changes": 347, "blob_url": "https://github.com/rust-lang/rust/blob/9a3624466b1a1ff0908be0efdaca631f9a3bab7a/src%2Frt%2Frust_crate_reader.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9a3624466b1a1ff0908be0efdaca631f9a3bab7a/src%2Frt%2Frust_crate_reader.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_reader.cpp?ref=9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "patch": "@@ -225,361 +225,16 @@ rust_crate_reader::attr::is_unknown() const {\n   return !(is_numeric() || is_string());\n }\n \n-rust_crate_reader::rdr_sess::rdr_sess(die_reader *rdr) : rdr(rdr)\n-{\n-  I(rdr->mem.dom, !rdr->in_use);\n-  rdr->in_use = true;\n-}\n-\n-rust_crate_reader::rdr_sess::~rdr_sess()\n-{\n-  rdr->in_use = false;\n-}\n-\n-rust_crate_reader::die::die(die_reader *rdr, uintptr_t off)\n-  : rdr(rdr),\n-    off(off),\n-    using_rdr(false)\n-{\n-  rust_dom *dom = rdr->mem.dom;\n-  rdr_sess use(rdr);\n-\n-  rdr->reset();\n-  rdr->seek_off(off);\n-  if (!rdr->is_ok()) {\n-    ab = NULL;\n-    return;\n-  }\n-  size_t ab_idx;\n-  rdr->get_uleb(ab_idx);\n-  if (!ab_idx) {\n-    ab = NULL;\n-    DLOG(dom, dwarf, \"DIE <0x%\" PRIxPTR \"> (null)\", off);\n-  } else {\n-    ab = rdr->abbrevs.get_abbrev(ab_idx);\n-    if (!ab) {\n-        DLOG(dom, dwarf, \"  bad abbrev number: 0x%\"\n-                 PRIxPTR, ab_idx);\n-        rdr->fail();\n-    } else {\n-        DLOG(dom, dwarf, \"DIE <0x%\" PRIxPTR \"> abbrev 0x%\"\n-                 PRIxPTR, off, ab_idx);\n-        DLOG(dom, dwarf, \"  tag 0x%x, has children: %d\",\n-                 ab->tag, ab->has_children);\n-    }\n-  }\n-}\n-\n-bool\n-rust_crate_reader::die::is_null() const\n-{\n-  return ab == NULL;\n-}\n-\n-bool\n-rust_crate_reader::die::has_children() const\n-{\n-  return (!is_null()) && ab->has_children;\n-}\n-\n-dw_tag\n-rust_crate_reader::die::tag() const\n-{\n-  if (is_null())\n-    return (dw_tag) (-1);\n-  return (dw_tag) ab->tag;\n-}\n-\n-bool\n-rust_crate_reader::die::start_attrs() const\n-{\n-  if (is_null())\n-    return false;\n-  rdr->reset();\n-  rdr->seek_off(off + 1);\n-  rdr->abbrevs.reset();\n-  rdr->abbrevs.seek_off(ab->body_off);\n-  return rdr->is_ok();\n-}\n-\n-bool\n-rust_crate_reader::die::step_attr(attr &a) const\n-{\n-  uintptr_t ai, fi;\n-  if (rdr->abbrevs.step_attr_form_pair(ai, fi) && rdr->is_ok()) {\n-    a.at = (dw_at)ai;\n-    a.form = (dw_form)fi;\n-\n-    uint32_t u32 = 0;\n-    uint8_t u8 = 0;\n-\n-    switch (a.form) {\n-    case DW_FORM_string:\n-      return rdr->get_zstr(a.val.str.s, a.val.str.sz);\n-      break;\n-\n-    case DW_FORM_ref_addr:\n-      I(rdr->mem.dom, sizeof(uintptr_t) == 4);\n-    case DW_FORM_addr:\n-    case DW_FORM_data4:\n-      rdr->get(u32);\n-      a.val.num = (uintptr_t)u32;\n-      return rdr->is_ok() || rdr->at_end();\n-      break;\n-\n-    case DW_FORM_data1:\n-    case DW_FORM_flag:\n-      rdr->get(u8);\n-      a.val.num = u8;\n-      return rdr->is_ok() || rdr->at_end();\n-      break;\n-\n-    case DW_FORM_block1:\n-      rdr->get(u8);\n-      rdr->adv(u8);\n-      return rdr->is_ok() || rdr->at_end();\n-      break;\n-\n-    case DW_FORM_block4:\n-      rdr->get(u32);\n-      rdr->adv(u32);\n-      return rdr->is_ok() || rdr->at_end();\n-      break;\n-\n-    case DW_FORM_udata:\n-      rdr->get_uleb(u32);\n-      return rdr->is_ok() || rdr->at_end();\n-      break;\n-\n-    default:\n-      DLOG(rdr->mem.dom, dwarf, \"  unknown dwarf form: 0x%\"\n-                        PRIxPTR, a.form);\n-      rdr->fail();\n-      break;\n-    }\n-  }\n-  return false;\n-}\n-\n-bool\n-rust_crate_reader::die::find_str_attr(dw_at at, char const *&c)\n-{\n-  rdr_sess use(rdr);\n-  if (is_null())\n-    return false;\n-  if (start_attrs()) {\n-    attr a;\n-    while (step_attr(a)) {\n-      if (a.at == at && a.is_string()) {\n-        c = a.get_str(rdr->mem.dom);\n-        return true;\n-      }\n-    }\n-  }\n-  return false;\n-}\n-\n-bool\n-rust_crate_reader::die::find_num_attr(dw_at at, uintptr_t &n)\n-{\n-  rdr_sess use(rdr);\n-  if (is_null())\n-    return false;\n-  if (start_attrs()) {\n-    attr a;\n-    while (step_attr(a)) {\n-      if (a.at == at && a.is_numeric()) {\n-        n = a.get_num(rdr->mem.dom);\n-        return true;\n-      }\n-    }\n-  }\n-  return false;\n-}\n-\n-bool\n-rust_crate_reader::die::is_transparent()\n-{\n-  // \"semantically transparent\" DIEs are those with\n-  // children that serve to structure the tree but have\n-  // tags that don't reflect anything in the rust-module\n-  // name hierarchy.\n-  switch (tag()) {\n-  case DW_TAG_compile_unit:\n-  case DW_TAG_lexical_block:\n-    return (has_children());\n-  default:\n-    break;\n-  }\n-  return false;\n-}\n-\n-bool\n-rust_crate_reader::die::find_child_by_name(char const *c,\n-                                                       die &child,\n-                                                       bool exact)\n-{\n-  rust_dom *dom = rdr->mem.dom;\n-  I(dom, has_children());\n-  I(dom, !is_null());\n-\n-  for (die ch = next(); !ch.is_null(); ch = ch.next_sibling()) {\n-    char const *ac;\n-    if (!exact && ch.is_transparent()) {\n-      if (ch.find_child_by_name(c, child, exact)) {\n-        return true;\n-      }\n-    }\n-    else if (ch.find_str_attr(DW_AT_name, ac)) {\n-      if (strcmp(ac, c) == 0) {\n-        child = ch;\n-        return true;\n-      }\n-    }\n-  }\n-  return false;\n-}\n-\n-bool\n-rust_crate_reader::die::find_child_by_tag(dw_tag tag, die &child)\n-{\n-  rust_dom *dom = rdr->mem.dom;\n-  I(dom, has_children());\n-  I(dom, !is_null());\n-\n-  for (child = next(); !child.is_null();\n-       child = child.next_sibling()) {\n-    if (child.tag() == tag)\n-      return true;\n-  }\n-  return false;\n-}\n-\n-rust_crate_reader::die\n-rust_crate_reader::die::next() const\n-{\n-  rust_dom *dom = rdr->mem.dom;\n-\n-  if (is_null()) {\n-    rdr->seek_off(off + 1);\n-    return die(rdr, rdr->tell_off());\n-  }\n-\n-  {\n-    rdr_sess use(rdr);\n-    if (start_attrs()) {\n-        attr a;\n-        while (step_attr(a)) {\n-            I(dom, !(a.is_numeric() && a.is_string()));\n-            if (a.is_numeric())\n-                DLOG(dom, dwarf, \"  attr num: 0x%\"\n-                         PRIxPTR, a.get_num(dom));\n-            else if (a.is_string())\n-                DLOG(dom, dwarf, \"  attr str: %s\",\n-                         a.get_str(dom));\n-            else\n-                DLOG(dom, dwarf, \"  attr ??:\");\n-        }\n-    }\n-  }\n-  return die(rdr, rdr->tell_off());\n-}\n-\n-rust_crate_reader::die\n-rust_crate_reader::die::next_sibling() const\n-{\n-  // FIXME: use DW_AT_sibling, when present.\n-  if (has_children()) {\n-    // DLOG(rdr->mem.dom, dwarf, \"+++ children of die 0x%\"\n-    //                   PRIxPTR, off);\n-    die child = next();\n-    while (!child.is_null())\n-      child = child.next_sibling();\n-    // DLOG(rdr->mem.dom, dwarf, \"--- children of die 0x%\"\n-    //                   PRIxPTR, off);\n-    return child.next();\n-  } else {\n-    return next();\n-  }\n-}\n-\n-\n-rust_crate_reader::die\n-rust_crate_reader::die_reader::first_die()\n-{\n-  reset();\n-  seek_off(cu_base\n-           + sizeof(dwarf_vers)\n-           + sizeof(cu_abbrev_off)\n-           + sizeof(sizeof_addr));\n-  return die(this, tell_off());\n-}\n-\n-void\n-rust_crate_reader::die_reader::dump()\n-{\n-  rust_dom *dom = mem.dom;\n-  die d = first_die();\n-  while (!d.is_null())\n-    d = d.next_sibling();\n-  I(dom, d.is_null());\n-  I(dom, d.off == mem.lim - mem.base);\n-}\n-\n-\n-rust_crate_reader::die_reader::die_reader(rust_crate::mem_area &die_mem,\n-                              abbrev_reader &abbrevs)\n-  : mem_reader(die_mem),\n-    abbrevs(abbrevs),\n-    cu_unit_length(0),\n-    cu_base(0),\n-    dwarf_vers(0),\n-    cu_abbrev_off(0),\n-    sizeof_addr(0),\n-    in_use(false)\n-{\n-  rust_dom *dom = mem.dom;\n-\n-  rdr_sess use(this);\n-\n-  get(cu_unit_length);\n-  cu_base = tell_off();\n-\n-  get(dwarf_vers);\n-  get(cu_abbrev_off);\n-  get(sizeof_addr);\n-\n-  if (is_ok()) {\n-    DLOG(dom, dwarf, \"new root CU at 0x%\" PRIxPTR, die_mem.base);\n-    DLOG(dom, dwarf, \"CU unit length: %\" PRId32, cu_unit_length);\n-    DLOG(dom, dwarf, \"dwarf version: %\" PRId16, dwarf_vers);\n-    DLOG(dom, dwarf, \"CU abbrev off: %\" PRId32, cu_abbrev_off);\n-    DLOG(dom, dwarf, \"size of address: %\" PRId8, sizeof_addr);\n-    I(dom, sizeof_addr == sizeof(uintptr_t));\n-    I(dom, dwarf_vers >= 2);\n-    I(dom, cu_base + cu_unit_length == die_mem.lim - die_mem.base);\n-  } else {\n-    DLOG(dom, dwarf, \"failed to read root CU header\");\n-  }\n-}\n-\n-rust_crate_reader::die_reader::~die_reader() {\n-}\n-\n-\n rust_crate_reader::rust_crate_reader(rust_dom *dom,\n                                      rust_crate const *crate)\n   : dom(dom),\n     abbrev_mem(crate->get_debug_abbrev(dom)),\n     abbrevs(abbrev_mem),\n-    die_mem(crate->get_debug_info(dom)),\n-    dies(die_mem, abbrevs)\n+    die_mem(crate->get_debug_info(dom))\n {\n   DLOG(dom, mem, \"crate_reader on crate: 0x%\" PRIxPTR, this);\n   DLOG(dom, mem, \"debug_abbrev: 0x%\" PRIxPTR, abbrev_mem.base);\n   DLOG(dom, mem, \"debug_info: 0x%\" PRIxPTR, die_mem.base);\n-  // For now, perform diagnostics only.\n-  dies.dump();\n }\n \n "}, {"sha": "53d0e336a310b17d8ec00460b919b8441e27703a", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9a3624466b1a1ff0908be0efdaca631f9a3bab7a/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/9a3624466b1a1ff0908be0efdaca631f9a3bab7a/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=9a3624466b1a1ff0908be0efdaca631f9a3bab7a", "patch": "@@ -421,58 +421,6 @@ rust_crate_reader\n         bool is_unknown() const;\n     };\n \n-    struct die_reader;\n-\n-    struct\n-    die\n-    {\n-        die_reader *rdr;\n-        uintptr_t off;\n-        abbrev *ab;\n-        bool using_rdr;\n-\n-        die(die_reader *rdr, uintptr_t off);\n-        bool is_null() const;\n-        bool has_children() const;\n-        dw_tag tag() const;\n-        bool start_attrs() const;\n-        bool step_attr(attr &a) const;\n-        bool find_str_attr(dw_at at, char const *&c);\n-        bool find_num_attr(dw_at at, uintptr_t &n);\n-        bool is_transparent();\n-        bool find_child_by_name(char const *c, die &child,\n-                                bool exact=false);\n-        bool find_child_by_tag(dw_tag tag, die &child);\n-        die next() const;\n-        die next_sibling() const;\n-    };\n-\n-    struct\n-    rdr_sess\n-    {\n-        die_reader *rdr;\n-        rdr_sess(die_reader *rdr);\n-        ~rdr_sess();\n-    };\n-\n-    struct\n-    die_reader : public mem_reader\n-    {\n-        abbrev_reader &abbrevs;\n-        uint32_t cu_unit_length;\n-        uintptr_t cu_base;\n-        uint16_t dwarf_vers;\n-        uint32_t cu_abbrev_off;\n-        uint8_t sizeof_addr;\n-        bool in_use;\n-\n-        die first_die();\n-        void dump();\n-        die_reader(rust_crate::mem_area &die_mem,\n-                   abbrev_reader &abbrevs);\n-        ~die_reader();\n-    };\n-    die_reader dies;\n     rust_crate_reader(rust_dom *dom, rust_crate const *crate);\n };\n "}]}