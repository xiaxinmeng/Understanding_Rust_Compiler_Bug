{"sha": "0608e277b62bb96de225bfae404b3fcfef6253c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MDhlMjc3YjYyYmI5NmRlMjI1YmZhZTQwNGIzZmNmZWY2MjUzYzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T18:24:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T22:25:47Z"}, "message": "Add some helper functions for attributes. Issue #487", "tree": {"sha": "2706a9a1220cc2105edad5e5030fac469dc30c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2706a9a1220cc2105edad5e5030fac469dc30c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0608e277b62bb96de225bfae404b3fcfef6253c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0608e277b62bb96de225bfae404b3fcfef6253c4", "html_url": "https://github.com/rust-lang/rust/commit/0608e277b62bb96de225bfae404b3fcfef6253c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0608e277b62bb96de225bfae404b3fcfef6253c4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7554423423c0770cad63178f31db699b9e7c62ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/7554423423c0770cad63178f31db699b9e7c62ed", "html_url": "https://github.com/rust-lang/rust/commit/7554423423c0770cad63178f31db699b9e7c62ed"}], "stats": {"total": 280, "additions": 79, "deletions": 201}, "files": [{"sha": "b7751fc230330cd8e9bbc85ca31476b4caa11bf5", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0608e277b62bb96de225bfae404b3fcfef6253c4/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0608e277b62bb96de225bfae404b3fcfef6253c4/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=0608e277b62bb96de225bfae404b3fcfef6253c4", "patch": "@@ -328,6 +328,10 @@ fn list_crate_attributes(&ebml::doc md, io::writer out) {\n     out.write_str(\"\\n\\n\");\n }\n \n+fn get_crate_attributes(&vec[u8] data) -> vec[ast::attribute] {\n+    ret get_attributes(ebml::new_doc(data));\n+}\n+\n fn list_crate_items(vec[u8] bytes, &ebml::doc md, io::writer out) {\n     out.write_str(\"=Items=\\n\");\n     auto paths = ebml::get_doc(md, tag_paths);"}, {"sha": "45b0ccb7026404fc8d045866ccf8486bc965854a", "filename": "src/comp/middle/attr.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0608e277b62bb96de225bfae404b3fcfef6253c4/src%2Fcomp%2Fmiddle%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0608e277b62bb96de225bfae404b3fcfef6253c4/src%2Fcomp%2Fmiddle%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fattr.rs?ref=0608e277b62bb96de225bfae404b3fcfef6253c4", "patch": "@@ -0,0 +1,74 @@\n+import std::vec;\n+import std::option;\n+import front::ast;\n+\n+export get_linkage_metas;\n+export find_attrs_by_name;\n+\n+// From a list of crate attributes get only the meta_items that impact crate\n+// linkage\n+fn find_linkage_metas(vec[ast::attribute] attrs) -> vec[@ast::meta_item] {\n+    let vec[@ast::meta_item] metas = [];\n+    for (ast::attribute attr in find_attrs_by_name(attrs, \"link\")) {\n+        alt (attr.node.value.node) {\n+            case (ast::meta_list(_, ?items)) {\n+                metas += items;\n+            }\n+            case (_) {\n+                // FIXME: Maybe need a warning that this attr isn't\n+                // being used for linkage\n+            }\n+        }\n+    }\n+    ret metas;\n+}\n+\n+// Search a list of attributes and return only those with a specific name\n+fn find_attrs_by_name(vec[ast::attribute] attrs,\n+                      ast::ident name) -> vec[ast::attribute] {\n+    auto filter = bind fn(&ast::attribute a,\n+                          ast::ident name) -> option::t[ast::attribute] {\n+        if (get_attr_name(a) == name) {\n+            option::some(a)\n+        } else {\n+            option::none\n+        }\n+    } (_, name);\n+    ret vec::filter_map(filter, attrs);\n+}\n+\n+fn get_attr_name(&ast::attribute attr) -> ast::ident {\n+    get_meta_item_name(@attr.node.value)\n+}\n+\n+fn find_meta_items_by_name(vec[@ast::meta_item] metas,\n+                           ast::ident name) -> vec[@ast::meta_item] {\n+    auto filter = bind fn(&@ast::meta_item m,\n+                          ast::ident name) -> option::t[@ast::meta_item] {\n+        if (get_meta_item_name(m) == name) {\n+            option::some(m)\n+        } else {\n+            option::none\n+        }\n+    } (_, name);\n+    ret vec::filter_map(filter, metas);\n+}\n+\n+fn get_meta_item_name(&@ast::meta_item meta) -> ast::ident {\n+    alt (meta.node) {\n+        case (ast::meta_word(?n)) { n }\n+        case (ast::meta_name_value(?n, _)) { n }\n+        case (ast::meta_list(?n, _)) { n }\n+    }\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "75af89639caead8db7ec52dd15155bfb7ece38e7", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0608e277b62bb96de225bfae404b3fcfef6253c4/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0608e277b62bb96de225bfae404b3fcfef6253c4/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=0608e277b62bb96de225bfae404b3fcfef6253c4", "patch": "@@ -14,6 +14,7 @@ use std (name = \"std\",\n          url = \"http://rust-lang.org/src/std\");\n \n mod middle {\n+    mod attr;\n     mod trans;\n     mod ty;\n     mod walk;"}, {"sha": "bb8f068874c7135a00cafe608789195c1d0a9a04", "filename": "src/test/run-pass/item-attributes.rs", "status": "removed", "additions": 0, "deletions": 201, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/7554423423c0770cad63178f31db699b9e7c62ed/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7554423423c0770cad63178f31db699b9e7c62ed/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=7554423423c0770cad63178f31db699b9e7c62ed", "patch": "@@ -1,201 +0,0 @@\n-// xfail-stage0\n-\n-// These are attributes of the implicit crate. Really this just needs to parse\n-// for completeness since .rs files linked from .rc files support this\n-// notation to specify their module's attributes\n-#[attr1 = \"val\"];\n-#[attr2 = \"val\"];\n-#[attr3];\n-#[attr4(attr5)];\n-\n-// These are are attributes of the following mod\n-#[attr1 = \"val\"]\n-#[attr2 = \"val\"]\n-mod test_first_item_in_file_mod {\n-}\n-\n-mod test_single_attr_outer {\n-\n-    #[attr = \"val\"]\n-    const int x = 10;\n-\n-    #[attr = \"val\"]\n-    fn f() {}\n-\n-    #[attr = \"val\"]\n-    mod mod1 {\n-    }\n-\n-    #[attr = \"val\"]\n-    native \"rust\" mod rustrt { }\n-\n-    #[attr = \"val\"]\n-    type t = obj { };\n-\n-\n-    #[attr = \"val\"]\n-    obj o() { }\n-}\n-\n-mod test_multi_attr_outer {\n-\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    const int x = 10;\n-\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    fn f() {}\n-\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    mod mod1 {\n-    }\n-\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    native \"rust\" mod rustrt { }\n-\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    type t = obj { };\n-\n-\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    obj o() { }\n-}\n-\n-mod test_stmt_single_attr_outer {\n-\n-    fn f() {\n-\n-        #[attr = \"val\"]\n-        const int x = 10;\n-\n-        #[attr = \"val\"]\n-        fn f() {}\n-\n-        /* FIXME: Issue #493\n-        #[attr = \"val\"]\n-        mod mod1 {\n-        }\n-\n-        #[attr = \"val\"]\n-        native \"rust\" mod rustrt {\n-        }\n-        */\n-\n-        #[attr = \"val\"]\n-        type t = obj { };\n-\n-        #[attr = \"val\"]\n-        obj o() { }\n-\n-    }\n-}\n-\n-mod test_stmt_multi_attr_outer {\n-\n-    fn f() {\n-\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        const int x = 10;\n-\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        fn f() {}\n-\n-        /* FIXME: Issue #493\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        mod mod1 {\n-        }\n-\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        native \"rust\" mod rustrt {\n-        }\n-        */\n-\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        type t = obj { };\n-\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        obj o() { }\n-\n-    }\n-}\n-\n-mod test_attr_inner {\n-\n-    mod m {\n-        // This is an attribute of mod m\n-        #[attr = \"val\"];\n-    }\n-}\n-\n-mod test_attr_inner_then_outer {\n-\n-    mod m {\n-        // This is an attribute of mod m\n-        #[attr = \"val\"];\n-        // This is an attribute of fn f\n-        #[attr = \"val\"]\n-        fn f() {\n-        }\n-    }\n-}\n-\n-mod test_attr_inner_then_outer_multi {\n-    mod m {\n-        // This is an attribute of mod m\n-        #[attr1 = \"val\"];\n-        #[attr2 = \"val\"];\n-        // This is an attribute of fn f\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        fn f() {\n-        }\n-    }\n-}\n-\n-mod test_distinguish_syntax_ext {\n-\n-    use std;\n-\n-    fn f() {\n-        #fmt(\"test%s\", \"s\");\n-        #[attr = \"val\"]\n-        fn g() {\n-        }\n-    }\n-}\n-\n-mod test_other_forms {\n-    #[attr]\n-    #[attr(word)]\n-    #[attr(attr(word))]\n-    #[attr(key1 = \"val\",\n-           key2 = \"val\",\n-           attr)]\n-    fn f() {\n-    }\n-}\n-\n-fn main() {\n-}\n-\n-//\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}]}