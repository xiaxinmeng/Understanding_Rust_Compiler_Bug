{"sha": "8954d4dc67fc3cf519a9855b974846cfcb8c53b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NTRkNGRjNjdmYzNjZjUxOWE5ODU1Yjk3NDg0NmNmY2I4YzUzYjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T13:15:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T13:15:15Z"}, "message": "Introduce Import struct", "tree": {"sha": "6e61f614929d51fb35140e1fff9ab670d64f0f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e61f614929d51fb35140e1fff9ab670d64f0f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8954d4dc67fc3cf519a9855b974846cfcb8c53b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8954d4dc67fc3cf519a9855b974846cfcb8c53b2", "html_url": "https://github.com/rust-lang/rust/commit/8954d4dc67fc3cf519a9855b974846cfcb8c53b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8954d4dc67fc3cf519a9855b974846cfcb8c53b2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82c088137abe2ed834433634f0f7641a601a21fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/82c088137abe2ed834433634f0f7641a601a21fd", "html_url": "https://github.com/rust-lang/rust/commit/82c088137abe2ed834433634f0f7641a601a21fd"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "fb315a870644eacdee19e884648d2cd38acf2f41", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8954d4dc67fc3cf519a9855b974846cfcb8c53b2/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8954d4dc67fc3cf519a9855b974846cfcb8c53b2/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=8954d4dc67fc3cf519a9855b974846cfcb8c53b2", "patch": "@@ -43,14 +43,26 @@ pub(crate) struct ModuleScope {\n #[derive(Debug, Default, PartialEq, Eq)]\n pub(crate) struct InputModuleItems {\n     items: Vec<ModuleItem>,\n-    glob_imports: Vec<Path>,\n-    imports: Vec<Path>,\n+    imports: Vec<Import>,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+struct Import {\n+    path: Path,\n+    kind: ImportKind,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+enum ImportKind {\n+    Glob,\n+    // TODO: make offset independent\n+    Named(LocalSyntaxPtr),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n struct Path {\n     kind: PathKind,\n-    segments: Vec<(LocalSyntaxPtr, SmolStr)>,\n+    segments: Vec<SmolStr>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -199,14 +211,15 @@ impl InputModuleItems {\n                 self.add_use_tree(prefix.clone(), tree);\n             }\n         } else {\n-            if let Some(path) = tree.path() {\n-                if let Some(path) = convert_path(prefix, path) {\n-                    if tree.has_star() {\n-                        &mut self.glob_imports\n+            if let Some(ast_path) = tree.path() {\n+                if let Some(path) = convert_path(prefix, ast_path) {\n+                    let kind = if tree.has_star() {\n+                        ImportKind::Glob\n                     } else {\n-                        &mut self.imports\n-                    }\n-                    .push(path);\n+                        let ptr = LocalSyntaxPtr::new(ast_path.segment().unwrap().syntax());\n+                        ImportKind::Named(ptr)\n+                    };\n+                    self.imports.push(Import { kind, path })\n                 }\n             }\n         }\n@@ -226,8 +239,7 @@ fn convert_path(prefix: Option<Path>, path: ast::Path) -> Option<Path> {\n                 kind: PathKind::Abs,\n                 segments: Vec::with_capacity(1),\n             });\n-            let ptr = LocalSyntaxPtr::new(name.syntax());\n-            res.segments.push((ptr, name.text()));\n+            res.segments.push(name.text());\n             res\n         }\n         ast::PathSegmentKind::CrateKw => {\n@@ -307,14 +319,16 @@ where\n         let mut module_items = ModuleScope::default();\n \n         for import in input.imports.iter() {\n-            if let Some((ptr, name)) = import.segments.last() {\n-                module_items.items.insert(\n-                    name.clone(),\n-                    Resolution {\n-                        def_id: None,\n-                        import_name: Some(*ptr),\n-                    },\n-                );\n+            if let Some(name) = import.path.segments.iter().last() {\n+                if let ImportKind::Named(ptr) = import.kind {\n+                    module_items.items.insert(\n+                        name.clone(),\n+                        Resolution {\n+                            def_id: None,\n+                            import_name: Some(ptr),\n+                        },\n+                    );\n+                }\n             }\n         }\n \n@@ -355,8 +369,13 @@ where\n         }\n     }\n \n-    fn resolve_import(&mut self, module_id: ModuleId, import: &Path) {\n-        let mut curr = match import.kind {\n+    fn resolve_import(&mut self, module_id: ModuleId, import: &Import) {\n+        let ptr = match import.kind {\n+            ImportKind::Glob => return,\n+            ImportKind::Named(ptr) => ptr,\n+        };\n+\n+        let mut curr = match import.path.kind {\n             // TODO: handle extern crates\n             PathKind::Abs => return,\n             PathKind::Self_ => module_id,\n@@ -370,8 +389,8 @@ where\n             PathKind::Crate => module_id.crate_root(&self.module_tree),\n         };\n \n-        for (i, (ptr, name)) in import.segments.iter().enumerate() {\n-            let is_last = i == import.segments.len() - 1;\n+        for (i, name) in import.path.segments.iter().enumerate() {\n+            let is_last = i == import.path.segments.len() - 1;\n \n             let def_id = match self.result.per_module[&curr].items.get(name) {\n                 None => return,\n@@ -390,7 +409,7 @@ where\n                 self.update(module_id, |items| {\n                     let res = Resolution {\n                         def_id: Some(def_id),\n-                        import_name: Some(*ptr),\n+                        import_name: Some(ptr),\n                     };\n                     items.items.insert(name.clone(), res);\n                 })"}]}