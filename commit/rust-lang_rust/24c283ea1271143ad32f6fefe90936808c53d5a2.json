{"sha": "24c283ea1271143ad32f6fefe90936808c53d5a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YzI4M2VhMTI3MTE0M2FkMzJmNmZlZmU5MDkzNjgwOGM1M2Q1YTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T15:48:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T21:45:18Z"}, "message": "option_map_unit_fn: Split into fixable/unfixable", "tree": {"sha": "7fdcbb141d9b9a1c6bbb85e2d39aaa8d22300759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fdcbb141d9b9a1c6bbb85e2d39aaa8d22300759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24c283ea1271143ad32f6fefe90936808c53d5a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24c283ea1271143ad32f6fefe90936808c53d5a2", "html_url": "https://github.com/rust-lang/rust/commit/24c283ea1271143ad32f6fefe90936808c53d5a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24c283ea1271143ad32f6fefe90936808c53d5a2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a07854360026fe97f32b6505ac33a4cb86619d", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a07854360026fe97f32b6505ac33a4cb86619d", "html_url": "https://github.com/rust-lang/rust/commit/38a07854360026fe97f32b6505ac33a4cb86619d"}], "stats": {"total": 311, "additions": 137, "deletions": 174}, "files": [{"sha": "01aa6259855a99a2a0037e43dc6d38b048571d14", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -71,29 +71,6 @@ fn option_map_unit_fn() {\n     x.field.map(|value| { { plus_one(value + captured); } });\n \n \n-    x.field.map(|ref value| { do_nothing(value + captured) });\n-\n-\n-    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-\n-    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-\n-    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n-    // proper suggestion for these cases\n-    x.field.map(|value| {\n-        do_nothing(value);\n-        do_nothing(value)\n-    });\n-    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-\n-    // The following should suggest `if let Some(_X) ...` as it's difficult to generate a proper let variable name for them\n-    Some(42).map(diverge);\n-    \"12\".parse::<i32>().ok().map(diverge);\n-    Some(plus_one(1)).map(do_nothing);\n-\n-    // Should suggest `if let Some(_y) ...` to not override the existing foo variable\n-    let y = Some(42);\n-    y.map(do_nothing);\n-}\n+    x.field.map(|ref value| { do_nothing(value + captured) });}\n \n fn main() {}"}, {"sha": "7c7ad39c363e9ff67f34309fb6203d941537ced4", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -131,80 +131,10 @@ LL |     x.field.map(|value| { { plus_one(value + captured); } });\n error: called `map(f)` on an Option value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:74:5\n    |\n-LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n+LL |     x.field.map(|ref value| { do_nothing(value + captured) });}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:77:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:79:5\n-   |\n-LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:83:5\n-   |\n-LL |        x.field.map(|value| {\n-   |   _____^\n-   |  |_____|\n-   | ||\n-LL | ||         do_nothing(value);\n-LL | ||         do_nothing(value)\n-LL | ||     });\n-   | ||______^- help: try this: `if let Some(value) = x.field { ... }`\n-   | |_______|\n-   | \n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn_fixable.rs:87:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn_fixable.rs:90:5\n-   |\n-LL |     Some(42).map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(42) { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn_fixable.rs:91:5\n-   |\n-LL |     \"12\".parse::<i32>().ok().map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = \"12\".parse::<i32>().ok() { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn_fixable.rs:92:5\n-   |\n-LL |     Some(plus_one(1)).map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(plus_one(1)) { do_nothing(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn_fixable.rs:96:5\n-   |\n-LL |     y.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_y) = y { do_nothing(...) }`\n-\n-error: aborting due to 25 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "20e6c15b18d5f97717dd8331308be29b6f16b8b9", "filename": "tests/ui/option_map_unit_fn_unfixable.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_unfixable.rs?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -0,0 +1,39 @@\n+#![warn(clippy::option_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+#[rustfmt::skip]\n+fn option_map_unit_fn() {\n+\n+    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+\n+    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+\n+    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n+    // proper suggestion for these cases\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value)\n+    });\n+    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+\n+    // The following should suggest `if let Some(_X) ...` as it's difficult to generate a proper let variable name for them\n+    Some(42).map(diverge);\n+    \"12\".parse::<i32>().ok().map(diverge);\n+    Some(plus_one(1)).map(do_nothing);\n+\n+    // Should suggest `if let Some(_y) ...` to not override the existing foo variable\n+    let y = Some(42);\n+    y.map(do_nothing);\n+}\n+\n+fn main() {}"}, {"sha": "a53f5889c58dac2b355a74739bd4fcc3a85003bc", "filename": "tests/ui/option_map_unit_fn_unfixable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Foption_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_unfixable.stderr?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -0,0 +1,27 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:17:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:19:5\n+   |\n+LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:23:5\n+   |\n+LL |     x.field.map(|value| {\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:27:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+   |     ^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "b0377fbcd16dfad013a56768cfe2e0ee0f5de931", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -74,29 +74,6 @@ fn result_map_unit_fn() {\n \n \n     x.field.map(|ref value| { do_nothing(value + captured) });\n-\n-\n-    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-\n-    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-\n-    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n-    // proper suggestion for these cases\n-    x.field.map(|value| {\n-        do_nothing(value);\n-        do_nothing(value)\n-    });\n-    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-\n-    // The following should suggest `if let Ok(_X) ...` as it's difficult to generate a proper let variable name for them\n-    let res: Result<!, usize> = Ok(42).map(diverge);\n-    \"12\".parse::<i32>().map(diverge);\n-\n-    let res: Result<(), usize> = Ok(plus_one(1)).map(do_nothing);\n-\n-    // Should suggest `if let Ok(_y) ...` to not override the existing foo variable\n-    let y: Result<usize, usize> = Ok(42);\n-    y.map(do_nothing);\n }\n \n fn main() {}"}, {"sha": "e48fb7c14942226975b751067c8f60c9900f51a6", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -136,59 +136,5 @@ LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     |\n    |     help: try this: `if let Ok(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:79:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:81:5\n-   |\n-LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:85:5\n-   |\n-LL |        x.field.map(|value| {\n-   |   _____^\n-   |  |_____|\n-   | ||\n-LL | ||         do_nothing(value);\n-LL | ||         do_nothing(value)\n-LL | ||     });\n-   | ||______^- help: try this: `if let Ok(value) = x.field { ... }`\n-   | |_______|\n-   | \n-\n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn_fixable.rs:89:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:93:5\n-   |\n-LL |     \"12\".parse::<i32>().map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(_) = \"12\".parse::<i32>() { diverge(...) }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn_fixable.rs:99:5\n-   |\n-LL |     y.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(_y) = y { do_nothing(...) }`\n-\n-error: aborting due to 23 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "7d597332eafc5a6d064ba126fd4ba6e3320c0389", "filename": "tests/ui/result_map_unit_fn_unfixable.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -0,0 +1,40 @@\n+#![feature(never_type)]\n+#![warn(clippy::result_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+#[rustfmt::skip]\n+fn result_map_unit_fn() {\n+    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+\n+    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+\n+    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n+    // proper suggestion for these cases\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value)\n+    });\n+    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+\n+    // The following should suggest `if let Ok(_X) ...` as it's difficult to generate a proper let variable name for them\n+    let res: Result<!, usize> = Ok(42).map(diverge);\n+    \"12\".parse::<i32>().map(diverge);\n+\n+    let res: Result<(), usize> = Ok(plus_one(1)).map(do_nothing);\n+\n+    // Should suggest `if let Ok(_y) ...` to not override the existing foo variable\n+    let y: Result<usize, usize> = Ok(42);\n+    y.map(do_nothing);\n+}\n+\n+fn main() {}"}, {"sha": "949c22946793d0e4b6117b0c8bff005ee7501ccb", "filename": "tests/ui/result_map_unit_fn_unfixable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24c283ea1271143ad32f6fefe90936808c53d5a2/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr?ref=24c283ea1271143ad32f6fefe90936808c53d5a2", "patch": "@@ -0,0 +1,27 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:17:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:19:5\n+   |\n+LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:23:5\n+   |\n+LL |     x.field.map(|value| {\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:27:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+   |     ^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}