{"sha": "18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTk1ZDQxMzMzM2Q4ZDlhYjVkMWVkNmE1YWYyOTkzYzBjOGU1ZDg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-10T23:21:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-10T23:21:17Z"}, "message": "Rollup merge of #55801 - pnkfelix:update-box-insensitivity-test-for-nll, r=davidtwco\n\nNLL: Update box insensitivity test\n\nThis is just keeping one of our tests honest with respect to NLL, in two ways:\n\n 1. Adds uses of borrows that would otherwise be too short to observe the error that we would have expected to see...\n 2. ... I say \"would have expected\" because all of the errors in this file are part of the reversion of rust-lang/rfcs#130 that is attached to NLL (you can see more discussion of this here https://github.com/rust-lang/rust/issues/43234#issuecomment-411017768 )", "tree": {"sha": "68a742f63a9a8d96bb7fff3c9b78f47dcae67e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68a742f63a9a8d96bb7fff3c9b78f47dcae67e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb52fuCRBK7hj4Ov3rIwAAdHIIAHjapsiQBTAll0fgdryeMan1\nfR1kqjh3WYvFqSIzYwtIJDhnHoRlFZQbfdakCe26eMyuy+k4JLu+lNJpS9O5OxeB\niOxm64bPgwWUUDk8HzT8BeqdY69ZgEVIflUzNASuNG1ICRUtfS12NI/4U4Gj4HcA\ndxrBhZ0XCe2X5QvfMbNuxi0VBFmg2CODRNxWhsTbZxSUXffBPoqkhSzjuUDm7BdD\nkuhPsqcKqNcHOvAn8leItvV64Ma5AAG9IDmScHQIIGY4tNfU20o+1GwQrOtAdKl/\n1RAE9QhbxEsx7MMe28u/YhkuNdW6KMPtxYgEBV3I7wcBK7QhgOlugeNkBnNo+ec=\n=nTqU\n-----END PGP SIGNATURE-----\n", "payload": "tree 68a742f63a9a8d96bb7fff3c9b78f47dcae67e7f\nparent ff8ee964aeca7942d6bdc67545ef7e2a987da8c4\nparent 9b6a568c6f32af27bc050b7df0dabe4c5c9aefee\nauthor Pietro Albini <pietro@pietroalbini.org> 1541892077 +0100\ncommitter GitHub <noreply@github.com> 1541892077 +0100\n\nRollup merge of #55801 - pnkfelix:update-box-insensitivity-test-for-nll, r=davidtwco\n\nNLL: Update box insensitivity test\n\nThis is just keeping one of our tests honest with respect to NLL, in two ways:\n\n 1. Adds uses of borrows that would otherwise be too short to observe the error that we would have expected to see...\n 2. ... I say \"would have expected\" because all of the errors in this file are part of the reversion of rust-lang/rfcs#130 that is attached to NLL (you can see more discussion of this here https://github.com/rust-lang/rust/issues/43234#issuecomment-411017768 )\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8", "html_url": "https://github.com/rust-lang/rust/commit/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8ee964aeca7942d6bdc67545ef7e2a987da8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8ee964aeca7942d6bdc67545ef7e2a987da8c4", "html_url": "https://github.com/rust-lang/rust/commit/ff8ee964aeca7942d6bdc67545ef7e2a987da8c4"}, {"sha": "9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "html_url": "https://github.com/rust-lang/rust/commit/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee"}], "stats": {"total": 189, "additions": 103, "deletions": 86}, "files": [{"sha": "95b26a5724a412da7024ec1f88ecd1a4f59ce61f", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.ast.stderr", "status": "renamed", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr?ref=18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8", "patch": "@@ -3,8 +3,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -14,8 +14,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -25,8 +25,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = &a.y; //~ ERROR use of moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = &a.y; //[ast]~ ERROR use of moved\n    |               ^^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -44,7 +44,7 @@ error[E0503]: cannot use `a.y` because it was mutably borrowed\n    |\n LL |     let _x = &mut a.x;\n    |                   --- borrow of `a.x` occurs here\n-LL |     let _y = a.y; //~ ERROR cannot use\n+LL |     let _y = a.y; //[ast]~ ERROR cannot use\n    |         ^^ use of borrowed `a.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n@@ -60,9 +60,9 @@ error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also bor\n    |\n LL |     let _x = &mut a.x;\n    |                   --- mutable borrow occurs here (via `a.x`)\n-LL |     let _y = &a.y; //~ ERROR cannot borrow\n+LL |     let _y = &a.y; //[ast]~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here (via `a.y`)\n-LL |     //~^ immutable borrow occurs here (via `a.y`)\n+...\n LL | }\n    | - mutable borrow ends here\n \n@@ -71,9 +71,9 @@ error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borro\n    |\n LL |     let _x = &a.x;\n    |               --- immutable borrow occurs here (via `a.x`)\n-LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n+LL |     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n    |                   ^^^ mutable borrow occurs here (via `a.y`)\n-LL |     //~^ mutable borrow occurs here (via `a.y`)\n+...\n LL | }\n    | - immutable borrow ends here\n \n@@ -82,8 +82,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of collaterally moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of collaterally moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -93,8 +93,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of collaterally moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of collaterally moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -104,8 +104,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = &a.y; //~ ERROR use of collaterally moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = &a.y; //[ast]~ ERROR use of collaterally moved\n    |               ^^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -115,7 +115,7 @@ error[E0505]: cannot move out of `a.y` because it is borrowed\n    |\n LL |     let _x = &a.x.x;\n    |               ----- borrow of `a.x.x` occurs here\n-LL |     //~^ borrow of `a.x.x` occurs here\n+LL |     //[ast]~^ borrow of `a.x.x` occurs here\n LL |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n@@ -124,7 +124,7 @@ error[E0503]: cannot use `a.y` because it was mutably borrowed\n    |\n LL |     let _x = &mut a.x.x;\n    |                   ----- borrow of `a.x.x` occurs here\n-LL |     let _y = a.y; //~ ERROR cannot use\n+LL |     let _y = a.y; //[ast]~ ERROR cannot use\n    |         ^^ use of borrowed `a.x.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n@@ -140,10 +140,10 @@ error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed\n    |\n LL |     let _x = &mut a.x.x;\n    |                   ----- mutable borrow occurs here\n-LL |     //~^ mutable borrow occurs here\n-LL |     let _y = &a.y; //~ ERROR cannot borrow\n+LL |     //[ast]~^ mutable borrow occurs here\n+LL |     let _y = &a.y; //[ast]~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here\n-LL |     //~^ immutable borrow occurs here\n+...\n LL | }\n    | - mutable borrow ends here\n \n@@ -152,10 +152,10 @@ error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as\n    |\n LL |     let _x = &a.x.x;\n    |               ----- immutable borrow occurs here\n-LL |     //~^ immutable borrow occurs here\n-LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n+LL |     //[ast]~^ immutable borrow occurs here\n+LL |     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n    |                   ^^^ mutable borrow occurs here\n-LL |     //~^ mutable borrow occurs here\n+...\n LL | }\n    | - immutable borrow ends here\n ", "previous_filename": "src/test/ui/borrowck/borrowck-box-insensitivity.stderr"}, {"sha": "171e992e8a628e7aa1b072991509860f9f293e51", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.mir.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr?ref=18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8", "patch": "@@ -0,0 +1,14 @@\n+error: compilation successful\n+  --> $DIR/borrowck-box-insensitivity.rs:160:1\n+   |\n+LL | / fn main() { //[mir]~ ERROR compilation successful\n+LL | |     copy_after_move();\n+LL | |     move_after_move();\n+LL | |     borrow_after_move();\n+...  |\n+LL | |     mut_borrow_after_borrow_nested();\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2af97a9fc1d58718ed3e92eefa80f0549adbe68e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 64, "deletions": 61, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=18195d413333d8d9ab5d1ed6a5af2993c0c8e5d8", "patch": "@@ -1,13 +1,13 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n+// This test is an artifact of the old policy that `Box<T>` should not\n+// be treated specially by the AST-borrowck.\n //\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// NLL goes back to treating `Box<T>` specially (namely, knowing that\n+// it uniquely owns the data it holds). See rust-lang/rfcs#130.\n \n+// revisions: ast mir\n+//[ast] compile-flags: -Z borrowck=ast\n+//[mir] compile-flags: -Z borrowck=mir\n+// ignore-compare-mode-nll\n #![feature(box_syntax, rustc_attrs)]\n \n struct A {\n@@ -33,131 +33,131 @@ struct D {\n fn copy_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of moved\n+    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //[ast]~| value used here after move\n }\n \n fn move_after_move() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of moved\n+    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //[ast]~| value used here after move\n }\n \n fn borrow_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ value moved here\n-    let _y = &a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = &a.y; //[ast]~ ERROR use of moved\n+    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //[ast]~| value used here after move\n }\n \n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n+    use_imm(_x);\n }\n-\n fn copy_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    let _y = a.y; //~ ERROR cannot use\n+    let _y = a.y; //[ast]~ ERROR cannot use\n+    use_mut(_x);\n }\n-\n fn move_after_mut_borrow() {\n     let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n+    use_mut(_x);\n }\n-\n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ immutable borrow occurs here (via `a.y`)\n+    let _y = &a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ immutable borrow occurs here (via `a.y`)\n+    use_mut(_x);\n }\n-\n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n-    let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ mutable borrow occurs here (via `a.y`)\n+    let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ mutable borrow occurs here (via `a.y`)\n+    use_imm(_x);\n }\n-\n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of collaterally moved\n+    //[ast]~| value used here after move\n }\n \n fn move_after_move_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of collaterally moved\n+    //[ast]~| value used here after move\n }\n \n fn borrow_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n-    let _y = &a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = &a.y; //[ast]~ ERROR use of collaterally moved\n+    //[ast]~| value used here after move\n }\n \n fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n-    //~^ borrow of `a.x.x` occurs here\n+    //[ast]~^ borrow of `a.x.x` occurs here\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n+    use_imm(_x);\n }\n-\n fn copy_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    let _y = a.y; //~ ERROR cannot use\n+    let _y = a.y; //[ast]~ ERROR cannot use\n+    use_mut(_x);\n }\n-\n fn move_after_mut_borrow_nested() {\n     let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n+    use_mut(_x);\n }\n-\n fn borrow_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //~^ mutable borrow occurs here\n-    let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ immutable borrow occurs here\n+    //[ast]~^ mutable borrow occurs here\n+    let _y = &a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ immutable borrow occurs here\n+    use_mut(_x);\n }\n-\n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n-    //~^ immutable borrow occurs here\n-    let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ mutable borrow occurs here\n+    //[ast]~^ immutable borrow occurs here\n+    let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ mutable borrow occurs here\n+    use_imm(_x);\n }\n-\n #[rustc_error]\n-fn main() {\n+fn main() { //[mir]~ ERROR compilation successful\n     copy_after_move();\n     move_after_move();\n     borrow_after_move();\n@@ -180,3 +180,6 @@ fn main() {\n     borrow_after_mut_borrow_nested();\n     mut_borrow_after_borrow_nested();\n }\n+\n+fn use_mut<T>(_: &mut T) { }\n+fn use_imm<T>(_: &T) { }"}]}