{"sha": "20976bae5c426c738262db376eadbd8859aafc08", "node_id": "C_kwDOAAsO6NoAKDIwOTc2YmFlNWM0MjZjNzM4MjYyZGIzNzZlYWRiZDg4NTlhYWZjMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T13:20:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T13:20:19Z"}, "message": "Auto merge of #97293 - est31:remove_box, r=oli-obk\n\nAdd #[rustc_box] and use it inside alloc\n\nThis commit adds an alternative content boxing syntax, and uses it inside alloc.\n\n```Rust\n#![feature(box_syntax)]\n\nfn foo() {\n    let foo = box bar;\n}\n```\n\nis equivalent to\n\n```Rust\n#![feature(rustc_attrs)]\n\nfn foo() {\n    let foo = #[rustc_box] Box::new(bar);\n}\n```\n\nThe usage inside the very performance relevant code in\nliballoc is the only remaining relevant usage of box syntax\nin the compiler (outside of tests, which are comparatively easy to port).\n\nbox syntax was originally designed to be used by all Rust\ndevelopers. This introduces a replacement syntax more tailored\nto only being used inside the Rust compiler, and with it,\nlays the groundwork for eventually removing box syntax.\n\n[Earlier work](https://github.com/rust-lang/rust/pull/87781#issuecomment-894714878) by `@nbdd0121` to lower `Box::new` to `box` during THIR -> MIR building ran into borrow checker problems, requiring the lowering to be adjusted in a way that led to [performance regressions](https://github.com/rust-lang/rust/pull/87781#issuecomment-894872367). The proposed change in this PR lowers `#[rustc_box] Box::new` -> `box` in the AST -> HIR lowering step, which is way earlier in the compiler, and thus should cause less issues both performance wise as well as regarding type inference/borrow checking/etc. Hopefully, future work can move the lowering further back in the compiler, as long as there are no performance regressions.", "tree": {"sha": "25f8fad043daefa53cd07d264a7fec2571ecb023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f8fad043daefa53cd07d264a7fec2571ecb023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20976bae5c426c738262db376eadbd8859aafc08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20976bae5c426c738262db376eadbd8859aafc08", "html_url": "https://github.com/rust-lang/rust/commit/20976bae5c426c738262db376eadbd8859aafc08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20976bae5c426c738262db376eadbd8859aafc08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9598b4b594c97dff66feb93522e22db500deea07", "url": "https://api.github.com/repos/rust-lang/rust/commits/9598b4b594c97dff66feb93522e22db500deea07", "html_url": "https://github.com/rust-lang/rust/commit/9598b4b594c97dff66feb93522e22db500deea07"}, {"sha": "0a24b9493b12b71db28d11afd360dc2fea88e466", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a24b9493b12b71db28d11afd360dc2fea88e466", "html_url": "https://github.com/rust-lang/rust/commit/0a24b9493b12b71db28d11afd360dc2fea88e466"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "539e33702aa6735ff927ec8e919424cad123116c", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -41,7 +41,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Tup(ref elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),\n                 ExprKind::Call(ref f, ref args) => {\n-                    if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n+                    if e.attrs.get(0).map_or(false, |a| a.has_name(sym::rustc_box)) {\n+                        if let [inner] = &args[..] && e.attrs.len() == 1 {\n+                            let kind = hir::ExprKind::Box(self.lower_expr(&inner));\n+                            let hir_id = self.lower_node_id(e.id);\n+                            return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n+                        } else {\n+                            self.sess\n+                                .struct_span_err(\n+                                    e.span,\n+                                    \"#[rustc_box] requires precisely one argument \\\n+                                    and no other attributes are allowed\",\n+                                )\n+                                .emit();\n+                            hir::ExprKind::Err\n+                        }\n+                    } else if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n                         self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)\n                     } else {\n                         let f = self.lower_expr(f);"}, {"sha": "5eb2be97f8b92b80fd372f7d00015263fba568d3", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -675,6 +675,12 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"#[rustc_has_incoherent_inherent_impls] allows the addition of incoherent inherent impls for \\\n          the given type by annotating all impl items with #[rustc_allow_incoherent_impl].\"\n     ),\n+    rustc_attr!(\n+        rustc_box, AttributeType::Normal, template!(Word), ErrorFollowing,\n+        \"#[rustc_box] allows creating boxes \\\n+        and it is only intended to be used in `alloc`.\"\n+    ),\n+\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n         // FIXME: This can be `true` once we always use `tcx.is_diagnostic_item`."}, {"sha": "1954cdc0bff668d9379fb5c98978e684256169b1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -1173,6 +1173,7 @@ symbols! {\n         rustc_allow_const_fn_unstable,\n         rustc_allow_incoherent_impl,\n         rustc_attrs,\n+        rustc_box,\n         rustc_builtin_macro,\n         rustc_capture_analysis,\n         rustc_clean,"}, {"sha": "35ac5c8ebf69838c7c49a26e62c393b875c4be9e", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -206,7 +206,25 @@ impl<T> Box<T> {\n     /// ```\n     /// let five = Box::new(5);\n     /// ```\n-    #[cfg(not(no_global_oom_handling))]\n+    #[cfg(all(not(no_global_oom_handling), not(bootstrap)))]\n+    #[inline(always)]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n+    pub fn new(x: T) -> Self {\n+        #[rustc_box]\n+        Box::new(x)\n+    }\n+\n+    /// Allocates memory on the heap and then places `x` into it.\n+    ///\n+    /// This doesn't actually allocate if `T` is zero-sized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let five = Box::new(5);\n+    /// ```\n+    #[cfg(all(not(no_global_oom_handling), bootstrap))]\n     #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n@@ -273,7 +291,9 @@ impl<T> Box<T> {\n     #[must_use]\n     #[inline(always)]\n     pub fn pin(x: T) -> Pin<Box<T>> {\n-        (box x).into()\n+        (#[cfg_attr(not(bootstrap), rustc_box)]\n+        Box::new(x))\n+        .into()\n     }\n \n     /// Allocates memory on the heap then places `x` into it,\n@@ -1219,7 +1239,8 @@ unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {\n impl<T: Default> Default for Box<T> {\n     /// Creates a `Box<T>`, with the `Default` value for T.\n     fn default() -> Self {\n-        box T::default()\n+        #[cfg_attr(not(bootstrap), rustc_box)]\n+        Box::new(T::default())\n     }\n }\n \n@@ -1583,7 +1604,8 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// println!(\"{boxed:?}\");\n     /// ```\n     fn from(array: [T; N]) -> Box<[T]> {\n-        box array\n+        #[cfg_attr(not(bootstrap), rustc_box)]\n+        Box::new(array)\n     }\n }\n "}, {"sha": "710a39852660c50525a8d14248e64c21d37b13dc", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -148,7 +148,7 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n-#![feature(box_syntax)]\n+#![cfg_attr(bootstrap, feature(box_syntax))]\n #![feature(cfg_sanitize)]\n #![feature(const_deref)]\n #![feature(const_mut_refs)]\n@@ -171,6 +171,7 @@\n #![feature(rustc_attrs)]\n #![feature(slice_internals)]\n #![feature(staged_api)]\n+#![feature(stmt_expr_attributes)]\n #![cfg_attr(test, feature(test))]\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]"}, {"sha": "37898b6655faa259bd2bc544cd658e673dd698f2", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -34,7 +34,28 @@\n /// be mindful of side effects.\n ///\n /// [`Vec`]: crate::vec::Vec\n-#[cfg(all(not(no_global_oom_handling), not(test)))]\n+#[cfg(all(not(no_global_oom_handling), not(test), not(bootstrap)))]\n+#[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"vec_macro\"]\n+#[allow_internal_unstable(rustc_attrs, liballoc_internals)]\n+macro_rules! vec {\n+    () => (\n+        $crate::__rust_force_expr!($crate::vec::Vec::new())\n+    );\n+    ($elem:expr; $n:expr) => (\n+        $crate::__rust_force_expr!($crate::vec::from_elem($elem, $n))\n+    );\n+    ($($x:expr),+ $(,)?) => (\n+        $crate::__rust_force_expr!(<[_]>::into_vec(\n+            #[rustc_box]\n+            $crate::boxed::Box::new([$($x),+])\n+        ))\n+    );\n+}\n+\n+/// Creates a `Vec` containing the arguments (bootstrap version).\n+#[cfg(all(not(no_global_oom_handling), not(test), bootstrap))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"vec_macro\"]\n@@ -65,7 +86,7 @@ macro_rules! vec {\n         $crate::vec::from_elem($elem, $n)\n     );\n     ($($x:expr),*) => (\n-        $crate::slice::into_vec(box [$($x),*])\n+        $crate::slice::into_vec($crate::boxed::Box::new([$($x),*]))\n     );\n     ($($x:expr,)*) => (vec![$($x),*])\n }"}, {"sha": "1c0cb6636a134582dc71f078d88e41ba4654a736", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -2987,12 +2987,15 @@ impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     /// ```\n     #[cfg(not(test))]\n     fn from(s: [T; N]) -> Vec<T> {\n-        <[T]>::into_vec(box s)\n+        <[T]>::into_vec(\n+            #[cfg_attr(not(bootstrap), rustc_box)]\n+            Box::new(s),\n+        )\n     }\n \n     #[cfg(test)]\n     fn from(s: [T; N]) -> Vec<T> {\n-        crate::slice::into_vec(box s)\n+        crate::slice::into_vec(Box::new(s))\n     }\n }\n "}, {"sha": "b59a73af9f93bb83c2969916045d9911151ed7c7", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20976bae5c426c738262db376eadbd8859aafc08/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20976bae5c426c738262db376eadbd8859aafc08/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=20976bae5c426c738262db376eadbd8859aafc08", "patch": "@@ -1,4 +1,4 @@\n-error: expected type, found `<[_]>::into_vec(box [0, 1])`\n+error: expected type, found `<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([0, 1]))`\n   --> $DIR/issue-47666.rs:3:25\n    |\n LL |     let _ = Option:Some(vec![0, 1]);"}]}