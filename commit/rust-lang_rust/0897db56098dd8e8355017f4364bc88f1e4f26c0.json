{"sha": "0897db56098dd8e8355017f4364bc88f1e4f26c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OTdkYjU2MDk4ZGQ4ZTgzNTUwMTdmNDM2NGJjODhmMWU0ZjI2YzA=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-12-14T08:09:17Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-01-29T20:37:41Z"}, "message": "Test for restricting capture precision", "tree": {"sha": "47519ab1cda40c7317eff5f5854ec1893f8c5c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47519ab1cda40c7317eff5f5854ec1893f8c5c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0897db56098dd8e8355017f4364bc88f1e4f26c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0897db56098dd8e8355017f4364bc88f1e4f26c0", "html_url": "https://github.com/rust-lang/rust/commit/0897db56098dd8e8355017f4364bc88f1e4f26c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0897db56098dd8e8355017f4364bc88f1e4f26c0/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1373f988fa662aa43a22a9b13300aabe9ce2213b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1373f988fa662aa43a22a9b13300aabe9ce2213b", "html_url": "https://github.com/rust-lang/rust/commit/1373f988fa662aa43a22a9b13300aabe9ce2213b"}], "stats": {"total": 657, "additions": 657, "deletions": 0}, "files": [{"sha": "1007fb582e5eda6e68f00f04f22fadd569b233fb", "filename": "src/test/ui/closures/2229_closure_analysis/by_value.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.rs?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,41 @@\n+// Test that we handle derferences properly when only some of the captures are being moved with\n+// `capture_disjoint_fields` enabled.\n+\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![feature(rustc_attrs)]\n+\n+#[derive(Debug, Default)]\n+struct SomeLargeType;\n+struct MuchLargerType([SomeLargeType; 32]);\n+\n+// Ensure that we don't capture any derefs when moving captures into the closures,\n+// i.e. only data from the enclosing stack is moved.\n+fn big_box() {\n+    let s = MuchLargerType(Default::default());\n+    let b = Box::new(s);\n+    let t = (b, 10);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+    //~^ First Pass analysis includes:\n+    //~| Min Capture analysis includes:\n+        let p = t.0.0;\n+        //~^ NOTE: Capturing t[(0, 0),Deref,(0, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(0, 0)] -> ByValue\n+        println!(\"{} {:?}\", t.1, p);\n+        //~^ NOTE: Capturing t[(1, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture t[(1, 0)] -> ImmBorrow\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    big_box();\n+}"}, {"sha": "fe04dbef6d8b55a56637bef5c78057e2981ebab1", "filename": "src/test/ui/closures/2229_closure_analysis/by_value.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fby_value.stderr?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,67 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/by_value.rs:22:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/by_value.rs:5:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: First Pass analysis includes:\n+  --> $DIR/by_value.rs:25:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let p = t.0.0;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0),Deref,(0, 0)] -> ByValue\n+  --> $DIR/by_value.rs:28:17\n+   |\n+LL |         let p = t.0.0;\n+   |                 ^^^^^\n+note: Capturing t[(1, 0)] -> ImmBorrow\n+  --> $DIR/by_value.rs:31:29\n+   |\n+LL |         println!(\"{} {:?}\", t.1, p);\n+   |                             ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/by_value.rs:25:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let p = t.0.0;\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> ByValue\n+  --> $DIR/by_value.rs:28:17\n+   |\n+LL |         let p = t.0.0;\n+   |                 ^^^^^\n+note: Min Capture t[(1, 0)] -> ImmBorrow\n+  --> $DIR/by_value.rs:31:29\n+   |\n+LL |         println!(\"{} {:?}\", t.1, p);\n+   |                             ^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8bdc999ca3c3feade9f49922806945d452e0e01a", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,72 @@\n+// Test that move closures drop derefs with `capture_disjoint_fields` enabled.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![feature(rustc_attrs)]\n+\n+// Test we truncate derefs properly\n+fn simple_ref() {\n+    let mut s = 10;\n+    let ref_s = &mut s;\n+\n+    let mut c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        *ref_s += 10;\n+        //~^ NOTE: Capturing ref_s[Deref] -> ByValue\n+        //~| NOTE: Min Capture ref_s[] -> ByValue\n+    };\n+    c();\n+}\n+\n+// Test we truncate derefs properly\n+fn struct_contains_ref_to_another_struct() {\n+    struct S(String);\n+    struct T<'a>(&'a mut S);\n+\n+    let mut s = S(\"s\".into());\n+    let t = T(&mut s);\n+\n+    let mut c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        t.0.0 = \"new s\".into();\n+        //~^ NOTE: Capturing t[(0, 0),Deref,(0, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(0, 0)] -> ByValue\n+    };\n+\n+    c();\n+}\n+\n+// Test that we don't reduce precision when there is nothing deref.\n+fn no_ref() {\n+    struct S(String);\n+    struct T(S);\n+\n+    let t = T(S(\"s\".into()));\n+    let mut c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    move || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        t.0.0 = \"new S\".into();\n+        //~^ NOTE: Capturing t[(0, 0),(0, 0)] -> ByValue\n+        //~| NOTE: Min Capture t[(0, 0),(0, 0)] -> ByValue\n+    };\n+    c();\n+}\n+\n+fn main() {\n+    simple_ref();\n+    struct_contains_ref_to_another_struct();\n+    no_ref();\n+}"}, {"sha": "a745f14598ee2b022f10352b34f729970e223745", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.stderr", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,147 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:14:17\n+   |\n+LL |     let mut c = #[rustc_capture_analysis]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:35:17\n+   |\n+LL |     let mut c = #[rustc_capture_analysis]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:55:17\n+   |\n+LL |     let mut c = #[rustc_capture_analysis]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/move_closure.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:17:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         *ref_s += 10;\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing ref_s[Deref] -> ByValue\n+  --> $DIR/move_closure.rs:20:9\n+   |\n+LL |         *ref_s += 10;\n+   |         ^^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:17:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         *ref_s += 10;\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture ref_s[] -> ByValue\n+  --> $DIR/move_closure.rs:20:9\n+   |\n+LL |         *ref_s += 10;\n+   |         ^^^^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:38:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         t.0.0 = \"new s\".into();\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0),Deref,(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:41:9\n+   |\n+LL |         t.0.0 = \"new s\".into();\n+   |         ^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:38:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         t.0.0 = \"new s\".into();\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:41:9\n+   |\n+LL |         t.0.0 = \"new s\".into();\n+   |         ^^^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:58:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         t.0.0 = \"new S\".into();\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0),(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:61:9\n+   |\n+LL |         t.0.0 = \"new S\".into();\n+   |         ^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:58:5\n+   |\n+LL | /     move || {\n+LL | |\n+LL | |\n+LL | |         t.0.0 = \"new S\".into();\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0),(0, 0)] -> ByValue\n+  --> $DIR/move_closure.rs:61:9\n+   |\n+LL |         t.0.0 = \"new S\".into();\n+   |         ^^^^^\n+\n+error: aborting due to 9 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9a93e6cf1e1efd787734c446d3f9105281838ea6", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/by_value.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+// Test that ByValue captures compile sucessefully especially when the captures are\n+// derefenced within the closure.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+#[derive(Debug, Default)]\n+struct SomeLargeType;\n+struct MuchLargerType([SomeLargeType; 32]);\n+\n+fn big_box() {\n+    let s = MuchLargerType(Default::default());\n+    let b = Box::new(s);\n+    let t = (b, 10);\n+\n+    let c = || {\n+        let p = t.0.0;\n+        println!(\"{} {:?}\", t.1, p);\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    big_box();\n+}"}, {"sha": "98715c6b9436589e991cef711ef2a847ad29cde3", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/by_value.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.stderr?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/by_value.rs:6:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "83ed1c28462d3082b01a13a93b2482a841142dd4", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+\n+// Test that move closures compile properly with `capture_disjoint_fields` enabled.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+fn simple_ref() {\n+    let mut s = 10;\n+    let ref_s = &mut s;\n+\n+    let mut c = move || {\n+        *ref_s += 10;\n+    };\n+    c();\n+}\n+\n+fn struct_contains_ref_to_another_struct() {\n+    struct S(String);\n+    struct T<'a>(&'a mut S);\n+\n+    let mut s = S(\"s\".into());\n+    let t = T(&mut s);\n+\n+    let mut c = move || {\n+        t.0.0 = \"new s\".into();\n+    };\n+\n+    c();\n+}\n+\n+fn no_ref() {\n+    struct S(String);\n+    struct T(S);\n+\n+    let t = T(S(\"s\".into()));\n+    let mut c = move || {\n+        t.0.0 = \"new S\".into();\n+    };\n+    c();\n+}\n+\n+fn main() {\n+    simple_ref();\n+    struct_contains_ref_to_another_struct();\n+    no_ref();\n+}"}, {"sha": "724b683bfbf870e55e44f1f820e50418975e1b99", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/move_closure.rs:5:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: variable does not need to be mutable\n+  --> $DIR/move_closure.rs:36:9\n+   |\n+LL |     let mut t = T(S(\"s\".into()));\n+   |         ----^\n+   |         |\n+   |         help: remove this `mut`\n+   |\n+   = note: `#[warn(unused_mut)]` on by default\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "f6e9862b26c11d7fafb2af139c1b1534e1d42444", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.rs?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+\n+// Test that we can use raw ptrs when using `capture_disjoint_fields`.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+#[derive(Debug)]\n+struct S {\n+    s: String,\n+    t: String,\n+}\n+\n+struct T(*const S);\n+\n+fn unsafe_imm() {\n+    let s = \"\".into();\n+    let t = \"\".into();\n+    let my_speed: Box<S> = Box::new(S { s, t });\n+\n+    let p : *const S = Box::into_raw(my_speed);\n+    let t = T(p);\n+\n+    let c = || unsafe {\n+        println!(\"{:?}\", (*t.0).s);\n+    };\n+\n+    c();\n+}\n+\n+fn unsafe_mut() {\n+    let s = \"\".into();\n+    let t = \"\".into();\n+    let mut my_speed: Box<S> = Box::new(S { s, t });\n+    let p : *mut S = &mut *my_speed;\n+\n+    let c = || {\n+        let x = unsafe { &mut (*p).s };\n+        *x = \"s\".into();\n+    };\n+    c();\n+}\n+\n+fn main() {\n+    unsafe_mut();\n+    unsafe_imm();\n+}"}, {"sha": "c64c8b72e81512fc16d10467ca233e7c7fd5c8fe", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/unsafe_ptr.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Funsafe_ptr.stderr?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/unsafe_ptr.rs:5:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "79d3ecc2d2bedfeefa1e5469a8a683f100be1167", "filename": "src/test/ui/closures/2229_closure_analysis/unsafe_ptr.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.rs?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,63 @@\n+// Test that we restrict precision of a capture when we access a raw ptr,\n+// i.e. the capture doesn't deref the raw ptr.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| `#[warn(incomplete_features)]` on by default\n+//~| see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![feature(rustc_attrs)]\n+\n+#[derive(Debug)]\n+struct S {\n+    s: String,\n+    t: String,\n+}\n+\n+struct T(*const S);\n+\n+fn unsafe_imm() {\n+    let s = \"\".into();\n+    let t = \"\".into();\n+    let my_speed: Box<S> = Box::new(S { s, t });\n+\n+    let p : *const S = Box::into_raw(my_speed);\n+    let t = T(p);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+     || unsafe {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        println!(\"{:?}\", (*t.0).s);\n+        //~^ NOTE: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture t[(0, 0)] -> ImmBorrow\n+    };\n+\n+    c();\n+}\n+\n+fn unsafe_mut() {\n+    let s = \"\".into();\n+    let t = \"\".into();\n+    let mut my_speed: Box<S> = Box::new(S { s, t });\n+    let p : *mut S = &mut *my_speed;\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+        let x = unsafe { &mut (*p).s };\n+        //~^ NOTE: Capturing p[Deref,(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture p[] -> ImmBorrow\n+        *x = \"s\".into();\n+    };\n+    c();\n+}\n+\n+fn main() {\n+    unsafe_mut();\n+    unsafe_imm();\n+}"}, {"sha": "4508b2426e8ff8d29596dd496fa882663848f9c8", "filename": "src/test/ui/closures/2229_closure_analysis/unsafe_ptr.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0897db56098dd8e8355017f4364bc88f1e4f26c0/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Funsafe_ptr.stderr?ref=0897db56098dd8e8355017f4364bc88f1e4f26c0", "patch": "@@ -0,0 +1,102 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/unsafe_ptr.rs:26:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/unsafe_ptr.rs:46:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/unsafe_ptr.rs:4:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error: First Pass analysis includes:\n+  --> $DIR/unsafe_ptr.rs:29:6\n+   |\n+LL | /      || unsafe {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", (*t.0).s);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/unsafe_ptr.rs:32:26\n+   |\n+LL |         println!(\"{:?}\", (*t.0).s);\n+   |                          ^^^^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/unsafe_ptr.rs:29:6\n+   |\n+LL | /      || unsafe {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", (*t.0).s);\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture t[(0, 0)] -> ImmBorrow\n+  --> $DIR/unsafe_ptr.rs:32:26\n+   |\n+LL |         println!(\"{:?}\", (*t.0).s);\n+   |                          ^^^^^^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/unsafe_ptr.rs:49:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let x = unsafe { &mut (*p).s };\n+...  |\n+LL | |         *x = \"s\".into();\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing p[Deref,(0, 0)] -> ImmBorrow\n+  --> $DIR/unsafe_ptr.rs:52:31\n+   |\n+LL |         let x = unsafe { &mut (*p).s };\n+   |                               ^^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/unsafe_ptr.rs:49:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         let x = unsafe { &mut (*p).s };\n+...  |\n+LL | |         *x = \"s\".into();\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture p[] -> ImmBorrow\n+  --> $DIR/unsafe_ptr.rs:52:31\n+   |\n+LL |         let x = unsafe { &mut (*p).s };\n+   |                               ^^^^^^\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}]}