{"sha": "2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMWNkNDQwZjIyNjRkMGNhMzMzOTNkMmY3MWY1ZDg1MWI1YzNhYTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-23T18:34:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-23T18:34:59Z"}, "message": "Rollup merge of #71404 - cuviper:chain-unfused, r=scottmcm\n\nDon't fuse Chain in its second iterator\n\nOnly the \"first\" iterator is actually set `None` when exhausted,\ndepending on whether you iterate forward or backward. This restores\nbehavior similar to the former `ChainState`, where it would transition\nfrom `Both` to `Front`/`Back` and only continue from that side.\n\nHowever, if you mix directions, then this may still set both sides to\n`None`, totally fusing the iterator.\n\nFixes #71375\nr? @scottmcm", "tree": {"sha": "9cc0c24c5587b3da63cbe72ffa0d47b2a833514f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc0c24c5587b3da63cbe72ffa0d47b2a833514f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeod/TCRBK7hj4Ov3rIwAAdHIIAA0FuYiX6pk/je3Y9P6S91SN\nnZK3vF3zrpranQnXEu5FfiOWbvD21t2BqfYKUOn5zADg4dq+DhjZ889UlcVt3WdH\nn89lEeTIX9DYBY030I2q+uPKVM9P0keDhL//fLAhmC9+XxMCrlPOj4Y3bSiwIHZg\nmKftgBEFEXcQosMcE9E2P8MkvJJyRjIf6v+NU2ZNScmaUZhyFoNo8Kwzz5KJPBmp\no4iPzeNAI+yrAENLzsMkI7uFVy6RUdNLbKlMkHKZqRlvq9HWsXiHFJc3JfcK1Vwj\nG1yn+eVgN1kRqMe6OTpsJcZD5OolAMxMwWq7iDMLdY0WyrG2m2lXxYQtfWI4qSY=\n=UveB\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cc0c24c5587b3da63cbe72ffa0d47b2a833514f\nparent 1d3d80f773bcc6d2598b4c6cb39ba06a8c325103\nparent eeb687f20e86f2e2cf61ef89139c102cb92abfcb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587666899 +0200\ncommitter GitHub <noreply@github.com> 1587666899 +0200\n\nRollup merge of #71404 - cuviper:chain-unfused, r=scottmcm\n\nDon't fuse Chain in its second iterator\n\nOnly the \"first\" iterator is actually set `None` when exhausted,\ndepending on whether you iterate forward or backward. This restores\nbehavior similar to the former `ChainState`, where it would transition\nfrom `Both` to `Front`/`Back` and only continue from that side.\n\nHowever, if you mix directions, then this may still set both sides to\n`None`, totally fusing the iterator.\n\nFixes #71375\nr? @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6", "html_url": "https://github.com/rust-lang/rust/commit/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "html_url": "https://github.com/rust-lang/rust/commit/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103"}, {"sha": "eeb687f20e86f2e2cf61ef89139c102cb92abfcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb687f20e86f2e2cf61ef89139c102cb92abfcb", "html_url": "https://github.com/rust-lang/rust/commit/eeb687f20e86f2e2cf61ef89139c102cb92abfcb"}], "stats": {"total": 97, "additions": 62, "deletions": 35}, "files": [{"sha": "6700ef017bde43922f51411083d3f99d4b9ce134", "filename": "src/libcore/iter/adapters/chain.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs?ref=2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6", "patch": "@@ -18,6 +18,9 @@ pub struct Chain<A, B> {\n     // adapter because its specialization for `FusedIterator` unconditionally descends into the\n     // iterator, and that could be expensive to keep revisiting stuff like nested chains. It also\n     // hurts compiler performance to add more iterator layers to `Chain`.\n+    //\n+    // Only the \"first\" iterator is actually set `None` when exhausted, depending on whether you\n+    // iterate forward or backward. If you mix directions, then both sides may be `None`.\n     a: Option<A>,\n     b: Option<B>,\n }\n@@ -43,6 +46,17 @@ macro_rules! fuse {\n     };\n }\n \n+/// Try an iterator method without fusing,\n+/// like an inline `.as_mut().and_then(...)`\n+macro_rules! maybe {\n+    ($self:ident . $iter:ident . $($call:tt)+) => {\n+        match $self.$iter {\n+            Some(ref mut iter) => iter.$($call)+,\n+            None => None,\n+        }\n+    };\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, B> Iterator for Chain<A, B>\n where\n@@ -54,7 +68,7 @@ where\n     #[inline]\n     fn next(&mut self) -> Option<A::Item> {\n         match fuse!(self.a.next()) {\n-            None => fuse!(self.b.next()),\n+            None => maybe!(self.b.next()),\n             item => item,\n         }\n     }\n@@ -85,7 +99,7 @@ where\n         }\n         if let Some(ref mut b) = self.b {\n             acc = b.try_fold(acc, f)?;\n-            self.b = None;\n+            // we don't fuse the second iterator\n         }\n         Try::from_ok(acc)\n     }\n@@ -114,7 +128,7 @@ where\n             }\n             self.a = None;\n         }\n-        fuse!(self.b.nth(n))\n+        maybe!(self.b.nth(n))\n     }\n \n     #[inline]\n@@ -123,7 +137,7 @@ where\n         P: FnMut(&Self::Item) -> bool,\n     {\n         match fuse!(self.a.find(&mut predicate)) {\n-            None => fuse!(self.b.find(predicate)),\n+            None => maybe!(self.b.find(predicate)),\n             item => item,\n         }\n     }\n@@ -174,7 +188,7 @@ where\n     #[inline]\n     fn next_back(&mut self) -> Option<A::Item> {\n         match fuse!(self.b.next_back()) {\n-            None => fuse!(self.a.next_back()),\n+            None => maybe!(self.a.next_back()),\n             item => item,\n         }\n     }\n@@ -190,7 +204,7 @@ where\n             }\n             self.b = None;\n         }\n-        fuse!(self.a.nth_back(n))\n+        maybe!(self.a.nth_back(n))\n     }\n \n     #[inline]\n@@ -199,7 +213,7 @@ where\n         P: FnMut(&Self::Item) -> bool,\n     {\n         match fuse!(self.b.rfind(&mut predicate)) {\n-            None => fuse!(self.a.rfind(predicate)),\n+            None => maybe!(self.a.rfind(predicate)),\n             item => item,\n         }\n     }\n@@ -216,7 +230,7 @@ where\n         }\n         if let Some(ref mut a) = self.a {\n             acc = a.try_rfold(acc, f)?;\n-            self.a = None;\n+            // we don't fuse the second iterator\n         }\n         Try::from_ok(acc)\n     }\n@@ -236,8 +250,6 @@ where\n }\n \n // Note: *both* must be fused to handle double-ended iterators.\n-// Now that we \"fuse\" both sides, we *could* implement this unconditionally,\n-// but we should be cautious about committing to that in the public API.\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A, B> FusedIterator for Chain<A, B>\n where"}, {"sha": "7da02b11676abd32a36a0a601798160ad06591ee", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6", "patch": "@@ -207,50 +207,64 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.next(), None);\n }\n \n-#[test]\n-fn test_iterator_chain_size_hint() {\n-    struct Iter {\n-        is_empty: bool,\n-    }\n+struct Toggle {\n+    is_empty: bool,\n+}\n \n-    impl Iterator for Iter {\n-        type Item = ();\n+impl Iterator for Toggle {\n+    type Item = ();\n \n-        // alternates between `None` and `Some(())`\n-        fn next(&mut self) -> Option<Self::Item> {\n-            if self.is_empty {\n-                self.is_empty = false;\n-                None\n-            } else {\n-                self.is_empty = true;\n-                Some(())\n-            }\n+    // alternates between `None` and `Some(())`\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.is_empty {\n+            self.is_empty = false;\n+            None\n+        } else {\n+            self.is_empty = true;\n+            Some(())\n         }\n+    }\n \n-        fn size_hint(&self) -> (usize, Option<usize>) {\n-            if self.is_empty { (0, Some(0)) } else { (1, Some(1)) }\n-        }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        if self.is_empty { (0, Some(0)) } else { (1, Some(1)) }\n     }\n+}\n \n-    impl DoubleEndedIterator for Iter {\n-        fn next_back(&mut self) -> Option<Self::Item> {\n-            self.next()\n-        }\n+impl DoubleEndedIterator for Toggle {\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        self.next()\n     }\n+}\n \n+#[test]\n+fn test_iterator_chain_size_hint() {\n     // this chains an iterator of length 0 with an iterator of length 1,\n     // so after calling `.next()` once, the iterator is empty and the\n     // state is `ChainState::Back`. `.size_hint()` should now disregard\n     // the size hint of the left iterator\n-    let mut iter = Iter { is_empty: true }.chain(once(()));\n+    let mut iter = Toggle { is_empty: true }.chain(once(()));\n     assert_eq!(iter.next(), Some(()));\n     assert_eq!(iter.size_hint(), (0, Some(0)));\n \n-    let mut iter = once(()).chain(Iter { is_empty: true });\n+    let mut iter = once(()).chain(Toggle { is_empty: true });\n     assert_eq!(iter.next_back(), Some(()));\n     assert_eq!(iter.size_hint(), (0, Some(0)));\n }\n \n+#[test]\n+fn test_iterator_chain_unfused() {\n+    // Chain shouldn't be fused in its second iterator, depending on direction\n+    let mut iter = NonFused::new(empty()).chain(Toggle { is_empty: true });\n+    iter.next().unwrap_none();\n+    iter.next().unwrap();\n+    iter.next().unwrap_none();\n+\n+    let mut iter = Toggle { is_empty: true }.chain(NonFused::new(empty()));\n+    iter.next_back().unwrap_none();\n+    iter.next_back().unwrap();\n+    iter.next_back().unwrap_none();\n+}\n+\n #[test]\n fn test_zip_nth() {\n     let xs = [0, 1, 2, 4, 5];"}, {"sha": "e7d36d327cd89c14af2ddf628eff1aef612e366c", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=2a1cd440f2264d0ca33393d2f71f5d851b5c3aa6", "patch": "@@ -42,6 +42,7 @@\n #![feature(unwrap_infallible)]\n #![feature(leading_trailing_ones)]\n #![feature(const_forget)]\n+#![feature(option_unwrap_none)]\n \n extern crate test;\n "}]}