{"sha": "c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "node_id": "C_kwDOAAsO6NoAKGMxMjZmN2ZjOGJmOWUyYWJjMGNhYzFmYWU0MGQwNGY0Y2YyMWU0ZDA", "commit": {"author": {"name": "Paolo Barbolini", "email": "paolo@paolo565.org", "date": "2022-04-10T22:00:03Z"}, "committer": {"name": "Paolo Barbolini", "email": "paolo@paolo565.org", "date": "2022-04-28T04:13:54Z"}, "message": "Add VecDeque::extend from vec::IntoIter and slice::Iter specializations", "tree": {"sha": "1f2be7eebbe25dce4142ab74a1b8f0e57c12a347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2be7eebbe25dce4142ab74a1b8f0e57c12a347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "html_url": "https://github.com/rust-lang/rust/commit/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/comments", "author": {"login": "paolobarbolini", "id": 6215781, "node_id": "MDQ6VXNlcjYyMTU3ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6215781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paolobarbolini", "html_url": "https://github.com/paolobarbolini", "followers_url": "https://api.github.com/users/paolobarbolini/followers", "following_url": "https://api.github.com/users/paolobarbolini/following{/other_user}", "gists_url": "https://api.github.com/users/paolobarbolini/gists{/gist_id}", "starred_url": "https://api.github.com/users/paolobarbolini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paolobarbolini/subscriptions", "organizations_url": "https://api.github.com/users/paolobarbolini/orgs", "repos_url": "https://api.github.com/users/paolobarbolini/repos", "events_url": "https://api.github.com/users/paolobarbolini/events{/privacy}", "received_events_url": "https://api.github.com/users/paolobarbolini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paolobarbolini", "id": 6215781, "node_id": "MDQ6VXNlcjYyMTU3ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6215781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paolobarbolini", "html_url": "https://github.com/paolobarbolini", "followers_url": "https://api.github.com/users/paolobarbolini/followers", "following_url": "https://api.github.com/users/paolobarbolini/following{/other_user}", "gists_url": "https://api.github.com/users/paolobarbolini/gists{/gist_id}", "starred_url": "https://api.github.com/users/paolobarbolini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paolobarbolini/subscriptions", "organizations_url": "https://api.github.com/users/paolobarbolini/orgs", "repos_url": "https://api.github.com/users/paolobarbolini/repos", "events_url": "https://api.github.com/users/paolobarbolini/events{/privacy}", "received_events_url": "https://api.github.com/users/paolobarbolini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b8898d6357810472a01038bde7b1788615aa8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b8898d6357810472a01038bde7b1788615aa8a", "html_url": "https://github.com/rust-lang/rust/commit/84b8898d6357810472a01038bde7b1788615aa8a"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "5f1a6848ae62a324c2f410e58b15797ecb808653", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "patch": "@@ -54,6 +54,10 @@ use self::ring_slices::RingSlices;\n \n mod ring_slices;\n \n+use self::spec_extend::SpecExtend;\n+\n+mod spec_extend;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -2970,24 +2974,7 @@ impl<'a, T, A: Allocator> IntoIterator for &'a mut VecDeque<T, A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, A: Allocator> Extend<T> for VecDeque<T, A> {\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        // This function should be the moral equivalent of:\n-        //\n-        //      for item in iter.into_iter() {\n-        //          self.push_back(item);\n-        //      }\n-        let mut iter = iter.into_iter();\n-        while let Some(element) = iter.next() {\n-            if self.len() == self.capacity() {\n-                let (lower, _) = iter.size_hint();\n-                self.reserve(lower.saturating_add(1));\n-            }\n-\n-            let head = self.head;\n-            self.head = self.wrap_add(self.head, 1);\n-            unsafe {\n-                self.buffer_write(head, element);\n-            }\n-        }\n+        <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter());\n     }\n \n     #[inline]\n@@ -3004,7 +2991,7 @@ impl<T, A: Allocator> Extend<T> for VecDeque<T, A> {\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Copy, A: Allocator> Extend<&'a T> for VecDeque<T, A> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {\n-        self.extend(iter.into_iter().cloned());\n+        self.spec_extend(iter.into_iter());\n     }\n \n     #[inline]"}, {"sha": "172f2e9068fe6474dfd1e70ce151e10f16b619e1", "filename": "library/alloc/src/collections/vec_deque/spec_extend.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_extend.rs?ref=c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "patch": "@@ -0,0 +1,73 @@\n+use crate::alloc::Allocator;\n+use crate::vec;\n+use core::slice;\n+\n+use super::VecDeque;\n+\n+// Specialization trait used for VecDeque::extend\n+pub(super) trait SpecExtend<T, I> {\n+    fn spec_extend(&mut self, iter: I);\n+}\n+\n+impl<T, I, A: Allocator> SpecExtend<T, I> for VecDeque<T, A>\n+where\n+    I: Iterator<Item = T>,\n+{\n+    default fn spec_extend(&mut self, mut iter: I) {\n+        // This function should be the moral equivalent of:\n+        //\n+        //      for item in iter {\n+        //          self.push_back(item);\n+        //      }\n+        while let Some(element) = iter.next() {\n+            if self.len() == self.capacity() {\n+                let (lower, _) = iter.size_hint();\n+                self.reserve(lower.saturating_add(1));\n+            }\n+\n+            let head = self.head;\n+            self.head = self.wrap_add(self.head, 1);\n+            unsafe {\n+                self.buffer_write(head, element);\n+            }\n+        }\n+    }\n+}\n+\n+impl<T, A: Allocator> SpecExtend<T, vec::IntoIter<T>> for VecDeque<T, A> {\n+    fn spec_extend(&mut self, mut iterator: vec::IntoIter<T>) {\n+        let slice = iterator.as_slice();\n+        self.reserve(slice.len());\n+\n+        unsafe {\n+            self.copy_slice(self.head, slice);\n+            self.head = self.wrap_add(self.head, slice.len());\n+        }\n+        iterator.forget_remaining_elements();\n+    }\n+}\n+\n+impl<'a, T: 'a, I, A: Allocator> SpecExtend<&'a T, I> for VecDeque<T, A>\n+where\n+    I: Iterator<Item = &'a T>,\n+    T: Copy,\n+{\n+    default fn spec_extend(&mut self, iterator: I) {\n+        self.spec_extend(iterator.copied())\n+    }\n+}\n+\n+impl<'a, T: 'a, A: Allocator> SpecExtend<&'a T, slice::Iter<'a, T>> for VecDeque<T, A>\n+where\n+    T: Copy,\n+{\n+    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n+        let slice = iterator.as_slice();\n+        self.reserve(slice.len());\n+\n+        unsafe {\n+            self.copy_slice(self.head, slice);\n+            self.head = self.wrap_add(self.head, slice.len());\n+        }\n+    }\n+}"}, {"sha": "8134eea570ad722e347379b41973f4880e1b7abf", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "patch": "@@ -121,6 +121,11 @@ impl<T, A: Allocator> IntoIter<T, A> {\n             ptr::drop_in_place(remaining);\n         }\n     }\n+\n+    /// Forgets to Drop the remaining elements while still allowing the backing allocation to be freed.\n+    pub(crate) fn forget_remaining_elements(&mut self) {\n+        self.ptr = self.end;\n+    }\n }\n \n #[stable(feature = \"vec_intoiter_as_ref\", since = \"1.46.0\")]"}, {"sha": "506ee0ecfa279c7693cc9a19e58d98a668425b7d", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=c126f7fc8bf9e2abc0cac1fae40d04f4cf21e4d0", "patch": "@@ -62,7 +62,7 @@ impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n         unsafe {\n             self.append_elements(iterator.as_slice() as _);\n         }\n-        iterator.ptr = iterator.end;\n+        iterator.forget_remaining_elements();\n     }\n }\n "}]}