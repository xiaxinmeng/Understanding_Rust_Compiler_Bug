{"sha": "640cae257b5c3cbc4b4588e1112b604da1f4c341", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MGNhZTI1N2I1YzNjYmM0YjQ1ODhlMTExMmI2MDRkYTFmNGMzNDE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T14:57:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T16:41:23Z"}, "message": "Remove private methods from TyCtxt impl block: rustc::ty::outlives.", "tree": {"sha": "0df348765130334fcd59c723d7b7f8ad9a4a387e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df348765130334fcd59c723d7b7f8ad9a4a387e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640cae257b5c3cbc4b4588e1112b604da1f4c341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640cae257b5c3cbc4b4588e1112b604da1f4c341", "html_url": "https://github.com/rust-lang/rust/commit/640cae257b5c3cbc4b4588e1112b604da1f4c341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640cae257b5c3cbc4b4588e1112b604da1f4c341/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9f4fb270ce09c12d04c5a913c9e89c59c713fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd", "html_url": "https://github.com/rust-lang/rust/commit/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "b397a2c80d59b93f08b10e81e5b590448208f714", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/640cae257b5c3cbc4b4588e1112b604da1f4c341/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cae257b5c3cbc4b4588e1112b604da1f4c341/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=640cae257b5c3cbc4b4588e1112b604da1f4c341", "patch": "@@ -48,32 +48,29 @@ pub enum Component<'tcx> {\n impl<'tcx> TyCtxt<'tcx> {\n     /// Push onto `out` all the things that must outlive `'a` for the condition\n     /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n-    pub fn push_outlives_components(\n-        &self,\n-        ty0: Ty<'tcx>,\n-        out: &mut SmallVec<[Component<'tcx>; 4]>,\n-    ) {\n-        self.compute_components(ty0, out);\n+    pub fn push_outlives_components(self, ty0: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n+        compute_components(self, ty0, out);\n         debug!(\"components({:?}) = {:?}\", ty0, out);\n     }\n+}\n \n-    fn compute_components(&self, ty: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n-        // Descend through the types, looking for the various \"base\"\n-        // components and collecting them into `out`. This is not written\n-        // with `collect()` because of the need to sometimes skip subtrees\n-        // in the `subtys` iterator (e.g., when encountering a\n-        // projection).\n-        match ty.kind {\n+fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n+    // Descend through the types, looking for the various \"base\"\n+    // components and collecting them into `out`. This is not written\n+    // with `collect()` because of the need to sometimes skip subtrees\n+    // in the `subtys` iterator (e.g., when encountering a\n+    // projection).\n+    match ty.kind {\n             ty::Closure(def_id, ref substs) => {\n-                for upvar_ty in substs.as_closure().upvar_tys(def_id, *self) {\n-                    self.compute_components(upvar_ty, out);\n+                for upvar_ty in substs.as_closure().upvar_tys(def_id, tcx) {\n+                    compute_components(tcx, upvar_ty, out);\n                 }\n             }\n \n             ty::Generator(def_id, ref substs, _) => {\n                 // Same as the closure case\n-                for upvar_ty in substs.as_generator().upvar_tys(def_id, *self) {\n-                    self.compute_components(upvar_ty, out);\n+                for upvar_ty in substs.as_generator().upvar_tys(def_id, tcx) {\n+                    compute_components(tcx, upvar_ty, out);\n                 }\n \n                 // We ignore regions in the generator interior as we don't\n@@ -110,7 +107,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     // fallback case: hard code\n                     // OutlivesProjectionComponents.  Continue walking\n                     // through and constrain Pi.\n-                    let subcomponents = self.capture_components(ty);\n+                    let subcomponents = capture_components(tcx, ty);\n                     out.push(Component::EscapingProjection(subcomponents));\n                 }\n             }\n@@ -159,20 +156,19 @@ impl<'tcx> TyCtxt<'tcx> {\n \n                 push_region_constraints(ty, out);\n                 for subty in ty.walk_shallow() {\n-                    self.compute_components(subty, out);\n+                    compute_components(tcx, subty, out);\n                 }\n             }\n         }\n-    }\n+}\n \n-    fn capture_components(&self, ty: Ty<'tcx>) -> Vec<Component<'tcx>> {\n-        let mut temp = smallvec![];\n-        push_region_constraints(ty, &mut temp);\n-        for subty in ty.walk_shallow() {\n-            self.compute_components(subty, &mut temp);\n-        }\n-        temp.into_iter().collect()\n+fn capture_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Vec<Component<'tcx>> {\n+    let mut temp = smallvec![];\n+    push_region_constraints(ty, &mut temp);\n+    for subty in ty.walk_shallow() {\n+        compute_components(tcx, subty, &mut temp);\n     }\n+    temp.into_iter().collect()\n }\n \n fn push_region_constraints<'tcx>(ty: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {"}]}