{"sha": "4df2069fc43082140e45840bcbb20c02c2fc42af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZjIwNjlmYzQzMDgyMTQwZTQ1ODQwYmNiYjIwYzAyYzJmYzQyYWY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-09-12T13:58:41Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-09-12T13:58:41Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "baa142dd3c10ffe5c05fe6e762704694966b491b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa142dd3c10ffe5c05fe6e762704694966b491b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4df2069fc43082140e45840bcbb20c02c2fc42af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl9c1BQACgkQLO/Nsn7Q\nvnmogg//VmpKzmyYNUZvfNZnhDKXn8bZRFzNBW0Odg7JSiIGLpXQxILJTOr+HqgP\nwwECLWmePAPr53NM6s/Ysrzw6T9EyWwPyyXKZun1Gcvuipgl9leeoL5KDGHbZUpV\nUiePAPaGyemfbzzMIY1vaLtHWSLhQEREcP2HHasdSljyAHSagpJ3LjI9eAn5SVVf\nODe3rUaIQUahk5IIKAgudhW2DZ9Zb4iwMdRZUojyiXWaE7/0TccWt601277JtEo4\nKllw57otmQudbbqwbFqNM+7+zarzbnXEYUOYbkaW99E4zfH+XVn9fLPXU/zx2qFv\nibwBrV4JJPfJFKS3zbKAZcraeQ5N0bOxhpTJDPwtacyQiHGzit9za0HVcW2jrFvJ\n+UArSDByUZXm0UYUxz6bgp8pSHQU8jfNe7KWFL8B6JLWCbhV/Bs+2pYBdAvxCHmX\n2qU8C9g2hI6YdRLCzejZDUg+7F7lbfYeF4M73ydYtzbAZ4xXFrRDqObUiZCpqp8B\nrGhiCtlamttZorRFe9K9qQsR4XXBwB44BDznDLyeksyFsE+fkB5VXp6KF20QBVB6\n67/JWNELDDCx63GeuShh9Nr/rWYwFeb9igmr3jQJBuDkFtJdXpqmpLk5lgvctnEG\nViRwJDn7T66TRwE1487jZLdZr5edgKBr1dpJGGMet9U/0xJnfug=\n=xgGd\n-----END PGP SIGNATURE-----", "payload": "tree baa142dd3c10ffe5c05fe6e762704694966b491b\nparent 519799f099a60f293f539578f02ff00c7414f97f\nparent 0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f\nauthor flip1995 <hello@philkrones.com> 1599919121 +0200\ncommitter flip1995 <hello@philkrones.com> 1599919121 +0200\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4df2069fc43082140e45840bcbb20c02c2fc42af", "html_url": "https://github.com/rust-lang/rust/commit/4df2069fc43082140e45840bcbb20c02c2fc42af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4df2069fc43082140e45840bcbb20c02c2fc42af/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519799f099a60f293f539578f02ff00c7414f97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/519799f099a60f293f539578f02ff00c7414f97f", "html_url": "https://github.com/rust-lang/rust/commit/519799f099a60f293f539578f02ff00c7414f97f"}, {"sha": "0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "html_url": "https://github.com/rust-lang/rust/commit/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f"}], "stats": {"total": 306, "additions": 289, "deletions": 17}, "files": [{"sha": "285a2ff8060d2af6da54d34a27e56464e36b1a5b", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -1755,6 +1755,7 @@ Released 2018-09-13\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n [`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n+[`panic_in_result_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn\n [`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl"}, {"sha": "c67efc10f15783d28e3ad5e3443e48a96a33a2b6", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -14,7 +14,7 @@ pub fn run(rustc_path: Option<&str>) {\n     // we can unwrap here because the arg is required here\n     let rustc_path = PathBuf::from(rustc_path.unwrap());\n     assert!(rustc_path.is_dir(), \"path is not a directory\");\n-    let rustc_source_basedir = rustc_path.join(\"src\");\n+    let rustc_source_basedir = rustc_path.join(\"compiler\");\n     assert!(\n         rustc_source_basedir.is_dir(),\n         \"are you sure the path leads to a rustc repo?\"\n@@ -61,7 +61,7 @@ fn inject_deps_into_manifest(\n     let new_deps = extern_crates.map(|dep| {\n         // format the dependencies that are going to be put inside the Cargo.toml\n         format!(\n-            \"{dep} = {{ path = \\\"{source_path}/lib{dep}\\\" }}\\n\",\n+            \"{dep} = {{ path = \\\"{source_path}/{dep}\\\" }}\\n\",\n             dep = dep,\n             source_path = rustc_source_dir.display()\n         )"}, {"sha": "367534499fd020665de7e1efda36a2d0742d3005", "filename": "clippy_lints/src/await_holding_lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Fawait_holding_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Fawait_holding_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_lock.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -10,7 +10,7 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for calls to await while holding a\n     /// non-async-aware MutexGuard.\n     ///\n-    /// **Why is this bad?** The Mutex types found in syd::sync and parking_lot\n+    /// **Why is this bad?** The Mutex types found in std::sync and parking_lot\n     /// are not designed to operate in an async context across await points.\n     ///\n     /// There are two potential solutions. One is to use an asynx-aware Mutex"}, {"sha": "1795fd10fa139c7ab388895fda0113ca25a76607", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -269,6 +269,7 @@ mod open_options;\n mod option_env_unwrap;\n mod option_if_let_else;\n mod overflow_check_conditional;\n+mod panic_in_result_fn;\n mod panic_unimplemented;\n mod partialeq_ne_impl;\n mod path_buf_push_overwrite;\n@@ -751,6 +752,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &option_env_unwrap::OPTION_ENV_UNWRAP,\n         &option_if_let_else::OPTION_IF_LET_ELSE,\n         &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+        &panic_in_result_fn::PANIC_IN_RESULT_FN,\n         &panic_unimplemented::PANIC,\n         &panic_unimplemented::PANIC_PARAMS,\n         &panic_unimplemented::TODO,\n@@ -1091,6 +1093,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n+    store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n+\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n@@ -1135,6 +1139,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n         LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n         LintId::of(&modulo_arithmetic::MODULO_ARITHMETIC),\n+        LintId::of(&panic_in_result_fn::PANIC_IN_RESULT_FN),\n         LintId::of(&panic_unimplemented::PANIC),\n         LintId::of(&panic_unimplemented::TODO),\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),"}, {"sha": "0826ad0ab55bb01c150449579135fa158d88676a", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -12,8 +12,10 @@ declare_clippy_lint! {\n     /// `BtreeSet` rely on either the hash or the order of keys be unchanging,\n     /// so having types with interior mutability is a bad idea.\n     ///\n-    /// **Known problems:** We don't currently account for `Rc` or `Arc`, so\n-    /// this may yield false positives.\n+    /// **Known problems:** It's correct to use a struct, that contains interior mutability\n+    /// as a key, when its `Hash` implementation doesn't access any of the interior mutable types.\n+    /// However, this lint is unable to recognize this, so it causes a false positive in theses cases.\n+    /// The `bytes` crate is a great example of this.\n     ///\n     /// **Example:**\n     /// ```rust"}, {"sha": "4077aba6ef17dabb99ca7f14b75f3e4d2d2efc28", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -0,0 +1,90 @@\n+use crate::utils::{is_expn_of, is_type_diagnostic_item, return_ty, span_lint_and_then};\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::Expr;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!` or `unreachable!` in a function of type result.\n+    ///\n+    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence unimplemented, panic and unreachable should be avoided.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn result_with_panic() -> Result<bool, String>\n+    /// {\n+    ///     panic!(\"error\");\n+    /// }\n+    /// ```\n+    pub PANIC_IN_RESULT_FN,\n+    restriction,\n+    \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \"\n+}\n+\n+declare_lint_pass!(PanicInResultFn  => [PANIC_IN_RESULT_FN]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        _: &'tcx hir::FnDecl<'tcx>,\n+        body: &'tcx hir::Body<'tcx>,\n+        span: Span,\n+        hir_id: hir::HirId,\n+    ) {\n+        if !matches!(fn_kind, FnKind::Closure(_))\n+            && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type))\n+        {\n+            lint_impl_body(cx, span, body);\n+        }\n+    }\n+}\n+\n+struct FindPanicUnimplementedUnreachable {\n+    result: Vec<Span>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if [\"unimplemented\", \"unreachable\", \"panic\", \"todo\"]\n+            .iter()\n+            .any(|fun| is_expn_of(expr.span, fun).is_some())\n+        {\n+            self.result.push(expr.span);\n+        }\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir::Body<'tcx>) {\n+    let mut panics = FindPanicUnimplementedUnreachable { result: Vec::new() };\n+    panics.visit_expr(&body.value);\n+    if !panics.result.is_empty() {\n+        span_lint_and_then(\n+            cx,\n+            PANIC_IN_RESULT_FN,\n+            impl_span,\n+            \"used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\",\n+            move |diag| {\n+                diag.help(\n+                    \"`unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\",\n+                );\n+                diag.span_note(panics.result, \"return Err() instead of panicking\");\n+            },\n+        );\n+    }\n+}"}, {"sha": "04d486438b1eb079f85cffa917ab3e6e4522ec4d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -1718,6 +1718,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"panic_unimplemented\",\n     },\n+    Lint {\n+        name: \"panic_in_result_fn\",\n+        group: \"restriction\",\n+        desc: \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \",\n+        deprecation: None,\n+        module: \"panic_in_result_fn\",\n+    },\n     Lint {\n         name: \"panic_params\",\n         group: \"style\","}, {"sha": "287726f7a2d4e99e827784da54e9a805e47bba14", "filename": "tests/ui/panic_in_result_fn.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -0,0 +1,70 @@\n+#![warn(clippy::panic_in_result_fn)]\n+\n+struct A;\n+\n+impl A {\n+    fn result_with_panic() -> Result<bool, String> // should emit lint\n+    {\n+        panic!(\"error\");\n+    }\n+\n+    fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn result_with_unreachable() -> Result<bool, String> // should emit lint\n+    {\n+        unreachable!();\n+    }\n+\n+    fn result_with_todo() -> Result<bool, String> // should emit lint\n+    {\n+        todo!(\"Finish this\");\n+    }\n+\n+    fn other_with_panic() // should not emit lint\n+    {\n+        panic!(\"\");\n+    }\n+\n+    fn other_with_unreachable() // should not emit lint\n+    {\n+        unreachable!();\n+    }\n+\n+    fn other_with_unimplemented() // should not emit lint\n+    {\n+        unimplemented!();\n+    }\n+\n+    fn other_with_todo() // should not emit lint\n+    {\n+        todo!(\"finish this\")\n+    }\n+\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    {\n+        Ok(true)\n+    }\n+}\n+\n+fn function_result_with_panic() -> Result<bool, String> // should emit lint\n+{\n+    panic!(\"error\");\n+}\n+\n+fn todo() {\n+    println!(\"something\");\n+}\n+\n+fn function_result_with_custom_todo() -> Result<bool, String> // should not emit lint\n+{\n+    todo();\n+    Ok(true)\n+}\n+\n+fn main() -> Result<(), String> {\n+    todo!(\"finish main method\");\n+    Ok(())\n+}"}, {"sha": "c6936fd86923cfab412f794ce9aea9e47a2a43b0", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -0,0 +1,105 @@\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:6:5\n+   |\n+LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         panic!(\"error\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:8:9\n+   |\n+LL |         panic!(\"error\");\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:11:5\n+   |\n+LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:13:9\n+   |\n+LL |         unimplemented!();\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:16:5\n+   |\n+LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         unreachable!();\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:18:9\n+   |\n+LL |         unreachable!();\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:21:5\n+   |\n+LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         todo!(\"Finish this\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:23:9\n+   |\n+LL |         todo!(\"Finish this\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:52:1\n+   |\n+LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n+LL | | {\n+LL | |     panic!(\"error\");\n+LL | | }\n+   | |_^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:54:5\n+   |\n+LL |     panic!(\"error\");\n+   |     ^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn.rs:67:1\n+   |\n+LL | / fn main() -> Result<(), String> {\n+LL | |     todo!(\"finish main method\");\n+LL | |     Ok(())\n+LL | | }\n+   | |_^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn.rs:68:5\n+   |\n+LL |     todo!(\"finish main method\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4df2069fc43082140e45840bcbb20c02c2fc42af/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=4df2069fc43082140e45840bcbb20c02c2fc42af", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/519799f099a60f293f539578f02ff00c7414f97f/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/519799f099a60f293f539578f02ff00c7414f97f/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=519799f099a60f293f539578f02ff00c7414f97f", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}