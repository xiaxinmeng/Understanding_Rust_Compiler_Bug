{"sha": "6a85193149cca28b18a7110ce187c69130f1e3d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhODUxOTMxNDljY2EyOGIxOGE3MTEwY2UxODdjNjkxMzBmMWUzZDQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-13T12:25:40Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:00Z"}, "message": "Clean up install", "tree": {"sha": "504f821cf2f5ee3bf37468afc6452026228fbbe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/504f821cf2f5ee3bf37468afc6452026228fbbe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a85193149cca28b18a7110ce187c69130f1e3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a85193149cca28b18a7110ce187c69130f1e3d4", "html_url": "https://github.com/rust-lang/rust/commit/6a85193149cca28b18a7110ce187c69130f1e3d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a85193149cca28b18a7110ce187c69130f1e3d4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5984e70af23e24710b2e18195361e4918cf2988f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5984e70af23e24710b2e18195361e4918cf2988f", "html_url": "https://github.com/rust-lang/rust/commit/5984e70af23e24710b2e18195361e4918cf2988f"}], "stats": {"total": 209, "additions": 89, "deletions": 120}, "files": [{"sha": "4ceeb3e6793dbef75ee0cbf3be1e2c4c67ba84b6", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 89, "deletions": 120, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/6a85193149cca28b18a7110ce187c69130f1e3d4/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a85193149cca28b18a7110ce187c69130f1e3d4/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=6a85193149cca28b18a7110ce187c69130f1e3d4", "patch": "@@ -20,121 +20,90 @@ use std::process::Command;\n \n use dist::{self, pkgname, sanitize_sh, tmpdir};\n \n-use Build;\n use builder::{Builder, Step};\n \n-pub struct Installer<'a> {\n-    build: &'a Build,\n-    prefix: PathBuf,\n-    sysconfdir: PathBuf,\n-    docdir: PathBuf,\n-    bindir: PathBuf,\n-    libdir: PathBuf,\n-    mandir: PathBuf,\n-    empty_dir: PathBuf,\n+pub fn install_docs(builder: &Builder, stage: u32, host: &str) {\n+    install_sh(builder, \"docs\", \"rust-docs\", stage, Some(host));\n }\n \n-impl<'a> Drop for Installer<'a> {\n-    fn drop(&mut self) {\n-        t!(fs::remove_dir_all(&self.empty_dir));\n+pub fn install_std(builder: &Builder, stage: u32) {\n+    for target in builder.build.config.target.iter() {\n+        install_sh(builder, \"std\", \"rust-std\", stage, Some(target));\n     }\n }\n \n-impl<'a> Installer<'a> {\n-    pub fn new(build: &'a Build) -> Installer<'a> {\n-        let prefix_default = PathBuf::from(\"/usr/local\");\n-        let sysconfdir_default = PathBuf::from(\"/etc\");\n-        let docdir_default = PathBuf::from(\"share/doc/rust\");\n-        let bindir_default = PathBuf::from(\"bin\");\n-        let libdir_default = PathBuf::from(\"lib\");\n-        let mandir_default = PathBuf::from(\"share/man\");\n-        let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n-        let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n-        let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n-        let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n-        let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n-        let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n-\n-        let sysconfdir = prefix.join(sysconfdir);\n-        let docdir = prefix.join(docdir);\n-        let bindir = prefix.join(bindir);\n-        let libdir = prefix.join(libdir);\n-        let mandir = prefix.join(mandir);\n-\n-        let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n-\n-        let prefix = add_destdir(&prefix, &destdir);\n-        let sysconfdir = add_destdir(&sysconfdir, &destdir);\n-        let docdir = add_destdir(&docdir, &destdir);\n-        let bindir = add_destdir(&bindir, &destdir);\n-        let libdir = add_destdir(&libdir, &destdir);\n-        let mandir = add_destdir(&mandir, &destdir);\n-\n-        let empty_dir = build.out.join(\"tmp/empty_dir\");\n-\n-        t!(fs::create_dir_all(&empty_dir));\n-\n-        Installer {\n-            build,\n-            prefix,\n-            sysconfdir,\n-            docdir,\n-            bindir,\n-            libdir,\n-            mandir,\n-            empty_dir,\n-        }\n-    }\n-\n-    pub fn install_docs(&self, stage: u32, host: &str) {\n-        self.install_sh(\"docs\", \"rust-docs\", stage, Some(host));\n-    }\n-\n-    pub fn install_std(&self, stage: u32) {\n-        for target in self.build.config.target.iter() {\n-            self.install_sh(\"std\", \"rust-std\", stage, Some(target));\n-        }\n-    }\n-\n-    pub fn install_cargo(&self, stage: u32, host: &str) {\n-        self.install_sh(\"cargo\", \"cargo\", stage, Some(host));\n-    }\n+pub fn install_cargo(builder: &Builder, stage: u32, host: &str) {\n+    install_sh(builder, \"cargo\", \"cargo\", stage, Some(host));\n+}\n \n-    pub fn install_rls(&self, stage: u32, host: &str) {\n-        self.install_sh(\"rls\", \"rls\", stage, Some(host));\n-    }\n+pub fn install_rls(builder: &Builder, stage: u32, host: &str) {\n+    install_sh(builder, \"rls\", \"rls\", stage, Some(host));\n+}\n \n-    pub fn install_analysis(&self, stage: u32, host: &str) {\n-        self.install_sh(\"analysis\", \"rust-analysis\", stage, Some(host));\n-    }\n+pub fn install_analysis(builder: &Builder, stage: u32, host: &str) {\n+    install_sh(builder, \"analysis\", \"rust-analysis\", stage, Some(host));\n+}\n \n-    pub fn install_src(&self, stage: u32) {\n-        self.install_sh(\"src\", \"rust-src\", stage, None);\n-    }\n-    pub fn install_rustc(&self, stage: u32, host: &str) {\n-        self.install_sh(\"rustc\", \"rustc\", stage, Some(host));\n-    }\n+pub fn install_src(builder: &Builder, stage: u32) {\n+    install_sh(builder, \"src\", \"rust-src\", stage, None);\n+}\n+pub fn install_rustc(builder: &Builder, stage: u32, host: &str) {\n+    install_sh(builder, \"rustc\", \"rustc\", stage, Some(host));\n+}\n \n-    fn install_sh(&self, package: &str, name: &str, stage: u32, host: Option<&str>) {\n-        println!(\"Install {} stage{} ({:?})\", package, stage, host);\n-        let package_name = if let Some(host) = host {\n-            format!(\"{}-{}\", pkgname(self.build, name), host)\n-        } else {\n-            pkgname(self.build, name)\n-        };\n+fn install_sh(builder: &Builder, package: &str, name: &str, stage: u32, host: Option<&str>) {\n+    let build = builder.build;\n+    println!(\"Install {} stage{} ({:?})\", package, stage, host);\n+\n+    let prefix_default = PathBuf::from(\"/usr/local\");\n+    let sysconfdir_default = PathBuf::from(\"/etc\");\n+    let docdir_default = PathBuf::from(\"share/doc/rust\");\n+    let bindir_default = PathBuf::from(\"bin\");\n+    let libdir_default = PathBuf::from(\"lib\");\n+    let mandir_default = PathBuf::from(\"share/man\");\n+    let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n+    let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n+    let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n+    let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n+    let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n+    let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n+\n+    let sysconfdir = prefix.join(sysconfdir);\n+    let docdir = prefix.join(docdir);\n+    let bindir = prefix.join(bindir);\n+    let libdir = prefix.join(libdir);\n+    let mandir = prefix.join(mandir);\n+\n+    let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n+\n+    let prefix = add_destdir(&prefix, &destdir);\n+    let sysconfdir = add_destdir(&sysconfdir, &destdir);\n+    let docdir = add_destdir(&docdir, &destdir);\n+    let bindir = add_destdir(&bindir, &destdir);\n+    let libdir = add_destdir(&libdir, &destdir);\n+    let mandir = add_destdir(&mandir, &destdir);\n+\n+    let empty_dir = build.out.join(\"tmp/empty_dir\");\n+\n+    t!(fs::create_dir_all(&empty_dir));\n+    let package_name = if let Some(host) = host {\n+        format!(\"{}-{}\", pkgname(build, name), host)\n+    } else {\n+        pkgname(build, name)\n+    };\n \n-        let mut cmd = Command::new(\"sh\");\n-        cmd.current_dir(&self.empty_dir)\n-           .arg(sanitize_sh(&tmpdir(self.build).join(&package_name).join(\"install.sh\")))\n-           .arg(format!(\"--prefix={}\", sanitize_sh(&self.prefix)))\n-           .arg(format!(\"--sysconfdir={}\", sanitize_sh(&self.sysconfdir)))\n-           .arg(format!(\"--docdir={}\", sanitize_sh(&self.docdir)))\n-           .arg(format!(\"--bindir={}\", sanitize_sh(&self.bindir)))\n-           .arg(format!(\"--libdir={}\", sanitize_sh(&self.libdir)))\n-           .arg(format!(\"--mandir={}\", sanitize_sh(&self.mandir)))\n-           .arg(\"--disable-ldconfig\");\n-        self.build.run(&mut cmd);\n-    }\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.current_dir(&empty_dir)\n+        .arg(sanitize_sh(&tmpdir(build).join(&package_name).join(\"install.sh\")))\n+        .arg(format!(\"--prefix={}\", sanitize_sh(&prefix)))\n+        .arg(format!(\"--sysconfdir={}\", sanitize_sh(&sysconfdir)))\n+        .arg(format!(\"--docdir={}\", sanitize_sh(&docdir)))\n+        .arg(format!(\"--bindir={}\", sanitize_sh(&bindir)))\n+        .arg(format!(\"--libdir={}\", sanitize_sh(&libdir)))\n+        .arg(format!(\"--mandir={}\", sanitize_sh(&mandir)))\n+        .arg(\"--disable-ldconfig\");\n+    build.run(&mut cmd);\n+    t!(fs::remove_dir_all(&empty_dir));\n }\n \n fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n@@ -152,11 +121,11 @@ fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n }\n \n macro_rules! install {\n-    ($($name:ident,\n+    (($sel:ident, $builder:ident),\n+       $($name:ident,\n        $path:expr,\n        $default_cond:expr,\n        only_hosts: $only_hosts:expr,\n-       ($sel:ident, $builder:ident),\n        $run_item:block $(, $c:ident)*;)+) => {\n         $(#[derive(Serialize)]\n         pub struct $name<'a> {\n@@ -194,59 +163,59 @@ macro_rules! install {\n     }\n }\n \n-install!(\n+install!((self, builder),\n     // rules.install(\"install-docs\", \"src/doc\")\n     //      .default(build.config.docs)\n     //      .only_host_build(true)\n     //      .dep(|s| s.name(\"dist-docs\"))\n     //      .run(move |s| install::Installer::new(build).install_docs(s.stage, s.target));\n-    Docs, \"src/doc\", builder.build.config.docs, only_hosts: false, (self, builder), {\n+    Docs, \"src/doc\", builder.build.config.docs, only_hosts: false, {\n         builder.ensure(dist::Docs { stage: self.stage, target: self.target });\n-        Installer::new(builder.build).install_docs(self.stage, self.target);\n+        install_docs(builder, self.stage, self.target);\n     };\n     // rules.install(\"install-std\", \"src/libstd\")\n     //      .default(true)\n     //      .only_host_build(true)\n     //      .dep(|s| s.name(\"dist-std\"))\n     //      .run(move |s| install::Installer::new(build).install_std(s.stage));\n-    Std, \"src/libstd\", true, only_hosts: true, (self, builder), {\n+    Std, \"src/libstd\", true, only_hosts: true, {\n         builder.ensure(dist::Std {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n-        Installer::new(builder.build).install_std(self.stage);\n+        install_std(builder, self.stage);\n     };\n     // rules.install(\"install-cargo\", \"cargo\")\n     //      .default(build.config.extended)\n     //      .host(true)\n     //      .only_host_build(true)\n     //      .dep(|s| s.name(\"dist-cargo\"))\n     //      .run(move |s| install::Installer::new(build).install_cargo(s.stage, s.target));\n-    Cargo, \"cargo\", builder.build.config.extended, only_hosts: true, (self, builder), {\n+    Cargo, \"cargo\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Cargo { stage: self.stage, target: self.target });\n-        Installer::new(builder.build).install_cargo(self.stage, self.target);\n+        install_cargo(builder, self.stage, self.target);\n     };\n     // rules.install(\"install-rls\", \"rls\")\n     //      .default(build.config.extended)\n     //      .host(true)\n     //      .only_host_build(true)\n     //      .dep(|s| s.name(\"dist-rls\"))\n     //      .run(move |s| install::Installer::new(build).install_rls(s.stage, s.target));\n-    Rls, \"rls\", builder.build.config.extended, only_hosts: true, (self, builder), {\n+    Rls, \"rls\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Rls { stage: self.stage, target: self.target });\n-        Installer::new(builder.build).install_rls(self.stage, self.target);\n+        install_rls(builder, self.stage, self.target);\n     };\n     // rules.install(\"install-analysis\", \"analysis\")\n     //      .default(build.config.extended)\n     //      .only_host_build(true)\n     //      .dep(|s| s.name(\"dist-analysis\"))\n     //      .run(move |s| install::Installer::new(build).install_analysis(s.stage, s.target));\n-    Analysis, \"analysis\", builder.build.config.extended, only_hosts: false, (self, builder), {\n+    Analysis, \"analysis\", builder.build.config.extended, only_hosts: false, {\n         builder.ensure(dist::Analysis {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n-        Installer::new(builder.build).install_analysis(self.stage, self.target);\n+        install_analysis(builder, self.stage, self.target);\n     };\n     // rules.install(\"install-src\", \"src\")\n     //      .default(build.config.extended)\n@@ -255,18 +224,18 @@ install!(\n     //      .only_host_build(true)\n     //      .dep(|s| s.name(\"dist-src\"))\n     //      .run(move |s| install::Installer::new(build).install_src(s.stage));\n-    Src, \"src\", builder.build.config.extended, only_hosts: true, (self, builder), {\n+    Src, \"src\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Src);\n-        Installer::new(builder.build).install_src(self.stage);\n+        install_src(builder, self.stage);\n     }, ONLY_BUILD;\n     // rules.install(\"install-rustc\", \"src/librustc\")\n     //      .default(true)\n     //      .host(true)\n     //      .only_host_build(true)\n     //      .dep(|s| s.name(\"dist-rustc\"))\n     //      .run(move |s| install::Installer::new(build).install_rustc(s.stage, s.target));\n-    Rustc, \"src/librustc\", builder.build.config.extended, only_hosts: true, (self, builder), {\n+    Rustc, \"src/librustc\", builder.build.config.extended, only_hosts: true, {\n         builder.ensure(dist::Rustc { stage: self.stage, target: self.target });\n-        Installer::new(builder.build).install_rustc(self.stage, self.target);\n+        install_rustc(builder, self.stage, self.target);\n     };\n );"}]}