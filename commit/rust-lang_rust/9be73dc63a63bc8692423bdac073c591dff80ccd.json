{"sha": "9be73dc63a63bc8692423bdac073c591dff80ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTczZGM2M2E2M2JjODY5MjQyM2JkYWMwNzNjNTkxZGZmODBjY2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T11:33:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-01T17:54:55Z"}, "message": "syntax: simplify HasAttrs code", "tree": {"sha": "36babbd9d6ca75866cdff32e58a513bce2f4c98f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36babbd9d6ca75866cdff32e58a513bce2f4c98f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be73dc63a63bc8692423bdac073c591dff80ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be73dc63a63bc8692423bdac073c591dff80ccd", "html_url": "https://github.com/rust-lang/rust/commit/9be73dc63a63bc8692423bdac073c591dff80ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be73dc63a63bc8692423bdac073c591dff80ccd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d0143c2c5f627e246822b4e2f501e563ec63cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d0143c2c5f627e246822b4e2f501e563ec63cc", "html_url": "https://github.com/rust-lang/rust/commit/64d0143c2c5f627e246822b4e2f501e563ec63cc"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "af02070828a0c4161eed245895123d073a6513f1", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be73dc63a63bc8692423bdac073c591dff80ccd/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be73dc63a63bc8692423bdac073c591dff80ccd/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=9be73dc63a63bc8692423bdac073c591dff80ccd", "patch": "@@ -62,7 +62,7 @@ impl HasAttrs for Annotatable {\n         }\n     }\n \n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         match self {\n             Annotatable::Item(item) => item.visit_attrs(f),\n             Annotatable::TraitItem(trait_item) => trait_item.visit_attrs(f),"}, {"sha": "a78fbe276faf1ca056b41acc55db288e14f8e7cf", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9be73dc63a63bc8692423bdac073c591dff80ccd/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be73dc63a63bc8692423bdac073c591dff80ccd/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=9be73dc63a63bc8692423bdac073c591dff80ccd", "patch": "@@ -657,15 +657,15 @@ impl NestedMetaItem {\n }\n \n pub trait HasAttrs: Sized {\n-    fn attrs(&self) -> &[ast::Attribute];\n-    fn visit_attrs<F: FnOnce(&mut Vec<ast::Attribute>)>(&mut self, f: F);\n+    fn attrs(&self) -> &[Attribute];\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>));\n }\n \n impl<T: HasAttrs> HasAttrs for Spanned<T> {\n-    fn attrs(&self) -> &[ast::Attribute] {\n+    fn attrs(&self) -> &[Attribute] {\n         self.node.attrs()\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<ast::Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         self.node.visit_attrs(f);\n     }\n }\n@@ -674,7 +674,7 @@ impl HasAttrs for Vec<Attribute> {\n     fn attrs(&self) -> &[Attribute] {\n         self\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         f(self)\n     }\n }\n@@ -683,7 +683,7 @@ impl HasAttrs for AttrVec {\n     fn attrs(&self) -> &[Attribute] {\n         self\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         visit_clobber(self, |this| {\n             let mut vec = this.into();\n             f(&mut vec);\n@@ -696,7 +696,7 @@ impl<T: HasAttrs + 'static> HasAttrs for P<T> {\n     fn attrs(&self) -> &[Attribute] {\n         (**self).attrs()\n     }\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         (**self).visit_attrs(f);\n     }\n }\n@@ -714,7 +714,7 @@ impl HasAttrs for StmtKind {\n         }\n     }\n \n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         match self {\n             StmtKind::Local(local) => local.visit_attrs(f),\n             StmtKind::Item(..) => {}\n@@ -733,29 +733,19 @@ impl HasAttrs for Stmt {\n         self.kind.attrs()\n     }\n \n-    fn visit_attrs<F: FnOnce(&mut Vec<ast::Attribute>)>(&mut self, f: F) {\n+    fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n         self.kind.visit_attrs(f);\n     }\n }\n \n-impl HasAttrs for GenericParam {\n-    fn attrs(&self) -> &[ast::Attribute] {\n-        &self.attrs\n-    }\n-\n-    fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n-        self.attrs.visit_attrs(f);\n-    }\n-}\n-\n macro_rules! derive_has_attrs {\n     ($($ty:path),*) => { $(\n         impl HasAttrs for $ty {\n             fn attrs(&self) -> &[Attribute] {\n                 &self.attrs\n             }\n \n-            fn visit_attrs<F: FnOnce(&mut Vec<Attribute>)>(&mut self, f: F) {\n+            fn visit_attrs(&mut self, f: impl FnOnce(&mut Vec<Attribute>)) {\n                 self.attrs.visit_attrs(f);\n             }\n         }\n@@ -764,5 +754,5 @@ macro_rules! derive_has_attrs {\n \n derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::AssocItem, ast::Arm,\n-    ast::Field, ast::FieldPat, ast::Variant, ast::Param\n+    ast::Field, ast::FieldPat, ast::Variant, ast::Param, GenericParam\n }"}]}