{"sha": "b6642e5cd8766c2bd8b6af616529c9ce28722931", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NjQyZTVjZDg3NjZjMmJkOGI2YWY2MTY1MjljOWNlMjg3MjI5MzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-27T13:55:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Re-order some code", "tree": {"sha": "21225576fc3d54b5e44a4f65e5daa7912ffd0794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21225576fc3d54b5e44a4f65e5daa7912ffd0794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6642e5cd8766c2bd8b6af616529c9ce28722931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6642e5cd8766c2bd8b6af616529c9ce28722931", "html_url": "https://github.com/rust-lang/rust/commit/b6642e5cd8766c2bd8b6af616529c9ce28722931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6642e5cd8766c2bd8b6af616529c9ce28722931/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b82f4f9898d317e16dcfaec9191ad9bfde74639", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b82f4f9898d317e16dcfaec9191ad9bfde74639", "html_url": "https://github.com/rust-lang/rust/commit/8b82f4f9898d317e16dcfaec9191ad9bfde74639"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "4840ef7b0596d139b8fb9e0cce8fd52cada93ecd", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 50, "deletions": 38, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b6642e5cd8766c2bd8b6af616529c9ce28722931/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6642e5cd8766c2bd8b6af616529c9ce28722931/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=b6642e5cd8766c2bd8b6af616529c9ce28722931", "patch": "@@ -10,38 +10,11 @@ pub(super) fn optimize_function(\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n     name: String, // FIXME remove\n ) {\n-    let mut stack_addr_insts = SecondaryMap::new();\n-    let mut stack_load_store_insts = SecondaryMap::new();\n-\n+    // Turn load and store into stack_load and stack_store when possible.\n     let mut cursor = FuncCursor::new(func);\n     while let Some(_ebb) = cursor.next_ebb() {\n         while let Some(inst) = cursor.next_inst() {\n             match cursor.func.dfg[inst] {\n-                // Record all stack_addr, stack_load and stack_store instructions.\n-                InstructionData::StackLoad {\n-                    opcode: Opcode::StackAddr,\n-                    stack_slot: _,\n-                    offset: _,\n-                } => {\n-                    stack_addr_insts[inst] = true;\n-                }\n-                InstructionData::StackLoad {\n-                    opcode: Opcode::StackLoad,\n-                    stack_slot: _,\n-                    offset: _,\n-                } => {\n-                    stack_load_store_insts[inst] = true;\n-                }\n-                InstructionData::StackStore {\n-                    opcode: Opcode::StackStore,\n-                    arg: _,\n-                    stack_slot: _,\n-                    offset: _,\n-                } => {\n-                    stack_load_store_insts[inst] = true;\n-                }\n-\n-                // Turn load and store into stack_load and stack_store when possible.\n                 InstructionData::Load { opcode: Opcode::Load, arg: addr, flags: _, offset } => {\n                     if cursor.func.dfg.ctrl_typevar(inst) == types::I128 || cursor.func.dfg.ctrl_typevar(inst).is_vector() {\n                         continue; // WORKAROUD: stack_load.i128 not yet implemented\n@@ -50,7 +23,6 @@ pub(super) fn optimize_function(\n                         if let Some(combined_offset) = offset.try_add_i64(stack_addr_offset.into()) {\n                             let ty = cursor.func.dfg.ctrl_typevar(inst);\n                             cursor.func.dfg.replace(inst).stack_load(ty, stack_slot, combined_offset);\n-                            stack_load_store_insts[inst] = true;\n                         }\n                     }\n                 }\n@@ -61,7 +33,6 @@ pub(super) fn optimize_function(\n                     if let Some((stack_slot, stack_addr_offset)) = try_get_stack_slot_and_offset_for_addr(cursor.func, addr) {\n                         if let Some(combined_offset) = offset.try_add_i64(stack_addr_offset.into()) {\n                             cursor.func.dfg.replace(inst).stack_store(value, stack_slot, combined_offset);\n-                            stack_load_store_insts[inst] = true;\n                         }\n                     }\n                 }\n@@ -70,27 +41,63 @@ pub(super) fn optimize_function(\n         }\n     }\n \n+    // Record all stack_addr, stack_load and stack_store instructions. Also record all stack_addr\n+    // and stack_load insts whose result is used.\n+    let mut stack_addr_insts = SecondaryMap::new();\n     let mut used_stack_addr_insts = SecondaryMap::new();\n+    let mut stack_load_insts = SecondaryMap::new();\n+    let mut used_stack_load_insts = SecondaryMap::new();\n+    let mut stack_store_insts = SecondaryMap::new();\n \n     let mut cursor = FuncCursor::new(func);\n     while let Some(_ebb) = cursor.next_ebb() {\n         while let Some(inst) = cursor.next_inst() {\n+            match cursor.func.dfg[inst] {\n+                InstructionData::StackLoad {\n+                    opcode: Opcode::StackAddr,\n+                    stack_slot: _,\n+                    offset: _,\n+                } => {\n+                    stack_addr_insts[inst] = true;\n+                }\n+                InstructionData::StackLoad {\n+                    opcode: Opcode::StackLoad,\n+                    stack_slot: _,\n+                    offset: _,\n+                } => {\n+                    stack_load_insts[inst] = true;\n+                }\n+                InstructionData::StackStore {\n+                    opcode: Opcode::StackStore,\n+                    arg: _,\n+                    stack_slot: _,\n+                    offset: _,\n+                } => {\n+                    stack_store_insts[inst] = true;\n+                }\n+                _ => {}\n+            }\n+\n             for &arg in cursor.func.dfg.inst_args(inst) {\n                 if let ValueDef::Result(arg_origin, 0) = cursor.func.dfg.value_def(arg) {\n-                    if cursor.func.dfg[arg_origin].opcode() == Opcode::StackAddr {\n-                        used_stack_addr_insts[arg_origin] = true;\n+                    match cursor.func.dfg[arg_origin].opcode() {\n+                        Opcode::StackAddr => used_stack_addr_insts[arg_origin] = true,\n+                        Opcode::StackLoad => used_stack_load_insts[arg_origin] = true,\n+                        _ => {}\n                     }\n                 }\n             }\n         }\n     }\n \n-    /*println!(\n-        \"stack_addr: [{}] ([{}] used)\\nstack_load/stack_store: [{}]\",\n+    println!(\n+        \"stack_addr: [{}] ([{}] used)\\nstack_load: [{}] ([{}] used)\\nstack_store: [{}]\",\n         bool_secondary_map_to_string(&stack_addr_insts),\n         bool_secondary_map_to_string(&used_stack_addr_insts),\n-        bool_secondary_map_to_string(&stack_load_store_insts),\n-    );*/\n+        bool_secondary_map_to_string(&stack_load_insts),\n+        bool_secondary_map_to_string(&used_stack_load_insts),\n+        bool_secondary_map_to_string(&stack_store_insts),\n+    );\n \n     for inst in used_stack_addr_insts.keys().filter(|&inst| used_stack_addr_insts[inst]) {\n         assert!(stack_addr_insts[inst]);\n@@ -108,7 +115,7 @@ pub(super) fn optimize_function(\n     //println!(\"stack_addr (after): [{}]\", bool_secondary_map_to_string(&stack_addr_insts));\n \n     let mut stack_slot_usage_map: SecondaryMap<StackSlot, HashSet<Inst>> = SecondaryMap::new();\n-    for inst in stack_load_store_insts.keys().filter(|&inst| stack_load_store_insts[inst]) {\n+    for inst in stack_load_insts.keys().filter(|&inst| stack_load_insts[inst]) {\n         match func.dfg[inst] {\n             InstructionData::StackLoad {\n                 opcode: Opcode::StackLoad,\n@@ -117,6 +124,11 @@ pub(super) fn optimize_function(\n             } => {\n                 stack_slot_usage_map[stack_slot].insert(inst);\n             }\n+            ref data => unreachable!(\"{:?}\", data),\n+        }\n+    }\n+    for inst in stack_store_insts.keys().filter(|&inst| stack_store_insts[inst]) {\n+        match func.dfg[inst] {\n             InstructionData::StackStore {\n                 opcode: Opcode::StackStore,\n                 arg: _,\n@@ -141,7 +153,7 @@ pub(super) fn optimize_function(\n         }\n     }\n \n-    //println!(\"{:?}\\n\", stack_slot_usage_map);\n+    println!(\"{:?}\\n\", stack_slot_usage_map);\n \n     for (stack_slot, users) in stack_slot_usage_map.iter_mut() {\n         let mut is_addr_leaked = false;"}]}