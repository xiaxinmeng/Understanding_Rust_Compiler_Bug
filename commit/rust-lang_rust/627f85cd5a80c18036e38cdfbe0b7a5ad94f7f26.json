{"sha": "627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26", "node_id": "C_kwDOAAsO6NoAKDYyN2Y4NWNkNWE4MGMxODAzNmUzOGNkZmJlMGI3YTVhZDk0ZjdmMjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-06-16T09:16:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-16T09:16:15Z"}, "message": "Rollup merge of #112535 - RalfJung:miri-test-libstd, r=cuviper\n\nreorder attributes to make miri-test-libstd work again\n\nFixes fallout from https://github.com/rust-lang/rust/pull/110141", "tree": {"sha": "994453a446ca516c4643c4549ea6355470d4ebd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/994453a446ca516c4643c4549ea6355470d4ebd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjChfCRBK7hj4Ov3rIwAAT30IADoQg71tRuH6Glu2TlMPOxf0\nosrean9X0SOzW4x7H2HyS51YXNaoVc/W3HONvpn9AZt0RpQBSDI8jMeAu/9TiZFF\nUi1z1JG92b4i8Gs5xtEMlntYVDVa2P4JIna6BVgLzsP5dX96GuSDQZWwEEL4frVQ\ndGjX4G45d4jTkAHNfuV4A1dRLwP28xCzlCttXVAaG0zwTHFiG0AC+3kaUE36gckd\nKLLBQSK2wWr+ExBTGLGkLMz3Zf9AtBrl/ILYiL5U/4lpGNYnUzGecKsfAYvi4W48\nM7KhxVgEgSRYE/be9hTser4UJyzbpNPaO0btT6TFNkz7oeGNE6SLGC7j+cIFof0=\n=vlAJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 994453a446ca516c4643c4549ea6355470d4ebd4\nparent 64f6c00772321324d77dfd8a0ee708fbb0d9a277\nparent 3b9b4e5e3d6b45be6d355f0685eb70d99c3ab50a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1686906975 +0530\ncommitter GitHub <noreply@github.com> 1686906975 +0530\n\nRollup merge of #112535 - RalfJung:miri-test-libstd, r=cuviper\n\nreorder attributes to make miri-test-libstd work again\n\nFixes fallout from https://github.com/rust-lang/rust/pull/110141\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26", "html_url": "https://github.com/rust-lang/rust/commit/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f6c00772321324d77dfd8a0ee708fbb0d9a277", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f6c00772321324d77dfd8a0ee708fbb0d9a277", "html_url": "https://github.com/rust-lang/rust/commit/64f6c00772321324d77dfd8a0ee708fbb0d9a277"}, {"sha": "3b9b4e5e3d6b45be6d355f0685eb70d99c3ab50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9b4e5e3d6b45be6d355f0685eb70d99c3ab50a", "html_url": "https://github.com/rust-lang/rust/commit/3b9b4e5e3d6b45be6d355f0685eb70d99c3ab50a"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "967ad3a0e6901bedb23684e8d2c8e89ee6704ef5", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26", "patch": "@@ -56,6 +56,11 @@\n //! [`Rc`]: rc\n //! [`RefCell`]: core::cell\n \n+// To run alloc tests without x.py without ending up with two copies of alloc, Miri needs to be\n+// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n+// rustc itself never sets the feature, so this line has no affect there.\n+#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n+//\n #![allow(unused_attributes)]\n #![stable(feature = \"alloc\", since = \"1.36.0\")]\n #![doc(\n@@ -75,11 +80,6 @@\n ))]\n #![no_std]\n #![needs_allocator]\n-// To run alloc tests without x.py without ending up with two copies of alloc, Miri needs to be\n-// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n-// rustc itself never sets the feature, so this line has no affect there.\n-#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n-//\n // Lints:\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(fuzzy_provenance_casts)]"}, {"sha": "da08c018d0e360b0da589ee161dbb7d24a2c0785", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=627f85cd5a80c18036e38cdfbe0b7a5ad94f7f26", "patch": "@@ -188,6 +188,13 @@\n //! [array]: prim@array\n //! [slice]: prim@slice\n \n+// To run std tests without x.py without ending up with two copies of std, Miri needs to be\n+// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n+// rustc itself never sets the feature, so this line has no affect there.\n+#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n+// miri-test-libstd also prefers to make std use the sysroot versions of the dependencies.\n+#![cfg_attr(feature = \"miri-test-libstd\", feature(rustc_private))]\n+//\n #![cfg_attr(not(feature = \"restricted-std\"), stable(feature = \"rust1\", since = \"1.0.0\"))]\n #![cfg_attr(feature = \"restricted-std\", unstable(feature = \"restricted_std\", issue = \"none\"))]\n #![doc(\n@@ -202,12 +209,6 @@\n     no_global_oom_handling,\n     not(no_global_oom_handling)\n ))]\n-// To run std tests without x.py without ending up with two copies of std, Miri needs to be\n-// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n-// rustc itself never sets the feature, so this line has no affect there.\n-#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n-// miri-test-libstd also prefers to make std use the sysroot versions of the dependencies.\n-#![cfg_attr(feature = \"miri-test-libstd\", feature(rustc_private))]\n // Don't link to std. We are std.\n #![no_std]\n // Tell the compiler to link to either panic_abort or panic_unwind"}]}