{"sha": "198208be0e818d99e42281568a2eec305175c6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODIwOGJlMGU4MThkOTllNDIyODE1NjhhMmVlYzMwNTE3NWM2Yzk=", "commit": {"author": {"name": "Jakob Demler", "email": "jdemler@curry-software.com", "date": "2017-02-19T17:15:44Z"}, "committer": {"name": "Jakob Demler", "email": "jdemler@curry-software.com", "date": "2017-02-19T17:15:44Z"}, "message": "Fixed some small issues", "tree": {"sha": "0df794362dcd481bc04bafcfd8003eaea2558c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df794362dcd481bc04bafcfd8003eaea2558c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198208be0e818d99e42281568a2eec305175c6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198208be0e818d99e42281568a2eec305175c6c9", "html_url": "https://github.com/rust-lang/rust/commit/198208be0e818d99e42281568a2eec305175c6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198208be0e818d99e42281568a2eec305175c6c9/comments", "author": {"login": "JDemler", "id": 12686782, "node_id": "MDQ6VXNlcjEyNjg2Nzgy", "avatar_url": "https://avatars.githubusercontent.com/u/12686782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JDemler", "html_url": "https://github.com/JDemler", "followers_url": "https://api.github.com/users/JDemler/followers", "following_url": "https://api.github.com/users/JDemler/following{/other_user}", "gists_url": "https://api.github.com/users/JDemler/gists{/gist_id}", "starred_url": "https://api.github.com/users/JDemler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JDemler/subscriptions", "organizations_url": "https://api.github.com/users/JDemler/orgs", "repos_url": "https://api.github.com/users/JDemler/repos", "events_url": "https://api.github.com/users/JDemler/events{/privacy}", "received_events_url": "https://api.github.com/users/JDemler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JDemler", "id": 12686782, "node_id": "MDQ6VXNlcjEyNjg2Nzgy", "avatar_url": "https://avatars.githubusercontent.com/u/12686782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JDemler", "html_url": "https://github.com/JDemler", "followers_url": "https://api.github.com/users/JDemler/followers", "following_url": "https://api.github.com/users/JDemler/following{/other_user}", "gists_url": "https://api.github.com/users/JDemler/gists{/gist_id}", "starred_url": "https://api.github.com/users/JDemler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JDemler/subscriptions", "organizations_url": "https://api.github.com/users/JDemler/orgs", "repos_url": "https://api.github.com/users/JDemler/repos", "events_url": "https://api.github.com/users/JDemler/events{/privacy}", "received_events_url": "https://api.github.com/users/JDemler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97451996e69a0bb8d98cfe77bd904d8033419ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/97451996e69a0bb8d98cfe77bd904d8033419ab9", "html_url": "https://github.com/rust-lang/rust/commit/97451996e69a0bb8d98cfe77bd904d8033419ab9"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "e22ef85546bdb6f650174e84b182358a1e48a822", "filename": "src/doc/book/src/procedural-macros.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/198208be0e818d99e42281568a2eec305175c6c9/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/198208be0e818d99e42281568a2eec305175c6c9/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=198208be0e818d99e42281568a2eec305175c6c9", "patch": "@@ -210,12 +210,15 @@ Hello, World! My name is FrenchToast\n Hello, World! My name is Waffles\n ```\n \n+We've done it!\n+\n ## Custom Attributes\n \n In some cases it might make sense to allow users some kind of configuration.\n-For our example the user might want to overwrite the name that is printed in the `hello_world()` method.\n+For example, the user might want to overwrite the name that is printed in the `hello_world()` method.\n \n This can be achieved with custom attributes:\n+\n ```rust,ignore\n #[derive(HelloWorld)]\n #[HelloWorldName = \"the best Pancakes\"]\n@@ -232,8 +235,8 @@ If we try to compile this though, the compiler will respond with an error:\n error: The attribute `HelloWorldName` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n ```\n \n-The compiler needs to know that we handle this attribute and to not respond with an error.\n-This is done in the `hello-world-derive`-crate by adding `attributes` to the `proc_macro_derive` attribute:\n+The compiler needs to know that we're handling this attribute and to not respond with an error.\n+This is done in the `hello-world-derive` crate by adding `attributes` to the `proc_macro_derive` attribute:\n \n ```rust,ignore\n #[proc_macro_derive(HelloWorld, attributes(HelloWorldName))]\n@@ -244,11 +247,11 @@ Multiple attributes can be specified that way.\n \n ## Raising Errors\n \n-Let's assume that we do not want to accept `Enums` as input to our custom derive method.\n+Let's assume that we do not want to accept enums as input to our custom derive method.\n \n This condition can be easily checked with the help of `syn`. \n-But how to we tell the user, that we do not accept `Enums`. \n-The idiomatic was to report errors in procedural macros is to panic:\n+But how do we tell the user, that we do not accept enums?\n+The idiomatic way to report errors in procedural macros is to panic:\n \n ```rust,ignore\n fn impl_hello_world(ast: &syn::MacroInput) -> quote::Tokens {\n@@ -257,14 +260,14 @@ fn impl_hello_world(ast: &syn::MacroInput) -> quote::Tokens {\n     if let syn::Body::Struct(_) = ast.body {\n         // Yes, this is a struct\n         quote! {\n-            impl HelloWorld for #name {                       \n+            impl HelloWorld for #name {\n                 fn hello_world() {\n                     println!(\"Hello, World! My name is {}\", stringify!(#name));\n                 }\n             }\n         }\n     } else {\n-        //Nope. This is an Enum. We cannot handle these! \n+        //Nope. This is an Enum. We cannot handle these!\n        panic!(\"#[derive(HelloWorld)] is only defined for structs, not for enums!\");\n     }\n }"}]}