{"sha": "856a544d0c55ba00ddcc8aa821e642796673c40e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NmE1NDRkMGM1NWJhMDBkZGNjOGFhODIxZTY0Mjc5NjY3M2M0MGU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-01T10:45:23Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-01T11:23:13Z"}, "message": "Remove native types from stdlib", "tree": {"sha": "62addb3ad3b1903b16c0dd33373e3eb00649b0b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62addb3ad3b1903b16c0dd33373e3eb00649b0b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856a544d0c55ba00ddcc8aa821e642796673c40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856a544d0c55ba00ddcc8aa821e642796673c40e", "html_url": "https://github.com/rust-lang/rust/commit/856a544d0c55ba00ddcc8aa821e642796673c40e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856a544d0c55ba00ddcc8aa821e642796673c40e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6aead72811b5e2127763e6e85816c9df7a44cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6aead72811b5e2127763e6e85816c9df7a44cb9", "html_url": "https://github.com/rust-lang/rust/commit/c6aead72811b5e2127763e6e85816c9df7a44cb9"}], "stats": {"total": 188, "additions": 87, "deletions": 101}, "files": [{"sha": "81548f445d901b39815e5854be5093d2b1fcd8bf", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -29,10 +29,10 @@ export recv;\n export chan::{};\n export port::{};\n \n+enum rust_port {}\n+\n #[abi = \"cdecl\"]\n native mod rustrt {\n-    type rust_port;\n-\n     fn chan_id_send<T: send>(t: *sys::type_desc,\n                             target_task: task::task, target_port: port_id,\n                             data: T) -> ctypes::uintptr_t;\n@@ -72,7 +72,7 @@ enum chan<T: send> {\n     chan_t(task::task, port_id)\n }\n \n-resource port_ptr<T: send>(po: *rustrt::rust_port) {\n+resource port_ptr<T: send>(po: *rust_port) {\n     // Once the port is detached it's guaranteed not to receive further\n     // messages\n     rustrt::rust_port_detach(po);\n@@ -127,13 +127,13 @@ fn recv<T: send>(p: port<T>) -> T { recv_(***p) }\n #[doc(\n   brief = \"Receive on a raw port pointer\"\n )]\n-fn recv_<T: send>(p: *rustrt::rust_port) -> T {\n+fn recv_<T: send>(p: *rust_port) -> T {\n     // FIXME: Due to issue 1185 we can't use a return pointer when\n     // calling C code, and since we can't create our own return\n     // pointer on the stack, we're going to call a little intrinsic\n     // that will grab the value of the return pointer, then call this\n     // function, which we will then use to call the runtime.\n-    fn recv(dptr: *uint, port: *rustrt::rust_port,\n+    fn recv(dptr: *uint, port: *rust_port,\n             yield: *ctypes::uintptr_t,\n             killed: *ctypes::uintptr_t) unsafe {\n         rustrt::port_recv(dptr, port, yield, killed);"}, {"sha": "22428e41ca3dbf2d6dc8238df1ed7c445e325c8e", "filename": "src/libcore/ctypes.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibcore%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibcore%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fctypes.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -75,13 +75,7 @@ type uint32_t = u32;\n          but using pointers to this type when interoperating \\\n          with C void pointers can help in documentation.\"\n )]\n-enum void {\n-    // Making the only variant reference itself makes it impossible to\n-    // construct. Not exporting it makes it impossible to destructure.\n-    void_private(@void),\n-    // FIXME: #881\n-    void_private2(@void),\n-}\n+enum void {}\n \n #[doc(\n   brief = \"A float value with the same size as a C `float`.\""}, {"sha": "315813c0848b71f8dfac89b0b40324a880891153", "filename": "src/libstd/freebsd_os.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Ffreebsd_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Ffreebsd_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffreebsd_os.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -10,7 +10,7 @@ import core::ctypes::*;\n export libc;\n export libc_constants;\n export pipe;\n-export fd_FILE;\n+export FILE, fd_FILE;\n export close;\n export fclose;\n export waitpid;\n@@ -24,16 +24,20 @@ export fsync_fd;\n // FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n // by https://github.com/graydon/rust/issues#issue/268\n \n+enum FILE_opaque {}\n+type FILE = *FILE_opaque;\n+enum dir {}\n+enum dirent {}\n+\n #[nolink]\n #[abi = \"cdecl\"]\n native mod libc {\n     fn read(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n     fn write(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n-    fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n-    fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n+    fn fread(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n+    fn fwrite(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n     fn open(s: str::sbuf, flags: c_int, mode: unsigned) -> fd_t;\n     fn close(fd: fd_t) -> c_int;\n-    type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n     fn fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n     fn fclose(f: FILE);\n@@ -45,11 +49,9 @@ native mod libc {\n     fn feof(f: FILE) -> c_int;\n     fn fseek(f: FILE, offset: long, whence: c_int) -> c_int;\n     fn ftell(f: FILE) -> long;\n-    type dir;\n-    fn opendir(d: str::sbuf) -> dir;\n-    fn closedir(d: dir) -> c_int;\n-    type dirent;\n-    fn readdir(d: dir) -> dirent;\n+    fn opendir(d: str::sbuf) -> *dir;\n+    fn closedir(d: *dir) -> c_int;\n+    fn readdir(d: *dir) -> *dirent;\n     fn getenv(n: str::sbuf) -> str::sbuf;\n     fn setenv(n: str::sbuf, v: str::sbuf, overwrite: c_int) -> c_int;\n     fn unsetenv(n: str::sbuf) -> c_int;\n@@ -90,15 +92,15 @@ fn pipe() -> {in: fd_t, out: fd_t} {\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: fd_t) -> libc::FILE {\n+fn fd_FILE(fd: fd_t) -> FILE {\n     ret str::as_buf(\"r\", {|modebuf| libc::fdopen(fd, modebuf) });\n }\n \n fn close(fd: fd_t) -> c_int {\n     libc::close(fd)\n }\n \n-fn fclose(file: libc::FILE) {\n+fn fclose(file: FILE) {\n     libc::fclose(file)\n }\n "}, {"sha": "8f77a804892bf2c0b0ad040f05603cfe972c1c66", "filename": "src/libstd/io.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -9,9 +9,9 @@ import core::ctypes::c_int;\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn rust_get_stdin() -> os::libc::FILE;\n-    fn rust_get_stdout() -> os::libc::FILE;\n-    fn rust_get_stderr() -> os::libc::FILE;\n+    fn rust_get_stdin() -> os::FILE;\n+    fn rust_get_stdout() -> os::FILE;\n+    fn rust_get_stderr() -> os::FILE;\n }\n \n // Reading\n@@ -166,7 +166,7 @@ fn convert_whence(whence: seek_style) -> i32 {\n     };\n }\n \n-impl of reader for os::libc::FILE {\n+impl of reader for os::FILE {\n     fn read_bytes(len: uint) -> [u8] unsafe {\n         let buf = [];\n         vec::reserve(buf, len);\n@@ -195,9 +195,9 @@ impl <T: reader, C> of reader for {base: T, cleanup: C} {\n     fn tell() -> uint { self.base.tell() }\n }\n \n-resource FILE_res(f: os::libc::FILE) { os::libc::fclose(f); }\n+resource FILE_res(f: os::FILE) { os::libc::fclose(f); }\n \n-fn FILE_reader(f: os::libc::FILE, cleanup: bool) -> reader {\n+fn FILE_reader(f: os::FILE, cleanup: bool) -> reader {\n     if cleanup {\n         {base: f, cleanup: FILE_res(f)} as reader\n     } else {\n@@ -282,7 +282,7 @@ impl <T: writer, C> of writer for {base: T, cleanup: C} {\n     fn flush() -> int { self.base.flush() }\n }\n \n-impl of writer for os::libc::FILE {\n+impl of writer for os::FILE {\n     fn write(v: [const u8]) unsafe {\n         let len = vec::len(v);\n         let vbuf = vec::unsafe::to_ptr(v);\n@@ -296,7 +296,7 @@ impl of writer for os::libc::FILE {\n     fn flush() -> int { os::libc::fflush(self) as int }\n }\n \n-fn FILE_writer(f: os::libc::FILE, cleanup: bool) -> writer {\n+fn FILE_writer(f: os::FILE, cleanup: bool) -> writer {\n     if cleanup {\n         {base: f, cleanup: FILE_res(f)} as writer\n     } else {\n@@ -532,10 +532,10 @@ mod fsync {\n     // fsync file after executing blk\n     // FIXME find better way to create resources within lifetime of outer res\n     fn FILE_res_sync(&&file: FILE_res, opt_level: option<level>,\n-                  blk: fn(&&res<os::libc::FILE>)) {\n+                  blk: fn(&&res<os::FILE>)) {\n         blk(res({\n             val: *file, opt_level: opt_level,\n-            fsync_fn: fn@(&&file: os::libc::FILE, l: level) -> int {\n+            fsync_fn: fn@(&&file: os::FILE, l: level) -> int {\n                 ret os::fsync_fd(os::libc::fileno(file), l) as int;\n             }\n         }));"}, {"sha": "05722333df8aa3b7d2369b3cea36d1205667bed1", "filename": "src/libstd/linux_os.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flinux_os.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -10,7 +10,7 @@ import core::ctypes::*;\n export libc;\n export libc_constants;\n export pipe;\n-export fd_FILE;\n+export FILE, fd_FILE;\n export close;\n export fclose;\n export waitpid;\n@@ -24,16 +24,20 @@ export fsync_fd;\n // FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n // by https://github.com/graydon/rust/issues#issue/268\n \n+enum FILE_opaque {}\n+type FILE = *FILE_opaque;\n+enum dir {}\n+enum dirent {}\n+\n #[nolink]\n #[abi = \"cdecl\"]\n native mod libc {\n     fn read(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n     fn write(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n-    fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n-    fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n+    fn fread(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n+    fn fwrite(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n     fn open(s: str::sbuf, flags: c_int, mode: unsigned) -> fd_t;\n     fn close(fd: fd_t) -> c_int;\n-    type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n     fn fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n     fn fclose(f: FILE);\n@@ -46,11 +50,9 @@ native mod libc {\n     fn feof(f: FILE) -> c_int;\n     fn fseek(f: FILE, offset: long, whence: c_int) -> c_int;\n     fn ftell(f: FILE) -> long;\n-    type dir;\n-    fn opendir(d: str::sbuf) -> dir;\n-    fn closedir(d: dir) -> c_int;\n-    type dirent;\n-    fn readdir(d: dir) -> dirent;\n+    fn opendir(d: str::sbuf) -> *dir;\n+    fn closedir(d: *dir) -> c_int;\n+    fn readdir(d: *dir) -> *dirent;\n     fn getenv(n: str::sbuf) -> str::sbuf;\n     fn setenv(n: str::sbuf, v: str::sbuf, overwrite: c_int) -> c_int;\n     fn unsetenv(n: str::sbuf) -> c_int;\n@@ -83,15 +85,15 @@ fn pipe() -> {in: fd_t, out: fd_t} {\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: fd_t) -> libc::FILE {\n+fn fd_FILE(fd: fd_t) -> FILE {\n     ret str::as_buf(\"r\", {|modebuf| libc::fdopen(fd, modebuf) });\n }\n \n fn close(fd: fd_t) -> c_int {\n     libc::close(fd)\n }\n \n-fn fclose(file: libc::FILE) {\n+fn fclose(file: FILE) {\n     libc::fclose(file)\n }\n "}, {"sha": "920061cfd3175d9ee2047e4ba5e7905319644b0f", "filename": "src/libstd/macos_os.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacos_os.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -4,7 +4,7 @@ import core::ctypes::*;\n export libc;\n export libc_constants;\n export pipe;\n-export fd_FILE;\n+export FILE, fd_FILE;\n export close;\n export fclose;\n export waitpid;\n@@ -18,16 +18,20 @@ export fsync_fd;\n // FIXME Refactor into unix_os module or some such. Doesn't\n // seem to work right now.\n \n+enum FILE_opaque {}\n+type FILE = *FILE_opaque;\n+enum dir {}\n+enum dirent {}\n+\n #[nolink]\n #[abi = \"cdecl\"]\n native mod libc {\n     fn read(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n     fn write(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n-    fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n-    fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n+    fn fread(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n+    fn fwrite(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n     fn open(s: str::sbuf, flags: c_int, mode: unsigned) -> fd_t;\n     fn close(fd: fd_t) -> c_int;\n-    type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n     fn fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n     fn fflush(f: FILE) -> c_int;\n@@ -39,11 +43,9 @@ native mod libc {\n     fn feof(f: FILE) -> c_int;\n     fn fseek(f: FILE, offset: long, whence: c_int) -> c_int;\n     fn ftell(f: FILE) -> long;\n-    type dir;\n-    fn opendir(d: str::sbuf) -> dir;\n-    fn closedir(d: dir) -> c_int;\n-    type dirent;\n-    fn readdir(d: dir) -> dirent;\n+    fn opendir(d: str::sbuf) -> *dir;\n+    fn closedir(d: *dir) -> c_int;\n+    fn readdir(d: *dir) -> *dirent;\n     fn getenv(n: str::sbuf) -> str::sbuf;\n     fn setenv(n: str::sbuf, v: str::sbuf, overwrite: c_int) -> c_int;\n     fn unsetenv(n: str::sbuf) -> c_int;\n@@ -80,15 +82,15 @@ fn pipe() -> {in: fd_t, out: fd_t} {\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: fd_t) -> libc::FILE {\n+fn fd_FILE(fd: fd_t) -> FILE {\n     ret str::as_buf(\"r\", {|modebuf| libc::fdopen(fd, modebuf) });\n }\n \n fn close(fd: fd_t) -> c_int {\n     libc::close(fd)\n }\n \n-fn fclose(file: libc::FILE) {\n+fn fclose(file: FILE) {\n     libc::fclose(file)\n }\n "}, {"sha": "c288189216d2ba8f7185170f7f99c005387eb7b6", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -3,12 +3,14 @@ Module: rand\n \n Random number generation\n */\n+\n+enum rctx {}\n+\n #[abi = \"cdecl\"]\n native mod rustrt {\n-    type rctx;\n-    fn rand_new() -> rctx;\n-    fn rand_next(c: rctx) -> u32;\n-    fn rand_free(c: rctx);\n+    fn rand_new() -> *rctx;\n+    fn rand_next(c: *rctx) -> u32;\n+    fn rand_free(c: *rctx);\n }\n \n /* Section: Types */\n@@ -48,7 +50,7 @@ iface rng {\n     fn gen_bytes(len: uint) -> [u8];\n }\n \n-resource rand_res(c: rustrt::rctx) { rustrt::rand_free(c); }\n+resource rand_res(c: *rctx) { rustrt::rand_free(c); }\n \n /* Section: Operations */\n "}, {"sha": "f81eda3aeeb501b69248ed626539008bba2e5e9c", "filename": "src/libstd/run_program.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun_program.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -171,8 +171,8 @@ fn start_program(prog: str, args: [str]) -> program {\n \n     type prog_repr = {pid: pid_t,\n                       mutable in_fd: fd_t,\n-                      out_file: os::libc::FILE,\n-                      err_file: os::libc::FILE,\n+                      out_file: os::FILE,\n+                      err_file: os::FILE,\n                       mutable finished: bool};\n \n     fn close_repr_input(r: prog_repr) {"}, {"sha": "6e763f9148695ea82f564e6c5a22c1619c69f7ea", "filename": "src/libstd/win32_os.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Flibstd%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fwin32_os.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -1,18 +1,20 @@\n import core::option;\n import core::ctypes::*;\n \n+enum FILE_opaque {}\n+type FILE = *FILE_opaque;\n+\n #[abi = \"cdecl\"]\n #[nolink]\n native mod libc {\n     fn read(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n     fn write(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n-    fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n-    fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n+    fn fread(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n+    fn fwrite(buf: *u8, size: size_t, n: size_t, f: FILE) -> size_t;\n     #[link_name = \"_open\"]\n     fn open(s: str::sbuf, flags: c_int, mode: unsigned) -> c_int;\n     #[link_name = \"_close\"]\n     fn close(fd: fd_t) -> c_int;\n-    type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n     fn _fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n     fn fclose(f: FILE);\n@@ -46,9 +48,10 @@ type HMODULE = uint;\n type LPTSTR = str::sbuf;\n type LPCTSTR = str::sbuf;\n \n+type LPSECURITY_ATTRIBUTES = *ctypes::void;\n+\n #[abi = \"stdcall\"]\n native mod kernel32 {\n-    type LPSECURITY_ATTRIBUTES;\n     fn GetEnvironmentVariableA(n: str::sbuf, v: str::sbuf, nsize: uint) ->\n        uint;\n     fn SetEnvironmentVariableA(n: str::sbuf, v: str::sbuf) -> int;\n@@ -84,15 +87,15 @@ fn pipe() -> {in: fd_t, out: fd_t} {\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: fd_t) -> libc::FILE {\n+fn fd_FILE(fd: fd_t) -> FILE {\n     ret str::as_buf(\"r\", {|modebuf| libc::_fdopen(fd, modebuf) });\n }\n \n fn close(fd: fd_t) -> c_int {\n     libc::close(fd)\n }\n \n-fn fclose(file: libc::FILE) {\n+fn fclose(file: FILE) {\n     libc::fclose(file)\n }\n "}, {"sha": "47e52863dda8686ff7ffa80996416ae9c87a1067", "filename": "src/test/compile-fail/native-type-mismatch.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -1,7 +0,0 @@\n-// error-pattern:expected `sbuf` but found `FILE`\n-use std;\n-\n-fn main() unsafe {\n-    let f: std::os::libc::FILE = std::io::rustrt::rust_get_stdin();\n-    std::os::libc::fopen(f, f);\n-}"}, {"sha": "2bdc2bad126d37d9491c7d438907f98328d061f7", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -4,5 +4,5 @@ use std;\n import std::os;\n \n fn main() {\n-  log(debug, 1.0 as os::libc::FILE); // Can't cast float to native.\n+  log(debug, 1.0 as os::FILE); // Can't cast float to native.\n }"}, {"sha": "4333fa3d57332a57e2a0c07b377935349157182f", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -162,9 +162,6 @@ mod test_native_items {\n     native mod rustrt {\n         #[attr];\n \n-        #[attr]\n-        type sbuf;\n-\n         #[attr]\n         fn unsupervise();\n     }"}, {"sha": "e91b4e684b7633d430667035346bad160e71fb54", "filename": "src/test/run-pass/native-opaque-type.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -1,9 +0,0 @@\n-\n-\n-#[abi = \"cdecl\"]\n-#[nolink]\n-native mod libc {\n-    type file_handle;\n-}\n-\n-fn main() { assert (true); }"}, {"sha": "84f279bca5d1d7923d294dd023563bd385e57125", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856a544d0c55ba00ddcc8aa821e642796673c40e/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=856a544d0c55ba00ddcc8aa821e642796673c40e", "patch": "@@ -2,7 +2,7 @@ use std;\n import std::os;\n \n fn main() {\n-  let f = 1 as os::libc::FILE;\n+  let f = 1 as os::FILE;\n   log(debug, f as int);\n   log(debug, f as uint);\n   log(debug, f as i8);\n@@ -18,7 +18,7 @@ fn main() {\n   log(debug, 1 as uint);\n   log(debug, 1 as float);\n   log(debug, 1 as bool);\n-  log(debug, 1 as os::libc::FILE);\n+  log(debug, 1 as os::FILE);\n   log(debug, 1 as i8);\n   log(debug, 1 as i16);\n   log(debug, 1 as i32);\n@@ -34,7 +34,7 @@ fn main() {\n   log(debug, 1u as uint);\n   log(debug, 1u as float);\n   log(debug, 1u as bool);\n-  log(debug, 1u as os::libc::FILE);\n+  log(debug, 1u as os::FILE);\n   log(debug, 1u as i8);\n   log(debug, 1u as i16);\n   log(debug, 1u as i32);\n@@ -50,7 +50,7 @@ fn main() {\n   log(debug, 1i8 as uint);\n   log(debug, 1i8 as float);\n   log(debug, 1i8 as bool);\n-  log(debug, 1i8 as os::libc::FILE);\n+  log(debug, 1i8 as os::FILE);\n   log(debug, 1i8 as i8);\n   log(debug, 1i8 as i16);\n   log(debug, 1i8 as i32);\n@@ -66,7 +66,7 @@ fn main() {\n   log(debug, 1u8 as uint);\n   log(debug, 1u8 as float);\n   log(debug, 1u8 as bool);\n-  log(debug, 1u8 as os::libc::FILE);\n+  log(debug, 1u8 as os::FILE);\n   log(debug, 1u8 as i8);\n   log(debug, 1u8 as i16);\n   log(debug, 1u8 as i32);\n@@ -82,7 +82,7 @@ fn main() {\n   log(debug, 1i16 as uint);\n   log(debug, 1i16 as float);\n   log(debug, 1i16 as bool);\n-  log(debug, 1i16 as os::libc::FILE);\n+  log(debug, 1i16 as os::FILE);\n   log(debug, 1i16 as i8);\n   log(debug, 1i16 as i16);\n   log(debug, 1i16 as i32);\n@@ -98,7 +98,7 @@ fn main() {\n   log(debug, 1u16 as uint);\n   log(debug, 1u16 as float);\n   log(debug, 1u16 as bool);\n-  log(debug, 1u16 as os::libc::FILE);\n+  log(debug, 1u16 as os::FILE);\n   log(debug, 1u16 as i8);\n   log(debug, 1u16 as i16);\n   log(debug, 1u16 as i32);\n@@ -114,7 +114,7 @@ fn main() {\n   log(debug, 1i32 as uint);\n   log(debug, 1i32 as float);\n   log(debug, 1i32 as bool);\n-  log(debug, 1i32 as os::libc::FILE);\n+  log(debug, 1i32 as os::FILE);\n   log(debug, 1i32 as i8);\n   log(debug, 1i32 as i16);\n   log(debug, 1i32 as i32);\n@@ -130,7 +130,7 @@ fn main() {\n   log(debug, 1u32 as uint);\n   log(debug, 1u32 as float);\n   log(debug, 1u32 as bool);\n-  log(debug, 1u32 as os::libc::FILE);\n+  log(debug, 1u32 as os::FILE);\n   log(debug, 1u32 as i8);\n   log(debug, 1u32 as i16);\n   log(debug, 1u32 as i32);\n@@ -146,7 +146,7 @@ fn main() {\n   log(debug, 1i64 as uint);\n   log(debug, 1i64 as float);\n   log(debug, 1i64 as bool);\n-  log(debug, 1i64 as os::libc::FILE);\n+  log(debug, 1i64 as os::FILE);\n   log(debug, 1i64 as i8);\n   log(debug, 1i64 as i16);\n   log(debug, 1i64 as i32);\n@@ -162,7 +162,7 @@ fn main() {\n   log(debug, 1u64 as uint);\n   log(debug, 1u64 as float);\n   log(debug, 1u64 as bool);\n-  log(debug, 1u64 as os::libc::FILE);\n+  log(debug, 1u64 as os::FILE);\n   log(debug, 1u64 as i8);\n   log(debug, 1u64 as i16);\n   log(debug, 1u64 as i32);\n@@ -178,7 +178,7 @@ fn main() {\n   log(debug, 1u64 as uint);\n   log(debug, 1u64 as float);\n   log(debug, 1u64 as bool);\n-  log(debug, 1u64 as os::libc::FILE);\n+  log(debug, 1u64 as os::FILE);\n   log(debug, 1u64 as i8);\n   log(debug, 1u64 as i16);\n   log(debug, 1u64 as i32);\n@@ -194,7 +194,7 @@ fn main() {\n   log(debug, true as uint);\n   log(debug, true as float);\n   log(debug, true as bool);\n-  log(debug, true as os::libc::FILE);\n+  log(debug, true as os::FILE);\n   log(debug, true as i8);\n   log(debug, true as i16);\n   log(debug, true as i32);"}]}