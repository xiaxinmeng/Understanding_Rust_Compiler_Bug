{"sha": "10cd1662c145a52ca6fe5d5e86ee117652598bc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwY2QxNjYyYzE0NWE1MmNhNmZlNWQ1ZTg2ZWUxMTc2NTI1OThiYzI=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-04T15:08:39Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-06T18:13:46Z"}, "message": "Update block_in_if_condition test files", "tree": {"sha": "65ca9736a6c908d4c831bb807d6a7dd2ad9e1665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65ca9736a6c908d4c831bb807d6a7dd2ad9e1665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10cd1662c145a52ca6fe5d5e86ee117652598bc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl48V1oACgkQaTCGhp1Q\nZjdLwg/9HoMF9EtpXyrY2DmPJsKpnhBCLCdp95sgt6lWhxaWGtBZtO1fbTHuJRj4\n6KvCh9uOl3DEQzQtLHXYaHiilcHTRbxp442r2eZeGLQqUGKzaSQ91YdoUiH5A5KB\nqtX7jFUd+ysY8mvJEERa+1qmTOcK3K0/SCd5wpv4la19y99HDMh5OrmGlLC0cHKv\nS62YwtXJYBcD3+ip1J3KqmStP/S0RdItlMFQb52DQ8+JdXhOnKrbYt4tUjaFsNRj\notAXoKD6eJT7Q1PiLv1/EBdM54RP6ZOzi3Yk6mfqpbD3ZG2DFdZ7CETvxd4Iw979\nB3Cee+F/yjYs0CclP7kYmREbj+mdJQPOcXK5Z0VMSHtXJNCSfNcHSDpayBA7IT3W\njPZofaDJwQ/iOlCBgwYKqJgxwgLX3pQQqnJzY96iuWmn8SC3AhjB8eik+wEQA1G7\nIRowQpmTbDZfb+kFwz1i94ErB6Fpgzog47UubU0NoL+L/ZkFTV2xfPoBdN6tnKMK\nci5wmL42AuuuTVAJVvR6Q+QxmMsgfutFsdbf2FPz8puiCBhb8UWK37sAGCk9jX8E\nevNDY8scD4DkGUOtNt7e6T+uQ2Tk+7VHKhuPfgrZs6ckU4l/rgZsw/pKMSypo0id\nEarOmdkFU2X1WunsJYZvJYPVIHFzs+mXCXIogjbGdbWU/sIJI0c=\n=Tjyr\n-----END PGP SIGNATURE-----", "payload": "tree 65ca9736a6c908d4c831bb807d6a7dd2ad9e1665\nparent 19f08c200e25ac7c9029594476a382b2bf82e00a\nauthor flip1995 <hello@philkrones.com> 1580828919 +0100\ncommitter flip1995 <hello@philkrones.com> 1581012826 +0100\n\nUpdate block_in_if_condition test files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10cd1662c145a52ca6fe5d5e86ee117652598bc2", "html_url": "https://github.com/rust-lang/rust/commit/10cd1662c145a52ca6fe5d5e86ee117652598bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10cd1662c145a52ca6fe5d5e86ee117652598bc2/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f08c200e25ac7c9029594476a382b2bf82e00a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f08c200e25ac7c9029594476a382b2bf82e00a", "html_url": "https://github.com/rust-lang/rust/commit/19f08c200e25ac7c9029594476a382b2bf82e00a"}], "stats": {"total": 247, "additions": 163, "deletions": 84}, "files": [{"sha": "955801e40f9b7659d15336a93ecfeb27d71f2545", "filename": "tests/ui/block_in_if_condition.fixed", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.fixed?ref=10cd1662c145a52ca6fe5d5e86ee117652598bc2", "patch": "@@ -0,0 +1,75 @@\n+// run-rustfix\n+#![warn(clippy::block_in_if_condition_expr)]\n+#![warn(clippy::block_in_if_condition_stmt)]\n+#![allow(unused, clippy::let_and_return)]\n+#![warn(clippy::nonminimal_bool)]\n+\n+macro_rules! blocky {\n+    () => {{\n+        true\n+    }};\n+}\n+\n+macro_rules! blocky_too {\n+    () => {{\n+        let r = true;\n+        r\n+    }};\n+}\n+\n+fn macro_if() {\n+    if blocky!() {}\n+\n+    if blocky_too!() {}\n+}\n+\n+fn condition_has_block() -> i32 {\n+    let res = {\n+        let x = 3;\n+        x == 3\n+    }; if res {\n+        6\n+    } else {\n+        10\n+    }\n+}\n+\n+fn condition_has_block_with_single_expression() -> i32 {\n+    if true {\n+        6\n+    } else {\n+        10\n+    }\n+}\n+\n+fn condition_is_normal() -> i32 {\n+    let x = 3;\n+    if x == 3 {\n+        6\n+    } else {\n+        10\n+    }\n+}\n+\n+fn condition_is_unsafe_block() {\n+    let a: i32 = 1;\n+\n+    // this should not warn because the condition is an unsafe block\n+    if unsafe { 1u32 == std::mem::transmute(a) } {\n+        println!(\"1u32 == a\");\n+    }\n+}\n+\n+fn block_in_assert() {\n+    let opt = Some(42);\n+    assert!(opt\n+        .as_ref()\n+        .and_then(|val| {\n+            let mut v = val * 2;\n+            v -= 1;\n+            Some(v * 3)\n+        })\n+        .is_some());\n+}\n+\n+fn main() {}"}, {"sha": "a6ea01d5fc5f901a7e49e593dab65c514c6e7c7e", "filename": "tests/ui/block_in_if_condition.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=10cd1662c145a52ca6fe5d5e86ee117652598bc2", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::block_in_if_condition_expr)]\n #![warn(clippy::block_in_if_condition_stmt)]\n #![allow(unused, clippy::let_and_return)]\n@@ -41,37 +42,6 @@ fn condition_has_block_with_single_expression() -> i32 {\n     }\n }\n \n-fn predicate<F: FnOnce(T) -> bool, T>(pfn: F, val: T) -> bool {\n-    pfn(val)\n-}\n-\n-fn pred_test() {\n-    let v = 3;\n-    let sky = \"blue\";\n-    // This is a sneaky case, where the block isn't directly in the condition,\n-    // but is actually nside a closure that the condition is using.\n-    // The same principle applies -- add some extra expressions to make sure\n-    // linter isn't confused by them.\n-    if v == 3\n-        && sky == \"blue\"\n-        && predicate(\n-            |x| {\n-                let target = 3;\n-                x == target\n-            },\n-            v,\n-        )\n-    {}\n-\n-    if predicate(\n-        |x| {\n-            let target = 3;\n-            x == target\n-        },\n-        v,\n-    ) {}\n-}\n-\n fn condition_is_normal() -> i32 {\n     let x = 3;\n     if true && x == 3 {\n@@ -81,10 +51,6 @@ fn condition_is_normal() -> i32 {\n     }\n }\n \n-fn closure_without_block() {\n-    if predicate(|x| x == 3, 6) {}\n-}\n-\n fn condition_is_unsafe_block() {\n     let a: i32 = 1;\n \n@@ -94,16 +60,6 @@ fn condition_is_unsafe_block() {\n     }\n }\n \n-fn main() {}\n-\n-fn macro_in_closure() {\n-    let option = Some(true);\n-\n-    if option.unwrap_or_else(|| unimplemented!()) {\n-        unimplemented!()\n-    }\n-}\n-\n fn block_in_assert() {\n     let opt = Some(42);\n     assert!(opt\n@@ -115,3 +71,5 @@ fn block_in_assert() {\n         })\n         .is_some());\n }\n+\n+fn main() {}"}, {"sha": "b0a0a276c89088eb6061c4603989a0463a07ed43", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=10cd1662c145a52ca6fe5d5e86ee117652598bc2", "patch": "@@ -1,62 +1,36 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition.rs:26:8\n+  --> $DIR/block_in_if_condition.rs:27:5\n    |\n-LL |       if {\n-   |  ________^\n+LL | /     if {\n LL | |         let x = 3;\n LL | |         x == 3\n LL | |     } {\n    | |_____^\n    |\n    = note: `-D clippy::block-in-if-condition-stmt` implied by `-D warnings`\n-   = help: try\n-           let res = {\n-               let x = 3;\n-               x == 3\n-           };\n-           if res {\n-               6\n-           } ... \n+help: try\n+   |\n+LL |     let res = {\n+LL |         let x = 3;\n+LL |         x == 3\n+LL |     }; if res {\n+   |\n \n error: omit braces around single expression condition\n-  --> $DIR/block_in_if_condition.rs:37:8\n+  --> $DIR/block_in_if_condition.rs:38:8\n    |\n LL |     if { true } {\n-   |        ^^^^^^^^\n+   |        ^^^^^^^^ help: try: `true`\n    |\n    = note: `-D clippy::block-in-if-condition-expr` implied by `-D warnings`\n-   = help: try\n-           if true {\n-               6\n-           } ... \n-\n-error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition.rs:58:17\n-   |\n-LL |               |x| {\n-   |  _________________^\n-LL | |                 let target = 3;\n-LL | |                 x == target\n-LL | |             },\n-   | |_____________^\n-\n-error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition.rs:67:13\n-   |\n-LL |           |x| {\n-   |  _____________^\n-LL | |             let target = 3;\n-LL | |             x == target\n-LL | |         },\n-   | |_________^\n \n error: this boolean expression can be simplified\n-  --> $DIR/block_in_if_condition.rs:77:8\n+  --> $DIR/block_in_if_condition.rs:47:8\n    |\n LL |     if true && x == 3 {\n    |        ^^^^^^^^^^^^^^ help: try: `x == 3`\n    |\n    = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "bac3eda5e7f37b505a3c1f44465484ed14a5f7e1", "filename": "tests/ui/block_in_if_condition_closure.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition_closure.rs?ref=10cd1662c145a52ca6fe5d5e86ee117652598bc2", "patch": "@@ -0,0 +1,48 @@\n+#![warn(clippy::block_in_if_condition_expr)]\n+#![warn(clippy::block_in_if_condition_stmt)]\n+#![allow(unused, clippy::let_and_return)]\n+\n+fn predicate<F: FnOnce(T) -> bool, T>(pfn: F, val: T) -> bool {\n+    pfn(val)\n+}\n+\n+fn pred_test() {\n+    let v = 3;\n+    let sky = \"blue\";\n+    // This is a sneaky case, where the block isn't directly in the condition,\n+    // but is actually nside a closure that the condition is using.\n+    // The same principle applies -- add some extra expressions to make sure\n+    // linter isn't confused by them.\n+    if v == 3\n+        && sky == \"blue\"\n+        && predicate(\n+            |x| {\n+                let target = 3;\n+                x == target\n+            },\n+            v,\n+        )\n+    {}\n+\n+    if predicate(\n+        |x| {\n+            let target = 3;\n+            x == target\n+        },\n+        v,\n+    ) {}\n+}\n+\n+fn closure_without_block() {\n+    if predicate(|x| x == 3, 6) {}\n+}\n+\n+fn macro_in_closure() {\n+    let option = Some(true);\n+\n+    if option.unwrap_or_else(|| unimplemented!()) {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "86cd24fe76321b0813813f0eb34b9765b5d9d126", "filename": "tests/ui/block_in_if_condition_closure.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10cd1662c145a52ca6fe5d5e86ee117652598bc2/tests%2Fui%2Fblock_in_if_condition_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition_closure.stderr?ref=10cd1662c145a52ca6fe5d5e86ee117652598bc2", "patch": "@@ -0,0 +1,24 @@\n+error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n+  --> $DIR/block_in_if_condition_closure.rs:19:17\n+   |\n+LL |               |x| {\n+   |  _________________^\n+LL | |                 let target = 3;\n+LL | |                 x == target\n+LL | |             },\n+   | |_____________^\n+   |\n+   = note: `-D clippy::block-in-if-condition-stmt` implied by `-D warnings`\n+\n+error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n+  --> $DIR/block_in_if_condition_closure.rs:28:13\n+   |\n+LL |           |x| {\n+   |  _____________^\n+LL | |             let target = 3;\n+LL | |             x == target\n+LL | |         },\n+   | |_________^\n+\n+error: aborting due to 2 previous errors\n+"}]}