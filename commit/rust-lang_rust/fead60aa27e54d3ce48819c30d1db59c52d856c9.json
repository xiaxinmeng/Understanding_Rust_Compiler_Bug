{"sha": "fead60aa27e54d3ce48819c30d1db59c52d856c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYWQ2MGFhMjdlNTRkM2NlNDg4MTljMzBkMWRiNTljNTJkODU2Yzk=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-08T13:34:59Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-09T11:45:05Z"}, "message": "Move FunctionSignature to display/function_signature", "tree": {"sha": "1a86291a11c88c5c4802377f4600da09febb7ce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a86291a11c88c5c4802377f4600da09febb7ce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fead60aa27e54d3ce48819c30d1db59c52d856c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fead60aa27e54d3ce48819c30d1db59c52d856c9", "html_url": "https://github.com/rust-lang/rust/commit/fead60aa27e54d3ce48819c30d1db59c52d856c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fead60aa27e54d3ce48819c30d1db59c52d856c9/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6ddfcddebf532e5fa0fe89c00a53e59a5d0704", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6ddfcddebf532e5fa0fe89c00a53e59a5d0704", "html_url": "https://github.com/rust-lang/rust/commit/bd6ddfcddebf532e5fa0fe89c00a53e59a5d0704"}], "stats": {"total": 204, "additions": 104, "deletions": 100}, "files": [{"sha": "f1717b008976e6ff152be50ace2df6d335a7e066", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 3, "deletions": 100, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/fead60aa27e54d3ce48819c30d1db59c52d856c9/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fead60aa27e54d3ce48819c30d1db59c52d856c9/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=fead60aa27e54d3ce48819c30d1db59c52d856c9", "patch": "@@ -1,18 +1,15 @@\n //! This module contains utilities for turning SyntaxNodes and HIR types\n //! into things that may be used to render in a UI.\n \n+mod function_signature;\n mod navigation_target;\n mod structure;\n \n-use super::*;\n-use std::fmt::{self, Display};\n-use join_to_string::join;\n-use ra_syntax::{ast::{self, AstNode, NameOwner, VisibilityOwner, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n-use std::convert::From;\n-use hir::Docs;\n+use ra_syntax::{ast::{self, AstNode, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n \n pub use navigation_target::NavigationTarget;\n pub use structure::{StructureNode, file_structure};\n+pub use function_signature::FunctionSignature;\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n     FunctionSignature::from(node).to_string()\n@@ -40,100 +37,6 @@ pub(crate) fn type_label(node: &ast::TypeAliasDef) -> String {\n     label.trim().to_owned()\n }\n \n-/// Contains information about a function signature\n-#[derive(Debug)]\n-pub struct FunctionSignature {\n-    /// Optional visibility\n-    pub visibility: Option<String>,\n-    /// Name of the function\n-    pub name: Option<String>,\n-    /// Documentation for the function\n-    pub doc: Option<Documentation>,\n-    /// Generic parameters\n-    pub generic_parameters: Vec<String>,\n-    /// Parameters of the function\n-    pub parameters: Vec<String>,\n-    /// Optional return type\n-    pub ret_type: Option<String>,\n-    /// Where predicates\n-    pub where_predicates: Vec<String>,\n-}\n-\n-impl FunctionSignature {\n-    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n-        self.doc = doc;\n-        self\n-    }\n-\n-    pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n-        let doc = function.docs(db);\n-        let (_, ast_node) = function.source(db);\n-        FunctionSignature::from(&*ast_node).with_doc_opt(doc)\n-    }\n-}\n-\n-impl From<&'_ ast::FnDef> for FunctionSignature {\n-    fn from(node: &ast::FnDef) -> FunctionSignature {\n-        fn param_list(node: &ast::FnDef) -> Vec<String> {\n-            let mut res = vec![];\n-            if let Some(param_list) = node.param_list() {\n-                if let Some(self_param) = param_list.self_param() {\n-                    res.push(self_param.syntax().text().to_string())\n-                }\n-\n-                res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n-            }\n-            res\n-        }\n-\n-        FunctionSignature {\n-            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n-            name: node.name().map(|n| n.text().to_string()),\n-            ret_type: node\n-                .ret_type()\n-                .and_then(|r| r.type_ref())\n-                .map(|n| n.syntax().text().to_string()),\n-            parameters: param_list(node),\n-            generic_parameters: generic_parameters(node),\n-            where_predicates: where_predicates(node),\n-            // docs are processed separately\n-            doc: None,\n-        }\n-    }\n-}\n-\n-impl Display for FunctionSignature {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        if let Some(t) = &self.visibility {\n-            write!(f, \"{} \", t)?;\n-        }\n-\n-        if let Some(name) = &self.name {\n-            write!(f, \"fn {}\", name)?;\n-        }\n-\n-        if !self.generic_parameters.is_empty() {\n-            join(self.generic_parameters.iter())\n-                .separator(\", \")\n-                .surround_with(\"<\", \">\")\n-                .to_fmt(f)?;\n-        }\n-\n-        join(self.parameters.iter()).separator(\", \").surround_with(\"(\", \")\").to_fmt(f)?;\n-\n-        if let Some(t) = &self.ret_type {\n-            write!(f, \" -> {}\", t)?;\n-        }\n-\n-        if !self.where_predicates.is_empty() {\n-            write!(f, \"\\nwhere \")?;\n-            join(self.where_predicates.iter()).separator(\",\\n      \").to_fmt(f)?;\n-        }\n-\n-        Ok(())\n-    }\n-}\n-\n pub(crate) fn generic_parameters<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n     let mut res = vec![];\n     if let Some(type_params) = node.type_param_list() {"}, {"sha": "d09950bce02ff5110ba2e5f4f4161ea6152d3b97", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/fead60aa27e54d3ce48819c30d1db59c52d856c9/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fead60aa27e54d3ce48819c30d1db59c52d856c9/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=fead60aa27e54d3ce48819c30d1db59c52d856c9", "patch": "@@ -0,0 +1,101 @@\n+use super::{where_predicates, generic_parameters};\n+use crate::db;\n+use std::fmt::{self, Display};\n+use join_to_string::join;\n+use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n+use std::convert::From;\n+use hir::{Docs, Documentation};\n+\n+/// Contains information about a function signature\n+#[derive(Debug)]\n+pub struct FunctionSignature {\n+    /// Optional visibility\n+    pub visibility: Option<String>,\n+    /// Name of the function\n+    pub name: Option<String>,\n+    /// Documentation for the function\n+    pub doc: Option<Documentation>,\n+    /// Generic parameters\n+    pub generic_parameters: Vec<String>,\n+    /// Parameters of the function\n+    pub parameters: Vec<String>,\n+    /// Optional return type\n+    pub ret_type: Option<String>,\n+    /// Where predicates\n+    pub where_predicates: Vec<String>,\n+}\n+\n+impl FunctionSignature {\n+    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n+        self.doc = doc;\n+        self\n+    }\n+\n+    pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n+        let doc = function.docs(db);\n+        let (_, ast_node) = function.source(db);\n+        FunctionSignature::from(&*ast_node).with_doc_opt(doc)\n+    }\n+}\n+\n+impl From<&'_ ast::FnDef> for FunctionSignature {\n+    fn from(node: &ast::FnDef) -> FunctionSignature {\n+        fn param_list(node: &ast::FnDef) -> Vec<String> {\n+            let mut res = vec![];\n+            if let Some(param_list) = node.param_list() {\n+                if let Some(self_param) = param_list.self_param() {\n+                    res.push(self_param.syntax().text().to_string())\n+                }\n+\n+                res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n+            }\n+            res\n+        }\n+\n+        FunctionSignature {\n+            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+            name: node.name().map(|n| n.text().to_string()),\n+            ret_type: node\n+                .ret_type()\n+                .and_then(|r| r.type_ref())\n+                .map(|n| n.syntax().text().to_string()),\n+            parameters: param_list(node),\n+            generic_parameters: generic_parameters(node),\n+            where_predicates: where_predicates(node),\n+            // docs are processed separately\n+            doc: None,\n+        }\n+    }\n+}\n+\n+impl Display for FunctionSignature {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if let Some(t) = &self.visibility {\n+            write!(f, \"{} \", t)?;\n+        }\n+\n+        if let Some(name) = &self.name {\n+            write!(f, \"fn {}\", name)?;\n+        }\n+\n+        if !self.generic_parameters.is_empty() {\n+            join(self.generic_parameters.iter())\n+                .separator(\", \")\n+                .surround_with(\"<\", \">\")\n+                .to_fmt(f)?;\n+        }\n+\n+        join(self.parameters.iter()).separator(\", \").surround_with(\"(\", \")\").to_fmt(f)?;\n+\n+        if let Some(t) = &self.ret_type {\n+            write!(f, \" -> {}\", t)?;\n+        }\n+\n+        if !self.where_predicates.is_empty() {\n+            write!(f, \"\\nwhere \")?;\n+            join(self.where_predicates.iter()).separator(\",\\n      \").to_fmt(f)?;\n+        }\n+\n+        Ok(())\n+    }\n+}"}]}