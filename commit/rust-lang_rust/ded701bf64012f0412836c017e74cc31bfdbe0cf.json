{"sha": "ded701bf64012f0412836c017e74cc31bfdbe0cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZDcwMWJmNjQwMTJmMDQxMjgzNmMwMTdlNzRjYzMxYmZkYmUwY2Y=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-03-15T08:09:29Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-04-05T02:13:30Z"}, "message": "Centralize nightly compiler flags handling", "tree": {"sha": "1a2c2d72b828dac5defec13811d54bb70d6f696b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a2c2d72b828dac5defec13811d54bb70d6f696b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded701bf64012f0412836c017e74cc31bfdbe0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded701bf64012f0412836c017e74cc31bfdbe0cf", "html_url": "https://github.com/rust-lang/rust/commit/ded701bf64012f0412836c017e74cc31bfdbe0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded701bf64012f0412836c017e74cc31bfdbe0cf/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34ae3f7ed353ccfa0e26a5e2227fca60d008a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34ae3f7ed353ccfa0e26a5e2227fca60d008a63", "html_url": "https://github.com/rust-lang/rust/commit/f34ae3f7ed353ccfa0e26a5e2227fca60d008a63"}], "stats": {"total": 311, "additions": 154, "deletions": 157}, "files": [{"sha": "500cc24db211eff281b7a45b4bff2beef5241907", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 85, "deletions": 21, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ded701bf64012f0412836c017e74cc31bfdbe0cf", "patch": "@@ -785,12 +785,12 @@ impl RustcOptGroup {\n         self.stability == OptionStability::Stable\n     }\n \n-    fn stable(g: getopts::OptGroup) -> RustcOptGroup {\n+    pub fn stable(g: getopts::OptGroup) -> RustcOptGroup {\n         RustcOptGroup { opt_group: g, stability: OptionStability::Stable }\n     }\n \n     #[allow(dead_code)] // currently we have no \"truly unstable\" options\n-    fn unstable(g: getopts::OptGroup) -> RustcOptGroup {\n+    pub fn unstable(g: getopts::OptGroup) -> RustcOptGroup {\n         RustcOptGroup { opt_group: g, stability: OptionStability::Unstable }\n     }\n \n@@ -926,33 +926,32 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n     let mut opts = rustc_short_optgroups();\n     opts.extend_from_slice(&[\n-        opt::multi_s(\"\", \"extern\", \"Specify where an external rust library is \\\n-                                located\",\n-                 \"NAME=PATH\"),\n+        opt::multi_s(\"\", \"extern\", \"Specify where an external rust library is located\",\n+                     \"NAME=PATH\"),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi_ubnr(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_ubnr(\"\", \"error-format\",\n                       \"How errors and other messages are produced\",\n                       \"human|json\"),\n         opt::opt_s(\"\", \"color\", \"Configure coloring of output:\n-            auto   = colorize, if output goes to a tty (default);\n-            always = always colorize output;\n-            never  = never colorize output\", \"auto|always|never\"),\n+                                 auto   = colorize, if output goes to a tty (default);\n+                                 always = always colorize output;\n+                                 never  = never colorize output\", \"auto|always|never\"),\n \n         opt::flagopt_ubnr(\"\", \"pretty\",\n-                   \"Pretty-print the input instead of compiling;\n-                   valid types are: `normal` (un-annotated source),\n-                   `expanded` (crates expanded), or\n-                   `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n-                 \"TYPE\"),\n+                          \"Pretty-print the input instead of compiling;\n+                           valid types are: `normal` (un-annotated source),\n+                           `expanded` (crates expanded), or\n+                           `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n+                          \"TYPE\"),\n         opt::flagopt_ubnr(\"\", \"unpretty\",\n-                     \"Present the input source, unstable (and less-pretty) variants;\n-                      valid types are any of the types for `--pretty`, as well as:\n-                      `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n-                      `everybody_loops` (all function bodies replaced with `loop {}`),\n-                      `hir` (the HIR), `hir,identified`, or\n-                      `hir,typed` (HIR with types for each node).\",\n-                     \"TYPE\"),\n+                          \"Present the input source, unstable (and less-pretty) variants;\n+                           valid types are any of the types for `--pretty`, as well as:\n+                           `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n+                           `everybody_loops` (all function bodies replaced with `loop {}`),\n+                           `hir` (the HIR), `hir,identified`, or\n+                           `hir,typed` (HIR with types for each node).\",\n+                          \"TYPE\"),\n \n         // new options here should **not** use the `_ubnr` functions, all new\n         // unstable options should use the short variants to indicate that they\n@@ -1263,7 +1262,6 @@ pub fn get_unstable_features_setting() -> UnstableFeatures {\n }\n \n pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> {\n-\n     let mut crate_types: Vec<CrateType> = Vec::new();\n     for unparsed_crate_type in &list_list {\n         for part in unparsed_crate_type.split(',') {\n@@ -1287,6 +1285,72 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n     return Ok(crate_types);\n }\n \n+pub mod nightly_options {\n+    use getopts;\n+    use syntax::feature_gate::UnstableFeatures;\n+    use super::{ErrorOutputType, OptionStability, RustcOptGroup, get_unstable_features_setting};\n+    use session::{early_error, early_warn};\n+\n+    pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n+        is_nightly_build() && matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\")\n+    }\n+\n+    fn is_nightly_build() -> bool {\n+        match get_unstable_features_setting() {\n+            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn check_nightly_options(matches: &getopts::Matches, flags: &[RustcOptGroup]) {\n+        let has_z_unstable_option = matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\");\n+        let really_allows_unstable_options = match get_unstable_features_setting() {\n+            UnstableFeatures::Disallow => false,\n+            _ => true,\n+        };\n+\n+        for opt in flags.iter() {\n+            if opt.stability == OptionStability::Stable {\n+                continue\n+            }\n+            let opt_name = if opt.opt_group.long_name.is_empty() {\n+                &opt.opt_group.short_name\n+            } else {\n+                &opt.opt_group.long_name\n+            };\n+            if !matches.opt_present(opt_name) {\n+                continue\n+            }\n+            if opt_name != \"Z\" && !has_z_unstable_option {\n+                early_error(ErrorOutputType::default(),\n+                            &format!(\"the `-Z unstable-options` flag must also be passed to enable \\\n+                                      the flag `{}`\",\n+                                     opt_name));\n+            }\n+            if really_allows_unstable_options {\n+                continue\n+            }\n+            match opt.stability {\n+                OptionStability::Unstable => {\n+                    let msg = format!(\"the option `{}` is only accepted on the \\\n+                                       nightly compiler\", opt_name);\n+                    early_error(ErrorOutputType::default(), &msg);\n+                }\n+                OptionStability::UnstableButNotReally => {\n+                    let msg = format!(\"the option `{}` is is unstable and should \\\n+                                       only be used on the nightly compiler, but \\\n+                                       it is currently accepted for backwards \\\n+                                       compatibility; this will soon change, \\\n+                                       see issue #31847 for more details\",\n+                                      opt_name);\n+                    early_warn(ErrorOutputType::default(), &msg);\n+                }\n+                OptionStability::Stable => {}\n+            }\n+        }\n+    }\n+}\n+\n impl fmt::Display for CrateType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "091e39b4b12332981c9c7e1cc40c8a1ba903bfde", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ded701bf64012f0412836c017e74cc31bfdbe0cf", "patch": "@@ -68,7 +68,7 @@ use rustc_save_analysis as save;\n use rustc_trans::back::link;\n use rustc::session::{config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n-use rustc::session::config::{get_unstable_features_setting, OptionStability};\n+use rustc::session::config::{get_unstable_features_setting, nightly_options};\n use rustc::middle::cstore::CrateStore;\n use rustc::lint::Lint;\n use rustc::lint;\n@@ -89,7 +89,7 @@ use std::str;\n use std::sync::{Arc, Mutex};\n use std::thread;\n \n-use rustc::session::{early_error, early_warn};\n+use rustc::session::early_error;\n \n use syntax::ast;\n use syntax::parse::{self, PResult};\n@@ -910,64 +910,19 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     //   (unstable option being used on stable)\n     // * If we're a historically stable-but-should-be-unstable option then we\n     //   emit a warning that we're going to turn this into an error soon.\n-    let has_z_unstable_options = matches.opt_strs(\"Z\")\n-                                        .iter()\n-                                        .any(|x| *x == \"unstable-options\");\n-    let really_allows_unstable_options = match get_unstable_features_setting() {\n-        UnstableFeatures::Disallow => false,\n-        _ => true,\n-    };\n-    for opt in config::rustc_optgroups() {\n-        if opt.stability == OptionStability::Stable {\n-            continue\n-        }\n-        let opt_name = if opt.opt_group.long_name.is_empty() {\n-            &opt.opt_group.short_name\n-        } else {\n-            &opt.opt_group.long_name\n-        };\n-        if !matches.opt_present(opt_name) {\n-            continue\n-        }\n-        if opt_name != \"Z\" && !has_z_unstable_options {\n-            let msg = format!(\"the `-Z unstable-options` flag must also be \\\n-                               passed to enable the flag `{}`\", opt_name);\n-            early_error(ErrorOutputType::default(), &msg);\n-        }\n-        if really_allows_unstable_options {\n-            continue\n-        }\n-        match opt.stability {\n-            OptionStability::Unstable => {\n-                let msg = format!(\"the option `{}` is only accepted on the \\\n-                                   nightly compiler\", opt_name);\n-                early_error(ErrorOutputType::default(), &msg);\n-            }\n-            OptionStability::UnstableButNotReally => {\n-                let msg = format!(\"the option `{}` is is unstable and should \\\n-                                   only be used on the nightly compiler, but \\\n-                                   it is currently accepted for backwards \\\n-                                   compatibility; this will soon change, \\\n-                                   see issue #31847 for more details\",\n-                                  opt_name);\n-                early_warn(ErrorOutputType::default(), &msg);\n-            }\n-            OptionStability::Stable => {}\n-        }\n-    }\n+    nightly_options::check_nightly_options(&matches, &config::rustc_optgroups());\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         // Only show unstable options in --help if we *really* accept unstable\n         // options, which catches the case where we got `-Z unstable-options` on\n         // the stable channel of Rust which was accidentally allowed\n         // historically.\n         usage(matches.opt_present(\"verbose\"),\n-              has_z_unstable_options && really_allows_unstable_options);\n+              nightly_options::is_unstable_enabled(&matches));\n         return None;\n     }\n \n     // Don't handle -W help here, because we might first load plugins.\n-\n     let r = matches.opt_strs(\"Z\");\n     if r.iter().any(|x| *x == \"help\") {\n         describe_debug_flags();"}, {"sha": "f7e071a0515ee1b3a339dfd3a5339c638bd7b6b0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ded701bf64012f0412836c017e74cc31bfdbe0cf", "patch": "@@ -433,10 +433,6 @@ pub fn run(mut krate: clean::Crate,\n             krate: krate.name.clone(),\n             playground_url: \"\".to_string(),\n         },\n-        include_sources: true,\n-        local_sources: HashMap::new(),\n-        render_redirect_pages: false,\n-        issue_tracker_base_url: None,\n         css_file_extension: css_file_extension,\n     };\n "}, {"sha": "879509475966624e96485cd5fd14d60eeabd650a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 65, "deletions": 83, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded701bf64012f0412836c017e74cc31bfdbe0cf/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ded701bf64012f0412836c017e74cc31bfdbe0cf", "patch": "@@ -65,10 +65,8 @@ use std::sync::mpsc::channel;\n use externalfiles::ExternalHtml;\n use serialize::Decodable;\n use serialize::json::{self, Json};\n-use rustc::session::early_error;\n use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::{get_unstable_features_setting, ErrorOutputType};\n-use syntax::feature_gate::UnstableFeatures;\n+use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options};\n \n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n@@ -143,86 +141,87 @@ pub fn main() {\n     process::exit(res as i32);\n }\n \n-pub fn opts() -> Vec<getopts::OptGroup> {\n+fn stable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::stable(g) }\n+fn unstable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::unstable(g) }\n+\n+pub fn opts() -> Vec<RustcOptGroup> {\n     use getopts::*;\n     vec!(\n-        optflag(\"h\", \"help\", \"show this help message\"),\n-        optflag(\"V\", \"version\", \"print rustdoc's version\"),\n-        optflag(\"v\", \"verbose\", \"use verbose output\"),\n-        optopt(\"r\", \"input-format\", \"the input type of the specified file\",\n-               \"[rust|json]\"),\n-        optopt(\"w\", \"output-format\", \"the output type to write\",\n-               \"[html|json]\"),\n-        optopt(\"o\", \"output\", \"where to place the output\", \"PATH\"),\n-        optopt(\"\", \"crate-name\", \"specify the name of this crate\", \"NAME\"),\n-        optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n-                 \"DIR\"),\n-        optmulti(\"\", \"cfg\", \"pass a --cfg to rustc\", \"\"),\n-        optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME=PATH\"),\n-        optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\"),\n-        optmulti(\"\", \"passes\", \"list of passes to also run, you might want \\\n-                                to pass it multiple times; a value of `list` \\\n-                                will print available passes\",\n-                 \"PASSES\"),\n-        optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n-                 \"PLUGINS\"),\n-        optflag(\"\", \"no-defaults\", \"don't run the default passes\"),\n-        optflag(\"\", \"test\", \"run code examples as tests\"),\n-        optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\",\n-                 \"ARGS\"),\n-        optopt(\"\", \"target\", \"target triple to document\", \"TRIPLE\"),\n-        optmulti(\"\", \"markdown-css\", \"CSS files to include via <link> in a rendered Markdown file\",\n-                 \"FILES\"),\n-        optmulti(\"\", \"html-in-header\",\n-                 \"files to include inline in the <head> section of a rendered Markdown file \\\n-                 or generated documentation\",\n-                 \"FILES\"),\n-        optmulti(\"\", \"html-before-content\",\n-                 \"files to include inline between <body> and the content of a rendered \\\n-                 Markdown file or generated documentation\",\n-                 \"FILES\"),\n-        optmulti(\"\", \"html-after-content\",\n-                 \"files to include inline between the content and </body> of a rendered \\\n-                 Markdown file or generated documentation\",\n-                 \"FILES\"),\n-        optopt(\"\", \"markdown-playground-url\",\n-               \"URL to send code snippets to\", \"URL\"),\n-        optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\"),\n-        optopt(\"e\", \"extend-css\",\n-               \"to redefine some css rules with a given file to generate doc with your \\\n-                own theme\", \"PATH\"),\n-        optmulti(\"Z\", \"\", \"internal and debugging options (only on nightly build)\", \"FLAG\"),\n+        stable(optflag(\"h\", \"help\", \"show this help message\")),\n+        stable(optflag(\"V\", \"version\", \"print rustdoc's version\")),\n+        stable(optflag(\"v\", \"verbose\", \"use verbose output\")),\n+        stable(optopt(\"r\", \"input-format\", \"the input type of the specified file\",\n+                      \"[rust|json]\")),\n+        stable(optopt(\"w\", \"output-format\", \"the output type to write\",\n+                      \"[html|json]\")),\n+        stable(optopt(\"o\", \"output\", \"where to place the output\", \"PATH\")),\n+        stable(optopt(\"\", \"crate-name\", \"specify the name of this crate\", \"NAME\")),\n+        stable(optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n+                        \"DIR\")),\n+        stable(optmulti(\"\", \"cfg\", \"pass a --cfg to rustc\", \"\")),\n+        stable(optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME=PATH\")),\n+        stable(optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\")),\n+        stable(optmulti(\"\", \"passes\",\n+                        \"list of passes to also run, you might want \\\n+                         to pass it multiple times; a value of `list` \\\n+                         will print available passes\",\n+                        \"PASSES\")),\n+        stable(optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n+                        \"PLUGINS\")),\n+        stable(optflag(\"\", \"no-defaults\", \"don't run the default passes\")),\n+        stable(optflag(\"\", \"test\", \"run code examples as tests\")),\n+        stable(optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\",\n+                        \"ARGS\")),\n+        stable(optopt(\"\", \"target\", \"target triple to document\", \"TRIPLE\")),\n+        stable(optmulti(\"\", \"markdown-css\",\n+                        \"CSS files to include via <link> in a rendered Markdown file\",\n+                        \"FILES\")),\n+        stable(optmulti(\"\", \"html-in-header\",\n+                        \"files to include inline in the <head> section of a rendered Markdown file \\\n+                         or generated documentation\",\n+                        \"FILES\")),\n+        stable(optmulti(\"\", \"html-before-content\",\n+                        \"files to include inline between <body> and the content of a rendered \\\n+                         Markdown file or generated documentation\",\n+                        \"FILES\")),\n+        stable(optmulti(\"\", \"html-after-content\",\n+                        \"files to include inline between the content and </body> of a rendered \\\n+                         Markdown file or generated documentation\",\n+                        \"FILES\")),\n+        stable(optopt(\"\", \"markdown-playground-url\",\n+                      \"URL to send code snippets to\", \"URL\")),\n+        stable(optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\")),\n+        unstable(optopt(\"e\", \"extend-css\",\n+                        \"to redefine some css rules with a given file to generate doc with your \\\n+                         own theme\", \"PATH\")),\n+        unstable(optmulti(\"Z\", \"\",\n+                          \"internal and debugging options (only on nightly build)\", \"FLAG\")),\n     )\n }\n \n pub fn usage(argv0: &str) {\n     println!(\"{}\",\n              getopts::usage(&format!(\"{} [options] <input>\", argv0),\n-                            &opts()));\n-}\n-\n-fn check_unstable_flag_enabled(nightly_build: bool, has_z_unstable_options: bool,\n-                               flag_name: &str) {\n-    // check if unstable for --extend-css option\n-    let e = if !nightly_build {\n-        format!(\"the option `{}` is only accepted on the nightly compiler\", flag_name)\n-    } else if !has_z_unstable_options {\n-        format!(\"the `-Z unstable-options` flag must also be passed to enable the flag `{}`\",\n-                flag_name)\n-    } else {\n-        return\n-    };\n-    early_error(ErrorOutputType::default(), &e)\n+                            &opts().into_iter()\n+                                   .map(|x| x.opt_group)\n+                                   .collect::<Vec<getopts::OptGroup>>()));\n }\n \n pub fn main_args(args: &[String]) -> isize {\n-    let matches = match getopts::getopts(&args[1..], &opts()) {\n+    let all_groups: Vec<getopts::OptGroup> = opts()\n+                                             .into_iter()\n+                                             .map(|x| x.opt_group)\n+                                             .collect();\n+    let matches = match getopts::getopts(&args[1..], &all_groups) {\n         Ok(m) => m,\n         Err(err) => {\n             println!(\"{}\", err);\n             return 1;\n         }\n     };\n+    // Check for unstable options.\n+    nightly_options::check_nightly_options(&matches, &opts());\n+\n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         usage(&args[0]);\n         return 0;\n@@ -277,24 +276,7 @@ pub fn main_args(args: &[String]) -> isize {\n     let css_file_extension = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n     let cfgs = matches.opt_strs(\"cfg\");\n \n-    // we now check if unstable options are allowed and if we're in a nightly build\n-    let mut has_z_unstable_options = false;\n-    for flag in matches.opt_strs(\"Z\").iter() {\n-        if *flag != \"unstable-options\" {\n-            println!(\"Unknown flag for `Z` option: {}\", flag);\n-            return 1;\n-        } else {\n-            has_z_unstable_options = true;\n-        }\n-    }\n-    let nightly_build = get_unstable_features_setting();\n-    let nightly_build = match nightly_build {\n-                            UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n-                            _ => false,\n-                        };\n-\n     if let Some(ref p) = css_file_extension {\n-        check_unstable_flag_enabled(nightly_build, has_z_unstable_options, \"extend-css\");\n         if !p.is_file() {\n             println!(\"{}\", \"--extend-css option must take a css file as input\");\n             return 1;"}]}