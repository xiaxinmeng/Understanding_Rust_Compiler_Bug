{"sha": "54790242509ecdbc0c5f689e9d4fa1a5128508f5", "node_id": "C_kwDOAAsO6NoAKDU0NzkwMjQyNTA5ZWNkYmMwYzVmNjg5ZTlkNGZhMWE1MTI4NTA4ZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T17:19:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T17:19:58Z"}, "message": "Auto merge of #8266 - camsteffen:test-tweaks, r=flip1995\n\nSome test code cleanup\n\nchangelog: none\n\nMainly moves /clippy_workspace_tests into /tests and combines the two dogfood tests which can't run concurrently.", "tree": {"sha": "05d420fa97c4ecafc65ff0df8743d4c33ad3cb66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d420fa97c4ecafc65ff0df8743d4c33ad3cb66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54790242509ecdbc0c5f689e9d4fa1a5128508f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54790242509ecdbc0c5f689e9d4fa1a5128508f5", "html_url": "https://github.com/rust-lang/rust/commit/54790242509ecdbc0c5f689e9d4fa1a5128508f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54790242509ecdbc0c5f689e9d4fa1a5128508f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133b3668bbdf558afb9315ce99c715452815c5c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/133b3668bbdf558afb9315ce99c715452815c5c4", "html_url": "https://github.com/rust-lang/rust/commit/133b3668bbdf558afb9315ce99c715452815c5c4"}, {"sha": "90bf72c2cd358eb0770164412d2428cfa0d708e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/90bf72c2cd358eb0770164412d2428cfa0d708e1", "html_url": "https://github.com/rust-lang/rust/commit/90bf72c2cd358eb0770164412d2428cfa0d708e1"}], "stats": {"total": 336, "additions": 141, "deletions": 195}, "files": [{"sha": "116ae031bb719d7b8a6b62223308a01289c09e1a", "filename": ".github/workflows/clippy.yml", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -70,14 +70,6 @@ jobs:\n       run: cargo test --features deny-warnings\n       working-directory: clippy_dev\n \n-    - name: Test cargo-clippy\n-      run: ../target/debug/cargo-clippy\n-      working-directory: clippy_workspace_tests\n-\n-    - name: Test cargo-clippy --fix\n-      run: ../target/debug/cargo-clippy clippy --fix\n-      working-directory: clippy_workspace_tests\n-\n     - name: Test clippy-driver\n       run: bash .github/driver.sh\n       env:"}, {"sha": "989667037c1cb4e23a0dcb0e2802023258510e4f", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -115,8 +115,13 @@ jobs:\n       run: cargo build --features deny-warnings,internal\n \n     - name: Test\n+      if: runner.os == 'Linux'\n       run: cargo test --features deny-warnings,internal\n \n+    - name: Test\n+      if: runner.os != 'Linux'\n+      run: cargo test --features deny-warnings,internal -- --skip dogfood\n+\n     - name: Test clippy_lints\n       run: cargo test --features deny-warnings,internal\n       working-directory: clippy_lints\n@@ -133,14 +138,6 @@ jobs:\n       run: cargo test --features deny-warnings\n       working-directory: clippy_dev\n \n-    - name: Test cargo-clippy\n-      run: ../target/debug/cargo-clippy\n-      working-directory: clippy_workspace_tests\n-\n-    - name: Test cargo-clippy --fix\n-      run: ../target/debug/cargo-clippy clippy --fix\n-      working-directory: clippy_workspace_tests\n-\n     - name: Test clippy-driver\n       run: bash .github/driver.sh\n       env:"}, {"sha": "3e50c45a9b63ec8922446ef907cb10e220a33772", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -19,7 +19,6 @@ out\n /target\n /clippy_lints/target\n /clippy_utils/target\n-/clippy_workspace_tests/target\n /clippy_dev/target\n /lintcheck/target\n /rustc_tools_util/target"}, {"sha": "288c56e9fd737bd386c6afe35fbaea7d1746018c", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -117,6 +117,7 @@ pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWri\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n+#[cfg_attr(not(unix), allow(clippy::invalid_paths))]\n pub const PERMISSIONS_FROM_MODE: [&str; 6] = [\"std\", \"os\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];"}, {"sha": "4dbe71e4b6ad6ae032be2c43649c6deba8aecf37", "filename": "tests/cargo/mod.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/133b3668bbdf558afb9315ce99c715452815c5c4/tests%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133b3668bbdf558afb9315ce99c715452815c5c4/tests%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo%2Fmod.rs?ref=133b3668bbdf558afb9315ce99c715452815c5c4", "patch": "@@ -1,4 +0,0 @@\n-#[must_use]\n-pub fn is_rustc_test_suite() -> bool {\n-    option_env!(\"RUSTC_TEST_SUITE\").is_some()\n-}"}, {"sha": "531890c863f5efeda3642e73a67029ea1e879f63", "filename": "tests/compile-test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -1,4 +1,5 @@\n #![feature(test)] // compiletest_rs requires this attribute\n+#![feature(once_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n@@ -11,8 +12,9 @@ use std::ffi::{OsStr, OsString};\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n+use test_utils::IS_RUSTC_TEST_SUITE;\n \n-mod cargo;\n+mod test_utils;\n \n // whether to run internal tests or not\n const RUN_INTERNAL_TESTS: bool = cfg!(feature = \"internal\");\n@@ -304,7 +306,7 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n         Ok(result)\n     }\n \n-    if cargo::is_rustc_test_suite() {\n+    if IS_RUSTC_TEST_SUITE {\n         return;\n     }\n "}, {"sha": "67af9d05bf402473a3cc6d34080872e15c30ec61", "filename": "tests/dogfood.rs", "status": "modified", "additions": 10, "deletions": 163, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -3,179 +3,26 @@\n //!\n //! See [Eating your own dog food](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) for context\n \n-// Dogfood cannot run on Windows\n-#![cfg(not(windows))]\n #![feature(once_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use std::lazy::SyncLazy;\n use std::path::PathBuf;\n use std::process::Command;\n+use test_utils::IS_RUSTC_TEST_SUITE;\n \n-mod cargo;\n-\n-static CLIPPY_PATH: SyncLazy<PathBuf> = SyncLazy::new(|| {\n-    let mut path = std::env::current_exe().unwrap();\n-    assert!(path.pop()); // deps\n-    path.set_file_name(\"cargo-clippy\");\n-    path\n-});\n+mod test_utils;\n \n #[test]\n fn dogfood_clippy() {\n-    // run clippy on itself and fail the test if lint warnings are reported\n-    if cargo::is_rustc_test_suite() {\n-        return;\n-    }\n-    let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-\n-    let mut command = Command::new(&*CLIPPY_PATH);\n-    command\n-        .current_dir(root_dir)\n-        .env(\"CARGO_INCREMENTAL\", \"0\")\n-        .arg(\"clippy\")\n-        .arg(\"--all-targets\")\n-        .arg(\"--all-features\")\n-        .arg(\"--\")\n-        .args(&[\"-D\", \"clippy::all\"])\n-        .args(&[\"-D\", \"clippy::pedantic\"])\n-        .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n-\n-    // internal lints only exist if we build with the internal feature\n-    if cfg!(feature = \"internal\") {\n-        command.args(&[\"-D\", \"clippy::internal\"]);\n-    }\n-\n-    let output = command.output().unwrap();\n-\n-    println!(\"status: {}\", output.status);\n-    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n-\n-    assert!(output.status.success());\n-}\n-\n-fn test_no_deps_ignores_path_deps_in_workspaces() {\n-    if cargo::is_rustc_test_suite() {\n-        return;\n-    }\n-    let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-    let target_dir = root.join(\"target\").join(\"dogfood\");\n-    let cwd = root.join(\"clippy_workspace_tests\");\n-\n-    // Make sure we start with a clean state\n-    Command::new(\"cargo\")\n-        .current_dir(&cwd)\n-        .env(\"CARGO_TARGET_DIR\", &target_dir)\n-        .arg(\"clean\")\n-        .args(&[\"-p\", \"subcrate\"])\n-        .args(&[\"-p\", \"path_dep\"])\n-        .output()\n-        .unwrap();\n-\n-    // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n-    // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n-    let output = Command::new(&*CLIPPY_PATH)\n-        .current_dir(&cwd)\n-        .env(\"CARGO_INCREMENTAL\", \"0\")\n-        .arg(\"clippy\")\n-        .args(&[\"-p\", \"subcrate\"])\n-        .arg(\"--no-deps\")\n-        .arg(\"--\")\n-        .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-        .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n-        .output()\n-        .unwrap();\n-    println!(\"status: {}\", output.status);\n-    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n-\n-    assert!(output.status.success());\n-\n-    let lint_path_dep = || {\n-        // Test that without the `--no-deps` argument, `path_dep` is linted.\n-        let output = Command::new(&*CLIPPY_PATH)\n-            .current_dir(&cwd)\n-            .env(\"CARGO_INCREMENTAL\", \"0\")\n-            .arg(\"clippy\")\n-            .args(&[\"-p\", \"subcrate\"])\n-            .arg(\"--\")\n-            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n-            .output()\n-            .unwrap();\n-        println!(\"status: {}\", output.status);\n-        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n-\n-        assert!(!output.status.success());\n-        assert!(\n-            String::from_utf8(output.stderr)\n-                .unwrap()\n-                .contains(\"error: empty `loop {}` wastes CPU cycles\")\n-        );\n-    };\n-\n-    // Make sure Cargo is aware of the removal of `--no-deps`.\n-    lint_path_dep();\n-\n-    let successful_build = || {\n-        let output = Command::new(&*CLIPPY_PATH)\n-            .current_dir(&cwd)\n-            .env(\"CARGO_INCREMENTAL\", \"0\")\n-            .arg(\"clippy\")\n-            .args(&[\"-p\", \"subcrate\"])\n-            .arg(\"--\")\n-            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .output()\n-            .unwrap();\n-        println!(\"status: {}\", output.status);\n-        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n-\n-        assert!(output.status.success());\n-\n-        output\n-    };\n-\n-    // Trigger a sucessful build, so Cargo would like to cache the build result.\n-    successful_build();\n-\n-    // Make sure there's no spurious rebuild when nothing changes.\n-    let stderr = String::from_utf8(successful_build().stderr).unwrap();\n-    assert!(!stderr.contains(\"Compiling\"));\n-    assert!(!stderr.contains(\"Checking\"));\n-    assert!(stderr.contains(\"Finished\"));\n-\n-    // Make sure Cargo is aware of the new `--cfg` flag.\n-    lint_path_dep();\n-}\n-\n-#[test]\n-fn dogfood_subprojects() {\n-    // run clippy on remaining subprojects and fail the test if lint warnings are reported\n-    if cargo::is_rustc_test_suite() {\n+    if IS_RUSTC_TEST_SUITE {\n         return;\n     }\n \n-    // NOTE: `path_dep` crate is omitted on purpose here\n-    for project in &[\n-        \"clippy_workspace_tests\",\n-        \"clippy_workspace_tests/src\",\n-        \"clippy_workspace_tests/subcrate\",\n-        \"clippy_workspace_tests/subcrate/src\",\n-        \"clippy_dev\",\n-        \"clippy_lints\",\n-        \"clippy_utils\",\n-        \"rustc_tools_util\",\n-    ] {\n-        run_clippy_for_project(project);\n+    // \"\" is the root package\n+    for package in &[\"\", \"clippy_dev\", \"clippy_lints\", \"clippy_utils\", \"rustc_tools_util\"] {\n+        run_clippy_for_package(package);\n     }\n-\n-    // NOTE: Since tests run in parallel we can't run cargo commands on the same workspace at the\n-    // same time, so we test this immediately after the dogfood for workspaces.\n-    test_no_deps_ignores_path_deps_in_workspaces();\n }\n \n #[test]\n@@ -191,7 +38,7 @@ fn run_metadata_collection_lint() {\n \n     // Run collection as is\n     std::env::set_var(\"ENABLE_METADATA_COLLECTION\", \"1\");\n-    run_clippy_for_project(\"clippy_lints\");\n+    run_clippy_for_package(\"clippy_lints\");\n \n     // Check if cargo caching got in the way\n     if let Ok(file) = File::open(metadata_output_path) {\n@@ -214,13 +61,13 @@ fn run_metadata_collection_lint() {\n     .unwrap();\n \n     // Running the collection again\n-    run_clippy_for_project(\"clippy_lints\");\n+    run_clippy_for_package(\"clippy_lints\");\n }\n \n-fn run_clippy_for_project(project: &str) {\n+fn run_clippy_for_package(project: &str) {\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n-    let mut command = Command::new(&*CLIPPY_PATH);\n+    let mut command = Command::new(&*test_utils::CARGO_CLIPPY_PATH);\n \n     command\n         .current_dir(root_dir.join(project))"}, {"sha": "0defd45b68b064745537b02321f5bb2b56c688aa", "filename": "tests/fmt.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffmt.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -10,14 +10,6 @@ fn fmt() {\n         return;\n     }\n \n-    // Skip this test if nightly rustfmt is unavailable\n-    let rustup_output = Command::new(\"rustup\").args(&[\"component\", \"list\"]).output().unwrap();\n-    assert!(rustup_output.status.success());\n-    let component_output = String::from_utf8_lossy(&rustup_output.stdout);\n-    if !component_output.contains(\"rustfmt\") {\n-        return;\n-    }\n-\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n     let output = Command::new(\"cargo\")\n         .current_dir(root_dir)"}, {"sha": "8a4de3f6def9094b9af6ca4ba0931834686f1c73", "filename": "tests/test_utils/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Ftest_utils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Ftest_utils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftest_utils%2Fmod.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -0,0 +1,13 @@\n+#![allow(dead_code)] // see https://github.com/rust-lang/rust/issues/46379\n+\n+use std::lazy::SyncLazy;\n+use std::path::PathBuf;\n+\n+pub static CARGO_CLIPPY_PATH: SyncLazy<PathBuf> = SyncLazy::new(|| {\n+    let mut path = std::env::current_exe().unwrap();\n+    assert!(path.pop()); // deps\n+    path.set_file_name(\"cargo-clippy\");\n+    path\n+});\n+\n+pub const IS_RUSTC_TEST_SUITE: bool = option_env!(\"RUSTC_TEST_SUITE\").is_some();"}, {"sha": "677b4a4d569994598398bb9dc0b1a13f54ab1b4b", "filename": "tests/workspace.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -0,0 +1,107 @@\n+#![feature(once_cell)]\n+\n+use std::path::PathBuf;\n+use std::process::Command;\n+use test_utils::{CARGO_CLIPPY_PATH, IS_RUSTC_TEST_SUITE};\n+\n+mod test_utils;\n+\n+#[test]\n+fn test_no_deps_ignores_path_deps_in_workspaces() {\n+    if IS_RUSTC_TEST_SUITE {\n+        return;\n+    }\n+    let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let target_dir = root.join(\"target\").join(\"workspace_test\");\n+    let cwd = root.join(\"tests/workspace_test\");\n+\n+    // Make sure we start with a clean state\n+    Command::new(\"cargo\")\n+        .current_dir(&cwd)\n+        .env(\"CARGO_TARGET_DIR\", &target_dir)\n+        .arg(\"clean\")\n+        .args(&[\"-p\", \"subcrate\"])\n+        .args(&[\"-p\", \"path_dep\"])\n+        .output()\n+        .unwrap();\n+\n+    // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n+    // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n+    let output = Command::new(&*CARGO_CLIPPY_PATH)\n+        .current_dir(&cwd)\n+        .env(\"CARGO_INCREMENTAL\", \"0\")\n+        .env(\"CARGO_TARGET_DIR\", &target_dir)\n+        .arg(\"clippy\")\n+        .args(&[\"-p\", \"subcrate\"])\n+        .arg(\"--no-deps\")\n+        .arg(\"--\")\n+        .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+        .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+        .output()\n+        .unwrap();\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+    assert!(output.status.success());\n+\n+    let lint_path_dep = || {\n+        // Test that without the `--no-deps` argument, `path_dep` is linted.\n+        let output = Command::new(&*CARGO_CLIPPY_PATH)\n+            .current_dir(&cwd)\n+            .env(\"CARGO_INCREMENTAL\", \"0\")\n+            .env(\"CARGO_TARGET_DIR\", &target_dir)\n+            .arg(\"clippy\")\n+            .args(&[\"-p\", \"subcrate\"])\n+            .arg(\"--\")\n+            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+            .output()\n+            .unwrap();\n+        println!(\"status: {}\", output.status);\n+        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+        assert!(!output.status.success());\n+        assert!(\n+            String::from_utf8(output.stderr)\n+                .unwrap()\n+                .contains(\"error: empty `loop {}` wastes CPU cycles\")\n+        );\n+    };\n+\n+    // Make sure Cargo is aware of the removal of `--no-deps`.\n+    lint_path_dep();\n+\n+    let successful_build = || {\n+        let output = Command::new(&*CARGO_CLIPPY_PATH)\n+            .current_dir(&cwd)\n+            .env(\"CARGO_INCREMENTAL\", \"0\")\n+            .env(\"CARGO_TARGET_DIR\", &target_dir)\n+            .arg(\"clippy\")\n+            .args(&[\"-p\", \"subcrate\"])\n+            .arg(\"--\")\n+            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+            .output()\n+            .unwrap();\n+        println!(\"status: {}\", output.status);\n+        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+        assert!(output.status.success());\n+\n+        output\n+    };\n+\n+    // Trigger a sucessful build, so Cargo would like to cache the build result.\n+    successful_build();\n+\n+    // Make sure there's no spurious rebuild when nothing changes.\n+    let stderr = String::from_utf8(successful_build().stderr).unwrap();\n+    assert!(!stderr.contains(\"Compiling\"));\n+    assert!(!stderr.contains(\"Checking\"));\n+    assert!(stderr.contains(\"Finished\"));\n+\n+    // Make sure Cargo is aware of the new `--cfg` flag.\n+    lint_path_dep();\n+}"}, {"sha": "bf5b4ca5288a4193f3934a02207c5813dee2b4b4", "filename": "tests/workspace_test/Cargo.toml", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace_test%2FCargo.toml?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"clippy_workspace_tests\"\n+name = \"workspace_test\"\n version = \"0.1.0\"\n edition = \"2018\"\n ", "previous_filename": "clippy_workspace_tests/Cargo.toml"}, {"sha": "3507168a3a96452abe013ab42094028e10d8db6a", "filename": "tests/workspace_test/build.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace_test%2Fbuild.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "previous_filename": "clippy_workspace_tests/build.rs"}, {"sha": "85a91cd2decd59ffdad366977375be13f2fe52a5", "filename": "tests/workspace_test/path_dep/Cargo.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fpath_dep%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fpath_dep%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace_test%2Fpath_dep%2FCargo.toml?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "previous_filename": "clippy_workspace_tests/path_dep/Cargo.toml"}, {"sha": "35ce524f2b10c367c0b3d71e4449f05458542261", "filename": "tests/workspace_test/path_dep/src/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fpath_dep%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fpath_dep%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace_test%2Fpath_dep%2Fsrc%2Flib.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "previous_filename": "clippy_workspace_tests/path_dep/src/lib.rs"}, {"sha": "b322eca1db51d2cf71da534d254f47be4213c6d1", "filename": "tests/workspace_test/src/main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace_test%2Fsrc%2Fmain.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "previous_filename": "clippy_workspace_tests/src/main.rs"}, {"sha": "45362c11b856e3615cfa77348c12b251d127526b", "filename": "tests/workspace_test/subcrate/Cargo.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fsubcrate%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fsubcrate%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace_test%2Fsubcrate%2FCargo.toml?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "previous_filename": "clippy_workspace_tests/subcrate/Cargo.toml"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "tests/workspace_test/subcrate/src/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fsubcrate%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54790242509ecdbc0c5f689e9d4fa1a5128508f5/tests%2Fworkspace_test%2Fsubcrate%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace_test%2Fsubcrate%2Fsrc%2Flib.rs?ref=54790242509ecdbc0c5f689e9d4fa1a5128508f5", "previous_filename": "clippy_workspace_tests/subcrate/src/lib.rs"}]}