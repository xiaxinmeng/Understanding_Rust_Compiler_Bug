{"sha": "78cf0b916a335a534a5fd4e44405b4ffffb3514c", "node_id": "C_kwDOAAsO6NoAKDc4Y2YwYjkxNmEzMzVhNTM0YTVmZDRlNDQ0MDViNGZmZmZiMzUxNGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-05T19:43:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-05T19:43:42Z"}, "message": "Rollup merge of #105180 - nbdd0121:async_track_caller, r=compiler-errors\n\nUse proper HirId for async track_caller attribute check\n\nFix #105134", "tree": {"sha": "935b60e0374bec95472e5e19cbca298c0839e8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935b60e0374bec95472e5e19cbca298c0839e8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78cf0b916a335a534a5fd4e44405b4ffffb3514c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjknuCRBK7hj4Ov3rIwAA1dsIAGvFgoeO1rH9jG3Xj1nJb7y6\nB0y0iNmA5s3eKSKvFY1AtDIIgzqjsfRERBz0vcZ8XUeNADCKdrAzYrsOqZPfoi3R\ny8sz7nPasWwyOBH8UDlsx9IAZT1casDHpHlb8g9D9bBZoEmuUO58RjWFG3Fw4+g4\n+QdKrfNiyQY/DVVpm4Vb+MldhjCepwDg3pFHMGnr7fnR/e3bTZFh56v411WJPFh9\n+MbptOG3toj6UQYjMQrrXeJeuJVt7RivXDhfAx2vqZ1oKdo4TcoFKqRiRsoHrRm5\nhDpod/VkVZrHkYxKo9GikChWfYiwN/i7vyl1aKcOaSduL9XpB2xaqE8mBDwn/YU=\n=51ld\n-----END PGP SIGNATURE-----\n", "payload": "tree 935b60e0374bec95472e5e19cbca298c0839e8bf\nparent f4643f59cb44725ccab9ced2bfb621d09a6e3682\nparent 34c377335bc6b855722eb1f4a0866de29af0f2c9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670269422 +0100\ncommitter GitHub <noreply@github.com> 1670269422 +0100\n\nRollup merge of #105180 - nbdd0121:async_track_caller, r=compiler-errors\n\nUse proper HirId for async track_caller attribute check\n\nFix #105134\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78cf0b916a335a534a5fd4e44405b4ffffb3514c", "html_url": "https://github.com/rust-lang/rust/commit/78cf0b916a335a534a5fd4e44405b4ffffb3514c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78cf0b916a335a534a5fd4e44405b4ffffb3514c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4643f59cb44725ccab9ced2bfb621d09a6e3682", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4643f59cb44725ccab9ced2bfb621d09a6e3682", "html_url": "https://github.com/rust-lang/rust/commit/f4643f59cb44725ccab9ced2bfb621d09a6e3682"}, {"sha": "34c377335bc6b855722eb1f4a0866de29af0f2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c377335bc6b855722eb1f4a0866de29af0f2c9", "html_url": "https://github.com/rust-lang/rust/commit/34c377335bc6b855722eb1f4a0866de29af0f2c9"}], "stats": {"total": 85, "additions": 63, "deletions": 22}, "files": [{"sha": "695ccec0b1cb15dd658d1b7aa75460c758b204ee", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/78cf0b916a335a534a5fd4e44405b4ffffb3514c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cf0b916a335a534a5fd4e44405b4ffffb3514c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=78cf0b916a335a534a5fd4e44405b4ffffb3514c", "patch": "@@ -147,6 +147,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Async(capture_clause, closure_node_id, block) => self.make_async_expr(\n                     *capture_clause,\n+                    None,\n                     *closure_node_id,\n                     None,\n                     e.span,\n@@ -584,6 +585,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n+        outer_hir_id: Option<hir::HirId>,\n         closure_node_id: NodeId,\n         ret_ty: Option<hir::FnRetTy<'hir>>,\n         span: Span,\n@@ -651,18 +653,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             hir::ExprKind::Closure(c)\n         };\n-        let parent_has_track_caller = self\n-            .attrs\n-            .values()\n-            .find(|attrs| attrs.into_iter().find(|attr| attr.has_name(sym::track_caller)).is_some())\n-            .is_some();\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n \n-        let hir_id = if parent_has_track_caller {\n-            let generator_hir_id = self.lower_node_id(closure_node_id);\n+        let track_caller = outer_hir_id\n+            .and_then(|id| self.attrs.get(&id.local_id))\n+            .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n+\n+        let hir_id = self.lower_node_id(closure_node_id);\n+        if track_caller {\n+            let unstable_span = self.mark_span_with_reason(\n+                DesugaringKind::Async,\n+                span,\n+                self.allow_gen_future.clone(),\n+            );\n             self.lower_attrs(\n-                generator_hir_id,\n+                hir_id,\n                 &[Attribute {\n                     kind: AttrKind::Normal(ptr::P(NormalAttr {\n                         item: AttrItem {\n@@ -677,10 +681,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     span: unstable_span,\n                 }],\n             );\n-            generator_hir_id\n-        } else {\n-            self.lower_node_id(closure_node_id)\n-        };\n+        }\n \n         let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };\n \n@@ -1019,6 +1020,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 let async_body = this.make_async_expr(\n                     capture_clause,\n+                    // FIXME(nbdd0121): This should also use a proper HIR id so `#[track_caller]`\n+                    // can be applied on async closures as well.\n+                    None,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,"}, {"sha": "9eda48e93294bb8f496cdf859e27b8d51051950c", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/78cf0b916a335a534a5fd4e44405b4ffffb3514c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cf0b916a335a534a5fd4e44405b4ffffb3514c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=78cf0b916a335a534a5fd4e44405b4ffffb3514c", "patch": "@@ -253,8 +253,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n                     let asyncness = header.asyncness;\n-                    let body_id =\n-                        this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n+                    let body_id = this.lower_maybe_async_body(\n+                        span,\n+                        hir_id,\n+                        &decl,\n+                        asyncness,\n+                        body.as_deref(),\n+                    );\n \n                     let mut itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n@@ -701,6 +706,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_trait_item(&mut self, i: &AssocItem) -> &'hir hir::TraitItem<'hir> {\n         let hir_id = self.lower_node_id(i.id);\n+        self.lower_attrs(hir_id, &i.attrs);\n         let trait_item_def_id = hir_id.expect_owner();\n \n         let (generics, kind, has_default) = match &i.kind {\n@@ -724,7 +730,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::Fn(box Fn { sig, generics, body: Some(body), .. }) => {\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n-                    self.lower_maybe_async_body(i.span, &sig.decl, asyncness, Some(&body));\n+                    self.lower_maybe_async_body(i.span, hir_id, &sig.decl, asyncness, Some(&body));\n                 let (generics, sig) = self.lower_method_sig(\n                     generics,\n                     sig,\n@@ -759,7 +765,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::MacCall(..) => panic!(\"macro item shouldn't exist at this point\"),\n         };\n \n-        self.lower_attrs(hir_id, &i.attrs);\n         let item = hir::TraitItem {\n             owner_id: trait_item_def_id,\n             ident: self.lower_ident(i.ident),\n@@ -798,6 +803,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // Since `default impl` is not yet implemented, this is always true in impls.\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n+        let hir_id = self.lower_node_id(i.id);\n+        self.lower_attrs(hir_id, &i.attrs);\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n@@ -810,8 +817,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::Fn(box Fn { sig, generics, body, .. }) => {\n                 self.current_item = Some(i.span);\n                 let asyncness = sig.header.asyncness;\n-                let body_id =\n-                    self.lower_maybe_async_body(i.span, &sig.decl, asyncness, body.as_deref());\n+                let body_id = self.lower_maybe_async_body(\n+                    i.span,\n+                    hir_id,\n+                    &sig.decl,\n+                    asyncness,\n+                    body.as_deref(),\n+                );\n                 let (generics, sig) = self.lower_method_sig(\n                     generics,\n                     sig,\n@@ -844,8 +856,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::MacCall(..) => panic!(\"`TyMac` should have been expanded by now\"),\n         };\n \n-        let hir_id = self.lower_node_id(i.id);\n-        self.lower_attrs(hir_id, &i.attrs);\n         let item = hir::ImplItem {\n             owner_id: hir_id.expect_owner(),\n             ident: self.lower_ident(i.ident),\n@@ -978,6 +988,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_maybe_async_body(\n         &mut self,\n         span: Span,\n+        fn_id: hir::HirId,\n         decl: &FnDecl,\n         asyncness: Async,\n         body: Option<&Block>,\n@@ -1128,6 +1139,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n+                Some(fn_id),\n                 closure_id,\n                 None,\n                 body.span,"}, {"sha": "4e52b8e250b9fa6b3e8989089052fc63e4616184", "filename": "src/test/ui/async-await/track-caller/issue-105134.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78cf0b916a335a534a5fd4e44405b4ffffb3514c/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-105134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cf0b916a335a534a5fd4e44405b4ffffb3514c/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-105134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-105134.rs?ref=78cf0b916a335a534a5fd4e44405b4ffffb3514c", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// edition:2021\n+\n+#[track_caller]\n+fn f() {\n+    let _ = async {};\n+}\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "5ebfeb3f36ac162f402dc3b780f6767c2911d35a", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78cf0b916a335a534a5fd4e44405b4ffffb3514c/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cf0b916a335a534a5fd4e44405b4ffffb3514c/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=78cf0b916a335a534a5fd4e44405b4ffffb3514c", "patch": "@@ -54,6 +54,19 @@ async fn foo_track_caller() {\n     bar_track_caller().await\n }\n \n+struct Foo;\n+\n+impl Foo {\n+    #[track_caller]\n+    async fn bar_assoc() {\n+        panic!();\n+    }\n+}\n+\n+async fn foo_assoc() {\n+    Foo::bar_assoc().await\n+}\n+\n fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n     let loc = Arc::new(Mutex::new(None));\n \n@@ -73,4 +86,5 @@ fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n fn main() {\n     assert_eq!(panicked_at(|| block_on(foo())), 41);\n     assert_eq!(panicked_at(|| block_on(foo_track_caller())), 54);\n+    assert_eq!(panicked_at(|| block_on(foo_assoc())), 67);\n }"}]}