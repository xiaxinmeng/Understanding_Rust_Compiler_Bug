{"sha": "3c19db95b8105e49040d88a0d878aec404f6b288", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMTlkYjk1YjgxMDVlNDkwNDBkODhhMGQ4NzhhZWM0MDRmNmIyODg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-21T07:55:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-21T07:55:38Z"}, "message": "Merge pull request #31 from oli-obk/chars\n\nimplement char handling", "tree": {"sha": "83954ecd32b951a9f590a25d1b39a40fbb8d7c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83954ecd32b951a9f590a25d1b39a40fbb8d7c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c19db95b8105e49040d88a0d878aec404f6b288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c19db95b8105e49040d88a0d878aec404f6b288", "html_url": "https://github.com/rust-lang/rust/commit/3c19db95b8105e49040d88a0d878aec404f6b288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c19db95b8105e49040d88a0d878aec404f6b288/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579628f56ddae7fa07e415ceebe0cb4faa0cfe72", "url": "https://api.github.com/repos/rust-lang/rust/commits/579628f56ddae7fa07e415ceebe0cb4faa0cfe72", "html_url": "https://github.com/rust-lang/rust/commit/579628f56ddae7fa07e415ceebe0cb4faa0cfe72"}, {"sha": "b10fc7a99ff127b68260d134ea2c70a3aa5021c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10fc7a99ff127b68260d134ea2c70a3aa5021c1", "html_url": "https://github.com/rust-lang/rust/commit/b10fc7a99ff127b68260d134ea2c70a3aa5021c1"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "da5d8cf787f49cca031a77b6cd678fb56116e4d4", "filename": "src/error.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=3c19db95b8105e49040d88a0d878aec404f6b288", "patch": "@@ -28,6 +28,7 @@ pub enum EvalError<'tcx> {\n     ExecuteMemory,\n     ArrayIndexOutOfBounds(Span, u64, u64),\n     Math(Span, ConstMathErr),\n+    InvalidChar(u32),\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -66,6 +67,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"array index out of bounds\",\n             EvalError::Math(..) =>\n                 \"mathematical operation failed\",\n+            EvalError::InvalidChar(..) =>\n+                \"tried to interpret an invalid 32-bit value as a char\",\n         }\n     }\n \n@@ -82,9 +85,11 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n             EvalError::FunctionPointerTyMismatch(expected, got) =>\n                 write!(f, \"tried to call a function of type {:?} through a function pointer of type {:?}\", expected, got),\n             EvalError::ArrayIndexOutOfBounds(span, len, index) =>\n-                write!(f, \"array index {} out of bounds {} at {:?}\", index, len, span),\n+                write!(f, \"index out of bounds: the len is {} but the index is {} at {:?}\", len, index, span),\n             EvalError::Math(span, ref err) =>\n-                write!(f, \"mathematical operation at {:?} failed with {:?}\", span, err),\n+                write!(f, \"{:?} at {:?}\", err, span),\n+            EvalError::InvalidChar(c) =>\n+                write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "41828d7a23136db6a39098300a3828cf98eb466f", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=3c19db95b8105e49040d88a0d878aec404f6b288", "patch": "@@ -208,7 +208,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_bool(ptr, b)?;\n                 Ok(ptr)\n             }\n-            Char(_c)          => unimplemented!(),\n+            Char(c) => {\n+                let ptr = self.memory.allocate(4);\n+                self.memory.write_uint(ptr, c as u64, 4)?;\n+                Ok(ptr)\n+            },\n             Struct(_node_id)  => unimplemented!(),\n             Tuple(_node_id)   => unimplemented!(),\n             Function(_def_id) => unimplemented!(),\n@@ -402,11 +406,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n                 let discr_ptr = self.eval_lvalue(discr)?.to_ptr();\n+                let discr_ty = self.lvalue_ty(discr);\n                 let discr_size = self\n-                    .type_layout(self.lvalue_ty(discr))\n+                    .type_layout(discr_ty)\n                     .size(&self.tcx.data_layout)\n                     .bytes() as usize;\n                 let discr_val = self.memory.read_uint(discr_ptr, discr_size)?;\n+                if let ty::TyChar = discr_ty.sty {\n+                    if ::std::char::from_u32(discr_val as u32).is_none() {\n+                        return Err(EvalError::InvalidChar(discr_val as u32));\n+                    }\n+                }\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets[targets.len() - 1];\n@@ -1371,6 +1381,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use syntax::ast::{IntTy, UintTy};\n         let val = match (self.memory.pointer_size, &ty.sty) {\n             (_, &ty::TyBool)              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n+            (_, &ty::TyChar)              => {\n+                let c = self.memory.read_uint(ptr, 4)? as u32;\n+                match ::std::char::from_u32(c) {\n+                    Some(ch) => PrimVal::Char(ch),\n+                    None => return Err(EvalError::InvalidChar(c)),\n+                }\n+            }\n             (_, &ty::TyInt(IntTy::I8))    => PrimVal::I8(self.memory.read_int(ptr, 1)? as i8),\n             (2, &ty::TyInt(IntTy::Is)) |\n             (_, &ty::TyInt(IntTy::I16))   => PrimVal::I16(self.memory.read_int(ptr, 2)? as i16),"}, {"sha": "a16fbc57a612a980bd97ca96d1a034758807f205", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=3c19db95b8105e49040d88a0d878aec404f6b288", "patch": "@@ -369,6 +369,7 @@ impl<'tcx> Memory<'tcx> {\n             PrimVal::U16(n)  => self.write_uint(ptr, n as u64, 2),\n             PrimVal::U32(n)  => self.write_uint(ptr, n as u64, 4),\n             PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n+            PrimVal::Char(c) => self.write_uint(ptr, c as u64, 4),\n             PrimVal::IntegerPtr(n) => self.write_uint(ptr, n as u64, pointer_size),\n             PrimVal::FnPtr(_p) |\n             PrimVal::AbstractPtr(_p) => unimplemented!(),"}, {"sha": "f3aedfc19743d12db124897c56a4d7cb01e14274", "filename": "src/primval.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c19db95b8105e49040d88a0d878aec404f6b288/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=3c19db95b8105e49040d88a0d878aec404f6b288", "patch": "@@ -12,6 +12,7 @@ pub enum PrimVal {\n     AbstractPtr(Pointer),\n     FnPtr(Pointer),\n     IntegerPtr(u64),\n+    Char(char),\n }\n \n /// returns the result of the operation and whether the operation overflowed\n@@ -127,6 +128,15 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         (U16(l), U16(r)) => int_binops!(U16, l, r),\n         (U32(l), U32(r)) => int_binops!(U32, l, r),\n         (U64(l), U64(r)) => int_binops!(U64, l, r),\n+        (Char(l), Char(r)) => match bin_op {\n+            Eq => Bool(l == r),\n+            Ne => Bool(l != r),\n+            Lt => Bool(l < r),\n+            Le => Bool(l <= r),\n+            Gt => Bool(l > r),\n+            Ge => Bool(l >= r),\n+            _ => panic!(\"invalid char op: {:?}\", bin_op),\n+        },\n \n         (Bool(l), Bool(r)) => {\n             Bool(match bin_op {"}, {"sha": "8315ae7af84a7e5a2ecc4b903043a8a77e63c193", "filename": "tests/compile-fail/option_eq.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c19db95b8105e49040d88a0d878aec404f6b288/tests%2Fcompile-fail%2Foption_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c19db95b8105e49040d88a0d878aec404f6b288/tests%2Fcompile-fail%2Foption_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foption_eq.rs?ref=3c19db95b8105e49040d88a0d878aec404f6b288", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: can't handle cast: tmp0 as isize (Misc)\n+// no-ignore-x86 ignore-x86_64\n+fn main() {\n+    assert_eq!(std::char::from_u32('x' as u32), Some('x'));\n+}"}, {"sha": "505c09b0ad885a287d187a6731d9902b029e770f", "filename": "tests/run-pass/char.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c19db95b8105e49040d88a0d878aec404f6b288/tests%2Frun-pass%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c19db95b8105e49040d88a0d878aec404f6b288/tests%2Frun-pass%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fchar.rs?ref=3c19db95b8105e49040d88a0d878aec404f6b288", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let c = 'x';\n+    assert_eq!(c, 'x');\n+    assert!('a' < 'z');\n+    assert!('1' < '9');\n+    assert_eq!(std::char::from_u32('x' as u32).unwrap(), 'x');\n+    // FIXME:\n+    // assert_eq!(std::char::from_u32('x' as u32), Some('x'));\n+}"}]}