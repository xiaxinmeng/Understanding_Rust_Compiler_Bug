{"sha": "08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YzZjYjVmNzA4ZWZhNzQ4NGNhMjdkNmIxNGI4NmQ2YWU1OGI2OTI=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-01-25T23:22:10Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-01-25T23:22:10Z"}, "message": "Merge pull request #1664 from kevina/issue-1612\n\nSee Issue #1612", "tree": {"sha": "af20f920390cb36c465e438a4b70d54159536d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af20f920390cb36c465e438a4b70d54159536d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "html_url": "https://github.com/rust-lang/rust/commit/08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab223e06181434dd7b98fa27a8f902f2d15d7759", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab223e06181434dd7b98fa27a8f902f2d15d7759", "html_url": "https://github.com/rust-lang/rust/commit/ab223e06181434dd7b98fa27a8f902f2d15d7759"}, {"sha": "60a146bf0f76c47d24cb4b01a408a329425d11f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a146bf0f76c47d24cb4b01a408a329425d11f9", "html_url": "https://github.com/rust-lang/rust/commit/60a146bf0f76c47d24cb4b01a408a329425d11f9"}], "stats": {"total": 130, "additions": 62, "deletions": 68}, "files": [{"sha": "986087bf4d0bda482e08b67ad6abff3a529eb296", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -193,15 +193,6 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n     // pull out the lines\n     if lines.name == \"-\" { ret; }\n \n-    // FIXME: reading in the entire file is the worst possible way to\n-    //        get access to the necessary lines.\n-    let file = alt io::read_whole_file_str(lines.name) {\n-      result::ok(file) { file }\n-      result::err(e) {\n-        // Hard to report errors while reporting an error\n-        ret;\n-      }\n-    };\n     let fm = codemap::get_filemap(cm, lines.name);\n \n     // arbitrarily only print up to six lines of the error\n@@ -215,7 +206,7 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n     // Print the offending lines\n     for line: uint in display_lines {\n         io::stdout().write_str(#fmt[\"%s:%u \", fm.name, line + 1u]);\n-        let s = codemap::get_line(fm, line as int, file);\n+        let s = codemap::get_line(fm, line as int);\n         if !str::ends_with(s, \"\\n\") { s += \"\\n\"; }\n         io::stdout().write_str(s);\n     }"}, {"sha": "8840a7a59f8a3ab2c7861aeb0a14d8a7d688a57f", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -77,7 +77,7 @@ fn parse_cfgspecs(cfgspecs: [str]) -> ast::crate_cfg {\n fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n \n fn parse_input(sess: session, cfg: ast::crate_cfg, input: str)\n-    -> {crate: @ast::crate, src: str} {\n+    -> {crate: @ast::crate, src: @str} {\n     let src = get_input_str(sess, input);\n     let crate = if !input_is_stdin(input) {\n         parser::parse_crate_from_file(input, cfg, sess.parse_sess)\n@@ -87,7 +87,7 @@ fn parse_input(sess: session, cfg: ast::crate_cfg, input: str)\n     {crate: crate, src: src}\n }\n \n-fn get_input_str(sess: session, infile: str) -> str {\n+fn get_input_str(sess: session, infile: str) -> @str {\n     let stream = if !input_is_stdin(infile) {\n         alt io::file_reader(infile) {\n           result::ok(reader) { reader }\n@@ -96,7 +96,7 @@ fn get_input_str(sess: session, infile: str) -> str {\n           }\n         }\n     } else { io::stdin() };\n-    str::unsafe_from_bytes(stream.read_whole_stream())\n+    @str::unsafe_from_bytes(stream.read_whole_stream())\n }\n \n fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n@@ -141,7 +141,7 @@ enum compile_upto {\n fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                 input: str, upto: compile_upto,\n                 outputs: option::t<output_filenames>)\n-    -> {crate: @ast::crate, tcx: option::t<ty::ctxt>, src: str} {\n+    -> {crate: @ast::crate, tcx: option::t<ty::ctxt>, src: @str} {\n     let time_passes = sess.opts.time_passes;\n     let {crate, src} =\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n@@ -300,7 +300,7 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n       ppm_expanded | ppm_normal {}\n     }\n     pprust::print_crate(sess.codemap, sess.span_diagnostic, crate, input,\n-                        io::string_reader(src), io::stdout(), ann);\n+                        io::string_reader(*src), io::stdout(), ann);\n }\n \n fn get_os(triple: str) -> option<session::os> {"}, {"sha": "8463f37681a481b8c9ecb3441be4f26761685c44", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -11,17 +11,19 @@ type file_pos = {ch: uint, byte: uint};\n  * compiler.\n  */\n type filemap =\n-    @{name: filename, start_pos: file_pos, mutable lines: [file_pos]};\n+    @{name: filename, src: @str,\n+      start_pos: file_pos, mutable lines: [file_pos]};\n \n type codemap = @{mutable files: [filemap]};\n \n type loc = {filename: filename, line: uint, col: uint};\n \n fn new_codemap() -> codemap { ret @{mutable files: []}; }\n \n-fn new_filemap(filename: filename, start_pos_ch: uint, start_pos_byte: uint)\n+fn new_filemap(filename: filename, src: @str,\n+               start_pos_ch: uint, start_pos_byte: uint)\n    -> filemap {\n-    ret @{name: filename,\n+    ret @{name: filename, src: src,\n           start_pos: {ch: start_pos_ch, byte: start_pos_byte},\n           mutable lines: [{ch: start_pos_ch, byte: start_pos_byte}]};\n }\n@@ -106,7 +108,7 @@ fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n     ret @{name: lo.filename, lines: lines};\n }\n \n-fn get_line(fm: filemap, line: int, file: str) -> str {\n+fn get_line(fm: filemap, line: int) -> str {\n     let begin: uint = fm.lines[line].byte - fm.start_pos.byte;\n     let end: uint;\n     if line as uint < vec::len(fm.lines) - 1u {\n@@ -115,12 +117,12 @@ fn get_line(fm: filemap, line: int, file: str) -> str {\n         // If we're not done parsing the file, we're at the limit of what's\n         // parsed. If we just slice the rest of the string, we'll print out\n         // the remainder of the file, which is undesirable.\n-        end = str::byte_len(file);\n-        let rest = str::slice(file, begin, end);\n+        end = str::byte_len(*fm.src);\n+        let rest = str::slice(*fm.src, begin, end);\n         let newline = str::index(rest, '\\n' as u8);\n         if newline != -1 { end = begin + (newline as uint); }\n     }\n-    ret str::slice(file, begin, end);\n+    ret str::slice(*fm.src, begin, end);\n }\n \n fn get_filemap(cm: codemap, filename: str) -> filemap {"}, {"sha": "d5482a1e62f580027261310d0a8c2c5369990cb2", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -75,7 +75,7 @@ fn expand_crate(sess: session::session, c: @crate) -> @crate {\n         {fold_expr: bind expand_expr(exts, cx, _, _, _, afp.fold_expr)\n             with *afp};\n     let f = make_fold(f_pre);\n-    let cm = parse_expr_from_source_str(\"<anon>\", core_macros(),\n+    let cm = parse_expr_from_source_str(\"<anon>\", @core_macros(),\n                                         sess.opts.cfg,\n                                         sess.parse_sess);\n "}, {"sha": "2530c794c94fe5f3fdc48af27486c713b5620551", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -79,7 +79,7 @@ fn parse_companion_mod(cx: ctx, prefix: str, suffix: option::t<str>)\n         let first_item_outer_attrs = inner_attrs.next;\n         let m0 = parse_mod_items(p0, token::EOF, first_item_outer_attrs);\n         cx.sess.chpos = p0.reader.chpos;\n-        cx.sess.byte_pos = p0.reader.pos;\n+        cx.sess.byte_pos = cx.sess.byte_pos + p0.reader.pos;\n         ret (m0.view_items, m0.items, inner_attrs.inner);\n     } else {\n         ret ([], [], []);\n@@ -117,7 +117,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n                                            ast::item_mod(m0), mod_attrs);\n         // Thread defids, chpos and byte_pos through the parsers\n         cx.sess.chpos = p0.reader.chpos;\n-        cx.sess.byte_pos = p0.reader.pos;\n+        cx.sess.byte_pos = cx.sess.byte_pos + p0.reader.pos;\n         items += [i];\n       }\n       ast::cdir_dir_mod(id, cdirs, attrs) {"}, {"sha": "66e0f87d982eafa15bc09dfab58d4646b204854e", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -11,7 +11,7 @@ import driver::diagnostic;\n type reader = @{\n     cm: codemap::codemap,\n     span_diagnostic: diagnostic::span_handler,\n-    src: str,\n+    src: @str,\n     len: uint,\n     mutable col: uint,\n     mutable pos: uint,\n@@ -27,11 +27,11 @@ impl reader for reader {\n     fn get_str_from(start: uint) -> str {\n         // I'm pretty skeptical about this subtraction. What if there's a\n         // multi-byte character before the mark?\n-        ret str::slice(self.src, start - 1u, self.pos - 1u);\n+        ret str::slice(*self.src, start - 1u, self.pos - 1u);\n     }\n     fn next() -> char {\n         if self.pos < self.len {\n-            ret str::char_at(self.src, self.pos);\n+            ret str::char_at(*self.src, self.pos);\n         } else { ret -1 as char; }\n     }\n     fn bump() {\n@@ -43,7 +43,7 @@ impl reader for reader {\n                                    self.filemap.start_pos.byte);\n                 self.col = 0u;\n             }\n-            let next = str::char_range_at(self.src, self.pos);\n+            let next = str::char_range_at(*self.src, self.pos);\n             self.pos = next.next;\n             self.curr = next.ch;\n         } else { self.curr = -1 as char; }\n@@ -57,16 +57,16 @@ impl reader for reader {\n \n fn new_reader(cm: codemap::codemap,\n               span_diagnostic: diagnostic::span_handler,\n-              src: str, filemap: codemap::filemap,\n+              filemap: codemap::filemap,\n               itr: @interner::interner<str>) -> reader {\n     let r = @{cm: cm,\n               span_diagnostic: span_diagnostic,\n-              src: src, len: str::byte_len(src),\n+              src: filemap.src, len: str::byte_len(*filemap.src),\n               mutable col: 0u, mutable pos: 0u, mutable curr: -1 as char,\n               mutable chpos: filemap.start_pos.ch, mutable strs: [],\n               filemap: filemap, interner: itr};\n     if r.pos < r.len {\n-        let next = str::char_range_at(r.src, r.pos);\n+        let next = str::char_range_at(*r.src, r.pos);\n         r.pos = next.next;\n         r.curr = next.ch;\n     }\n@@ -672,10 +672,10 @@ fn gather_comments_and_literals(cm: codemap::codemap,\n                                 path: str,\n                                 srdr: io::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n-    let src = str::unsafe_from_bytes(srdr.read_whole_stream());\n+    let src = @str::unsafe_from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk::<str>(str::hash, str::eq);\n-    let rdr = new_reader(cm, span_diagnostic, src,\n-                         codemap::new_filemap(path, 0u, 0u), itr);\n+    let rdr = new_reader(cm, span_diagnostic,\n+                         codemap::new_filemap(path, src, 0u, 0u), itr);\n     let comments: [cmnt] = [];\n     let literals: [lit] = [];\n     let first_read: bool = true;"}, {"sha": "4d8acc6fa44783c516a1151a7eec7d9df4f7b054", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -98,27 +98,28 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n     let src = alt io::read_whole_file_str(path) {\n       result::ok(src) {\n         // FIXME: This copy is unfortunate\n-        src\n+        @src\n       }\n       result::err(e) {\n         sess.span_diagnostic.handler().fatal(e)\n       }\n     };\n-    let filemap = codemap::new_filemap(path, sess.chpos, sess.byte_pos);\n+    let filemap = codemap::new_filemap(path, src,\n+                                       sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.cm, sess.span_diagnostic, src, filemap,\n-                                itr);\n+    let rdr = lexer::new_reader(sess.cm, sess.span_diagnostic, filemap, itr);\n     ret new_parser(sess, cfg, rdr, ftype);\n }\n \n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n-                              name: str, source: str) -> parser {\n+                              name: str, source: @str) -> parser {\n     let ftype = SOURCE_FILE;\n-    let filemap = codemap::new_filemap(name, sess.chpos, sess.byte_pos);\n+    let filemap = codemap::new_filemap(name, source,\n+                                       sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.cm, sess.span_diagnostic, source,\n+    let rdr = lexer::new_reader(sess.cm, sess.span_diagnostic,\n                                 filemap, itr);\n     ret new_parser(sess, cfg, rdr, ftype);\n }\n@@ -2457,26 +2458,26 @@ fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n     let p = new_parser_from_file(sess, cfg, input, SOURCE_FILE);\n     let r = parse_crate_mod(p, cfg);\n     sess.chpos = p.reader.chpos;\n-    sess.byte_pos = p.reader.pos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n }\n \n \n-fn parse_expr_from_source_str(name: str, source: str, cfg: ast::crate_cfg,\n+fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                               sess: parse_sess) -> @ast::expr {\n     let p = new_parser_from_source_str(sess, cfg, name, source);\n     let r = parse_expr(p);\n     sess.chpos = p.reader.chpos;\n-    sess.byte_pos = p.reader.pos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n }\n \n-fn parse_crate_from_source_str(name: str, source: str, cfg: ast::crate_cfg,\n+fn parse_crate_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n     let p = new_parser_from_source_str(sess, cfg, name, source);\n     let r = parse_crate_mod(p, cfg);\n     sess.chpos = p.reader.chpos;\n-    sess.byte_pos = p.reader.pos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n }\n \n@@ -2578,7 +2579,7 @@ fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n     let first_cdir_attr = leading_attrs.next;\n     let cdirs = parse_crate_directives(p, token::EOF, first_cdir_attr);\n     sess.chpos = p.reader.chpos;\n-    sess.byte_pos = p.reader.pos;\n+    sess.byte_pos = sess.byte_pos + p.reader.pos;\n     let cx =\n         @{p: p,\n           sess: sess,"}, {"sha": "7d5156a95a00503bf127d195815a4b3843ba1fee", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -261,7 +261,7 @@ fn check_variants_T<T: copy>(\n                 // string for stability is easier and ok for now.\n                 let handler = diagnostic::mk_handler(none);\n                 let str3 =\n-                    as_str(bind pprust::print_crate(\n+                    @as_str(bind pprust::print_crate(\n                         codemap,\n                         diagnostic::mk_span_handler(handler, codemap),\n                         crate2,\n@@ -274,8 +274,8 @@ fn check_variants_T<T: copy>(\n                   }\n                   tm_run {\n                     let file_label = #fmt(\"rusttmp/%s_%s_%u_%u\", last_part(filename), thing_label, i, j);\n-                    let safe_to_run = !(content_is_dangerous_to_run(str3) || has_raw_pointers(*crate2));\n-                    check_whole_compiler(str3, file_label, safe_to_run);\n+                    let safe_to_run = !(content_is_dangerous_to_run(*str3) || has_raw_pointers(*crate2));\n+                    check_whole_compiler(*str3, file_label, safe_to_run);\n                   }\n                 }\n             }\n@@ -414,7 +414,7 @@ fn check_compiling(filename: str) -> happiness {\n }\n \n \n-fn parse_and_print(code: str) -> str {\n+fn parse_and_print(code: @str) -> str {\n     let filename = \"tmp.rs\";\n     let cm = codemap::new_codemap();\n     let handler = diagnostic::mk_handler(none);\n@@ -425,14 +425,14 @@ fn parse_and_print(code: str) -> str {\n         mutable chpos: 0u,\n         mutable byte_pos: 0u\n     };\n-    write_file(filename, code);\n+    write_file(filename, *code);\n     let crate = parser::parse_crate_from_source_str(\n         filename, code, [], sess);\n     ret as_str(bind pprust::print_crate(sess.cm,\n                                         sess.span_diagnostic,\n                                         crate,\n                                         filename,\n-                                        io::string_reader(code), _,\n+                                        io::string_reader(*code), _,\n                                         pprust::no_ann()));\n }\n \n@@ -506,16 +506,16 @@ fn file_might_not_converge(filename: str) -> bool {\n     ret false;\n }\n \n-fn check_roundtrip_convergence(code: str, maxIters: uint) {\n+fn check_roundtrip_convergence(code: @str, maxIters: uint) {\n \n     let i = 0u;\n     let new = code;\n     let old = code;\n \n     while i < maxIters {\n         old = new;\n-        if content_might_not_converge(old) { ret; }\n-        new = parse_and_print(old);\n+        if content_might_not_converge(*old) { ret; }\n+        new = @parse_and_print(old);\n         if old == new { break; }\n         i += 1u;\n     }\n@@ -524,8 +524,8 @@ fn check_roundtrip_convergence(code: str, maxIters: uint) {\n         #error(\"Converged after %u iterations\", i);\n     } else {\n         #error(\"Did not converge after %u iterations!\", i);\n-        write_file(\"round-trip-a.rs\", old);\n-        write_file(\"round-trip-b.rs\", new);\n+        write_file(\"round-trip-a.rs\", *old);\n+        write_file(\"round-trip-b.rs\", *new);\n         std::run::run_program(\"diff\",\n                               [\"-w\", \"-u\", \"round-trip-a.rs\",\n                                \"round-trip-b.rs\"]);\n@@ -537,8 +537,8 @@ fn check_convergence(files: [str]) {\n     #error(\"pp convergence tests: %u files\", vec::len(files));\n     for file in files {\n         if !file_might_not_converge(file) {\n-            let s = result::get(io::read_whole_file_str(file));\n-            if !content_might_not_converge(s) {\n+            let s = @result::get(io::read_whole_file_str(file));\n+            if !content_might_not_converge(*s) {\n                 #error(\"pp converge: %s\", file);\n                 // Change from 7u to 2u once https://github.com/graydon/rust/issues/850 is fixed\n                 check_roundtrip_convergence(s, 7u);\n@@ -554,14 +554,14 @@ fn check_variants(files: [str], cx: context) {\n             cont;\n         }\n \n-        let s = result::get(io::read_whole_file_str(file));\n-        if contains(s, \"#\") {\n+        let s = @result::get(io::read_whole_file_str(file));\n+        if contains(*s, \"#\") {\n             cont; // Macros are confusing\n         }\n-        if cx.mode == tm_converge && content_might_not_converge(s) {\n+        if cx.mode == tm_converge && content_might_not_converge(*s) {\n             cont;\n         }\n-        if cx.mode == tm_run && content_is_dangerous_to_compile(s) {\n+        if cx.mode == tm_run && content_is_dangerous_to_compile(*s) {\n             cont;\n         }\n \n@@ -584,7 +584,7 @@ fn check_variants(files: [str], cx: context) {\n                                                sess.span_diagnostic,\n                                                crate,\n                                                file,\n-                                               io::string_reader(s), _,\n+                                               io::string_reader(*s), _,\n                                                pprust::no_ann())));\n         check_variants_of_ast(*crate, sess.cm, file, cx);\n     }"}, {"sha": "ad8bbc98425b15017bab6b1531af7d5ba1383edc", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -352,7 +352,7 @@ mod test {\n             mutable byte_pos: 0u\n         };\n         let parser = parser::new_parser_from_source_str(\n-            parse_sess, [], \"-\", source);\n+            parse_sess, [], \"-\", @source);\n \n         parser::parse_outer_attributes(parser)\n     }"}, {"sha": "e31249df1b0d8b0b80f06a6abbd8dd325e8a0cdd", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c6cb5f708efa7484ca27d6b14b86d6ae58b692/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=08c6cb5f708efa7484ca27d6b14b86d6ae58b692", "patch": "@@ -27,5 +27,5 @@ fn from_file(file: str) -> @ast::crate {\n \n fn from_str(source: str) -> @ast::crate {\n     parser::parse_crate_from_source_str(\n-        \"-\", source, [], new_parse_sess())\n+        \"-\", @source, [], new_parse_sess())\n }"}]}