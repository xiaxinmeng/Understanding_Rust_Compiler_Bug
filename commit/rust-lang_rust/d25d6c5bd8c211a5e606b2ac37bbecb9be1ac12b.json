{"sha": "d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNWQ2YzViZDhjMjExYTVlNjA2YjJhYzM3YmJlY2I5YmUxYWMxMmI=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-27T16:10:58Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-27T16:10:58Z"}, "message": "Update the documentation to point to open instead of is_file and is_dir", "tree": {"sha": "78af422171fff3dca93ea1b89fde6ee34d66dd8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78af422171fff3dca93ea1b89fde6ee34d66dd8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "html_url": "https://github.com/rust-lang/rust/commit/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1243dbcd96f43d013e38f01efe91eb35b81fa18", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1243dbcd96f43d013e38f01efe91eb35b81fa18", "html_url": "https://github.com/rust-lang/rust/commit/c1243dbcd96f43d013e38f01efe91eb35b81fa18"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "23bd8f6498b4a6ff64226b3b9eaf78f5c7663f00", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "patch": "@@ -1033,14 +1033,16 @@ impl Metadata {\n     /// [`is_dir`], and will be false for symlink metadata\n     /// obtained from [`symlink_metadata`].\n     ///\n-    /// This property means it is often more useful to use `!file_type.is_dir()`\n-    /// than `file_type.is_file()` when your goal is to read bytes from a\n-    /// source: the former includes symlink and pipes when the latter does not,\n-    /// meaning you will break workflows like `diff <( prog_a ) <( prog_b )` on\n-    /// a Unix-like system for example.\n+    /// When the goal is simply to read from (or write to) the source, the most\n+    /// reliable way to test the source can be read (or written to) is to open\n+    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n+    /// a Unix-like system for example. See [`File::open`] or\n+    /// [`OpenOptions::open`] for more information.\n     ///\n     /// [`is_dir`]: struct.Metadata.html#method.is_dir\n     /// [`symlink_metadata`]: fn.symlink_metadata.html\n+    /// [`File::open`]: struct.File.html#method.open\n+    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n     ///\n     /// # Examples\n     ///\n@@ -1313,14 +1315,16 @@ impl FileType {\n     /// [`is_dir`] and [`is_symlink`]; only zero or one of these\n     /// tests may pass.\n     ///\n-    /// This property means it is often more useful to use `!file_type.is_dir()`\n-    /// than `file_type.is_file()` when your goal is to read bytes from a\n-    /// source: the former includes symlink and pipes when the latter does not,\n-    /// meaning you will break workflows like `diff <( prog_a ) <( prog_b )` on\n-    /// a Unix-like system for example.\n+    /// When the goal is simply to read from (or write to) the source, the most\n+    /// reliable way to test the source can be read (or written to) is to open\n+    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n+    /// a Unix-like system for example. See [`File::open`] or\n+    /// [`OpenOptions::open`] for more information.\n     ///\n     /// [`is_dir`]: struct.FileType.html#method.is_dir\n     /// [`is_symlink`]: struct.FileType.html#method.is_symlink\n+    /// [`File::open`]: struct.File.html#method.open\n+    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n     ///\n     /// # Examples\n     ///"}, {"sha": "fa54b2063b424c711f02920601590ddf7bb3173a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d25d6c5bd8c211a5e606b2ac37bbecb9be1ac12b", "patch": "@@ -2506,7 +2506,7 @@ impl Path {\n     /// check errors, call [`fs::metadata`] and handle its Result. Then call\n     /// [`fs::Metadata::is_file`] if it was Ok.\n     ///\n-    /// Note that the explanation about using `!is_dir` instead of `is_file`\n+    /// Note that the explanation about using `open` instead of `is_file`\n     /// that is present in the [`fs::Metadata`] documentation also applies here.\n     ///\n     /// [`fs::metadata`]: ../../std/fs/fn.metadata.html"}]}