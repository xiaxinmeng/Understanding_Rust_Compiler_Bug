{"sha": "fbd583bde2d51dadd87f1b3c74b4723399f7e3b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDU4M2JkZTJkNTFkYWRkODdmMWIzYzc0YjQ3MjMzOTlmN2UzYjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-09T00:38:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-09T00:38:12Z"}, "message": "core: Implement string equal natively to save a call into the shape code. Shaves a couple of seconds off rustc.", "tree": {"sha": "65fdf854e137a59cb059d2d363df6d3b20a83065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65fdf854e137a59cb059d2d363df6d3b20a83065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd583bde2d51dadd87f1b3c74b4723399f7e3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd583bde2d51dadd87f1b3c74b4723399f7e3b9", "html_url": "https://github.com/rust-lang/rust/commit/fbd583bde2d51dadd87f1b3c74b4723399f7e3b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd583bde2d51dadd87f1b3c74b4723399f7e3b9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7c37debe4b7827234642df3c1ed378b7c3e1849", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c37debe4b7827234642df3c1ed378b7c3e1849", "html_url": "https://github.com/rust-lang/rust/commit/c7c37debe4b7827234642df3c1ed378b7c3e1849"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "1056e61fe27d798f66bfe1a6b6424f944f3869ab", "filename": "src/libcore/str.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fbd583bde2d51dadd87f1b3c74b4723399f7e3b9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd583bde2d51dadd87f1b3c74b4723399f7e3b9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=fbd583bde2d51dadd87f1b3c74b4723399f7e3b9", "patch": "@@ -595,7 +595,22 @@ Section: Comparing strings\n */\n \n #[doc = \"Bytewise string equality\"]\n-pure fn eq(&&a: str, &&b: str) -> bool { a == b }\n+pure fn eq(&&a: str, &&b: str) -> bool {\n+    // FIXME: This should just be \"a == b\" but that calls into the shape code\n+    // :(\n+    let a_len = a.len();\n+    let b_len = b.len();\n+    if a_len != b_len { ret false; }\n+    let mut end = uint::min(a_len, b_len);\n+\n+    let mut i = 0u;\n+    while i < end {\n+        if a[i] != b[i] { ret false; }\n+        i += 1u;\n+    }\n+\n+    ret true;\n+}\n \n #[doc = \"Bytewise less than or equal\"]\n pure fn le(&&a: str, &&b: str) -> bool { a <= b }\n@@ -1874,7 +1889,7 @@ impl extensions for str {\n     fn is_alphanumeric() -> bool { is_alphanumeric(self) }\n     #[inline]\n     #[doc =\"Returns the size in bytes not counting the null terminator\"]\n-    fn len() -> uint { len(self) }\n+    pure fn len() -> uint { len(self) }\n     #[doc = \"\n     Returns a slice of the given string from the byte range [`begin`..`end`)\n "}]}