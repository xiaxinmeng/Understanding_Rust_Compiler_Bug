{"sha": "e489a94deef3d41513fe4254804d730f0fd6cbc0", "node_id": "C_kwDOAAsO6NoAKGU0ODlhOTRkZWVmM2Q0MTUxM2ZlNDI1NDgwNGQ3MzBmMGZkNmNiYzA", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-01-23T18:34:26Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-03-02T15:45:25Z"}, "message": "rename ErrorReported -> ErrorGuaranteed", "tree": {"sha": "d2c3743151e614831817cb8c27487a820826cc29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c3743151e614831817cb8c27487a820826cc29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e489a94deef3d41513fe4254804d730f0fd6cbc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e489a94deef3d41513fe4254804d730f0fd6cbc0", "html_url": "https://github.com/rust-lang/rust/commit/e489a94deef3d41513fe4254804d730f0fd6cbc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e489a94deef3d41513fe4254804d730f0fd6cbc0/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42d846add941a26bd254911e16f02c4a3f9346f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42d846add941a26bd254911e16f02c4a3f9346f", "html_url": "https://github.com/rust-lang/rust/commit/c42d846add941a26bd254911e16f02c4a3f9346f"}], "stats": {"total": 1139, "additions": 580, "deletions": 559}, "files": [{"sha": "21b582ef3345b4749a4fb49ec9142c1ee2dc95a6", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId, ErrorReported};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n \n@@ -7,7 +7,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0505, \"cannot move out of {} because it is borrowed\", desc,)\n     }\n \n@@ -17,7 +17,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         borrow_span: Span,\n         borrow_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -36,7 +36,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         verb: &str,\n         desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(\n             self,\n             span,\n@@ -55,7 +55,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         old_loan_span: Span,\n         old_opt_via: &str,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let via =\n             |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n@@ -103,7 +103,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         old_loan_span: Span,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -136,7 +136,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         noun_old: &str,\n         old_opt_via: &str,\n         previous_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -168,7 +168,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         old_opt_via: &str,\n         previous_end_span: Option<Span>,\n         second_borrow_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -204,7 +204,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         kind_old: &str,\n         msg_old: &str,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let via =\n             |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n@@ -247,7 +247,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         borrow_span: Span,\n         desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -266,20 +266,24 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         desc: &str,\n         is_arg: bool,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let msg = if is_arg { \"to immutable argument\" } else { \"twice to immutable variable\" };\n         struct_span_err!(self, span, E0384, \"cannot assign {} {}\", msg, desc)\n     }\n \n-    crate fn cannot_assign(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    crate fn cannot_assign(\n+        &self,\n+        span: Span,\n+        desc: &str,\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n     crate fn cannot_move_out_of(\n         &self,\n         move_from_span: Span,\n         move_from_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(self, move_from_span, E0507, \"cannot move out of {}\", move_from_desc,)\n     }\n \n@@ -291,7 +295,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         move_from_span: Span,\n         ty: Ty<'_>,\n         is_index: Option<bool>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let type_name = match (&ty.kind(), is_index) {\n             (&ty::Array(_, _), Some(true)) | (&ty::Array(_, _), None) => \"array\",\n             (&ty::Slice(_), _) => \"slice\",\n@@ -313,7 +317,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         move_from_span: Span,\n         container_ty: Ty<'_>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             move_from_span,\n@@ -331,7 +335,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         verb: &str,\n         optional_adverb_for_moved: &str,\n         moved_path: Option<String>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let moved_path = moved_path.map(|mp| format!(\": `{}`\", mp)).unwrap_or_default();\n \n         struct_span_err!(\n@@ -350,7 +354,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         path: &str,\n         reason: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0596, \"cannot borrow {} as mutable{}\", path, reason,)\n     }\n \n@@ -361,7 +365,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         immutable_place: &str,\n         immutable_section: &str,\n         action: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             mutate_span,\n@@ -380,7 +384,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         yield_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -394,7 +398,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_borrow_across_destructor(\n         &self,\n         borrow_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(\n             self,\n             borrow_span,\n@@ -407,7 +411,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         path: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0597, \"{} does not live long enough\", path,)\n     }\n \n@@ -417,7 +421,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         return_kind: &str,\n         reference_desc: &str,\n         path_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -442,7 +446,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         closure_kind: &str,\n         borrowed_path: &str,\n         capture_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             closure_span,\n@@ -461,14 +465,14 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn thread_local_value_does_not_live_long_enough(\n         &self,\n         span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0712, \"thread-local variable borrowed past end of function\",)\n     }\n \n     crate fn temporary_value_borrowed_for_too_long(\n         &self,\n         span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0716, \"temporary value dropped while borrowed\",)\n     }\n \n@@ -477,7 +481,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         self.infcx.tcx.sess.struct_span_err_with_code(sp, msg, code)\n     }\n }\n@@ -486,7 +490,7 @@ crate fn borrowed_data_escapes_closure<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     escape_span: Span,\n     escapes_from: &str,\n-) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n     struct_span_err!(\n         tcx.sess,\n         escape_span,"}, {"sha": "7507ea76ed07d893264ab4d27a0de4d2e0e9f244", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_infer::infer::region_constraints::Constraint;\n@@ -124,7 +124,7 @@ trait TypeOpInfo<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn base_universe(&self) -> ty::UniverseIndex;\n \n@@ -134,7 +134,7 @@ trait TypeOpInfo<'tcx> {\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>>;\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>>;\n \n     fn report_error(\n         &self,\n@@ -196,7 +196,7 @@ impl<'tcx> TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n         err.note(&format!(\"could not prove {}\", self.canonical_query.value.value.predicate));\n         err\n@@ -212,7 +212,7 @@ impl<'tcx> TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         tcx.infer_ctxt().enter_with_canonical(\n             cause.span,\n             &self.canonical_query,\n@@ -243,7 +243,7 @@ where\n         &self,\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n         err.note(&format!(\"could not normalize `{}`\", self.canonical_query.value.value.value));\n         err\n@@ -259,7 +259,7 @@ where\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         tcx.infer_ctxt().enter_with_canonical(\n             cause.span,\n             &self.canonical_query,\n@@ -304,7 +304,7 @@ impl<'tcx> TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         // FIXME: This error message isn't great, but it doesn't show up in the existing UI tests,\n         // and is only the fallback when the nice error fails. Consider improving this some more.\n         tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\")\n@@ -320,7 +320,7 @@ impl<'tcx> TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         tcx.infer_ctxt().enter_with_canonical(\n             cause.span,\n             &self.canonical_query,\n@@ -345,7 +345,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     placeholder_region: ty::Region<'tcx>,\n     error_region: Option<ty::Region<'tcx>>,\n-) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n     let tcx = infcx.tcx;\n \n     // We generally shouldn't have errors here because the query was"}, {"sha": "4502d15f36fa13afda0ac1548ef1d2407adfea32", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use rustc_const_eval::util::{CallDesugaringKind, CallKind};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n@@ -507,7 +507,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         (place, _span): (Place<'tcx>, Span),\n         borrow: &BorrowData<'tcx>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n         let borrow_span = borrow_spans.args_or_use();\n \n@@ -554,7 +554,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         (place, span): (Place<'tcx>, Span),\n         gen_borrow_kind: BorrowKind,\n         issued_borrow: &BorrowData<'tcx>,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let issued_spans = self.retrieve_borrow_spans(issued_borrow);\n         let issued_span = issued_spans.args_or_use();\n \n@@ -1120,7 +1120,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n         explanation: BorrowExplanation,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}, {:?}\\\n@@ -1298,7 +1298,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &mut self,\n         drop_span: Span,\n         borrow_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_thread_local_value_does_not_live_long_enough(\\\n              {:?}, {:?}\\\n@@ -1325,7 +1325,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow_spans: UseSpans<'tcx>,\n         proper_span: Span,\n         explanation: BorrowExplanation,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_temporary_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}\\\n@@ -1384,7 +1384,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         return_span: Span,\n         category: ConstraintCategory,\n         opt_place_desc: Option<&String>,\n-    ) -> Option<DiagnosticBuilder<'cx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'cx, ErrorGuaranteed>> {\n         let return_kind = match category {\n             ConstraintCategory::Return(_) => \"return\",\n             ConstraintCategory::Yield => \"yield\",\n@@ -1483,7 +1483,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         category: ConstraintCategory,\n         constraint_span: Span,\n         captured_var: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let tcx = self.infcx.tcx;\n         let args_span = use_span.args_or_use();\n \n@@ -1560,7 +1560,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         upvar_span: Span,\n         upvar_name: &str,\n         escape_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let tcx = self.infcx.tcx;\n \n         let (_, escapes_from) = tcx.article_and_description(self.mir_def_id().to_def_id());"}, {"sha": "19091569b4d27de36eea5664281fc9ad8cb76bbf", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,5 +1,5 @@\n use rustc_const_eval::util::CallDesugaringKind;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n@@ -271,7 +271,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         &mut self,\n         place: Place<'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let description = if place.projection.len() == 1 {\n             format!(\"static item {}\", self.describe_any_place(place.as_ref()))\n         } else {\n@@ -293,7 +293,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         deref_target_place: Place<'tcx>,\n         span: Span,\n         use_spans: Option<UseSpans<'tcx>>,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         // Inspect the type of the content behind the\n         // borrow to provide feedback about why this\n         // was a move rather than a copy."}, {"sha": "38b16fedd3a49ba4f234b4073e1768622980541b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,6 +1,6 @@\n //! Error reporting machinery for lifetime errors.\n \n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n@@ -389,7 +389,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         &self,\n         errci: &ErrorConstraintInfo,\n         kind: ReturnConstraint,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n \n         let mut diag = self\n@@ -469,7 +469,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn report_escaping_data_error(\n         &self,\n         errci: &ErrorConstraintInfo,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { span, category, .. } = errci;\n \n         let fr_name_and_span = self.regioncx.get_var_name_and_span_for_region(\n@@ -573,7 +573,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn report_general_error(\n         &self,\n         errci: &ErrorConstraintInfo,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo {\n             fr,\n             fr_is_local,"}, {"sha": "7502a3e39a1910f9a7e20ca0241109be2e0ee35a", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -19,7 +19,7 @@ extern crate tracing;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::Node;\n@@ -178,7 +178,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_opt_const_arg(def);\n-    if let Some(ErrorReported) = tables.tainted_by_errors {\n+    if let Some(ErrorGuaranteed) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n         errors.set_tainted_by_errors();\n     }\n@@ -2292,11 +2292,11 @@ mod error {\n         /// when errors in the map are being re-added to the error buffer so that errors with the\n         /// same primary span come out in a consistent order.\n         buffered_move_errors:\n-            BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorReported>)>,\n+            BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorGuaranteed>)>,\n         /// Diagnostics to be reported buffer.\n         buffered: Vec<Diagnostic>,\n         /// Set to Some if we emit an error during borrowck\n-        tainted_by_errors: Option<ErrorReported>,\n+        tainted_by_errors: Option<ErrorGuaranteed>,\n     }\n \n     impl BorrowckErrors<'_> {\n@@ -2310,8 +2310,8 @@ mod error {\n \n         // FIXME(eddyb) this is a suboptimal API because `tainted_by_errors` is\n         // set before any emission actually happens (weakening the guarantee).\n-        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorReported>) {\n-            self.tainted_by_errors = Some(ErrorReported {});\n+        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorGuaranteed>) {\n+            self.tainted_by_errors = Some(ErrorGuaranteed {});\n             t.buffer(&mut self.buffered);\n         }\n \n@@ -2320,12 +2320,12 @@ mod error {\n         }\n \n         pub fn set_tainted_by_errors(&mut self) {\n-            self.tainted_by_errors = Some(ErrorReported {});\n+            self.tainted_by_errors = Some(ErrorGuaranteed {});\n         }\n     }\n \n     impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorReported>) {\n+        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorGuaranteed>) {\n             self.errors.buffer_error(t);\n         }\n \n@@ -2336,7 +2336,7 @@ mod error {\n         pub fn buffer_move_error(\n             &mut self,\n             move_out_indices: Vec<MoveOutIndex>,\n-            place_and_err: (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorReported>),\n+            place_and_err: (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n         ) -> bool {\n             if let Some((_, diag)) =\n                 self.errors.buffered_move_errors.insert(move_out_indices, place_and_err)\n@@ -2349,7 +2349,7 @@ mod error {\n             }\n         }\n \n-        pub fn emit_errors(&mut self) -> Option<ErrorReported> {\n+        pub fn emit_errors(&mut self) -> Option<ErrorGuaranteed> {\n             // Buffer any move errors that we collected and de-duplicated.\n             for (_, (_, diag)) in std::mem::take(&mut self.errors.buffered_move_errors) {\n                 // We have already set tainted for this error, so just buffer it.\n@@ -2374,7 +2374,7 @@ mod error {\n         pub fn has_move_error(\n             &self,\n             move_out_indices: &[MoveOutIndex],\n-        ) -> Option<&(PlaceRef<'tcx>, DiagnosticBuilder<'cx, ErrorReported>)> {\n+        ) -> Option<&(PlaceRef<'tcx>, DiagnosticBuilder<'cx, ErrorGuaranteed>)> {\n             self.errors.buffered_move_errors.get(move_out_indices)\n         }\n     }"}, {"sha": "66adc1a2ce96db56d7f00affe884d53db3ddf1af", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n@@ -54,7 +54,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                 {\n                     all_constants_ok = false;\n                     match err {\n-                        ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                        ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n                             fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                         }\n                         ErrorHandled::TooGeneric => {"}, {"sha": "331e3e8f5dfc3c303eda9fc3ee76de4c821997c0", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -29,7 +29,7 @@ use std::cell::Cell;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::config::OutputFilenames;\n@@ -209,7 +209,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n         _outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         Ok(*ongoing_codegen\n             .downcast::<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)>()\n             .unwrap())\n@@ -220,7 +220,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         sess: &Session,\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(sess, &codegen_results, outputs)"}, {"sha": "ef95dfb6e2e0079c0c182ba19769b681d7929880", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -57,7 +57,7 @@ use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModul\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_codegen_ssa::traits::{CodegenBackend, ExtraBackendMethods, ModuleBufferMethods, ThinBufferMethods, WriteBackendMethods};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{ErrorReported, Handler};\n+use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n@@ -93,7 +93,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Box::new(res)\n     }\n \n-    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<GccCodegenBackend>>()\n             .expect(\"Expected GccCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -102,7 +102,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Ok((codegen_results, work_products))\n     }\n \n-    fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorReported> {\n+    fn link(&self, sess: &Session, codegen_results: CodegenResults, outputs: &OutputFilenames) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n         link_binary::<crate::archive::ArArchiveBuilder<'_>>("}, {"sha": "875b4f033d19f1e7dfa21ecea575f4e35e9cf076", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -30,7 +30,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{ErrorReported, FatalError, Handler};\n+use rustc_errors::{ErrorGuaranteed, FatalError, Handler};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::query::Providers;\n@@ -352,7 +352,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -373,7 +373,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         sess: &Session,\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         use crate::back::archive::LlvmArchiveBuilder;\n         use rustc_codegen_ssa::back::link::link_binary;\n "}, {"sha": "9e252c0d9b7d555b088a5c9a58c827255170ae94", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,7 +2,7 @@ use rustc_arena::TypedArena;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_errors::{ErrorReported, Handler};\n+use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::dependency_format::Linkage;\n@@ -57,7 +57,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n     sess: &'a Session,\n     codegen_results: &CodegenResults,\n     outputs: &OutputFilenames,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let _timer = sess.timer(\"link_binary\");\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n     for &crate_type in sess.crate_types().iter() {\n@@ -260,7 +260,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     flavor: RlibFlavor,\n     out_filename: &Path,\n     tmpdir: &MaybeTempDir,\n-) -> Result<B, ErrorReported> {\n+) -> Result<B, ErrorGuaranteed> {\n     info!(\"preparing rlib to {:?}\", out_filename);\n \n     let lib_search_paths = archive_search_paths(sess);\n@@ -407,7 +407,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n fn collate_raw_dylibs(\n     sess: &Session,\n     used_libraries: &[NativeLib],\n-) -> Result<Vec<(String, Vec<DllImport>)>, ErrorReported> {\n+) -> Result<Vec<(String, Vec<DllImport>)>, ErrorGuaranteed> {\n     // Use index maps to preserve original order of imports and libraries.\n     let mut dylib_table = FxIndexMap::<String, FxIndexMap<Symbol, &DllImport>>::default();\n \n@@ -459,7 +459,7 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n     out_filename: &Path,\n     tempdir: &MaybeTempDir,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let mut ab =\n         link_rlib::<B>(sess, codegen_results, RlibFlavor::StaticlibBase, out_filename, tempdir)?;\n     let mut all_native_libs = vec![];"}, {"sha": "40a8e2388e26ba50f8c8654b1df844cc3e2eb7c5", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,5 +1,5 @@\n use crate::traits::*;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n@@ -191,7 +191,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             all_consts_ok = false;\n             match err {\n                 // errored or at least linted\n-                ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {}\n+                ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {}\n                 ErrorHandled::TooGeneric => {\n                     span_bug!(const_.span, \"codgen encountered polymorphic constant: {:?}\", err)\n                 }"}, {"sha": "856b7742583167ed4824ee639ef686966c3f0be0", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -5,7 +5,7 @@ use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf, TyAndLayout};\n@@ -98,7 +98,7 @@ pub trait CodegenBackend {\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported>;\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed>;\n \n     /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n     ///\n@@ -110,7 +110,7 @@ pub trait CodegenBackend {\n         sess: &Session,\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported>;\n+    ) -> Result<(), ErrorGuaranteed>;\n }\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send + Sync {"}, {"sha": "ac25cfd057c17ed1bc7b77d265fe4a08104d084b", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n@@ -251,7 +251,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                         rustc_span::DUMMY_SP,\n                         \"This is likely a const item that is missing from its impl\",\n                     );\n-                    throw_inval!(AlreadyReported(ErrorReported {}));\n+                    throw_inval!(AlreadyReported(ErrorGuaranteed {}));\n                 } else {\n                     let path = ecx.tcx.def_path_str(def.did);\n                     Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))"}, {"sha": "2096addb9f78629103a074503f4a9e5362f6de3d", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -16,7 +16,7 @@\n \n use super::validity::RefTracking;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::InterpResult;\n use rustc_middle::ty::{self, layout::TyAndLayout, Ty};\n@@ -297,7 +297,7 @@ pub fn intern_const_alloc_recursive<\n     ecx: &mut InterpCx<'mir, 'tcx, M>,\n     intern_kind: InternKind,\n     ret: &MPlaceTy<'tcx>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let tcx = ecx.tcx;\n     let base_intern_mode = match intern_kind {\n         InternKind::Static(mutbl) => InternMode::Static(mutbl),\n@@ -402,7 +402,7 @@ pub fn intern_const_alloc_recursive<\n             // Codegen does not like dangling pointers, and generally `tcx` assumes that\n             // all allocations referenced anywhere actually exist. So, make sure we error here.\n             ecx.tcx.sess.span_err(ecx.tcx.span, \"encountered dangling pointer in final constant\");\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         } else if ecx.tcx.get_global_alloc(alloc_id).is_none() {\n             // We have hit an `AllocId` that is neither in local or global memory and isn't\n             // marked as dangling by local memory.  That should be impossible."}, {"sha": "716c01ba78ceb6a337076efb45f214d74df816a0", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@\n use std::convert::TryFrom;\n use std::fmt::Write;\n \n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n@@ -565,7 +565,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         match val.val() {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n+            ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorGuaranteed)),\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())"}, {"sha": "b78924490cae83da5b373081f91e0ec5fc13e660", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,6 +1,6 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::{Applicability, Diagnostic, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n@@ -121,7 +121,7 @@ impl<'mir, 'tcx> Qualifs<'mir, 'tcx> {\n     fn in_return_place(\n         &mut self,\n         ccx: &'mir ConstCx<'mir, 'tcx>,\n-        tainted_by_errors: Option<ErrorReported>,\n+        tainted_by_errors: Option<ErrorGuaranteed>,\n     ) -> ConstQualifs {\n         // Find the `Return` terminator if one exists.\n         //\n@@ -181,7 +181,7 @@ pub struct Checker<'mir, 'tcx> {\n     /// A set that stores for each local whether it has a `StorageDead` for it somewhere.\n     local_has_storage_dead: Option<BitSet<Local>>,\n \n-    error_emitted: Option<ErrorReported>,\n+    error_emitted: Option<ErrorGuaranteed>,\n     secondary_errors: Vec<Diagnostic>,\n }\n \n@@ -329,7 +329,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n         match op.importance() {\n             ops::DiagnosticImportance::Primary => {\n-                self.error_emitted = Some(ErrorReported);\n+                self.error_emitted = Some(ErrorGuaranteed);\n                 err.emit();\n             }\n "}, {"sha": "f6b92df92c04434ebfba7ca175c4e88cdc691394", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,6 +1,6 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -51,7 +51,7 @@ pub trait NonConstOp<'tcx>: std::fmt::Debug {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n }\n \n #[derive(Debug)]\n@@ -69,7 +69,7 @@ impl<'tcx> NonConstOp<'tcx> for FloatingPointOp {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_floating_point_arithmetic,\n@@ -87,7 +87,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallIndirect {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         ccx.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\")\n     }\n }\n@@ -107,7 +107,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         _: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let FnCallNonConst { caller, callee, substs, span, from_hir_call } = *self;\n         let ConstCx { tcx, param_env, .. } = *ccx;\n \n@@ -332,7 +332,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallUnstable {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let FnCallUnstable(def_id, feature) = *self;\n \n         let mut err = ccx.tcx.sess.struct_span_err(\n@@ -370,7 +370,7 @@ impl<'tcx> NonConstOp<'tcx> for FnPtrCast {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_fn_ptr_basics,\n@@ -395,7 +395,7 @@ impl<'tcx> NonConstOp<'tcx> for Generator {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let msg = format!(\"{}s are not allowed in {}s\", self.0, ccx.const_kind());\n         if let hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) = self.0 {\n             feature_err(&ccx.tcx.sess.parse_sess, sym::const_async_blocks, span, &msg)\n@@ -412,7 +412,7 @@ impl<'tcx> NonConstOp<'tcx> for HeapAllocation {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -440,7 +440,7 @@ impl<'tcx> NonConstOp<'tcx> for InlineAsm {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -460,7 +460,7 @@ impl<'tcx> NonConstOp<'tcx> for LiveDrop {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -492,7 +492,7 @@ impl<'tcx> NonConstOp<'tcx> for TransientCellBorrow {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_refs_to_cell,\n@@ -512,7 +512,7 @@ impl<'tcx> NonConstOp<'tcx> for CellBorrow {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -563,7 +563,7 @@ impl<'tcx> NonConstOp<'tcx> for MutBorrow {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let raw = match self.0 {\n             hir::BorrowKind::Raw => \"raw \",\n             hir::BorrowKind::Ref => \"\",\n@@ -606,7 +606,7 @@ impl<'tcx> NonConstOp<'tcx> for TransientMutBorrow {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let raw = match self.0 {\n             hir::BorrowKind::Raw => \"raw \",\n             hir::BorrowKind::Ref => \"\",\n@@ -637,7 +637,7 @@ impl<'tcx> NonConstOp<'tcx> for MutDeref {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_mut_refs,\n@@ -655,7 +655,7 @@ impl<'tcx> NonConstOp<'tcx> for PanicNonStr {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         ccx.tcx.sess.struct_span_err(\n             span,\n             \"argument to `panic!()` in a const context must have type `&str`\",\n@@ -673,7 +673,7 @@ impl<'tcx> NonConstOp<'tcx> for RawPtrComparison {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = ccx\n             .tcx\n             .sess\n@@ -697,7 +697,7 @@ impl<'tcx> NonConstOp<'tcx> for RawMutPtrDeref {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_mut_refs,\n@@ -717,7 +717,7 @@ impl<'tcx> NonConstOp<'tcx> for RawPtrToIntCast {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = ccx\n             .tcx\n             .sess\n@@ -746,7 +746,7 @@ impl<'tcx> NonConstOp<'tcx> for StaticAccess {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -776,7 +776,7 @@ impl<'tcx> NonConstOp<'tcx> for ThreadLocalAccess {\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -811,7 +811,7 @@ pub mod ty {\n             &self,\n             ccx: &ConstCx<'_, 'tcx>,\n             span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n@@ -845,7 +845,7 @@ pub mod ty {\n             &self,\n             ccx: &ConstCx<'_, 'tcx>,\n             span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_fn_ptr_basics,\n@@ -866,7 +866,7 @@ pub mod ty {\n             &self,\n             ccx: &ConstCx<'_, 'tcx>,\n             span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_impl_trait,\n@@ -900,7 +900,7 @@ pub mod ty {\n             &self,\n             ccx: &ConstCx<'_, 'tcx>,\n             span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n             let mut err = feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_trait_bound,\n@@ -943,7 +943,7 @@ pub mod ty {\n             &self,\n             ccx: &ConstCx<'_, 'tcx>,\n             span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n             let mut err = feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_trait_bound,\n@@ -974,7 +974,7 @@ pub mod ty {\n             &self,\n             ccx: &ConstCx<'_, 'tcx>,\n             span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_trait_bound_opt_out,"}, {"sha": "6421ba9df0f16915ff6b3b70abe24b0234f7d2b8", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,7 +2,7 @@\n //!\n //! See the `Qualif` trait for more info.\n \n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::TraitEngine;\n use rustc_middle::mir::*;\n@@ -17,7 +17,7 @@ use super::ConstCx;\n pub fn in_any_value_of_ty<'tcx>(\n     cx: &ConstCx<'_, 'tcx>,\n     ty: Ty<'tcx>,\n-    tainted_by_errors: Option<ErrorReported>,\n+    tainted_by_errors: Option<ErrorGuaranteed>,\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),"}, {"sha": "b36ce63dda75632f6799fb07e37902b8e3b4f95c", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -21,7 +21,7 @@ use rustc_codegen_ssa::{traits::CodegenBackend, CodegenResults};\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n-use rustc_errors::{ErrorReported, PResult};\n+use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_feature::find_gated_cfg;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n@@ -73,7 +73,7 @@ const ICE_REPORT_COMPILER_FLAGS_EXCLUDE: &[&str] = &[\"metadata\", \"extra-filename\n \n const ICE_REPORT_COMPILER_FLAGS_STRIP_VALUE: &[&str] = &[\"incremental\"];\n \n-pub fn abort_on_err<T>(result: Result<T, ErrorReported>, sess: &Session) -> T {\n+pub fn abort_on_err<T>(result: Result<T, ErrorGuaranteed>, sess: &Session) -> T {\n     match result {\n         Err(..) => {\n             sess.abort_if_errors();\n@@ -235,7 +235,7 @@ fn run_compiler(\n     };\n \n     match make_input(config.opts.error_format, &matches.free) {\n-        Err(ErrorReported) => return Err(ErrorReported),\n+        Err(ErrorGuaranteed) => return Err(ErrorGuaranteed),\n         Ok(Some((input, input_file_path))) => {\n             config.input = input;\n             config.input_path = input_file_path;\n@@ -457,7 +457,7 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n fn make_input(\n     error_format: ErrorOutputType,\n     free_matches: &[String],\n-) -> Result<Option<(Input, Option<PathBuf>)>, ErrorReported> {\n+) -> Result<Option<(Input, Option<PathBuf>)>, ErrorGuaranteed> {\n     if free_matches.len() == 1 {\n         let ifile = &free_matches[0];\n         if ifile == \"-\" {\n@@ -469,7 +469,7 @@ fn make_input(\n                     error_format,\n                     \"couldn't read from stdin, as it did not contain valid UTF-8\",\n                 );\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n             if let Ok(path) = env::var(\"UNSTABLE_RUSTDOC_TEST_PATH\") {\n                 let line = env::var(\"UNSTABLE_RUSTDOC_TEST_LINE\").expect(\n@@ -1125,10 +1125,10 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n /// The compiler currently unwinds with a special sentinel value to abort\n /// compilation on fatal errors. This function catches that sentinel and turns\n /// the panic into a `Result` instead.\n-pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported> {\n+pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorGuaranteed> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n         if value.is::<rustc_errors::FatalErrorMarker>() {\n-            ErrorReported\n+            ErrorGuaranteed\n         } else {\n             panic::resume_unwind(value);\n         }"}, {"sha": "0c0c61309655c02fe10eb5a738ab4bac0e26007a", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n@@ -479,7 +479,7 @@ fn print_with_analysis(\n     tcx: TyCtxt<'_>,\n     ppm: PpMode,\n     ofile: Option<&Path>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     tcx.analysis(())?;\n     let out = match ppm {\n         Mir => {"}, {"sha": "5dc71f1620096113c04ccefde7ab58c8ceda3dcd", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,4 +1,4 @@\n-use crate::{Diagnostic, DiagnosticId, DiagnosticStyledString, ErrorReported};\n+use crate::{Diagnostic, DiagnosticId, DiagnosticStyledString, ErrorGuaranteed};\n use crate::{Handler, Level, StashKey};\n use rustc_lint_defs::Applicability;\n \n@@ -96,7 +96,7 @@ mod sealed_level_is_error {\n     impl IsError<{ Level::Error { lint: false } }> for () {}\n }\n \n-impl<'a> DiagnosticBuilder<'a, ErrorReported> {\n+impl<'a> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n     crate fn new_guaranteeing_error<const L: Level>(handler: &'a Handler, message: &str) -> Self\n@@ -120,8 +120,8 @@ impl<'a> DiagnosticBuilder<'a, ErrorReported> {\n     }\n }\n \n-// FIXME(eddyb) make `ErrorReported` impossible to create outside `.emit()`.\n-impl EmissionGuarantee for ErrorReported {\n+// FIXME(eddyb) make `ErrorGuaranteed` impossible to create outside `.emit()`.\n+impl EmissionGuarantee for ErrorGuaranteed {\n     fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n         match db.inner.state {\n             // First `.emit()` call, the `&Handler` is still available.\n@@ -136,10 +136,10 @@ impl EmissionGuarantee for ErrorReported {\n                 assert!(\n                     db.inner.diagnostic.is_error(),\n                     \"emitted non-error ({:?}) diagnostic \\\n-                     from `DiagnosticBuilder<ErrorReported>`\",\n+                     from `DiagnosticBuilder<ErrorGuaranteed>`\",\n                     db.inner.diagnostic.level,\n                 );\n-                ErrorReported\n+                ErrorGuaranteed\n             }\n             // `.emit()` was previously called, disallowed from repeating it,\n             // but can take advantage of the previous `.emit()`'s guarantee\n@@ -150,11 +150,11 @@ impl EmissionGuarantee for ErrorReported {\n                 // can be overwritten with a new one, thanks to `DerefMut`.\n                 assert!(\n                     db.inner.diagnostic.is_error(),\n-                    \"`DiagnosticBuilder<ErrorReported>`'s diagnostic \\\n+                    \"`DiagnosticBuilder<ErrorGuaranteed>`'s diagnostic \\\n                      became non-error ({:?}), after original `.emit()`\",\n                     db.inner.diagnostic.level,\n                 );\n-                ErrorReported\n+                ErrorGuaranteed\n             }\n         }\n     }\n@@ -182,7 +182,7 @@ impl<'a> DiagnosticBuilder<'a, ()> {\n     }\n }\n \n-// FIXME(eddyb) should there be a `Option<ErrorReported>` impl as well?\n+// FIXME(eddyb) should there be a `Option<ErrorGuaranteed>` impl as well?\n impl EmissionGuarantee for () {\n     fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n         match db.inner.state {"}, {"sha": "e45a57b26587a0472a62cdc32ea1a53e1129942f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -54,7 +54,7 @@ mod snippet;\n mod styled_buffer;\n pub use snippet::Style;\n \n-pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorReported>>;\n+pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorGuaranteed>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n // (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n@@ -682,7 +682,7 @@ impl Handler {\n         &self,\n         span: impl Into<MultiSpan>,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut result = self.struct_err(msg);\n         result.set_span(span);\n         result\n@@ -694,15 +694,15 @@ impl Handler {\n         span: impl Into<MultiSpan>,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut result = self.struct_span_err(span, msg);\n         result.code(code);\n         result\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         DiagnosticBuilder::new_guaranteeing_error::<{ Level::Error { lint: false } }>(self, msg)\n     }\n \n@@ -717,7 +717,7 @@ impl Handler {\n         &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut result = self.struct_err(msg);\n         result.code(code);\n         result\n@@ -728,7 +728,7 @@ impl Handler {\n         &self,\n         span: impl Into<MultiSpan>,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut result = self.struct_fatal(msg);\n         result.set_span(span);\n         result\n@@ -740,14 +740,14 @@ impl Handler {\n         span: impl Into<MultiSpan>,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut result = self.struct_span_fatal(span, msg);\n         result.code(code);\n         result\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n-    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         DiagnosticBuilder::new_guaranteeing_error::<{ Level::Fatal }>(self, msg)\n     }\n \n@@ -1343,6 +1343,6 @@ pub fn add_elided_lifetime_in_path_suggestion(\n // Useful type to use with `Result<>` indicate that an error has already\n // been reported to the user, so no need to continue checking.\n #[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq)]\n-pub struct ErrorReported;\n+pub struct ErrorGuaranteed;\n \n-rustc_data_structures::impl_stable_hash_via_hash!(ErrorReported);\n+rustc_data_structures::impl_stable_hash_via_hash!(ErrorGuaranteed);"}, {"sha": "1df48b7fe152030c02681da45971f293e6093e91", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -275,7 +275,7 @@ pub trait ProcMacro {\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n         ts: TokenStream,\n-    ) -> Result<TokenStream, ErrorReported>;\n+    ) -> Result<TokenStream, ErrorGuaranteed>;\n }\n \n impl<F> ProcMacro for F\n@@ -287,7 +287,7 @@ where\n         _ecx: &'cx mut ExtCtxt<'_>,\n         _span: Span,\n         ts: TokenStream,\n-    ) -> Result<TokenStream, ErrorReported> {\n+    ) -> Result<TokenStream, ErrorGuaranteed> {\n         // FIXME setup implicit context in TLS before calling self.\n         Ok(self(ts))\n     }\n@@ -300,7 +300,7 @@ pub trait AttrProcMacro {\n         span: Span,\n         annotation: TokenStream,\n         annotated: TokenStream,\n-    ) -> Result<TokenStream, ErrorReported>;\n+    ) -> Result<TokenStream, ErrorGuaranteed>;\n }\n \n impl<F> AttrProcMacro for F\n@@ -313,7 +313,7 @@ where\n         _span: Span,\n         annotation: TokenStream,\n         annotated: TokenStream,\n-    ) -> Result<TokenStream, ErrorReported> {\n+    ) -> Result<TokenStream, ErrorGuaranteed> {\n         // FIXME setup implicit context in TLS before calling self.\n         Ok(self(annotation, annotated))\n     }\n@@ -1076,7 +1076,7 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.sess.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n \n@@ -1174,7 +1174,7 @@ pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n     err_msg: &str,\n-) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a, ErrorReported>, bool)>> {\n+) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a, ErrorGuaranteed>, bool)>> {\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n     let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();"}, {"sha": "62ea3aa76a46c8f26cb8d4a93665600acc159841", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -62,7 +62,7 @@ crate fn annotate_err_with_kind(err: &mut Diagnostic, kind: AstFragmentKind, spa\n }\n \n fn emit_frag_parse_err(\n-    mut e: DiagnosticBuilder<'_, rustc_errors::ErrorReported>,\n+    mut e: DiagnosticBuilder<'_, rustc_errors::ErrorGuaranteed>,\n     parser: &Parser<'_>,\n     orig_parser: &mut Parser<'_>,\n     site_span: Span,"}, {"sha": "a6e1232628f9378a4ecdbce4e59523fbdcc3b810", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n use crate::base::ModuleData;\n use rustc_ast::ptr::P;\n use rustc_ast::{token, Attribute, Inline, Item};\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_parse::new_parser_from_file;\n use rustc_parse::validate_attr;\n use rustc_session::parse::ParseSess;\n@@ -39,7 +39,7 @@ pub enum ModError<'a> {\n     ModInBlock(Option<Ident>),\n     FileNotFound(Ident, PathBuf, PathBuf),\n     MultipleCandidates(Ident, PathBuf, PathBuf),\n-    ParserError(DiagnosticBuilder<'a, ErrorReported>),\n+    ParserError(DiagnosticBuilder<'a, ErrorGuaranteed>),\n }\n \n crate fn parse_external_mod(\n@@ -242,7 +242,7 @@ pub fn default_submod_path<'a>(\n }\n \n impl ModError<'_> {\n-    fn report(self, sess: &Session, span: Span) -> ErrorReported {\n+    fn report(self, sess: &Session, span: Span) -> ErrorGuaranteed {\n         let diag = &sess.parse_sess.span_diagnostic;\n         match self {\n             ModError::CircularInclusion(file_paths) => {"}, {"sha": "aefbec0e518faa1b3a8e7b1253d79189647d3dab", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_parse::nt_to_tokenstream;\n use rustc_parse::parser::ForceCollect;\n use rustc_span::{Span, DUMMY_SP};\n@@ -23,7 +23,7 @@ impl base::ProcMacro for BangProcMacro {\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n         input: TokenStream,\n-    ) -> Result<TokenStream, ErrorReported> {\n+    ) -> Result<TokenStream, ErrorGuaranteed> {\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace).map_err(|e| {\n@@ -32,7 +32,7 @@ impl base::ProcMacro for BangProcMacro {\n                 err.help(&format!(\"message: {}\", s));\n             }\n             err.emit();\n-            ErrorReported\n+            ErrorGuaranteed\n         })\n     }\n }\n@@ -48,7 +48,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n         span: Span,\n         annotation: TokenStream,\n         annotated: TokenStream,\n-    ) -> Result<TokenStream, ErrorReported> {\n+    ) -> Result<TokenStream, ErrorGuaranteed> {\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n@@ -59,7 +59,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n                     err.help(&format!(\"message: {}\", s));\n                 }\n                 err.emit();\n-                ErrorReported\n+                ErrorGuaranteed\n             })\n     }\n }"}, {"sha": "ed7ec51d6298b81a56fd926a2c4448d87dbfb07d", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -106,7 +106,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n use rustc_session::{Session, StableCrateId};\n \n@@ -204,7 +204,7 @@ pub fn prepare_session_directory(\n     sess: &Session,\n     crate_name: &str,\n     stable_crate_id: StableCrateId,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     if sess.opts.incremental.is_none() {\n         return Ok(());\n     }\n@@ -230,7 +230,7 @@ pub fn prepare_session_directory(\n                 crate_dir.display(),\n                 err\n             ));\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n     };\n \n@@ -482,7 +482,7 @@ fn generate_session_dir_path(crate_dir: &Path) -> PathBuf {\n     directory_path\n }\n \n-fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorReported> {\n+fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorGuaranteed> {\n     match std_fs::create_dir_all(path) {\n         Ok(()) => {\n             debug!(\"{} directory created successfully\", dir_tag);\n@@ -496,7 +496,7 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorRep\n                 path.display(),\n                 err\n             ));\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         }\n     }\n }\n@@ -505,7 +505,7 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorRep\n fn lock_directory(\n     sess: &Session,\n     session_dir: &Path,\n-) -> Result<(flock::Lock, PathBuf), ErrorReported> {\n+) -> Result<(flock::Lock, PathBuf), ErrorGuaranteed> {\n     let lock_file_path = lock_file_path(session_dir);\n     debug!(\"lock_directory() - lock_file: {}\", lock_file_path.display());\n \n@@ -546,7 +546,7 @@ fn lock_directory(\n                 }\n             }\n             err.emit();\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         }\n     }\n }"}, {"sha": "edb2b11c0397c3bb0216b47157f9cad26dfdc981", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -58,7 +58,7 @@ use crate::traits::{\n };\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorReported};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -230,7 +230,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     span: Span,\n     hidden_ty: Ty<'tcx>,\n     hidden_region: ty::Region<'tcx>,\n-) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n@@ -258,7 +258,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n             // explanation.\n             //\n             // (*) if not, the `tainted_by_errors` field would be set to\n-            // `Some(ErrorReported)` in any case, so we wouldn't be here at all.\n+            // `Some(ErrorGuaranteed)` in any case, so we wouldn't be here at all.\n             explain_free_region(\n                 tcx,\n                 &mut err,\n@@ -2013,7 +2013,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         trace: TypeTrace<'tcx>,\n         terr: &TypeError<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         use crate::traits::ObligationCauseCode::MatchExpressionArm;\n \n         debug!(\"report_and_explain_type_error(trace={:?}, terr={:?})\", trace, terr);\n@@ -2221,7 +2221,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let hir = self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n@@ -2647,7 +2647,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn report_inference_failure(\n         &self,\n         var_origin: RegionVariableOrigin,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let br_string = |br: ty::BoundRegionKind| {\n             let mut s = match br {\n                 ty::BrNamed(_, name) => name.to_string(),"}, {"sha": "8ff0eed71ed030fa235c31e357f79b6ac4ab2457", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::{InferCtxt, Symbol};\n use rustc_errors::{\n-    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n@@ -490,7 +490,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         arg: GenericArg<'tcx>,\n         impl_candidates: Vec<ty::TraitRef<'tcx>>,\n         error_code: TypeAnnotationNeeded,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let arg = self.resolve_vars_if_possible(arg);\n         let arg_data = self.extract_inference_diagnostics_data(arg, None);\n \n@@ -915,7 +915,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         kind: hir::GeneratorKind,\n         span: Span,\n         ty: Ty<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ty = self.resolve_vars_if_possible(ty);\n         let data = self.extract_inference_diagnostics_data(ty.into(), None);\n "}, {"sha": "0d6dbd8f34398ccf41a55753df90842b86fc7af5", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -7,7 +7,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::SubregionOrigin;\n \n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::{GenericParamKind, Ty};\n use rustc_middle::ty::Region;\n@@ -49,7 +49,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// ```\n     ///\n     /// It will later be extended to trait objects.\n-    pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n+    pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorGuaranteed> {\n         let (span, sub, sup) = self.regions()?;\n \n         if let Some(RegionResolutionError::ConcreteFailure(\n@@ -148,7 +148,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         self.suggest_adding_lifetime_params(sub, ty_sup, ty_sub, &mut err);\n \n         err.emit();\n-        Some(ErrorReported)\n+        Some(ErrorGuaranteed)\n     }\n \n     fn suggest_adding_lifetime_params("}, {"sha": "e0420291aa3f5cbb96970a5a9504afd2deca84b6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -7,14 +7,14 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::ObligationCauseCode;\n use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_errors::{Applicability, ErrorReported};\n+use rustc_errors::{Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::ty::TypeVisitor;\n use rustc_span::MultiSpan;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n-    pub(super) fn try_report_mismatched_static_lifetime(&self) -> Option<ErrorReported> {\n+    pub(super) fn try_report_mismatched_static_lifetime(&self) -> Option<ErrorGuaranteed> {\n         let error = self.error.as_ref()?;\n         debug!(\"try_report_mismatched_static_lifetime {:?}\", error);\n \n@@ -99,6 +99,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             err.span_note(impl_span, \"...does not necessarily outlive the static lifetime introduced by the compatible `impl`\");\n         }\n         err.emit();\n-        Some(ErrorReported)\n+        Some(ErrorGuaranteed)\n     }\n }"}, {"sha": "c7bfa686c04dca66b99aa3d5a4a176ca6d29524f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError::*;\n use crate::infer::InferCtxt;\n-use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::source_map::Span;\n \n@@ -46,17 +46,17 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         // Due to the improved diagnostics returned by the MIR borrow checker, only a subset of\n         // the nice region errors are required when running under the MIR borrow checker.\n         self.try_report_named_anon_conflict().or_else(|| self.try_report_placeholder_conflict())\n     }\n \n-    pub fn try_report(&self) -> Option<ErrorReported> {\n+    pub fn try_report(&self) -> Option<ErrorGuaranteed> {\n         self.try_report_from_nll()\n             .map(|mut diag| {\n                 diag.emit();\n-                ErrorReported\n+                ErrorGuaranteed\n             })\n             .or_else(|| self.try_report_impl_not_conforming_to_trait())\n             .or_else(|| self.try_report_anon_anon_conflict())"}, {"sha": "3de5273d8c78c6c377a61b404e8feab7bfbcdcae", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,15 +2,15 @@\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_middle::ty;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n     pub(super) fn try_report_named_anon_conflict(\n         &self,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         let (span, sub, sup) = self.regions()?;\n \n         debug!("}, {"sha": "e2185d861337938026f715f9ff5c02c88d88ec64", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use crate::infer::ValuePairs;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -19,7 +19,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n     /// an anonymous region, emit a descriptive diagnostic error.\n     pub(super) fn try_report_placeholder_conflict(\n         &self,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         match &self.error {\n             ///////////////////////////////////////////////////////////////////////////\n             // NB. The ordering of cases in this match is very\n@@ -155,7 +155,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         sub_placeholder: Option<Region<'tcx>>,\n         sup_placeholder: Option<Region<'tcx>>,\n         value_pairs: &ValuePairs<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         let (expected_substs, found_substs, trait_def_id) = match value_pairs {\n             ValuePairs::TraitRefs(ExpectedFound { expected, found })\n                 if expected.def_id == found.def_id =>\n@@ -203,7 +203,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         trait_def_id: DefId,\n         expected_substs: SubstsRef<'tcx>,\n         actual_substs: SubstsRef<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let span = cause.span(self.tcx());\n         let msg = format!(\n             \"implementation of `{}` is not general enough\","}, {"sha": "a6de0c3d9fb5cd292084c0b377b2a0f400d620dd", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -5,7 +5,7 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCauseCode, UnifyReceiverContext};\n use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n@@ -20,7 +20,7 @@ use std::ops::ControlFlow;\n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static `impl Trait`,\n     /// `dyn Trait` or if a method call on a trait object introduces a static requirement.\n-    pub(super) fn try_report_static_impl_trait(&self) -> Option<ErrorReported> {\n+    pub(super) fn try_report_static_impl_trait(&self) -> Option<ErrorGuaranteed> {\n         debug!(\"try_report_static_impl_trait(error={:?})\", self.error);\n         let tcx = self.tcx();\n         let (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans) = match self.error.as_ref()? {\n@@ -85,7 +85,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     );\n                     if self.find_impl_on_dyn_trait(&mut err, param.param_ty, &ctxt) {\n                         err.emit();\n-                        return Some(ErrorReported);\n+                        return Some(ErrorGuaranteed);\n                     } else {\n                         err.cancel();\n                     }\n@@ -280,7 +280,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         );\n \n         err.emit();\n-        Some(ErrorReported)\n+        Some(ErrorGuaranteed)\n     }\n }\n "}, {"sha": "673c112163e1b09ed966231166db1f7306f4588c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, Subtype};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n@@ -19,7 +19,7 @@ use std::ops::ControlFlow;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`.\n-    pub(super) fn try_report_impl_not_conforming_to_trait(&self) -> Option<ErrorReported> {\n+    pub(super) fn try_report_impl_not_conforming_to_trait(&self) -> Option<ErrorGuaranteed> {\n         let error = self.error.as_ref()?;\n         debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n         if let RegionResolutionError::SubSupConflict(\n@@ -46,7 +46,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             *sub_found,\n                             *trait_item_def_id,\n                         );\n-                        return Some(ErrorReported);\n+                        return Some(ErrorGuaranteed);\n                     }\n                 }\n             }\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     impl_item_def_id,\n                     trait_item_def_id,\n                 );\n-                return Some(ErrorReported);\n+                return Some(ErrorGuaranteed);\n             }\n         }\n         None"}, {"sha": "e6c8dc302b6ca32ee16bec0b32b416b74cc20458", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n-use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Region};\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         sub: Region<'tcx>,\n         sup: Region<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         match origin {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         placeholder_origin: SubregionOrigin<'tcx>,\n         sub: Region<'tcx>,\n         sup: Region<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         // I can't think how to do better than this right now. -nikomatsakis\n         debug!(?placeholder_origin, ?sub, ?sup, \"report_placeholder_failure\");\n         match placeholder_origin {"}, {"sha": "5697e73f73a707cd9ea33e0de8ed6ae4c980b080", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::Rollback;\n use rustc_data_structures::unify as ut;\n-use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n@@ -1475,9 +1475,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         sp: Span,\n         mk_diag: M,\n         actual_ty: Ty<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported>\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>\n     where\n-        M: FnOnce(String) -> DiagnosticBuilder<'tcx, ErrorReported>,\n+        M: FnOnce(String) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n     {\n         let actual_ty = self.resolve_vars_if_possible(actual_ty);\n         debug!(\"type_error_struct_with_diag({:?}, {:?})\", sp, actual_ty);\n@@ -1498,7 +1498,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n         err: TypeError<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let trace = TypeTrace::types(cause, true, expected, actual);\n         self.report_and_explain_type_error(trace, &err)\n     }\n@@ -1509,7 +1509,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         expected: ty::Const<'tcx>,\n         actual: ty::Const<'tcx>,\n         err: TypeError<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let trace = TypeTrace::consts(cause, true, expected, actual);\n         self.report_and_explain_type_error(trace, &err)\n     }"}, {"sha": "5e93c002168c6d517dabb971927667ff62be3444", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,7 +2,7 @@ use super::ObjectSafetyViolation;\n \n use crate::infer::InferCtxt;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n@@ -17,7 +17,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n         requirement: &dyn fmt::Display,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let msg = \"impl has stricter requirements than trait\";\n         let sp = self.tcx.sess.source_map().guess_head_span(error_span);\n \n@@ -40,7 +40,7 @@ pub fn report_object_safety_error<'tcx>(\n     span: Span,\n     trait_def_id: DefId,\n     violations: &[ObjectSafetyViolation],\n-) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n     let trait_str = tcx.def_path_str(trait_def_id);\n     let trait_span = tcx.hir().get_if_local(trait_def_id).and_then(|node| match node {\n         hir::Node::Item(item) => Some(item.ident.span),"}, {"sha": "7f4a4ffadec148a4474a411f6430d975c92ceda0", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n-use rustc_errors::{ErrorReported, Handler};\n+use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_lint::LintStore;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n@@ -23,7 +23,7 @@ use rustc_span::symbol::sym;\n use std::path::PathBuf;\n use std::result;\n \n-pub type Result<T> = result::Result<T, ErrorReported>;\n+pub type Result<T> = result::Result<T, ErrorGuaranteed>;\n \n /// Represents a compiler session.\n ///"}, {"sha": "2cdcf0b11d1510801ac6d4ef860d811ae17c97fe", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_errors::{Applicability, ErrorReported, PResult};\n+use rustc_errors::{Applicability, ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n@@ -373,7 +373,7 @@ pub fn configure_and_expand(\n         if recursion_limit_hit {\n             // If we hit a recursion limit, exit early to avoid later passes getting overwhelmed\n             // with a large AST\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         } else {\n             Ok(krate)\n         }\n@@ -758,7 +758,7 @@ pub fn prepare_outputs(\n                         executable\",\n                     input_path.display()\n                 ));\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n             if let Some(dir_path) = output_conflicts_with_dir(&output_paths) {\n                 sess.err(&format!(\n@@ -767,15 +767,15 @@ pub fn prepare_outputs(\n                     input_path.display(),\n                     dir_path.display()\n                 ));\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         }\n     }\n \n     if let Some(ref dir) = compiler.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n             sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n     }\n \n@@ -788,7 +788,7 @@ pub fn prepare_outputs(\n         if let Some(ref dir) = compiler.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n                 sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         }\n     }\n@@ -993,7 +993,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     // lint warnings and so on -- kindck used to do this abort, but\n     // kindck is gone now). -nmatsakis\n     if sess.has_errors() {\n-        return Err(ErrorReported);\n+        return Err(ErrorGuaranteed);\n     }\n \n     sess.time(\"misc_checking_3\", || {"}, {"sha": "d0e533b457159232c5a193bb57ac661732a2981f", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -5,7 +5,7 @@ use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n@@ -123,7 +123,7 @@ impl<'tcx> Queries<'tcx> {\n         self.parse.compute(|| {\n             passes::parse(self.session(), &self.compiler.input).map_err(|mut parse_error| {\n                 parse_error.emit();\n-                ErrorReported\n+                ErrorGuaranteed\n             })\n         })\n     }"}, {"sha": "c9e404903f500e6c8b1bc21db6f3bd0f900e0801", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -232,7 +232,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                 fn into_diagnostic(\n                     self,\n                     #sess: &'__session_diagnostic_sess rustc_session::Session\n-                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, rustc_errors::ErrorReported> {\n+                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, rustc_errors::ErrorGuaranteed> {\n                     #implementation\n                 }\n             }"}, {"sha": "98cb90296a521ea48efbc0eb6d16604f1f00107e", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use crate::mir::interpret::ConstValue;\n use crate::ty::{layout, query::TyCtxtAt, tls, FnSig, Ty};\n \n use rustc_data_structures::sync::Lock;\n-use rustc_errors::{pluralize, struct_span_err, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{pluralize, struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::def_id::DefId;\n@@ -15,16 +15,16 @@ use std::{any::Any, backtrace::Backtrace, fmt};\n pub enum ErrorHandled {\n     /// Already reported an error for this evaluation, and the compilation is\n     /// *guaranteed* to fail. Warnings/lints *must not* produce `Reported`.\n-    Reported(ErrorReported),\n+    Reported(ErrorGuaranteed),\n     /// Already emitted a lint for this evaluation.\n     Linted,\n     /// Don't emit an error, the evaluation failed because the MIR was generic\n     /// and the substs didn't fully monomorphize it.\n     TooGeneric,\n }\n \n-impl From<ErrorReported> for ErrorHandled {\n-    fn from(err: ErrorReported) -> ErrorHandled {\n+impl From<ErrorGuaranteed> for ErrorHandled {\n+    fn from(err: ErrorGuaranteed) -> ErrorHandled {\n         ErrorHandled::Reported(err)\n     }\n }\n@@ -39,7 +39,7 @@ pub type EvalToConstValueResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n pub fn struct_error<'tcx>(\n     tcx: TyCtxtAt<'tcx>,\n     msg: &str,\n-) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n     struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n }\n \n@@ -91,7 +91,7 @@ fn print_backtrace(backtrace: &Backtrace) {\n impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     fn from(err: ErrorHandled) -> Self {\n         match err {\n-            ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+            ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n                 err_inval!(ReferencedConstant)\n             }\n             ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n@@ -100,8 +100,8 @@ impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     }\n }\n \n-impl From<ErrorReported> for InterpErrorInfo<'_> {\n-    fn from(err: ErrorReported) -> Self {\n+impl From<ErrorGuaranteed> for InterpErrorInfo<'_> {\n+    fn from(err: ErrorGuaranteed) -> Self {\n         InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err)).into()\n     }\n }\n@@ -141,7 +141,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// which already produced an error.\n     ReferencedConstant,\n     /// Abort in case errors are already reported.\n-    AlreadyReported(ErrorReported),\n+    AlreadyReported(ErrorGuaranteed),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An error occurred during FnAbi computation: the passed --target lacks FFI support\n@@ -160,7 +160,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n-            AlreadyReported(ErrorReported) => {\n+            AlreadyReported(ErrorGuaranteed) => {\n                 write!(f, \"encountered constants with type errors, stopping evaluation\")\n             }\n             Layout(ref err) => write!(f, \"{}\", err),"}, {"sha": "ce3d6f348d194c09430219a3b8a5bef1132b0107", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -13,7 +13,7 @@ use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n \n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n@@ -286,7 +286,7 @@ pub struct Body<'tcx> {\n     predecessor_cache: PredecessorCache,\n     is_cyclic: GraphIsCyclicCache,\n \n-    pub tainted_by_errors: Option<ErrorReported>,\n+    pub tainted_by_errors: Option<ErrorGuaranteed>,\n }\n \n impl<'tcx> Body<'tcx> {\n@@ -300,7 +300,7 @@ impl<'tcx> Body<'tcx> {\n         var_debug_info: Vec<VarDebugInfo<'tcx>>,\n         span: Span,\n         generator_kind: Option<GeneratorKind>,\n-        tainted_by_errors: Option<ErrorReported>,\n+        tainted_by_errors: Option<ErrorGuaranteed>,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place.\n         assert!("}, {"sha": "c237ba5c4ba201cb146bc508b9a33d2db554c94b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use crate::mir::{Body, Promoted};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n@@ -245,7 +245,7 @@ pub struct BorrowCheckResult<'tcx> {\n     pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n-    pub tainted_by_errors: Option<ErrorReported>,\n+    pub tainted_by_errors: Option<ErrorGuaranteed>,\n }\n \n /// The result of the `mir_const_qualif` query.\n@@ -259,7 +259,7 @@ pub struct ConstQualifs {\n     pub needs_drop: bool,\n     pub needs_non_const_drop: bool,\n     pub custom_eq: bool,\n-    pub tainted_by_errors: Option<ErrorReported>,\n+    pub tainted_by_errors: Option<ErrorGuaranteed>,\n }\n \n /// After we borrow check a closure, we are left with various"}, {"sha": "6b572690e21137b50907ca98f50be270fc53ef58", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -142,7 +142,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query analysis(key: ()) -> Result<(), ErrorReported> {\n+    query analysis(key: ()) -> Result<(), ErrorGuaranteed> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }\n     }\n@@ -312,7 +312,7 @@ rustc_queries! {\n     /// Try to build an abstract representation of the given constant.\n     query thir_abstract_const(\n         key: DefId\n-    ) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorReported> {\n+    ) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorGuaranteed> {\n         desc {\n             |tcx| \"building an abstract representation for {}\", tcx.def_path_str(key),\n         }\n@@ -321,7 +321,7 @@ rustc_queries! {\n     /// Try to build an abstract representation of the given constant.\n     query thir_abstract_const_of_const_arg(\n         key: (LocalDefId, DefId)\n-    ) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorReported> {\n+    ) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorGuaranteed> {\n         desc {\n             |tcx|\n             \"building an abstract representation for the const argument {}\",\n@@ -1107,7 +1107,7 @@ rustc_queries! {\n \n     query codegen_fulfill_obligation(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n-    ) -> Result<&'tcx ImplSource<'tcx, ()>, ErrorReported> {\n+    ) -> Result<&'tcx ImplSource<'tcx, ()>, ErrorGuaranteed> {\n         cache_on_disk_if { true }\n         desc { |tcx|\n             \"checking if `{}` fulfills its obligations\",\n@@ -1890,20 +1890,20 @@ rustc_queries! {\n     ///  * `Ok(Some(instance))` on success\n     ///  * `Ok(None)` when the `SubstsRef` are still too generic,\n     ///    and therefore don't allow finding the final `Instance`\n-    ///  * `Err(ErrorReported)` when the `Instance` resolution process\n+    ///  * `Err(ErrorGuaranteed)` when the `Instance` resolution process\n     ///    couldn't complete due to errors elsewhere - this is distinct\n     ///    from `Ok(None)` to avoid misleading diagnostics when an error\n     ///    has already been/will be emitted, for the original cause\n     query resolve_instance(\n         key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>\n-    ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n+    ) -> Result<Option<ty::Instance<'tcx>>, ErrorGuaranteed> {\n         desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n         remap_env_constness\n     }\n \n     query resolve_instance_of_const_arg(\n         key: ty::ParamEnvAnd<'tcx, (LocalDefId, DefId, SubstsRef<'tcx>)>\n-    ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n+    ) -> Result<Option<ty::Instance<'tcx>>, ErrorGuaranteed> {\n         desc {\n             \"resolving instance of the const argument `{}`\",\n             ty::Instance::new(key.value.0.to_def_id(), key.value.2),"}, {"sha": "e02ed414574b43f41bc38d6314694e23e9faf57d", "filename": "compiler/rustc_middle/src/thir/abstract_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::mir;\n use crate::ty::{self, Ty, TyCtxt};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n \n rustc_index::newtype_index! {\n     /// An index into an `AbstractConst`.\n@@ -31,13 +31,13 @@ pub enum Node<'tcx> {\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n pub enum NotConstEvaluatable {\n-    Error(ErrorReported),\n+    Error(ErrorGuaranteed),\n     MentionsInfer,\n     MentionsParam,\n }\n \n-impl From<ErrorReported> for NotConstEvaluatable {\n-    fn from(e: ErrorReported) -> NotConstEvaluatable {\n+impl From<ErrorGuaranteed> for NotConstEvaluatable {\n+    fn from(e: ErrorGuaranteed) -> NotConstEvaluatable {\n         NotConstEvaluatable::Error(e)\n     }\n }\n@@ -51,7 +51,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn thir_abstract_const_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<rustc_hir::def_id::DefId>,\n-    ) -> Result<Option<&'tcx [Node<'tcx>]>, ErrorReported> {\n+    ) -> Result<Option<&'tcx [Node<'tcx>]>, ErrorGuaranteed> {\n         if let Some((did, param_did)) = def.as_const_arg() {\n             self.thir_abstract_const_of_const_arg((did, param_did))\n         } else {"}, {"sha": "4ff8e61ee743758c8b15bcb6d1e9bb96944f7949", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,7 +2,7 @@ use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_span::symbol::sym;\n \n@@ -243,11 +243,11 @@ pub fn ancestors<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     start_from_impl: DefId,\n-) -> Result<Ancestors<'tcx>, ErrorReported> {\n+) -> Result<Ancestors<'tcx>, ErrorGuaranteed> {\n     let specialization_graph = tcx.specialization_graph_of(trait_def_id);\n \n     if specialization_graph.has_errored || tcx.type_of(start_from_impl).references_error() {\n-        Err(ErrorReported)\n+        Err(ErrorGuaranteed)\n     } else {\n         Ok(Ancestors {\n             trait_def_id,"}, {"sha": "d5a8f5863616ccbf2a18f1b93019f025d5e6f530", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::HashingControls;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -424,7 +424,7 @@ impl<'tcx> AdtDef {\n             }\n             Err(err) => {\n                 let msg = match err {\n-                    ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                    ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n                         \"enum discriminant evaluation failed\"\n                     }\n                     ErrorHandled::TooGeneric => \"enum discriminant depends on generics\","}, {"sha": "e72828dd529593139c504acec20655e856c48a7a", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -5,7 +5,7 @@ use crate::ty::{\n     TyCtxt, TypeFoldable,\n };\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_macros::HashStable;\n@@ -264,7 +264,7 @@ impl<'tcx> Const<'tcx> {\n         if let Some(val) = self.val().try_eval(tcx, param_env) {\n             match val {\n                 Ok(val) => Const::from_value(tcx, val, self.ty()),\n-                Err(ErrorReported) => tcx.const_error(self.ty()),\n+                Err(ErrorGuaranteed) => tcx.const_error(self.ty()),\n             }\n         } else {\n             self"}, {"sha": "b8da35abd47033dc875b4a186119d1be77bba092", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -5,7 +5,7 @@ use crate::mir::Promoted;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::ParamEnv;\n use crate::ty::{self, TyCtxt, TypeFoldable};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_target::abi::Size;\n@@ -130,7 +130,7 @@ impl<'tcx> ConstKind<'tcx> {\n         self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ParamEnv<'tcx>,\n-    ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {\n+    ) -> Option<Result<ConstValue<'tcx>, ErrorGuaranteed>> {\n         if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n "}, {"sha": "d32276364e0f93fc8638215e9a782309d94d28d2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -33,7 +33,7 @@ use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -369,7 +369,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// Resolved definitions for `<T>::X` associated paths and\n     /// method calls, including those of overloaded operators.\n-    type_dependent_defs: ItemLocalMap<Result<(DefKind, DefId), ErrorReported>>,\n+    type_dependent_defs: ItemLocalMap<Result<(DefKind, DefId), ErrorGuaranteed>>,\n \n     /// Resolved field indices for field accesses in expressions (`S { field }`, `obj.field`)\n     /// or patterns (`S { field }`). The index is often useful by itself, but to learn more\n@@ -479,8 +479,8 @@ pub struct TypeckResults<'tcx> {\n     pub used_trait_imports: Lrc<FxHashSet<LocalDefId>>,\n \n     /// If any errors occurred while type-checking this body,\n-    /// this field will be set to `Some(ErrorReported)`.\n-    pub tainted_by_errors: Option<ErrorReported>,\n+    /// this field will be set to `Some(ErrorGuaranteed)`.\n+    pub tainted_by_errors: Option<ErrorGuaranteed>,\n \n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n@@ -569,7 +569,7 @@ impl<'tcx> TypeckResults<'tcx> {\n \n     pub fn type_dependent_defs(\n         &self,\n-    ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {\n+    ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorGuaranteed>> {\n         LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }\n     }\n \n@@ -584,7 +584,7 @@ impl<'tcx> TypeckResults<'tcx> {\n \n     pub fn type_dependent_defs_mut(\n         &mut self,\n-    ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {\n+    ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorGuaranteed>> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }\n     }\n "}, {"sha": "00b3639a99776d57aa119f1ccc01732cc348195e", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,7 +2,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::LangItem;\n@@ -349,7 +349,7 @@ impl<'tcx> Instance<'tcx> {\n     /// in a monomorphic context (i.e., like during codegen), then it is guaranteed to return\n     /// `Ok(Some(instance))`.\n     ///\n-    /// Returns `Err(ErrorReported)` when the `Instance` resolution process\n+    /// Returns `Err(ErrorGuaranteed)` when the `Instance` resolution process\n     /// couldn't complete due to errors elsewhere - this is distinct\n     /// from `Ok(None)` to avoid misleading diagnostics when an error\n     /// has already been/will be emitted, for the original cause\n@@ -358,7 +358,7 @@ impl<'tcx> Instance<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n-    ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    ) -> Result<Option<Instance<'tcx>>, ErrorGuaranteed> {\n         Instance::resolve_opt_const_arg(\n             tcx,\n             param_env,\n@@ -374,7 +374,7 @@ impl<'tcx> Instance<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n-    ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    ) -> Result<Option<Instance<'tcx>>, ErrorGuaranteed> {\n         // All regions in the result of this query are erased, so it's\n         // fine to erase all of the input regions.\n "}, {"sha": "03e4a7dcefd7194dbbc28f895a082394ddc55f66", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};"}, {"sha": "2d51462221c07e8e1fef6f4e9eb164fc46c85dca", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -260,7 +260,7 @@ TrivialTypeFoldableAndLiftImpls! {\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n     ::rustc_span::Span,\n-    ::rustc_errors::ErrorReported,\n+    ::rustc_errors::ErrorGuaranteed,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "6100eb48a18634892a6c0ba7c7224253e9111efb", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathHash;\n \n use rustc_data_structures::fx::FxIndexMap;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_macros::HashStable;\n \n /// A trait's definition with type information.\n@@ -110,7 +110,7 @@ impl<'tcx> TraitDef {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         of_impl: DefId,\n-    ) -> Result<specialization_graph::Ancestors<'tcx>, ErrorReported> {\n+    ) -> Result<specialization_graph::Ancestors<'tcx>, ErrorGuaranteed> {\n         specialization_graph::ancestors(tcx, self.def_id, of_impl)\n     }\n }"}, {"sha": "04e766d16cc49c88fec0d6869d32732127b2885a", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -15,7 +15,7 @@ use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -352,7 +352,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn calculate_dtor(\n         self,\n         adt_did: DefId,\n-        validate: impl Fn(Self, DefId) -> Result<(), ErrorReported>,\n+        validate: impl Fn(Self, DefId) -> Result<(), ErrorGuaranteed>,\n     ) -> Option<ty::Destructor> {\n         let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);"}, {"sha": "e12d075efa9b603a9c77ae4b5c774c49ffaaa62c", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -2,7 +2,7 @@ use crate::build;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::scope::DropKind;\n use crate::thir::pattern::pat_from_hir;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -714,7 +714,7 @@ fn construct_error<'a, 'tcx>(\n     hir_id: hir::HirId,\n     body_id: hir::BodyId,\n     body_owner_kind: hir::BodyOwnerKind,\n-    err: ErrorReported,\n+    err: ErrorGuaranteed,\n ) -> Body<'tcx> {\n     let tcx = infcx.tcx;\n     let span = tcx.hir().span(hir_id);"}, {"sha": "27a6b5beb627cb2c0360ea67a899b9194d2fe365", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -7,7 +7,7 @@ use super::{PatCtxt, PatternError};\n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n use rustc_errors::{\n-    error_code, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+    error_code, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def::*;\n@@ -42,7 +42,7 @@ fn create_e0004(\n     sess: &Session,\n     sp: Span,\n     error_message: String,\n-) -> DiagnosticBuilder<'_, ErrorReported> {\n+) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n "}, {"sha": "819cffd3a9bf1dc0e0acccc53c537e08835d3f6c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -180,7 +180,7 @@\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n-use rustc_errors::{ErrorReported, FatalError};\n+use rustc_errors::{ErrorGuaranteed, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -716,7 +716,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     match self.tcx.const_eval_resolve(param_env, ct, None) {\n                         // The `monomorphize` call should have evaluated that constant already.\n                         Ok(val) => val,\n-                        Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => return,\n+                        Err(ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted) => {\n+                            return;\n+                        }\n                         Err(ErrorHandled::TooGeneric) => span_bug!(\n                             self.body.source_info(location).span,\n                             \"collection encountered polymorphic constant: {:?}\",\n@@ -748,7 +750,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         substituted_constant,\n                         val\n                     ),\n-                    Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n+                    Err(ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.body.source_info(location).span,\n                         \"collection encountered polymorphic constant: {}\","}, {"sha": "601a39e69ab9d0cbfbe02618645483f6da306495", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::tokenstream::{Spacing, TokenStream};\n use rustc_ast::util::unicode::contains_text_flow_control_chars;\n use rustc_errors::{\n-    error_code, Applicability, DiagnosticBuilder, ErrorReported, FatalError, PResult,\n+    error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError, PResult,\n };\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n@@ -129,7 +129,7 @@ impl<'a> StringReader<'a> {\n         to_pos: BytePos,\n         m: &str,\n         c: char,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.sess\n             .span_diagnostic\n             .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))"}, {"sha": "c7aa9ffc7937d10f7c06c72e6dd24dd1f06da6b3", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorReported};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n@@ -57,7 +57,7 @@ impl Error {\n         self,\n         sp: impl Into<MultiSpan>,\n         handler: &Handler,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         match self {\n             Error::UselessDocComment => {\n                 let mut err = struct_span_err!(\n@@ -159,15 +159,15 @@ impl<'a> Parser<'a> {\n         &self,\n         sp: S,\n         err: Error,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         err.span_err(sp, self.diagnostic())\n     }\n \n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         m: &str,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.sess.span_diagnostic.struct_span_err(sp, m)\n     }\n \n@@ -183,7 +183,7 @@ impl<'a> Parser<'a> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n \n-    pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a, ErrorReported> {\n+    pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = self.struct_span_err(\n             self.token.span,\n             &format!(\"expected identifier, found {}\", super::token_descr(&self.token)),\n@@ -729,7 +729,7 @@ impl<'a> Parser<'a> {\n     /// encounter a parse error when encountering the first `,`.\n     pub(super) fn check_mistyped_turbofish_with_multiple_type_params(\n         &mut self,\n-        mut e: DiagnosticBuilder<'a, ErrorReported>,\n+        mut e: DiagnosticBuilder<'a, ErrorGuaranteed>,\n         expr: &mut P<Expr>,\n     ) -> PResult<'a, ()> {\n         if let ExprKind::Binary(binop, _, _) = &expr.kind\n@@ -1451,7 +1451,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn recover_closing_delimiter(\n         &mut self,\n         tokens: &[TokenKind],\n-        mut err: DiagnosticBuilder<'a, ErrorReported>,\n+        mut err: DiagnosticBuilder<'a, ErrorGuaranteed>,\n     ) -> PResult<'a, bool> {\n         let mut pos = None;\n         // We want to use the last closing delim that would apply.\n@@ -1822,7 +1822,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn expected_expression_found(&self) -> DiagnosticBuilder<'a, ErrorReported> {\n+    pub(super) fn expected_expression_found(&self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let (span, msg) = match (&self.token.kind, self.subparser_name) {\n             (&token::Eof, Some(origin)) => {\n                 let sp = self.sess.source_map().next_point(self.prev_token.span);\n@@ -2028,7 +2028,7 @@ impl<'a> Parser<'a> {\n     pub fn recover_const_arg(\n         &mut self,\n         start: Span,\n-        mut err: DiagnosticBuilder<'a, ErrorReported>,\n+        mut err: DiagnosticBuilder<'a, ErrorGuaranteed>,\n     ) -> PResult<'a, GenericArg> {\n         let is_op_or_dot = AssocOp::from_token(&self.token)\n             .and_then(|op| {\n@@ -2095,7 +2095,7 @@ impl<'a> Parser<'a> {\n     /// Creates a dummy const argument, and reports that the expression must be enclosed in braces\n     pub fn dummy_const_arg_needs_braces(\n         &self,\n-        mut err: DiagnosticBuilder<'a, ErrorReported>,\n+        mut err: DiagnosticBuilder<'a, ErrorGuaranteed>,\n         span: Span,\n     ) -> GenericArg {\n         err.multipart_suggestion(\n@@ -2115,7 +2115,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn incorrect_move_async_order_found(\n         &self,\n         move_async_span: Span,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err =\n             self.struct_span_err(move_async_span, \"the order of `move` and `async` is incorrect\");\n         err.span_suggestion_verbose("}, {"sha": "df865d77b9bb4cc5d40a66adc61c72a4f305ebfc", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported, PResult};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n@@ -2126,9 +2126,9 @@ impl<'a> Parser<'a> {\n     fn error_missing_if_then_block(\n         &self,\n         if_span: Span,\n-        err: Option<DiagnosticBuilder<'a, ErrorReported>>,\n+        err: Option<DiagnosticBuilder<'a, ErrorGuaranteed>>,\n         binop_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let msg = \"this `if` expression has a condition, but no block\";\n \n         let mut err = if let Some(mut err) = err {"}, {"sha": "ae46bfe3540835e01065b3e9a9b6f3c8c187c053", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::{EnumDef, FieldDef, Generics, TraitRef, Ty, TyKind, Variant, Vari\n use rustc_ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, VisibilityKind};\n use rustc_ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, ErrorReported, PResult, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, ErrorGuaranteed, PResult, StashKey};\n use rustc_span::edition::{Edition, LATEST_STABLE_EDITION};\n use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n@@ -799,7 +799,7 @@ impl<'a> Parser<'a> {\n         before_where_clause_span: Span,\n         after_predicates: &[WherePredicate],\n         after_where_clause_span: Span,\n-    ) -> ErrorReported {\n+    ) -> ErrorGuaranteed {\n         let mut err =\n             self.struct_span_err(after_where_clause_span, \"where clause not allowed here\");\n         if !after_predicates.is_empty() {"}, {"sha": "4e229918b6362aeccb2031da61f6e5060ba427c0", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -32,7 +32,9 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::PResult;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported, FatalError};\n+use rustc_errors::{\n+    struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError,\n+};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -877,7 +879,7 @@ impl<'a> Parser<'a> {\n     fn recover_missing_braces_around_closure_body(\n         &mut self,\n         closure_spans: ClosureSpans,\n-        mut expect_err: DiagnosticBuilder<'_, ErrorReported>,\n+        mut expect_err: DiagnosticBuilder<'_, ErrorGuaranteed>,\n     ) -> PResult<'a, ()> {\n         let initial_semicolon = self.token.span;\n \n@@ -1429,7 +1431,7 @@ impl<'a> Parser<'a> {\n crate fn make_unclosed_delims_error(\n     unmatched: UnmatchedBrace,\n     sess: &ParseSess,\n-) -> Option<DiagnosticBuilder<'_, ErrorReported>> {\n+) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n     // `None` here means an `Eof` was found. We already emit those errors elsewhere, we add them to\n     // `unmatched_braces` only for error recovery in the `Parser`.\n     let found_delim = unmatched.found_delim?;"}, {"sha": "67bbbf249369da56d017609aaad1e7b374000b8d", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::{\n     PatField, PatKind, Path, QSelf, RangeEnd, RangeSyntax,\n };\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported, PResult};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n \n@@ -678,7 +678,7 @@ impl<'a> Parser<'a> {\n \n     fn fatal_unexpected_non_pat(\n         &mut self,\n-        err: DiagnosticBuilder<'a, ErrorReported>,\n+        err: DiagnosticBuilder<'a, ErrorGuaranteed>,\n         expected: Expected,\n     ) -> PResult<'a, P<Pat>> {\n         err.cancel();\n@@ -914,7 +914,7 @@ impl<'a> Parser<'a> {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut ate_comma = true;\n-        let mut delayed_err: Option<DiagnosticBuilder<'a, ErrorReported>> = None;\n+        let mut delayed_err: Option<DiagnosticBuilder<'a, ErrorGuaranteed>> = None;\n         let mut etc_span = None;\n \n         while self.token != token::CloseDelim(token::Brace) {"}, {"sha": "e3bcd945db716f906a3b7d5bfe582ccb3f1cb99a", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -18,7 +18,7 @@ use rustc_ast::{\n };\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt};\n use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n \n@@ -415,7 +415,7 @@ impl<'a> Parser<'a> {\n     fn error_block_no_opening_brace_msg(\n         &mut self,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let sp = self.token.span;\n         let mut e = self.struct_span_err(sp, msg);\n         let do_not_suggest_help = self.token.is_keyword(kw::In) || self.token == token::Colon;"}, {"sha": "7ca668f8a1f064db235d77d06168254005e0ea21", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -7,7 +7,7 @@ use crate::query::caches::QueryCache;\n use crate::query::{QueryContext, QueryState};\n \n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use std::fmt::Debug;\n use std::hash::Hash;\n \n@@ -27,7 +27,7 @@ pub struct QueryVtable<CTX: QueryContext, K, V> {\n \n     pub compute: fn(CTX::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n-    pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorReported>) -> V,\n+    pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorGuaranteed>) -> V,\n     pub try_load_from_disk: Option<fn(CTX, SerializedDepNodeIndex) -> Option<V>>,\n }\n "}, {"sha": "2a07d9b7f809c90954c1cf2430e9276f1b8c53ae", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,9 @@ use crate::query::{QueryContext, QueryStackFrame};\n use rustc_hir::def::DefKind;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, ErrorReported, Handler, Level};\n+use rustc_errors::{\n+    struct_span_err, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, Level,\n+};\n use rustc_session::Session;\n use rustc_span::Span;\n \n@@ -530,7 +532,7 @@ pub fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry) {\n pub(crate) fn report_cycle<'a>(\n     sess: &'a Session,\n     CycleError { usage, cycle: stack }: CycleError,\n-) -> DiagnosticBuilder<'a, ErrorReported> {\n+) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     assert!(!stack.is_empty());\n \n     let fix_span = |span: Span, query: &QueryStackFrame| {"}, {"sha": "bd4e1ddd25c46a393f9dad9c13b889ff662347ce", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_errors::{DiagnosticBuilder, ErrorReported, FatalError};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, FatalError};\n use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n use std::cell::Cell;\n@@ -118,7 +118,7 @@ where\n fn mk_cycle<CTX, V, R>(\n     tcx: CTX,\n     error: CycleError,\n-    handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorReported>) -> V,\n+    handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorGuaranteed>) -> V,\n     cache: &dyn crate::query::QueryStorage<Value = V, Stored = R>,\n ) -> R\n where"}, {"sha": "e88b6a57376c38593ddef3b725d72d161af0162f", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -3,7 +3,9 @@ use std::ptr;\n use rustc_ast::{self as ast, Path};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n@@ -110,7 +112,7 @@ impl<'a> Resolver<'a> {\n         &self,\n         span: Span,\n         resolution_error: ResolutionError<'_>,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         match resolution_error {\n             ResolutionError::GenericParamsFromOuterFunction(outer_res, has_generic_params) => {\n                 let mut err = struct_span_err!(\n@@ -627,7 +629,7 @@ impl<'a> Resolver<'a> {\n     crate fn report_vis_error(\n         &self,\n         vis_resolution_error: VisResolutionError<'_>,\n-    ) -> ErrorReported {\n+    ) -> ErrorGuaranteed {\n         match vis_resolution_error {\n             VisResolutionError::Relative2018(span, path) => {\n                 let mut err = self.session.struct_span_err("}, {"sha": "9e38428660e2af6498038716fe77682c0b1d5bda", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::{\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n-    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n@@ -135,7 +135,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         span: Span,\n         source: PathSource<'_>,\n         res: Option<Res>,\n-    ) -> (DiagnosticBuilder<'a, ErrorReported>, Vec<ImportSuggestion>) {\n+    ) -> (DiagnosticBuilder<'a, ErrorGuaranteed>, Vec<ImportSuggestion>) {\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let ns = source.namespace();\n         let is_expected = &|res| source.is_expected(res);\n@@ -1819,7 +1819,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         &self,\n         spans: Vec<Span>,\n         count: usize,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(\n             self.tcx.sess,\n             spans,"}, {"sha": "086f0249114baabc58636d92aabc44f1ddbd6e47", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -40,7 +40,9 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n@@ -713,7 +715,7 @@ struct PrivacyError<'a> {\n }\n \n struct UseError<'a> {\n-    err: DiagnosticBuilder<'a, ErrorReported>,\n+    err: DiagnosticBuilder<'a, ErrorGuaranteed>,\n     /// Candidates which user could `use` to access the missing type.\n     candidates: Vec<ImportSuggestion>,\n     /// The `DefId` of the module to place the use-statements in."}, {"sha": "38ddb841d96566721298cda2bb69d3913ff4a604", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n-use rustc_errors::{error_code, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{error_code, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n@@ -82,7 +82,7 @@ pub fn feature_err<'a>(\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n     explain: &str,\n-) -> DiagnosticBuilder<'a, ErrorReported> {\n+) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n \n@@ -96,7 +96,7 @@ pub fn feature_err_issue<'a>(\n     span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n-) -> DiagnosticBuilder<'a, ErrorReported> {\n+) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n \n     if let Some(n) = find_feature_issue(feature, issue) {"}, {"sha": "360682558a5ef0e7d34796991089e48542024e3d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -19,7 +19,7 @@ use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n use rustc_span::edition::Edition;\n@@ -221,7 +221,7 @@ enum DiagnosticBuilderMethod {\n pub trait SessionDiagnostic<'a> {\n     /// Write out as a diagnostic out of `sess`.\n     #[must_use]\n-    fn into_diagnostic(self, sess: &'a Session) -> DiagnosticBuilder<'a, ErrorReported>;\n+    fn into_diagnostic(self, sess: &'a Session) -> DiagnosticBuilder<'a, ErrorGuaranteed>;\n }\n \n /// Diagnostic message ID, used by `Session.one_time_diagnostics` to avoid\n@@ -335,44 +335,44 @@ impl Session {\n         &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_err(msg)\n     }\n     pub fn struct_err_with_code(\n         &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n-    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n@@ -406,7 +406,7 @@ impl Session {\n     pub fn err(&self, msg: &str) {\n         self.diagnostic().err(msg)\n     }\n-    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorReported {\n+    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n         err.into_diagnostic(self).emit()\n     }\n     #[inline]\n@@ -422,22 +422,22 @@ impl Session {\n     pub fn abort_if_errors(&self) {\n         self.diagnostic().abort_if_errors();\n     }\n-    pub fn compile_status(&self) -> Result<(), ErrorReported> {\n+    pub fn compile_status(&self) -> Result<(), ErrorGuaranteed> {\n         if self.diagnostic().has_errors_or_lint_errors() {\n             self.diagnostic().emit_stashed_diagnostics();\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         } else {\n             Ok(())\n         }\n     }\n     // FIXME(matthewjasper) Remove this method, it should never be needed.\n-    pub fn track_errors<F, T>(&self, f: F) -> Result<T, ErrorReported>\n+    pub fn track_errors<F, T>(&self, f: F) -> Result<T, ErrorGuaranteed>\n     where\n         F: FnOnce() -> T,\n     {\n         let old_count = self.err_count();\n         let result = f();\n-        if self.err_count() == old_count { Ok(result) } else { Err(ErrorReported) }\n+        if self.err_count() == old_count { Ok(result) } else { Err(ErrorGuaranteed) }\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)"}, {"sha": "3e0c8234edafb21970dd9f59f03860685c58482d", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -8,7 +8,7 @@ use crate::traits::{\n     FulfillmentContext, ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine,\n     Unimplemented,\n };\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -22,7 +22,7 @@ use rustc_middle::ty::{self, TyCtxt};\n pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n-) -> Result<&'tcx ImplSource<'tcx, ()>, ErrorReported> {\n+) -> Result<&'tcx ImplSource<'tcx, ()>, ErrorGuaranteed> {\n     // Remove any references to regions; this helps improve caching.\n     let trait_ref = tcx.erase_regions(trait_ref);\n     // We expect the input to be fully normalized.\n@@ -59,7 +59,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n                         trait_ref\n                     ),\n                 );\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n             Err(Unimplemented) => {\n                 // This can trigger when we probe for the source of a `'static` lifetime requirement\n@@ -73,7 +73,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n                         trait_ref\n                     ),\n                 );\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n             Err(e) => {\n                 bug!(\"Encountered error `{:?}` selecting `{:?}` during codegen\", e, trait_ref)"}, {"sha": "6655541461d014d55ee35e3eb034e15c5ee020ea", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -9,7 +9,7 @@\n //! `thir_abstract_const` which can then be checked for structural equality with other\n //! generic constants mentioned in the `caller_bounds` of the current environment.\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n@@ -171,7 +171,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n         }),\n         Err(ErrorHandled::Linted) => {\n             infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-            Err(NotConstEvaluatable::Error(ErrorReported))\n+            Err(NotConstEvaluatable::Error(ErrorGuaranteed))\n         }\n         Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n         Ok(_) => Ok(()),\n@@ -194,7 +194,7 @@ impl<'tcx> AbstractConst<'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n         uv: ty::Unevaluated<'tcx, ()>,\n-    ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n+    ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         let inner = tcx.thir_abstract_const_opt_const_arg(uv.def)?;\n         debug!(\"AbstractConst::new({:?}) = {:?}\", uv, inner);\n         Ok(inner.map(|inner| AbstractConst { inner, substs: uv.substs }))\n@@ -203,10 +203,10 @@ impl<'tcx> AbstractConst<'tcx> {\n     pub fn from_const(\n         tcx: TyCtxt<'tcx>,\n         ct: ty::Const<'tcx>,\n-    ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n+    ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.val() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n-            ty::ConstKind::Error(_) => Err(ErrorReported),\n+            ty::ConstKind::Error(_) => Err(ErrorGuaranteed),\n             _ => Ok(None),\n         }\n     }\n@@ -241,17 +241,17 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         self.body.exprs[self.body_id].span\n     }\n \n-    fn error(&mut self, span: Span, msg: &str) -> Result<!, ErrorReported> {\n+    fn error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n         self.tcx\n             .sess\n             .struct_span_err(self.root_span(), \"overly complex generic constant\")\n             .span_label(span, msg)\n             .help(\"consider moving this anonymous constant into a `const` function\")\n             .emit();\n \n-        Err(ErrorReported)\n+        Err(ErrorGuaranteed)\n     }\n-    fn maybe_supported_error(&mut self, span: Span, msg: &str) -> Result<!, ErrorReported> {\n+    fn maybe_supported_error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n         self.tcx\n             .sess\n             .struct_span_err(self.root_span(), \"overly complex generic constant\")\n@@ -260,13 +260,13 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             .note(\"this operation may be supported in the future\")\n             .emit();\n \n-        Err(ErrorReported)\n+        Err(ErrorGuaranteed)\n     }\n \n     fn new(\n         tcx: TyCtxt<'tcx>,\n         (body, body_id): (&'a thir::Thir<'tcx>, thir::ExprId),\n-    ) -> Result<Option<AbstractConstBuilder<'a, 'tcx>>, ErrorReported> {\n+    ) -> Result<Option<AbstractConstBuilder<'a, 'tcx>>, ErrorGuaranteed> {\n         let builder = AbstractConstBuilder { tcx, body_id, body, nodes: IndexVec::new() };\n \n         struct IsThirPolymorphic<'a, 'tcx> {\n@@ -330,7 +330,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n     /// Builds the abstract const by walking the thir and bailing out when\n     /// encountering an unspported operation.\n-    fn build(mut self) -> Result<&'tcx [Node<'tcx>], ErrorReported> {\n+    fn build(mut self) -> Result<&'tcx [Node<'tcx>], ErrorGuaranteed> {\n         debug!(\"Abstractconstbuilder::build: body={:?}\", &*self.body);\n         self.recurse_build(self.body_id)?;\n \n@@ -349,7 +349,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         Ok(self.tcx.arena.alloc_from_iter(self.nodes.into_iter()))\n     }\n \n-    fn recurse_build(&mut self, node: thir::ExprId) -> Result<NodeId, ErrorReported> {\n+    fn recurse_build(&mut self, node: thir::ExprId) -> Result<NodeId, ErrorGuaranteed> {\n         use thir::ExprKind;\n         let node = &self.body.exprs[node];\n         debug!(\"recurse_build: node={:?}\", node);\n@@ -503,7 +503,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n pub(super) fn thir_abstract_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorReported> {\n+) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorGuaranteed> {\n     if tcx.features().generic_const_exprs {\n         match tcx.def_kind(def.did) {\n             // FIXME(generic_const_exprs): We currently only do this for anonymous constants,\n@@ -518,7 +518,7 @@ pub(super) fn thir_abstract_const<'tcx>(\n         let body = tcx.thir_body(def);\n         if body.0.borrow().exprs.is_empty() {\n             // type error in constant, there is no thir\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         AbstractConstBuilder::new(tcx, (&*body.0.borrow(), body.1))?\n@@ -542,10 +542,10 @@ pub(super) fn try_unify_abstract_consts<'tcx>(\n \n         Ok(false)\n     })()\n-    .unwrap_or_else(|ErrorReported| true)\n+    .unwrap_or_else(|ErrorGuaranteed| true)\n     // FIXME(generic_const_exprs): We should instead have this\n     // method return the resulting `ty::Const` and return `ConstKind::Error`\n-    // on `ErrorReported`.\n+    // on `ErrorGuaranteed`.\n }\n \n pub fn walk_abstract_const<'tcx, R, F>("}, {"sha": "ccbd2dedfeab193328d9a78e3e0a8ba7a609646c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -13,7 +13,7 @@ use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{\n-    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -102,7 +102,7 @@ pub trait InferCtxtExt<'tcx> {\n         expected_args: Vec<ArgKind>,\n         found_args: Vec<ArgKind>,\n         is_closure: bool,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n }\n \n impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n@@ -919,9 +919,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             // Already reported in the query.\n-            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(ErrorReported)) => {\n-                // FIXME(eddyb) remove this once `ErrorReported` becomes a proof token.\n-                self.tcx.sess.delay_span_bug(span, \"`ErrorReported` without an error\");\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(ErrorGuaranteed)) => {\n+                // FIXME(eddyb) remove this once `ErrorGuaranteed` becomes a proof token.\n+                self.tcx.sess.delay_span_bug(span, \"`ErrorGuaranteed` without an error\");\n                 return;\n             }\n \n@@ -1019,7 +1019,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         expected_args: Vec<ArgKind>,\n         found_args: Vec<ArgKind>,\n         is_closure: bool,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let kind = if is_closure { \"closure\" } else { \"function\" };\n \n         let args_str = |arguments: &[ArgKind], other: &[ArgKind]| {"}, {"sha": "b194e6a6d89f31f6624264677f9cfbe46f3dea18", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n     error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder,\n-    ErrorReported, Style,\n+    ErrorGuaranteed, Style,\n };\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -123,7 +123,7 @@ pub trait InferCtxtExt<'tcx> {\n         found_span: Option<Span>,\n         expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn suggest_fully_qualified_path(\n         &self,\n@@ -1260,7 +1260,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         found_span: Option<Span>,\n         expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         crate fn build_fn_sig_string<'tcx>(\n             tcx: TyCtxt<'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,"}, {"sha": "b4b2e4cd0422933837ac9f29520d39df7e7948bb", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_infer::traits::ProjectionCacheKey;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -613,12 +613,14 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                                 ),\n                             }\n                         }\n-                        (Err(ErrorHandled::Reported(ErrorReported)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorReported))) => ProcessResult::Error(\n-                            CodeSelectionError(SelectionError::NotConstEvaluatable(\n-                                NotConstEvaluatable::Error(ErrorReported),\n-                            )),\n-                        ),\n+                        (Err(ErrorHandled::Reported(ErrorGuaranteed)), _)\n+                        | (_, Err(ErrorHandled::Reported(ErrorGuaranteed))) => {\n+                            ProcessResult::Error(CodeSelectionError(\n+                                SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(\n+                                    ErrorGuaranteed,\n+                                )),\n+                            ))\n+                        }\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.selcx.tcx()),"}, {"sha": "bf94c61e6c2cef3b48fa06d3063a691da969ac01", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -26,7 +26,7 @@ use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n use crate::traits::error_reporting::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n@@ -206,7 +206,7 @@ fn do_normalize_predicates<'tcx>(\n     cause: ObligationCause<'tcx>,\n     elaborated_env: ty::ParamEnv<'tcx>,\n     predicates: Vec<ty::Predicate<'tcx>>,\n-) -> Result<Vec<ty::Predicate<'tcx>>, ErrorReported> {\n+) -> Result<Vec<ty::Predicate<'tcx>>, ErrorGuaranteed> {\n     debug!(\n         \"do_normalize_predicates(predicates={:?}, region_context={:?}, cause={:?})\",\n         predicates, region_context, cause,\n@@ -232,7 +232,7 @@ fn do_normalize_predicates<'tcx>(\n                 Ok(predicates) => predicates,\n                 Err(errors) => {\n                     infcx.report_fulfillment_errors(&errors, None, false);\n-                    return Err(ErrorReported);\n+                    return Err(ErrorGuaranteed);\n                 }\n             };\n \n@@ -259,12 +259,12 @@ fn do_normalize_predicates<'tcx>(\n                 // unconstrained variable, and it seems better not to ICE,\n                 // all things considered.\n                 tcx.sess.span_err(span, &fixup_err.to_string());\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         };\n         if predicates.needs_infer() {\n             tcx.sess.delay_span_bug(span, \"encountered inference variables after `fully_resolve`\");\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         } else {\n             Ok(predicates)\n         }"}, {"sha": "9752ff453235ad0572ca1ac6d92a2426d5cb178a", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::{MetaItem, NestedMetaItem};\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, ErrorReported};\n+use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc_parse_format::{ParseMode, Parser, Piece, Position};\n@@ -41,14 +41,14 @@ fn parse_error(\n     message: &str,\n     label: &str,\n     note: Option<&str>,\n-) -> ErrorReported {\n+) -> ErrorGuaranteed {\n     let mut diag = struct_span_err!(tcx.sess, span, E0232, \"{}\", message);\n     diag.span_label(span, label);\n     if let Some(note) = note {\n         diag.note(note);\n     }\n     diag.emit();\n-    ErrorReported\n+    ErrorGuaranteed\n }\n \n impl<'tcx> OnUnimplementedDirective {\n@@ -58,7 +58,7 @@ impl<'tcx> OnUnimplementedDirective {\n         items: &[NestedMetaItem],\n         span: Span,\n         is_root: bool,\n-    ) -> Result<Self, ErrorReported> {\n+    ) -> Result<Self, ErrorGuaranteed> {\n         let mut errored = false;\n         let mut item_iter = items.iter();\n \n@@ -164,7 +164,7 @@ impl<'tcx> OnUnimplementedDirective {\n         }\n \n         if errored {\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         } else {\n             Ok(OnUnimplementedDirective {\n                 condition,\n@@ -182,7 +182,7 @@ impl<'tcx> OnUnimplementedDirective {\n         tcx: TyCtxt<'tcx>,\n         trait_def_id: DefId,\n         impl_def_id: DefId,\n-    ) -> Result<Option<Self>, ErrorReported> {\n+    ) -> Result<Option<Self>, ErrorGuaranteed> {\n         let attrs = tcx.get_attrs(impl_def_id);\n \n         let Some(attr) = tcx.sess.find_by_name(&attrs, sym::rustc_on_unimplemented) else {\n@@ -207,7 +207,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 append_const_msg: None,\n             }))\n         } else {\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         };\n         debug!(\"of_item({:?}/{:?}) = {:?}\", trait_def_id, impl_def_id, result);\n         result\n@@ -283,7 +283,7 @@ impl<'tcx> OnUnimplementedFormatString {\n         trait_def_id: DefId,\n         from: Symbol,\n         err_sp: Span,\n-    ) -> Result<Self, ErrorReported> {\n+    ) -> Result<Self, ErrorGuaranteed> {\n         let result = OnUnimplementedFormatString(from);\n         result.verify(tcx, trait_def_id, err_sp)?;\n         Ok(result)\n@@ -294,7 +294,7 @@ impl<'tcx> OnUnimplementedFormatString {\n         tcx: TyCtxt<'tcx>,\n         trait_def_id: DefId,\n         span: Span,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n         let s = self.0.as_str();\n@@ -334,7 +334,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                                     name\n                                 )\n                                 .emit();\n-                                result = Err(ErrorReported);\n+                                result = Err(ErrorGuaranteed);\n                             }\n                         }\n                     }\n@@ -347,7 +347,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                             \"only named substitution parameters are allowed\"\n                         )\n                         .emit();\n-                        result = Err(ErrorReported);\n+                        result = Err(ErrorGuaranteed);\n                     }\n                 },\n             }"}, {"sha": "c32c73c6384127b9a82ec9b57ab7193ae16cf692", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -22,7 +22,7 @@ use crate::traits::error_reporting::InferCtxtExt as _;\n use crate::traits::select::ProjectionMatchesProjection;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n@@ -1326,7 +1326,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // `rustc_ty_utils::instance::resolve_associated_item()`.\n                 let node_item =\n                     assoc_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)\n-                        .map_err(|ErrorReported| ())?;\n+                        .map_err(|ErrorGuaranteed| ())?;\n \n                 if node_item.is_final() {\n                     // Non-specializable items are always projectable.\n@@ -1918,7 +1918,7 @@ fn assoc_def(\n     selcx: &SelectionContext<'_, '_>,\n     impl_def_id: DefId,\n     assoc_def_id: DefId,\n-) -> Result<specialization_graph::LeafDef, ErrorReported> {\n+) -> Result<specialization_graph::LeafDef, ErrorGuaranteed> {\n     let tcx = selcx.tcx();\n     let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;\n     let trait_def = tcx.trait_def(trait_def_id);"}, {"sha": "24a7c2169a36fa6549b3ccc4a46d11d4ea8c233a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -29,7 +29,7 @@ use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{Diagnostic, ErrorReported};\n+use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n@@ -674,8 +674,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 Err(_) => Ok(EvaluatedToErr),\n                             }\n                         }\n-                        (Err(ErrorHandled::Reported(ErrorReported)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorReported))) => Ok(EvaluatedToErr),\n+                        (Err(ErrorHandled::Reported(ErrorGuaranteed)), _)\n+                        | (_, Err(ErrorHandled::Reported(ErrorGuaranteed))) => Ok(EvaluatedToErr),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.tcx()),"}, {"sha": "41467ce2f622f07ef50a4e01aa76ec3680384920", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n@@ -114,7 +114,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n-) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+) -> Result<Option<Instance<'tcx>>, ErrorGuaranteed> {\n     let (param_env, (did, substs)) = key.into_parts();\n     if let Some(did) = did.as_local() {\n         if let Some(param_did) = tcx.opt_const_param_of(did) {\n@@ -128,7 +128,7 @@ fn resolve_instance<'tcx>(\n fn resolve_instance_of_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (LocalDefId, DefId, SubstsRef<'tcx>)>,\n-) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+) -> Result<Option<Instance<'tcx>>, ErrorGuaranteed> {\n     let (param_env, (did, const_param_did, substs)) = key.into_parts();\n     inner_resolve_instance(\n         tcx,\n@@ -143,7 +143,7 @@ fn resolve_instance_of_const_arg<'tcx>(\n fn inner_resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)>,\n-) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+) -> Result<Option<Instance<'tcx>>, ErrorGuaranteed> {\n     let (param_env, (def, substs)) = key.into_parts();\n \n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n@@ -203,7 +203,7 @@ fn resolve_associated_item<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     trait_id: DefId,\n     rcvr_substs: SubstsRef<'tcx>,\n-) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+) -> Result<Option<Instance<'tcx>>, ErrorGuaranteed> {\n     debug!(?trait_item_id, ?param_env, ?trait_id, ?rcvr_substs, \"resolve_associated_item\");\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n@@ -281,7 +281,7 @@ fn resolve_associated_item<'tcx>(\n             // we know the error would've been caught (e.g. in an upstream crate).\n             //\n             // A better approach might be to just introduce a query (returning\n-            // `Result<(), ErrorReported>`) for the check that `rustc_typeck`\n+            // `Result<(), ErrorGuaranteed>`) for the check that `rustc_typeck`\n             // performs (i.e. that the definition's type in the `impl` matches\n             // the declaration in the `trait`), so that we can cheaply check\n             // here if it failed, instead of approximating it.\n@@ -308,7 +308,7 @@ fn resolve_associated_item<'tcx>(\n                     let span = tcx.def_span(leaf_def.item.def_id);\n                     tcx.sess.delay_span_bug(span, &msg);\n \n-                    return Err(ErrorReported);\n+                    return Err(ErrorGuaranteed);\n                 }\n             }\n "}, {"sha": "e8b64587eeea6a799665b9128e1747189a66ff08", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -6,7 +6,7 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -602,7 +602,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             correct: if lifetimes_correct && args_correct {\n                 Ok(())\n             } else {\n-                Err(GenericArgCountMismatch { reported: Some(ErrorReported), invalid_args })\n+                Err(GenericArgCountMismatch { reported: Some(ErrorGuaranteed), invalid_args })\n             },\n         }\n     }"}, {"sha": "d409cedddda8d2b7210a54fbff10fdb6a0cea658", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -15,7 +15,9 @@ use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported, FatalError};\n+use rustc_errors::{\n+    struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -162,7 +164,7 @@ pub(crate) enum GenericArgPosition {\n #[derive(Clone, Default)]\n pub struct GenericArgCountMismatch {\n     /// Indicates whether a fatal error was reported (`Some`), or just a lint (`None`).\n-    pub reported: Option<ErrorReported>,\n+    pub reported: Option<ErrorGuaranteed>,\n     /// A list of spans of arguments provided that were not valid.\n     pub invalid_args: Vec<Span>,\n }\n@@ -733,7 +735,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut dup_bindings = FxHashMap::default();\n         for binding in &assoc_bindings {\n             // Specify type to assert that error was already reported in `Err` case.\n-            let _: Result<_, ErrorReported> = self.add_predicates_for_ast_type_binding(\n+            let _: Result<_, ErrorGuaranteed> = self.add_predicates_for_ast_type_binding(\n                 hir_id,\n                 poly_trait_ref,\n                 binding,\n@@ -742,7 +744,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &mut dup_bindings,\n                 binding_span.unwrap_or(binding.span),\n             );\n-            // Okay to ignore `Err` because of `ErrorReported` (see above).\n+            // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n \n         arg_count\n@@ -1096,7 +1098,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         speculative: bool,\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n         // subtle in the event that `T` is defined in a supertrait of\n@@ -1604,7 +1606,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ty_param_def_id: LocalDefId,\n         assoc_name: Ident,\n         span: Span,\n-    ) -> Result<ty::PolyTraitRef<'tcx>, ErrorReported> {\n+    ) -> Result<ty::PolyTraitRef<'tcx>, ErrorGuaranteed> {\n         let tcx = self.tcx();\n \n         debug!(\n@@ -1646,7 +1648,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         assoc_name: Ident,\n         span: Span,\n         is_equality: impl Fn() -> Option<String>,\n-    ) -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n+    ) -> Result<ty::PolyTraitRef<'tcx>, ErrorGuaranteed>\n     where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     {\n@@ -1665,7 +1667,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     assoc_name,\n                     span,\n                 );\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         };\n         debug!(\"one_bound_for_assoc_type: bound = {:?}\", bound);\n@@ -1752,7 +1754,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             err.emit();\n             if !where_bounds.is_empty() {\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         }\n \n@@ -1775,7 +1777,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         qself_res: Res,\n         assoc_segment: &hir::PathSegment<'_>,\n         permit_variants: bool,\n-    ) -> Result<(Ty<'tcx>, DefKind, DefId), ErrorReported> {\n+    ) -> Result<(Ty<'tcx>, DefKind, DefId), ErrorGuaranteed> {\n         let tcx = self.tcx();\n         let assoc_ident = assoc_segment.ident;\n \n@@ -1809,7 +1811,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // trait reference.\n                 let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) else {\n                     // A cycle error occurred, most likely.\n-                    return Err(ErrorReported);\n+                    return Err(ErrorGuaranteed);\n                 };\n \n                 self.one_bound_for_assoc_type(\n@@ -1878,7 +1880,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         assoc_ident.name,\n                     );\n                 }\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         };\n \n@@ -1897,7 +1899,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let Some(item) = item else {\n             let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n             tcx.sess.struct_span_err(span, &msg).emit();\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         };\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n@@ -2617,7 +2619,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         constrained_regions: FxHashSet<ty::BoundRegionKind>,\n         referenced_regions: FxHashSet<ty::BoundRegionKind>,\n-        generate_err: impl Fn(&str) -> DiagnosticBuilder<'tcx, ErrorReported>,\n+        generate_err: impl Fn(&str) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n     ) {\n         for br in referenced_regions.difference(&constrained_regions) {\n             let br_name = match *br {"}, {"sha": "3d0f76f7a93eba4cba2250b73b7d1849a6fae5d4", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -32,7 +32,7 @@ use super::FnCtxt;\n \n use crate::hir::def_id::DefId;\n use crate::type_error_struct;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::Mutability;\n@@ -86,13 +86,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         t: Ty<'tcx>,\n         span: Span,\n-    ) -> Result<Option<PointerKind<'tcx>>, ErrorReported> {\n+    ) -> Result<Option<PointerKind<'tcx>>, ErrorGuaranteed> {\n         debug!(\"pointer_kind({:?}, {:?})\", t, span);\n \n         let t = self.resolve_vars_if_possible(t);\n \n         if t.references_error() {\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         if self.type_is_known_to_be_sized_modulo_regions(t, span) {\n@@ -142,15 +142,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx\n                     .sess\n                     .delay_span_bug(span, &format!(\"`{:?}` should be sized but is not?\", t));\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         })\n     }\n }\n \n #[derive(Copy, Clone)]\n pub enum CastError {\n-    ErrorReported,\n+    ErrorGuaranteed,\n \n     CastToBool,\n     CastToChar,\n@@ -167,9 +167,9 @@ pub enum CastError {\n     UnknownCastPtrKind,\n }\n \n-impl From<ErrorReported> for CastError {\n-    fn from(ErrorReported: ErrorReported) -> Self {\n-        CastError::ErrorReported\n+impl From<ErrorGuaranteed> for CastError {\n+    fn from(ErrorGuaranteed: ErrorGuaranteed) -> Self {\n+        CastError::ErrorGuaranteed\n     }\n }\n \n@@ -179,7 +179,7 @@ fn make_invalid_casting_error<'a, 'tcx>(\n     expr_ty: Ty<'tcx>,\n     cast_ty: Ty<'tcx>,\n     fcx: &FnCtxt<'a, 'tcx>,\n-) -> DiagnosticBuilder<'a, ErrorReported> {\n+) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     type_error_struct!(\n         sess,\n         span,\n@@ -199,7 +199,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         cast_ty: Ty<'tcx>,\n         cast_span: Span,\n         span: Span,\n-    ) -> Result<CastCheck<'tcx>, ErrorReported> {\n+    ) -> Result<CastCheck<'tcx>, ErrorGuaranteed> {\n         let check = CastCheck { expr, expr_ty, cast_ty, cast_span, span };\n \n         // For better error messages, check for some obviously unsized\n@@ -208,15 +208,15 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         match cast_ty.kind() {\n             ty::Dynamic(..) | ty::Slice(..) => {\n                 check.report_cast_to_unsized_type(fcx);\n-                Err(ErrorReported)\n+                Err(ErrorGuaranteed)\n             }\n             _ => Ok(check),\n         }\n     }\n \n     fn report_cast_error(&self, fcx: &FnCtxt<'a, 'tcx>, e: CastError) {\n         match e {\n-            CastError::ErrorReported => {\n+            CastError::ErrorGuaranteed => {\n                 // an error has already been reported\n             }\n             CastError::NeedDeref => {"}, {"sha": "765b752691f231eb94db144368a2a5e88f03b28d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_\n use super::*;\n \n use rustc_attr as attr;\n-use rustc_errors::{Applicability, ErrorReported};\n+use rustc_errors::{Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n@@ -623,13 +623,13 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n     substs: SubstsRef<'tcx>,\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     if tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs).is_err() {\n         match origin {\n             hir::OpaqueTyOrigin::AsyncFn(..) => async_opaque_type_cycle_error(tcx, span),\n             _ => opaque_type_cycle_error(tcx, def_id, span),\n         }\n-        Err(ErrorReported)\n+        Err(ErrorGuaranteed)\n     } else {\n         Ok(())\n     }\n@@ -760,7 +760,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                         let assoc_item = tcx.associated_item(item.def_id);\n                         let trait_substs =\n                             InternalSubsts::identity_for_item(tcx, it.def_id.to_def_id());\n-                        let _: Result<_, rustc_errors::ErrorReported> = check_type_bounds(\n+                        let _: Result<_, rustc_errors::ErrorGuaranteed> = check_type_bounds(\n                             tcx,\n                             assoc_item,\n                             assoc_item,"}, {"sha": "c0eda02a999670a2cb9c7b22594c7d93df268420", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -37,7 +37,9 @@\n \n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1520,7 +1522,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         fcx: &FnCtxt<'a, 'tcx>,\n         id: hir::HirId,\n         expression: Option<(&'tcx hir::Expr<'tcx>, hir::HirId)>,\n-    ) -> DiagnosticBuilder<'a, ErrorReported> {\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;"}, {"sha": "d4a473adaf010e45059eabe57a343392d6663fff", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorReported};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;\n@@ -41,34 +41,35 @@ crate fn compare_impl_method<'tcx>(\n \n     let impl_m_span = tcx.sess.source_map().guess_head_span(impl_m_span);\n \n-    if let Err(ErrorReported) = compare_self_type(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n+    if let Err(ErrorGuaranteed) =\n+        compare_self_type(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n     {\n         return;\n     }\n \n-    if let Err(ErrorReported) =\n+    if let Err(ErrorGuaranteed) =\n         compare_number_of_generics(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n     {\n         return;\n     }\n \n-    if let Err(ErrorReported) =\n+    if let Err(ErrorGuaranteed) =\n         compare_number_of_method_arguments(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n     {\n         return;\n     }\n \n-    if let Err(ErrorReported) = compare_synthetic_generics(tcx, impl_m, trait_m) {\n+    if let Err(ErrorGuaranteed) = compare_synthetic_generics(tcx, impl_m, trait_m) {\n         return;\n     }\n \n-    if let Err(ErrorReported) =\n+    if let Err(ErrorGuaranteed) =\n         compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n     {\n         return;\n     }\n \n-    if let Err(ErrorReported) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n+    if let Err(ErrorGuaranteed) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n         return;\n     }\n }\n@@ -79,7 +80,7 @@ fn compare_predicate_entailment<'tcx>(\n     impl_m_span: Span,\n     trait_m: &ty::AssocItem,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n     // This node-id should be used for the `body_id` field on each\n@@ -385,15 +386,15 @@ fn compare_predicate_entailment<'tcx>(\n                 false,\n             );\n             diag.emit();\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of\n@@ -412,7 +413,7 @@ fn check_region_bounds_on_impl_item<'tcx>(\n     trait_m: &ty::AssocItem,\n     trait_generics: &ty::Generics,\n     impl_generics: &ty::Generics,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let trait_params = trait_generics.own_counts().lifetimes;\n     let impl_params = impl_generics.own_counts().lifetimes;\n \n@@ -455,7 +456,7 @@ fn check_region_bounds_on_impl_item<'tcx>(\n             ident: impl_m.ident(tcx),\n             generics_span,\n         });\n-        return Err(ErrorReported);\n+        return Err(ErrorGuaranteed);\n     }\n \n     Ok(())\n@@ -501,7 +502,7 @@ fn compare_self_type<'tcx>(\n     impl_m_span: Span,\n     trait_m: &ty::AssocItem,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     // Try to give more informative error messages about self typing\n     // mismatches.  Note that any mismatch will also be detected\n     // below, where we construct a canonical function type that\n@@ -550,7 +551,7 @@ fn compare_self_type<'tcx>(\n                 err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n             }\n             err.emit();\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         (true, false) => {\n@@ -570,7 +571,7 @@ fn compare_self_type<'tcx>(\n                 err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n             }\n             err.emit();\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n     }\n \n@@ -583,7 +584,7 @@ fn compare_number_of_generics<'tcx>(\n     _impl_span: Span,\n     trait_: &ty::AssocItem,\n     trait_span: Option<Span>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let trait_own_counts = tcx.generics_of(trait_.def_id).own_counts();\n     let impl_own_counts = tcx.generics_of(impl_.def_id).own_counts();\n \n@@ -693,7 +694,7 @@ fn compare_number_of_generics<'tcx>(\n         }\n     }\n \n-    if err_occurred { Err(ErrorReported) } else { Ok(()) }\n+    if err_occurred { Err(ErrorGuaranteed) } else { Ok(()) }\n }\n \n fn compare_number_of_method_arguments<'tcx>(\n@@ -702,7 +703,7 @@ fn compare_number_of_method_arguments<'tcx>(\n     impl_m_span: Span,\n     trait_m: &ty::AssocItem,\n     trait_item_span: Option<Span>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let impl_m_fty = tcx.fn_sig(impl_m.def_id);\n     let trait_m_fty = tcx.fn_sig(trait_m.def_id);\n     let trait_number_args = trait_m_fty.inputs().skip_binder().len();\n@@ -772,7 +773,7 @@ fn compare_number_of_method_arguments<'tcx>(\n             ),\n         );\n         err.emit();\n-        return Err(ErrorReported);\n+        return Err(ErrorGuaranteed);\n     }\n \n     Ok(())\n@@ -782,7 +783,7 @@ fn compare_synthetic_generics<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     // FIXME(chrisvittal) Clean up this function, list of FIXME items:\n     //     1. Better messages for the span labels\n     //     2. Explanation as to what is going on\n@@ -921,15 +922,15 @@ fn compare_synthetic_generics<'tcx>(\n             error_found = true;\n         }\n     }\n-    if error_found { Err(ErrorReported) } else { Ok(()) }\n+    if error_found { Err(ErrorGuaranteed) } else { Ok(()) }\n }\n \n fn compare_const_param_types<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n     trait_item_span: Option<Span>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let const_params_of = |def_id| {\n         tcx.generics_of(def_id).params.iter().filter_map(|param| match param.kind {\n             GenericParamDefKind::Const { .. } => Some(param.def_id),\n@@ -979,7 +980,7 @@ fn compare_const_param_types<'tcx>(\n                 ),\n             );\n             err.emit();\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n     }\n \n@@ -1101,7 +1102,7 @@ crate fn compare_ty_impl<'tcx>(\n ) {\n     debug!(\"compare_impl_type(impl_trait_ref={:?})\", impl_trait_ref);\n \n-    let _: Result<(), ErrorReported> = (|| {\n+    let _: Result<(), ErrorGuaranteed> = (|| {\n         compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n \n         let sp = tcx.def_span(impl_ty.def_id);\n@@ -1119,7 +1120,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     impl_ty_span: Span,\n     trait_ty: &ty::AssocItem,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let impl_substs = InternalSubsts::identity_for_item(tcx, impl_ty.def_id);\n     let trait_to_impl_substs =\n         impl_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n@@ -1203,7 +1204,7 @@ fn compare_type_predicate_entailment<'tcx>(\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of\n@@ -1235,7 +1236,7 @@ pub fn check_type_bounds<'tcx>(\n     impl_ty: &ty::AssocItem,\n     impl_ty_span: Span,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     // Given\n     //\n     // impl<A, B> Foo<u32> for (A, B) {\n@@ -1427,7 +1428,7 @@ pub fn check_type_bounds<'tcx>(\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of"}, {"sha": "040a087b2352e8e3c911906ff6e5a0ec5d543822", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::ObligationCause;\n \n use rustc_ast::util::parser::PREC_POSTFIX;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n@@ -57,7 +57,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sp: Span,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         self.demand_suptype_with_origin(&self.misc(sp), expected, actual)\n     }\n \n@@ -67,7 +67,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         match self.at(cause, self.param_env).sup(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n@@ -88,7 +88,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sp: Span,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         self.demand_eqtype_with_origin(&self.misc(sp), expected, actual)\n     }\n \n@@ -97,7 +97,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         match self.at(cause, self.param_env).eq(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n@@ -134,7 +134,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n         allow_two_phase: AllowTwoPhase,\n-    ) -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx, ErrorReported>>) {\n+    ) -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>>) {\n         let expected = self.resolve_vars_with_obligations(expected);\n \n         let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase, None) {"}, {"sha": "26aade16fd4b067df6360e77d13ee4995c9e4752", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n use crate::check::regionck::RegionCtxt;\n use crate::hir;\n use crate::hir::def_id::{DefId, LocalDefId};\n-use rustc_errors::{struct_span_err, ErrorReported};\n+use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{InferOk, RegionckMode, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n@@ -31,7 +31,7 @@ use rustc_trait_selection::traits::{ObligationCause, TraitEngine, TraitEngineExt\n ///    struct/enum definition for the nominal type itself (i.e.\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n-pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorReported> {\n+pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorGuaranteed> {\n     let dtor_self_type = tcx.type_of(drop_impl_did);\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.kind() {\n@@ -59,7 +59,7 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n                 span,\n                 &format!(\"should have been rejected by coherence check: {}\", dtor_self_type),\n             );\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         }\n     }\n }\n@@ -69,7 +69,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     drop_impl_did: LocalDefId,\n     drop_impl_ty: Ty<'tcx>,\n     self_type_did: DefId,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let drop_impl_hir_id = tcx.hir().local_def_id_to_hir_id(drop_impl_did);\n \n     // check that the impl type can be made to match the trait type.\n@@ -109,15 +109,15 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n                     ),\n                 )\n                 .emit();\n-                return Err(ErrorReported);\n+                return Err(ErrorGuaranteed);\n             }\n         }\n \n         let errors = fulfillment_cx.select_all_or_error(&infcx);\n         if !errors.is_empty() {\n             // this could be reached when we get lazy normalization\n             infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n \n         // NB. It seems a bit... suspicious to use an empty param-env\n@@ -146,7 +146,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     dtor_predicates: ty::GenericPredicates<'tcx>,\n     self_type_did: LocalDefId,\n     self_to_impl_substs: SubstsRef<'tcx>,\n-) -> Result<(), ErrorReported> {\n+) -> Result<(), ErrorGuaranteed> {\n     let mut result = Ok(());\n \n     // Here is an example, analogous to that from\n@@ -268,7 +268,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             )\n             .span_note(item_span, \"the implementor must specify the same requirement\")\n             .emit();\n-            result = Err(ErrorReported);\n+            result = Err(ErrorGuaranteed);\n         }\n     }\n "}, {"sha": "8e245beaa3db073a2af3fcbda35e07b3e4becb6f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -26,7 +26,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::Diagnostic;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -1188,7 +1188,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                Err(ErrorReported) => self.tcx.ty_error(),\n+                Err(ErrorGuaranteed) => self.tcx.ty_error(),\n             }\n         }\n     }\n@@ -2225,7 +2225,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: Ident,\n         expr_t: Ty<'tcx>,\n         id: HirId,\n-    ) -> DiagnosticBuilder<'_, ErrorReported> {\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let span = field.span;\n         debug!(\"no_such_field_err(span: {:?}, field: {:?}, expr_t: {:?})\", span, field, expr_t);\n "}, {"sha": "fed3aac6da3fd39449088234840675d92eabe43c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -8,7 +8,7 @@ use crate::check::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy};\n \n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -158,7 +158,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn write_resolution(\n         &self,\n         hir_id: hir::HirId,\n-        r: Result<(DefKind, DefId), ErrorReported>,\n+        r: Result<(DefKind, DefId), ErrorGuaranteed>,\n     ) {\n         self.typeck_results.borrow_mut().type_dependent_defs_mut().insert(hir_id, r);\n     }\n@@ -900,7 +900,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .or_else(|error| {\n                 let result = match error {\n                     method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n-                    _ => Err(ErrorReported),\n+                    _ => Err(ErrorGuaranteed),\n                 };\n \n                 // If we have a path like `MyTrait::missing_method`, then don't register"}, {"sha": "1a345a303caea04d87e0704b02e1557584fd8805", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@\n use crate::check::FnCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n-    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -93,7 +93,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         source: SelfSource<'tcx>,\n         error: MethodError<'tcx>,\n         args: Option<&'tcx [hir::Expr<'tcx>]>,\n-    ) -> Option<DiagnosticBuilder<'_, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n             return None;"}, {"sha": "8a369797210af08cbfcc86ea70545fba05a88ed9", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -3,7 +3,7 @@ use rustc_ast as ast;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{\n-    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -100,7 +100,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         self.demand_eqtype_with_origin(&self.pattern_cause(ti, cause_span), expected, actual)\n     }\n \n@@ -818,7 +818,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn emit_bad_pat_path<'b>(\n         &self,\n-        mut e: DiagnosticBuilder<'_, ErrorReported>,\n+        mut e: DiagnosticBuilder<'_, ErrorGuaranteed>,\n         pat_span: Span,\n         res: Res,\n         pat_res: Res,\n@@ -1369,7 +1369,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         variant: &VariantDef,\n         pat: &'_ Pat<'_>,\n         fields: &[hir::PatField<'_>],\n-    ) -> Option<DiagnosticBuilder<'_, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         // if this is a tuple struct, then all field names will be numbers\n         // so if any fields in a struct pattern use shorthand syntax, they will\n         // be invalid identifiers (for example, Foo { 0, 1 }).\n@@ -1442,7 +1442,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         inexistent_fields: &[Ident],\n         unmentioned_fields: &mut Vec<(&ty::FieldDef, Ident)>,\n         variant: &ty::VariantDef,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let tcx = self.tcx;\n         let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n             (format!(\"a field named `{}`\", inexistent_fields[0]), \"this\", \"\")\n@@ -1538,7 +1538,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &Pat<'_>,\n         fields: &'tcx [hir::PatField<'tcx>],\n         variant: &ty::VariantDef,\n-    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n         if let (CtorKind::Fn, PatKind::Struct(qpath, ..)) = (variant.ctor_kind, &pat.kind) {\n             let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n                 s.print_qpath(qpath, false)\n@@ -1620,7 +1620,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat: &Pat<'_>,\n         fields: &'tcx [hir::PatField<'tcx>],\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = self\n             .tcx\n             .sess\n@@ -1712,7 +1712,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         unmentioned_fields: &[(&ty::FieldDef, Ident)],\n         have_inaccessible_fields: bool,\n         fields: &'tcx [hir::PatField<'tcx>],\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let inaccessible = if have_inaccessible_fields { \" and inaccessible fields\" } else { \"\" };\n         let field_names = if unmentioned_fields.len() == 1 {\n             format!(\"field `{}`{}\", unmentioned_fields[0].1, inaccessible)"}, {"sha": "8672bf654669a48cf4110b94c221b156f85ade43", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -4,7 +4,7 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n \n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit as hir_visit;\n@@ -1764,7 +1764,7 @@ fn report_bivariance(\n     tcx: TyCtxt<'_>,\n     param: &rustc_hir::GenericParam<'_>,\n     has_explicit_bounds: bool,\n-) -> ErrorReported {\n+) -> ErrorGuaranteed {\n     let span = param.span;\n     let param_name = param.name.ident().name;\n     let mut err = error_392(tcx, span, param_name);\n@@ -1977,7 +1977,7 @@ fn error_392(\n     tcx: TyCtxt<'_>,\n     span: Span,\n     param_name: Symbol,\n-) -> DiagnosticBuilder<'_, ErrorReported> {\n+) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n     let mut err =\n         struct_span_err!(tcx.sess, span, E0392, \"parameter `{}` is never used\", param_name);\n     err.span_label(span, \"unused parameter\");"}, {"sha": "62f7c382bc90c4629fa08c6b32029ecaa334a65b", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -5,7 +5,7 @@\n use crate::check::FnCtxt;\n \n use rustc_data_structures::stable_map::FxHashMap;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -80,8 +80,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);\n \n         if self.is_tainted_by_errors() {\n-            // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.\n-            wbcx.typeck_results.tainted_by_errors = Some(ErrorReported);\n+            // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n+            wbcx.typeck_results.tainted_by_errors = Some(ErrorGuaranteed);\n         }\n \n         debug!(\"writeback: typeck results for {:?} are {:#?}\", item_def_id, wbcx.typeck_results);\n@@ -661,8 +661,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // to mark the `TypeckResults` as tainted in that case, so that downstream\n         // users of the typeck results don't produce extra errors, or worse, ICEs.\n         if resolver.replaced_with_error {\n-            // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.\n-            self.typeck_results.tainted_by_errors = Some(ErrorReported);\n+            // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n+            self.typeck_results.tainted_by_errors = Some(ErrorGuaranteed);\n         }\n \n         x"}, {"sha": "8ed47226d5f594589a741583af343be3e6ba072d", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -3,7 +3,7 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -21,7 +21,7 @@ pub(super) fn orphan_check_crate(tcx: TyCtxt<'_>, (): ()) -> &[LocalDefId] {\n         for &impl_of_trait in impls_of_trait {\n             match orphan_check_impl(tcx, impl_of_trait) {\n                 Ok(()) => {}\n-                Err(ErrorReported) => errors.push(impl_of_trait),\n+                Err(ErrorGuaranteed) => errors.push(impl_of_trait),\n             }\n         }\n \n@@ -33,7 +33,7 @@ pub(super) fn orphan_check_crate(tcx: TyCtxt<'_>, (): ()) -> &[LocalDefId] {\n }\n \n #[instrument(skip(tcx), level = \"debug\")]\n-fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorReported> {\n+fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGuaranteed> {\n     let trait_ref = tcx.impl_trait_ref(def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;\n \n@@ -136,7 +136,7 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorRep\n \n         if let Some((msg, label)) = msg {\n             struct_span_err!(tcx.sess, sp, E0321, \"{}\", msg).span_label(sp, label).emit();\n-            return Err(ErrorReported);\n+            return Err(ErrorGuaranteed);\n         }\n     }\n \n@@ -145,7 +145,7 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorRep\n             .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n             .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n             .emit();\n-        return Err(ErrorReported);\n+        return Err(ErrorGuaranteed);\n     }\n \n     Ok(())\n@@ -158,7 +158,7 @@ fn emit_orphan_check_error<'tcx>(\n     self_ty_span: Span,\n     generics: &hir::Generics<'tcx>,\n     err: traits::OrphanCheckErr<'tcx>,\n-) -> Result<!, ErrorReported> {\n+) -> Result<!, ErrorGuaranteed> {\n     Err(match err {\n         traits::OrphanCheckErr::NonLocalInputType(tys) => {\n             let mut err = struct_span_err!("}, {"sha": "8229f4a80e10c3171c3fb272f0a762c61095fc97", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -26,7 +26,7 @@ use rustc_ast::{MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -319,7 +319,7 @@ fn bad_placeholder<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n     kind: &'static str,\n-) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n     let kind = if kind.ends_with('s') { format!(\"{}es\", kind) } else { format!(\"{}s\", kind) };\n \n     spans.sort();"}, {"sha": "2867574e6562e66fdddb9aa1e674f3105818a9f9", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{Applicability, ErrorReported, StashKey};\n+use rustc_errors::{Applicability, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -366,7 +366,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     owner, def_id,\n                                 ),\n                             );\n-                            if let Some(ErrorReported) =\n+                            if let Some(ErrorGuaranteed) =\n                                 tcx.typeck(owner).tainted_by_errors\n                             {\n                                 // Some error in the"}, {"sha": "d665b6d068e0676eaf291a4485ec7faac2b22366", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -97,7 +97,7 @@ mod outlives;\n mod structured_errors;\n mod variance;\n \n-use rustc_errors::{struct_span_err, ErrorReported};\n+use rustc_errors::{struct_span_err, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Node, CRATE_HIR_ID};\n@@ -491,7 +491,7 @@ pub fn provide(providers: &mut Providers) {\n     hir_wf_check::provide(providers);\n }\n \n-pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n+pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorGuaranteed> {\n     let _prof_timer = tcx.sess.timer(\"type_check_crate\");\n \n     // this ensures that later parts of type checking can assume that items\n@@ -537,7 +537,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);\n \n-    if tcx.sess.err_count() == 0 { Ok(()) } else { Err(ErrorReported) }\n+    if tcx.sess.err_count() == 0 { Ok(()) } else { Err(ErrorGuaranteed) }\n }\n \n /// A quasi-deprecated helper used in rustdoc and clippy to get"}, {"sha": "0b46fce17354996354b6a607ca412fb5d88c72b6", "filename": "compiler/rustc_typeck/src/structured_errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -6,15 +6,15 @@ pub use self::{\n     missing_cast_for_variadic_arg::*, sized_unsized_cast::*, wrong_number_of_generic_args::*,\n };\n \n-use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n use rustc_session::Session;\n \n pub trait StructuredDiagnostic<'tcx> {\n     fn session(&self) -> &Session;\n \n     fn code(&self) -> DiagnosticId;\n \n-    fn diagnostic(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    fn diagnostic(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let err = self.diagnostic_common();\n \n         if self.session().teach(&self.code()) {\n@@ -24,19 +24,19 @@ pub trait StructuredDiagnostic<'tcx> {\n         }\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported>;\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn diagnostic_regular(\n         &self,\n-        err: DiagnosticBuilder<'tcx, ErrorReported>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        err: DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         err\n     }\n \n     fn diagnostic_extended(\n         &self,\n-        err: DiagnosticBuilder<'tcx, ErrorReported>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        err: DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         err\n     }\n }"}, {"sha": "79965c1dc287581c494a299cfac793de6332b33e", "filename": "compiler/rustc_typeck/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,5 +1,5 @@\n use crate::structured_errors::StructuredDiagnostic;\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n use rustc_middle::ty::{Ty, TypeFoldable};\n use rustc_session::Session;\n use rustc_span::Span;\n@@ -20,7 +20,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n         rustc_errors::error_code!(E0617)\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = self.sess.struct_span_fatal_with_code(\n             self.span,\n             &format!(\"can't pass `{}` to variadic function\", self.ty),\n@@ -47,8 +47,8 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n \n     fn diagnostic_extended(\n         &self,\n-        mut err: DiagnosticBuilder<'tcx, ErrorReported>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        mut err: DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         err.note(&format!(\n             \"certain types, like `{}`, must be casted before passing them to a \\\n                 variadic function, because of arcane ABI rules dictated by the C \\"}, {"sha": "9b058d32f79ee0fcb050a679602ea1f716819286", "filename": "compiler/rustc_typeck/src/structured_errors/sized_unsized_cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,5 +1,5 @@\n use crate::structured_errors::StructuredDiagnostic;\n-use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n use rustc_middle::ty::{Ty, TypeFoldable};\n use rustc_session::Session;\n use rustc_span::Span;\n@@ -20,7 +20,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n         rustc_errors::error_code!(E0607)\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = self.sess.struct_span_fatal_with_code(\n             self.span,\n             &format!(\n@@ -39,8 +39,8 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n \n     fn diagnostic_extended(\n         &self,\n-        mut err: DiagnosticBuilder<'tcx, ErrorReported>,\n-    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+        mut err: DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         err.help(\n             \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n memory address."}, {"sha": "4a11771df493f9ac32db2e9dab9b6098b91196a6", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,6 +1,6 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{\n-    pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported,\n+    pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed,\n };\n use rustc_hir as hir;\n use rustc_middle::hir::map::fn_sig;\n@@ -374,7 +374,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n-    fn start_diagnostics(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    fn start_diagnostics(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let span = self.path_segment.ident.span;\n         let msg = self.create_error_message();\n \n@@ -810,7 +810,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for WrongNumberOfGenericArgs<'_, 'tcx> {\n         rustc_errors::error_code!(E0107)\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = self.start_diagnostics();\n \n         self.notify(&mut err);"}, {"sha": "dad045887031e3b27f50a51edd13e6fef22626a5", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{ColorConfig, ErrorReported, FatalError};\n+use rustc_errors::{ColorConfig, ErrorGuaranteed, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit;\n@@ -44,7 +44,7 @@ crate struct GlobalTestOptions {\n     crate attrs: Vec<String>,\n }\n \n-crate fn run(options: RustdocOptions) -> Result<(), ErrorReported> {\n+crate fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n     let input = config::Input::File(options.input.clone());\n \n     let invalid_codeblock_attributes_name = crate::lint::INVALID_CODEBLOCK_ATTRIBUTES.name;\n@@ -154,14 +154,14 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorReported> {\n \n             let unused_extern_reports = collector.unused_extern_reports.clone();\n             let compiling_test_count = collector.compiling_test_count.load(Ordering::SeqCst);\n-            let ret: Result<_, ErrorReported> =\n+            let ret: Result<_, ErrorGuaranteed> =\n                 Ok((collector.tests, unused_extern_reports, compiling_test_count));\n             ret\n         })\n     });\n     let (tests, unused_extern_reports, compiling_test_count) = match res {\n         Ok(res) => res,\n-        Err(ErrorReported) => return Err(ErrorReported),\n+        Err(ErrorGuaranteed) => return Err(ErrorGuaranteed),\n     };\n \n     run_tests(test_args, nocapture, tests);\n@@ -619,7 +619,7 @@ crate fn make_test(\n     });\n     let (already_has_main, already_has_extern_crate, found_macro) = match result {\n         Ok(result) => result,\n-        Err(ErrorReported) => {\n+        Err(ErrorGuaranteed) => {\n             // If the parser panicked due to a fatal error, pass the test code through unchanged.\n             // The error will be reported during compilation.\n             return (s.to_owned(), 0, false);"}, {"sha": "4d88a4da45f4477359c0561c155734917632ac30", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -80,7 +80,7 @@ use std::io;\n use std::process;\n \n use rustc_driver::{abort_on_err, describe_lints};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_interface::interface;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n@@ -178,7 +178,7 @@ pub fn main() {\n \n     let exit_code = rustc_driver::catch_with_exit_code(|| match get_args() {\n         Some(args) => main_args(&args),\n-        _ => Err(ErrorReported),\n+        _ => Err(ErrorGuaranteed),\n     });\n     process::exit(exit_code);\n }\n@@ -671,7 +671,7 @@ fn usage(argv0: &str) {\n }\n \n /// A result type used by several functions under `main()`.\n-type MainResult = Result<(), ErrorReported>;\n+type MainResult = Result<(), ErrorGuaranteed>;\n \n fn main_args(at_args: &[String]) -> MainResult {\n     let args = rustc_driver::args::arg_expand_all(at_args);\n@@ -691,7 +691,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n     // codes from `from_matches` here.\n     let options = match config::Options::from_matches(&matches) {\n         Ok(opts) => opts,\n-        Err(code) => return if code == 0 { Ok(()) } else { Err(ErrorReported) },\n+        Err(code) => return if code == 0 { Ok(()) } else { Err(ErrorGuaranteed) },\n     };\n     rustc_interface::util::run_in_thread_pool_with_globals(\n         options.edition,\n@@ -705,7 +705,7 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainRes\n         Ok(()) => Ok(()),\n         Err(err) => {\n             diag.struct_err(&err).emit();\n-            Err(ErrorReported)\n+            Err(ErrorGuaranteed)\n         }\n     }\n }"}, {"sha": "2c4309fbe66f96e8d0666620d8772120212692c7", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e489a94deef3d41513fe4254804d730f0fd6cbc0/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e489a94deef3d41513fe4254804d730f0fd6cbc0/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=e489a94deef3d41513fe4254804d730f0fd6cbc0", "patch": "@@ -16,7 +16,7 @@ extern crate rustc_target;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::{CodegenResults, CrateInfo};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n@@ -47,7 +47,7 @@ impl CodegenBackend for TheBackend {\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n         _outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         let codegen_results = ongoing_codegen\n             .downcast::<CodegenResults>()\n             .expect(\"in join_codegen: ongoing_codegen is not a CodegenResults\");\n@@ -59,7 +59,7 @@ impl CodegenBackend for TheBackend {\n         sess: &Session,\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         use rustc_session::{config::CrateType, output::out_filename};\n         use std::io::Write;\n         let crate_name = codegen_results.crate_info.local_crate_name;"}]}