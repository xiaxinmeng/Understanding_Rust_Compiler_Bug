{"sha": "8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNzk1NGRjNDI1ZThjNmVlNGFhYWYxNGJlNTAxNWFkODk4MmQ1NDA=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-07T12:24:04Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-09T00:32:03Z"}, "message": "add a `CastKind` to `Node::Cast`", "tree": {"sha": "3af266c00fd2ea0e21ddb81db4ad4d9246566228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3af266c00fd2ea0e21ddb81db4ad4d9246566228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "html_url": "https://github.com/rust-lang/rust/commit/8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "955e2b2da0ca29042206a56060baa820a2d961e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/955e2b2da0ca29042206a56060baa820a2d961e7", "html_url": "https://github.com/rust-lang/rust/commit/955e2b2da0ca29042206a56060baa820a2d961e7"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "f80beadd6e5515e40d9f956d63301432ecb88782", "filename": "compiler/rustc_middle/src/thir/abstract_const.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fabstract_const.rs?ref=8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "patch": "@@ -11,14 +11,22 @@ rustc_index::newtype_index! {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n+pub enum CastKind {\n+    /// thir::ExprKind::As\n+    As,\n+    /// thir::ExprKind::Use\n+    Use,\n+}\n+\n /// A node of an `AbstractConst`.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n pub enum Node<'tcx> {\n     Leaf(&'tcx ty::Const<'tcx>),\n     Binop(mir::BinOp, NodeId, NodeId),\n     UnaryOp(mir::UnOp, NodeId),\n     FunctionCall(NodeId, &'tcx [NodeId]),\n-    Cast(NodeId, Ty<'tcx>),\n+    Cast(CastKind, NodeId, Ty<'tcx>),\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]"}, {"sha": "391e43054239d2d9929acd6c89ab01eb9989a357", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "patch": "@@ -158,7 +158,7 @@ where\n                 let leaf = leaf.subst(tcx, ct.substs);\n                 self.visit_const(leaf)\n             }\n-            ACNode::Cast(_, ty) => self.visit_ty(ty),\n+            ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n             ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n                 ControlFlow::CONTINUE\n             }"}, {"sha": "26c71a0f539212ab477f19e81f859c0bda83e23b", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "patch": "@@ -15,7 +15,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::thir;\n-use rustc_middle::thir::abstract_const::{Node, NodeId, NotConstEvaluatable};\n+use rustc_middle::thir::abstract_const::{self, Node, NodeId, NotConstEvaluatable};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n@@ -91,7 +91,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                         ControlFlow::CONTINUE\n                     }\n-                    Node::Cast(_, ty) => {\n+                    Node::Cast(_, _, ty) => {\n                         let ty = ty.subst(tcx, ct.substs);\n                         if ty.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n@@ -368,10 +368,13 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             // `ExprKind::Use` happens when a `hir::ExprKind::Cast` is a\n             // \"coercion cast\" i.e. using a coercion or is a no-op.\n             // This is important so that `N as usize as usize` doesnt unify with `N as usize`. (untested)\n-            &ExprKind::Use { source}\n-            | &ExprKind::Cast { source } => {\n+            &ExprKind::Use { source } => {\n                 let arg = self.recurse_build(source)?;\n-                self.nodes.push(Node::Cast(arg, node.ty))\n+                self.nodes.push(Node::Cast(abstract_const::CastKind::Use, arg, node.ty))\n+            },\n+            &ExprKind::Cast { source } => {\n+                let arg = self.recurse_build(source)?;\n+                self.nodes.push(Node::Cast(abstract_const::CastKind::As, arg, node.ty))\n             },\n \n             // FIXME(generic_const_exprs): We may want to support these.\n@@ -494,7 +497,7 @@ where\n                 recurse(tcx, ct.subtree(func), f)?;\n                 args.iter().try_for_each(|&arg| recurse(tcx, ct.subtree(arg), f))\n             }\n-            Node::Cast(operand, _) => recurse(tcx, ct.subtree(operand), f),\n+            Node::Cast(_, operand, _) => recurse(tcx, ct.subtree(operand), f),\n         }\n     }\n \n@@ -577,7 +580,7 @@ pub(super) fn try_unify<'tcx>(\n                 && iter::zip(a_args, b_args)\n                     .all(|(&an, &bn)| try_unify(tcx, a.subtree(an), b.subtree(bn)))\n         }\n-        (Node::Cast(a_operand, a_ty), Node::Cast(b_operand, b_ty)) if (a_ty == b_ty) => {\n+        (Node::Cast(a_kind, a_operand, a_ty), Node::Cast(b_kind, b_operand, b_ty)) if (a_ty == b_ty) && (a_kind == b_kind) => {\n             try_unify(tcx, a.subtree(a_operand), b.subtree(b_operand))\n         }\n         // use this over `_ => false` to make adding variants to `Node` less error prone"}, {"sha": "70cdbe4d5c7cb45b5cc394f31f98ea69c202ae28", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "patch": "@@ -843,7 +843,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n                         self.visit_const(leaf)\n                     }\n-                    Node::Cast(_, ty) => self.visit_ty(ty),\n+                    Node::Cast(_, _, ty) => self.visit_ty(ty),\n                     Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n                         ControlFlow::CONTINUE\n                     }"}, {"sha": "b3cde61f5e7f2b1f2aca55196caf706b48e918ac", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-consts-as-cast-5.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-consts-as-cast-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-consts-as-cast-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-consts-as-cast-5.rs?ref=8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "patch": "@@ -0,0 +1,11 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: u8>(a: [(); N as usize]) {\n+    bar::<{ N as usize as usize }>();\n+    //~^ error: unconstrained generic constant\n+}\n+\n+fn bar<const N: usize>() {}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "d48b639dbdee33033719841f0ba082cbda0ec89a", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-consts-as-cast-5.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-consts-as-cast-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7954dc425e8c6ee4aaaf14be5015ad8982d540/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-consts-as-cast-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-consts-as-cast-5.stderr?ref=8c7954dc425e8c6ee4aaaf14be5015ad8982d540", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/abstract-consts-as-cast-5.rs:5:11\n+   |\n+LL |     bar::<{ N as usize as usize }>();\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { N as usize as usize }]:`\n+\n+error: aborting due to previous error\n+"}]}