{"sha": "8d7b3199d9a285b66b4f9a49d97234c956cb5e6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkN2IzMTk5ZDlhMjg1YjY2YjRmOWE0OWQ5NzIzNGM5NTZjYjVlNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T06:42:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T06:42:06Z"}, "message": "auto merge of #19212 : steveklabnik/rust/doc_format_specifiers, r=alexcrichton\n\nFixes #19209", "tree": {"sha": "93cd013e81d08ee32b757f3517b3e82f8cf7ec79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93cd013e81d08ee32b757f3517b3e82f8cf7ec79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c", "html_url": "https://github.com/rust-lang/rust/commit/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedfc077964b811315589d9a70293d3ff2eb0e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eedfc077964b811315589d9a70293d3ff2eb0e1d", "html_url": "https://github.com/rust-lang/rust/commit/eedfc077964b811315589d9a70293d3ff2eb0e1d"}, {"sha": "7dadb14fb213e6f5d7948aafc4a71726b1242d9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dadb14fb213e6f5d7948aafc4a71726b1242d9c", "html_url": "https://github.com/rust-lang/rust/commit/7dadb14fb213e6f5d7948aafc4a71726b1242d9c"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "c817e6a806bb79dfc74ca283503219ee7a1fbe11", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7b3199d9a285b66b4f9a49d97234c956cb5e6c/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=8d7b3199d9a285b66b4f9a49d97234c956cb5e6c", "patch": "@@ -106,35 +106,31 @@ named parameters that are unused by the format string.\n \n ### Argument types\n \n-Each argument's type is dictated by the format string. It is a requirement that\n-every argument is only ever referred to by one type. For example, this is an\n-invalid format string:\n+Each argument's type is dictated by the format string. It is a requirement that every argument is\n+only ever referred to by one type. For example, this is an invalid format string:\n \n ```text\n-{0:d} {0:s}\n+{0:x} {0:o}\n ```\n \n-This is invalid because the first argument is both referred to as an integer as\n-well as a string.\n+This is invalid because the first argument is both referred to as a hexidecimal as well as an\n+octal.\n \n-Because formatting is done via traits, there is no requirement that the\n-`d` format actually takes an `int`, but rather it simply requires a type which\n-ascribes to the `Signed` formatting trait. There are various parameters which do\n-require a particular type, however. Namely if the syntax `{:.*s}` is used, then\n-the number of characters to print from the string precedes the actual string and\n-must have the type `uint`. Although a `uint` can be printed with `{:u}`, it is\n-illegal to reference an argument as such. For example, this is another invalid\n+There are various parameters which do require a particular type, however. Namely if the syntax\n+`{:.*}` is used, then the number of characters to print precedes the actual object being formatted,\n+and the number of characters must have the type `uint`. Although a `uint` can be printed with\n+`{}`, it is illegal to reference an argument as such. For example this is another invalid\n format string:\n \n ```text\n-{:.*s} {0:u}\n+{:.*} {0}\n ```\n \n ### Formatting traits\n \n When requesting that an argument be formatted with a particular type, you are\n actually requesting that an argument ascribes to a particular trait. This allows\n-multiple actual types to be formatted via `{:d}` (like `i8` as well as `int`).\n+multiple actual types to be formatted via `{:x}` (like `i8` as well as `int`).\n The current mapping of types to traits is:\n \n * *nothing* \u21d2 `Show`\n@@ -157,12 +153,12 @@ When implementing a format trait for your own type, you will have to implement a\n method of the signature:\n \n ```rust\n-# use std;\n-# mod fmt { pub type Result = (); }\n-# struct T;\n-# trait SomeName<T> {\n-fn fmt(&self, f: &mut std::fmt::Formatter) -> fmt::Result;\n-# }\n+# use std::fmt;\n+# struct Foo; // our custom type\n+# impl fmt::Show for Foo {\n+fn fmt(&self, f: &mut std::fmt::Formatter) -> fmt::Result {\n+# write!(f, \"testing, testing\")\n+# } }\n ```\n \n Your type will be passed as `self` by-reference, and then the function should\n@@ -237,7 +233,6 @@ println!     // same as print but appends a newline\n format_args! // described below.\n ```\n \n-\n #### `write!`\n \n This and `writeln` are two macros which are used to emit the format string to a"}]}