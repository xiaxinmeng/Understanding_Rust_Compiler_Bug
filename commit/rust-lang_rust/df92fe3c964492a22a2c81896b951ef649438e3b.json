{"sha": "df92fe3c964492a22a2c81896b951ef649438e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOTJmZTNjOTY0NDkyYTIyYTJjODE4OTZiOTUxZWY2NDk0MzhlM2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-04T15:33:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T20:23:33Z"}, "message": "Rename regionmanip to implicator.", "tree": {"sha": "7b7f9c8f0240c86e86882e1de6cba693c7a9597b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7f9c8f0240c86e86882e1de6cba693c7a9597b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df92fe3c964492a22a2c81896b951ef649438e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df92fe3c964492a22a2c81896b951ef649438e3b", "html_url": "https://github.com/rust-lang/rust/commit/df92fe3c964492a22a2c81896b951ef649438e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df92fe3c964492a22a2c81896b951ef649438e3b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc5c0f1e8799f47f9033bdcc8a7cd8a217620a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc5c0f1e8799f47f9033bdcc8a7cd8a217620a5", "html_url": "https://github.com/rust-lang/rust/commit/dfc5c0f1e8799f47f9033bdcc8a7cd8a217620a5"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "209570585d29dd87d902ef621fc239821133b515", "filename": "src/librustc_typeck/check/implicator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/df92fe3c964492a22a2c81896b951ef649438e3b/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df92fe3c964492a22a2c81896b951ef649438e3b/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs?ref=df92fe3c964492a22a2c81896b951ef649438e3b", "previous_filename": "src/librustc_typeck/check/regionmanip.rs"}, {"sha": "4c91db5a62caf07044d13374f0c703c5ee4dcbaf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df92fe3c964492a22a2c81896b951ef649438e3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df92fe3c964492a22a2c81896b951ef649438e3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df92fe3c964492a22a2c81896b951ef649438e3b", "patch": "@@ -131,7 +131,7 @@ pub mod dropck;\n pub mod _match;\n pub mod vtable;\n pub mod writeback;\n-pub mod regionmanip;\n+pub mod implicator;\n pub mod regionck;\n pub mod coercion;\n pub mod demand;"}, {"sha": "6b5063375086fcf7ea7f4427ea813a33232739ca", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df92fe3c964492a22a2c81896b951ef649438e3b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df92fe3c964492a22a2c81896b951ef649438e3b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=df92fe3c964492a22a2c81896b951ef649438e3b", "patch": "@@ -85,7 +85,7 @@\n use astconv::AstConv;\n use check::dropck;\n use check::FnCtxt;\n-use check::regionmanip;\n+use check::implicator;\n use check::vtable;\n use middle::def;\n use middle::mem_categorization as mc;\n@@ -336,24 +336,24 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n             let body_scope = CodeExtent::from_node_id(body_id);\n             let body_scope = ty::ReScope(body_scope);\n             let constraints =\n-                regionmanip::region_wf_constraints(\n+                implicator::region_wf_constraints(\n                     tcx,\n                     ty,\n                     body_scope);\n             for constraint in &constraints {\n                 debug!(\"constraint: {}\", constraint.repr(tcx));\n                 match *constraint {\n-                    regionmanip::RegionSubRegionConstraint(_,\n+                    implicator::RegionSubRegionConstraint(_,\n                                               ty::ReFree(free_a),\n                                               ty::ReFree(free_b)) => {\n                         tcx.region_maps.relate_free_regions(free_a, free_b);\n                     }\n-                    regionmanip::RegionSubRegionConstraint(_,\n+                    implicator::RegionSubRegionConstraint(_,\n                                               ty::ReFree(free_a),\n                                               ty::ReInfer(ty::ReVar(vid_b))) => {\n                         self.fcx.inh.infcx.add_given(free_a, vid_b);\n                     }\n-                    regionmanip::RegionSubRegionConstraint(..) => {\n+                    implicator::RegionSubRegionConstraint(..) => {\n                         // In principle, we could record (and take\n                         // advantage of) every relationship here, but\n                         // we are also free not to -- it simply means\n@@ -364,7 +364,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n                         // relationship that arises here, but\n                         // presently we do not.)\n                     }\n-                    regionmanip::RegionSubGenericConstraint(_, r_a, ref generic_b) => {\n+                    implicator::RegionSubGenericConstraint(_, r_a, ref generic_b) => {\n                         debug!(\"RegionSubGenericConstraint: {} <= {}\",\n                                r_a.repr(tcx), generic_b.repr(tcx));\n \n@@ -1482,24 +1482,24 @@ pub fn type_must_outlive<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n            region.repr(rcx.tcx()));\n \n     let constraints =\n-        regionmanip::region_wf_constraints(\n+        implicator::region_wf_constraints(\n             rcx.tcx(),\n             ty,\n             region);\n     for constraint in &constraints {\n         debug!(\"constraint: {}\", constraint.repr(rcx.tcx()));\n         match *constraint {\n-            regionmanip::RegionSubRegionConstraint(None, r_a, r_b) => {\n+            implicator::RegionSubRegionConstraint(None, r_a, r_b) => {\n                 rcx.fcx.mk_subr(origin.clone(), r_a, r_b);\n             }\n-            regionmanip::RegionSubRegionConstraint(Some(ty), r_a, r_b) => {\n+            implicator::RegionSubRegionConstraint(Some(ty), r_a, r_b) => {\n                 let o1 = infer::ReferenceOutlivesReferent(ty, origin.span());\n                 rcx.fcx.mk_subr(o1, r_a, r_b);\n             }\n-            regionmanip::RegionSubGenericConstraint(None, r_a, ref generic_b) => {\n+            implicator::RegionSubGenericConstraint(None, r_a, ref generic_b) => {\n                 generic_must_outlive(rcx, origin.clone(), r_a, generic_b);\n             }\n-            regionmanip::RegionSubGenericConstraint(Some(ty), r_a, ref generic_b) => {\n+            implicator::RegionSubGenericConstraint(Some(ty), r_a, ref generic_b) => {\n                 let o1 = infer::ReferenceOutlivesReferent(ty, origin.span());\n                 generic_must_outlive(rcx, o1, r_a, generic_b);\n             }"}]}