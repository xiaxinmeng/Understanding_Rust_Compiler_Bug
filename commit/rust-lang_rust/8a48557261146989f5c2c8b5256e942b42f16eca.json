{"sha": "8a48557261146989f5c2c8b5256e942b42f16eca", "node_id": "C_kwDOAAsO6NoAKDhhNDg1NTcyNjExNDY5ODlmNWMyYzhiNTI1NmU5NDJiNDJmMTZlY2E", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-07-13T08:38:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-13T08:38:43Z"}, "message": "Rollup merge of #99020 - fee1-dead-contrib:repr_transparent_non_exhaustive, r=oli-obk\n\ncheck non_exhaustive attr and private fields for transparent types\n\nFixes #78586.", "tree": {"sha": "e532f0a749c2117a0048de2518c66bf1867aabc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e532f0a749c2117a0048de2518c66bf1867aabc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a48557261146989f5c2c8b5256e942b42f16eca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizoSUCRBK7hj4Ov3rIwAAXBEIAJnl0AOipinLWKUgg47dwWK4\n5wf7weXAF29kHphpsL+b+lek3lsBWhwKYCOSm/osu6GeVMxbOUZQsc8O+z+I4sdT\nlnbOiw5LE6+MmmONCtnx4OUWIWxKPbPxBgWBhVTqB0TB+yS2EAqk4jiFAsPiKRhF\njXFpI7CR2QeuVAkmxy3mfnNze4eHdTVhwSiZQoT1BXpGtswj6bnAtKN3Pip4PHdv\ntbglLFQSdDIjyrK8D0WTDdnn3cInhI6ntiLitFygNFEurS09o70WhyVdG41LFmA/\nK8YhaFrUYQAG2QnJwr0nnBeax07ANogdfG1RPT+KFzkFvRh91q5qJ+OZVxJVkoU=\n=oKRl\n-----END PGP SIGNATURE-----\n", "payload": "tree e532f0a749c2117a0048de2518c66bf1867aabc5\nparent 0b3644e1f3cd4756a2353b25b0579853351b4a26\nparent 1d260067f14a41ea64bd2c7c2c537d5bc33380d6\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1657701523 +0200\ncommitter GitHub <noreply@github.com> 1657701523 +0200\n\nRollup merge of #99020 - fee1-dead-contrib:repr_transparent_non_exhaustive, r=oli-obk\n\ncheck non_exhaustive attr and private fields for transparent types\n\nFixes #78586.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a48557261146989f5c2c8b5256e942b42f16eca", "html_url": "https://github.com/rust-lang/rust/commit/8a48557261146989f5c2c8b5256e942b42f16eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a48557261146989f5c2c8b5256e942b42f16eca/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b3644e1f3cd4756a2353b25b0579853351b4a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3644e1f3cd4756a2353b25b0579853351b4a26", "html_url": "https://github.com/rust-lang/rust/commit/0b3644e1f3cd4756a2353b25b0579853351b4a26"}, {"sha": "1d260067f14a41ea64bd2c7c2c537d5bc33380d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d260067f14a41ea64bd2c7c2c537d5bc33380d6", "html_url": "https://github.com/rust-lang/rust/commit/1d260067f14a41ea64bd2c7c2c537d5bc33380d6"}], "stats": {"total": 367, "additions": 362, "deletions": 5}, "files": [{"sha": "6d2cb63c1d71a126a89bede260221b41db7d7153", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8a48557261146989f5c2c8b5256e942b42f16eca/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a48557261146989f5c2c8b5256e942b42f16eca/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=8a48557261146989f5c2c8b5256e942b42f16eca", "patch": "@@ -3132,6 +3132,60 @@ declare_lint! {\n     \"detects unexpected names and values in `#[cfg]` conditions\",\n }\n \n+declare_lint! {\n+    /// The `repr_transparent_external_private_fields` lint\n+    /// detects types marked `#[repr(transparent)]` that (transitively)\n+    /// contain an external ZST type marked `#[non_exhaustive]` or containing\n+    /// private fields\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (needs external crate)\n+    /// #![deny(repr_transparent_external_private_fields)]\n+    /// use foo::NonExhaustiveZst;\n+    ///\n+    /// #[repr(transparent)]\n+    /// struct Bar(u32, ([u32; 0], NonExhaustiveZst));\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+    ///  --> src/main.rs:5:28\n+    ///   |\n+    /// 5 | struct Bar(u32, ([u32; 0], NonExhaustiveZst));\n+    ///   |                            ^^^^^^^^^^^^^^^^\n+    ///   |\n+    /// note: the lint level is defined here\n+    ///  --> src/main.rs:1:9\n+    ///   |\n+    /// 1 | #![deny(repr_transparent_external_private_fields)]\n+    ///   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    ///   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    ///   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+    ///   = note: this struct contains `NonExhaustiveZst`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Previous, Rust accepted fields that contain external private zero-sized types,\n+    /// even though it should not be a breaking change to add a non-zero-sized field to\n+    /// that private type.\n+    ///\n+    /// This is a [future-incompatible] lint to transition this\n+    /// to a hard error in the future. See [issue #78586] for more details.\n+    ///\n+    /// [issue #78586]: https://github.com/rust-lang/rust/issues/78586\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n+    Warn,\n+    \"tranparent type contains an external ZST that is marked #[non_exhaustive] or contains private fields\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #78586 <https://github.com/rust-lang/rust/issues/78586>\",\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3237,6 +3291,7 @@ declare_lint_pass! {\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n         TEST_UNSTABLE_LINT,\n         FFI_UNWIND_CALLS,\n+        REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n     ]\n }\n "}, {"sha": "79edbeab9c72e95d607331a981ff4f7ad232adbb", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8a48557261146989f5c2c8b5256e942b42f16eca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a48557261146989f5c2c8b5256e942b42f16eca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=8a48557261146989f5c2c8b5256e942b42f16eca", "patch": "@@ -17,6 +17,7 @@ use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n+use rustc_lint::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -1318,7 +1319,8 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n         }\n     }\n \n-    // For each field, figure out if it's known to be a ZST and align(1)\n+    // For each field, figure out if it's known to be a ZST and align(1), with \"known\"\n+    // respecting #[non_exhaustive] attributes.\n     let field_infos = adt.all_fields().map(|field| {\n         let ty = field.ty(tcx, InternalSubsts::identity_for_item(tcx, field.did));\n         let param_env = tcx.param_env(field.did);\n@@ -1327,16 +1329,56 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n         let span = tcx.hir().span_if_local(field.did).unwrap();\n         let zst = layout.map_or(false, |layout| layout.is_zst());\n         let align1 = layout.map_or(false, |layout| layout.align.abi.bytes() == 1);\n-        (span, zst, align1)\n+        if !zst {\n+            return (span, zst, align1, None);\n+        }\n+\n+        fn check_non_exhaustive<'tcx>(\n+            tcx: TyCtxt<'tcx>,\n+            t: Ty<'tcx>,\n+        ) -> ControlFlow<(&'static str, DefId, SubstsRef<'tcx>, bool)> {\n+            match t.kind() {\n+                ty::Tuple(list) => list.iter().try_for_each(|t| check_non_exhaustive(tcx, t)),\n+                ty::Array(ty, _) => check_non_exhaustive(tcx, *ty),\n+                ty::Adt(def, subst) => {\n+                    if !def.did().is_local() {\n+                        let non_exhaustive = def.is_variant_list_non_exhaustive()\n+                            || def\n+                                .variants()\n+                                .iter()\n+                                .any(ty::VariantDef::is_field_list_non_exhaustive);\n+                        let has_priv = def.all_fields().any(|f| !f.vis.is_public());\n+                        if non_exhaustive || has_priv {\n+                            return ControlFlow::Break((\n+                                def.descr(),\n+                                def.did(),\n+                                subst,\n+                                non_exhaustive,\n+                            ));\n+                        }\n+                    }\n+                    def.all_fields()\n+                        .map(|field| field.ty(tcx, subst))\n+                        .try_for_each(|t| check_non_exhaustive(tcx, t))\n+                }\n+                _ => ControlFlow::Continue(()),\n+            }\n+        }\n+\n+        (span, zst, align1, check_non_exhaustive(tcx, ty).break_value())\n     });\n \n-    let non_zst_fields =\n-        field_infos.clone().filter_map(|(span, zst, _align1)| if !zst { Some(span) } else { None });\n+    let non_zst_fields = field_infos\n+        .clone()\n+        .filter_map(|(span, zst, _align1, _non_exhaustive)| if !zst { Some(span) } else { None });\n     let non_zst_count = non_zst_fields.clone().count();\n     if non_zst_count >= 2 {\n         bad_non_zero_sized_fields(tcx, adt, non_zst_count, non_zst_fields, sp);\n     }\n-    for (span, zst, align1) in field_infos {\n+    let incompatible_zst_fields =\n+        field_infos.clone().filter(|(_, _, _, opt)| opt.is_some()).count();\n+    let incompat = incompatible_zst_fields + non_zst_count >= 2 && non_zst_count < 2;\n+    for (span, zst, align1, non_exhaustive) in field_infos {\n         if zst && !align1 {\n             struct_span_err!(\n                 tcx.sess,\n@@ -1348,6 +1390,25 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n             .span_label(span, \"has alignment larger than 1\")\n             .emit();\n         }\n+        if incompat && let Some((descr, def_id, substs, non_exhaustive)) = non_exhaustive {\n+            tcx.struct_span_lint_hir(\n+                REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n+                tcx.hir().local_def_id_to_hir_id(adt.did().expect_local()),\n+                span,\n+                |lint| {\n+                    let note = if non_exhaustive {\n+                        \"is marked with `#[non_exhaustive]`\"\n+                    } else {\n+                        \"contains private fields\"\n+                    };\n+                    let field_ty = tcx.def_path_str_with_substs(def_id, substs);\n+                    lint.build(\"zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\")\n+                        .note(format!(\"this {descr} contains `{field_ty}`, which {note}, \\\n+                            and makes it not a breaking change to become non-zero-sized in the future.\"))\n+                        .emit();\n+                },\n+            )\n+        }\n     }\n }\n "}, {"sha": "4bf6b54fe0787bea76ab402796cbaefa388eed68", "filename": "src/test/ui/repr/auxiliary/repr-transparent-non-exhaustive.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a48557261146989f5c2c8b5256e942b42f16eca/src%2Ftest%2Fui%2Frepr%2Fauxiliary%2Frepr-transparent-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a48557261146989f5c2c8b5256e942b42f16eca/src%2Ftest%2Fui%2Frepr%2Fauxiliary%2Frepr-transparent-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fauxiliary%2Frepr-transparent-non-exhaustive.rs?ref=8a48557261146989f5c2c8b5256e942b42f16eca", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+\n+pub struct Private { _priv: () }\n+\n+#[non_exhaustive]\n+pub struct NonExhaustive {}\n+\n+#[non_exhaustive]\n+pub enum NonExhaustiveEnum {}\n+\n+pub enum NonExhaustiveVariant {\n+    #[non_exhaustive]\n+    A,\n+}\n+\n+pub struct ExternalIndirection<T> {\n+    pub x: T,\n+}"}, {"sha": "9ccd8610dad475e3db80972685845150dae927b5", "filename": "src/test/ui/repr/repr-transparent-non-exhaustive.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8a48557261146989f5c2c8b5256e942b42f16eca/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a48557261146989f5c2c8b5256e942b42f16eca/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.rs?ref=8a48557261146989f5c2c8b5256e942b42f16eca", "patch": "@@ -0,0 +1,96 @@\n+#![deny(repr_transparent_external_private_fields)]\n+\n+// aux-build: repr-transparent-non-exhaustive.rs\n+extern crate repr_transparent_non_exhaustive;\n+\n+use repr_transparent_non_exhaustive::{\n+    Private,\n+    NonExhaustive,\n+    NonExhaustiveEnum,\n+    NonExhaustiveVariant,\n+    ExternalIndirection,\n+};\n+\n+pub struct InternalPrivate {\n+    _priv: (),\n+}\n+\n+#[non_exhaustive]\n+pub struct InternalNonExhaustive;\n+\n+pub struct InternalIndirection<T> {\n+    x: T,\n+}\n+\n+pub type Sized = i32;\n+\n+#[repr(transparent)]\n+pub struct T1(Sized, InternalPrivate);\n+#[repr(transparent)]\n+pub struct T2(Sized, InternalNonExhaustive);\n+#[repr(transparent)]\n+pub struct T3(Sized, InternalIndirection<(InternalPrivate, InternalNonExhaustive)>);\n+#[repr(transparent)]\n+pub struct T4(Sized, ExternalIndirection<(InternalPrivate, InternalNonExhaustive)>);\n+\n+#[repr(transparent)]\n+pub struct T5(Sized, Private);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T6(Sized, NonExhaustive);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T7(Sized, NonExhaustiveEnum);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T8(Sized, NonExhaustiveVariant);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T9(Sized, InternalIndirection<Private>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T10(Sized, InternalIndirection<NonExhaustive>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T11(Sized, InternalIndirection<NonExhaustiveEnum>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T12(Sized, InternalIndirection<NonExhaustiveVariant>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T13(Sized, ExternalIndirection<Private>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T14(Sized, ExternalIndirection<NonExhaustive>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T15(Sized, ExternalIndirection<NonExhaustiveEnum>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T16(Sized, ExternalIndirection<NonExhaustiveVariant>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "3b1e334a0cbe2a6738e303e311653c5b38816e96", "filename": "src/test/ui/repr/repr-transparent-non-exhaustive.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/8a48557261146989f5c2c8b5256e942b42f16eca/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a48557261146989f5c2c8b5256e942b42f16eca/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.stderr?ref=8a48557261146989f5c2c8b5256e942b42f16eca", "patch": "@@ -0,0 +1,127 @@\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:37:22\n+   |\n+LL | pub struct T5(Sized, Private);\n+   |                      ^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/repr-transparent-non-exhaustive.rs:1:9\n+   |\n+LL | #![deny(repr_transparent_external_private_fields)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `Private`, which contains private fields, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:42:22\n+   |\n+LL | pub struct T6(Sized, NonExhaustive);\n+   |                      ^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `NonExhaustive`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:47:22\n+   |\n+LL | pub struct T7(Sized, NonExhaustiveEnum);\n+   |                      ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveEnum`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:52:22\n+   |\n+LL | pub struct T8(Sized, NonExhaustiveVariant);\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveVariant`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:57:22\n+   |\n+LL | pub struct T9(Sized, InternalIndirection<Private>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `Private`, which contains private fields, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:62:23\n+   |\n+LL | pub struct T10(Sized, InternalIndirection<NonExhaustive>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `NonExhaustive`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:67:23\n+   |\n+LL | pub struct T11(Sized, InternalIndirection<NonExhaustiveEnum>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveEnum`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:72:23\n+   |\n+LL | pub struct T12(Sized, InternalIndirection<NonExhaustiveVariant>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveVariant`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:77:23\n+   |\n+LL | pub struct T13(Sized, ExternalIndirection<Private>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `Private`, which contains private fields, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:82:23\n+   |\n+LL | pub struct T14(Sized, ExternalIndirection<NonExhaustive>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `NonExhaustive`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:87:23\n+   |\n+LL | pub struct T15(Sized, ExternalIndirection<NonExhaustiveEnum>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveEnum`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:92:23\n+   |\n+LL | pub struct T16(Sized, ExternalIndirection<NonExhaustiveVariant>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveVariant`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: aborting due to 12 previous errors\n+"}]}