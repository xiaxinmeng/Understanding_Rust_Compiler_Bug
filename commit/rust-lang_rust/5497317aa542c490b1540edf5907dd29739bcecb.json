{"sha": "5497317aa542c490b1540edf5907dd29739bcecb", "node_id": "C_kwDOAAsO6NoAKDU0OTczMTdhYTU0MmM0OTBiMTU0MGVkZjU5MDdkZDI5NzM5YmNlY2I", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-14T19:18:38Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-14T19:29:37Z"}, "message": "Do autoderef to match impl against rcvr", "tree": {"sha": "18429f0dc57acd2caa1693ef91872e8329548031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18429f0dc57acd2caa1693ef91872e8329548031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5497317aa542c490b1540edf5907dd29739bcecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5497317aa542c490b1540edf5907dd29739bcecb", "html_url": "https://github.com/rust-lang/rust/commit/5497317aa542c490b1540edf5907dd29739bcecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5497317aa542c490b1540edf5907dd29739bcecb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf607dae3f555f714c814a03478be560ae1c37e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf607dae3f555f714c814a03478be560ae1c37e8", "html_url": "https://github.com/rust-lang/rust/commit/bf607dae3f555f714c814a03478be560ae1c37e8"}], "stats": {"total": 141, "additions": 95, "deletions": 46}, "files": [{"sha": "edfe12963dc635adaa85b413d0fe441c8b4e73e9", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5497317aa542c490b1540edf5907dd29739bcecb/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5497317aa542c490b1540edf5907dd29739bcecb/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=5497317aa542c490b1540edf5907dd29739bcecb", "patch": "@@ -20,11 +20,10 @@ use rustc_infer::infer::{\n };\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::traits::util::supertraits;\n+use rustc_middle::ty::fast_reject::DeepRejectCtxt;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{\n-    self, DefIdTree, GenericArg, GenericArgKind, ToPredicate, Ty, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, DefIdTree, GenericArgKind, ToPredicate, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n@@ -1090,50 +1089,51 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // When the \"method\" is resolved through dereferencing, we really want the\n             // original type that has the associated function for accurate suggestions.\n             // (#61411)\n-            let ty = self.tcx.type_of(*impl_did);\n-            match (&ty.peel_refs().kind(), &rcvr_ty.peel_refs().kind()) {\n-                (ty::Adt(def, _), ty::Adt(def_actual, substs)) if def == def_actual => {\n-                    // If there are any inferred arguments, (`{integer}`), we should replace\n-                    // them with underscores to allow the compiler to infer them\n-                    let infer_substs: Vec<GenericArg<'_>> = substs\n-                        .into_iter()\n-                        .map(|arg| {\n-                            if !arg.is_suggestable(self.tcx, true) {\n-                                has_unsuggestable_args = true;\n-                                match arg.unpack() {\n-                                    GenericArgKind::Lifetime(_) => self\n-                                        .next_region_var(RegionVariableOrigin::MiscVariable(\n-                                            rustc_span::DUMMY_SP,\n-                                        ))\n-                                        .into(),\n-                                    GenericArgKind::Type(_) => self\n-                                        .next_ty_var(TypeVariableOrigin {\n-                                            span: rustc_span::DUMMY_SP,\n-                                            kind: TypeVariableOriginKind::MiscVariable,\n-                                        })\n-                                        .into(),\n-                                    GenericArgKind::Const(arg) => self\n-                                        .next_const_var(\n-                                            arg.ty(),\n-                                            ConstVariableOrigin {\n-                                                span: rustc_span::DUMMY_SP,\n-                                                kind: ConstVariableOriginKind::MiscVariable,\n-                                            },\n-                                        )\n-                                        .into(),\n-                                }\n-                            } else {\n-                                arg\n-                            }\n-                        })\n-                        .collect::<Vec<_>>();\n+            let impl_ty = self.tcx.type_of(*impl_did);\n+            let target_ty = self\n+                .autoderef(sugg_span, rcvr_ty)\n+                .find(|(rcvr_ty, _)| {\n+                    DeepRejectCtxt { treat_obligation_params: TreatParams::AsInfer }\n+                        .types_may_unify(*rcvr_ty, impl_ty)\n+                })\n+                .map_or(impl_ty, |(ty, _)| ty)\n+                .peel_refs();\n+            if let ty::Adt(def, substs) = target_ty.kind() {\n+                // If there are any inferred arguments, (`{integer}`), we should replace\n+                // them with underscores to allow the compiler to infer them\n+                let infer_substs = self.tcx.mk_substs(substs.into_iter().map(|arg| {\n+                    if !arg.is_suggestable(self.tcx, true) {\n+                        has_unsuggestable_args = true;\n+                        match arg.unpack() {\n+                            GenericArgKind::Lifetime(_) => self\n+                                .next_region_var(RegionVariableOrigin::MiscVariable(\n+                                    rustc_span::DUMMY_SP,\n+                                ))\n+                                .into(),\n+                            GenericArgKind::Type(_) => self\n+                                .next_ty_var(TypeVariableOrigin {\n+                                    span: rustc_span::DUMMY_SP,\n+                                    kind: TypeVariableOriginKind::MiscVariable,\n+                                })\n+                                .into(),\n+                            GenericArgKind::Const(arg) => self\n+                                .next_const_var(\n+                                    arg.ty(),\n+                                    ConstVariableOrigin {\n+                                        span: rustc_span::DUMMY_SP,\n+                                        kind: ConstVariableOriginKind::MiscVariable,\n+                                    },\n+                                )\n+                                .into(),\n+                        }\n+                    } else {\n+                        arg\n+                    }\n+                }));\n \n-                    self.tcx.value_path_str_with_substs(\n-                        def_actual.did(),\n-                        self.tcx.intern_substs(&infer_substs),\n-                    )\n-                }\n-                _ => self.ty_to_value_string(ty.peel_refs()),\n+                self.tcx.value_path_str_with_substs(def.did(), infer_substs)\n+            } else {\n+                self.ty_to_value_string(target_ty)\n             }\n         } else {\n             self.ty_to_value_string(rcvr_ty.peel_refs())"}, {"sha": "8d96cf590c39881580492456617070a236e5bc5e", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-deref.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5497317aa542c490b1540edf5907dd29739bcecb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5497317aa542c490b1540edf5907dd29739bcecb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.fixed?ref=5497317aa542c490b1540edf5907dd29739bcecb", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+struct Foo<T>(T);\n+\n+impl<T> Foo<T> {\n+    fn test() -> i32 { 1 }\n+}\n+\n+fn main() {\n+    let x = Box::new(Foo(1i32));\n+    Foo::<i32>::test();\n+    //~^ ERROR no method named `test` found for struct `Box<Foo<i32>>` in the current scope\n+}"}, {"sha": "186901f75a84ba992527e5026ca23624991c51dd", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-deref.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5497317aa542c490b1540edf5907dd29739bcecb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5497317aa542c490b1540edf5907dd29739bcecb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.rs?ref=5497317aa542c490b1540edf5907dd29739bcecb", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+struct Foo<T>(T);\n+\n+impl<T> Foo<T> {\n+    fn test() -> i32 { 1 }\n+}\n+\n+fn main() {\n+    let x = Box::new(Foo(1i32));\n+    x.test();\n+    //~^ ERROR no method named `test` found for struct `Box<Foo<i32>>` in the current scope\n+}"}, {"sha": "00fb96f032668087dd2385c471c38f5b5b1f4a8a", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-deref.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5497317aa542c490b1540edf5907dd29739bcecb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5497317aa542c490b1540edf5907dd29739bcecb/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-deref.stderr?ref=5497317aa542c490b1540edf5907dd29739bcecb", "patch": "@@ -0,0 +1,19 @@\n+error[E0599]: no method named `test` found for struct `Box<Foo<i32>>` in the current scope\n+  --> $DIR/suggest-assoc-fn-call-deref.rs:13:7\n+   |\n+LL |     x.test();\n+   |     --^^^^--\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `Foo::<i32>::test()`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in an impl for the type `Foo<T>`\n+  --> $DIR/suggest-assoc-fn-call-deref.rs:8:5\n+   |\n+LL |     fn test() -> i32 { 1 }\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}