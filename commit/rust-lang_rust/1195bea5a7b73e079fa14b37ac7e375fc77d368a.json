{"sha": "1195bea5a7b73e079fa14b37ac7e375fc77d368a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOTViZWE1YTdiNzNlMDc5ZmExNGIzN2FjN2UzNzVmYzc3ZDM2OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T09:43:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T09:43:32Z"}, "message": "Auto merge of #87615 - JohnTitor:rollup-t5jpmrg, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #87052 (Optimize fmt::PadAdapter::wrap)\n - #87522 (Fix assert in diy_float)\n - #87553 (Fix typo in rustc_driver::version)\n - #87554 (2229: Discr should be read when PatKind is Range)\n - #87564 (min_type_alias_impl_trait is going to be removed in 1.56)\n - #87574 (Update the examples in `String` and `VecDeque::retain`)\n - #87583 (Refactor compression cache in v0 symbol mangler)\n - #87585 (Add missing links for core::char types)\n - #87594 (fs File get_path procfs usage for netbsd same as linux.)\n - #87602 ([backtraces]: look for the `begin` symbol only after seeing `end`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a39e64e2b413b013cdf4889d73fa249343c49cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39e64e2b413b013cdf4889d73fa249343c49cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1195bea5a7b73e079fa14b37ac7e375fc77d368a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1195bea5a7b73e079fa14b37ac7e375fc77d368a", "html_url": "https://github.com/rust-lang/rust/commit/1195bea5a7b73e079fa14b37ac7e375fc77d368a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1195bea5a7b73e079fa14b37ac7e375fc77d368a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f739552870cdb23d433478739b371f22b155af8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f739552870cdb23d433478739b371f22b155af8a", "html_url": "https://github.com/rust-lang/rust/commit/f739552870cdb23d433478739b371f22b155af8a"}, {"sha": "84e18828d4450651cda6a6158cada7b503217a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e18828d4450651cda6a6158cada7b503217a14", "html_url": "https://github.com/rust-lang/rust/commit/84e18828d4450651cda6a6158cada7b503217a14"}], "stats": {"total": 213, "additions": 143, "deletions": 70}, "files": [{"sha": "84dd69ebd963496696d0ed03e9d7d5bc1d4a40b5", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -764,13 +764,7 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"release: {}\", unw(util::release_str()));\n \n         let debug_flags = matches.opt_strs(\"Z\");\n-        let backend_name = debug_flags.iter().find_map(|x| {\n-            if x.starts_with(\"codegen-backend=\") {\n-                Some(&x[\"codegen-backends=\".len()..])\n-            } else {\n-                None\n-            }\n-        });\n+        let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n         get_codegen_backend(&None, backend_name).print_version();\n     }\n }"}, {"sha": "f63c207a540c2ff72c32320733d572b59d40295f", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -153,7 +153,7 @@ declare_features! (\n      Some(\"the implementation was not maintainable, the feature may get reintroduced once the current refactorings are done\")),\n \n     /// Allows the use of type alias impl trait in function return positions\n-    (removed, min_type_alias_impl_trait, \"1.55.0\", Some(63063), None,\n+    (removed, min_type_alias_impl_trait, \"1.56.0\", Some(63063), None,\n      Some(\"removed in favor of full type_alias_impl_trait\")),\n \n     // -------------------------------------------------------------------------"}, {"sha": "c4c1ec8ce4e0a2ca109d6aa669dc4802a9dec415", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 32, "deletions": 45, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -23,15 +23,12 @@ pub(super) fn mangle(\n     let substs = tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), instance.substs);\n \n     let prefix = \"_R\";\n-    let mut cx = SymbolMangler {\n+    let mut cx = &mut SymbolMangler {\n         tcx,\n-        compress: Some(Box::new(CompressionCaches {\n-            start_offset: prefix.len(),\n-\n-            paths: FxHashMap::default(),\n-            types: FxHashMap::default(),\n-            consts: FxHashMap::default(),\n-        })),\n+        start_offset: prefix.len(),\n+        paths: FxHashMap::default(),\n+        types: FxHashMap::default(),\n+        consts: FxHashMap::default(),\n         binders: vec![],\n         out: String::from(prefix),\n     };\n@@ -52,17 +49,7 @@ pub(super) fn mangle(\n     if let Some(instantiating_crate) = instantiating_crate {\n         cx = cx.print_def_path(instantiating_crate.as_def_id(), &[]).unwrap();\n     }\n-    cx.out\n-}\n-\n-struct CompressionCaches<'tcx> {\n-    // The length of the prefix in `out` (e.g. 2 for `_R`).\n-    start_offset: usize,\n-\n-    // The values are start positions in `out`, in bytes.\n-    paths: FxHashMap<(DefId, &'tcx [GenericArg<'tcx>]), usize>,\n-    types: FxHashMap<Ty<'tcx>, usize>,\n-    consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n+    std::mem::take(&mut cx.out)\n }\n \n struct BinderLevel {\n@@ -81,9 +68,15 @@ struct BinderLevel {\n \n struct SymbolMangler<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    compress: Option<Box<CompressionCaches<'tcx>>>,\n     binders: Vec<BinderLevel>,\n     out: String,\n+\n+    /// The length of the prefix in `out` (e.g. 2 for `_R`).\n+    start_offset: usize,\n+    /// The values are start positions in `out`, in bytes.\n+    paths: FxHashMap<(DefId, &'tcx [GenericArg<'tcx>]), usize>,\n+    types: FxHashMap<Ty<'tcx>, usize>,\n+    consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n }\n \n impl SymbolMangler<'tcx> {\n@@ -160,13 +153,13 @@ impl SymbolMangler<'tcx> {\n         self.push(ident);\n     }\n \n-    fn path_append_ns(\n-        mut self,\n-        print_prefix: impl FnOnce(Self) -> Result<Self, !>,\n+    fn path_append_ns<'a>(\n+        mut self: &'a mut Self,\n+        print_prefix: impl FnOnce(&'a mut Self) -> Result<&'a mut Self, !>,\n         ns: char,\n         disambiguator: u64,\n         name: &str,\n-    ) -> Result<Self, !> {\n+    ) -> Result<&'a mut Self, !> {\n         self.push(\"N\");\n         self.out.push(ns);\n         self = print_prefix(self)?;\n@@ -175,17 +168,17 @@ impl SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_backref(mut self, i: usize) -> Result<Self, !> {\n+    fn print_backref(&mut self, i: usize) -> Result<&mut Self, !> {\n         self.push(\"B\");\n-        self.push_integer_62((i - self.compress.as_ref().unwrap().start_offset) as u64);\n+        self.push_integer_62((i - self.start_offset) as u64);\n         Ok(self)\n     }\n \n-    fn in_binder<T>(\n-        mut self,\n+    fn in_binder<'a, T>(\n+        mut self: &'a mut Self,\n         value: &ty::Binder<'tcx, T>,\n-        print_value: impl FnOnce(Self, &T) -> Result<Self, !>,\n-    ) -> Result<Self, !>\n+        print_value: impl FnOnce(&'a mut Self, &T) -> Result<&'a mut Self, !>,\n+    ) -> Result<&'a mut Self, !>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -218,7 +211,7 @@ impl SymbolMangler<'tcx> {\n     }\n }\n \n-impl Printer<'tcx> for SymbolMangler<'tcx> {\n+impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     type Error = !;\n \n     type Path = Self;\n@@ -236,7 +229,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         def_id: DefId,\n         substs: &'tcx [GenericArg<'tcx>],\n     ) -> Result<Self::Path, Self::Error> {\n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.paths.get(&(def_id, substs))) {\n+        if let Some(&i) = self.paths.get(&(def_id, substs)) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -246,9 +239,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache paths that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !substs.iter().any(|k| k.has_escaping_bound_vars()) {\n-            if let Some(c) = &mut self.compress {\n-                c.paths.insert((def_id, substs), start);\n-            }\n+            self.paths.insert((def_id, substs), start);\n         }\n         Ok(self)\n     }\n@@ -312,7 +303,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_region(mut self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n+    fn print_region(self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n         let i = match *region {\n             // Erased lifetimes use the index 0, for a\n             // shorter mangling of `L_`.\n@@ -367,7 +358,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             return Ok(self);\n         }\n \n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.types.get(&ty)) {\n+        if let Some(&i) = self.types.get(&ty) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -476,9 +467,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache types that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ty.has_escaping_bound_vars() {\n-            if let Some(c) = &mut self.compress {\n-                c.types.insert(ty, start);\n-            }\n+            self.types.insert(ty, start);\n         }\n         Ok(self)\n     }\n@@ -545,7 +534,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        if let Some(&i) = self.compress.as_ref().and_then(|c| c.consts.get(&ct)) {\n+        if let Some(&i) = self.consts.get(&ct) {\n             return self.print_backref(i);\n         }\n         let start = self.out.len();\n@@ -583,14 +572,12 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         // Only cache consts that do not refer to an enclosing\n         // binder (which would change depending on context).\n         if !ct.has_escaping_bound_vars() {\n-            if let Some(c) = &mut self.compress {\n-                c.consts.insert(ct, start);\n-            }\n+            self.consts.insert(ct, start);\n         }\n         Ok(self)\n     }\n \n-    fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n+    fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n         self.push(\"C\");\n         let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n         self.push_disambiguator(stable_crate_id.to_u64());"}, {"sha": "1d7852d964c1dd428108c9934c0ffbe40e0886ce", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -267,12 +267,21 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                     }\n                                 }\n                             }\n-                            PatKind::Lit(_) => {\n-                                // If the PatKind is a Lit then we want\n+                            PatKind::Lit(_) | PatKind::Range(..) => {\n+                                // If the PatKind is a Lit or a Range then we want\n                                 // to borrow discr.\n                                 needs_to_be_read = true;\n                             }\n-                            _ => {}\n+                            PatKind::Or(_)\n+                            | PatKind::Box(_)\n+                            | PatKind::Slice(..)\n+                            | PatKind::Ref(..)\n+                            | PatKind::Wild => {\n+                                // If the PatKind is Or, Box, Slice or Ref, the decision is made later\n+                                // as these patterns contains subpatterns\n+                                // If the PatKind is Wild, the decision is made based on the other patterns being\n+                                // examined\n+                            }\n                         }\n                     }));\n                 }"}, {"sha": "3cf6c56f43a579b089d2e8282c5256fe3498fdbc", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -2107,7 +2107,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// assert_eq!(buf, [2, 4]);\n     /// ```\n     ///\n-    /// The exact order may be useful for tracking external state, like an index.\n+    /// Because the elements are visited exactly once in the original order,\n+    /// external state may be used to decide which elements to keep.\n     ///\n     /// ```\n     /// use std::collections::VecDeque;\n@@ -2116,8 +2117,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// buf.extend(1..6);\n     ///\n     /// let keep = [false, true, true, false, true];\n-    /// let mut i = 0;\n-    /// buf.retain(|_| (keep[i], i += 1).0);\n+    /// let mut iter = keep.iter();\n+    /// buf.retain(|_| *iter.next().unwrap());\n     /// assert_eq!(buf, [2, 3, 5]);\n     /// ```\n     #[stable(feature = \"vec_deque_retain\", since = \"1.4.0\")]"}, {"sha": "5411316f55af0ebccccce55e096c2fad7595afab", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -1350,13 +1350,14 @@ impl String {\n     /// assert_eq!(s, \"foobar\");\n     /// ```\n     ///\n-    /// The exact order may be useful for tracking external state, like an index.\n+    /// Because the elements are visited exactly once in the original order,\n+    /// external state may be used to decide which elements to keep.\n     ///\n     /// ```\n     /// let mut s = String::from(\"abcde\");\n     /// let keep = [false, true, true, false, true];\n-    /// let mut i = 0;\n-    /// s.retain(|_| (keep[i], i += 1).0);\n+    /// let mut iter = keep.iter();\n+    /// s.retain(|_| *iter.next().unwrap());\n     /// assert_eq!(s, \"bce\");\n     /// ```\n     #[inline]"}, {"sha": "4784418f98c507d0313a14c314ac90191b1ce640", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -5,6 +5,11 @@ use crate::fmt;\n use super::from_u32_unchecked;\n \n /// An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.\n+///\n+/// This `struct` is created by the [`decode_utf16`] method on [`char`]. See its\n+/// documentation for more.\n+///\n+/// [`decode_utf16`]: char::decode_utf16\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n #[derive(Clone, Debug)]\n pub struct DecodeUtf16<I>\n@@ -16,6 +21,8 @@ where\n }\n \n /// An error that can be returned when decoding UTF-16 code points.\n+///\n+/// This `struct` is created when using the [`DecodeUtf16`] type.\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct DecodeUtf16Error {"}, {"sha": "8e7b03d02f157db216cb9fb71440374600cfe997", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -23,10 +23,7 @@ impl<'buf, 'state> PadAdapter<'buf, 'state> {\n         slot: &'slot mut Option<Self>,\n         state: &'state mut PadAdapterState,\n     ) -> fmt::Formatter<'slot> {\n-        fmt.wrap_buf(move |buf| {\n-            *slot = Some(PadAdapter { buf, state });\n-            slot.as_mut().unwrap()\n-        })\n+        fmt.wrap_buf(move |buf| slot.insert(PadAdapter { buf, state }))\n     }\n }\n "}, {"sha": "ce7f6475d059914370b50d7768f3311cca539df7", "filename": "library/core/src/num/diy_float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fcore%2Fsrc%2Fnum%2Fdiy_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fcore%2Fsrc%2Fnum%2Fdiy_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdiy_float.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -65,7 +65,7 @@ impl Fp {\n             f <<= 1;\n             e -= 1;\n         }\n-        debug_assert!(f >= (1 >> 63));\n+        debug_assert!(f >= (1 << 63));\n         Fp { f, e }\n     }\n "}, {"sha": "7f69ebbeb4de60df54a3317946568fd07f0e2a54", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -939,7 +939,7 @@ impl FromInner<c_int> for File {\n \n impl fmt::Debug for File {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        #[cfg(target_os = \"linux\")]\n+        #[cfg(any(target_os = \"linux\", target_os = \"netbsd\"))]\n         fn get_path(fd: c_int) -> Option<PathBuf> {\n             let mut p = PathBuf::from(\"/proc/self/fd\");\n             p.push(&fd.to_string());\n@@ -976,7 +976,12 @@ impl fmt::Debug for File {\n             Some(PathBuf::from(OsString::from_vec(buf)))\n         }\n \n-        #[cfg(not(any(target_os = \"linux\", target_os = \"macos\", target_os = \"vxworks\")))]\n+        #[cfg(not(any(\n+            target_os = \"linux\",\n+            target_os = \"macos\",\n+            target_os = \"vxworks\",\n+            target_os = \"netbsd\"\n+        )))]\n         fn get_path(_fd: c_int) -> Option<PathBuf> {\n             // FIXME(#24570): implement this for other Unix platforms\n             None"}, {"sha": "e6a099f0e81a0ad141b1f2950e34ed78c8987db4", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -75,7 +75,7 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n             hit = true;\n             if print_fmt == PrintFmt::Short {\n                 if let Some(sym) = symbol.name().and_then(|s| s.as_str()) {\n-                    if sym.contains(\"__rust_begin_short_backtrace\") {\n+                    if start && sym.contains(\"__rust_begin_short_backtrace\") {\n                         stop = true;\n                         return;\n                     }"}, {"sha": "74506979a28c52159bbac7b4907402dbcb154486", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87426.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87426.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87426.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87426.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+// edition:2021\n+\n+pub fn foo() {\n+    let ref_x_ck = 123;\n+    let _y = || match ref_x_ck {\n+        2_000_000..=3_999_999 => { println!(\"A\")}\n+        _ => { println!(\"B\")}\n+    };\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "fd01337296fb73aad9c357c641b5b72f8d1fe23d", "filename": "src/test/ui/panics/panic-short-backtrace-windows-x86_64.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.rs?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -0,0 +1,49 @@\n+// Regression test for #87481: short backtrace formatting cut off the entire stack trace.\n+\n+// Codegen-units is specified here so that we can replicate a typical rustc invocation which\n+// is not normally limited to 1 CGU. This is important so that the `__rust_begin_short_backtrace`\n+// and `__rust_end_short_backtrace` symbols are not marked internal to the CGU and thus will be\n+// named in the symbol table.\n+// compile-flags: -O -Ccodegen-units=8\n+\n+// run-fail\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=1\n+\n+// We need to normalize out frame 5 because without debug info, dbghelp.dll doesn't know where CGU\n+// internal functions like `main` start or end and so it will return whatever symbol happens\n+// to be located near the address.\n+// normalize-stderr-test: \"5: .*\" -> \"5: some Rust fn\"\n+\n+// Backtraces are pretty broken in general on i686-pc-windows-msvc (#62897).\n+// only-x86_64-pc-windows-msvc\n+\n+fn main() {\n+    a();\n+}\n+\n+// Make these no_mangle so dbghelp.dll can figure out the symbol names.\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn a() {\n+    b();\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn b() {\n+    c();\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn c() {\n+    d();\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn d() {\n+    panic!(\"d was called\");\n+}"}, {"sha": "799a8b30e997b15d18fc2c815d6e13a12701f740", "filename": "src/test/ui/panics/panic-short-backtrace-windows-x86_64.run.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1195bea5a7b73e079fa14b37ac7e375fc77d368a/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.run.stderr?ref=1195bea5a7b73e079fa14b37ac7e375fc77d368a", "patch": "@@ -0,0 +1,9 @@\n+thread 'main' panicked at 'd was called', $DIR/panic-short-backtrace-windows-x86_64.rs:48:5\n+stack backtrace:\n+   0: std::panicking::begin_panic\n+   1: d\n+   2: c\n+   3: b\n+   4: a\n+   5: some Rust fn\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}]}