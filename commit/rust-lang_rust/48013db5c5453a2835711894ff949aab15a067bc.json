{"sha": "48013db5c5453a2835711894ff949aab15a067bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MDEzZGI1YzU0NTNhMjgzNTcxMTg5NGZmOTQ5YWFiMTVhMDY3YmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T12:58:59Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T12:58:59Z"}, "message": "Tie up the ends needed to get external consts working\n\nCloses #658", "tree": {"sha": "f580ada08b598ff2e6b12c12c0367a9cc35998d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f580ada08b598ff2e6b12c12c0367a9cc35998d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48013db5c5453a2835711894ff949aab15a067bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48013db5c5453a2835711894ff949aab15a067bc", "html_url": "https://github.com/rust-lang/rust/commit/48013db5c5453a2835711894ff949aab15a067bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48013db5c5453a2835711894ff949aab15a067bc/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0be65cb50c84fa458a2ba709551b75fc7aeec03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0be65cb50c84fa458a2ba709551b75fc7aeec03", "html_url": "https://github.com/rust-lang/rust/commit/f0be65cb50c84fa458a2ba709551b75fc7aeec03"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "31d7e1b04a04ed81907f6fdad4de6ce2de149fd6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/48013db5c5453a2835711894ff949aab15a067bc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48013db5c5453a2835711894ff949aab15a067bc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=48013db5c5453a2835711894ff949aab15a067bc", "patch": "@@ -4045,13 +4045,11 @@ fn lval_val(&@block_ctxt cx, ValueRef val) -> lval_result {\n }\n \n fn trans_external_path(&@block_ctxt cx, &ast::def_id did,\n-                       &ty::ty_param_count_and_ty tpt) -> lval_result {\n+                       &ty::ty_param_count_and_ty tpt) -> ValueRef {\n     auto lcx = cx.fcx.lcx;\n     auto name = csearch::get_symbol(lcx.ccx.sess.get_cstore(), did);\n-    auto v =\n-        get_extern_const(lcx.ccx.externs, lcx.ccx.llmod, name,\n+    ret get_extern_const(lcx.ccx.externs, lcx.ccx.llmod, name,\n                          type_of_ty_param_count_and_ty(lcx, cx.sp, tpt));\n-    ret lval_val(cx, v);\n }\n \n fn lval_generic_fn(&@block_ctxt cx, &ty::ty_param_count_and_ty tpt,\n@@ -4063,7 +4061,7 @@ fn lval_generic_fn(&@block_ctxt cx, &ty::ty_param_count_and_ty tpt,\n         lv = lval_val(cx, cx.fcx.lcx.ccx.fn_pairs.get(fn_id._1));\n     } else {\n         // External reference.\n-        lv = trans_external_path(cx, fn_id, tpt);\n+        lv = lval_val(cx, trans_external_path(cx, fn_id, tpt));\n     }\n     auto tys = ty::node_id_to_type_params(cx.fcx.lcx.ccx.tcx, id);\n     if (std::ivec::len[ty::t](tys) != 0u) {\n@@ -4176,9 +4174,15 @@ fn trans_path(&@block_ctxt cx, &ast::path p, ast::node_id id) -> lval_result {\n             }\n         }\n         case (some(ast::def_const(?did))) {\n-            // TODO: externals\n-            assert (ccx.consts.contains_key(did._1));\n-            ret lval_mem(cx, ccx.consts.get(did._1));\n+          if (did._0 == ast::local_crate) {\n+              assert (ccx.consts.contains_key(did._1));\n+              ret lval_mem(cx, ccx.consts.get(did._1));\n+          } else {\n+              auto tp = ty::node_id_to_monotype(ccx.tcx, id);\n+              ret lval_val(cx, load_if_immediate\n+                           (cx, trans_external_path\n+                            (cx, did, tup(0u, tp)), tp));\n+          }\n         }\n         case (some(ast::def_native_fn(?did))) {\n             auto tyt = ty::lookup_item_type(ccx.tcx, did);\n@@ -7898,12 +7902,11 @@ fn collect_item_1(@crate_ctxt ccx, &@ast::item i, &str[] pt, &vt[str[]] v) {\n     alt (i.node) {\n         case (ast::item_const(_, _)) {\n             auto typ = node_id_type(ccx, i.id);\n-            auto g =\n-                llvm::LLVMAddGlobal(ccx.llmod, type_of(ccx, i.span, typ),\n-                                    str::buf(ccx.names.next(i.ident)));\n-            llvm::LLVMSetLinkage(g,\n-                                 lib::llvm::LLVMInternalLinkage as\n-                                     llvm::Linkage);\n+            auto s = mangle_exported_name(ccx, pt + ~[i.ident],\n+                                          node_id_type(ccx, i.id));\n+            auto g = llvm::LLVMAddGlobal(ccx.llmod, type_of(ccx, i.span, typ),\n+                                         str::buf(s));\n+            ccx.item_symbols.insert(i.id, s);\n             ccx.consts.insert(i.id, g);\n         }\n         case (_) { }\n@@ -7997,16 +8000,6 @@ fn trans_constant(@crate_ctxt ccx, &@ast::item it, &str[] pt, &vt[str[]] v) {\n                 i += 1u;\n             }\n         }\n-        case (ast::item_const(_, ?expr)) {\n-            // FIXME: The whole expr-translation system needs cloning to deal\n-            // with consts.\n-\n-            auto v = C_int(1);\n-            ccx.item_ids.insert(it.id, v);\n-            auto s = mangle_exported_name(ccx, new_pt + ~[it.ident],\n-                                          node_id_type(ccx, it.id));\n-            ccx.item_symbols.insert(it.id, s);\n-        }\n         case (_) { }\n     }\n }"}]}