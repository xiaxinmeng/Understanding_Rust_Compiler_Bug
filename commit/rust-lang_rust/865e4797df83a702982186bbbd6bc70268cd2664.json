{"sha": "865e4797df83a702982186bbbd6bc70268cd2664", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NWU0Nzk3ZGY4M2E3MDI5ODIxODZiYmJkNmJjNzAyNjhjZDI2NjQ=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-12-22T11:24:17Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-12-22T11:24:17Z"}, "message": "Fix compare_and_swap in Windows thread_parker", "tree": {"sha": "2591f6d60f4822f753db5b5545ec57f32f9c5e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2591f6d60f4822f753db5b5545ec57f32f9c5e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865e4797df83a702982186bbbd6bc70268cd2664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865e4797df83a702982186bbbd6bc70268cd2664", "html_url": "https://github.com/rust-lang/rust/commit/865e4797df83a702982186bbbd6bc70268cd2664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865e4797df83a702982186bbbd6bc70268cd2664/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eef20ffa0887a88a15c29eb17de5e20a5c99363", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eef20ffa0887a88a15c29eb17de5e20a5c99363", "html_url": "https://github.com/rust-lang/rust/commit/3eef20ffa0887a88a15c29eb17de5e20a5c99363"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e3585d4cb37a4830a0eb03a14feef822f3ebbfe9", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/865e4797df83a702982186bbbd6bc70268cd2664/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865e4797df83a702982186bbbd6bc70268cd2664/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=865e4797df83a702982186bbbd6bc70268cd2664", "patch": "@@ -113,7 +113,7 @@ impl Parker {\n                 // Wait for something to happen, assuming it's still set to PARKED.\n                 c::WaitOnAddress(self.ptr(), &PARKED as *const _ as c::LPVOID, 1, c::INFINITE);\n                 // Change NOTIFIED=>EMPTY but leave PARKED alone.\n-                if self.state.compare_and_swap(NOTIFIED, EMPTY, Acquire) == NOTIFIED {\n+                if self.state.compare_exchange(NOTIFIED, EMPTY, Acquire, Acquire) == NOTIFIED {\n                     // Actually woken up by unpark().\n                     return;\n                 } else {"}]}