{"sha": "a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNjhkOTJmOWE0NzQ0YmE1Y2UzM2E5ZGFjMjA0MGM4MzQwZTFjZjU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-02-23T05:05:58Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-22T02:27:50Z"}, "message": "tests: augment heuristics tests", "tree": {"sha": "a1e8b7d7f2da1bc7aba53de8931384e2ca7427b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e8b7d7f2da1bc7aba53de8931384e2ca7427b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "html_url": "https://github.com/rust-lang/rust/commit/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b", "html_url": "https://github.com/rust-lang/rust/commit/1bcc1f8df5d3b21f4f41c1fe4f26e7f99fee8c6b"}], "stats": {"total": 351, "additions": 351, "deletions": 0}, "files": [{"sha": "415a8c57a9d979457428598d37774c2a8a63df5e", "filename": "src/config/mod.rs", "status": "modified", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "patch": "@@ -722,4 +722,254 @@ make_backup = false\n             assert_eq!(config.imports_granularity(), ImportGranularity::Module);\n         }\n     }\n+\n+    #[cfg(test)]\n+    mod use_small_heuristics {\n+        use super::*;\n+\n+        #[test]\n+        fn test_default_sets_correct_widths() {\n+            let toml = r#\"\n+                use_small_heuristics = \"Default\"\n+                max_width = 200\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.array_width(), 120);\n+            assert_eq!(config.attr_fn_like_width(), 140);\n+            assert_eq!(config.chain_width(), 120);\n+            assert_eq!(config.fn_call_width(), 120);\n+            assert_eq!(config.single_line_if_else_max_width(), 100);\n+            assert_eq!(config.struct_lit_width(), 36);\n+            assert_eq!(config.struct_variant_width(), 70);\n+        }\n+\n+        #[test]\n+        fn test_max_sets_correct_widths() {\n+            let toml = r#\"\n+                use_small_heuristics = \"Max\"\n+                max_width = 120\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.array_width(), 120);\n+            assert_eq!(config.attr_fn_like_width(), 120);\n+            assert_eq!(config.chain_width(), 120);\n+            assert_eq!(config.fn_call_width(), 120);\n+            assert_eq!(config.single_line_if_else_max_width(), 120);\n+            assert_eq!(config.struct_lit_width(), 120);\n+            assert_eq!(config.struct_variant_width(), 120);\n+        }\n+\n+        #[test]\n+        fn test_off_sets_correct_widths() {\n+            let toml = r#\"\n+                use_small_heuristics = \"Off\"\n+                max_width = 100\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.array_width(), usize::max_value());\n+            assert_eq!(config.attr_fn_like_width(), usize::max_value());\n+            assert_eq!(config.chain_width(), usize::max_value());\n+            assert_eq!(config.fn_call_width(), usize::max_value());\n+            assert_eq!(config.single_line_if_else_max_width(), 0);\n+            assert_eq!(config.struct_lit_width(), 0);\n+            assert_eq!(config.struct_variant_width(), 0);\n+        }\n+\n+        #[test]\n+        fn test_override_works_with_default() {\n+            let toml = r#\"\n+                use_small_heuristics = \"Default\"\n+                array_width = 20\n+                attr_fn_like_width = 40\n+                chain_width = 20\n+                fn_call_width = 90\n+                single_line_if_else_max_width = 40\n+                struct_lit_width = 30\n+                struct_variant_width = 34\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.array_width(), 20);\n+            assert_eq!(config.attr_fn_like_width(), 40);\n+            assert_eq!(config.chain_width(), 20);\n+            assert_eq!(config.fn_call_width(), 90);\n+            assert_eq!(config.single_line_if_else_max_width(), 40);\n+            assert_eq!(config.struct_lit_width(), 30);\n+            assert_eq!(config.struct_variant_width(), 34);\n+        }\n+\n+        #[test]\n+        fn test_override_with_max() {\n+            let toml = r#\"\n+                use_small_heuristics = \"Max\"\n+                array_width = 20\n+                attr_fn_like_width = 40\n+                chain_width = 20\n+                fn_call_width = 90\n+                single_line_if_else_max_width = 40\n+                struct_lit_width = 30\n+                struct_variant_width = 34\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.array_width(), 20);\n+            assert_eq!(config.attr_fn_like_width(), 40);\n+            assert_eq!(config.chain_width(), 20);\n+            assert_eq!(config.fn_call_width(), 90);\n+            assert_eq!(config.single_line_if_else_max_width(), 40);\n+            assert_eq!(config.struct_lit_width(), 30);\n+            assert_eq!(config.struct_variant_width(), 34);\n+        }\n+\n+        #[test]\n+        fn test_override_with_off() {\n+            let toml = r#\"\n+                use_small_heuristics = \"Off\"\n+                array_width = 20\n+                attr_fn_like_width = 40\n+                chain_width = 20\n+                fn_call_width = 90\n+                single_line_if_else_max_width = 40\n+                struct_lit_width = 30\n+                struct_variant_width = 34\n+            \"#;\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.array_width(), 20);\n+            assert_eq!(config.attr_fn_like_width(), 40);\n+            assert_eq!(config.chain_width(), 20);\n+            assert_eq!(config.fn_call_width(), 90);\n+            assert_eq!(config.single_line_if_else_max_width(), 40);\n+            assert_eq!(config.struct_lit_width(), 30);\n+            assert_eq!(config.struct_variant_width(), 34);\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`fn_call_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_fn_call_width_config_exceeds_max_width() {\n+            let toml = r#\"\n+                max_width = 80\n+                fn_call_width = 90\n+            \"#;\n+            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+        }\n+\n+        #[test]\n+        #[should_panic(\n+            expected = \"`attr_fn_like_width` cannot have a value that exceeds `max_width\"\n+        )]\n+        fn test_panics_when_attr_fn_like_width_config_exceeds_max_width() {\n+            let toml = r#\"\n+                max_width = 80\n+                attr_fn_like_width = 90\n+            \"#;\n+            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`struct_lit_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_struct_lit_config_exceeds_max_width() {\n+            let toml = r#\"\n+                max_width = 80\n+                struct_lit_width = 90\n+            \"#;\n+            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+        }\n+\n+        #[test]\n+        #[should_panic(\n+            expected = \"`struct_variant_width` cannot have a value that exceeds `max_width\"\n+        )]\n+        fn test_panics_when_struct_variant_width_config_exceeds_max_width() {\n+            let toml = r#\"\n+                max_width = 80\n+                struct_variant_width = 90\n+            \"#;\n+            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`array_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_array_width_config_exceeds_max_width() {\n+            let toml = r#\"\n+                max_width = 80\n+                array_width = 90\n+            \"#;\n+            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`chain_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_chain_width_config_exceeds_max_width() {\n+            let toml = r#\"\n+                max_width = 80\n+                chain_width = 90\n+            \"#;\n+            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+        }\n+\n+        #[test]\n+        #[should_panic(\n+            expected = \"`single_line_if_else_max_width` cannot have a value that exceeds `max_width\"\n+        )]\n+        fn test_panics_when_single_line_if_else_max_width_config_exceeds_max_width() {\n+            let toml = r#\"\n+                max_width = 80\n+                single_line_if_else_max_width = 90\n+            \"#;\n+            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`fn_call_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_fn_call_width_override_exceeds_max_width() {\n+            let mut config = Config::default();\n+            config.override_value(\"fn_call_width\", \"101\");\n+        }\n+\n+        #[test]\n+        #[should_panic(\n+            expected = \"`attr_fn_like_width` cannot have a value that exceeds `max_width\"\n+        )]\n+        fn test_panics_when_attr_fn_like_width_override_exceeds_max_width() {\n+            let mut config = Config::default();\n+            config.override_value(\"attr_fn_like_width\", \"101\");\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`struct_lit_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_struct_lit_override_exceeds_max_width() {\n+            let mut config = Config::default();\n+            config.override_value(\"struct_lit_width\", \"101\");\n+        }\n+\n+        #[test]\n+        #[should_panic(\n+            expected = \"`struct_variant_width` cannot have a value that exceeds `max_width\"\n+        )]\n+        fn test_panics_when_struct_variant_width_override_exceeds_max_width() {\n+            let mut config = Config::default();\n+            config.override_value(\"struct_variant_width\", \"101\");\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`array_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_array_width_override_exceeds_max_width() {\n+            let mut config = Config::default();\n+            config.override_value(\"array_width\", \"101\");\n+        }\n+\n+        #[test]\n+        #[should_panic(expected = \"`chain_width` cannot have a value that exceeds `max_width\")]\n+        fn test_panics_when_chain_width_override_exceeds_max_width() {\n+            let mut config = Config::default();\n+            config.override_value(\"chain_width\", \"101\");\n+        }\n+\n+        #[test]\n+        #[should_panic(\n+            expected = \"`single_line_if_else_max_width` cannot have a value that exceeds `max_width\"\n+        )]\n+        fn test_panics_when_single_line_if_else_max_width_override_exceeds_max_width() {\n+            let mut config = Config::default();\n+            config.override_value(\"single_line_if_else_max_width\", \"101\");\n+        }\n+    }\n }"}, {"sha": "68bc40271a1d4fa86a7b32684d8a50224fb7ec11", "filename": "tests/source/configs/use_small_heuristics/default.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Fsource%2Fconfigs%2Fuse_small_heuristics%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Fsource%2Fconfigs%2Fuse_small_heuristics%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fuse_small_heuristics%2Fdefault.rs?ref=a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-use_small_heuristics: Default\n+\n+enum Lorem {\n+    Ipsum,\n+    Dolor(bool),\n+    Sit {\n+        amet: Consectetur,\n+        adipiscing: Elit,\n+    },\n+}\n+\n+fn main() {\n+    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n+\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+\n+    let lorem = if ipsum {\n+        dolor\n+    } else {\n+        sit\n+    };\n+}"}, {"sha": "f76392d2404bed7ac7a3d455109234525a076a56", "filename": "tests/source/configs/use_small_heuristics/off.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Fsource%2Fconfigs%2Fuse_small_heuristics%2Foff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Fsource%2Fconfigs%2Fuse_small_heuristics%2Foff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fuse_small_heuristics%2Foff.rs?ref=a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-use_small_heuristics: Off\n+\n+enum Lorem {\n+    Ipsum,\n+    Dolor(bool),\n+    Sit {\n+        amet: Consectetur,\n+        adipiscing: Elit,\n+    },\n+}\n+\n+fn main() {\n+    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n+\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+\n+    let lorem = if ipsum {\n+        dolor\n+    } else {\n+        sit\n+    };\n+}"}, {"sha": "d67bd9aafaf02fa6eb583617646509f10ab597a3", "filename": "tests/target/configs/use_small_heuristics/default.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Ftarget%2Fconfigs%2Fuse_small_heuristics%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Ftarget%2Fconfigs%2Fuse_small_heuristics%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fuse_small_heuristics%2Fdefault.rs?ref=a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "patch": "@@ -0,0 +1,26 @@\n+// rustfmt-use_small_heuristics: Default\n+\n+enum Lorem {\n+    Ipsum,\n+    Dolor(bool),\n+    Sit { amet: Consectetur, adipiscing: Elit },\n+}\n+\n+fn main() {\n+    lorem(\n+        \"lorem\",\n+        \"ipsum\",\n+        \"dolor\",\n+        \"sit\",\n+        \"amet\",\n+        \"consectetur\",\n+        \"adipiscing\",\n+    );\n+\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+\n+    let lorem = if ipsum { dolor } else { sit };\n+}"}, {"sha": "f76392d2404bed7ac7a3d455109234525a076a56", "filename": "tests/target/configs/use_small_heuristics/off.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Ftarget%2Fconfigs%2Fuse_small_heuristics%2Foff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5/tests%2Ftarget%2Fconfigs%2Fuse_small_heuristics%2Foff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fuse_small_heuristics%2Foff.rs?ref=a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-use_small_heuristics: Off\n+\n+enum Lorem {\n+    Ipsum,\n+    Dolor(bool),\n+    Sit {\n+        amet: Consectetur,\n+        adipiscing: Elit,\n+    },\n+}\n+\n+fn main() {\n+    lorem(\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\");\n+\n+    let lorem = Lorem {\n+        ipsum: dolor,\n+        sit: amet,\n+    };\n+\n+    let lorem = if ipsum {\n+        dolor\n+    } else {\n+        sit\n+    };\n+}"}]}