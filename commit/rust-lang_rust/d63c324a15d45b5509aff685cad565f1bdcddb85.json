{"sha": "d63c324a15d45b5509aff685cad565f1bdcddb85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2M2MzMjRhMTVkNDViNTUwOWFmZjY4NWNhZDU2NWYxYmRjZGRiODU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T22:09:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T22:09:33Z"}, "message": "`lower_pattern_unadjusted`: extract `lower_tuple_subpats`.", "tree": {"sha": "87be993019fd142f9c10c08c79d738ea6947c8f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87be993019fd142f9c10c08c79d738ea6947c8f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63c324a15d45b5509aff685cad565f1bdcddb85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63c324a15d45b5509aff685cad565f1bdcddb85", "html_url": "https://github.com/rust-lang/rust/commit/d63c324a15d45b5509aff685cad565f1bdcddb85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63c324a15d45b5509aff685cad565f1bdcddb85/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb020bc245bc51093fc8bbced9c0610d6e23195a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb020bc245bc51093fc8bbced9c0610d6e23195a", "html_url": "https://github.com/rust-lang/rust/commit/eb020bc245bc51093fc8bbced9c0610d6e23195a"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "4015faf6a906b116deec9f97ab8226e8e333e1e8", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d63c324a15d45b5509aff685cad565f1bdcddb85/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63c324a15d45b5509aff685cad565f1bdcddb85/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=d63c324a15d45b5509aff685cad565f1bdcddb85", "patch": "@@ -556,19 +556,12 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix)\n             }\n \n-            hir::PatKind::Tuple(ref subpatterns, ddpos) => {\n+            hir::PatKind::Tuple(ref pats, ddpos) => {\n                 let tys = match ty.kind {\n                     ty::Tuple(ref tys) => tys,\n                     _ => span_bug!(pat.span, \"unexpected type for tuple pattern: {:?}\", ty),\n                 };\n-                let subpatterns = subpatterns\n-                    .iter()\n-                    .enumerate_and_adjust(tys.len(), ddpos)\n-                    .map(|(i, subpattern)| FieldPat {\n-                        field: Field::new(i),\n-                        pattern: self.lower_pattern(subpattern)\n-                    })\n-                    .collect();\n+                let subpatterns = self.lower_tuple_subpats(pats, tys.len(), ddpos);\n                 PatKind::Leaf { subpatterns }\n             }\n \n@@ -609,25 +602,14 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            hir::PatKind::TupleStruct(ref qpath, ref subpatterns, ddpos) => {\n+            hir::PatKind::TupleStruct(ref qpath, ref pats, ddpos) => {\n                 let res = self.tables.qpath_res(qpath, pat.hir_id);\n                 let adt_def = match ty.kind {\n                     ty::Adt(adt_def, _) => adt_def,\n-                    _ => span_bug!(pat.span,\n-                                   \"tuple struct pattern not applied to an ADT {:?}\",\n-                                   ty),\n+                    _ => span_bug!(pat.span, \"tuple struct pattern not applied to an ADT {:?}\", ty),\n                 };\n                 let variant_def = adt_def.variant_of_res(res);\n-\n-                let subpatterns =\n-                        subpatterns.iter()\n-                                   .enumerate_and_adjust(variant_def.fields.len(), ddpos)\n-                                   .map(|(i, field)| FieldPat {\n-                                       field: Field::new(i),\n-                                       pattern: self.lower_pattern(field),\n-                                   })\n-                    .collect();\n-\n+                let subpatterns = self.lower_tuple_subpats(pats, variant_def.fields.len(), ddpos);\n                 self.lower_variant_or_leaf(res, pat.hir_id, pat.span, ty, subpatterns)\n             }\n \n@@ -661,6 +643,21 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn lower_tuple_subpats(\n+        &mut self,\n+        pats: &'tcx [P<hir::Pat>],\n+        expected_len: usize,\n+        gap_pos: Option<usize>,\n+    ) -> Vec<FieldPat<'tcx>> {\n+        pats.iter()\n+            .enumerate_and_adjust(expected_len, gap_pos)\n+            .map(|(i, subpattern)| FieldPat {\n+                field: Field::new(i),\n+                pattern: self.lower_pattern(subpattern)\n+            })\n+            .collect()\n+    }\n+\n     fn lower_patterns(&mut self, pats: &'tcx [P<hir::Pat>]) -> Vec<Pat<'tcx>> {\n         pats.iter().map(|p| self.lower_pattern(p)).collect()\n     }"}]}