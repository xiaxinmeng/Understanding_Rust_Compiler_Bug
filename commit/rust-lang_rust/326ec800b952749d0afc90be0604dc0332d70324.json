{"sha": "326ec800b952749d0afc90be0604dc0332d70324", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmVjODAwYjk1Mjc0OWQwYWZjOTBiZTA2MDRkYzAzMzJkNzAzMjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-28T02:26:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-28T02:35:30Z"}, "message": "Account for fully overlapping multiline annotations\n\nWhen two multiline span labels point at the same span, we special\ncase the output to avoid weird behavior:\n\n```\n        foo(\n   _____^\n  |_____|\n ||         bar,\n ||     );\n ||      ^\n ||______|\n  |______foo\n         baz\n```\n\ninstead showing\n\n```\n       foo(\n  _____^\n |         bar,\n |     );\n |      ^\n |      |\n |______foo\n        baz\n```", "tree": {"sha": "6f20d0c76b39acb66d2cce95a2c6010700508941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f20d0c76b39acb66d2cce95a2c6010700508941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326ec800b952749d0afc90be0604dc0332d70324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326ec800b952749d0afc90be0604dc0332d70324", "html_url": "https://github.com/rust-lang/rust/commit/326ec800b952749d0afc90be0604dc0332d70324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326ec800b952749d0afc90be0604dc0332d70324/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "925ca49cf12ef9ce328eb7ad66e63c4c86b02460", "url": "https://api.github.com/repos/rust-lang/rust/commits/925ca49cf12ef9ce328eb7ad66e63c4c86b02460", "html_url": "https://github.com/rust-lang/rust/commit/925ca49cf12ef9ce328eb7ad66e63c4c86b02460"}], "stats": {"total": 141, "additions": 116, "deletions": 25}, "files": [{"sha": "c3ee1db8d3056c26c85e824cf570acf0bd383994", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/326ec800b952749d0afc90be0604dc0332d70324/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec800b952749d0afc90be0604dc0332d70324/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=326ec800b952749d0afc90be0604dc0332d70324", "patch": "@@ -243,6 +243,7 @@ impl EmitterWriter {\n                         end_col: hi.col_display,\n                         is_primary: span_label.is_primary,\n                         label: span_label.label.clone(),\n+                        overlaps: false,\n                     };\n                     multiline_annotations.push((lo.file.clone(), ml.clone()));\n                     AnnotationType::Multiline(ml)\n@@ -258,10 +259,7 @@ impl EmitterWriter {\n                 };\n \n                 if !ann.is_multiline() {\n-                    add_annotation_to_file(&mut output,\n-                                           lo.file,\n-                                           lo.line,\n-                                           ann);\n+                    add_annotation_to_file(&mut output, lo.file, lo.line, ann);\n                 }\n             }\n         }\n@@ -274,10 +272,12 @@ impl EmitterWriter {\n                 let ref mut a = item.1;\n                 // Move all other multiline annotations overlapping with this one\n                 // one level to the right.\n-                if &ann != a &&\n+                if !(ann.same_span(a)) &&\n                     num_overlap(ann.line_start, ann.line_end, a.line_start, a.line_end, true)\n                 {\n                     a.increase_depth();\n+                } else if ann.same_span(a) && &ann != a {\n+                    a.overlaps = true;\n                 } else {\n                     break;\n                 }\n@@ -289,17 +289,44 @@ impl EmitterWriter {\n             if ann.depth > max_depth {\n                 max_depth = ann.depth;\n             }\n-            add_annotation_to_file(&mut output, file.clone(), ann.line_start, ann.as_start());\n-            let middle = min(ann.line_start + 4, ann.line_end);\n-            for line in ann.line_start + 1..middle {\n-                add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n-            }\n-            if middle < ann.line_end - 1 {\n-                for line in ann.line_end - 1..ann.line_end {\n+            let mut end_ann = ann.as_end();\n+            if !ann.overlaps {\n+                // avoid output like\n+                //\n+                //  |        foo(\n+                //  |   _____^\n+                //  |  |_____|\n+                //  | ||         bar,\n+                //  | ||     );\n+                //  | ||      ^\n+                //  | ||______|\n+                //  |  |______foo\n+                //  |         baz\n+                //\n+                // and instead get\n+                //\n+                //  |       foo(\n+                //  |  _____^\n+                //  | |         bar,\n+                //  | |     );\n+                //  | |      ^\n+                //  | |      |\n+                //  | |______foo\n+                //  |        baz\n+                add_annotation_to_file(&mut output, file.clone(), ann.line_start, ann.as_start());\n+                let middle = min(ann.line_start + 4, ann.line_end);\n+                for line in ann.line_start + 1..middle {\n                     add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n                 }\n+                if middle < ann.line_end - 1 {\n+                    for line in ann.line_end - 1..ann.line_end {\n+                        add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n+                    }\n+                }\n+            } else {\n+                end_ann.annotation_type = AnnotationType::Singleline;\n             }\n-            add_annotation_to_file(&mut output, file, ann.line_end, ann.as_end());\n+            add_annotation_to_file(&mut output, file, ann.line_end, end_ann);\n         }\n         for file_vec in output.iter_mut() {\n             file_vec.multiline_depth = max_depth;"}, {"sha": "60ee0c2572761d161dc839768727d061ff6a982e", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/326ec800b952749d0afc90be0604dc0332d70324/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec800b952749d0afc90be0604dc0332d70324/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=326ec800b952749d0afc90be0604dc0332d70324", "patch": "@@ -18,13 +18,20 @@ pub struct MultilineAnnotation {\n     pub end_col: usize,\n     pub is_primary: bool,\n     pub label: Option<String>,\n+    pub overlaps: bool,\n }\n \n impl MultilineAnnotation {\n     pub fn increase_depth(&mut self) {\n         self.depth += 1;\n     }\n \n+    /// Compare two `MultilineAnnotation`s considering only the `Span` they cover.\n+    pub fn same_span(&self, other: &MultilineAnnotation) -> bool {\n+        self.line_start == other.line_start && self.line_end == other.line_end\n+            && self.start_col == other.start_col && self.end_col == other.end_col\n+    }\n+\n     pub fn as_start(&self) -> Annotation {\n         Annotation {\n             start_col: self.start_col,"}, {"sha": "86910ffd894c4ea9870e82ddb46ed67f85d2cbf8", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/326ec800b952749d0afc90be0604dc0332d70324/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec800b952749d0afc90be0604dc0332d70324/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=326ec800b952749d0afc90be0604dc0332d70324", "patch": "@@ -374,6 +374,66 @@ error: foo\n \"#);\n }\n \n+#[test]\n+fn triple_exact_overlap() {\n+    test_harness(r#\"\n+fn foo() {\n+  X0 Y0 Z0\n+  X1 Y1 Z1\n+  X2 Y2 Z2\n+}\n+\"#,\n+    vec![\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`X` is a good letter\",\n+        },\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`Y` is a good letter too\",\n+        },\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`Z` label\",\n+        },\n+    ],\n+    r#\"\n+error: foo\n+ --> test.rs:3:3\n+  |\n+3 | /   X0 Y0 Z0\n+4 | |   X1 Y1 Z1\n+5 | |   X2 Y2 Z2\n+  | |    ^\n+  | |    |\n+  | |    `X` is a good letter\n+  | |____`Y` is a good letter too\n+  |      `Z` label\n+\n+\"#);\n+}\n+\n #[test]\n fn minimum_depth() {\n     test_harness(r#\""}, {"sha": "ef1c09d218058050b2ca72ece7c8412907009a60", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326ec800b952749d0afc90be0604dc0332d70324/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec800b952749d0afc90be0604dc0332d70324/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs?ref=326ec800b952749d0afc90be0604dc0332d70324", "patch": "@@ -3,7 +3,7 @@ fn warn(_: &str) {}\n macro_rules! intrinsic_match {\n     ($intrinsic:expr) => {\n         warn(format!(\"unsupported intrinsic {}\", $intrinsic));\n-        //^~ ERROR mismatched types\n+        //~^ ERROR mismatched types\n     };\n }\n "}, {"sha": "bc7a7247a12830e62a557676240d4813e0a3978f", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/326ec800b952749d0afc90be0604dc0332d70324/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/326ec800b952749d0afc90be0604dc0332d70324/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=326ec800b952749d0afc90be0604dc0332d70324", "patch": "@@ -1,16 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/dont-suggest-deref-inside-macro-issue-58298.rs:10:5\n+  --> $DIR/dont-suggest-deref-inside-macro-issue-58298.rs:11:5\n    |\n-LL |        intrinsic_match! {\n-   |   _____^\n-   |  |_____|\n-   | ||\n-LL | ||         \"abc\"\n-LL | ||     };\n-   | ||      ^\n-   | ||______|\n-   | |_______expected &str, found struct `std::string::String`\n-   |         in this macro invocation\n+LL | /     intrinsic_match! {\n+LL | |         \"abc\"\n+LL | |     };\n+   | |      ^\n+   | |      |\n+   | |______expected &str, found struct `std::string::String`\n+   |        in this macro invocation\n    |\n    = note: expected type `&str`\n               found type `std::string::String`"}]}