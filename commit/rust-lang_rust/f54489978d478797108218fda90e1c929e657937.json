{"sha": "f54489978d478797108218fda90e1c929e657937", "node_id": "C_kwDOAAsO6NoAKGY1NDQ4OTk3OGQ0Nzg3OTcxMDgyMThmZGE5MGUxYzkyOWU2NTc5Mzc", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-03-14T23:10:59Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-01T08:15:17Z"}, "message": "fix tests", "tree": {"sha": "9c380cc77c7d1b18161a524547e893d55396601f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c380cc77c7d1b18161a524547e893d55396601f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54489978d478797108218fda90e1c929e657937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54489978d478797108218fda90e1c929e657937", "html_url": "https://github.com/rust-lang/rust/commit/f54489978d478797108218fda90e1c929e657937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54489978d478797108218fda90e1c929e657937/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4453c20cae5e72073d3cb6180132de2f371d2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4453c20cae5e72073d3cb6180132de2f371d2de", "html_url": "https://github.com/rust-lang/rust/commit/a4453c20cae5e72073d3cb6180132de2f371d2de"}], "stats": {"total": 211, "additions": 76, "deletions": 135}, "files": [{"sha": "da419f065375b8c9711e97171af1fed30db8ac51", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -238,7 +238,6 @@ impl<'a> DerefMut for SnapshotParser<'a> {\n \n impl<'a> Parser<'a> {\n     #[rustc_lint_diagnostics]\n-    #[track_caller]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "02db4b095dcd16fb1cf3e6c9a5f27b886cb125ee", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -294,17 +294,6 @@ impl<'a> Parser<'a> {\n                 continue;\n             }\n \n-            // Special cases:\n-            if op.node == AssocOp::As {\n-                lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;\n-                continue;\n-            } else if op.node == AssocOp::DotDot || op.node == AssocOp::DotDotEq {\n-                // If we didn't have to handle `x..`/`x..=`, it would be pretty easy to\n-                // generalise it to the Fixity::None code.\n-                lhs = self.parse_expr_range(prec, lhs, op.node, cur_op_span)?;\n-                break;\n-            }\n-\n             let op = op.node;\n             // Special cases:\n             if op == AssocOp::As {\n@@ -619,9 +608,7 @@ impl<'a> Parser<'a> {\n             token::Ident(..) if this.may_recover() && this.is_mistaken_not_ident_negation() => {\n                 make_it!(this, attrs, |this, _| this.recover_not_expr(lo))\n             }\n-            _ => {\n-                return this.parse_expr_dot_or_call(Some(attrs));\n-            }\n+            _ => return this.parse_expr_dot_or_call(Some(attrs)),\n         }\n     }\n "}, {"sha": "b294e13402abc20f938d3a17101f86403b1b5a05", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -828,11 +828,10 @@ impl<'a> Parser<'a> {\n     }\n \n     fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {\n-        let res = kets.iter().any(|k| match expect {\n+        kets.iter().any(|k| match expect {\n             TokenExpectType::Expect => self.check(k),\n             TokenExpectType::NoExpect => self.token == **k,\n-        });\n-        res\n+        })\n     }\n \n     fn parse_seq_to_before_tokens<T>(\n@@ -960,6 +959,7 @@ impl<'a> Parser<'a> {\n             let t = f(self)?;\n             v.push(t);\n         }\n+\n         Ok((v, trailing, recovered))\n     }\n \n@@ -1045,7 +1045,6 @@ impl<'a> Parser<'a> {\n         f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     ) -> PResult<'a, (ThinVec<T>, bool /* trailing */)> {\n         let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;\n-\n         if !recovered {\n             self.eat(ket);\n         }"}, {"sha": "9a863a8eef795b40c7b10e4ed765b973ca239da0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -17,7 +17,7 @@ use thin_vec::ThinVec;\n use tracing::debug;\n \n /// Specifies how to parse a path.\n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum PathStyle {\n     /// In some contexts, notably in expressions, paths with generic arguments are ambiguous\n     /// with something else. For example, in expressions `segment < ....` can be interpreted"}, {"sha": "2ac6fac7f565ee5a1eafd1683e08c4a14549b944", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1261,15 +1261,14 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         opt_ns: Option<Namespace>, // `None` indicates a module path in import\n         finalize: Option<Finalize>,\n     ) -> PathResult<'a> {\n-        let res = self.r.resolve_path_with_ribs(\n+        self.r.resolve_path_with_ribs(\n             path,\n             opt_ns,\n             &self.parent_scope,\n             finalize,\n             Some(&self.ribs),\n             None,\n-        );\n-        res\n+        )\n     }\n \n     // AST resolution\n@@ -3486,6 +3485,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         //\n         // Similar thing, for types, happens in `report_errors` above.\n         let report_errors_for_call = |this: &mut Self, parent_err: Spanned<ResolutionError<'a>>| {\n+            if !source.is_call() {\n+                return Some(parent_err);\n+            }\n+\n             // Before we start looking for candidates, we have to get our hands\n             // on the type user is trying to perform invocation on; basically:\n             // we're transforming `HashMap::new` into just `HashMap`.\n@@ -3726,6 +3729,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             \"resolve_qpath(qself={:?}, path={:?}, ns={:?}, finalize={:?})\",\n             qself, path, ns, finalize,\n         );\n+\n         if let Some(qself) = qself {\n             if qself.position == 0 {\n                 // This is a case like `<T>::B`, where there is no"}, {"sha": "fbdde272cb62f0212993abf59e2d3f63dce5877a", "filename": "src/tools/rustfmt/tests/source/type-ascription.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype-ascription.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,10 +1,10 @@\n-\n+// #101728, we remove type ascription, so this test case is changed to `var as ty`\n fn main() {\n-    let xxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy  :  SomeTrait<AA, BB, CC>;\n+    let xxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy as SomeTrait<AA, BB, CC>;\n \n-    let xxxxxxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+    let xxxxxxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n-    let z = funk(yyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzz, wwwwww): AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+    let z = funk(yyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzz, wwwwww) as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n-    x : u32 - 1u32 / 10f32 : u32\n+    let _ = x as u32 - 1u32 / (10f32 as u32);\n }"}, {"sha": "17ac1498c932cf6a3f76177c7e39b93c42bc6c6f", "filename": "src/tools/rustfmt/tests/target/configs/format_macro_bodies/true.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_bodies%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_bodies%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_bodies%2Ftrue.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,10 +1,6 @@\n // rustfmt-format_macro_bodies: true\n \n macro_rules! foo {\n-    ($a: ident : $b: ty) => {\n-        $a(42): $b;\n-    };\n-    ($a: ident $b: ident $c: ident) => {\n-        $a = $b + $c;\n-    };\n+    ($a: ident : $b: ty) => { $a(42): $b; };\n+    ($a: ident $b: ident $c: ident) => { $a=$b+$c; };\n }"}, {"sha": "01ecac9879d69c22e93672cf62bae714d40ba3d0", "filename": "src/tools/rustfmt/tests/target/configs/format_macro_matchers/false.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_matchers%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_matchers%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_matchers%2Ffalse.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,10 +1,6 @@\n // rustfmt-format_macro_matchers: false\n \n macro_rules! foo {\n-    ($a: ident : $b: ty) => {\n-        $a(42): $b;\n-    };\n-    ($a: ident $b: ident $c: ident) => {\n-        $a = $b + $c;\n-    };\n+    ($a: ident : $b: ty) => { $a(42): $b; };\n+    ($a: ident $b: ident $c: ident) => { $a=$b+$c; };\n }"}, {"sha": "fa0442e228ac8ef91ef90f493d5527f2f404788e", "filename": "src/tools/rustfmt/tests/target/configs/format_macro_matchers/true.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_matchers%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_matchers%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fformat_macro_matchers%2Ftrue.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,10 +1,6 @@\n // rustfmt-format_macro_matchers: true\n \n macro_rules! foo {\n-    ($a:ident : $b:ty) => {\n-        $a(42): $b;\n-    };\n-    ($a:ident $b:ident $c:ident) => {\n-        $a = $b + $c;\n-    };\n+    ($a: ident : $b: ty) => { $a(42): $b; };\n+    ($a: ident $b: ident $c: ident) => { $a=$b+$c; };\n }"}, {"sha": "7b4574349df3ec046cb1dd84c595c0bdffd6fce2", "filename": "src/tools/rustfmt/tests/target/macros.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fmacros.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -122,7 +122,7 @@ fn main() {\n         20, 21, 22);\n \n     // #1092\n-    chain!(input, a: take!(max_size), || []);\n+    chain!(input, a:take!(max_size), || []);\n \n     // #2727\n     foo!(\"bar\");\n@@ -156,17 +156,13 @@ fn issue1178() {\n }\n \n fn issue1739() {\n-    sql_function!(\n-        add_rss_item,\n-        add_rss_item_t,\n-        (\n-            a: types::Integer,\n-            b: types::Timestamptz,\n-            c: types::Text,\n-            d: types::Text,\n-            e: types::Text\n-        )\n-    );\n+    sql_function!(add_rss_item,\n+                  add_rss_item_t,\n+                  (a: types::Integer,\n+                   b: types::Timestamptz,\n+                   c: types::Text,\n+                   d: types::Text,\n+                   e: types::Text));\n \n     w.slice_mut(s![\n         ..,\n@@ -232,7 +228,7 @@ fn issue_3174() {\n             \"debugMessage\": debug.message,\n         })\n     } else {\n-        json!({ \"errorKind\": format!(\"{:?}\", error.err_kind()) })\n+        json!({\"errorKind\": format!(\"{:?}\", error.err_kind())})\n     };\n }\n "}, {"sha": "99dc0336864783a4faf67f459d386ccb9d184006", "filename": "src/tools/rustfmt/tests/target/type-ascription.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype-ascription.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,12 +1,13 @@\n+// #101728, we remove type ascription, so this test case is changed to `var as ty`\n fn main() {\n     let xxxxxxxxxxx =\n-        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: SomeTrait<AA, BB, CC>;\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy as SomeTrait<AA, BB, CC>;\n \n     let xxxxxxxxxxxxxxx =\n-        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+        yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n-    let z = funk(yyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzz, wwwwww):\n-        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n+    let z = funk(yyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzz, wwwwww)\n+        as AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n-    x: u32 - 1u32 / 10f32: u32\n+    let _ = x as u32 - 1u32 / (10f32 as u32);\n }"}, {"sha": "c789ecb055a7df642549b525326661b628a0af27", "filename": "src/tools/rustfmt/tests/target/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -129,7 +129,7 @@ fn issue3117() {\n fn issue3139() {\n     assert_eq!(\n         to_json_value(&None::<i32>).unwrap(),\n-        json!({ \"test\": None::<i32> })\n+        json!(  { \"test\": None  ::  <i32> }  )\n     );\n }\n "}, {"sha": "d78f7a7fbcee1cbb6671a60ab8c1f5e9d556303f", "filename": "tests/ui/generic-associated-types/equality-bound.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -36,10 +36,7 @@ error[E0433]: failed to resolve: use of undeclared type `I`\n   --> $DIR/equality-bound.rs:9:41\n    |\n LL | fn sum3<J: Iterator>(i: J) -> i32 where I::Item = i32 {\n-   |                                         ^\n-   |                                         |\n-   |                                         use of undeclared type `I`\n-   |                                         help: a type parameter with a similar name exists: `J`\n+   |                                         ^ use of undeclared type `I`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "56af618d484b537df4cb63cb090227c369e3655f", "filename": "tests/ui/macros/builtin-prelude-no-accidents.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -4,21 +4,18 @@ error[E0433]: failed to resolve: use of undeclared crate or module `env`\n LL |     env::current_dir;\n    |     ^^^ use of undeclared crate or module `env`\n \n-error[E0433]: failed to resolve: use of undeclared crate or module `vec`\n-  --> $DIR/builtin-prelude-no-accidents.rs:7:14\n-   |\n-LL |     type B = vec::Vec<u8>;\n-   |              ^^^\n-   |              |\n-   |              use of undeclared crate or module `vec`\n-   |              help: a struct with a similar name exists (notice the capitalization): `Vec`\n-\n error[E0433]: failed to resolve: use of undeclared crate or module `panic`\n   --> $DIR/builtin-prelude-no-accidents.rs:6:14\n    |\n LL |     type A = panic::PanicInfo;\n    |              ^^^^^ use of undeclared crate or module `panic`\n \n+error[E0433]: failed to resolve: use of undeclared crate or module `vec`\n+  --> $DIR/builtin-prelude-no-accidents.rs:7:14\n+   |\n+LL |     type B = vec::Vec<u8>;\n+   |              ^^^ use of undeclared crate or module `vec`\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "792d788dde7780757574d7d04a0a092d6e9f873b", "filename": "tests/ui/parser/dyn-trait-compatibility.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,3 +1,15 @@\n+error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n+  --> $DIR/dyn-trait-compatibility.rs:3:11\n+   |\n+LL | type A1 = dyn::dyn;\n+   |           ^^^ use of undeclared crate or module `dyn`\n+\n+error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n+  --> $DIR/dyn-trait-compatibility.rs:9:23\n+   |\n+LL | type A3 = dyn<<dyn as dyn>::dyn>;\n+   |                       ^^^ use of undeclared crate or module `dyn`\n+\n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:1:11\n    |\n@@ -40,18 +52,6 @@ error[E0412]: cannot find type `dyn` in this scope\n LL | type A3 = dyn<<dyn as dyn>::dyn>;\n    |                ^^^ not found in this scope\n \n-error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n-  --> $DIR/dyn-trait-compatibility.rs:3:11\n-   |\n-LL | type A1 = dyn::dyn;\n-   |           ^^^ use of undeclared crate or module `dyn`\n-\n-error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n-  --> $DIR/dyn-trait-compatibility.rs:9:23\n-   |\n-LL | type A3 = dyn<<dyn as dyn>::dyn>;\n-   |                       ^^^ use of undeclared crate or module `dyn`\n-\n error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0405, E0412, E0433."}, {"sha": "e1349fb02ea768eebc398170ce0532d0d85fccf0", "filename": "tests/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,3 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type `E`\n+  --> $DIR/pattern-error-continue.rs:33:9\n+   |\n+LL |         E::V => {}\n+   |         ^ use of undeclared type `E`\n+\n error[E0532]: expected tuple struct or tuple variant, found unit variant `A::D`\n   --> $DIR/pattern-error-continue.rs:18:9\n    |\n@@ -50,15 +56,6 @@ note: function defined here\n LL | fn f(_c: char) {}\n    |    ^ --------\n \n-error[E0433]: failed to resolve: use of undeclared type `E`\n-  --> $DIR/pattern-error-continue.rs:33:9\n-   |\n-LL |         E::V => {}\n-   |         ^\n-   |         |\n-   |         use of undeclared type `E`\n-   |         help: an enum with a similar name exists: `A`\n-\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0023, E0308, E0433, E0532."}, {"sha": "4be1019968bcc7c7b20192bfe24a6e3ec231bc34", "filename": "tests/ui/resolve/resolve-variant-assoc-item.stderr", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -3,26 +3,12 @@ error[E0433]: failed to resolve: `V` is a variant, not a module\n    |\n LL |     E::V::associated_item;\n    |        ^ `V` is a variant, not a module\n-   |\n-help: there is an enum variant `E::V`; try using the variant's enum\n-   |\n-LL |     E;\n-   |     ~\n \n error[E0433]: failed to resolve: `V` is a variant, not a module\n   --> $DIR/resolve-variant-assoc-item.rs:6:5\n    |\n LL |     V::associated_item;\n    |     ^ `V` is a variant, not a module\n-   |\n-help: there is an enum variant `E::V`; try using the variant's enum\n-   |\n-LL |     E;\n-   |     ~\n-help: an enum with a similar name exists\n-   |\n-LL |     E::associated_item;\n-   |     ~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a39f4a9daaaf5f3c6cbd0e84b11f1306e8249530", "filename": "tests/ui/traits/associated_type_bound/assoc_type_bound_with_struct.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,3 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type `Unresolved`\n+  --> $DIR/assoc_type_bound_with_struct.rs:19:31\n+   |\n+LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+   |                               ^^^^^^^^^^ use of undeclared type `Unresolved`\n+\n error[E0404]: expected trait, found struct `String`\n   --> $DIR/assoc_type_bound_with_struct.rs:5:46\n    |\n@@ -85,12 +91,6 @@ LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n    |\n    = note: similarly named trait `ToString` defined here\n \n-error[E0433]: failed to resolve: use of undeclared type `Unresolved`\n-  --> $DIR/assoc_type_bound_with_struct.rs:19:31\n-   |\n-LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n-   |                               ^^^^^^^^^^ use of undeclared type `Unresolved`\n-\n error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0404, E0405."}, {"sha": "1aed1dbe4babd21662ce83308a7bcdc0f1e66983", "filename": "tests/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -1,3 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type `NonExistent`\n+  --> $DIR/type-path-err-node-types.rs:15:5\n+   |\n+LL |     NonExistent::Assoc::<u8>;\n+   |     ^^^^^^^^^^^ use of undeclared type `NonExistent`\n+\n error[E0412]: cannot find type `Nonexistent` in this scope\n   --> $DIR/type-path-err-node-types.rs:7:12\n    |\n@@ -16,12 +22,6 @@ error[E0425]: cannot find value `nonexistent` in this scope\n LL |     nonexistent.nonexistent::<u8>();\n    |     ^^^^^^^^^^^ not found in this scope\n \n-error[E0433]: failed to resolve: use of undeclared type `NonExistent`\n-  --> $DIR/type-path-err-node-types.rs:15:5\n-   |\n-LL |     NonExistent::Assoc::<u8>;\n-   |     ^^^^^^^^^^^ use of undeclared type `NonExistent`\n-\n error[E0282]: type annotations needed\n   --> $DIR/type-path-err-node-types.rs:23:14\n    |"}, {"sha": "923d858b5526a3a28ff71639b5b5df1660b4dcd4", "filename": "tests/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54489978d478797108218fda90e1c929e657937/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=f54489978d478797108218fda90e1c929e657937", "patch": "@@ -3,22 +3,12 @@ error[E0433]: failed to resolve: `Y` is a variant, not a module\n    |\n LL |     let _: <u8 as E::Y>::NN;\n    |                      ^ `Y` is a variant, not a module\n-   |\n-help: there is an enum variant `E::Y`; try using the variant's enum\n-   |\n-LL |     let _: E;\n-   |            ~\n \n error[E0433]: failed to resolve: `Y` is a variant, not a module\n   --> $DIR/ufcs-partially-resolved.rs:50:15\n    |\n LL |     <u8 as E::Y>::NN;\n    |               ^ `Y` is a variant, not a module\n-   |\n-help: there is an enum variant `E::Y`; try using the variant's enum\n-   |\n-LL |     E;\n-   |     ~\n \n error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:19:24"}]}