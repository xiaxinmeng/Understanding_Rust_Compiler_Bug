{"sha": "184f4cbf5df909146b05aaa3b7f2f0b27ac36590", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NGY0Y2JmNWRmOTA5MTQ2YjA1YWFhM2I3ZjJmMGIyN2FjMzY1OTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-14T10:00:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T10:00:46Z"}, "message": "Merge #7110\n\n7110: Deduplicate macros when offering completion r=matklad a=AdnoC\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/7081\r\n\r\nWhen iterating over the names within the `hir_def::resolver::Scope` for a module, track what macros are in the `hir_def::item_scope::ItemScope::legacy_macros` collection for the module. When iterating over names from the prelude, do not proccess the name if it had been in the `legacy_macros` collection.\r\n\r\nThis is implemented with a `FxHashSet` in the `Scope::process_names` function that is populated when iterating over `legacy_macros` and checked when iterating over the prelude.\r\n\r\nAlternative implementation could instead query the `legacy_macros` `FxHashMap` directly when processing names in the prelude.\r\n\r\nAlso, I'd like to add a test for this, but I'm not sure where it could be added.\n\nCo-authored-by: AdnoC <adam.r.cutler@gmail.com>", "tree": {"sha": "c9d803d2fefdc31278338fc67f6df8d1bf747a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d803d2fefdc31278338fc67f6df8d1bf747a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/184f4cbf5df909146b05aaa3b7f2f0b27ac36590", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgABZOCRBK7hj4Ov3rIwAAdHIIAI844RxneFUI91Nhw8NcyCe7\n+xLtSxQAH0a+kpQBhqjfcI1tsnP8n/hMt7Qo07U+DGRyNnqx90ONnxwVnqHMaOuw\noIDk+Pq2g9gXsrlvfZ9LIn29pRe/gaztJcTZdR4CbtcBegAcuBjwgQe0s/TSkU7k\nKsw0Km7pzf1Wscxav/ncHhgVqLoVlokVWg4AONA6+755kMM+ztrwNMcSrcqEfQjJ\nvW4Iz784mb7i3Sq7RUzKt+UfLjyM8fmKpmRMFMcLvfszzvyyW8R2OisHw16rF36X\nYGlTvlazguWfVIKxwnv0Q5RtYqK3RhaqDQ/mwIoIhcZE6Cc/YWBmV4X5U83/RGE=\n=ZMh2\n-----END PGP SIGNATURE-----\n", "payload": "tree c9d803d2fefdc31278338fc67f6df8d1bf747a12\nparent 39167b97d8a62adadecc9b67caac65ec556768cf\nparent cca0dfa79ed968d41464eb7beb7aaa970e2d429f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610618446 +0000\ncommitter GitHub <noreply@github.com> 1610618446 +0000\n\nMerge #7110\n\n7110: Deduplicate macros when offering completion r=matklad a=AdnoC\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/7081\r\n\r\nWhen iterating over the names within the `hir_def::resolver::Scope` for a module, track what macros are in the `hir_def::item_scope::ItemScope::legacy_macros` collection for the module. When iterating over names from the prelude, do not proccess the name if it had been in the `legacy_macros` collection.\r\n\r\nThis is implemented with a `FxHashSet` in the `Scope::process_names` function that is populated when iterating over `legacy_macros` and checked when iterating over the prelude.\r\n\r\nAlternative implementation could instead query the `legacy_macros` `FxHashMap` directly when processing names in the prelude.\r\n\r\nAlso, I'd like to add a test for this, but I'm not sure where it could be added.\n\nCo-authored-by: AdnoC <adam.r.cutler@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/184f4cbf5df909146b05aaa3b7f2f0b27ac36590", "html_url": "https://github.com/rust-lang/rust/commit/184f4cbf5df909146b05aaa3b7f2f0b27ac36590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/184f4cbf5df909146b05aaa3b7f2f0b27ac36590/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39167b97d8a62adadecc9b67caac65ec556768cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/39167b97d8a62adadecc9b67caac65ec556768cf", "html_url": "https://github.com/rust-lang/rust/commit/39167b97d8a62adadecc9b67caac65ec556768cf"}, {"sha": "cca0dfa79ed968d41464eb7beb7aaa970e2d429f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca0dfa79ed968d41464eb7beb7aaa970e2d429f", "html_url": "https://github.com/rust-lang/rust/commit/cca0dfa79ed968d41464eb7beb7aaa970e2d429f"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "a594afce6686761f409ad25fdd4832cb61139596", "filename": "crates/hir_def/src/per_ns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/184f4cbf5df909146b05aaa3b7f2f0b27ac36590/crates%2Fhir_def%2Fsrc%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184f4cbf5df909146b05aaa3b7f2f0b27ac36590/crates%2Fhir_def%2Fsrc%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fper_ns.rs?ref=184f4cbf5df909146b05aaa3b7f2f0b27ac36590", "patch": "@@ -7,7 +7,7 @@ use hir_expand::MacroDefId;\n \n use crate::{item_scope::ItemInNs, visibility::Visibility, ModuleDefId};\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct PerNs {\n     pub types: Option<(ModuleDefId, Visibility)>,\n     pub values: Option<(ModuleDefId, Visibility)>,"}, {"sha": "61059c3499f44fc2ddc1eaad6d1ead9581686f7a", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/184f4cbf5df909146b05aaa3b7f2f0b27ac36590/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184f4cbf5df909146b05aaa3b7f2f0b27ac36590/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=184f4cbf5df909146b05aaa3b7f2f0b27ac36590", "patch": "@@ -490,6 +490,7 @@ pub enum ScopeDef {\n \n impl Scope {\n     fn process_names(&self, db: &dyn DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n+        let mut seen = FxHashSet::default();\n         match self {\n             Scope::ModuleScope(m) => {\n                 // FIXME: should we provide `self` here?\n@@ -503,7 +504,9 @@ impl Scope {\n                     f(name.clone(), ScopeDef::PerNs(def));\n                 });\n                 m.crate_def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n-                    f(name.clone(), ScopeDef::PerNs(PerNs::macros(macro_, Visibility::Public)));\n+                    let scope = PerNs::macros(macro_, Visibility::Public);\n+                    seen.insert((name.clone(), scope));\n+                    f(name.clone(), ScopeDef::PerNs(scope));\n                 });\n                 m.crate_def_map.extern_prelude.iter().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::types(def, Visibility::Public)));\n@@ -514,7 +517,10 @@ impl Scope {\n                 if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     prelude_def_map[prelude.local_id].scope.entries().for_each(|(name, def)| {\n-                        f(name.clone(), ScopeDef::PerNs(def));\n+                        let seen_tuple = (name.clone(), def);\n+                        if !seen.contains(&seen_tuple) {\n+                            f(seen_tuple.0, ScopeDef::PerNs(def));\n+                        }\n                     });\n                 }\n             }"}, {"sha": "f3bc9d680039b98067386f64e3d6b92a3efd510c", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/184f4cbf5df909146b05aaa3b7f2f0b27ac36590/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184f4cbf5df909146b05aaa3b7f2f0b27ac36590/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=184f4cbf5df909146b05aaa3b7f2f0b27ac36590", "patch": "@@ -85,7 +85,7 @@ impl RawVisibility {\n }\n \n /// Visibility of an item, with the path resolved.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum Visibility {\n     /// Visibility is restricted to a certain module.\n     Module(ModuleId),"}]}