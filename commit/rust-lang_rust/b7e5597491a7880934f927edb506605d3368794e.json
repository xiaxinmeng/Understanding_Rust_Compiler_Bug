{"sha": "b7e5597491a7880934f927edb506605d3368794e", "node_id": "C_kwDOAAsO6NoAKGI3ZTU1OTc0OTFhNzg4MDkzNGY5MjdlZGI1MDY2MDVkMzM2ODc5NGU", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-18T20:57:10Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-18T20:57:10Z"}, "message": "Use undef for partially-uninit constants up to 1024 bytes\n\nThere needs to be some limit to avoid perf regressions on large arrays\nwith undef in each element (see comment in the code).", "tree": {"sha": "9ba5b57f286f113d989ef95effffe258572ef78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ba5b57f286f113d989ef95effffe258572ef78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e5597491a7880934f927edb506605d3368794e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5597491a7880934f927edb506605d3368794e", "html_url": "https://github.com/rust-lang/rust/commit/b7e5597491a7880934f927edb506605d3368794e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e5597491a7880934f927edb506605d3368794e/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c56fa8c30821129b0960180f528d4a1a4f9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c56fa8c30821129b0960180f528d4a1a4f9316", "html_url": "https://github.com/rust-lang/rust/commit/b8c56fa8c30821129b0960180f528d4a1a4f9316"}], "stats": {"total": 66, "additions": 23, "deletions": 43}, "files": [{"sha": "ddd87c5b24d553887b4050218569b54fc25c73fb", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5597491a7880934f927edb506605d3368794e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5597491a7880934f927edb506605d3368794e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=b7e5597491a7880934f927edb506605d3368794e", "patch": "@@ -53,8 +53,10 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) ->\n             }\n         };\n \n-        // Generating partially-uninit consts inhibits optimizations, so it is disabled by default.\n-        // See https://github.com/rust-lang/rust/issues/84565.\n+        // Generating partially-uninit consts is limited to small allocations,\n+        // to avoid the cost of generating large complex const expressions.\n+        // For example, `[(u32, u8); 1024 * 1024]` contains uninit padding in each element,\n+        // and would result in `{ [5 x i8] zeroinitializer, [3 x i8] undef, ...repeat 1M times... }`.\n         let allow_partially_uninit =\n             match cx.sess().opts.debugging_opts.partially_uninit_const_threshold {\n                 Some(max) => range.len() <= max,"}, {"sha": "59ce7cdb603628da93c6f1936d1dd0047d409857", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5597491a7880934f927edb506605d3368794e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5597491a7880934f927edb506605d3368794e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b7e5597491a7880934f927edb506605d3368794e", "patch": "@@ -1341,9 +1341,9 @@ options! {\n         \"panic strategy for panics in drops\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n         \"parse only; do not compile, assemble, or link (default: no)\"),\n-    partially_uninit_const_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n+    partially_uninit_const_threshold: Option<usize> = (Some(1024), parse_opt_number, [TRACKED],\n         \"allow generating const initializers with mixed init/uninit bytes, \\\n-        and set the maximum total size of a const allocation for which this is allowed (default: never)\"),\n+        and set the maximum total size of a const allocation for which this is allowed (default: 1024 bytes)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some performance-related statistics (default: no)\"),\n     pick_stable_methods_before_any_unstable: bool = (true, parse_bool, [TRACKED],"}, {"sha": "e47a9f9ee20118ed486df937ae375fe154cff5b7", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5597491a7880934f927edb506605d3368794e/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5597491a7880934f927edb506605d3368794e/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=b7e5597491a7880934f927edb506605d3368794e", "patch": "@@ -43,14 +43,14 @@ pub fn inline_enum_const() -> E<i8, i16> {\n #[no_mangle]\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n     // Check that low_align_const and high_align_const use the same constant\n-    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 2 %1, i8* align 2 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n+    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 2 %1, i8* align 2 getelementptr inbounds (<{ [4 x i8], [4 x i8] }>, <{ [4 x i8], [4 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n     *&E::A(0)\n }\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n pub fn high_align_const() -> E<i16, i32> {\n     // Check that low_align_const and high_align_const use the same constant\n-    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n+    // CHECK: memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [4 x i8], [4 x i8] }>, <{ [4 x i8], [4 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0), i{{(32|64)}} 8, i1 false)\n     *&E::A(0)\n }"}, {"sha": "f7420e4126ed0999d40a263f300bdb93e0d940cb", "filename": "src/test/codegen/uninit-consts-allow-partially-uninit.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fcodegen%2Funinit-consts-allow-partially-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c56fa8c30821129b0960180f528d4a1a4f9316/src%2Ftest%2Fcodegen%2Funinit-consts-allow-partially-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funinit-consts-allow-partially-uninit.rs?ref=b8c56fa8c30821129b0960180f528d4a1a4f9316", "patch": "@@ -1,35 +0,0 @@\n-// compile-flags: -C no-prepopulate-passes -Z partially_uninit_const_threshold=1024\n-\n-// Like uninit-consts.rs, but tests that we correctly generate partially-uninit consts\n-// when the (disabled by default) partially_uninit_const_threshold flag is used.\n-\n-#![crate_type = \"lib\"]\n-\n-use std::mem::MaybeUninit;\n-\n-pub struct PartiallyUninit {\n-    x: u32,\n-    y: MaybeUninit<[u8; 10]>\n-}\n-\n-// This should be partially undef.\n-// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [4 x i8], [12 x i8] }> <{ [4 x i8] c\"\\EF\\BE\\AD\\DE\", [12 x i8] undef }>, align 4\n-\n-// This shouldn't contain undef, since it's larger than the 1024 byte limit.\n-// CHECK: [[UNINIT_PADDING_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [32768 x i8] }> <{ [32768 x i8] c\"{{.+}}\" }>, align 4\n-\n-// CHECK-LABEL: @partially_uninit\n-#[no_mangle]\n-pub const fn partially_uninit() -> PartiallyUninit {\n-    const X: PartiallyUninit = PartiallyUninit { x: 0xdeadbeef, y: MaybeUninit::uninit() };\n-    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [4 x i8], [12 x i8] }>, <{ [4 x i8], [12 x i8] }>* [[PARTIALLY_UNINIT]], i32 0, i32 0, i32 0), i{{(32|64)}} 16, i1 false)\n-    X\n-}\n-\n-// CHECK-LABEL: @uninit_padding_huge\n-#[no_mangle]\n-pub const fn uninit_padding_huge() -> [(u32, u8); 4096] {\n-    const X: [(u32, u8); 4096] = [(123, 45); 4096];\n-    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [32768 x i8] }>, <{ [32768 x i8] }>* [[UNINIT_PADDING_HUGE]], i32 0, i32 0, i32 0), i{{(32|64)}} 32768, i1 false)\n-    X\n-}"}, {"sha": "0ca2197ecbcc7487eefd5f7318846d7f3c4cb7f3", "filename": "src/test/codegen/uninit-consts.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7e5597491a7880934f927edb506605d3368794e/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e5597491a7880934f927edb506605d3368794e/src%2Ftest%2Fcodegen%2Funinit-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funinit-consts.rs?ref=b7e5597491a7880934f927edb506605d3368794e", "patch": "@@ -12,7 +12,12 @@ pub struct PartiallyUninit {\n }\n \n // CHECK: [[FULLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [10 x i8] }> undef\n-// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [16 x i8] }> <{ [16 x i8] c\"\\EF\\BE\\AD\\DE\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\" }>, align 4\n+\n+// CHECK: [[PARTIALLY_UNINIT:@[0-9]+]] = private unnamed_addr constant <{ [4 x i8], [12 x i8] }> <{ [4 x i8] c\"\\EF\\BE\\AD\\DE\", [12 x i8] undef }>, align 4\n+\n+// This shouldn't contain undef, since it's larger than the 1024 byte limit.\n+// CHECK: [[UNINIT_PADDING_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [32768 x i8] }> <{ [32768 x i8] c\"{{.+}}\" }>, align 4\n+\n // CHECK: [[FULLY_UNINIT_HUGE:@[0-9]+]] = private unnamed_addr constant <{ [16384 x i8] }> undef\n \n // CHECK-LABEL: @fully_uninit\n@@ -27,7 +32,15 @@ pub const fn fully_uninit() -> MaybeUninit<[u8; 10]> {\n #[no_mangle]\n pub const fn partially_uninit() -> PartiallyUninit {\n     const X: PartiallyUninit = PartiallyUninit { x: 0xdeadbeef, y: MaybeUninit::uninit() };\n-    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [16 x i8] }>, <{ [16 x i8] }>* [[PARTIALLY_UNINIT]], i32 0, i32 0, i32 0), i{{(32|64)}} 16, i1 false)\n+    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [4 x i8], [12 x i8] }>, <{ [4 x i8], [12 x i8] }>* [[PARTIALLY_UNINIT]], i32 0, i32 0, i32 0), i{{(32|64)}} 16, i1 false)\n+    X\n+}\n+\n+// CHECK-LABEL: @uninit_padding_huge\n+#[no_mangle]\n+pub const fn uninit_padding_huge() -> [(u32, u8); 4096] {\n+    const X: [(u32, u8); 4096] = [(123, 45); 4096];\n+    // CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{(32|64)}}(i8* align 4 %1, i8* align 4 getelementptr inbounds (<{ [32768 x i8] }>, <{ [32768 x i8] }>* [[UNINIT_PADDING_HUGE]], i32 0, i32 0, i32 0), i{{(32|64)}} 32768, i1 false)\n     X\n }\n "}]}