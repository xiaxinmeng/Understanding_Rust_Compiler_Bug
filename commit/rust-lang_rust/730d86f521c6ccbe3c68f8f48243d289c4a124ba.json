{"sha": "730d86f521c6ccbe3c68f8f48243d289c4a124ba", "node_id": "C_kwDOAAsO6NoAKDczMGQ4NmY1MjFjNmNjYmUzYzY4ZjhmNDgyNDNkMjg5YzRhMTI0YmE", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T01:05:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T01:05:20Z"}, "message": "Rollup merge of #88782 - asquared31415:issue-79559, r=cjgillot\n\nFix ICE when `start` lang item has wrong generics\n\nIn my previous pr #87875 I missed the requirements on the `start` lang item due to its relative difficulty to test and opting for more conservative estimates.  This fixes that by updating the requirement to be exactly one generic type.\n\nThe `start` lang item should have exactly one generic type for the return type of the `main` fn ptr passed to it.  I believe having zero would previously *sometimes* compile (often with the use of `fn() -> ()` as the fn ptr but it was likely UB to call if the return type of `main` was not `()` as far as I know) however it also sometimes would not for various errors including ICEs and LLVM errors depending on exact situations.  Having more than 1 generic has always failed with an ICE because only the one generic type is expected and provided.\n\nFixes #79559, fixes #73584, fixes #83117 (all duplicates)\nRelevant to #9307\n\nr? ````@cjgillot````", "tree": {"sha": "b7075e5ecad956c1bc9b9c17ec0d8cf4546876b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7075e5ecad956c1bc9b9c17ec0d8cf4546876b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730d86f521c6ccbe3c68f8f48243d289c4a124ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730d86f521c6ccbe3c68f8f48243d289c4a124ba", "html_url": "https://github.com/rust-lang/rust/commit/730d86f521c6ccbe3c68f8f48243d289c4a124ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730d86f521c6ccbe3c68f8f48243d289c4a124ba/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d5457e6d8d4d1d943d8368af680545fb6222b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d5457e6d8d4d1d943d8368af680545fb6222b2", "html_url": "https://github.com/rust-lang/rust/commit/23d5457e6d8d4d1d943d8368af680545fb6222b2"}, {"sha": "87ba8d24d608276a54a7fcbf00627353e64a5813", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ba8d24d608276a54a7fcbf00627353e64a5813", "html_url": "https://github.com/rust-lang/rust/commit/87ba8d24d608276a54a7fcbf00627353e64a5813"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "1ed78547a60cd49a40f20493f9fcf964a3bc695c", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/730d86f521c6ccbe3c68f8f48243d289c4a124ba/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730d86f521c6ccbe3c68f8f48243d289c4a124ba/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=730d86f521c6ccbe3c68f8f48243d289c4a124ba", "patch": "@@ -15,11 +15,12 @@ pub trait Copy {}\n pub unsafe trait Freeze {}\n \n #[lang = \"start\"]\n-#[start]\n-fn start(_argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n \n+fn main() {}\n+\n struct A;\n \n impl A {"}, {"sha": "6210d7c6cfd80c1d32369494f3010694b606dc65", "filename": "tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/730d86f521c6ccbe3c68f8f48243d289c4a124ba/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/730d86f521c6ccbe3c68f8f48243d289c4a124ba/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=730d86f521c6ccbe3c68f8f48243d289c4a124ba", "patch": "@@ -1,5 +1,5 @@\n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/def_id_nocore.rs:26:19\n+  --> $DIR/def_id_nocore.rs:27:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^"}]}